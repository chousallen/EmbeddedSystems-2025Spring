
W01-RTOS_LED.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008958  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000015c  08008ae8  08008ae8  00009ae8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008c44  08008c44  0000a068  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08008c44  08008c44  00009c44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008c4c  08008c4c  0000a068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008c4c  08008c4c  00009c4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008c50  08008c50  00009c50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08008c54  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002da8  20000068  08008cbc  0000a068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002e10  08008cbc  0000ae10  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000a068  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002879c  00000000  00000000  0000a098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004bb6  00000000  00000000  00032834  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002330  00000000  00000000  000373f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001b78  00000000  00000000  00039720  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00004d9e  00000000  00000000  0003b298  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00029625  00000000  00000000  00040036  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00108d78  00000000  00000000  0006965b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001723d3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009b34  00000000  00000000  00172418  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005d  00000000  00000000  0017bf4c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000068 	.word	0x20000068
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08008ad0 	.word	0x08008ad0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000006c 	.word	0x2000006c
 80001cc:	08008ad0 	.word	0x08008ad0

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295
 80001e4:	f000 b988 	b.w	80004f8 <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	9d08      	ldr	r5, [sp, #32]
 8000206:	468e      	mov	lr, r1
 8000208:	4604      	mov	r4, r0
 800020a:	4688      	mov	r8, r1
 800020c:	2b00      	cmp	r3, #0
 800020e:	d14a      	bne.n	80002a6 <__udivmoddi4+0xa6>
 8000210:	428a      	cmp	r2, r1
 8000212:	4617      	mov	r7, r2
 8000214:	d962      	bls.n	80002dc <__udivmoddi4+0xdc>
 8000216:	fab2 f682 	clz	r6, r2
 800021a:	b14e      	cbz	r6, 8000230 <__udivmoddi4+0x30>
 800021c:	f1c6 0320 	rsb	r3, r6, #32
 8000220:	fa01 f806 	lsl.w	r8, r1, r6
 8000224:	fa20 f303 	lsr.w	r3, r0, r3
 8000228:	40b7      	lsls	r7, r6
 800022a:	ea43 0808 	orr.w	r8, r3, r8
 800022e:	40b4      	lsls	r4, r6
 8000230:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000234:	fa1f fc87 	uxth.w	ip, r7
 8000238:	fbb8 f1fe 	udiv	r1, r8, lr
 800023c:	0c23      	lsrs	r3, r4, #16
 800023e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000242:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000246:	fb01 f20c 	mul.w	r2, r1, ip
 800024a:	429a      	cmp	r2, r3
 800024c:	d909      	bls.n	8000262 <__udivmoddi4+0x62>
 800024e:	18fb      	adds	r3, r7, r3
 8000250:	f101 30ff 	add.w	r0, r1, #4294967295
 8000254:	f080 80ea 	bcs.w	800042c <__udivmoddi4+0x22c>
 8000258:	429a      	cmp	r2, r3
 800025a:	f240 80e7 	bls.w	800042c <__udivmoddi4+0x22c>
 800025e:	3902      	subs	r1, #2
 8000260:	443b      	add	r3, r7
 8000262:	1a9a      	subs	r2, r3, r2
 8000264:	b2a3      	uxth	r3, r4
 8000266:	fbb2 f0fe 	udiv	r0, r2, lr
 800026a:	fb0e 2210 	mls	r2, lr, r0, r2
 800026e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000272:	fb00 fc0c 	mul.w	ip, r0, ip
 8000276:	459c      	cmp	ip, r3
 8000278:	d909      	bls.n	800028e <__udivmoddi4+0x8e>
 800027a:	18fb      	adds	r3, r7, r3
 800027c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000280:	f080 80d6 	bcs.w	8000430 <__udivmoddi4+0x230>
 8000284:	459c      	cmp	ip, r3
 8000286:	f240 80d3 	bls.w	8000430 <__udivmoddi4+0x230>
 800028a:	443b      	add	r3, r7
 800028c:	3802      	subs	r0, #2
 800028e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000292:	eba3 030c 	sub.w	r3, r3, ip
 8000296:	2100      	movs	r1, #0
 8000298:	b11d      	cbz	r5, 80002a2 <__udivmoddi4+0xa2>
 800029a:	40f3      	lsrs	r3, r6
 800029c:	2200      	movs	r2, #0
 800029e:	e9c5 3200 	strd	r3, r2, [r5]
 80002a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a6:	428b      	cmp	r3, r1
 80002a8:	d905      	bls.n	80002b6 <__udivmoddi4+0xb6>
 80002aa:	b10d      	cbz	r5, 80002b0 <__udivmoddi4+0xb0>
 80002ac:	e9c5 0100 	strd	r0, r1, [r5]
 80002b0:	2100      	movs	r1, #0
 80002b2:	4608      	mov	r0, r1
 80002b4:	e7f5      	b.n	80002a2 <__udivmoddi4+0xa2>
 80002b6:	fab3 f183 	clz	r1, r3
 80002ba:	2900      	cmp	r1, #0
 80002bc:	d146      	bne.n	800034c <__udivmoddi4+0x14c>
 80002be:	4573      	cmp	r3, lr
 80002c0:	d302      	bcc.n	80002c8 <__udivmoddi4+0xc8>
 80002c2:	4282      	cmp	r2, r0
 80002c4:	f200 8105 	bhi.w	80004d2 <__udivmoddi4+0x2d2>
 80002c8:	1a84      	subs	r4, r0, r2
 80002ca:	eb6e 0203 	sbc.w	r2, lr, r3
 80002ce:	2001      	movs	r0, #1
 80002d0:	4690      	mov	r8, r2
 80002d2:	2d00      	cmp	r5, #0
 80002d4:	d0e5      	beq.n	80002a2 <__udivmoddi4+0xa2>
 80002d6:	e9c5 4800 	strd	r4, r8, [r5]
 80002da:	e7e2      	b.n	80002a2 <__udivmoddi4+0xa2>
 80002dc:	2a00      	cmp	r2, #0
 80002de:	f000 8090 	beq.w	8000402 <__udivmoddi4+0x202>
 80002e2:	fab2 f682 	clz	r6, r2
 80002e6:	2e00      	cmp	r6, #0
 80002e8:	f040 80a4 	bne.w	8000434 <__udivmoddi4+0x234>
 80002ec:	1a8a      	subs	r2, r1, r2
 80002ee:	0c03      	lsrs	r3, r0, #16
 80002f0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002f4:	b280      	uxth	r0, r0
 80002f6:	b2bc      	uxth	r4, r7
 80002f8:	2101      	movs	r1, #1
 80002fa:	fbb2 fcfe 	udiv	ip, r2, lr
 80002fe:	fb0e 221c 	mls	r2, lr, ip, r2
 8000302:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000306:	fb04 f20c 	mul.w	r2, r4, ip
 800030a:	429a      	cmp	r2, r3
 800030c:	d907      	bls.n	800031e <__udivmoddi4+0x11e>
 800030e:	18fb      	adds	r3, r7, r3
 8000310:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000314:	d202      	bcs.n	800031c <__udivmoddi4+0x11c>
 8000316:	429a      	cmp	r2, r3
 8000318:	f200 80e0 	bhi.w	80004dc <__udivmoddi4+0x2dc>
 800031c:	46c4      	mov	ip, r8
 800031e:	1a9b      	subs	r3, r3, r2
 8000320:	fbb3 f2fe 	udiv	r2, r3, lr
 8000324:	fb0e 3312 	mls	r3, lr, r2, r3
 8000328:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800032c:	fb02 f404 	mul.w	r4, r2, r4
 8000330:	429c      	cmp	r4, r3
 8000332:	d907      	bls.n	8000344 <__udivmoddi4+0x144>
 8000334:	18fb      	adds	r3, r7, r3
 8000336:	f102 30ff 	add.w	r0, r2, #4294967295
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0x142>
 800033c:	429c      	cmp	r4, r3
 800033e:	f200 80ca 	bhi.w	80004d6 <__udivmoddi4+0x2d6>
 8000342:	4602      	mov	r2, r0
 8000344:	1b1b      	subs	r3, r3, r4
 8000346:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800034a:	e7a5      	b.n	8000298 <__udivmoddi4+0x98>
 800034c:	f1c1 0620 	rsb	r6, r1, #32
 8000350:	408b      	lsls	r3, r1
 8000352:	fa22 f706 	lsr.w	r7, r2, r6
 8000356:	431f      	orrs	r7, r3
 8000358:	fa0e f401 	lsl.w	r4, lr, r1
 800035c:	fa20 f306 	lsr.w	r3, r0, r6
 8000360:	fa2e fe06 	lsr.w	lr, lr, r6
 8000364:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000368:	4323      	orrs	r3, r4
 800036a:	fa00 f801 	lsl.w	r8, r0, r1
 800036e:	fa1f fc87 	uxth.w	ip, r7
 8000372:	fbbe f0f9 	udiv	r0, lr, r9
 8000376:	0c1c      	lsrs	r4, r3, #16
 8000378:	fb09 ee10 	mls	lr, r9, r0, lr
 800037c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000380:	fb00 fe0c 	mul.w	lr, r0, ip
 8000384:	45a6      	cmp	lr, r4
 8000386:	fa02 f201 	lsl.w	r2, r2, r1
 800038a:	d909      	bls.n	80003a0 <__udivmoddi4+0x1a0>
 800038c:	193c      	adds	r4, r7, r4
 800038e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000392:	f080 809c 	bcs.w	80004ce <__udivmoddi4+0x2ce>
 8000396:	45a6      	cmp	lr, r4
 8000398:	f240 8099 	bls.w	80004ce <__udivmoddi4+0x2ce>
 800039c:	3802      	subs	r0, #2
 800039e:	443c      	add	r4, r7
 80003a0:	eba4 040e 	sub.w	r4, r4, lr
 80003a4:	fa1f fe83 	uxth.w	lr, r3
 80003a8:	fbb4 f3f9 	udiv	r3, r4, r9
 80003ac:	fb09 4413 	mls	r4, r9, r3, r4
 80003b0:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003b4:	fb03 fc0c 	mul.w	ip, r3, ip
 80003b8:	45a4      	cmp	ip, r4
 80003ba:	d908      	bls.n	80003ce <__udivmoddi4+0x1ce>
 80003bc:	193c      	adds	r4, r7, r4
 80003be:	f103 3eff 	add.w	lr, r3, #4294967295
 80003c2:	f080 8082 	bcs.w	80004ca <__udivmoddi4+0x2ca>
 80003c6:	45a4      	cmp	ip, r4
 80003c8:	d97f      	bls.n	80004ca <__udivmoddi4+0x2ca>
 80003ca:	3b02      	subs	r3, #2
 80003cc:	443c      	add	r4, r7
 80003ce:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003d2:	eba4 040c 	sub.w	r4, r4, ip
 80003d6:	fba0 ec02 	umull	lr, ip, r0, r2
 80003da:	4564      	cmp	r4, ip
 80003dc:	4673      	mov	r3, lr
 80003de:	46e1      	mov	r9, ip
 80003e0:	d362      	bcc.n	80004a8 <__udivmoddi4+0x2a8>
 80003e2:	d05f      	beq.n	80004a4 <__udivmoddi4+0x2a4>
 80003e4:	b15d      	cbz	r5, 80003fe <__udivmoddi4+0x1fe>
 80003e6:	ebb8 0203 	subs.w	r2, r8, r3
 80003ea:	eb64 0409 	sbc.w	r4, r4, r9
 80003ee:	fa04 f606 	lsl.w	r6, r4, r6
 80003f2:	fa22 f301 	lsr.w	r3, r2, r1
 80003f6:	431e      	orrs	r6, r3
 80003f8:	40cc      	lsrs	r4, r1
 80003fa:	e9c5 6400 	strd	r6, r4, [r5]
 80003fe:	2100      	movs	r1, #0
 8000400:	e74f      	b.n	80002a2 <__udivmoddi4+0xa2>
 8000402:	fbb1 fcf2 	udiv	ip, r1, r2
 8000406:	0c01      	lsrs	r1, r0, #16
 8000408:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 800040c:	b280      	uxth	r0, r0
 800040e:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000412:	463b      	mov	r3, r7
 8000414:	4638      	mov	r0, r7
 8000416:	463c      	mov	r4, r7
 8000418:	46b8      	mov	r8, r7
 800041a:	46be      	mov	lr, r7
 800041c:	2620      	movs	r6, #32
 800041e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000422:	eba2 0208 	sub.w	r2, r2, r8
 8000426:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800042a:	e766      	b.n	80002fa <__udivmoddi4+0xfa>
 800042c:	4601      	mov	r1, r0
 800042e:	e718      	b.n	8000262 <__udivmoddi4+0x62>
 8000430:	4610      	mov	r0, r2
 8000432:	e72c      	b.n	800028e <__udivmoddi4+0x8e>
 8000434:	f1c6 0220 	rsb	r2, r6, #32
 8000438:	fa2e f302 	lsr.w	r3, lr, r2
 800043c:	40b7      	lsls	r7, r6
 800043e:	40b1      	lsls	r1, r6
 8000440:	fa20 f202 	lsr.w	r2, r0, r2
 8000444:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000448:	430a      	orrs	r2, r1
 800044a:	fbb3 f8fe 	udiv	r8, r3, lr
 800044e:	b2bc      	uxth	r4, r7
 8000450:	fb0e 3318 	mls	r3, lr, r8, r3
 8000454:	0c11      	lsrs	r1, r2, #16
 8000456:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045a:	fb08 f904 	mul.w	r9, r8, r4
 800045e:	40b0      	lsls	r0, r6
 8000460:	4589      	cmp	r9, r1
 8000462:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000466:	b280      	uxth	r0, r0
 8000468:	d93e      	bls.n	80004e8 <__udivmoddi4+0x2e8>
 800046a:	1879      	adds	r1, r7, r1
 800046c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000470:	d201      	bcs.n	8000476 <__udivmoddi4+0x276>
 8000472:	4589      	cmp	r9, r1
 8000474:	d81f      	bhi.n	80004b6 <__udivmoddi4+0x2b6>
 8000476:	eba1 0109 	sub.w	r1, r1, r9
 800047a:	fbb1 f9fe 	udiv	r9, r1, lr
 800047e:	fb09 f804 	mul.w	r8, r9, r4
 8000482:	fb0e 1119 	mls	r1, lr, r9, r1
 8000486:	b292      	uxth	r2, r2
 8000488:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800048c:	4542      	cmp	r2, r8
 800048e:	d229      	bcs.n	80004e4 <__udivmoddi4+0x2e4>
 8000490:	18ba      	adds	r2, r7, r2
 8000492:	f109 31ff 	add.w	r1, r9, #4294967295
 8000496:	d2c4      	bcs.n	8000422 <__udivmoddi4+0x222>
 8000498:	4542      	cmp	r2, r8
 800049a:	d2c2      	bcs.n	8000422 <__udivmoddi4+0x222>
 800049c:	f1a9 0102 	sub.w	r1, r9, #2
 80004a0:	443a      	add	r2, r7
 80004a2:	e7be      	b.n	8000422 <__udivmoddi4+0x222>
 80004a4:	45f0      	cmp	r8, lr
 80004a6:	d29d      	bcs.n	80003e4 <__udivmoddi4+0x1e4>
 80004a8:	ebbe 0302 	subs.w	r3, lr, r2
 80004ac:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004b0:	3801      	subs	r0, #1
 80004b2:	46e1      	mov	r9, ip
 80004b4:	e796      	b.n	80003e4 <__udivmoddi4+0x1e4>
 80004b6:	eba7 0909 	sub.w	r9, r7, r9
 80004ba:	4449      	add	r1, r9
 80004bc:	f1a8 0c02 	sub.w	ip, r8, #2
 80004c0:	fbb1 f9fe 	udiv	r9, r1, lr
 80004c4:	fb09 f804 	mul.w	r8, r9, r4
 80004c8:	e7db      	b.n	8000482 <__udivmoddi4+0x282>
 80004ca:	4673      	mov	r3, lr
 80004cc:	e77f      	b.n	80003ce <__udivmoddi4+0x1ce>
 80004ce:	4650      	mov	r0, sl
 80004d0:	e766      	b.n	80003a0 <__udivmoddi4+0x1a0>
 80004d2:	4608      	mov	r0, r1
 80004d4:	e6fd      	b.n	80002d2 <__udivmoddi4+0xd2>
 80004d6:	443b      	add	r3, r7
 80004d8:	3a02      	subs	r2, #2
 80004da:	e733      	b.n	8000344 <__udivmoddi4+0x144>
 80004dc:	f1ac 0c02 	sub.w	ip, ip, #2
 80004e0:	443b      	add	r3, r7
 80004e2:	e71c      	b.n	800031e <__udivmoddi4+0x11e>
 80004e4:	4649      	mov	r1, r9
 80004e6:	e79c      	b.n	8000422 <__udivmoddi4+0x222>
 80004e8:	eba1 0109 	sub.w	r1, r1, r9
 80004ec:	46c4      	mov	ip, r8
 80004ee:	fbb1 f9fe 	udiv	r9, r1, lr
 80004f2:	fb09 f804 	mul.w	r8, r9, r4
 80004f6:	e7c4      	b.n	8000482 <__udivmoddi4+0x282>

080004f8 <__aeabi_idiv0>:
 80004f8:	4770      	bx	lr
 80004fa:	bf00      	nop

080004fc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004fc:	b580      	push	{r7, lr}
 80004fe:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000500:	f001 f865 	bl	80015ce <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000504:	f000 f870 	bl	80005e8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000508:	f000 fa38 	bl	800097c <MX_GPIO_Init>
  MX_DFSDM1_Init();
 800050c:	f000 f8ce 	bl	80006ac <MX_DFSDM1_Init>
  MX_I2C2_Init();
 8000510:	f000 f904 	bl	800071c <MX_I2C2_Init>
  MX_QUADSPI_Init();
 8000514:	f000 f940 	bl	8000798 <MX_QUADSPI_Init>
  MX_SPI3_Init();
 8000518:	f000 f964 	bl	80007e4 <MX_SPI3_Init>
  MX_USART1_UART_Init();
 800051c:	f000 f9a0 	bl	8000860 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 8000520:	f000 f9ce 	bl	80008c0 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000524:	f000 f9fc 	bl	8000920 <MX_USB_OTG_FS_PCD_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000528:	f004 feae 	bl	8005288 <osKernelInitialize>
  /* Create the mutex(es) */
  /* creation of LED2_Mutex */
  LED2_MutexHandle = osMutexNew(&LED2_Mutex_attributes);
 800052c:	481d      	ldr	r0, [pc, #116]	@ (80005a4 <main+0xa8>)
 800052e:	f004 ffe4 	bl	80054fa <osMutexNew>
 8000532:	4603      	mov	r3, r0
 8000534:	4a1c      	ldr	r2, [pc, #112]	@ (80005a8 <main+0xac>)
 8000536:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000538:	4a1c      	ldr	r2, [pc, #112]	@ (80005ac <main+0xb0>)
 800053a:	2100      	movs	r1, #0
 800053c:	481c      	ldr	r0, [pc, #112]	@ (80005b0 <main+0xb4>)
 800053e:	f004 feed 	bl	800531c <osThreadNew>
 8000542:	4603      	mov	r3, r0
 8000544:	4a1b      	ldr	r2, [pc, #108]	@ (80005b4 <main+0xb8>)
 8000546:	6013      	str	r3, [r2, #0]

  /* creation of fastBlk */
  fastBlkHandle = osThreadNew(startFastBlk, NULL, &fastBlk_attributes);
 8000548:	4a1b      	ldr	r2, [pc, #108]	@ (80005b8 <main+0xbc>)
 800054a:	2100      	movs	r1, #0
 800054c:	481b      	ldr	r0, [pc, #108]	@ (80005bc <main+0xc0>)
 800054e:	f004 fee5 	bl	800531c <osThreadNew>
 8000552:	4603      	mov	r3, r0
 8000554:	4a1a      	ldr	r2, [pc, #104]	@ (80005c0 <main+0xc4>)
 8000556:	6013      	str	r3, [r2, #0]

  /* creation of fastMT */
  fastMTHandle = osThreadNew(startFastMT, NULL, &fastMT_attributes);
 8000558:	4a1a      	ldr	r2, [pc, #104]	@ (80005c4 <main+0xc8>)
 800055a:	2100      	movs	r1, #0
 800055c:	481a      	ldr	r0, [pc, #104]	@ (80005c8 <main+0xcc>)
 800055e:	f004 fedd 	bl	800531c <osThreadNew>
 8000562:	4603      	mov	r3, r0
 8000564:	4a19      	ldr	r2, [pc, #100]	@ (80005cc <main+0xd0>)
 8000566:	6013      	str	r3, [r2, #0]

  /* creation of slowBlk */
  slowBlkHandle = osThreadNew(startSlowBlk, NULL, &slowBlk_attributes);
 8000568:	4a19      	ldr	r2, [pc, #100]	@ (80005d0 <main+0xd4>)
 800056a:	2100      	movs	r1, #0
 800056c:	4819      	ldr	r0, [pc, #100]	@ (80005d4 <main+0xd8>)
 800056e:	f004 fed5 	bl	800531c <osThreadNew>
 8000572:	4603      	mov	r3, r0
 8000574:	4a18      	ldr	r2, [pc, #96]	@ (80005d8 <main+0xdc>)
 8000576:	6013      	str	r3, [r2, #0]

  /* creation of slowMT */
  slowMTHandle = osThreadNew(startSlowMT, NULL, &slowMT_attributes);
 8000578:	4a18      	ldr	r2, [pc, #96]	@ (80005dc <main+0xe0>)
 800057a:	2100      	movs	r1, #0
 800057c:	4818      	ldr	r0, [pc, #96]	@ (80005e0 <main+0xe4>)
 800057e:	f004 fecd 	bl	800531c <osThreadNew>
 8000582:	4603      	mov	r3, r0
 8000584:	4a17      	ldr	r2, [pc, #92]	@ (80005e4 <main+0xe8>)
 8000586:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  osThreadSuspend(fastBlkHandle);
 8000588:	4b0d      	ldr	r3, [pc, #52]	@ (80005c0 <main+0xc4>)
 800058a:	681b      	ldr	r3, [r3, #0]
 800058c:	4618      	mov	r0, r3
 800058e:	f004 ff57 	bl	8005440 <osThreadSuspend>
  osThreadSuspend(slowBlkHandle);
 8000592:	4b11      	ldr	r3, [pc, #68]	@ (80005d8 <main+0xdc>)
 8000594:	681b      	ldr	r3, [r3, #0]
 8000596:	4618      	mov	r0, r3
 8000598:	f004 ff52 	bl	8005440 <osThreadSuspend>
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 800059c:	f004 fe98 	bl	80052d0 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005a0:	bf00      	nop
 80005a2:	e7fd      	b.n	80005a0 <main+0xa4>
 80005a4:	08008bec 	.word	0x08008bec
 80005a8:	20001260 	.word	0x20001260
 80005ac:	08008b38 	.word	0x08008b38
 80005b0:	08000d09 	.word	0x08000d09
 80005b4:	200007ac 	.word	0x200007ac
 80005b8:	08008b5c 	.word	0x08008b5c
 80005bc:	08000d19 	.word	0x08000d19
 80005c0:	200007b0 	.word	0x200007b0
 80005c4:	08008b80 	.word	0x08008b80
 80005c8:	08000d39 	.word	0x08000d39
 80005cc:	20000a5c 	.word	0x20000a5c
 80005d0:	08008ba4 	.word	0x08008ba4
 80005d4:	08000da1 	.word	0x08000da1
 80005d8:	20000d08 	.word	0x20000d08
 80005dc:	08008bc8 	.word	0x08008bc8
 80005e0:	08000dc5 	.word	0x08000dc5
 80005e4:	20000fb4 	.word	0x20000fb4

080005e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b096      	sub	sp, #88	@ 0x58
 80005ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005ee:	f107 0314 	add.w	r3, r7, #20
 80005f2:	2244      	movs	r2, #68	@ 0x44
 80005f4:	2100      	movs	r1, #0
 80005f6:	4618      	mov	r0, r3
 80005f8:	f008 f97a 	bl	80088f0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005fc:	463b      	mov	r3, r7
 80005fe:	2200      	movs	r2, #0
 8000600:	601a      	str	r2, [r3, #0]
 8000602:	605a      	str	r2, [r3, #4]
 8000604:	609a      	str	r2, [r3, #8]
 8000606:	60da      	str	r2, [r3, #12]
 8000608:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800060a:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800060e:	f001 fea1 	bl	8002354 <HAL_PWREx_ControlVoltageScaling>
 8000612:	4603      	mov	r3, r0
 8000614:	2b00      	cmp	r3, #0
 8000616:	d001      	beq.n	800061c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000618:	f000 fc1e 	bl	8000e58 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800061c:	f001 fe7c 	bl	8002318 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000620:	4b21      	ldr	r3, [pc, #132]	@ (80006a8 <SystemClock_Config+0xc0>)
 8000622:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8000626:	4a20      	ldr	r2, [pc, #128]	@ (80006a8 <SystemClock_Config+0xc0>)
 8000628:	f023 0318 	bic.w	r3, r3, #24
 800062c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8000630:	2314      	movs	r3, #20
 8000632:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000634:	2301      	movs	r3, #1
 8000636:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000638:	2301      	movs	r3, #1
 800063a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800063c:	2300      	movs	r3, #0
 800063e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000640:	2360      	movs	r3, #96	@ 0x60
 8000642:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000644:	2302      	movs	r3, #2
 8000646:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000648:	2301      	movs	r3, #1
 800064a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800064c:	2301      	movs	r3, #1
 800064e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 8000650:	2328      	movs	r3, #40	@ 0x28
 8000652:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000654:	2307      	movs	r3, #7
 8000656:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000658:	2302      	movs	r3, #2
 800065a:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800065c:	2302      	movs	r3, #2
 800065e:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000660:	f107 0314 	add.w	r3, r7, #20
 8000664:	4618      	mov	r0, r3
 8000666:	f001 ff97 	bl	8002598 <HAL_RCC_OscConfig>
 800066a:	4603      	mov	r3, r0
 800066c:	2b00      	cmp	r3, #0
 800066e:	d001      	beq.n	8000674 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8000670:	f000 fbf2 	bl	8000e58 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000674:	230f      	movs	r3, #15
 8000676:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000678:	2303      	movs	r3, #3
 800067a:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800067c:	2300      	movs	r3, #0
 800067e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000680:	2300      	movs	r3, #0
 8000682:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000684:	2300      	movs	r3, #0
 8000686:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000688:	463b      	mov	r3, r7
 800068a:	2104      	movs	r1, #4
 800068c:	4618      	mov	r0, r3
 800068e:	f002 fb5f 	bl	8002d50 <HAL_RCC_ClockConfig>
 8000692:	4603      	mov	r3, r0
 8000694:	2b00      	cmp	r3, #0
 8000696:	d001      	beq.n	800069c <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000698:	f000 fbde 	bl	8000e58 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 800069c:	f003 f898 	bl	80037d0 <HAL_RCCEx_EnableMSIPLLMode>
}
 80006a0:	bf00      	nop
 80006a2:	3758      	adds	r7, #88	@ 0x58
 80006a4:	46bd      	mov	sp, r7
 80006a6:	bd80      	pop	{r7, pc}
 80006a8:	40021000 	.word	0x40021000

080006ac <MX_DFSDM1_Init>:
  * @brief DFSDM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DFSDM1_Init(void)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */

  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_channel1.Instance = DFSDM1_Channel1;
 80006b0:	4b18      	ldr	r3, [pc, #96]	@ (8000714 <MX_DFSDM1_Init+0x68>)
 80006b2:	4a19      	ldr	r2, [pc, #100]	@ (8000718 <MX_DFSDM1_Init+0x6c>)
 80006b4:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel1.Init.OutputClock.Activation = ENABLE;
 80006b6:	4b17      	ldr	r3, [pc, #92]	@ (8000714 <MX_DFSDM1_Init+0x68>)
 80006b8:	2201      	movs	r2, #1
 80006ba:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel1.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 80006bc:	4b15      	ldr	r3, [pc, #84]	@ (8000714 <MX_DFSDM1_Init+0x68>)
 80006be:	2200      	movs	r2, #0
 80006c0:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel1.Init.OutputClock.Divider = 2;
 80006c2:	4b14      	ldr	r3, [pc, #80]	@ (8000714 <MX_DFSDM1_Init+0x68>)
 80006c4:	2202      	movs	r2, #2
 80006c6:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel1.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 80006c8:	4b12      	ldr	r3, [pc, #72]	@ (8000714 <MX_DFSDM1_Init+0x68>)
 80006ca:	2200      	movs	r2, #0
 80006cc:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel1.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 80006ce:	4b11      	ldr	r3, [pc, #68]	@ (8000714 <MX_DFSDM1_Init+0x68>)
 80006d0:	2200      	movs	r2, #0
 80006d2:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel1.Init.Input.Pins = DFSDM_CHANNEL_FOLLOWING_CHANNEL_PINS;
 80006d4:	4b0f      	ldr	r3, [pc, #60]	@ (8000714 <MX_DFSDM1_Init+0x68>)
 80006d6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80006da:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel1.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 80006dc:	4b0d      	ldr	r3, [pc, #52]	@ (8000714 <MX_DFSDM1_Init+0x68>)
 80006de:	2200      	movs	r2, #0
 80006e0:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel1.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 80006e2:	4b0c      	ldr	r3, [pc, #48]	@ (8000714 <MX_DFSDM1_Init+0x68>)
 80006e4:	2204      	movs	r2, #4
 80006e6:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel1.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 80006e8:	4b0a      	ldr	r3, [pc, #40]	@ (8000714 <MX_DFSDM1_Init+0x68>)
 80006ea:	2200      	movs	r2, #0
 80006ec:	625a      	str	r2, [r3, #36]	@ 0x24
  hdfsdm1_channel1.Init.Awd.Oversampling = 1;
 80006ee:	4b09      	ldr	r3, [pc, #36]	@ (8000714 <MX_DFSDM1_Init+0x68>)
 80006f0:	2201      	movs	r2, #1
 80006f2:	629a      	str	r2, [r3, #40]	@ 0x28
  hdfsdm1_channel1.Init.Offset = 0;
 80006f4:	4b07      	ldr	r3, [pc, #28]	@ (8000714 <MX_DFSDM1_Init+0x68>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdfsdm1_channel1.Init.RightBitShift = 0x00;
 80006fa:	4b06      	ldr	r3, [pc, #24]	@ (8000714 <MX_DFSDM1_Init+0x68>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel1) != HAL_OK)
 8000700:	4804      	ldr	r0, [pc, #16]	@ (8000714 <MX_DFSDM1_Init+0x68>)
 8000702:	f001 f8a3 	bl	800184c <HAL_DFSDM_ChannelInit>
 8000706:	4603      	mov	r3, r0
 8000708:	2b00      	cmp	r3, #0
 800070a:	d001      	beq.n	8000710 <MX_DFSDM1_Init+0x64>
  {
    Error_Handler();
 800070c:	f000 fba4 	bl	8000e58 <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM1_Init 2 */

  /* USER CODE END DFSDM1_Init 2 */

}
 8000710:	bf00      	nop
 8000712:	bd80      	pop	{r7, pc}
 8000714:	20000084 	.word	0x20000084
 8000718:	40016020 	.word	0x40016020

0800071c <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000720:	4b1b      	ldr	r3, [pc, #108]	@ (8000790 <MX_I2C2_Init+0x74>)
 8000722:	4a1c      	ldr	r2, [pc, #112]	@ (8000794 <MX_I2C2_Init+0x78>)
 8000724:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00000E14;
 8000726:	4b1a      	ldr	r3, [pc, #104]	@ (8000790 <MX_I2C2_Init+0x74>)
 8000728:	f640 6214 	movw	r2, #3604	@ 0xe14
 800072c:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 800072e:	4b18      	ldr	r3, [pc, #96]	@ (8000790 <MX_I2C2_Init+0x74>)
 8000730:	2200      	movs	r2, #0
 8000732:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000734:	4b16      	ldr	r3, [pc, #88]	@ (8000790 <MX_I2C2_Init+0x74>)
 8000736:	2201      	movs	r2, #1
 8000738:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800073a:	4b15      	ldr	r3, [pc, #84]	@ (8000790 <MX_I2C2_Init+0x74>)
 800073c:	2200      	movs	r2, #0
 800073e:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000740:	4b13      	ldr	r3, [pc, #76]	@ (8000790 <MX_I2C2_Init+0x74>)
 8000742:	2200      	movs	r2, #0
 8000744:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000746:	4b12      	ldr	r3, [pc, #72]	@ (8000790 <MX_I2C2_Init+0x74>)
 8000748:	2200      	movs	r2, #0
 800074a:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800074c:	4b10      	ldr	r3, [pc, #64]	@ (8000790 <MX_I2C2_Init+0x74>)
 800074e:	2200      	movs	r2, #0
 8000750:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000752:	4b0f      	ldr	r3, [pc, #60]	@ (8000790 <MX_I2C2_Init+0x74>)
 8000754:	2200      	movs	r2, #0
 8000756:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000758:	480d      	ldr	r0, [pc, #52]	@ (8000790 <MX_I2C2_Init+0x74>)
 800075a:	f001 fb77 	bl	8001e4c <HAL_I2C_Init>
 800075e:	4603      	mov	r3, r0
 8000760:	2b00      	cmp	r3, #0
 8000762:	d001      	beq.n	8000768 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8000764:	f000 fb78 	bl	8000e58 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000768:	2100      	movs	r1, #0
 800076a:	4809      	ldr	r0, [pc, #36]	@ (8000790 <MX_I2C2_Init+0x74>)
 800076c:	f001 fc09 	bl	8001f82 <HAL_I2CEx_ConfigAnalogFilter>
 8000770:	4603      	mov	r3, r0
 8000772:	2b00      	cmp	r3, #0
 8000774:	d001      	beq.n	800077a <MX_I2C2_Init+0x5e>
  {
    Error_Handler();
 8000776:	f000 fb6f 	bl	8000e58 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 800077a:	2100      	movs	r1, #0
 800077c:	4804      	ldr	r0, [pc, #16]	@ (8000790 <MX_I2C2_Init+0x74>)
 800077e:	f001 fc4b 	bl	8002018 <HAL_I2CEx_ConfigDigitalFilter>
 8000782:	4603      	mov	r3, r0
 8000784:	2b00      	cmp	r3, #0
 8000786:	d001      	beq.n	800078c <MX_I2C2_Init+0x70>
  {
    Error_Handler();
 8000788:	f000 fb66 	bl	8000e58 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800078c:	bf00      	nop
 800078e:	bd80      	pop	{r7, pc}
 8000790:	200000bc 	.word	0x200000bc
 8000794:	40005800 	.word	0x40005800

08000798 <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 800079c:	4b0f      	ldr	r3, [pc, #60]	@ (80007dc <MX_QUADSPI_Init+0x44>)
 800079e:	4a10      	ldr	r2, [pc, #64]	@ (80007e0 <MX_QUADSPI_Init+0x48>)
 80007a0:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 2;
 80007a2:	4b0e      	ldr	r3, [pc, #56]	@ (80007dc <MX_QUADSPI_Init+0x44>)
 80007a4:	2202      	movs	r2, #2
 80007a6:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 4;
 80007a8:	4b0c      	ldr	r3, [pc, #48]	@ (80007dc <MX_QUADSPI_Init+0x44>)
 80007aa:	2204      	movs	r2, #4
 80007ac:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 80007ae:	4b0b      	ldr	r3, [pc, #44]	@ (80007dc <MX_QUADSPI_Init+0x44>)
 80007b0:	2210      	movs	r2, #16
 80007b2:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 23;
 80007b4:	4b09      	ldr	r3, [pc, #36]	@ (80007dc <MX_QUADSPI_Init+0x44>)
 80007b6:	2217      	movs	r2, #23
 80007b8:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 80007ba:	4b08      	ldr	r3, [pc, #32]	@ (80007dc <MX_QUADSPI_Init+0x44>)
 80007bc:	2200      	movs	r2, #0
 80007be:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 80007c0:	4b06      	ldr	r3, [pc, #24]	@ (80007dc <MX_QUADSPI_Init+0x44>)
 80007c2:	2200      	movs	r2, #0
 80007c4:	619a      	str	r2, [r3, #24]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 80007c6:	4805      	ldr	r0, [pc, #20]	@ (80007dc <MX_QUADSPI_Init+0x44>)
 80007c8:	f001 fe2a 	bl	8002420 <HAL_QSPI_Init>
 80007cc:	4603      	mov	r3, r0
 80007ce:	2b00      	cmp	r3, #0
 80007d0:	d001      	beq.n	80007d6 <MX_QUADSPI_Init+0x3e>
  {
    Error_Handler();
 80007d2:	f000 fb41 	bl	8000e58 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 80007d6:	bf00      	nop
 80007d8:	bd80      	pop	{r7, pc}
 80007da:	bf00      	nop
 80007dc:	20000110 	.word	0x20000110
 80007e0:	a0001000 	.word	0xa0001000

080007e4 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 80007e8:	4b1b      	ldr	r3, [pc, #108]	@ (8000858 <MX_SPI3_Init+0x74>)
 80007ea:	4a1c      	ldr	r2, [pc, #112]	@ (800085c <MX_SPI3_Init+0x78>)
 80007ec:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80007ee:	4b1a      	ldr	r3, [pc, #104]	@ (8000858 <MX_SPI3_Init+0x74>)
 80007f0:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80007f4:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80007f6:	4b18      	ldr	r3, [pc, #96]	@ (8000858 <MX_SPI3_Init+0x74>)
 80007f8:	2200      	movs	r2, #0
 80007fa:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 80007fc:	4b16      	ldr	r3, [pc, #88]	@ (8000858 <MX_SPI3_Init+0x74>)
 80007fe:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8000802:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000804:	4b14      	ldr	r3, [pc, #80]	@ (8000858 <MX_SPI3_Init+0x74>)
 8000806:	2200      	movs	r2, #0
 8000808:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 800080a:	4b13      	ldr	r3, [pc, #76]	@ (8000858 <MX_SPI3_Init+0x74>)
 800080c:	2200      	movs	r2, #0
 800080e:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8000810:	4b11      	ldr	r3, [pc, #68]	@ (8000858 <MX_SPI3_Init+0x74>)
 8000812:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000816:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000818:	4b0f      	ldr	r3, [pc, #60]	@ (8000858 <MX_SPI3_Init+0x74>)
 800081a:	2200      	movs	r2, #0
 800081c:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800081e:	4b0e      	ldr	r3, [pc, #56]	@ (8000858 <MX_SPI3_Init+0x74>)
 8000820:	2200      	movs	r2, #0
 8000822:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000824:	4b0c      	ldr	r3, [pc, #48]	@ (8000858 <MX_SPI3_Init+0x74>)
 8000826:	2200      	movs	r2, #0
 8000828:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800082a:	4b0b      	ldr	r3, [pc, #44]	@ (8000858 <MX_SPI3_Init+0x74>)
 800082c:	2200      	movs	r2, #0
 800082e:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 7;
 8000830:	4b09      	ldr	r3, [pc, #36]	@ (8000858 <MX_SPI3_Init+0x74>)
 8000832:	2207      	movs	r2, #7
 8000834:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000836:	4b08      	ldr	r3, [pc, #32]	@ (8000858 <MX_SPI3_Init+0x74>)
 8000838:	2200      	movs	r2, #0
 800083a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800083c:	4b06      	ldr	r3, [pc, #24]	@ (8000858 <MX_SPI3_Init+0x74>)
 800083e:	2208      	movs	r2, #8
 8000840:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000842:	4805      	ldr	r0, [pc, #20]	@ (8000858 <MX_SPI3_Init+0x74>)
 8000844:	f003 f9a6 	bl	8003b94 <HAL_SPI_Init>
 8000848:	4603      	mov	r3, r0
 800084a:	2b00      	cmp	r3, #0
 800084c:	d001      	beq.n	8000852 <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 800084e:	f000 fb03 	bl	8000e58 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000852:	bf00      	nop
 8000854:	bd80      	pop	{r7, pc}
 8000856:	bf00      	nop
 8000858:	20000154 	.word	0x20000154
 800085c:	40003c00 	.word	0x40003c00

08000860 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000864:	4b14      	ldr	r3, [pc, #80]	@ (80008b8 <MX_USART1_UART_Init+0x58>)
 8000866:	4a15      	ldr	r2, [pc, #84]	@ (80008bc <MX_USART1_UART_Init+0x5c>)
 8000868:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800086a:	4b13      	ldr	r3, [pc, #76]	@ (80008b8 <MX_USART1_UART_Init+0x58>)
 800086c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000870:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000872:	4b11      	ldr	r3, [pc, #68]	@ (80008b8 <MX_USART1_UART_Init+0x58>)
 8000874:	2200      	movs	r2, #0
 8000876:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000878:	4b0f      	ldr	r3, [pc, #60]	@ (80008b8 <MX_USART1_UART_Init+0x58>)
 800087a:	2200      	movs	r2, #0
 800087c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800087e:	4b0e      	ldr	r3, [pc, #56]	@ (80008b8 <MX_USART1_UART_Init+0x58>)
 8000880:	2200      	movs	r2, #0
 8000882:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000884:	4b0c      	ldr	r3, [pc, #48]	@ (80008b8 <MX_USART1_UART_Init+0x58>)
 8000886:	220c      	movs	r2, #12
 8000888:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800088a:	4b0b      	ldr	r3, [pc, #44]	@ (80008b8 <MX_USART1_UART_Init+0x58>)
 800088c:	2200      	movs	r2, #0
 800088e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000890:	4b09      	ldr	r3, [pc, #36]	@ (80008b8 <MX_USART1_UART_Init+0x58>)
 8000892:	2200      	movs	r2, #0
 8000894:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000896:	4b08      	ldr	r3, [pc, #32]	@ (80008b8 <MX_USART1_UART_Init+0x58>)
 8000898:	2200      	movs	r2, #0
 800089a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800089c:	4b06      	ldr	r3, [pc, #24]	@ (80008b8 <MX_USART1_UART_Init+0x58>)
 800089e:	2200      	movs	r2, #0
 80008a0:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80008a2:	4805      	ldr	r0, [pc, #20]	@ (80008b8 <MX_USART1_UART_Init+0x58>)
 80008a4:	f003 fcde 	bl	8004264 <HAL_UART_Init>
 80008a8:	4603      	mov	r3, r0
 80008aa:	2b00      	cmp	r3, #0
 80008ac:	d001      	beq.n	80008b2 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80008ae:	f000 fad3 	bl	8000e58 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80008b2:	bf00      	nop
 80008b4:	bd80      	pop	{r7, pc}
 80008b6:	bf00      	nop
 80008b8:	200001b8 	.word	0x200001b8
 80008bc:	40013800 	.word	0x40013800

080008c0 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80008c4:	4b14      	ldr	r3, [pc, #80]	@ (8000918 <MX_USART3_UART_Init+0x58>)
 80008c6:	4a15      	ldr	r2, [pc, #84]	@ (800091c <MX_USART3_UART_Init+0x5c>)
 80008c8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80008ca:	4b13      	ldr	r3, [pc, #76]	@ (8000918 <MX_USART3_UART_Init+0x58>)
 80008cc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80008d0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80008d2:	4b11      	ldr	r3, [pc, #68]	@ (8000918 <MX_USART3_UART_Init+0x58>)
 80008d4:	2200      	movs	r2, #0
 80008d6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80008d8:	4b0f      	ldr	r3, [pc, #60]	@ (8000918 <MX_USART3_UART_Init+0x58>)
 80008da:	2200      	movs	r2, #0
 80008dc:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80008de:	4b0e      	ldr	r3, [pc, #56]	@ (8000918 <MX_USART3_UART_Init+0x58>)
 80008e0:	2200      	movs	r2, #0
 80008e2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80008e4:	4b0c      	ldr	r3, [pc, #48]	@ (8000918 <MX_USART3_UART_Init+0x58>)
 80008e6:	220c      	movs	r2, #12
 80008e8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008ea:	4b0b      	ldr	r3, [pc, #44]	@ (8000918 <MX_USART3_UART_Init+0x58>)
 80008ec:	2200      	movs	r2, #0
 80008ee:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80008f0:	4b09      	ldr	r3, [pc, #36]	@ (8000918 <MX_USART3_UART_Init+0x58>)
 80008f2:	2200      	movs	r2, #0
 80008f4:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80008f6:	4b08      	ldr	r3, [pc, #32]	@ (8000918 <MX_USART3_UART_Init+0x58>)
 80008f8:	2200      	movs	r2, #0
 80008fa:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80008fc:	4b06      	ldr	r3, [pc, #24]	@ (8000918 <MX_USART3_UART_Init+0x58>)
 80008fe:	2200      	movs	r2, #0
 8000900:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000902:	4805      	ldr	r0, [pc, #20]	@ (8000918 <MX_USART3_UART_Init+0x58>)
 8000904:	f003 fcae 	bl	8004264 <HAL_UART_Init>
 8000908:	4603      	mov	r3, r0
 800090a:	2b00      	cmp	r3, #0
 800090c:	d001      	beq.n	8000912 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 800090e:	f000 faa3 	bl	8000e58 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000912:	bf00      	nop
 8000914:	bd80      	pop	{r7, pc}
 8000916:	bf00      	nop
 8000918:	20000240 	.word	0x20000240
 800091c:	40004800 	.word	0x40004800

08000920 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000924:	4b14      	ldr	r3, [pc, #80]	@ (8000978 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000926:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800092a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 800092c:	4b12      	ldr	r3, [pc, #72]	@ (8000978 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800092e:	2206      	movs	r2, #6
 8000930:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000932:	4b11      	ldr	r3, [pc, #68]	@ (8000978 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000934:	2202      	movs	r2, #2
 8000936:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000938:	4b0f      	ldr	r3, [pc, #60]	@ (8000978 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800093a:	2202      	movs	r2, #2
 800093c:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800093e:	4b0e      	ldr	r3, [pc, #56]	@ (8000978 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000940:	2200      	movs	r2, #0
 8000942:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000944:	4b0c      	ldr	r3, [pc, #48]	@ (8000978 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000946:	2200      	movs	r2, #0
 8000948:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800094a:	4b0b      	ldr	r3, [pc, #44]	@ (8000978 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800094c:	2200      	movs	r2, #0
 800094e:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 8000950:	4b09      	ldr	r3, [pc, #36]	@ (8000978 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000952:	2200      	movs	r2, #0
 8000954:	735a      	strb	r2, [r3, #13]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000956:	4b08      	ldr	r3, [pc, #32]	@ (8000978 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000958:	2200      	movs	r2, #0
 800095a:	73da      	strb	r2, [r3, #15]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800095c:	4b06      	ldr	r3, [pc, #24]	@ (8000978 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800095e:	2200      	movs	r2, #0
 8000960:	739a      	strb	r2, [r3, #14]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000962:	4805      	ldr	r0, [pc, #20]	@ (8000978 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000964:	f001 fba4 	bl	80020b0 <HAL_PCD_Init>
 8000968:	4603      	mov	r3, r0
 800096a:	2b00      	cmp	r3, #0
 800096c:	d001      	beq.n	8000972 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 800096e:	f000 fa73 	bl	8000e58 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000972:	bf00      	nop
 8000974:	bd80      	pop	{r7, pc}
 8000976:	bf00      	nop
 8000978:	200002c8 	.word	0x200002c8

0800097c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	b08a      	sub	sp, #40	@ 0x28
 8000980:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000982:	f107 0314 	add.w	r3, r7, #20
 8000986:	2200      	movs	r2, #0
 8000988:	601a      	str	r2, [r3, #0]
 800098a:	605a      	str	r2, [r3, #4]
 800098c:	609a      	str	r2, [r3, #8]
 800098e:	60da      	str	r2, [r3, #12]
 8000990:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000992:	4bbd      	ldr	r3, [pc, #756]	@ (8000c88 <MX_GPIO_Init+0x30c>)
 8000994:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000996:	4abc      	ldr	r2, [pc, #752]	@ (8000c88 <MX_GPIO_Init+0x30c>)
 8000998:	f043 0310 	orr.w	r3, r3, #16
 800099c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800099e:	4bba      	ldr	r3, [pc, #744]	@ (8000c88 <MX_GPIO_Init+0x30c>)
 80009a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009a2:	f003 0310 	and.w	r3, r3, #16
 80009a6:	613b      	str	r3, [r7, #16]
 80009a8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009aa:	4bb7      	ldr	r3, [pc, #732]	@ (8000c88 <MX_GPIO_Init+0x30c>)
 80009ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009ae:	4ab6      	ldr	r2, [pc, #728]	@ (8000c88 <MX_GPIO_Init+0x30c>)
 80009b0:	f043 0304 	orr.w	r3, r3, #4
 80009b4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80009b6:	4bb4      	ldr	r3, [pc, #720]	@ (8000c88 <MX_GPIO_Init+0x30c>)
 80009b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009ba:	f003 0304 	and.w	r3, r3, #4
 80009be:	60fb      	str	r3, [r7, #12]
 80009c0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009c2:	4bb1      	ldr	r3, [pc, #708]	@ (8000c88 <MX_GPIO_Init+0x30c>)
 80009c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009c6:	4ab0      	ldr	r2, [pc, #704]	@ (8000c88 <MX_GPIO_Init+0x30c>)
 80009c8:	f043 0301 	orr.w	r3, r3, #1
 80009cc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80009ce:	4bae      	ldr	r3, [pc, #696]	@ (8000c88 <MX_GPIO_Init+0x30c>)
 80009d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009d2:	f003 0301 	and.w	r3, r3, #1
 80009d6:	60bb      	str	r3, [r7, #8]
 80009d8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009da:	4bab      	ldr	r3, [pc, #684]	@ (8000c88 <MX_GPIO_Init+0x30c>)
 80009dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009de:	4aaa      	ldr	r2, [pc, #680]	@ (8000c88 <MX_GPIO_Init+0x30c>)
 80009e0:	f043 0302 	orr.w	r3, r3, #2
 80009e4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80009e6:	4ba8      	ldr	r3, [pc, #672]	@ (8000c88 <MX_GPIO_Init+0x30c>)
 80009e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009ea:	f003 0302 	and.w	r3, r3, #2
 80009ee:	607b      	str	r3, [r7, #4]
 80009f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80009f2:	4ba5      	ldr	r3, [pc, #660]	@ (8000c88 <MX_GPIO_Init+0x30c>)
 80009f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009f6:	4aa4      	ldr	r2, [pc, #656]	@ (8000c88 <MX_GPIO_Init+0x30c>)
 80009f8:	f043 0308 	orr.w	r3, r3, #8
 80009fc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80009fe:	4ba2      	ldr	r3, [pc, #648]	@ (8000c88 <MX_GPIO_Init+0x30c>)
 8000a00:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a02:	f003 0308 	and.w	r3, r3, #8
 8000a06:	603b      	str	r3, [r7, #0]
 8000a08:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin, GPIO_PIN_RESET);
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	f44f 718a 	mov.w	r1, #276	@ 0x114
 8000a10:	489e      	ldr	r0, [pc, #632]	@ (8000c8c <MX_GPIO_Init+0x310>)
 8000a12:	f001 f9d1 	bl	8001db8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ARD_D10_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin, GPIO_PIN_RESET);
 8000a16:	2200      	movs	r2, #0
 8000a18:	f248 1104 	movw	r1, #33028	@ 0x8104
 8000a1c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a20:	f001 f9ca 	bl	8001db8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 8000a24:	2200      	movs	r2, #0
 8000a26:	f24f 0114 	movw	r1, #61460	@ 0xf014
 8000a2a:	4899      	ldr	r0, [pc, #612]	@ (8000c90 <MX_GPIO_Init+0x314>)
 8000a2c:	f001 f9c4 	bl	8001db8 <HAL_GPIO_WritePin>
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, USB_OTG_FS_PWR_EN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin, GPIO_PIN_RESET);
 8000a30:	2200      	movs	r2, #0
 8000a32:	f241 0181 	movw	r1, #4225	@ 0x1081
 8000a36:	4897      	ldr	r0, [pc, #604]	@ (8000c94 <MX_GPIO_Init+0x318>)
 8000a38:	f001 f9be 	bl	8001db8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPBTLE_RF_SPI3_CSN_GPIO_Port, SPBTLE_RF_SPI3_CSN_Pin, GPIO_PIN_SET);
 8000a3c:	2201      	movs	r2, #1
 8000a3e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000a42:	4894      	ldr	r0, [pc, #592]	@ (8000c94 <MX_GPIO_Init+0x318>)
 8000a44:	f001 f9b8 	bl	8001db8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin, GPIO_PIN_RESET);
 8000a48:	2200      	movs	r2, #0
 8000a4a:	f44f 7110 	mov.w	r1, #576	@ 0x240
 8000a4e:	4892      	ldr	r0, [pc, #584]	@ (8000c98 <MX_GPIO_Init+0x31c>)
 8000a50:	f001 f9b2 	bl	8001db8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPSGRF_915_SPI3_CSN_GPIO_Port, SPSGRF_915_SPI3_CSN_Pin, GPIO_PIN_SET);
 8000a54:	2201      	movs	r2, #1
 8000a56:	2120      	movs	r1, #32
 8000a58:	488d      	ldr	r0, [pc, #564]	@ (8000c90 <MX_GPIO_Init+0x314>)
 8000a5a:	f001 f9ad 	bl	8001db8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ISM43362_SPI3_CSN_GPIO_Port, ISM43362_SPI3_CSN_Pin, GPIO_PIN_SET);
 8000a5e:	2201      	movs	r2, #1
 8000a60:	2101      	movs	r1, #1
 8000a62:	488a      	ldr	r0, [pc, #552]	@ (8000c8c <MX_GPIO_Init+0x310>)
 8000a64:	f001 f9a8 	bl	8001db8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : M24SR64_Y_RF_DISABLE_Pin M24SR64_Y_GPO_Pin ISM43362_RST_Pin ISM43362_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin|ISM43362_SPI3_CSN_Pin;
 8000a68:	f240 1315 	movw	r3, #277	@ 0x115
 8000a6c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a6e:	2301      	movs	r3, #1
 8000a70:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a72:	2300      	movs	r3, #0
 8000a74:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a76:	2300      	movs	r3, #0
 8000a78:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000a7a:	f107 0314 	add.w	r3, r7, #20
 8000a7e:	4619      	mov	r1, r3
 8000a80:	4882      	ldr	r0, [pc, #520]	@ (8000c8c <MX_GPIO_Init+0x310>)
 8000a82:	f000 ffef 	bl	8001a64 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_OVRCR_EXTI3_Pin SPSGRF_915_GPIO3_EXTI5_Pin SPBTLE_RF_IRQ_EXTI6_Pin ISM43362_DRDY_EXTI1_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVRCR_EXTI3_Pin|SPSGRF_915_GPIO3_EXTI5_Pin|SPBTLE_RF_IRQ_EXTI6_Pin|ISM43362_DRDY_EXTI1_Pin;
 8000a86:	236a      	movs	r3, #106	@ 0x6a
 8000a88:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000a8a:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000a8e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a90:	2300      	movs	r3, #0
 8000a92:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000a94:	f107 0314 	add.w	r3, r7, #20
 8000a98:	4619      	mov	r1, r3
 8000a9a:	487c      	ldr	r0, [pc, #496]	@ (8000c8c <MX_GPIO_Init+0x310>)
 8000a9c:	f000 ffe2 	bl	8001a64 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_EXTI13_Pin */
  GPIO_InitStruct.Pin = BUTTON_EXTI13_Pin;
 8000aa0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000aa4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000aa6:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000aaa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000aac:	2301      	movs	r3, #1
 8000aae:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BUTTON_EXTI13_GPIO_Port, &GPIO_InitStruct);
 8000ab0:	f107 0314 	add.w	r3, r7, #20
 8000ab4:	4619      	mov	r1, r3
 8000ab6:	4878      	ldr	r0, [pc, #480]	@ (8000c98 <MX_GPIO_Init+0x31c>)
 8000ab8:	f000 ffd4 	bl	8001a64 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_A5_Pin ARD_A4_Pin ARD_A3_Pin ARD_A2_Pin
                           ARD_A1_Pin ARD_A0_Pin */
  GPIO_InitStruct.Pin = ARD_A5_Pin|ARD_A4_Pin|ARD_A3_Pin|ARD_A2_Pin
 8000abc:	233f      	movs	r3, #63	@ 0x3f
 8000abe:	617b      	str	r3, [r7, #20]
                          |ARD_A1_Pin|ARD_A0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000ac0:	230b      	movs	r3, #11
 8000ac2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ac8:	f107 0314 	add.w	r3, r7, #20
 8000acc:	4619      	mov	r1, r3
 8000ace:	4872      	ldr	r0, [pc, #456]	@ (8000c98 <MX_GPIO_Init+0x31c>)
 8000ad0:	f000 ffc8 	bl	8001a64 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D1_Pin ARD_D0_Pin */
  GPIO_InitStruct.Pin = ARD_D1_Pin|ARD_D0_Pin;
 8000ad4:	2303      	movs	r3, #3
 8000ad6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ad8:	2302      	movs	r3, #2
 8000ada:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000adc:	2300      	movs	r3, #0
 8000ade:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ae0:	2303      	movs	r3, #3
 8000ae2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8000ae4:	2308      	movs	r3, #8
 8000ae6:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ae8:	f107 0314 	add.w	r3, r7, #20
 8000aec:	4619      	mov	r1, r3
 8000aee:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000af2:	f000 ffb7 	bl	8001a64 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D10_Pin SPBTLE_RF_RST_Pin ARD_D9_Pin */
  GPIO_InitStruct.Pin = ARD_D10_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin;
 8000af6:	f248 1304 	movw	r3, #33028	@ 0x8104
 8000afa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000afc:	2301      	movs	r3, #1
 8000afe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b00:	2300      	movs	r3, #0
 8000b02:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b04:	2300      	movs	r3, #0
 8000b06:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b08:	f107 0314 	add.w	r3, r7, #20
 8000b0c:	4619      	mov	r1, r3
 8000b0e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000b12:	f000 ffa7 	bl	8001a64 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D4_Pin */
  GPIO_InitStruct.Pin = ARD_D4_Pin;
 8000b16:	2308      	movs	r3, #8
 8000b18:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b1a:	2302      	movs	r3, #2
 8000b1c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b1e:	2300      	movs	r3, #0
 8000b20:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b22:	2300      	movs	r3, #0
 8000b24:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000b26:	2301      	movs	r3, #1
 8000b28:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(ARD_D4_GPIO_Port, &GPIO_InitStruct);
 8000b2a:	f107 0314 	add.w	r3, r7, #20
 8000b2e:	4619      	mov	r1, r3
 8000b30:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000b34:	f000 ff96 	bl	8001a64 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D7_Pin */
  GPIO_InitStruct.Pin = ARD_D7_Pin;
 8000b38:	2310      	movs	r3, #16
 8000b3a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000b3c:	230b      	movs	r3, #11
 8000b3e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b40:	2300      	movs	r3, #0
 8000b42:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D7_GPIO_Port, &GPIO_InitStruct);
 8000b44:	f107 0314 	add.w	r3, r7, #20
 8000b48:	4619      	mov	r1, r3
 8000b4a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000b4e:	f000 ff89 	bl	8001a64 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D13_Pin ARD_D12_Pin ARD_D11_Pin */
  GPIO_InitStruct.Pin = ARD_D13_Pin|ARD_D12_Pin|ARD_D11_Pin;
 8000b52:	23e0      	movs	r3, #224	@ 0xe0
 8000b54:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b56:	2302      	movs	r3, #2
 8000b58:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b5e:	2303      	movs	r3, #3
 8000b60:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000b62:	2305      	movs	r3, #5
 8000b64:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b66:	f107 0314 	add.w	r3, r7, #20
 8000b6a:	4619      	mov	r1, r3
 8000b6c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000b70:	f000 ff78 	bl	8001a64 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D3_Pin */
  GPIO_InitStruct.Pin = ARD_D3_Pin;
 8000b74:	2301      	movs	r3, #1
 8000b76:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000b78:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000b7c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b7e:	2300      	movs	r3, #0
 8000b80:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D3_GPIO_Port, &GPIO_InitStruct);
 8000b82:	f107 0314 	add.w	r3, r7, #20
 8000b86:	4619      	mov	r1, r3
 8000b88:	4841      	ldr	r0, [pc, #260]	@ (8000c90 <MX_GPIO_Init+0x314>)
 8000b8a:	f000 ff6b 	bl	8001a64 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D6_Pin */
  GPIO_InitStruct.Pin = ARD_D6_Pin;
 8000b8e:	2302      	movs	r3, #2
 8000b90:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000b92:	230b      	movs	r3, #11
 8000b94:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b96:	2300      	movs	r3, #0
 8000b98:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D6_GPIO_Port, &GPIO_InitStruct);
 8000b9a:	f107 0314 	add.w	r3, r7, #20
 8000b9e:	4619      	mov	r1, r3
 8000ba0:	483b      	ldr	r0, [pc, #236]	@ (8000c90 <MX_GPIO_Init+0x314>)
 8000ba2:	f000 ff5f 	bl	8001a64 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D8_Pin ISM43362_BOOT0_Pin ISM43362_WAKEUP_Pin LED2_Pin
                           SPSGRF_915_SDN_Pin ARD_D5_Pin SPSGRF_915_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 8000ba6:	f24f 0334 	movw	r3, #61492	@ 0xf034
 8000baa:	617b      	str	r3, [r7, #20]
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin|SPSGRF_915_SPI3_CSN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bac:	2301      	movs	r3, #1
 8000bae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bb8:	f107 0314 	add.w	r3, r7, #20
 8000bbc:	4619      	mov	r1, r3
 8000bbe:	4834      	ldr	r0, [pc, #208]	@ (8000c90 <MX_GPIO_Init+0x314>)
 8000bc0:	f000 ff50 	bl	8001a64 <HAL_GPIO_Init>

  /*Configure GPIO pins : LPS22HB_INT_DRDY_EXTI0_Pin LSM6DSL_INT1_EXTI11_Pin ARD_D2_Pin HTS221_DRDY_EXTI15_Pin
                           PMOD_IRQ_EXTI12_Pin */
  GPIO_InitStruct.Pin = LPS22HB_INT_DRDY_EXTI0_Pin|LSM6DSL_INT1_EXTI11_Pin|ARD_D2_Pin|HTS221_DRDY_EXTI15_Pin
 8000bc4:	f64c 4304 	movw	r3, #52228	@ 0xcc04
 8000bc8:	617b      	str	r3, [r7, #20]
                          |PMOD_IRQ_EXTI12_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000bca:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000bce:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bd0:	2300      	movs	r3, #0
 8000bd2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000bd4:	f107 0314 	add.w	r3, r7, #20
 8000bd8:	4619      	mov	r1, r3
 8000bda:	482e      	ldr	r0, [pc, #184]	@ (8000c94 <MX_GPIO_Init+0x318>)
 8000bdc:	f000 ff42 	bl	8001a64 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_PWR_EN_Pin SPBTLE_RF_SPI3_CSN_Pin PMOD_RESET_Pin STSAFE_A100_RESET_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin|SPBTLE_RF_SPI3_CSN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin;
 8000be0:	f243 0381 	movw	r3, #12417	@ 0x3081
 8000be4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000be6:	2301      	movs	r3, #1
 8000be8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bea:	2300      	movs	r3, #0
 8000bec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bee:	2300      	movs	r3, #0
 8000bf0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000bf2:	f107 0314 	add.w	r3, r7, #20
 8000bf6:	4619      	mov	r1, r3
 8000bf8:	4826      	ldr	r0, [pc, #152]	@ (8000c94 <MX_GPIO_Init+0x318>)
 8000bfa:	f000 ff33 	bl	8001a64 <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_XSHUT_Pin LED3_WIFI__LED4_BLE_Pin */
  GPIO_InitStruct.Pin = VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin;
 8000bfe:	f44f 7310 	mov.w	r3, #576	@ 0x240
 8000c02:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c04:	2301      	movs	r3, #1
 8000c06:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c08:	2300      	movs	r3, #0
 8000c0a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c10:	f107 0314 	add.w	r3, r7, #20
 8000c14:	4619      	mov	r1, r3
 8000c16:	4820      	ldr	r0, [pc, #128]	@ (8000c98 <MX_GPIO_Init+0x31c>)
 8000c18:	f000 ff24 	bl	8001a64 <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_GPIO1_EXTI7_Pin LSM3MDL_DRDY_EXTI8_Pin */
  GPIO_InitStruct.Pin = VL53L0X_GPIO1_EXTI7_Pin|LSM3MDL_DRDY_EXTI8_Pin;
 8000c1c:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8000c20:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000c22:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000c26:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c28:	2300      	movs	r3, #0
 8000c2a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c2c:	f107 0314 	add.w	r3, r7, #20
 8000c30:	4619      	mov	r1, r3
 8000c32:	4819      	ldr	r0, [pc, #100]	@ (8000c98 <MX_GPIO_Init+0x31c>)
 8000c34:	f000 ff16 	bl	8001a64 <HAL_GPIO_Init>

  /*Configure GPIO pin : PMOD_SPI2_SCK_Pin */
  GPIO_InitStruct.Pin = PMOD_SPI2_SCK_Pin;
 8000c38:	2302      	movs	r3, #2
 8000c3a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c3c:	2302      	movs	r3, #2
 8000c3e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c40:	2300      	movs	r3, #0
 8000c42:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c44:	2303      	movs	r3, #3
 8000c46:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000c48:	2305      	movs	r3, #5
 8000c4a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(PMOD_SPI2_SCK_GPIO_Port, &GPIO_InitStruct);
 8000c4c:	f107 0314 	add.w	r3, r7, #20
 8000c50:	4619      	mov	r1, r3
 8000c52:	4810      	ldr	r0, [pc, #64]	@ (8000c94 <MX_GPIO_Init+0x318>)
 8000c54:	f000 ff06 	bl	8001a64 <HAL_GPIO_Init>

  /*Configure GPIO pins : PMOD_UART2_CTS_Pin PMOD_UART2_RTS_Pin PMOD_UART2_TX_Pin PMOD_UART2_RX_Pin */
  GPIO_InitStruct.Pin = PMOD_UART2_CTS_Pin|PMOD_UART2_RTS_Pin|PMOD_UART2_TX_Pin|PMOD_UART2_RX_Pin;
 8000c58:	2378      	movs	r3, #120	@ 0x78
 8000c5a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c5c:	2302      	movs	r3, #2
 8000c5e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c60:	2300      	movs	r3, #0
 8000c62:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c64:	2303      	movs	r3, #3
 8000c66:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000c68:	2307      	movs	r3, #7
 8000c6a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c6c:	f107 0314 	add.w	r3, r7, #20
 8000c70:	4619      	mov	r1, r3
 8000c72:	4808      	ldr	r0, [pc, #32]	@ (8000c94 <MX_GPIO_Init+0x318>)
 8000c74:	f000 fef6 	bl	8001a64 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D15_Pin ARD_D14_Pin */
  GPIO_InitStruct.Pin = ARD_D15_Pin|ARD_D14_Pin;
 8000c78:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000c7c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c7e:	2312      	movs	r3, #18
 8000c80:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c82:	2300      	movs	r3, #0
 8000c84:	e00a      	b.n	8000c9c <MX_GPIO_Init+0x320>
 8000c86:	bf00      	nop
 8000c88:	40021000 	.word	0x40021000
 8000c8c:	48001000 	.word	0x48001000
 8000c90:	48000400 	.word	0x48000400
 8000c94:	48000c00 	.word	0x48000c00
 8000c98:	48000800 	.word	0x48000800
 8000c9c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c9e:	2303      	movs	r3, #3
 8000ca0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000ca2:	2304      	movs	r3, #4
 8000ca4:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ca6:	f107 0314 	add.w	r3, r7, #20
 8000caa:	4619      	mov	r1, r3
 8000cac:	480b      	ldr	r0, [pc, #44]	@ (8000cdc <MX_GPIO_Init+0x360>)
 8000cae:	f000 fed9 	bl	8001a64 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	2105      	movs	r1, #5
 8000cb6:	2017      	movs	r0, #23
 8000cb8:	f000 fd9e 	bl	80017f8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000cbc:	2017      	movs	r0, #23
 8000cbe:	f000 fdb7 	bl	8001830 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	2105      	movs	r1, #5
 8000cc6:	2028      	movs	r0, #40	@ 0x28
 8000cc8:	f000 fd96 	bl	80017f8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000ccc:	2028      	movs	r0, #40	@ 0x28
 8000cce:	f000 fdaf 	bl	8001830 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000cd2:	bf00      	nop
 8000cd4:	3728      	adds	r7, #40	@ 0x28
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	bd80      	pop	{r7, pc}
 8000cda:	bf00      	nop
 8000cdc:	48000400 	.word	0x48000400

08000ce0 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000ce0:	b480      	push	{r7}
 8000ce2:	b083      	sub	sp, #12
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	4603      	mov	r3, r0
 8000ce8:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == BUTTON_EXTI13_Pin)
 8000cea:	88fb      	ldrh	r3, [r7, #6]
 8000cec:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000cf0:	d102      	bne.n	8000cf8 <HAL_GPIO_EXTI_Callback+0x18>
		button = 1;
 8000cf2:	4b04      	ldr	r3, [pc, #16]	@ (8000d04 <HAL_GPIO_EXTI_Callback+0x24>)
 8000cf4:	2201      	movs	r2, #1
 8000cf6:	601a      	str	r2, [r3, #0]
}
 8000cf8:	bf00      	nop
 8000cfa:	370c      	adds	r7, #12
 8000cfc:	46bd      	mov	sp, r7
 8000cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d02:	4770      	bx	lr
 8000d04:	200012b4 	.word	0x200012b4

08000d08 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	b082      	sub	sp, #8
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000d10:	2001      	movs	r0, #1
 8000d12:	f004 fbd7 	bl	80054c4 <osDelay>
 8000d16:	e7fb      	b.n	8000d10 <StartDefaultTask+0x8>

08000d18 <startFastBlk>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_startFastBlk */
void startFastBlk(void *argument)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b082      	sub	sp, #8
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN startFastBlk */
  /* Infinite loop */
  for(;;)
  {
	  HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);
 8000d20:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000d24:	4803      	ldr	r0, [pc, #12]	@ (8000d34 <startFastBlk+0x1c>)
 8000d26:	f001 f85f 	bl	8001de8 <HAL_GPIO_TogglePin>
    osDelay(50);
 8000d2a:	2032      	movs	r0, #50	@ 0x32
 8000d2c:	f004 fbca 	bl	80054c4 <osDelay>
	  HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);
 8000d30:	bf00      	nop
 8000d32:	e7f5      	b.n	8000d20 <startFastBlk+0x8>
 8000d34:	48000400 	.word	0x48000400

08000d38 <startFastMT>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_startFastMT */
void startFastMT(void *argument)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	b082      	sub	sp, #8
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN startFastMT */
  /* Infinite loop */
  for(;;)
  {
	fast_status = osMutexAcquire(LED2_MutexHandle, 1);
 8000d40:	4b14      	ldr	r3, [pc, #80]	@ (8000d94 <startFastMT+0x5c>)
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	2101      	movs	r1, #1
 8000d46:	4618      	mov	r0, r3
 8000d48:	f004 fc5d 	bl	8005606 <osMutexAcquire>
 8000d4c:	4603      	mov	r3, r0
 8000d4e:	4a12      	ldr	r2, [pc, #72]	@ (8000d98 <startFastMT+0x60>)
 8000d50:	6013      	str	r3, [r2, #0]
	if(fast_status == osOK)
 8000d52:	4b11      	ldr	r3, [pc, #68]	@ (8000d98 <startFastMT+0x60>)
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	d117      	bne.n	8000d8a <startFastMT+0x52>
	{
		osThreadResume(fastBlkHandle);
 8000d5a:	4b10      	ldr	r3, [pc, #64]	@ (8000d9c <startFastMT+0x64>)
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	4618      	mov	r0, r3
 8000d60:	f004 fb8f 	bl	8005482 <osThreadResume>
		osDelay(2000);
 8000d64:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000d68:	f004 fbac 	bl	80054c4 <osDelay>
		osThreadSuspend(fastBlkHandle);
 8000d6c:	4b0b      	ldr	r3, [pc, #44]	@ (8000d9c <startFastMT+0x64>)
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	4618      	mov	r0, r3
 8000d72:	f004 fb65 	bl	8005440 <osThreadSuspend>
		osMutexRelease(LED2_MutexHandle);
 8000d76:	4b07      	ldr	r3, [pc, #28]	@ (8000d94 <startFastMT+0x5c>)
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	4618      	mov	r0, r3
 8000d7c:	f004 fc8e 	bl	800569c <osMutexRelease>
		osDelay(8000);
 8000d80:	f44f 50fa 	mov.w	r0, #8000	@ 0x1f40
 8000d84:	f004 fb9e 	bl	80054c4 <osDelay>
 8000d88:	e7da      	b.n	8000d40 <startFastMT+0x8>
	}
	else
		osDelay(10000);
 8000d8a:	f242 7010 	movw	r0, #10000	@ 0x2710
 8000d8e:	f004 fb99 	bl	80054c4 <osDelay>
	fast_status = osMutexAcquire(LED2_MutexHandle, 1);
 8000d92:	e7d5      	b.n	8000d40 <startFastMT+0x8>
 8000d94:	20001260 	.word	0x20001260
 8000d98:	20000000 	.word	0x20000000
 8000d9c:	200007b0 	.word	0x200007b0

08000da0 <startSlowBlk>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_startSlowBlk */
void startSlowBlk(void *argument)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b082      	sub	sp, #8
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN startSlowBlk */
  /* Infinite loop */
  for(;;)
  {
	  HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);
 8000da8:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000dac:	4804      	ldr	r0, [pc, #16]	@ (8000dc0 <startSlowBlk+0x20>)
 8000dae:	f001 f81b 	bl	8001de8 <HAL_GPIO_TogglePin>
	  osDelay(500);
 8000db2:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000db6:	f004 fb85 	bl	80054c4 <osDelay>
	  HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);
 8000dba:	bf00      	nop
 8000dbc:	e7f4      	b.n	8000da8 <startSlowBlk+0x8>
 8000dbe:	bf00      	nop
 8000dc0:	48000400 	.word	0x48000400

08000dc4 <startSlowMT>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_startSlowMT */
void startSlowMT(void *argument)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	b082      	sub	sp, #8
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN startSlowMT */
  /* Infinite loop */
  for(;;)
  {
    if(button > 0)
 8000dcc:	4b15      	ldr	r3, [pc, #84]	@ (8000e24 <startSlowMT+0x60>)
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	dd23      	ble.n	8000e1c <startSlowMT+0x58>
    {
    	button = 0;
 8000dd4:	4b13      	ldr	r3, [pc, #76]	@ (8000e24 <startSlowMT+0x60>)
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	601a      	str	r2, [r3, #0]
    	slow_status = osMutexAcquire(LED2_MutexHandle, 1);
 8000dda:	4b13      	ldr	r3, [pc, #76]	@ (8000e28 <startSlowMT+0x64>)
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	2101      	movs	r1, #1
 8000de0:	4618      	mov	r0, r3
 8000de2:	f004 fc10 	bl	8005606 <osMutexAcquire>
 8000de6:	4603      	mov	r3, r0
 8000de8:	4a10      	ldr	r2, [pc, #64]	@ (8000e2c <startSlowMT+0x68>)
 8000dea:	6013      	str	r3, [r2, #0]
    	if(slow_status == osOK)
 8000dec:	4b0f      	ldr	r3, [pc, #60]	@ (8000e2c <startSlowMT+0x68>)
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	d1eb      	bne.n	8000dcc <startSlowMT+0x8>
    	{
    		osThreadResume(slowBlkHandle);
 8000df4:	4b0e      	ldr	r3, [pc, #56]	@ (8000e30 <startSlowMT+0x6c>)
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	4618      	mov	r0, r3
 8000dfa:	f004 fb42 	bl	8005482 <osThreadResume>
    		osDelay(5000);
 8000dfe:	f241 3088 	movw	r0, #5000	@ 0x1388
 8000e02:	f004 fb5f 	bl	80054c4 <osDelay>
    		osThreadSuspend(slowBlkHandle);
 8000e06:	4b0a      	ldr	r3, [pc, #40]	@ (8000e30 <startSlowMT+0x6c>)
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	4618      	mov	r0, r3
 8000e0c:	f004 fb18 	bl	8005440 <osThreadSuspend>
    		osMutexRelease(LED2_MutexHandle);
 8000e10:	4b05      	ldr	r3, [pc, #20]	@ (8000e28 <startSlowMT+0x64>)
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	4618      	mov	r0, r3
 8000e16:	f004 fc41 	bl	800569c <osMutexRelease>
 8000e1a:	e7d7      	b.n	8000dcc <startSlowMT+0x8>
    	}
    }
    else
    {
    	osDelay(10);
 8000e1c:	200a      	movs	r0, #10
 8000e1e:	f004 fb51 	bl	80054c4 <osDelay>
    if(button > 0)
 8000e22:	e7d3      	b.n	8000dcc <startSlowMT+0x8>
 8000e24:	200012b4 	.word	0x200012b4
 8000e28:	20001260 	.word	0x20001260
 8000e2c:	20000004 	.word	0x20000004
 8000e30:	20000d08 	.word	0x20000d08

08000e34 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	b082      	sub	sp, #8
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6)
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	4a04      	ldr	r2, [pc, #16]	@ (8000e54 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000e42:	4293      	cmp	r3, r2
 8000e44:	d101      	bne.n	8000e4a <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 8000e46:	f000 fbdb 	bl	8001600 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000e4a:	bf00      	nop
 8000e4c:	3708      	adds	r7, #8
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	bd80      	pop	{r7, pc}
 8000e52:	bf00      	nop
 8000e54:	40001000 	.word	0x40001000

08000e58 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e58:	b480      	push	{r7}
 8000e5a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e5c:	b672      	cpsid	i
}
 8000e5e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e60:	bf00      	nop
 8000e62:	e7fd      	b.n	8000e60 <Error_Handler+0x8>

08000e64 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	b082      	sub	sp, #8
 8000e68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e6a:	4b11      	ldr	r3, [pc, #68]	@ (8000eb0 <HAL_MspInit+0x4c>)
 8000e6c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000e6e:	4a10      	ldr	r2, [pc, #64]	@ (8000eb0 <HAL_MspInit+0x4c>)
 8000e70:	f043 0301 	orr.w	r3, r3, #1
 8000e74:	6613      	str	r3, [r2, #96]	@ 0x60
 8000e76:	4b0e      	ldr	r3, [pc, #56]	@ (8000eb0 <HAL_MspInit+0x4c>)
 8000e78:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000e7a:	f003 0301 	and.w	r3, r3, #1
 8000e7e:	607b      	str	r3, [r7, #4]
 8000e80:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e82:	4b0b      	ldr	r3, [pc, #44]	@ (8000eb0 <HAL_MspInit+0x4c>)
 8000e84:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000e86:	4a0a      	ldr	r2, [pc, #40]	@ (8000eb0 <HAL_MspInit+0x4c>)
 8000e88:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000e8c:	6593      	str	r3, [r2, #88]	@ 0x58
 8000e8e:	4b08      	ldr	r3, [pc, #32]	@ (8000eb0 <HAL_MspInit+0x4c>)
 8000e90:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000e92:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000e96:	603b      	str	r3, [r7, #0]
 8000e98:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	210f      	movs	r1, #15
 8000e9e:	f06f 0001 	mvn.w	r0, #1
 8000ea2:	f000 fca9 	bl	80017f8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ea6:	bf00      	nop
 8000ea8:	3708      	adds	r7, #8
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	bd80      	pop	{r7, pc}
 8000eae:	bf00      	nop
 8000eb0:	40021000 	.word	0x40021000

08000eb4 <HAL_DFSDM_ChannelMspInit>:
  * This function configures the hardware resources used in this example
  * @param hdfsdm_channel: DFSDM_Channel handle pointer
  * @retval None
  */
void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* hdfsdm_channel)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b0ac      	sub	sp, #176	@ 0xb0
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ebc:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	601a      	str	r2, [r3, #0]
 8000ec4:	605a      	str	r2, [r3, #4]
 8000ec6:	609a      	str	r2, [r3, #8]
 8000ec8:	60da      	str	r2, [r3, #12]
 8000eca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000ecc:	f107 0314 	add.w	r3, r7, #20
 8000ed0:	2288      	movs	r2, #136	@ 0x88
 8000ed2:	2100      	movs	r1, #0
 8000ed4:	4618      	mov	r0, r3
 8000ed6:	f007 fd0b 	bl	80088f0 <memset>
  if(DFSDM1_Init == 0)
 8000eda:	4b25      	ldr	r3, [pc, #148]	@ (8000f70 <HAL_DFSDM_ChannelMspInit+0xbc>)
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d142      	bne.n	8000f68 <HAL_DFSDM_ChannelMspInit+0xb4>

    /* USER CODE END DFSDM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1;
 8000ee2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000ee6:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 8000ee8:	2300      	movs	r3, #0
 8000eea:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000eee:	f107 0314 	add.w	r3, r7, #20
 8000ef2:	4618      	mov	r0, r3
 8000ef4:	f002 f982 	bl	80031fc <HAL_RCCEx_PeriphCLKConfig>
 8000ef8:	4603      	mov	r3, r0
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d001      	beq.n	8000f02 <HAL_DFSDM_ChannelMspInit+0x4e>
    {
      Error_Handler();
 8000efe:	f7ff ffab 	bl	8000e58 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_DFSDM1_CLK_ENABLE();
 8000f02:	4b1c      	ldr	r3, [pc, #112]	@ (8000f74 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8000f04:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000f06:	4a1b      	ldr	r2, [pc, #108]	@ (8000f74 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8000f08:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000f0c:	6613      	str	r3, [r2, #96]	@ 0x60
 8000f0e:	4b19      	ldr	r3, [pc, #100]	@ (8000f74 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8000f10:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000f12:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8000f16:	613b      	str	r3, [r7, #16]
 8000f18:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000f1a:	4b16      	ldr	r3, [pc, #88]	@ (8000f74 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8000f1c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f1e:	4a15      	ldr	r2, [pc, #84]	@ (8000f74 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8000f20:	f043 0310 	orr.w	r3, r3, #16
 8000f24:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000f26:	4b13      	ldr	r3, [pc, #76]	@ (8000f74 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8000f28:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f2a:	f003 0310 	and.w	r3, r3, #16
 8000f2e:	60fb      	str	r3, [r7, #12]
 8000f30:	68fb      	ldr	r3, [r7, #12]
    /**DFSDM1 GPIO Configuration
    PE7     ------> DFSDM1_DATIN2
    PE9     ------> DFSDM1_CKOUT
    */
    GPIO_InitStruct.Pin = DFSDM1_DATIN2_Pin|DFSDM1_CKOUT_Pin;
 8000f32:	f44f 7320 	mov.w	r3, #640	@ 0x280
 8000f36:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f3a:	2302      	movs	r3, #2
 8000f3c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f40:	2300      	movs	r3, #0
 8000f42:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f46:	2300      	movs	r3, #0
 8000f48:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8000f4c:	2306      	movs	r3, #6
 8000f4e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000f52:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000f56:	4619      	mov	r1, r3
 8000f58:	4807      	ldr	r0, [pc, #28]	@ (8000f78 <HAL_DFSDM_ChannelMspInit+0xc4>)
 8000f5a:	f000 fd83 	bl	8001a64 <HAL_GPIO_Init>

    /* USER CODE BEGIN DFSDM1_MspInit 1 */

    /* USER CODE END DFSDM1_MspInit 1 */

  DFSDM1_Init++;
 8000f5e:	4b04      	ldr	r3, [pc, #16]	@ (8000f70 <HAL_DFSDM_ChannelMspInit+0xbc>)
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	3301      	adds	r3, #1
 8000f64:	4a02      	ldr	r2, [pc, #8]	@ (8000f70 <HAL_DFSDM_ChannelMspInit+0xbc>)
 8000f66:	6013      	str	r3, [r2, #0]
  }

}
 8000f68:	bf00      	nop
 8000f6a:	37b0      	adds	r7, #176	@ 0xb0
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	bd80      	pop	{r7, pc}
 8000f70:	200012b8 	.word	0x200012b8
 8000f74:	40021000 	.word	0x40021000
 8000f78:	48001000 	.word	0x48001000

08000f7c <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b0ac      	sub	sp, #176	@ 0xb0
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f84:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000f88:	2200      	movs	r2, #0
 8000f8a:	601a      	str	r2, [r3, #0]
 8000f8c:	605a      	str	r2, [r3, #4]
 8000f8e:	609a      	str	r2, [r3, #8]
 8000f90:	60da      	str	r2, [r3, #12]
 8000f92:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000f94:	f107 0314 	add.w	r3, r7, #20
 8000f98:	2288      	movs	r2, #136	@ 0x88
 8000f9a:	2100      	movs	r1, #0
 8000f9c:	4618      	mov	r0, r3
 8000f9e:	f007 fca7 	bl	80088f0 <memset>
  if(hi2c->Instance==I2C2)
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	4a21      	ldr	r2, [pc, #132]	@ (800102c <HAL_I2C_MspInit+0xb0>)
 8000fa8:	4293      	cmp	r3, r2
 8000faa:	d13b      	bne.n	8001024 <HAL_I2C_MspInit+0xa8>

    /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8000fac:	2380      	movs	r3, #128	@ 0x80
 8000fae:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000fb4:	f107 0314 	add.w	r3, r7, #20
 8000fb8:	4618      	mov	r0, r3
 8000fba:	f002 f91f 	bl	80031fc <HAL_RCCEx_PeriphCLKConfig>
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d001      	beq.n	8000fc8 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8000fc4:	f7ff ff48 	bl	8000e58 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fc8:	4b19      	ldr	r3, [pc, #100]	@ (8001030 <HAL_I2C_MspInit+0xb4>)
 8000fca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000fcc:	4a18      	ldr	r2, [pc, #96]	@ (8001030 <HAL_I2C_MspInit+0xb4>)
 8000fce:	f043 0302 	orr.w	r3, r3, #2
 8000fd2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000fd4:	4b16      	ldr	r3, [pc, #88]	@ (8001030 <HAL_I2C_MspInit+0xb4>)
 8000fd6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000fd8:	f003 0302 	and.w	r3, r3, #2
 8000fdc:	613b      	str	r3, [r7, #16]
 8000fde:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = INTERNAL_I2C2_SCL_Pin|INTERNAL_I2C2_SDA_Pin;
 8000fe0:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8000fe4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000fe8:	2312      	movs	r3, #18
 8000fea:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000fee:	2301      	movs	r3, #1
 8000ff0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ff4:	2303      	movs	r3, #3
 8000ff6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000ffa:	2304      	movs	r3, #4
 8000ffc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001000:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001004:	4619      	mov	r1, r3
 8001006:	480b      	ldr	r0, [pc, #44]	@ (8001034 <HAL_I2C_MspInit+0xb8>)
 8001008:	f000 fd2c 	bl	8001a64 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 800100c:	4b08      	ldr	r3, [pc, #32]	@ (8001030 <HAL_I2C_MspInit+0xb4>)
 800100e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001010:	4a07      	ldr	r2, [pc, #28]	@ (8001030 <HAL_I2C_MspInit+0xb4>)
 8001012:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001016:	6593      	str	r3, [r2, #88]	@ 0x58
 8001018:	4b05      	ldr	r3, [pc, #20]	@ (8001030 <HAL_I2C_MspInit+0xb4>)
 800101a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800101c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001020:	60fb      	str	r3, [r7, #12]
 8001022:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C2_MspInit 1 */

  }

}
 8001024:	bf00      	nop
 8001026:	37b0      	adds	r7, #176	@ 0xb0
 8001028:	46bd      	mov	sp, r7
 800102a:	bd80      	pop	{r7, pc}
 800102c:	40005800 	.word	0x40005800
 8001030:	40021000 	.word	0x40021000
 8001034:	48000400 	.word	0x48000400

08001038 <HAL_QSPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hqspi: QSPI handle pointer
  * @retval None
  */
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	b08a      	sub	sp, #40	@ 0x28
 800103c:	af00      	add	r7, sp, #0
 800103e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001040:	f107 0314 	add.w	r3, r7, #20
 8001044:	2200      	movs	r2, #0
 8001046:	601a      	str	r2, [r3, #0]
 8001048:	605a      	str	r2, [r3, #4]
 800104a:	609a      	str	r2, [r3, #8]
 800104c:	60da      	str	r2, [r3, #12]
 800104e:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	4a17      	ldr	r2, [pc, #92]	@ (80010b4 <HAL_QSPI_MspInit+0x7c>)
 8001056:	4293      	cmp	r3, r2
 8001058:	d128      	bne.n	80010ac <HAL_QSPI_MspInit+0x74>
  {
    /* USER CODE BEGIN QUADSPI_MspInit 0 */

    /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 800105a:	4b17      	ldr	r3, [pc, #92]	@ (80010b8 <HAL_QSPI_MspInit+0x80>)
 800105c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800105e:	4a16      	ldr	r2, [pc, #88]	@ (80010b8 <HAL_QSPI_MspInit+0x80>)
 8001060:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001064:	6513      	str	r3, [r2, #80]	@ 0x50
 8001066:	4b14      	ldr	r3, [pc, #80]	@ (80010b8 <HAL_QSPI_MspInit+0x80>)
 8001068:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800106a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800106e:	613b      	str	r3, [r7, #16]
 8001070:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001072:	4b11      	ldr	r3, [pc, #68]	@ (80010b8 <HAL_QSPI_MspInit+0x80>)
 8001074:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001076:	4a10      	ldr	r2, [pc, #64]	@ (80010b8 <HAL_QSPI_MspInit+0x80>)
 8001078:	f043 0310 	orr.w	r3, r3, #16
 800107c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800107e:	4b0e      	ldr	r3, [pc, #56]	@ (80010b8 <HAL_QSPI_MspInit+0x80>)
 8001080:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001082:	f003 0310 	and.w	r3, r3, #16
 8001086:	60fb      	str	r3, [r7, #12]
 8001088:	68fb      	ldr	r3, [r7, #12]
    PE12     ------> QUADSPI_BK1_IO0
    PE13     ------> QUADSPI_BK1_IO1
    PE14     ------> QUADSPI_BK1_IO2
    PE15     ------> QUADSPI_BK1_IO3
    */
    GPIO_InitStruct.Pin = QUADSPI_CLK_Pin|QUADSPI_NCS_Pin|OQUADSPI_BK1_IO0_Pin|QUADSPI_BK1_IO1_Pin
 800108a:	f44f 437c 	mov.w	r3, #64512	@ 0xfc00
 800108e:	617b      	str	r3, [r7, #20]
                          |QUAD_SPI_BK1_IO2_Pin|QUAD_SPI_BK1_IO3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001090:	2302      	movs	r3, #2
 8001092:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001094:	2300      	movs	r3, #0
 8001096:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001098:	2303      	movs	r3, #3
 800109a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 800109c:	230a      	movs	r3, #10
 800109e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80010a0:	f107 0314 	add.w	r3, r7, #20
 80010a4:	4619      	mov	r1, r3
 80010a6:	4805      	ldr	r0, [pc, #20]	@ (80010bc <HAL_QSPI_MspInit+0x84>)
 80010a8:	f000 fcdc 	bl	8001a64 <HAL_GPIO_Init>

    /* USER CODE END QUADSPI_MspInit 1 */

  }

}
 80010ac:	bf00      	nop
 80010ae:	3728      	adds	r7, #40	@ 0x28
 80010b0:	46bd      	mov	sp, r7
 80010b2:	bd80      	pop	{r7, pc}
 80010b4:	a0001000 	.word	0xa0001000
 80010b8:	40021000 	.word	0x40021000
 80010bc:	48001000 	.word	0x48001000

080010c0 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b08a      	sub	sp, #40	@ 0x28
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010c8:	f107 0314 	add.w	r3, r7, #20
 80010cc:	2200      	movs	r2, #0
 80010ce:	601a      	str	r2, [r3, #0]
 80010d0:	605a      	str	r2, [r3, #4]
 80010d2:	609a      	str	r2, [r3, #8]
 80010d4:	60da      	str	r2, [r3, #12]
 80010d6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	4a17      	ldr	r2, [pc, #92]	@ (800113c <HAL_SPI_MspInit+0x7c>)
 80010de:	4293      	cmp	r3, r2
 80010e0:	d128      	bne.n	8001134 <HAL_SPI_MspInit+0x74>
  {
    /* USER CODE BEGIN SPI3_MspInit 0 */

    /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 80010e2:	4b17      	ldr	r3, [pc, #92]	@ (8001140 <HAL_SPI_MspInit+0x80>)
 80010e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80010e6:	4a16      	ldr	r2, [pc, #88]	@ (8001140 <HAL_SPI_MspInit+0x80>)
 80010e8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80010ec:	6593      	str	r3, [r2, #88]	@ 0x58
 80010ee:	4b14      	ldr	r3, [pc, #80]	@ (8001140 <HAL_SPI_MspInit+0x80>)
 80010f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80010f2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80010f6:	613b      	str	r3, [r7, #16]
 80010f8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80010fa:	4b11      	ldr	r3, [pc, #68]	@ (8001140 <HAL_SPI_MspInit+0x80>)
 80010fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010fe:	4a10      	ldr	r2, [pc, #64]	@ (8001140 <HAL_SPI_MspInit+0x80>)
 8001100:	f043 0304 	orr.w	r3, r3, #4
 8001104:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001106:	4b0e      	ldr	r3, [pc, #56]	@ (8001140 <HAL_SPI_MspInit+0x80>)
 8001108:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800110a:	f003 0304 	and.w	r3, r3, #4
 800110e:	60fb      	str	r3, [r7, #12]
 8001110:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = INTERNAL_SPI3_SCK_Pin|INTERNAL_SPI3_MISO_Pin|INTERNAL_SPI3_MOSI_Pin;
 8001112:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8001116:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001118:	2302      	movs	r3, #2
 800111a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800111c:	2300      	movs	r3, #0
 800111e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001120:	2303      	movs	r3, #3
 8001122:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001124:	2306      	movs	r3, #6
 8001126:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001128:	f107 0314 	add.w	r3, r7, #20
 800112c:	4619      	mov	r1, r3
 800112e:	4805      	ldr	r0, [pc, #20]	@ (8001144 <HAL_SPI_MspInit+0x84>)
 8001130:	f000 fc98 	bl	8001a64 <HAL_GPIO_Init>

    /* USER CODE END SPI3_MspInit 1 */

  }

}
 8001134:	bf00      	nop
 8001136:	3728      	adds	r7, #40	@ 0x28
 8001138:	46bd      	mov	sp, r7
 800113a:	bd80      	pop	{r7, pc}
 800113c:	40003c00 	.word	0x40003c00
 8001140:	40021000 	.word	0x40021000
 8001144:	48000800 	.word	0x48000800

08001148 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	b0ae      	sub	sp, #184	@ 0xb8
 800114c:	af00      	add	r7, sp, #0
 800114e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001150:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001154:	2200      	movs	r2, #0
 8001156:	601a      	str	r2, [r3, #0]
 8001158:	605a      	str	r2, [r3, #4]
 800115a:	609a      	str	r2, [r3, #8]
 800115c:	60da      	str	r2, [r3, #12]
 800115e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001160:	f107 031c 	add.w	r3, r7, #28
 8001164:	2288      	movs	r2, #136	@ 0x88
 8001166:	2100      	movs	r1, #0
 8001168:	4618      	mov	r0, r3
 800116a:	f007 fbc1 	bl	80088f0 <memset>
  if(huart->Instance==USART1)
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	4a42      	ldr	r2, [pc, #264]	@ (800127c <HAL_UART_MspInit+0x134>)
 8001174:	4293      	cmp	r3, r2
 8001176:	d13b      	bne.n	80011f0 <HAL_UART_MspInit+0xa8>

    /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001178:	2301      	movs	r3, #1
 800117a:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800117c:	2300      	movs	r3, #0
 800117e:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001180:	f107 031c 	add.w	r3, r7, #28
 8001184:	4618      	mov	r0, r3
 8001186:	f002 f839 	bl	80031fc <HAL_RCCEx_PeriphCLKConfig>
 800118a:	4603      	mov	r3, r0
 800118c:	2b00      	cmp	r3, #0
 800118e:	d001      	beq.n	8001194 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001190:	f7ff fe62 	bl	8000e58 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001194:	4b3a      	ldr	r3, [pc, #232]	@ (8001280 <HAL_UART_MspInit+0x138>)
 8001196:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001198:	4a39      	ldr	r2, [pc, #228]	@ (8001280 <HAL_UART_MspInit+0x138>)
 800119a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800119e:	6613      	str	r3, [r2, #96]	@ 0x60
 80011a0:	4b37      	ldr	r3, [pc, #220]	@ (8001280 <HAL_UART_MspInit+0x138>)
 80011a2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80011a4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80011a8:	61bb      	str	r3, [r7, #24]
 80011aa:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011ac:	4b34      	ldr	r3, [pc, #208]	@ (8001280 <HAL_UART_MspInit+0x138>)
 80011ae:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011b0:	4a33      	ldr	r2, [pc, #204]	@ (8001280 <HAL_UART_MspInit+0x138>)
 80011b2:	f043 0302 	orr.w	r3, r3, #2
 80011b6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80011b8:	4b31      	ldr	r3, [pc, #196]	@ (8001280 <HAL_UART_MspInit+0x138>)
 80011ba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011bc:	f003 0302 	and.w	r3, r3, #2
 80011c0:	617b      	str	r3, [r7, #20]
 80011c2:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = ST_LINK_UART1_TX_Pin|ST_LINK_UART1_RX_Pin;
 80011c4:	23c0      	movs	r3, #192	@ 0xc0
 80011c6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011ca:	2302      	movs	r3, #2
 80011cc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011d0:	2300      	movs	r3, #0
 80011d2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011d6:	2303      	movs	r3, #3
 80011d8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80011dc:	2307      	movs	r3, #7
 80011de:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011e2:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80011e6:	4619      	mov	r1, r3
 80011e8:	4826      	ldr	r0, [pc, #152]	@ (8001284 <HAL_UART_MspInit+0x13c>)
 80011ea:	f000 fc3b 	bl	8001a64 <HAL_GPIO_Init>
    /* USER CODE BEGIN USART3_MspInit 1 */

    /* USER CODE END USART3_MspInit 1 */
  }

}
 80011ee:	e040      	b.n	8001272 <HAL_UART_MspInit+0x12a>
  else if(huart->Instance==USART3)
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	4a24      	ldr	r2, [pc, #144]	@ (8001288 <HAL_UART_MspInit+0x140>)
 80011f6:	4293      	cmp	r3, r2
 80011f8:	d13b      	bne.n	8001272 <HAL_UART_MspInit+0x12a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80011fa:	2304      	movs	r3, #4
 80011fc:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80011fe:	2300      	movs	r3, #0
 8001200:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001202:	f107 031c 	add.w	r3, r7, #28
 8001206:	4618      	mov	r0, r3
 8001208:	f001 fff8 	bl	80031fc <HAL_RCCEx_PeriphCLKConfig>
 800120c:	4603      	mov	r3, r0
 800120e:	2b00      	cmp	r3, #0
 8001210:	d001      	beq.n	8001216 <HAL_UART_MspInit+0xce>
      Error_Handler();
 8001212:	f7ff fe21 	bl	8000e58 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001216:	4b1a      	ldr	r3, [pc, #104]	@ (8001280 <HAL_UART_MspInit+0x138>)
 8001218:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800121a:	4a19      	ldr	r2, [pc, #100]	@ (8001280 <HAL_UART_MspInit+0x138>)
 800121c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001220:	6593      	str	r3, [r2, #88]	@ 0x58
 8001222:	4b17      	ldr	r3, [pc, #92]	@ (8001280 <HAL_UART_MspInit+0x138>)
 8001224:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001226:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800122a:	613b      	str	r3, [r7, #16]
 800122c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800122e:	4b14      	ldr	r3, [pc, #80]	@ (8001280 <HAL_UART_MspInit+0x138>)
 8001230:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001232:	4a13      	ldr	r2, [pc, #76]	@ (8001280 <HAL_UART_MspInit+0x138>)
 8001234:	f043 0308 	orr.w	r3, r3, #8
 8001238:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800123a:	4b11      	ldr	r3, [pc, #68]	@ (8001280 <HAL_UART_MspInit+0x138>)
 800123c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800123e:	f003 0308 	and.w	r3, r3, #8
 8001242:	60fb      	str	r3, [r7, #12]
 8001244:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = INTERNAL_UART3_TX_Pin|INTERNAL_UART3_RX_Pin;
 8001246:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800124a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800124e:	2302      	movs	r3, #2
 8001250:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001254:	2300      	movs	r3, #0
 8001256:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800125a:	2303      	movs	r3, #3
 800125c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001260:	2307      	movs	r3, #7
 8001262:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001266:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800126a:	4619      	mov	r1, r3
 800126c:	4807      	ldr	r0, [pc, #28]	@ (800128c <HAL_UART_MspInit+0x144>)
 800126e:	f000 fbf9 	bl	8001a64 <HAL_GPIO_Init>
}
 8001272:	bf00      	nop
 8001274:	37b8      	adds	r7, #184	@ 0xb8
 8001276:	46bd      	mov	sp, r7
 8001278:	bd80      	pop	{r7, pc}
 800127a:	bf00      	nop
 800127c:	40013800 	.word	0x40013800
 8001280:	40021000 	.word	0x40021000
 8001284:	48000400 	.word	0x48000400
 8001288:	40004800 	.word	0x40004800
 800128c:	48000c00 	.word	0x48000c00

08001290 <HAL_PCD_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hpcd: PCD handle pointer
  * @retval None
  */
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	b0ac      	sub	sp, #176	@ 0xb0
 8001294:	af00      	add	r7, sp, #0
 8001296:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001298:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800129c:	2200      	movs	r2, #0
 800129e:	601a      	str	r2, [r3, #0]
 80012a0:	605a      	str	r2, [r3, #4]
 80012a2:	609a      	str	r2, [r3, #8]
 80012a4:	60da      	str	r2, [r3, #12]
 80012a6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80012a8:	f107 0314 	add.w	r3, r7, #20
 80012ac:	2288      	movs	r2, #136	@ 0x88
 80012ae:	2100      	movs	r1, #0
 80012b0:	4618      	mov	r0, r3
 80012b2:	f007 fb1d 	bl	80088f0 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80012be:	d17c      	bne.n	80013ba <HAL_PCD_MspInit+0x12a>

    /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80012c0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80012c4:	617b      	str	r3, [r7, #20]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 80012c6:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 80012ca:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 80012ce:	2301      	movs	r3, #1
 80012d0:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 80012d2:	2301      	movs	r3, #1
 80012d4:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 80012d6:	2318      	movs	r3, #24
 80012d8:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 80012da:	2307      	movs	r3, #7
 80012dc:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80012de:	2302      	movs	r3, #2
 80012e0:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80012e2:	2302      	movs	r3, #2
 80012e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 80012e6:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80012ea:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80012ec:	f107 0314 	add.w	r3, r7, #20
 80012f0:	4618      	mov	r0, r3
 80012f2:	f001 ff83 	bl	80031fc <HAL_RCCEx_PeriphCLKConfig>
 80012f6:	4603      	mov	r3, r0
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d001      	beq.n	8001300 <HAL_PCD_MspInit+0x70>
    {
      Error_Handler();
 80012fc:	f7ff fdac 	bl	8000e58 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001300:	4b30      	ldr	r3, [pc, #192]	@ (80013c4 <HAL_PCD_MspInit+0x134>)
 8001302:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001304:	4a2f      	ldr	r2, [pc, #188]	@ (80013c4 <HAL_PCD_MspInit+0x134>)
 8001306:	f043 0301 	orr.w	r3, r3, #1
 800130a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800130c:	4b2d      	ldr	r3, [pc, #180]	@ (80013c4 <HAL_PCD_MspInit+0x134>)
 800130e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001310:	f003 0301 	and.w	r3, r3, #1
 8001314:	613b      	str	r3, [r7, #16]
 8001316:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_OTG_FS_VBUS_Pin;
 8001318:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800131c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001320:	2300      	movs	r3, #0
 8001322:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001326:	2300      	movs	r3, #0
 8001328:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(USB_OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 800132c:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001330:	4619      	mov	r1, r3
 8001332:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001336:	f000 fb95 	bl	8001a64 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_OTG_FS_ID_Pin|USB_OTG_FS_DM_Pin|USB_OTG_FS_DP_Pin;
 800133a:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 800133e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001342:	2302      	movs	r3, #2
 8001344:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001348:	2300      	movs	r3, #0
 800134a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800134e:	2303      	movs	r3, #3
 8001350:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001354:	230a      	movs	r3, #10
 8001356:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800135a:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800135e:	4619      	mov	r1, r3
 8001360:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001364:	f000 fb7e 	bl	8001a64 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001368:	4b16      	ldr	r3, [pc, #88]	@ (80013c4 <HAL_PCD_MspInit+0x134>)
 800136a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800136c:	4a15      	ldr	r2, [pc, #84]	@ (80013c4 <HAL_PCD_MspInit+0x134>)
 800136e:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001372:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001374:	4b13      	ldr	r3, [pc, #76]	@ (80013c4 <HAL_PCD_MspInit+0x134>)
 8001376:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001378:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800137c:	60fb      	str	r3, [r7, #12]
 800137e:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001380:	4b10      	ldr	r3, [pc, #64]	@ (80013c4 <HAL_PCD_MspInit+0x134>)
 8001382:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001384:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001388:	2b00      	cmp	r3, #0
 800138a:	d114      	bne.n	80013b6 <HAL_PCD_MspInit+0x126>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800138c:	4b0d      	ldr	r3, [pc, #52]	@ (80013c4 <HAL_PCD_MspInit+0x134>)
 800138e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001390:	4a0c      	ldr	r2, [pc, #48]	@ (80013c4 <HAL_PCD_MspInit+0x134>)
 8001392:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001396:	6593      	str	r3, [r2, #88]	@ 0x58
 8001398:	4b0a      	ldr	r3, [pc, #40]	@ (80013c4 <HAL_PCD_MspInit+0x134>)
 800139a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800139c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80013a0:	60bb      	str	r3, [r7, #8]
 80013a2:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 80013a4:	f001 f82c 	bl	8002400 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 80013a8:	4b06      	ldr	r3, [pc, #24]	@ (80013c4 <HAL_PCD_MspInit+0x134>)
 80013aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80013ac:	4a05      	ldr	r2, [pc, #20]	@ (80013c4 <HAL_PCD_MspInit+0x134>)
 80013ae:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80013b2:	6593      	str	r3, [r2, #88]	@ 0x58

    /* USER CODE END USB_OTG_FS_MspInit 1 */

  }

}
 80013b4:	e001      	b.n	80013ba <HAL_PCD_MspInit+0x12a>
      HAL_PWREx_EnableVddUSB();
 80013b6:	f001 f823 	bl	8002400 <HAL_PWREx_EnableVddUSB>
}
 80013ba:	bf00      	nop
 80013bc:	37b0      	adds	r7, #176	@ 0xb0
 80013be:	46bd      	mov	sp, r7
 80013c0:	bd80      	pop	{r7, pc}
 80013c2:	bf00      	nop
 80013c4:	40021000 	.word	0x40021000

080013c8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b08e      	sub	sp, #56	@ 0x38
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;
  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status = HAL_OK;
 80013d0:	2300      	movs	r3, #0
 80013d2:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80013d6:	4b34      	ldr	r3, [pc, #208]	@ (80014a8 <HAL_InitTick+0xe0>)
 80013d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80013da:	4a33      	ldr	r2, [pc, #204]	@ (80014a8 <HAL_InitTick+0xe0>)
 80013dc:	f043 0310 	orr.w	r3, r3, #16
 80013e0:	6593      	str	r3, [r2, #88]	@ 0x58
 80013e2:	4b31      	ldr	r3, [pc, #196]	@ (80014a8 <HAL_InitTick+0xe0>)
 80013e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80013e6:	f003 0310 	and.w	r3, r3, #16
 80013ea:	60fb      	str	r3, [r7, #12]
 80013ec:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80013ee:	f107 0210 	add.w	r2, r7, #16
 80013f2:	f107 0314 	add.w	r3, r7, #20
 80013f6:	4611      	mov	r1, r2
 80013f8:	4618      	mov	r0, r3
 80013fa:	f001 fe6d 	bl	80030d8 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80013fe:	6a3b      	ldr	r3, [r7, #32]
 8001400:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001402:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001404:	2b00      	cmp	r3, #0
 8001406:	d103      	bne.n	8001410 <HAL_InitTick+0x48>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001408:	f001 fe3a 	bl	8003080 <HAL_RCC_GetPCLK1Freq>
 800140c:	6378      	str	r0, [r7, #52]	@ 0x34
 800140e:	e004      	b.n	800141a <HAL_InitTick+0x52>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001410:	f001 fe36 	bl	8003080 <HAL_RCC_GetPCLK1Freq>
 8001414:	4603      	mov	r3, r0
 8001416:	005b      	lsls	r3, r3, #1
 8001418:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800141a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800141c:	4a23      	ldr	r2, [pc, #140]	@ (80014ac <HAL_InitTick+0xe4>)
 800141e:	fba2 2303 	umull	r2, r3, r2, r3
 8001422:	0c9b      	lsrs	r3, r3, #18
 8001424:	3b01      	subs	r3, #1
 8001426:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001428:	4b21      	ldr	r3, [pc, #132]	@ (80014b0 <HAL_InitTick+0xe8>)
 800142a:	4a22      	ldr	r2, [pc, #136]	@ (80014b4 <HAL_InitTick+0xec>)
 800142c:	601a      	str	r2, [r3, #0]
   * Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 800142e:	4b20      	ldr	r3, [pc, #128]	@ (80014b0 <HAL_InitTick+0xe8>)
 8001430:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001434:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001436:	4a1e      	ldr	r2, [pc, #120]	@ (80014b0 <HAL_InitTick+0xe8>)
 8001438:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800143a:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800143c:	4b1c      	ldr	r3, [pc, #112]	@ (80014b0 <HAL_InitTick+0xe8>)
 800143e:	2200      	movs	r2, #0
 8001440:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001442:	4b1b      	ldr	r3, [pc, #108]	@ (80014b0 <HAL_InitTick+0xe8>)
 8001444:	2200      	movs	r2, #0
 8001446:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001448:	4b19      	ldr	r3, [pc, #100]	@ (80014b0 <HAL_InitTick+0xe8>)
 800144a:	2200      	movs	r2, #0
 800144c:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 800144e:	4818      	ldr	r0, [pc, #96]	@ (80014b0 <HAL_InitTick+0xe8>)
 8001450:	f002 fc43 	bl	8003cda <HAL_TIM_Base_Init>
 8001454:	4603      	mov	r3, r0
 8001456:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 800145a:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800145e:	2b00      	cmp	r3, #0
 8001460:	d11b      	bne.n	800149a <HAL_InitTick+0xd2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8001462:	4813      	ldr	r0, [pc, #76]	@ (80014b0 <HAL_InitTick+0xe8>)
 8001464:	f002 fc9a 	bl	8003d9c <HAL_TIM_Base_Start_IT>
 8001468:	4603      	mov	r3, r0
 800146a:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 800146e:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001472:	2b00      	cmp	r3, #0
 8001474:	d111      	bne.n	800149a <HAL_InitTick+0xd2>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001476:	2036      	movs	r0, #54	@ 0x36
 8001478:	f000 f9da 	bl	8001830 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	2b0f      	cmp	r3, #15
 8001480:	d808      	bhi.n	8001494 <HAL_InitTick+0xcc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8001482:	2200      	movs	r2, #0
 8001484:	6879      	ldr	r1, [r7, #4]
 8001486:	2036      	movs	r0, #54	@ 0x36
 8001488:	f000 f9b6 	bl	80017f8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800148c:	4a0a      	ldr	r2, [pc, #40]	@ (80014b8 <HAL_InitTick+0xf0>)
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	6013      	str	r3, [r2, #0]
 8001492:	e002      	b.n	800149a <HAL_InitTick+0xd2>
      }
      else
      {
        status = HAL_ERROR;
 8001494:	2301      	movs	r3, #1
 8001496:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 800149a:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 800149e:	4618      	mov	r0, r3
 80014a0:	3738      	adds	r7, #56	@ 0x38
 80014a2:	46bd      	mov	sp, r7
 80014a4:	bd80      	pop	{r7, pc}
 80014a6:	bf00      	nop
 80014a8:	40021000 	.word	0x40021000
 80014ac:	431bde83 	.word	0x431bde83
 80014b0:	200012bc 	.word	0x200012bc
 80014b4:	40001000 	.word	0x40001000
 80014b8:	2000000c 	.word	0x2000000c

080014bc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80014bc:	b480      	push	{r7}
 80014be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80014c0:	bf00      	nop
 80014c2:	e7fd      	b.n	80014c0 <NMI_Handler+0x4>

080014c4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80014c4:	b480      	push	{r7}
 80014c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80014c8:	bf00      	nop
 80014ca:	e7fd      	b.n	80014c8 <HardFault_Handler+0x4>

080014cc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80014cc:	b480      	push	{r7}
 80014ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80014d0:	bf00      	nop
 80014d2:	e7fd      	b.n	80014d0 <MemManage_Handler+0x4>

080014d4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80014d4:	b480      	push	{r7}
 80014d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80014d8:	bf00      	nop
 80014da:	e7fd      	b.n	80014d8 <BusFault_Handler+0x4>

080014dc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80014dc:	b480      	push	{r7}
 80014de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80014e0:	bf00      	nop
 80014e2:	e7fd      	b.n	80014e0 <UsageFault_Handler+0x4>

080014e4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80014e4:	b480      	push	{r7}
 80014e6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80014e8:	bf00      	nop
 80014ea:	46bd      	mov	sp, r7
 80014ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f0:	4770      	bx	lr

080014f2 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80014f2:	b580      	push	{r7, lr}
 80014f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SPSGRF_915_GPIO3_EXTI5_Pin);
 80014f6:	2020      	movs	r0, #32
 80014f8:	f000 fc90 	bl	8001e1c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(SPBTLE_RF_IRQ_EXTI6_Pin);
 80014fc:	2040      	movs	r0, #64	@ 0x40
 80014fe:	f000 fc8d 	bl	8001e1c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(VL53L0X_GPIO1_EXTI7_Pin);
 8001502:	2080      	movs	r0, #128	@ 0x80
 8001504:	f000 fc8a 	bl	8001e1c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM3MDL_DRDY_EXTI8_Pin);
 8001508:	f44f 7080 	mov.w	r0, #256	@ 0x100
 800150c:	f000 fc86 	bl	8001e1c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001510:	bf00      	nop
 8001512:	bd80      	pop	{r7, pc}

08001514 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LPS22HB_INT_DRDY_EXTI0_Pin);
 8001518:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 800151c:	f000 fc7e 	bl	8001e1c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM6DSL_INT1_EXTI11_Pin);
 8001520:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8001524:	f000 fc7a 	bl	8001e1c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BUTTON_EXTI13_Pin);
 8001528:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 800152c:	f000 fc76 	bl	8001e1c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ARD_D2_Pin);
 8001530:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8001534:	f000 fc72 	bl	8001e1c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(HTS221_DRDY_EXTI15_Pin);
 8001538:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 800153c:	f000 fc6e 	bl	8001e1c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001540:	bf00      	nop
 8001542:	bd80      	pop	{r7, pc}

08001544 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001548:	4802      	ldr	r0, [pc, #8]	@ (8001554 <TIM6_DAC_IRQHandler+0x10>)
 800154a:	f002 fc97 	bl	8003e7c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800154e:	bf00      	nop
 8001550:	bd80      	pop	{r7, pc}
 8001552:	bf00      	nop
 8001554:	200012bc 	.word	0x200012bc

08001558 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001558:	b480      	push	{r7}
 800155a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800155c:	4b06      	ldr	r3, [pc, #24]	@ (8001578 <SystemInit+0x20>)
 800155e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001562:	4a05      	ldr	r2, [pc, #20]	@ (8001578 <SystemInit+0x20>)
 8001564:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001568:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 800156c:	bf00      	nop
 800156e:	46bd      	mov	sp, r7
 8001570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001574:	4770      	bx	lr
 8001576:	bf00      	nop
 8001578:	e000ed00 	.word	0xe000ed00

0800157c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800157c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80015b4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001580:	f7ff ffea 	bl	8001558 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001584:	480c      	ldr	r0, [pc, #48]	@ (80015b8 <LoopForever+0x6>)
  ldr r1, =_edata
 8001586:	490d      	ldr	r1, [pc, #52]	@ (80015bc <LoopForever+0xa>)
  ldr r2, =_sidata
 8001588:	4a0d      	ldr	r2, [pc, #52]	@ (80015c0 <LoopForever+0xe>)
  movs r3, #0
 800158a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800158c:	e002      	b.n	8001594 <LoopCopyDataInit>

0800158e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800158e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001590:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001592:	3304      	adds	r3, #4

08001594 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001594:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001596:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001598:	d3f9      	bcc.n	800158e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800159a:	4a0a      	ldr	r2, [pc, #40]	@ (80015c4 <LoopForever+0x12>)
  ldr r4, =_ebss
 800159c:	4c0a      	ldr	r4, [pc, #40]	@ (80015c8 <LoopForever+0x16>)
  movs r3, #0
 800159e:	2300      	movs	r3, #0
  b LoopFillZerobss
 80015a0:	e001      	b.n	80015a6 <LoopFillZerobss>

080015a2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80015a2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80015a4:	3204      	adds	r2, #4

080015a6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80015a6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80015a8:	d3fb      	bcc.n	80015a2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80015aa:	f007 fa07 	bl	80089bc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80015ae:	f7fe ffa5 	bl	80004fc <main>

080015b2 <LoopForever>:

LoopForever:
    b LoopForever
 80015b2:	e7fe      	b.n	80015b2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80015b4:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80015b8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80015bc:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 80015c0:	08008c54 	.word	0x08008c54
  ldr r2, =_sbss
 80015c4:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 80015c8:	20002e10 	.word	0x20002e10

080015cc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80015cc:	e7fe      	b.n	80015cc <ADC1_2_IRQHandler>

080015ce <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80015ce:	b580      	push	{r7, lr}
 80015d0:	b082      	sub	sp, #8
 80015d2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80015d4:	2300      	movs	r3, #0
 80015d6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80015d8:	2003      	movs	r0, #3
 80015da:	f000 f902 	bl	80017e2 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80015de:	200f      	movs	r0, #15
 80015e0:	f7ff fef2 	bl	80013c8 <HAL_InitTick>
 80015e4:	4603      	mov	r3, r0
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d002      	beq.n	80015f0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80015ea:	2301      	movs	r3, #1
 80015ec:	71fb      	strb	r3, [r7, #7]
 80015ee:	e001      	b.n	80015f4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80015f0:	f7ff fc38 	bl	8000e64 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80015f4:	79fb      	ldrb	r3, [r7, #7]
}
 80015f6:	4618      	mov	r0, r3
 80015f8:	3708      	adds	r7, #8
 80015fa:	46bd      	mov	sp, r7
 80015fc:	bd80      	pop	{r7, pc}
	...

08001600 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001600:	b480      	push	{r7}
 8001602:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001604:	4b06      	ldr	r3, [pc, #24]	@ (8001620 <HAL_IncTick+0x20>)
 8001606:	781b      	ldrb	r3, [r3, #0]
 8001608:	461a      	mov	r2, r3
 800160a:	4b06      	ldr	r3, [pc, #24]	@ (8001624 <HAL_IncTick+0x24>)
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	4413      	add	r3, r2
 8001610:	4a04      	ldr	r2, [pc, #16]	@ (8001624 <HAL_IncTick+0x24>)
 8001612:	6013      	str	r3, [r2, #0]
}
 8001614:	bf00      	nop
 8001616:	46bd      	mov	sp, r7
 8001618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161c:	4770      	bx	lr
 800161e:	bf00      	nop
 8001620:	20000010 	.word	0x20000010
 8001624:	20001308 	.word	0x20001308

08001628 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001628:	b480      	push	{r7}
 800162a:	af00      	add	r7, sp, #0
  return uwTick;
 800162c:	4b03      	ldr	r3, [pc, #12]	@ (800163c <HAL_GetTick+0x14>)
 800162e:	681b      	ldr	r3, [r3, #0]
}
 8001630:	4618      	mov	r0, r3
 8001632:	46bd      	mov	sp, r7
 8001634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001638:	4770      	bx	lr
 800163a:	bf00      	nop
 800163c:	20001308 	.word	0x20001308

08001640 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	b084      	sub	sp, #16
 8001644:	af00      	add	r7, sp, #0
 8001646:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001648:	f7ff ffee 	bl	8001628 <HAL_GetTick>
 800164c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001652:	68fb      	ldr	r3, [r7, #12]
 8001654:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001658:	d005      	beq.n	8001666 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800165a:	4b0a      	ldr	r3, [pc, #40]	@ (8001684 <HAL_Delay+0x44>)
 800165c:	781b      	ldrb	r3, [r3, #0]
 800165e:	461a      	mov	r2, r3
 8001660:	68fb      	ldr	r3, [r7, #12]
 8001662:	4413      	add	r3, r2
 8001664:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001666:	bf00      	nop
 8001668:	f7ff ffde 	bl	8001628 <HAL_GetTick>
 800166c:	4602      	mov	r2, r0
 800166e:	68bb      	ldr	r3, [r7, #8]
 8001670:	1ad3      	subs	r3, r2, r3
 8001672:	68fa      	ldr	r2, [r7, #12]
 8001674:	429a      	cmp	r2, r3
 8001676:	d8f7      	bhi.n	8001668 <HAL_Delay+0x28>
  {
  }
}
 8001678:	bf00      	nop
 800167a:	bf00      	nop
 800167c:	3710      	adds	r7, #16
 800167e:	46bd      	mov	sp, r7
 8001680:	bd80      	pop	{r7, pc}
 8001682:	bf00      	nop
 8001684:	20000010 	.word	0x20000010

08001688 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001688:	b480      	push	{r7}
 800168a:	b085      	sub	sp, #20
 800168c:	af00      	add	r7, sp, #0
 800168e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	f003 0307 	and.w	r3, r3, #7
 8001696:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001698:	4b0c      	ldr	r3, [pc, #48]	@ (80016cc <__NVIC_SetPriorityGrouping+0x44>)
 800169a:	68db      	ldr	r3, [r3, #12]
 800169c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800169e:	68ba      	ldr	r2, [r7, #8]
 80016a0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80016a4:	4013      	ands	r3, r2
 80016a6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80016ac:	68bb      	ldr	r3, [r7, #8]
 80016ae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80016b0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80016b4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80016b8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80016ba:	4a04      	ldr	r2, [pc, #16]	@ (80016cc <__NVIC_SetPriorityGrouping+0x44>)
 80016bc:	68bb      	ldr	r3, [r7, #8]
 80016be:	60d3      	str	r3, [r2, #12]
}
 80016c0:	bf00      	nop
 80016c2:	3714      	adds	r7, #20
 80016c4:	46bd      	mov	sp, r7
 80016c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ca:	4770      	bx	lr
 80016cc:	e000ed00 	.word	0xe000ed00

080016d0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80016d0:	b480      	push	{r7}
 80016d2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80016d4:	4b04      	ldr	r3, [pc, #16]	@ (80016e8 <__NVIC_GetPriorityGrouping+0x18>)
 80016d6:	68db      	ldr	r3, [r3, #12]
 80016d8:	0a1b      	lsrs	r3, r3, #8
 80016da:	f003 0307 	and.w	r3, r3, #7
}
 80016de:	4618      	mov	r0, r3
 80016e0:	46bd      	mov	sp, r7
 80016e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e6:	4770      	bx	lr
 80016e8:	e000ed00 	.word	0xe000ed00

080016ec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016ec:	b480      	push	{r7}
 80016ee:	b083      	sub	sp, #12
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	4603      	mov	r3, r0
 80016f4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	db0b      	blt.n	8001716 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80016fe:	79fb      	ldrb	r3, [r7, #7]
 8001700:	f003 021f 	and.w	r2, r3, #31
 8001704:	4907      	ldr	r1, [pc, #28]	@ (8001724 <__NVIC_EnableIRQ+0x38>)
 8001706:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800170a:	095b      	lsrs	r3, r3, #5
 800170c:	2001      	movs	r0, #1
 800170e:	fa00 f202 	lsl.w	r2, r0, r2
 8001712:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001716:	bf00      	nop
 8001718:	370c      	adds	r7, #12
 800171a:	46bd      	mov	sp, r7
 800171c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001720:	4770      	bx	lr
 8001722:	bf00      	nop
 8001724:	e000e100 	.word	0xe000e100

08001728 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001728:	b480      	push	{r7}
 800172a:	b083      	sub	sp, #12
 800172c:	af00      	add	r7, sp, #0
 800172e:	4603      	mov	r3, r0
 8001730:	6039      	str	r1, [r7, #0]
 8001732:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001734:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001738:	2b00      	cmp	r3, #0
 800173a:	db0a      	blt.n	8001752 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800173c:	683b      	ldr	r3, [r7, #0]
 800173e:	b2da      	uxtb	r2, r3
 8001740:	490c      	ldr	r1, [pc, #48]	@ (8001774 <__NVIC_SetPriority+0x4c>)
 8001742:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001746:	0112      	lsls	r2, r2, #4
 8001748:	b2d2      	uxtb	r2, r2
 800174a:	440b      	add	r3, r1
 800174c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001750:	e00a      	b.n	8001768 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001752:	683b      	ldr	r3, [r7, #0]
 8001754:	b2da      	uxtb	r2, r3
 8001756:	4908      	ldr	r1, [pc, #32]	@ (8001778 <__NVIC_SetPriority+0x50>)
 8001758:	79fb      	ldrb	r3, [r7, #7]
 800175a:	f003 030f 	and.w	r3, r3, #15
 800175e:	3b04      	subs	r3, #4
 8001760:	0112      	lsls	r2, r2, #4
 8001762:	b2d2      	uxtb	r2, r2
 8001764:	440b      	add	r3, r1
 8001766:	761a      	strb	r2, [r3, #24]
}
 8001768:	bf00      	nop
 800176a:	370c      	adds	r7, #12
 800176c:	46bd      	mov	sp, r7
 800176e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001772:	4770      	bx	lr
 8001774:	e000e100 	.word	0xe000e100
 8001778:	e000ed00 	.word	0xe000ed00

0800177c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800177c:	b480      	push	{r7}
 800177e:	b089      	sub	sp, #36	@ 0x24
 8001780:	af00      	add	r7, sp, #0
 8001782:	60f8      	str	r0, [r7, #12]
 8001784:	60b9      	str	r1, [r7, #8]
 8001786:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	f003 0307 	and.w	r3, r3, #7
 800178e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001790:	69fb      	ldr	r3, [r7, #28]
 8001792:	f1c3 0307 	rsb	r3, r3, #7
 8001796:	2b04      	cmp	r3, #4
 8001798:	bf28      	it	cs
 800179a:	2304      	movcs	r3, #4
 800179c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800179e:	69fb      	ldr	r3, [r7, #28]
 80017a0:	3304      	adds	r3, #4
 80017a2:	2b06      	cmp	r3, #6
 80017a4:	d902      	bls.n	80017ac <NVIC_EncodePriority+0x30>
 80017a6:	69fb      	ldr	r3, [r7, #28]
 80017a8:	3b03      	subs	r3, #3
 80017aa:	e000      	b.n	80017ae <NVIC_EncodePriority+0x32>
 80017ac:	2300      	movs	r3, #0
 80017ae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017b0:	f04f 32ff 	mov.w	r2, #4294967295
 80017b4:	69bb      	ldr	r3, [r7, #24]
 80017b6:	fa02 f303 	lsl.w	r3, r2, r3
 80017ba:	43da      	mvns	r2, r3
 80017bc:	68bb      	ldr	r3, [r7, #8]
 80017be:	401a      	ands	r2, r3
 80017c0:	697b      	ldr	r3, [r7, #20]
 80017c2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80017c4:	f04f 31ff 	mov.w	r1, #4294967295
 80017c8:	697b      	ldr	r3, [r7, #20]
 80017ca:	fa01 f303 	lsl.w	r3, r1, r3
 80017ce:	43d9      	mvns	r1, r3
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017d4:	4313      	orrs	r3, r2
         );
}
 80017d6:	4618      	mov	r0, r3
 80017d8:	3724      	adds	r7, #36	@ 0x24
 80017da:	46bd      	mov	sp, r7
 80017dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e0:	4770      	bx	lr

080017e2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017e2:	b580      	push	{r7, lr}
 80017e4:	b082      	sub	sp, #8
 80017e6:	af00      	add	r7, sp, #0
 80017e8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80017ea:	6878      	ldr	r0, [r7, #4]
 80017ec:	f7ff ff4c 	bl	8001688 <__NVIC_SetPriorityGrouping>
}
 80017f0:	bf00      	nop
 80017f2:	3708      	adds	r7, #8
 80017f4:	46bd      	mov	sp, r7
 80017f6:	bd80      	pop	{r7, pc}

080017f8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	b086      	sub	sp, #24
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	4603      	mov	r3, r0
 8001800:	60b9      	str	r1, [r7, #8]
 8001802:	607a      	str	r2, [r7, #4]
 8001804:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001806:	2300      	movs	r3, #0
 8001808:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800180a:	f7ff ff61 	bl	80016d0 <__NVIC_GetPriorityGrouping>
 800180e:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001810:	687a      	ldr	r2, [r7, #4]
 8001812:	68b9      	ldr	r1, [r7, #8]
 8001814:	6978      	ldr	r0, [r7, #20]
 8001816:	f7ff ffb1 	bl	800177c <NVIC_EncodePriority>
 800181a:	4602      	mov	r2, r0
 800181c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001820:	4611      	mov	r1, r2
 8001822:	4618      	mov	r0, r3
 8001824:	f7ff ff80 	bl	8001728 <__NVIC_SetPriority>
}
 8001828:	bf00      	nop
 800182a:	3718      	adds	r7, #24
 800182c:	46bd      	mov	sp, r7
 800182e:	bd80      	pop	{r7, pc}

08001830 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	b082      	sub	sp, #8
 8001834:	af00      	add	r7, sp, #0
 8001836:	4603      	mov	r3, r0
 8001838:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800183a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800183e:	4618      	mov	r0, r3
 8001840:	f7ff ff54 	bl	80016ec <__NVIC_EnableIRQ>
}
 8001844:	bf00      	nop
 8001846:	3708      	adds	r7, #8
 8001848:	46bd      	mov	sp, r7
 800184a:	bd80      	pop	{r7, pc}

0800184c <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	b082      	sub	sp, #8
 8001850:	af00      	add	r7, sp, #0
 8001852:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_channel == NULL)
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	2b00      	cmp	r3, #0
 8001858:	d101      	bne.n	800185e <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 800185a:	2301      	movs	r3, #1
 800185c:	e0ac      	b.n	80019b8 <HAL_DFSDM_ChannelInit+0x16c>
  assert_param(IS_DFSDM_CHANNEL_FILTER_OVS_RATIO(hdfsdm_channel->Init.Awd.Oversampling));
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));

  /* Check that channel has not been already initialized */
  if (a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	4618      	mov	r0, r3
 8001864:	f000 f8b2 	bl	80019cc <DFSDM_GetChannelFromInstance>
 8001868:	4603      	mov	r3, r0
 800186a:	4a55      	ldr	r2, [pc, #340]	@ (80019c0 <HAL_DFSDM_ChannelInit+0x174>)
 800186c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001870:	2b00      	cmp	r3, #0
 8001872:	d001      	beq.n	8001878 <HAL_DFSDM_ChannelInit+0x2c>
  {
    return HAL_ERROR;
 8001874:	2301      	movs	r3, #1
 8001876:	e09f      	b.n	80019b8 <HAL_DFSDM_ChannelInit+0x16c>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 8001878:	6878      	ldr	r0, [r7, #4]
 800187a:	f7ff fb1b 	bl	8000eb4 <HAL_DFSDM_ChannelMspInit>
#endif

  /* Update the channel counter */
  v_dfsdm1ChannelCounter++;
 800187e:	4b51      	ldr	r3, [pc, #324]	@ (80019c4 <HAL_DFSDM_ChannelInit+0x178>)
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	3301      	adds	r3, #1
 8001884:	4a4f      	ldr	r2, [pc, #316]	@ (80019c4 <HAL_DFSDM_ChannelInit+0x178>)
 8001886:	6013      	str	r3, [r2, #0]

  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if (v_dfsdm1ChannelCounter == 1U)
 8001888:	4b4e      	ldr	r3, [pc, #312]	@ (80019c4 <HAL_DFSDM_ChannelInit+0x178>)
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	2b01      	cmp	r3, #1
 800188e:	d125      	bne.n	80018dc <HAL_DFSDM_ChannelInit+0x90>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 8001890:	4b4d      	ldr	r3, [pc, #308]	@ (80019c8 <HAL_DFSDM_ChannelInit+0x17c>)
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	4a4c      	ldr	r2, [pc, #304]	@ (80019c8 <HAL_DFSDM_ChannelInit+0x17c>)
 8001896:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800189a:	6013      	str	r3, [r2, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 800189c:	4b4a      	ldr	r3, [pc, #296]	@ (80019c8 <HAL_DFSDM_ChannelInit+0x17c>)
 800189e:	681a      	ldr	r2, [r3, #0]
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	689b      	ldr	r3, [r3, #8]
 80018a4:	4948      	ldr	r1, [pc, #288]	@ (80019c8 <HAL_DFSDM_ChannelInit+0x17c>)
 80018a6:	4313      	orrs	r3, r2
 80018a8:	600b      	str	r3, [r1, #0]

    /* Reset clock divider */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 80018aa:	4b47      	ldr	r3, [pc, #284]	@ (80019c8 <HAL_DFSDM_ChannelInit+0x17c>)
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	4a46      	ldr	r2, [pc, #280]	@ (80019c8 <HAL_DFSDM_ChannelInit+0x17c>)
 80018b0:	f423 037f 	bic.w	r3, r3, #16711680	@ 0xff0000
 80018b4:	6013      	str	r3, [r2, #0]
    if (hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	791b      	ldrb	r3, [r3, #4]
 80018ba:	2b01      	cmp	r3, #1
 80018bc:	d108      	bne.n	80018d0 <HAL_DFSDM_ChannelInit+0x84>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t)((hdfsdm_channel->Init.OutputClock.Divider - 1U) <<
 80018be:	4b42      	ldr	r3, [pc, #264]	@ (80019c8 <HAL_DFSDM_ChannelInit+0x17c>)
 80018c0:	681a      	ldr	r2, [r3, #0]
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	68db      	ldr	r3, [r3, #12]
 80018c6:	3b01      	subs	r3, #1
 80018c8:	041b      	lsls	r3, r3, #16
 80018ca:	493f      	ldr	r1, [pc, #252]	@ (80019c8 <HAL_DFSDM_ChannelInit+0x17c>)
 80018cc:	4313      	orrs	r3, r2
 80018ce:	600b      	str	r3, [r1, #0]
                                             DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }

    /* enable the DFSDM global interface */
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 80018d0:	4b3d      	ldr	r3, [pc, #244]	@ (80019c8 <HAL_DFSDM_ChannelInit+0x17c>)
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	4a3c      	ldr	r2, [pc, #240]	@ (80019c8 <HAL_DFSDM_ChannelInit+0x17c>)
 80018d6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80018da:	6013      	str	r3, [r2, #0]
  }

  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	681a      	ldr	r2, [r3, #0]
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	f422 4271 	bic.w	r2, r2, #61696	@ 0xf100
 80018ea:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	6819      	ldr	r1, [r3, #0]
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking |
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 80018fa:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8001900:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	430a      	orrs	r2, r1
 8001908:	601a      	str	r2, [r3, #0]

  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	681a      	ldr	r2, [r3, #0]
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	f022 020f 	bic.w	r2, r2, #15
 8001918:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	6819      	ldr	r1, [r3, #0]
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8001928:	431a      	orrs	r2, r3
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	430a      	orrs	r2, r1
 8001930:	601a      	str	r2, [r3, #0]

  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	689a      	ldr	r2, [r3, #8]
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	f422 025f 	bic.w	r2, r2, #14614528	@ 0xdf0000
 8001940:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	6899      	ldr	r1, [r3, #8]
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001950:	3b01      	subs	r3, #1
 8001952:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8001954:	431a      	orrs	r2, r3
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	430a      	orrs	r2, r1
 800195c:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	685a      	ldr	r2, [r3, #4]
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	f002 0207 	and.w	r2, r2, #7
 800196c:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	6859      	ldr	r1, [r3, #4]
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001978:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800197e:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8001980:	431a      	orrs	r2, r3
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	430a      	orrs	r2, r1
 8001988:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	681a      	ldr	r2, [r3, #0]
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001998:	601a      	str	r2, [r3, #0]

  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	2201      	movs	r2, #1
 800199e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	4618      	mov	r0, r3
 80019a8:	f000 f810 	bl	80019cc <DFSDM_GetChannelFromInstance>
 80019ac:	4602      	mov	r2, r0
 80019ae:	4904      	ldr	r1, [pc, #16]	@ (80019c0 <HAL_DFSDM_ChannelInit+0x174>)
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

  return HAL_OK;
 80019b6:	2300      	movs	r3, #0
}
 80019b8:	4618      	mov	r0, r3
 80019ba:	3708      	adds	r7, #8
 80019bc:	46bd      	mov	sp, r7
 80019be:	bd80      	pop	{r7, pc}
 80019c0:	20001310 	.word	0x20001310
 80019c4:	2000130c 	.word	0x2000130c
 80019c8:	40016000 	.word	0x40016000

080019cc <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef *Instance)
{
 80019cc:	b480      	push	{r7}
 80019ce:	b085      	sub	sp, #20
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	6078      	str	r0, [r7, #4]
  uint32_t channel;

  /* Get channel from instance */
  if (Instance == DFSDM1_Channel0)
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	4a1c      	ldr	r2, [pc, #112]	@ (8001a48 <DFSDM_GetChannelFromInstance+0x7c>)
 80019d8:	4293      	cmp	r3, r2
 80019da:	d102      	bne.n	80019e2 <DFSDM_GetChannelFromInstance+0x16>
  {
    channel = 0;
 80019dc:	2300      	movs	r3, #0
 80019de:	60fb      	str	r3, [r7, #12]
 80019e0:	e02b      	b.n	8001a3a <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel1)
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	4a19      	ldr	r2, [pc, #100]	@ (8001a4c <DFSDM_GetChannelFromInstance+0x80>)
 80019e6:	4293      	cmp	r3, r2
 80019e8:	d102      	bne.n	80019f0 <DFSDM_GetChannelFromInstance+0x24>
  {
    channel = 1;
 80019ea:	2301      	movs	r3, #1
 80019ec:	60fb      	str	r3, [r7, #12]
 80019ee:	e024      	b.n	8001a3a <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel2)
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	4a17      	ldr	r2, [pc, #92]	@ (8001a50 <DFSDM_GetChannelFromInstance+0x84>)
 80019f4:	4293      	cmp	r3, r2
 80019f6:	d102      	bne.n	80019fe <DFSDM_GetChannelFromInstance+0x32>
  {
    channel = 2;
 80019f8:	2302      	movs	r3, #2
 80019fa:	60fb      	str	r3, [r7, #12]
 80019fc:	e01d      	b.n	8001a3a <DFSDM_GetChannelFromInstance+0x6e>
  }
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else if (Instance == DFSDM1_Channel4)
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	4a14      	ldr	r2, [pc, #80]	@ (8001a54 <DFSDM_GetChannelFromInstance+0x88>)
 8001a02:	4293      	cmp	r3, r2
 8001a04:	d102      	bne.n	8001a0c <DFSDM_GetChannelFromInstance+0x40>
  {
    channel = 4;
 8001a06:	2304      	movs	r3, #4
 8001a08:	60fb      	str	r3, [r7, #12]
 8001a0a:	e016      	b.n	8001a3a <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel5)
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	4a12      	ldr	r2, [pc, #72]	@ (8001a58 <DFSDM_GetChannelFromInstance+0x8c>)
 8001a10:	4293      	cmp	r3, r2
 8001a12:	d102      	bne.n	8001a1a <DFSDM_GetChannelFromInstance+0x4e>
  {
    channel = 5;
 8001a14:	2305      	movs	r3, #5
 8001a16:	60fb      	str	r3, [r7, #12]
 8001a18:	e00f      	b.n	8001a3a <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel6)
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	4a0f      	ldr	r2, [pc, #60]	@ (8001a5c <DFSDM_GetChannelFromInstance+0x90>)
 8001a1e:	4293      	cmp	r3, r2
 8001a20:	d102      	bne.n	8001a28 <DFSDM_GetChannelFromInstance+0x5c>
  {
    channel = 6;
 8001a22:	2306      	movs	r3, #6
 8001a24:	60fb      	str	r3, [r7, #12]
 8001a26:	e008      	b.n	8001a3a <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel7)
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	4a0d      	ldr	r2, [pc, #52]	@ (8001a60 <DFSDM_GetChannelFromInstance+0x94>)
 8001a2c:	4293      	cmp	r3, r2
 8001a2e:	d102      	bne.n	8001a36 <DFSDM_GetChannelFromInstance+0x6a>
  {
    channel = 7;
 8001a30:	2307      	movs	r3, #7
 8001a32:	60fb      	str	r3, [r7, #12]
 8001a34:	e001      	b.n	8001a3a <DFSDM_GetChannelFromInstance+0x6e>
  }
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx || STM32L496xx || STM32L4A6xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else /* DFSDM1_Channel3 */
  {
    channel = 3;
 8001a36:	2303      	movs	r3, #3
 8001a38:	60fb      	str	r3, [r7, #12]
  }

  return channel;
 8001a3a:	68fb      	ldr	r3, [r7, #12]
}
 8001a3c:	4618      	mov	r0, r3
 8001a3e:	3714      	adds	r7, #20
 8001a40:	46bd      	mov	sp, r7
 8001a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a46:	4770      	bx	lr
 8001a48:	40016000 	.word	0x40016000
 8001a4c:	40016020 	.word	0x40016020
 8001a50:	40016040 	.word	0x40016040
 8001a54:	40016080 	.word	0x40016080
 8001a58:	400160a0 	.word	0x400160a0
 8001a5c:	400160c0 	.word	0x400160c0
 8001a60:	400160e0 	.word	0x400160e0

08001a64 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a64:	b480      	push	{r7}
 8001a66:	b087      	sub	sp, #28
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	6078      	str	r0, [r7, #4]
 8001a6c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001a6e:	2300      	movs	r3, #0
 8001a70:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a72:	e17f      	b.n	8001d74 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001a74:	683b      	ldr	r3, [r7, #0]
 8001a76:	681a      	ldr	r2, [r3, #0]
 8001a78:	2101      	movs	r1, #1
 8001a7a:	697b      	ldr	r3, [r7, #20]
 8001a7c:	fa01 f303 	lsl.w	r3, r1, r3
 8001a80:	4013      	ands	r3, r2
 8001a82:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	f000 8171 	beq.w	8001d6e <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001a8c:	683b      	ldr	r3, [r7, #0]
 8001a8e:	685b      	ldr	r3, [r3, #4]
 8001a90:	f003 0303 	and.w	r3, r3, #3
 8001a94:	2b01      	cmp	r3, #1
 8001a96:	d005      	beq.n	8001aa4 <HAL_GPIO_Init+0x40>
 8001a98:	683b      	ldr	r3, [r7, #0]
 8001a9a:	685b      	ldr	r3, [r3, #4]
 8001a9c:	f003 0303 	and.w	r3, r3, #3
 8001aa0:	2b02      	cmp	r3, #2
 8001aa2:	d130      	bne.n	8001b06 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	689b      	ldr	r3, [r3, #8]
 8001aa8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001aaa:	697b      	ldr	r3, [r7, #20]
 8001aac:	005b      	lsls	r3, r3, #1
 8001aae:	2203      	movs	r2, #3
 8001ab0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ab4:	43db      	mvns	r3, r3
 8001ab6:	693a      	ldr	r2, [r7, #16]
 8001ab8:	4013      	ands	r3, r2
 8001aba:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001abc:	683b      	ldr	r3, [r7, #0]
 8001abe:	68da      	ldr	r2, [r3, #12]
 8001ac0:	697b      	ldr	r3, [r7, #20]
 8001ac2:	005b      	lsls	r3, r3, #1
 8001ac4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ac8:	693a      	ldr	r2, [r7, #16]
 8001aca:	4313      	orrs	r3, r2
 8001acc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	693a      	ldr	r2, [r7, #16]
 8001ad2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	685b      	ldr	r3, [r3, #4]
 8001ad8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001ada:	2201      	movs	r2, #1
 8001adc:	697b      	ldr	r3, [r7, #20]
 8001ade:	fa02 f303 	lsl.w	r3, r2, r3
 8001ae2:	43db      	mvns	r3, r3
 8001ae4:	693a      	ldr	r2, [r7, #16]
 8001ae6:	4013      	ands	r3, r2
 8001ae8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001aea:	683b      	ldr	r3, [r7, #0]
 8001aec:	685b      	ldr	r3, [r3, #4]
 8001aee:	091b      	lsrs	r3, r3, #4
 8001af0:	f003 0201 	and.w	r2, r3, #1
 8001af4:	697b      	ldr	r3, [r7, #20]
 8001af6:	fa02 f303 	lsl.w	r3, r2, r3
 8001afa:	693a      	ldr	r2, [r7, #16]
 8001afc:	4313      	orrs	r3, r2
 8001afe:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	693a      	ldr	r2, [r7, #16]
 8001b04:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001b06:	683b      	ldr	r3, [r7, #0]
 8001b08:	685b      	ldr	r3, [r3, #4]
 8001b0a:	f003 0303 	and.w	r3, r3, #3
 8001b0e:	2b03      	cmp	r3, #3
 8001b10:	d118      	bne.n	8001b44 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b16:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001b18:	2201      	movs	r2, #1
 8001b1a:	697b      	ldr	r3, [r7, #20]
 8001b1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b20:	43db      	mvns	r3, r3
 8001b22:	693a      	ldr	r2, [r7, #16]
 8001b24:	4013      	ands	r3, r2
 8001b26:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8001b28:	683b      	ldr	r3, [r7, #0]
 8001b2a:	685b      	ldr	r3, [r3, #4]
 8001b2c:	08db      	lsrs	r3, r3, #3
 8001b2e:	f003 0201 	and.w	r2, r3, #1
 8001b32:	697b      	ldr	r3, [r7, #20]
 8001b34:	fa02 f303 	lsl.w	r3, r2, r3
 8001b38:	693a      	ldr	r2, [r7, #16]
 8001b3a:	4313      	orrs	r3, r2
 8001b3c:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	693a      	ldr	r2, [r7, #16]
 8001b42:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001b44:	683b      	ldr	r3, [r7, #0]
 8001b46:	685b      	ldr	r3, [r3, #4]
 8001b48:	f003 0303 	and.w	r3, r3, #3
 8001b4c:	2b03      	cmp	r3, #3
 8001b4e:	d017      	beq.n	8001b80 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	68db      	ldr	r3, [r3, #12]
 8001b54:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001b56:	697b      	ldr	r3, [r7, #20]
 8001b58:	005b      	lsls	r3, r3, #1
 8001b5a:	2203      	movs	r2, #3
 8001b5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b60:	43db      	mvns	r3, r3
 8001b62:	693a      	ldr	r2, [r7, #16]
 8001b64:	4013      	ands	r3, r2
 8001b66:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001b68:	683b      	ldr	r3, [r7, #0]
 8001b6a:	689a      	ldr	r2, [r3, #8]
 8001b6c:	697b      	ldr	r3, [r7, #20]
 8001b6e:	005b      	lsls	r3, r3, #1
 8001b70:	fa02 f303 	lsl.w	r3, r2, r3
 8001b74:	693a      	ldr	r2, [r7, #16]
 8001b76:	4313      	orrs	r3, r2
 8001b78:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	693a      	ldr	r2, [r7, #16]
 8001b7e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b80:	683b      	ldr	r3, [r7, #0]
 8001b82:	685b      	ldr	r3, [r3, #4]
 8001b84:	f003 0303 	and.w	r3, r3, #3
 8001b88:	2b02      	cmp	r3, #2
 8001b8a:	d123      	bne.n	8001bd4 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001b8c:	697b      	ldr	r3, [r7, #20]
 8001b8e:	08da      	lsrs	r2, r3, #3
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	3208      	adds	r2, #8
 8001b94:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b98:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001b9a:	697b      	ldr	r3, [r7, #20]
 8001b9c:	f003 0307 	and.w	r3, r3, #7
 8001ba0:	009b      	lsls	r3, r3, #2
 8001ba2:	220f      	movs	r2, #15
 8001ba4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ba8:	43db      	mvns	r3, r3
 8001baa:	693a      	ldr	r2, [r7, #16]
 8001bac:	4013      	ands	r3, r2
 8001bae:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001bb0:	683b      	ldr	r3, [r7, #0]
 8001bb2:	691a      	ldr	r2, [r3, #16]
 8001bb4:	697b      	ldr	r3, [r7, #20]
 8001bb6:	f003 0307 	and.w	r3, r3, #7
 8001bba:	009b      	lsls	r3, r3, #2
 8001bbc:	fa02 f303 	lsl.w	r3, r2, r3
 8001bc0:	693a      	ldr	r2, [r7, #16]
 8001bc2:	4313      	orrs	r3, r2
 8001bc4:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001bc6:	697b      	ldr	r3, [r7, #20]
 8001bc8:	08da      	lsrs	r2, r3, #3
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	3208      	adds	r2, #8
 8001bce:	6939      	ldr	r1, [r7, #16]
 8001bd0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001bda:	697b      	ldr	r3, [r7, #20]
 8001bdc:	005b      	lsls	r3, r3, #1
 8001bde:	2203      	movs	r2, #3
 8001be0:	fa02 f303 	lsl.w	r3, r2, r3
 8001be4:	43db      	mvns	r3, r3
 8001be6:	693a      	ldr	r2, [r7, #16]
 8001be8:	4013      	ands	r3, r2
 8001bea:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001bec:	683b      	ldr	r3, [r7, #0]
 8001bee:	685b      	ldr	r3, [r3, #4]
 8001bf0:	f003 0203 	and.w	r2, r3, #3
 8001bf4:	697b      	ldr	r3, [r7, #20]
 8001bf6:	005b      	lsls	r3, r3, #1
 8001bf8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bfc:	693a      	ldr	r2, [r7, #16]
 8001bfe:	4313      	orrs	r3, r2
 8001c00:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	693a      	ldr	r2, [r7, #16]
 8001c06:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001c08:	683b      	ldr	r3, [r7, #0]
 8001c0a:	685b      	ldr	r3, [r3, #4]
 8001c0c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	f000 80ac 	beq.w	8001d6e <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c16:	4b5f      	ldr	r3, [pc, #380]	@ (8001d94 <HAL_GPIO_Init+0x330>)
 8001c18:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001c1a:	4a5e      	ldr	r2, [pc, #376]	@ (8001d94 <HAL_GPIO_Init+0x330>)
 8001c1c:	f043 0301 	orr.w	r3, r3, #1
 8001c20:	6613      	str	r3, [r2, #96]	@ 0x60
 8001c22:	4b5c      	ldr	r3, [pc, #368]	@ (8001d94 <HAL_GPIO_Init+0x330>)
 8001c24:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001c26:	f003 0301 	and.w	r3, r3, #1
 8001c2a:	60bb      	str	r3, [r7, #8]
 8001c2c:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001c2e:	4a5a      	ldr	r2, [pc, #360]	@ (8001d98 <HAL_GPIO_Init+0x334>)
 8001c30:	697b      	ldr	r3, [r7, #20]
 8001c32:	089b      	lsrs	r3, r3, #2
 8001c34:	3302      	adds	r3, #2
 8001c36:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c3a:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001c3c:	697b      	ldr	r3, [r7, #20]
 8001c3e:	f003 0303 	and.w	r3, r3, #3
 8001c42:	009b      	lsls	r3, r3, #2
 8001c44:	220f      	movs	r2, #15
 8001c46:	fa02 f303 	lsl.w	r3, r2, r3
 8001c4a:	43db      	mvns	r3, r3
 8001c4c:	693a      	ldr	r2, [r7, #16]
 8001c4e:	4013      	ands	r3, r2
 8001c50:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001c58:	d025      	beq.n	8001ca6 <HAL_GPIO_Init+0x242>
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	4a4f      	ldr	r2, [pc, #316]	@ (8001d9c <HAL_GPIO_Init+0x338>)
 8001c5e:	4293      	cmp	r3, r2
 8001c60:	d01f      	beq.n	8001ca2 <HAL_GPIO_Init+0x23e>
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	4a4e      	ldr	r2, [pc, #312]	@ (8001da0 <HAL_GPIO_Init+0x33c>)
 8001c66:	4293      	cmp	r3, r2
 8001c68:	d019      	beq.n	8001c9e <HAL_GPIO_Init+0x23a>
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	4a4d      	ldr	r2, [pc, #308]	@ (8001da4 <HAL_GPIO_Init+0x340>)
 8001c6e:	4293      	cmp	r3, r2
 8001c70:	d013      	beq.n	8001c9a <HAL_GPIO_Init+0x236>
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	4a4c      	ldr	r2, [pc, #304]	@ (8001da8 <HAL_GPIO_Init+0x344>)
 8001c76:	4293      	cmp	r3, r2
 8001c78:	d00d      	beq.n	8001c96 <HAL_GPIO_Init+0x232>
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	4a4b      	ldr	r2, [pc, #300]	@ (8001dac <HAL_GPIO_Init+0x348>)
 8001c7e:	4293      	cmp	r3, r2
 8001c80:	d007      	beq.n	8001c92 <HAL_GPIO_Init+0x22e>
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	4a4a      	ldr	r2, [pc, #296]	@ (8001db0 <HAL_GPIO_Init+0x34c>)
 8001c86:	4293      	cmp	r3, r2
 8001c88:	d101      	bne.n	8001c8e <HAL_GPIO_Init+0x22a>
 8001c8a:	2306      	movs	r3, #6
 8001c8c:	e00c      	b.n	8001ca8 <HAL_GPIO_Init+0x244>
 8001c8e:	2307      	movs	r3, #7
 8001c90:	e00a      	b.n	8001ca8 <HAL_GPIO_Init+0x244>
 8001c92:	2305      	movs	r3, #5
 8001c94:	e008      	b.n	8001ca8 <HAL_GPIO_Init+0x244>
 8001c96:	2304      	movs	r3, #4
 8001c98:	e006      	b.n	8001ca8 <HAL_GPIO_Init+0x244>
 8001c9a:	2303      	movs	r3, #3
 8001c9c:	e004      	b.n	8001ca8 <HAL_GPIO_Init+0x244>
 8001c9e:	2302      	movs	r3, #2
 8001ca0:	e002      	b.n	8001ca8 <HAL_GPIO_Init+0x244>
 8001ca2:	2301      	movs	r3, #1
 8001ca4:	e000      	b.n	8001ca8 <HAL_GPIO_Init+0x244>
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	697a      	ldr	r2, [r7, #20]
 8001caa:	f002 0203 	and.w	r2, r2, #3
 8001cae:	0092      	lsls	r2, r2, #2
 8001cb0:	4093      	lsls	r3, r2
 8001cb2:	693a      	ldr	r2, [r7, #16]
 8001cb4:	4313      	orrs	r3, r2
 8001cb6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001cb8:	4937      	ldr	r1, [pc, #220]	@ (8001d98 <HAL_GPIO_Init+0x334>)
 8001cba:	697b      	ldr	r3, [r7, #20]
 8001cbc:	089b      	lsrs	r3, r3, #2
 8001cbe:	3302      	adds	r3, #2
 8001cc0:	693a      	ldr	r2, [r7, #16]
 8001cc2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001cc6:	4b3b      	ldr	r3, [pc, #236]	@ (8001db4 <HAL_GPIO_Init+0x350>)
 8001cc8:	689b      	ldr	r3, [r3, #8]
 8001cca:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	43db      	mvns	r3, r3
 8001cd0:	693a      	ldr	r2, [r7, #16]
 8001cd2:	4013      	ands	r3, r2
 8001cd4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001cd6:	683b      	ldr	r3, [r7, #0]
 8001cd8:	685b      	ldr	r3, [r3, #4]
 8001cda:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d003      	beq.n	8001cea <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001ce2:	693a      	ldr	r2, [r7, #16]
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	4313      	orrs	r3, r2
 8001ce8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001cea:	4a32      	ldr	r2, [pc, #200]	@ (8001db4 <HAL_GPIO_Init+0x350>)
 8001cec:	693b      	ldr	r3, [r7, #16]
 8001cee:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001cf0:	4b30      	ldr	r3, [pc, #192]	@ (8001db4 <HAL_GPIO_Init+0x350>)
 8001cf2:	68db      	ldr	r3, [r3, #12]
 8001cf4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	43db      	mvns	r3, r3
 8001cfa:	693a      	ldr	r2, [r7, #16]
 8001cfc:	4013      	ands	r3, r2
 8001cfe:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001d00:	683b      	ldr	r3, [r7, #0]
 8001d02:	685b      	ldr	r3, [r3, #4]
 8001d04:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d003      	beq.n	8001d14 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001d0c:	693a      	ldr	r2, [r7, #16]
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	4313      	orrs	r3, r2
 8001d12:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001d14:	4a27      	ldr	r2, [pc, #156]	@ (8001db4 <HAL_GPIO_Init+0x350>)
 8001d16:	693b      	ldr	r3, [r7, #16]
 8001d18:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001d1a:	4b26      	ldr	r3, [pc, #152]	@ (8001db4 <HAL_GPIO_Init+0x350>)
 8001d1c:	685b      	ldr	r3, [r3, #4]
 8001d1e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	43db      	mvns	r3, r3
 8001d24:	693a      	ldr	r2, [r7, #16]
 8001d26:	4013      	ands	r3, r2
 8001d28:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001d2a:	683b      	ldr	r3, [r7, #0]
 8001d2c:	685b      	ldr	r3, [r3, #4]
 8001d2e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d003      	beq.n	8001d3e <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001d36:	693a      	ldr	r2, [r7, #16]
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	4313      	orrs	r3, r2
 8001d3c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001d3e:	4a1d      	ldr	r2, [pc, #116]	@ (8001db4 <HAL_GPIO_Init+0x350>)
 8001d40:	693b      	ldr	r3, [r7, #16]
 8001d42:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001d44:	4b1b      	ldr	r3, [pc, #108]	@ (8001db4 <HAL_GPIO_Init+0x350>)
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	43db      	mvns	r3, r3
 8001d4e:	693a      	ldr	r2, [r7, #16]
 8001d50:	4013      	ands	r3, r2
 8001d52:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001d54:	683b      	ldr	r3, [r7, #0]
 8001d56:	685b      	ldr	r3, [r3, #4]
 8001d58:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d003      	beq.n	8001d68 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001d60:	693a      	ldr	r2, [r7, #16]
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	4313      	orrs	r3, r2
 8001d66:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001d68:	4a12      	ldr	r2, [pc, #72]	@ (8001db4 <HAL_GPIO_Init+0x350>)
 8001d6a:	693b      	ldr	r3, [r7, #16]
 8001d6c:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001d6e:	697b      	ldr	r3, [r7, #20]
 8001d70:	3301      	adds	r3, #1
 8001d72:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d74:	683b      	ldr	r3, [r7, #0]
 8001d76:	681a      	ldr	r2, [r3, #0]
 8001d78:	697b      	ldr	r3, [r7, #20]
 8001d7a:	fa22 f303 	lsr.w	r3, r2, r3
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	f47f ae78 	bne.w	8001a74 <HAL_GPIO_Init+0x10>
  }
}
 8001d84:	bf00      	nop
 8001d86:	bf00      	nop
 8001d88:	371c      	adds	r7, #28
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d90:	4770      	bx	lr
 8001d92:	bf00      	nop
 8001d94:	40021000 	.word	0x40021000
 8001d98:	40010000 	.word	0x40010000
 8001d9c:	48000400 	.word	0x48000400
 8001da0:	48000800 	.word	0x48000800
 8001da4:	48000c00 	.word	0x48000c00
 8001da8:	48001000 	.word	0x48001000
 8001dac:	48001400 	.word	0x48001400
 8001db0:	48001800 	.word	0x48001800
 8001db4:	40010400 	.word	0x40010400

08001db8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001db8:	b480      	push	{r7}
 8001dba:	b083      	sub	sp, #12
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	6078      	str	r0, [r7, #4]
 8001dc0:	460b      	mov	r3, r1
 8001dc2:	807b      	strh	r3, [r7, #2]
 8001dc4:	4613      	mov	r3, r2
 8001dc6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001dc8:	787b      	ldrb	r3, [r7, #1]
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d003      	beq.n	8001dd6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001dce:	887a      	ldrh	r2, [r7, #2]
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001dd4:	e002      	b.n	8001ddc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001dd6:	887a      	ldrh	r2, [r7, #2]
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001ddc:	bf00      	nop
 8001dde:	370c      	adds	r7, #12
 8001de0:	46bd      	mov	sp, r7
 8001de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de6:	4770      	bx	lr

08001de8 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001de8:	b480      	push	{r7}
 8001dea:	b085      	sub	sp, #20
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	6078      	str	r0, [r7, #4]
 8001df0:	460b      	mov	r3, r1
 8001df2:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	695b      	ldr	r3, [r3, #20]
 8001df8:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001dfa:	887a      	ldrh	r2, [r7, #2]
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	4013      	ands	r3, r2
 8001e00:	041a      	lsls	r2, r3, #16
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	43d9      	mvns	r1, r3
 8001e06:	887b      	ldrh	r3, [r7, #2]
 8001e08:	400b      	ands	r3, r1
 8001e0a:	431a      	orrs	r2, r3
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	619a      	str	r2, [r3, #24]
}
 8001e10:	bf00      	nop
 8001e12:	3714      	adds	r7, #20
 8001e14:	46bd      	mov	sp, r7
 8001e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e1a:	4770      	bx	lr

08001e1c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	b082      	sub	sp, #8
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	4603      	mov	r3, r0
 8001e24:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001e26:	4b08      	ldr	r3, [pc, #32]	@ (8001e48 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001e28:	695a      	ldr	r2, [r3, #20]
 8001e2a:	88fb      	ldrh	r3, [r7, #6]
 8001e2c:	4013      	ands	r3, r2
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d006      	beq.n	8001e40 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001e32:	4a05      	ldr	r2, [pc, #20]	@ (8001e48 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001e34:	88fb      	ldrh	r3, [r7, #6]
 8001e36:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001e38:	88fb      	ldrh	r3, [r7, #6]
 8001e3a:	4618      	mov	r0, r3
 8001e3c:	f7fe ff50 	bl	8000ce0 <HAL_GPIO_EXTI_Callback>
  }
}
 8001e40:	bf00      	nop
 8001e42:	3708      	adds	r7, #8
 8001e44:	46bd      	mov	sp, r7
 8001e46:	bd80      	pop	{r7, pc}
 8001e48:	40010400 	.word	0x40010400

08001e4c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	b082      	sub	sp, #8
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d101      	bne.n	8001e5e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001e5a:	2301      	movs	r3, #1
 8001e5c:	e08d      	b.n	8001f7a <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001e64:	b2db      	uxtb	r3, r3
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d106      	bne.n	8001e78 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001e72:	6878      	ldr	r0, [r7, #4]
 8001e74:	f7ff f882 	bl	8000f7c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	2224      	movs	r2, #36	@ 0x24
 8001e7c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	681a      	ldr	r2, [r3, #0]
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	f022 0201 	bic.w	r2, r2, #1
 8001e8e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	685a      	ldr	r2, [r3, #4]
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001e9c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	689a      	ldr	r2, [r3, #8]
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001eac:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	68db      	ldr	r3, [r3, #12]
 8001eb2:	2b01      	cmp	r3, #1
 8001eb4:	d107      	bne.n	8001ec6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	689a      	ldr	r2, [r3, #8]
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001ec2:	609a      	str	r2, [r3, #8]
 8001ec4:	e006      	b.n	8001ed4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	689a      	ldr	r2, [r3, #8]
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8001ed2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	68db      	ldr	r3, [r3, #12]
 8001ed8:	2b02      	cmp	r3, #2
 8001eda:	d108      	bne.n	8001eee <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	685a      	ldr	r2, [r3, #4]
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001eea:	605a      	str	r2, [r3, #4]
 8001eec:	e007      	b.n	8001efe <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	685a      	ldr	r2, [r3, #4]
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001efc:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	685b      	ldr	r3, [r3, #4]
 8001f04:	687a      	ldr	r2, [r7, #4]
 8001f06:	6812      	ldr	r2, [r2, #0]
 8001f08:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001f0c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001f10:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	68da      	ldr	r2, [r3, #12]
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001f20:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	691a      	ldr	r2, [r3, #16]
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	695b      	ldr	r3, [r3, #20]
 8001f2a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	699b      	ldr	r3, [r3, #24]
 8001f32:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	430a      	orrs	r2, r1
 8001f3a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	69d9      	ldr	r1, [r3, #28]
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	6a1a      	ldr	r2, [r3, #32]
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	430a      	orrs	r2, r1
 8001f4a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	681a      	ldr	r2, [r3, #0]
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	f042 0201 	orr.w	r2, r2, #1
 8001f5a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	2200      	movs	r2, #0
 8001f60:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	2220      	movs	r2, #32
 8001f66:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	2200      	movs	r2, #0
 8001f74:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8001f78:	2300      	movs	r3, #0
}
 8001f7a:	4618      	mov	r0, r3
 8001f7c:	3708      	adds	r7, #8
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	bd80      	pop	{r7, pc}

08001f82 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001f82:	b480      	push	{r7}
 8001f84:	b083      	sub	sp, #12
 8001f86:	af00      	add	r7, sp, #0
 8001f88:	6078      	str	r0, [r7, #4]
 8001f8a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001f92:	b2db      	uxtb	r3, r3
 8001f94:	2b20      	cmp	r3, #32
 8001f96:	d138      	bne.n	800200a <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001f9e:	2b01      	cmp	r3, #1
 8001fa0:	d101      	bne.n	8001fa6 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001fa2:	2302      	movs	r3, #2
 8001fa4:	e032      	b.n	800200c <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	2201      	movs	r2, #1
 8001faa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	2224      	movs	r2, #36	@ 0x24
 8001fb2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	681a      	ldr	r2, [r3, #0]
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	f022 0201 	bic.w	r2, r2, #1
 8001fc4:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	681a      	ldr	r2, [r3, #0]
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8001fd4:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	6819      	ldr	r1, [r3, #0]
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	683a      	ldr	r2, [r7, #0]
 8001fe2:	430a      	orrs	r2, r1
 8001fe4:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	681a      	ldr	r2, [r3, #0]
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	f042 0201 	orr.w	r2, r2, #1
 8001ff4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	2220      	movs	r2, #32
 8001ffa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	2200      	movs	r2, #0
 8002002:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002006:	2300      	movs	r3, #0
 8002008:	e000      	b.n	800200c <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800200a:	2302      	movs	r3, #2
  }
}
 800200c:	4618      	mov	r0, r3
 800200e:	370c      	adds	r7, #12
 8002010:	46bd      	mov	sp, r7
 8002012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002016:	4770      	bx	lr

08002018 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002018:	b480      	push	{r7}
 800201a:	b085      	sub	sp, #20
 800201c:	af00      	add	r7, sp, #0
 800201e:	6078      	str	r0, [r7, #4]
 8002020:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002028:	b2db      	uxtb	r3, r3
 800202a:	2b20      	cmp	r3, #32
 800202c:	d139      	bne.n	80020a2 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002034:	2b01      	cmp	r3, #1
 8002036:	d101      	bne.n	800203c <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002038:	2302      	movs	r3, #2
 800203a:	e033      	b.n	80020a4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	2201      	movs	r2, #1
 8002040:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	2224      	movs	r2, #36	@ 0x24
 8002048:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	681a      	ldr	r2, [r3, #0]
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	f022 0201 	bic.w	r2, r2, #1
 800205a:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800206a:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800206c:	683b      	ldr	r3, [r7, #0]
 800206e:	021b      	lsls	r3, r3, #8
 8002070:	68fa      	ldr	r2, [r7, #12]
 8002072:	4313      	orrs	r3, r2
 8002074:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	68fa      	ldr	r2, [r7, #12]
 800207c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	681a      	ldr	r2, [r3, #0]
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	f042 0201 	orr.w	r2, r2, #1
 800208c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	2220      	movs	r2, #32
 8002092:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	2200      	movs	r2, #0
 800209a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800209e:	2300      	movs	r3, #0
 80020a0:	e000      	b.n	80020a4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80020a2:	2302      	movs	r3, #2
  }
}
 80020a4:	4618      	mov	r0, r3
 80020a6:	3714      	adds	r7, #20
 80020a8:	46bd      	mov	sp, r7
 80020aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ae:	4770      	bx	lr

080020b0 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80020b0:	b580      	push	{r7, lr}
 80020b2:	b086      	sub	sp, #24
 80020b4:	af02      	add	r7, sp, #8
 80020b6:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d101      	bne.n	80020c2 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80020be:	2301      	movs	r3, #1
 80020c0:	e101      	b.n	80022c6 <HAL_PCD_Init+0x216>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 80020c8:	b2db      	uxtb	r3, r3
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d106      	bne.n	80020dc <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	2200      	movs	r2, #0
 80020d2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80020d6:	6878      	ldr	r0, [r7, #4]
 80020d8:	f7ff f8da 	bl	8001290 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	2203      	movs	r2, #3
 80020e0:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Disable DMA mode for FS instance */
  hpcd->Init.dma_enable = 0U;
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	2200      	movs	r2, #0
 80020e8:	719a      	strb	r2, [r3, #6]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	4618      	mov	r0, r3
 80020f0:	f002 fe06 	bl	8004d00 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	6818      	ldr	r0, [r3, #0]
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	7c1a      	ldrb	r2, [r3, #16]
 80020fc:	f88d 2000 	strb.w	r2, [sp]
 8002100:	3304      	adds	r3, #4
 8002102:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002104:	f002 fdcf 	bl	8004ca6 <USB_CoreInit>
 8002108:	4603      	mov	r3, r0
 800210a:	2b00      	cmp	r3, #0
 800210c:	d005      	beq.n	800211a <HAL_PCD_Init+0x6a>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	2202      	movs	r2, #2
 8002112:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002116:	2301      	movs	r3, #1
 8002118:	e0d5      	b.n	80022c6 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	2100      	movs	r1, #0
 8002120:	4618      	mov	r0, r3
 8002122:	f002 fdfe 	bl	8004d22 <USB_SetCurrentMode>
 8002126:	4603      	mov	r3, r0
 8002128:	2b00      	cmp	r3, #0
 800212a:	d005      	beq.n	8002138 <HAL_PCD_Init+0x88>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	2202      	movs	r2, #2
 8002130:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002134:	2301      	movs	r3, #1
 8002136:	e0c6      	b.n	80022c6 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002138:	2300      	movs	r3, #0
 800213a:	73fb      	strb	r3, [r7, #15]
 800213c:	e04a      	b.n	80021d4 <HAL_PCD_Init+0x124>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800213e:	7bfa      	ldrb	r2, [r7, #15]
 8002140:	6879      	ldr	r1, [r7, #4]
 8002142:	4613      	mov	r3, r2
 8002144:	00db      	lsls	r3, r3, #3
 8002146:	4413      	add	r3, r2
 8002148:	009b      	lsls	r3, r3, #2
 800214a:	440b      	add	r3, r1
 800214c:	3315      	adds	r3, #21
 800214e:	2201      	movs	r2, #1
 8002150:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002152:	7bfa      	ldrb	r2, [r7, #15]
 8002154:	6879      	ldr	r1, [r7, #4]
 8002156:	4613      	mov	r3, r2
 8002158:	00db      	lsls	r3, r3, #3
 800215a:	4413      	add	r3, r2
 800215c:	009b      	lsls	r3, r3, #2
 800215e:	440b      	add	r3, r1
 8002160:	3314      	adds	r3, #20
 8002162:	7bfa      	ldrb	r2, [r7, #15]
 8002164:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002166:	7bfa      	ldrb	r2, [r7, #15]
 8002168:	7bfb      	ldrb	r3, [r7, #15]
 800216a:	b298      	uxth	r0, r3
 800216c:	6879      	ldr	r1, [r7, #4]
 800216e:	4613      	mov	r3, r2
 8002170:	00db      	lsls	r3, r3, #3
 8002172:	4413      	add	r3, r2
 8002174:	009b      	lsls	r3, r3, #2
 8002176:	440b      	add	r3, r1
 8002178:	332e      	adds	r3, #46	@ 0x2e
 800217a:	4602      	mov	r2, r0
 800217c:	801a      	strh	r2, [r3, #0]
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800217e:	7bfa      	ldrb	r2, [r7, #15]
 8002180:	6879      	ldr	r1, [r7, #4]
 8002182:	4613      	mov	r3, r2
 8002184:	00db      	lsls	r3, r3, #3
 8002186:	4413      	add	r3, r2
 8002188:	009b      	lsls	r3, r3, #2
 800218a:	440b      	add	r3, r1
 800218c:	3318      	adds	r3, #24
 800218e:	2200      	movs	r2, #0
 8002190:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002192:	7bfa      	ldrb	r2, [r7, #15]
 8002194:	6879      	ldr	r1, [r7, #4]
 8002196:	4613      	mov	r3, r2
 8002198:	00db      	lsls	r3, r3, #3
 800219a:	4413      	add	r3, r2
 800219c:	009b      	lsls	r3, r3, #2
 800219e:	440b      	add	r3, r1
 80021a0:	331c      	adds	r3, #28
 80021a2:	2200      	movs	r2, #0
 80021a4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80021a6:	7bfa      	ldrb	r2, [r7, #15]
 80021a8:	6879      	ldr	r1, [r7, #4]
 80021aa:	4613      	mov	r3, r2
 80021ac:	00db      	lsls	r3, r3, #3
 80021ae:	4413      	add	r3, r2
 80021b0:	009b      	lsls	r3, r3, #2
 80021b2:	440b      	add	r3, r1
 80021b4:	3320      	adds	r3, #32
 80021b6:	2200      	movs	r2, #0
 80021b8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80021ba:	7bfa      	ldrb	r2, [r7, #15]
 80021bc:	6879      	ldr	r1, [r7, #4]
 80021be:	4613      	mov	r3, r2
 80021c0:	00db      	lsls	r3, r3, #3
 80021c2:	4413      	add	r3, r2
 80021c4:	009b      	lsls	r3, r3, #2
 80021c6:	440b      	add	r3, r1
 80021c8:	3324      	adds	r3, #36	@ 0x24
 80021ca:	2200      	movs	r2, #0
 80021cc:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80021ce:	7bfb      	ldrb	r3, [r7, #15]
 80021d0:	3301      	adds	r3, #1
 80021d2:	73fb      	strb	r3, [r7, #15]
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	791b      	ldrb	r3, [r3, #4]
 80021d8:	7bfa      	ldrb	r2, [r7, #15]
 80021da:	429a      	cmp	r2, r3
 80021dc:	d3af      	bcc.n	800213e <HAL_PCD_Init+0x8e>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80021de:	2300      	movs	r3, #0
 80021e0:	73fb      	strb	r3, [r7, #15]
 80021e2:	e044      	b.n	800226e <HAL_PCD_Init+0x1be>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80021e4:	7bfa      	ldrb	r2, [r7, #15]
 80021e6:	6879      	ldr	r1, [r7, #4]
 80021e8:	4613      	mov	r3, r2
 80021ea:	00db      	lsls	r3, r3, #3
 80021ec:	4413      	add	r3, r2
 80021ee:	009b      	lsls	r3, r3, #2
 80021f0:	440b      	add	r3, r1
 80021f2:	f203 2355 	addw	r3, r3, #597	@ 0x255
 80021f6:	2200      	movs	r2, #0
 80021f8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80021fa:	7bfa      	ldrb	r2, [r7, #15]
 80021fc:	6879      	ldr	r1, [r7, #4]
 80021fe:	4613      	mov	r3, r2
 8002200:	00db      	lsls	r3, r3, #3
 8002202:	4413      	add	r3, r2
 8002204:	009b      	lsls	r3, r3, #2
 8002206:	440b      	add	r3, r1
 8002208:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 800220c:	7bfa      	ldrb	r2, [r7, #15]
 800220e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002210:	7bfa      	ldrb	r2, [r7, #15]
 8002212:	6879      	ldr	r1, [r7, #4]
 8002214:	4613      	mov	r3, r2
 8002216:	00db      	lsls	r3, r3, #3
 8002218:	4413      	add	r3, r2
 800221a:	009b      	lsls	r3, r3, #2
 800221c:	440b      	add	r3, r1
 800221e:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8002222:	2200      	movs	r2, #0
 8002224:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002226:	7bfa      	ldrb	r2, [r7, #15]
 8002228:	6879      	ldr	r1, [r7, #4]
 800222a:	4613      	mov	r3, r2
 800222c:	00db      	lsls	r3, r3, #3
 800222e:	4413      	add	r3, r2
 8002230:	009b      	lsls	r3, r3, #2
 8002232:	440b      	add	r3, r1
 8002234:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8002238:	2200      	movs	r2, #0
 800223a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800223c:	7bfa      	ldrb	r2, [r7, #15]
 800223e:	6879      	ldr	r1, [r7, #4]
 8002240:	4613      	mov	r3, r2
 8002242:	00db      	lsls	r3, r3, #3
 8002244:	4413      	add	r3, r2
 8002246:	009b      	lsls	r3, r3, #2
 8002248:	440b      	add	r3, r1
 800224a:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800224e:	2200      	movs	r2, #0
 8002250:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002252:	7bfa      	ldrb	r2, [r7, #15]
 8002254:	6879      	ldr	r1, [r7, #4]
 8002256:	4613      	mov	r3, r2
 8002258:	00db      	lsls	r3, r3, #3
 800225a:	4413      	add	r3, r2
 800225c:	009b      	lsls	r3, r3, #2
 800225e:	440b      	add	r3, r1
 8002260:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8002264:	2200      	movs	r2, #0
 8002266:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002268:	7bfb      	ldrb	r3, [r7, #15]
 800226a:	3301      	adds	r3, #1
 800226c:	73fb      	strb	r3, [r7, #15]
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	791b      	ldrb	r3, [r3, #4]
 8002272:	7bfa      	ldrb	r2, [r7, #15]
 8002274:	429a      	cmp	r2, r3
 8002276:	d3b5      	bcc.n	80021e4 <HAL_PCD_Init+0x134>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	6818      	ldr	r0, [r3, #0]
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	7c1a      	ldrb	r2, [r3, #16]
 8002280:	f88d 2000 	strb.w	r2, [sp]
 8002284:	3304      	adds	r3, #4
 8002286:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002288:	f002 fd98 	bl	8004dbc <USB_DevInit>
 800228c:	4603      	mov	r3, r0
 800228e:	2b00      	cmp	r3, #0
 8002290:	d005      	beq.n	800229e <HAL_PCD_Init+0x1ee>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	2202      	movs	r2, #2
 8002296:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800229a:	2301      	movs	r3, #1
 800229c:	e013      	b.n	80022c6 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	2200      	movs	r2, #0
 80022a2:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	2201      	movs	r2, #1
 80022a8:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	7b1b      	ldrb	r3, [r3, #12]
 80022b0:	2b01      	cmp	r3, #1
 80022b2:	d102      	bne.n	80022ba <HAL_PCD_Init+0x20a>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80022b4:	6878      	ldr	r0, [r7, #4]
 80022b6:	f000 f80a 	bl	80022ce <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	4618      	mov	r0, r3
 80022c0:	f002 ff3d 	bl	800513e <USB_DevDisconnect>

  return HAL_OK;
 80022c4:	2300      	movs	r3, #0
}
 80022c6:	4618      	mov	r0, r3
 80022c8:	3710      	adds	r7, #16
 80022ca:	46bd      	mov	sp, r7
 80022cc:	bd80      	pop	{r7, pc}

080022ce <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80022ce:	b480      	push	{r7}
 80022d0:	b085      	sub	sp, #20
 80022d2:	af00      	add	r7, sp, #0
 80022d4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	2201      	movs	r2, #1
 80022e0:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	2200      	movs	r2, #0
 80022e8:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	699b      	ldr	r3, [r3, #24]
 80022f0:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80022fc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002300:	f043 0303 	orr.w	r3, r3, #3
 8002304:	68fa      	ldr	r2, [r7, #12]
 8002306:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8002308:	2300      	movs	r3, #0
}
 800230a:	4618      	mov	r0, r3
 800230c:	3714      	adds	r7, #20
 800230e:	46bd      	mov	sp, r7
 8002310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002314:	4770      	bx	lr
	...

08002318 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002318:	b480      	push	{r7}
 800231a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800231c:	4b05      	ldr	r3, [pc, #20]	@ (8002334 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	4a04      	ldr	r2, [pc, #16]	@ (8002334 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002322:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002326:	6013      	str	r3, [r2, #0]
}
 8002328:	bf00      	nop
 800232a:	46bd      	mov	sp, r7
 800232c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002330:	4770      	bx	lr
 8002332:	bf00      	nop
 8002334:	40007000 	.word	0x40007000

08002338 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002338:	b480      	push	{r7}
 800233a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800233c:	4b04      	ldr	r3, [pc, #16]	@ (8002350 <HAL_PWREx_GetVoltageRange+0x18>)
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8002344:	4618      	mov	r0, r3
 8002346:	46bd      	mov	sp, r7
 8002348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800234c:	4770      	bx	lr
 800234e:	bf00      	nop
 8002350:	40007000 	.word	0x40007000

08002354 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002354:	b480      	push	{r7}
 8002356:	b085      	sub	sp, #20
 8002358:	af00      	add	r7, sp, #0
 800235a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002362:	d130      	bne.n	80023c6 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002364:	4b23      	ldr	r3, [pc, #140]	@ (80023f4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800236c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002370:	d038      	beq.n	80023e4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002372:	4b20      	ldr	r3, [pc, #128]	@ (80023f4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800237a:	4a1e      	ldr	r2, [pc, #120]	@ (80023f4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800237c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002380:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002382:	4b1d      	ldr	r3, [pc, #116]	@ (80023f8 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	2232      	movs	r2, #50	@ 0x32
 8002388:	fb02 f303 	mul.w	r3, r2, r3
 800238c:	4a1b      	ldr	r2, [pc, #108]	@ (80023fc <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800238e:	fba2 2303 	umull	r2, r3, r2, r3
 8002392:	0c9b      	lsrs	r3, r3, #18
 8002394:	3301      	adds	r3, #1
 8002396:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002398:	e002      	b.n	80023a0 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	3b01      	subs	r3, #1
 800239e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80023a0:	4b14      	ldr	r3, [pc, #80]	@ (80023f4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80023a2:	695b      	ldr	r3, [r3, #20]
 80023a4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80023a8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80023ac:	d102      	bne.n	80023b4 <HAL_PWREx_ControlVoltageScaling+0x60>
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d1f2      	bne.n	800239a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80023b4:	4b0f      	ldr	r3, [pc, #60]	@ (80023f4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80023b6:	695b      	ldr	r3, [r3, #20]
 80023b8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80023bc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80023c0:	d110      	bne.n	80023e4 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80023c2:	2303      	movs	r3, #3
 80023c4:	e00f      	b.n	80023e6 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80023c6:	4b0b      	ldr	r3, [pc, #44]	@ (80023f4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80023ce:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80023d2:	d007      	beq.n	80023e4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80023d4:	4b07      	ldr	r3, [pc, #28]	@ (80023f4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80023dc:	4a05      	ldr	r2, [pc, #20]	@ (80023f4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80023de:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80023e2:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80023e4:	2300      	movs	r3, #0
}
 80023e6:	4618      	mov	r0, r3
 80023e8:	3714      	adds	r7, #20
 80023ea:	46bd      	mov	sp, r7
 80023ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f0:	4770      	bx	lr
 80023f2:	bf00      	nop
 80023f4:	40007000 	.word	0x40007000
 80023f8:	20000008 	.word	0x20000008
 80023fc:	431bde83 	.word	0x431bde83

08002400 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8002400:	b480      	push	{r7}
 8002402:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8002404:	4b05      	ldr	r3, [pc, #20]	@ (800241c <HAL_PWREx_EnableVddUSB+0x1c>)
 8002406:	685b      	ldr	r3, [r3, #4]
 8002408:	4a04      	ldr	r2, [pc, #16]	@ (800241c <HAL_PWREx_EnableVddUSB+0x1c>)
 800240a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800240e:	6053      	str	r3, [r2, #4]
}
 8002410:	bf00      	nop
 8002412:	46bd      	mov	sp, r7
 8002414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002418:	4770      	bx	lr
 800241a:	bf00      	nop
 800241c:	40007000 	.word	0x40007000

08002420 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8002420:	b580      	push	{r7, lr}
 8002422:	b086      	sub	sp, #24
 8002424:	af02      	add	r7, sp, #8
 8002426:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8002428:	f7ff f8fe 	bl	8001628 <HAL_GetTick>
 800242c:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	2b00      	cmp	r3, #0
 8002432:	d101      	bne.n	8002438 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8002434:	2301      	movs	r3, #1
 8002436:	e063      	b.n	8002500 <HAL_QSPI_Init+0xe0>
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }
#endif

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 800243e:	b2db      	uxtb	r3, r3
 8002440:	2b00      	cmp	r3, #0
 8002442:	d10b      	bne.n	800245c <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	2200      	movs	r2, #0
 8002448:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 800244c:	6878      	ldr	r0, [r7, #4]
 800244e:	f7fe fdf3 	bl	8001038 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 8002452:	f241 3188 	movw	r1, #5000	@ 0x1388
 8002456:	6878      	ldr	r0, [r7, #4]
 8002458:	f000 f858 	bl	800250c <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	f423 6170 	bic.w	r1, r3, #3840	@ 0xf00
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	689b      	ldr	r3, [r3, #8]
 800246a:	3b01      	subs	r3, #1
 800246c:	021a      	lsls	r2, r3, #8
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	430a      	orrs	r2, r1
 8002474:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800247a:	9300      	str	r3, [sp, #0]
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	2200      	movs	r2, #0
 8002480:	2120      	movs	r1, #32
 8002482:	6878      	ldr	r0, [r7, #4]
 8002484:	f000 f850 	bl	8002528 <QSPI_WaitFlagStateUntilTimeout>
 8002488:	4603      	mov	r3, r0
 800248a:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 800248c:	7afb      	ldrb	r3, [r7, #11]
 800248e:	2b00      	cmp	r3, #0
 8002490:	d131      	bne.n	80024f6 <HAL_QSPI_Init+0xd6>
#if defined(QUADSPI_CR_DFM)
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));
#else
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT),
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800249c:	f023 0310 	bic.w	r3, r3, #16
 80024a0:	687a      	ldr	r2, [r7, #4]
 80024a2:	6852      	ldr	r2, [r2, #4]
 80024a4:	0611      	lsls	r1, r2, #24
 80024a6:	687a      	ldr	r2, [r7, #4]
 80024a8:	68d2      	ldr	r2, [r2, #12]
 80024aa:	4311      	orrs	r1, r2
 80024ac:	687a      	ldr	r2, [r7, #4]
 80024ae:	6812      	ldr	r2, [r2, #0]
 80024b0:	430b      	orrs	r3, r1
 80024b2:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting));
#endif

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	685a      	ldr	r2, [r3, #4]
 80024ba:	4b13      	ldr	r3, [pc, #76]	@ (8002508 <HAL_QSPI_Init+0xe8>)
 80024bc:	4013      	ands	r3, r2
 80024be:	687a      	ldr	r2, [r7, #4]
 80024c0:	6912      	ldr	r2, [r2, #16]
 80024c2:	0411      	lsls	r1, r2, #16
 80024c4:	687a      	ldr	r2, [r7, #4]
 80024c6:	6952      	ldr	r2, [r2, #20]
 80024c8:	4311      	orrs	r1, r2
 80024ca:	687a      	ldr	r2, [r7, #4]
 80024cc:	6992      	ldr	r2, [r2, #24]
 80024ce:	4311      	orrs	r1, r2
 80024d0:	687a      	ldr	r2, [r7, #4]
 80024d2:	6812      	ldr	r2, [r2, #0]
 80024d4:	430b      	orrs	r3, r1
 80024d6:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	681a      	ldr	r2, [r3, #0]
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f042 0201 	orr.w	r2, r2, #1
 80024e6:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	2200      	movs	r2, #0
 80024ec:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	2201      	movs	r2, #1
 80024f2:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	2200      	movs	r2, #0
 80024fa:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  /* Return function status */
  return status;
 80024fe:	7afb      	ldrb	r3, [r7, #11]
}
 8002500:	4618      	mov	r0, r3
 8002502:	3710      	adds	r7, #16
 8002504:	46bd      	mov	sp, r7
 8002506:	bd80      	pop	{r7, pc}
 8002508:	ffe0f8fe 	.word	0xffe0f8fe

0800250c <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 800250c:	b480      	push	{r7}
 800250e:	b083      	sub	sp, #12
 8002510:	af00      	add	r7, sp, #0
 8002512:	6078      	str	r0, [r7, #4]
 8002514:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	683a      	ldr	r2, [r7, #0]
 800251a:	641a      	str	r2, [r3, #64]	@ 0x40
}
 800251c:	bf00      	nop
 800251e:	370c      	adds	r7, #12
 8002520:	46bd      	mov	sp, r7
 8002522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002526:	4770      	bx	lr

08002528 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8002528:	b580      	push	{r7, lr}
 800252a:	b084      	sub	sp, #16
 800252c:	af00      	add	r7, sp, #0
 800252e:	60f8      	str	r0, [r7, #12]
 8002530:	60b9      	str	r1, [r7, #8]
 8002532:	603b      	str	r3, [r7, #0]
 8002534:	4613      	mov	r3, r2
 8002536:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8002538:	e01a      	b.n	8002570 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800253a:	69bb      	ldr	r3, [r7, #24]
 800253c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002540:	d016      	beq.n	8002570 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002542:	f7ff f871 	bl	8001628 <HAL_GetTick>
 8002546:	4602      	mov	r2, r0
 8002548:	683b      	ldr	r3, [r7, #0]
 800254a:	1ad3      	subs	r3, r2, r3
 800254c:	69ba      	ldr	r2, [r7, #24]
 800254e:	429a      	cmp	r2, r3
 8002550:	d302      	bcc.n	8002558 <QSPI_WaitFlagStateUntilTimeout+0x30>
 8002552:	69bb      	ldr	r3, [r7, #24]
 8002554:	2b00      	cmp	r3, #0
 8002556:	d10b      	bne.n	8002570 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	2204      	movs	r2, #4
 800255c:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002564:	f043 0201 	orr.w	r2, r3, #1
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	63da      	str	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800256c:	2301      	movs	r3, #1
 800256e:	e00e      	b.n	800258e <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	689a      	ldr	r2, [r3, #8]
 8002576:	68bb      	ldr	r3, [r7, #8]
 8002578:	4013      	ands	r3, r2
 800257a:	2b00      	cmp	r3, #0
 800257c:	bf14      	ite	ne
 800257e:	2301      	movne	r3, #1
 8002580:	2300      	moveq	r3, #0
 8002582:	b2db      	uxtb	r3, r3
 8002584:	461a      	mov	r2, r3
 8002586:	79fb      	ldrb	r3, [r7, #7]
 8002588:	429a      	cmp	r2, r3
 800258a:	d1d6      	bne.n	800253a <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800258c:	2300      	movs	r3, #0
}
 800258e:	4618      	mov	r0, r3
 8002590:	3710      	adds	r7, #16
 8002592:	46bd      	mov	sp, r7
 8002594:	bd80      	pop	{r7, pc}
	...

08002598 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002598:	b580      	push	{r7, lr}
 800259a:	b088      	sub	sp, #32
 800259c:	af00      	add	r7, sp, #0
 800259e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d101      	bne.n	80025aa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80025a6:	2301      	movs	r3, #1
 80025a8:	e3ca      	b.n	8002d40 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80025aa:	4b97      	ldr	r3, [pc, #604]	@ (8002808 <HAL_RCC_OscConfig+0x270>)
 80025ac:	689b      	ldr	r3, [r3, #8]
 80025ae:	f003 030c 	and.w	r3, r3, #12
 80025b2:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80025b4:	4b94      	ldr	r3, [pc, #592]	@ (8002808 <HAL_RCC_OscConfig+0x270>)
 80025b6:	68db      	ldr	r3, [r3, #12]
 80025b8:	f003 0303 	and.w	r3, r3, #3
 80025bc:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	f003 0310 	and.w	r3, r3, #16
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	f000 80e4 	beq.w	8002794 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80025cc:	69bb      	ldr	r3, [r7, #24]
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d007      	beq.n	80025e2 <HAL_RCC_OscConfig+0x4a>
 80025d2:	69bb      	ldr	r3, [r7, #24]
 80025d4:	2b0c      	cmp	r3, #12
 80025d6:	f040 808b 	bne.w	80026f0 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80025da:	697b      	ldr	r3, [r7, #20]
 80025dc:	2b01      	cmp	r3, #1
 80025de:	f040 8087 	bne.w	80026f0 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80025e2:	4b89      	ldr	r3, [pc, #548]	@ (8002808 <HAL_RCC_OscConfig+0x270>)
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f003 0302 	and.w	r3, r3, #2
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d005      	beq.n	80025fa <HAL_RCC_OscConfig+0x62>
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	699b      	ldr	r3, [r3, #24]
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d101      	bne.n	80025fa <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80025f6:	2301      	movs	r3, #1
 80025f8:	e3a2      	b.n	8002d40 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	6a1a      	ldr	r2, [r3, #32]
 80025fe:	4b82      	ldr	r3, [pc, #520]	@ (8002808 <HAL_RCC_OscConfig+0x270>)
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	f003 0308 	and.w	r3, r3, #8
 8002606:	2b00      	cmp	r3, #0
 8002608:	d004      	beq.n	8002614 <HAL_RCC_OscConfig+0x7c>
 800260a:	4b7f      	ldr	r3, [pc, #508]	@ (8002808 <HAL_RCC_OscConfig+0x270>)
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002612:	e005      	b.n	8002620 <HAL_RCC_OscConfig+0x88>
 8002614:	4b7c      	ldr	r3, [pc, #496]	@ (8002808 <HAL_RCC_OscConfig+0x270>)
 8002616:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800261a:	091b      	lsrs	r3, r3, #4
 800261c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002620:	4293      	cmp	r3, r2
 8002622:	d223      	bcs.n	800266c <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	6a1b      	ldr	r3, [r3, #32]
 8002628:	4618      	mov	r0, r3
 800262a:	f000 fd87 	bl	800313c <RCC_SetFlashLatencyFromMSIRange>
 800262e:	4603      	mov	r3, r0
 8002630:	2b00      	cmp	r3, #0
 8002632:	d001      	beq.n	8002638 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8002634:	2301      	movs	r3, #1
 8002636:	e383      	b.n	8002d40 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002638:	4b73      	ldr	r3, [pc, #460]	@ (8002808 <HAL_RCC_OscConfig+0x270>)
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	4a72      	ldr	r2, [pc, #456]	@ (8002808 <HAL_RCC_OscConfig+0x270>)
 800263e:	f043 0308 	orr.w	r3, r3, #8
 8002642:	6013      	str	r3, [r2, #0]
 8002644:	4b70      	ldr	r3, [pc, #448]	@ (8002808 <HAL_RCC_OscConfig+0x270>)
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	6a1b      	ldr	r3, [r3, #32]
 8002650:	496d      	ldr	r1, [pc, #436]	@ (8002808 <HAL_RCC_OscConfig+0x270>)
 8002652:	4313      	orrs	r3, r2
 8002654:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002656:	4b6c      	ldr	r3, [pc, #432]	@ (8002808 <HAL_RCC_OscConfig+0x270>)
 8002658:	685b      	ldr	r3, [r3, #4]
 800265a:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	69db      	ldr	r3, [r3, #28]
 8002662:	021b      	lsls	r3, r3, #8
 8002664:	4968      	ldr	r1, [pc, #416]	@ (8002808 <HAL_RCC_OscConfig+0x270>)
 8002666:	4313      	orrs	r3, r2
 8002668:	604b      	str	r3, [r1, #4]
 800266a:	e025      	b.n	80026b8 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800266c:	4b66      	ldr	r3, [pc, #408]	@ (8002808 <HAL_RCC_OscConfig+0x270>)
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	4a65      	ldr	r2, [pc, #404]	@ (8002808 <HAL_RCC_OscConfig+0x270>)
 8002672:	f043 0308 	orr.w	r3, r3, #8
 8002676:	6013      	str	r3, [r2, #0]
 8002678:	4b63      	ldr	r3, [pc, #396]	@ (8002808 <HAL_RCC_OscConfig+0x270>)
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	6a1b      	ldr	r3, [r3, #32]
 8002684:	4960      	ldr	r1, [pc, #384]	@ (8002808 <HAL_RCC_OscConfig+0x270>)
 8002686:	4313      	orrs	r3, r2
 8002688:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800268a:	4b5f      	ldr	r3, [pc, #380]	@ (8002808 <HAL_RCC_OscConfig+0x270>)
 800268c:	685b      	ldr	r3, [r3, #4]
 800268e:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	69db      	ldr	r3, [r3, #28]
 8002696:	021b      	lsls	r3, r3, #8
 8002698:	495b      	ldr	r1, [pc, #364]	@ (8002808 <HAL_RCC_OscConfig+0x270>)
 800269a:	4313      	orrs	r3, r2
 800269c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800269e:	69bb      	ldr	r3, [r7, #24]
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d109      	bne.n	80026b8 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	6a1b      	ldr	r3, [r3, #32]
 80026a8:	4618      	mov	r0, r3
 80026aa:	f000 fd47 	bl	800313c <RCC_SetFlashLatencyFromMSIRange>
 80026ae:	4603      	mov	r3, r0
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d001      	beq.n	80026b8 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80026b4:	2301      	movs	r3, #1
 80026b6:	e343      	b.n	8002d40 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80026b8:	f000 fc4a 	bl	8002f50 <HAL_RCC_GetSysClockFreq>
 80026bc:	4602      	mov	r2, r0
 80026be:	4b52      	ldr	r3, [pc, #328]	@ (8002808 <HAL_RCC_OscConfig+0x270>)
 80026c0:	689b      	ldr	r3, [r3, #8]
 80026c2:	091b      	lsrs	r3, r3, #4
 80026c4:	f003 030f 	and.w	r3, r3, #15
 80026c8:	4950      	ldr	r1, [pc, #320]	@ (800280c <HAL_RCC_OscConfig+0x274>)
 80026ca:	5ccb      	ldrb	r3, [r1, r3]
 80026cc:	f003 031f 	and.w	r3, r3, #31
 80026d0:	fa22 f303 	lsr.w	r3, r2, r3
 80026d4:	4a4e      	ldr	r2, [pc, #312]	@ (8002810 <HAL_RCC_OscConfig+0x278>)
 80026d6:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80026d8:	4b4e      	ldr	r3, [pc, #312]	@ (8002814 <HAL_RCC_OscConfig+0x27c>)
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	4618      	mov	r0, r3
 80026de:	f7fe fe73 	bl	80013c8 <HAL_InitTick>
 80026e2:	4603      	mov	r3, r0
 80026e4:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80026e6:	7bfb      	ldrb	r3, [r7, #15]
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d052      	beq.n	8002792 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80026ec:	7bfb      	ldrb	r3, [r7, #15]
 80026ee:	e327      	b.n	8002d40 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	699b      	ldr	r3, [r3, #24]
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d032      	beq.n	800275e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80026f8:	4b43      	ldr	r3, [pc, #268]	@ (8002808 <HAL_RCC_OscConfig+0x270>)
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	4a42      	ldr	r2, [pc, #264]	@ (8002808 <HAL_RCC_OscConfig+0x270>)
 80026fe:	f043 0301 	orr.w	r3, r3, #1
 8002702:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002704:	f7fe ff90 	bl	8001628 <HAL_GetTick>
 8002708:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800270a:	e008      	b.n	800271e <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800270c:	f7fe ff8c 	bl	8001628 <HAL_GetTick>
 8002710:	4602      	mov	r2, r0
 8002712:	693b      	ldr	r3, [r7, #16]
 8002714:	1ad3      	subs	r3, r2, r3
 8002716:	2b02      	cmp	r3, #2
 8002718:	d901      	bls.n	800271e <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800271a:	2303      	movs	r3, #3
 800271c:	e310      	b.n	8002d40 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800271e:	4b3a      	ldr	r3, [pc, #232]	@ (8002808 <HAL_RCC_OscConfig+0x270>)
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f003 0302 	and.w	r3, r3, #2
 8002726:	2b00      	cmp	r3, #0
 8002728:	d0f0      	beq.n	800270c <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800272a:	4b37      	ldr	r3, [pc, #220]	@ (8002808 <HAL_RCC_OscConfig+0x270>)
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	4a36      	ldr	r2, [pc, #216]	@ (8002808 <HAL_RCC_OscConfig+0x270>)
 8002730:	f043 0308 	orr.w	r3, r3, #8
 8002734:	6013      	str	r3, [r2, #0]
 8002736:	4b34      	ldr	r3, [pc, #208]	@ (8002808 <HAL_RCC_OscConfig+0x270>)
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	6a1b      	ldr	r3, [r3, #32]
 8002742:	4931      	ldr	r1, [pc, #196]	@ (8002808 <HAL_RCC_OscConfig+0x270>)
 8002744:	4313      	orrs	r3, r2
 8002746:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002748:	4b2f      	ldr	r3, [pc, #188]	@ (8002808 <HAL_RCC_OscConfig+0x270>)
 800274a:	685b      	ldr	r3, [r3, #4]
 800274c:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	69db      	ldr	r3, [r3, #28]
 8002754:	021b      	lsls	r3, r3, #8
 8002756:	492c      	ldr	r1, [pc, #176]	@ (8002808 <HAL_RCC_OscConfig+0x270>)
 8002758:	4313      	orrs	r3, r2
 800275a:	604b      	str	r3, [r1, #4]
 800275c:	e01a      	b.n	8002794 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800275e:	4b2a      	ldr	r3, [pc, #168]	@ (8002808 <HAL_RCC_OscConfig+0x270>)
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	4a29      	ldr	r2, [pc, #164]	@ (8002808 <HAL_RCC_OscConfig+0x270>)
 8002764:	f023 0301 	bic.w	r3, r3, #1
 8002768:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800276a:	f7fe ff5d 	bl	8001628 <HAL_GetTick>
 800276e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002770:	e008      	b.n	8002784 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002772:	f7fe ff59 	bl	8001628 <HAL_GetTick>
 8002776:	4602      	mov	r2, r0
 8002778:	693b      	ldr	r3, [r7, #16]
 800277a:	1ad3      	subs	r3, r2, r3
 800277c:	2b02      	cmp	r3, #2
 800277e:	d901      	bls.n	8002784 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8002780:	2303      	movs	r3, #3
 8002782:	e2dd      	b.n	8002d40 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002784:	4b20      	ldr	r3, [pc, #128]	@ (8002808 <HAL_RCC_OscConfig+0x270>)
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	f003 0302 	and.w	r3, r3, #2
 800278c:	2b00      	cmp	r3, #0
 800278e:	d1f0      	bne.n	8002772 <HAL_RCC_OscConfig+0x1da>
 8002790:	e000      	b.n	8002794 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002792:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	f003 0301 	and.w	r3, r3, #1
 800279c:	2b00      	cmp	r3, #0
 800279e:	d074      	beq.n	800288a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80027a0:	69bb      	ldr	r3, [r7, #24]
 80027a2:	2b08      	cmp	r3, #8
 80027a4:	d005      	beq.n	80027b2 <HAL_RCC_OscConfig+0x21a>
 80027a6:	69bb      	ldr	r3, [r7, #24]
 80027a8:	2b0c      	cmp	r3, #12
 80027aa:	d10e      	bne.n	80027ca <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80027ac:	697b      	ldr	r3, [r7, #20]
 80027ae:	2b03      	cmp	r3, #3
 80027b0:	d10b      	bne.n	80027ca <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027b2:	4b15      	ldr	r3, [pc, #84]	@ (8002808 <HAL_RCC_OscConfig+0x270>)
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d064      	beq.n	8002888 <HAL_RCC_OscConfig+0x2f0>
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	685b      	ldr	r3, [r3, #4]
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d160      	bne.n	8002888 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80027c6:	2301      	movs	r3, #1
 80027c8:	e2ba      	b.n	8002d40 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	685b      	ldr	r3, [r3, #4]
 80027ce:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80027d2:	d106      	bne.n	80027e2 <HAL_RCC_OscConfig+0x24a>
 80027d4:	4b0c      	ldr	r3, [pc, #48]	@ (8002808 <HAL_RCC_OscConfig+0x270>)
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	4a0b      	ldr	r2, [pc, #44]	@ (8002808 <HAL_RCC_OscConfig+0x270>)
 80027da:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80027de:	6013      	str	r3, [r2, #0]
 80027e0:	e026      	b.n	8002830 <HAL_RCC_OscConfig+0x298>
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	685b      	ldr	r3, [r3, #4]
 80027e6:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80027ea:	d115      	bne.n	8002818 <HAL_RCC_OscConfig+0x280>
 80027ec:	4b06      	ldr	r3, [pc, #24]	@ (8002808 <HAL_RCC_OscConfig+0x270>)
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	4a05      	ldr	r2, [pc, #20]	@ (8002808 <HAL_RCC_OscConfig+0x270>)
 80027f2:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80027f6:	6013      	str	r3, [r2, #0]
 80027f8:	4b03      	ldr	r3, [pc, #12]	@ (8002808 <HAL_RCC_OscConfig+0x270>)
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	4a02      	ldr	r2, [pc, #8]	@ (8002808 <HAL_RCC_OscConfig+0x270>)
 80027fe:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002802:	6013      	str	r3, [r2, #0]
 8002804:	e014      	b.n	8002830 <HAL_RCC_OscConfig+0x298>
 8002806:	bf00      	nop
 8002808:	40021000 	.word	0x40021000
 800280c:	08008bfc 	.word	0x08008bfc
 8002810:	20000008 	.word	0x20000008
 8002814:	2000000c 	.word	0x2000000c
 8002818:	4ba0      	ldr	r3, [pc, #640]	@ (8002a9c <HAL_RCC_OscConfig+0x504>)
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	4a9f      	ldr	r2, [pc, #636]	@ (8002a9c <HAL_RCC_OscConfig+0x504>)
 800281e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002822:	6013      	str	r3, [r2, #0]
 8002824:	4b9d      	ldr	r3, [pc, #628]	@ (8002a9c <HAL_RCC_OscConfig+0x504>)
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	4a9c      	ldr	r2, [pc, #624]	@ (8002a9c <HAL_RCC_OscConfig+0x504>)
 800282a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800282e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	685b      	ldr	r3, [r3, #4]
 8002834:	2b00      	cmp	r3, #0
 8002836:	d013      	beq.n	8002860 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002838:	f7fe fef6 	bl	8001628 <HAL_GetTick>
 800283c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800283e:	e008      	b.n	8002852 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002840:	f7fe fef2 	bl	8001628 <HAL_GetTick>
 8002844:	4602      	mov	r2, r0
 8002846:	693b      	ldr	r3, [r7, #16]
 8002848:	1ad3      	subs	r3, r2, r3
 800284a:	2b64      	cmp	r3, #100	@ 0x64
 800284c:	d901      	bls.n	8002852 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800284e:	2303      	movs	r3, #3
 8002850:	e276      	b.n	8002d40 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002852:	4b92      	ldr	r3, [pc, #584]	@ (8002a9c <HAL_RCC_OscConfig+0x504>)
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800285a:	2b00      	cmp	r3, #0
 800285c:	d0f0      	beq.n	8002840 <HAL_RCC_OscConfig+0x2a8>
 800285e:	e014      	b.n	800288a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002860:	f7fe fee2 	bl	8001628 <HAL_GetTick>
 8002864:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002866:	e008      	b.n	800287a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002868:	f7fe fede 	bl	8001628 <HAL_GetTick>
 800286c:	4602      	mov	r2, r0
 800286e:	693b      	ldr	r3, [r7, #16]
 8002870:	1ad3      	subs	r3, r2, r3
 8002872:	2b64      	cmp	r3, #100	@ 0x64
 8002874:	d901      	bls.n	800287a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002876:	2303      	movs	r3, #3
 8002878:	e262      	b.n	8002d40 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800287a:	4b88      	ldr	r3, [pc, #544]	@ (8002a9c <HAL_RCC_OscConfig+0x504>)
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002882:	2b00      	cmp	r3, #0
 8002884:	d1f0      	bne.n	8002868 <HAL_RCC_OscConfig+0x2d0>
 8002886:	e000      	b.n	800288a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002888:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	f003 0302 	and.w	r3, r3, #2
 8002892:	2b00      	cmp	r3, #0
 8002894:	d060      	beq.n	8002958 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002896:	69bb      	ldr	r3, [r7, #24]
 8002898:	2b04      	cmp	r3, #4
 800289a:	d005      	beq.n	80028a8 <HAL_RCC_OscConfig+0x310>
 800289c:	69bb      	ldr	r3, [r7, #24]
 800289e:	2b0c      	cmp	r3, #12
 80028a0:	d119      	bne.n	80028d6 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80028a2:	697b      	ldr	r3, [r7, #20]
 80028a4:	2b02      	cmp	r3, #2
 80028a6:	d116      	bne.n	80028d6 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80028a8:	4b7c      	ldr	r3, [pc, #496]	@ (8002a9c <HAL_RCC_OscConfig+0x504>)
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d005      	beq.n	80028c0 <HAL_RCC_OscConfig+0x328>
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	68db      	ldr	r3, [r3, #12]
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d101      	bne.n	80028c0 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80028bc:	2301      	movs	r3, #1
 80028be:	e23f      	b.n	8002d40 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028c0:	4b76      	ldr	r3, [pc, #472]	@ (8002a9c <HAL_RCC_OscConfig+0x504>)
 80028c2:	685b      	ldr	r3, [r3, #4]
 80028c4:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	691b      	ldr	r3, [r3, #16]
 80028cc:	061b      	lsls	r3, r3, #24
 80028ce:	4973      	ldr	r1, [pc, #460]	@ (8002a9c <HAL_RCC_OscConfig+0x504>)
 80028d0:	4313      	orrs	r3, r2
 80028d2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80028d4:	e040      	b.n	8002958 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	68db      	ldr	r3, [r3, #12]
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d023      	beq.n	8002926 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80028de:	4b6f      	ldr	r3, [pc, #444]	@ (8002a9c <HAL_RCC_OscConfig+0x504>)
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	4a6e      	ldr	r2, [pc, #440]	@ (8002a9c <HAL_RCC_OscConfig+0x504>)
 80028e4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80028e8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028ea:	f7fe fe9d 	bl	8001628 <HAL_GetTick>
 80028ee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80028f0:	e008      	b.n	8002904 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80028f2:	f7fe fe99 	bl	8001628 <HAL_GetTick>
 80028f6:	4602      	mov	r2, r0
 80028f8:	693b      	ldr	r3, [r7, #16]
 80028fa:	1ad3      	subs	r3, r2, r3
 80028fc:	2b02      	cmp	r3, #2
 80028fe:	d901      	bls.n	8002904 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002900:	2303      	movs	r3, #3
 8002902:	e21d      	b.n	8002d40 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002904:	4b65      	ldr	r3, [pc, #404]	@ (8002a9c <HAL_RCC_OscConfig+0x504>)
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800290c:	2b00      	cmp	r3, #0
 800290e:	d0f0      	beq.n	80028f2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002910:	4b62      	ldr	r3, [pc, #392]	@ (8002a9c <HAL_RCC_OscConfig+0x504>)
 8002912:	685b      	ldr	r3, [r3, #4]
 8002914:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	691b      	ldr	r3, [r3, #16]
 800291c:	061b      	lsls	r3, r3, #24
 800291e:	495f      	ldr	r1, [pc, #380]	@ (8002a9c <HAL_RCC_OscConfig+0x504>)
 8002920:	4313      	orrs	r3, r2
 8002922:	604b      	str	r3, [r1, #4]
 8002924:	e018      	b.n	8002958 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002926:	4b5d      	ldr	r3, [pc, #372]	@ (8002a9c <HAL_RCC_OscConfig+0x504>)
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	4a5c      	ldr	r2, [pc, #368]	@ (8002a9c <HAL_RCC_OscConfig+0x504>)
 800292c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002930:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002932:	f7fe fe79 	bl	8001628 <HAL_GetTick>
 8002936:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002938:	e008      	b.n	800294c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800293a:	f7fe fe75 	bl	8001628 <HAL_GetTick>
 800293e:	4602      	mov	r2, r0
 8002940:	693b      	ldr	r3, [r7, #16]
 8002942:	1ad3      	subs	r3, r2, r3
 8002944:	2b02      	cmp	r3, #2
 8002946:	d901      	bls.n	800294c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002948:	2303      	movs	r3, #3
 800294a:	e1f9      	b.n	8002d40 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800294c:	4b53      	ldr	r3, [pc, #332]	@ (8002a9c <HAL_RCC_OscConfig+0x504>)
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002954:	2b00      	cmp	r3, #0
 8002956:	d1f0      	bne.n	800293a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	f003 0308 	and.w	r3, r3, #8
 8002960:	2b00      	cmp	r3, #0
 8002962:	d03c      	beq.n	80029de <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	695b      	ldr	r3, [r3, #20]
 8002968:	2b00      	cmp	r3, #0
 800296a:	d01c      	beq.n	80029a6 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800296c:	4b4b      	ldr	r3, [pc, #300]	@ (8002a9c <HAL_RCC_OscConfig+0x504>)
 800296e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002972:	4a4a      	ldr	r2, [pc, #296]	@ (8002a9c <HAL_RCC_OscConfig+0x504>)
 8002974:	f043 0301 	orr.w	r3, r3, #1
 8002978:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800297c:	f7fe fe54 	bl	8001628 <HAL_GetTick>
 8002980:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002982:	e008      	b.n	8002996 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002984:	f7fe fe50 	bl	8001628 <HAL_GetTick>
 8002988:	4602      	mov	r2, r0
 800298a:	693b      	ldr	r3, [r7, #16]
 800298c:	1ad3      	subs	r3, r2, r3
 800298e:	2b02      	cmp	r3, #2
 8002990:	d901      	bls.n	8002996 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002992:	2303      	movs	r3, #3
 8002994:	e1d4      	b.n	8002d40 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002996:	4b41      	ldr	r3, [pc, #260]	@ (8002a9c <HAL_RCC_OscConfig+0x504>)
 8002998:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800299c:	f003 0302 	and.w	r3, r3, #2
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d0ef      	beq.n	8002984 <HAL_RCC_OscConfig+0x3ec>
 80029a4:	e01b      	b.n	80029de <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80029a6:	4b3d      	ldr	r3, [pc, #244]	@ (8002a9c <HAL_RCC_OscConfig+0x504>)
 80029a8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80029ac:	4a3b      	ldr	r2, [pc, #236]	@ (8002a9c <HAL_RCC_OscConfig+0x504>)
 80029ae:	f023 0301 	bic.w	r3, r3, #1
 80029b2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029b6:	f7fe fe37 	bl	8001628 <HAL_GetTick>
 80029ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80029bc:	e008      	b.n	80029d0 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80029be:	f7fe fe33 	bl	8001628 <HAL_GetTick>
 80029c2:	4602      	mov	r2, r0
 80029c4:	693b      	ldr	r3, [r7, #16]
 80029c6:	1ad3      	subs	r3, r2, r3
 80029c8:	2b02      	cmp	r3, #2
 80029ca:	d901      	bls.n	80029d0 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80029cc:	2303      	movs	r3, #3
 80029ce:	e1b7      	b.n	8002d40 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80029d0:	4b32      	ldr	r3, [pc, #200]	@ (8002a9c <HAL_RCC_OscConfig+0x504>)
 80029d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80029d6:	f003 0302 	and.w	r3, r3, #2
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d1ef      	bne.n	80029be <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f003 0304 	and.w	r3, r3, #4
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	f000 80a6 	beq.w	8002b38 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80029ec:	2300      	movs	r3, #0
 80029ee:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80029f0:	4b2a      	ldr	r3, [pc, #168]	@ (8002a9c <HAL_RCC_OscConfig+0x504>)
 80029f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80029f4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d10d      	bne.n	8002a18 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80029fc:	4b27      	ldr	r3, [pc, #156]	@ (8002a9c <HAL_RCC_OscConfig+0x504>)
 80029fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a00:	4a26      	ldr	r2, [pc, #152]	@ (8002a9c <HAL_RCC_OscConfig+0x504>)
 8002a02:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002a06:	6593      	str	r3, [r2, #88]	@ 0x58
 8002a08:	4b24      	ldr	r3, [pc, #144]	@ (8002a9c <HAL_RCC_OscConfig+0x504>)
 8002a0a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a0c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002a10:	60bb      	str	r3, [r7, #8]
 8002a12:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002a14:	2301      	movs	r3, #1
 8002a16:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002a18:	4b21      	ldr	r3, [pc, #132]	@ (8002aa0 <HAL_RCC_OscConfig+0x508>)
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d118      	bne.n	8002a56 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002a24:	4b1e      	ldr	r3, [pc, #120]	@ (8002aa0 <HAL_RCC_OscConfig+0x508>)
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	4a1d      	ldr	r2, [pc, #116]	@ (8002aa0 <HAL_RCC_OscConfig+0x508>)
 8002a2a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002a2e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002a30:	f7fe fdfa 	bl	8001628 <HAL_GetTick>
 8002a34:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002a36:	e008      	b.n	8002a4a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a38:	f7fe fdf6 	bl	8001628 <HAL_GetTick>
 8002a3c:	4602      	mov	r2, r0
 8002a3e:	693b      	ldr	r3, [r7, #16]
 8002a40:	1ad3      	subs	r3, r2, r3
 8002a42:	2b02      	cmp	r3, #2
 8002a44:	d901      	bls.n	8002a4a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002a46:	2303      	movs	r3, #3
 8002a48:	e17a      	b.n	8002d40 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002a4a:	4b15      	ldr	r3, [pc, #84]	@ (8002aa0 <HAL_RCC_OscConfig+0x508>)
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d0f0      	beq.n	8002a38 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	689b      	ldr	r3, [r3, #8]
 8002a5a:	2b01      	cmp	r3, #1
 8002a5c:	d108      	bne.n	8002a70 <HAL_RCC_OscConfig+0x4d8>
 8002a5e:	4b0f      	ldr	r3, [pc, #60]	@ (8002a9c <HAL_RCC_OscConfig+0x504>)
 8002a60:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002a64:	4a0d      	ldr	r2, [pc, #52]	@ (8002a9c <HAL_RCC_OscConfig+0x504>)
 8002a66:	f043 0301 	orr.w	r3, r3, #1
 8002a6a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002a6e:	e029      	b.n	8002ac4 <HAL_RCC_OscConfig+0x52c>
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	689b      	ldr	r3, [r3, #8]
 8002a74:	2b05      	cmp	r3, #5
 8002a76:	d115      	bne.n	8002aa4 <HAL_RCC_OscConfig+0x50c>
 8002a78:	4b08      	ldr	r3, [pc, #32]	@ (8002a9c <HAL_RCC_OscConfig+0x504>)
 8002a7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002a7e:	4a07      	ldr	r2, [pc, #28]	@ (8002a9c <HAL_RCC_OscConfig+0x504>)
 8002a80:	f043 0304 	orr.w	r3, r3, #4
 8002a84:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002a88:	4b04      	ldr	r3, [pc, #16]	@ (8002a9c <HAL_RCC_OscConfig+0x504>)
 8002a8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002a8e:	4a03      	ldr	r2, [pc, #12]	@ (8002a9c <HAL_RCC_OscConfig+0x504>)
 8002a90:	f043 0301 	orr.w	r3, r3, #1
 8002a94:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002a98:	e014      	b.n	8002ac4 <HAL_RCC_OscConfig+0x52c>
 8002a9a:	bf00      	nop
 8002a9c:	40021000 	.word	0x40021000
 8002aa0:	40007000 	.word	0x40007000
 8002aa4:	4b9c      	ldr	r3, [pc, #624]	@ (8002d18 <HAL_RCC_OscConfig+0x780>)
 8002aa6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002aaa:	4a9b      	ldr	r2, [pc, #620]	@ (8002d18 <HAL_RCC_OscConfig+0x780>)
 8002aac:	f023 0301 	bic.w	r3, r3, #1
 8002ab0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002ab4:	4b98      	ldr	r3, [pc, #608]	@ (8002d18 <HAL_RCC_OscConfig+0x780>)
 8002ab6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002aba:	4a97      	ldr	r2, [pc, #604]	@ (8002d18 <HAL_RCC_OscConfig+0x780>)
 8002abc:	f023 0304 	bic.w	r3, r3, #4
 8002ac0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	689b      	ldr	r3, [r3, #8]
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d016      	beq.n	8002afa <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002acc:	f7fe fdac 	bl	8001628 <HAL_GetTick>
 8002ad0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002ad2:	e00a      	b.n	8002aea <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ad4:	f7fe fda8 	bl	8001628 <HAL_GetTick>
 8002ad8:	4602      	mov	r2, r0
 8002ada:	693b      	ldr	r3, [r7, #16]
 8002adc:	1ad3      	subs	r3, r2, r3
 8002ade:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002ae2:	4293      	cmp	r3, r2
 8002ae4:	d901      	bls.n	8002aea <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8002ae6:	2303      	movs	r3, #3
 8002ae8:	e12a      	b.n	8002d40 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002aea:	4b8b      	ldr	r3, [pc, #556]	@ (8002d18 <HAL_RCC_OscConfig+0x780>)
 8002aec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002af0:	f003 0302 	and.w	r3, r3, #2
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d0ed      	beq.n	8002ad4 <HAL_RCC_OscConfig+0x53c>
 8002af8:	e015      	b.n	8002b26 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002afa:	f7fe fd95 	bl	8001628 <HAL_GetTick>
 8002afe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002b00:	e00a      	b.n	8002b18 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b02:	f7fe fd91 	bl	8001628 <HAL_GetTick>
 8002b06:	4602      	mov	r2, r0
 8002b08:	693b      	ldr	r3, [r7, #16]
 8002b0a:	1ad3      	subs	r3, r2, r3
 8002b0c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002b10:	4293      	cmp	r3, r2
 8002b12:	d901      	bls.n	8002b18 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002b14:	2303      	movs	r3, #3
 8002b16:	e113      	b.n	8002d40 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002b18:	4b7f      	ldr	r3, [pc, #508]	@ (8002d18 <HAL_RCC_OscConfig+0x780>)
 8002b1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b1e:	f003 0302 	and.w	r3, r3, #2
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d1ed      	bne.n	8002b02 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002b26:	7ffb      	ldrb	r3, [r7, #31]
 8002b28:	2b01      	cmp	r3, #1
 8002b2a:	d105      	bne.n	8002b38 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b2c:	4b7a      	ldr	r3, [pc, #488]	@ (8002d18 <HAL_RCC_OscConfig+0x780>)
 8002b2e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b30:	4a79      	ldr	r2, [pc, #484]	@ (8002d18 <HAL_RCC_OscConfig+0x780>)
 8002b32:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002b36:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	f000 80fe 	beq.w	8002d3e <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b46:	2b02      	cmp	r3, #2
 8002b48:	f040 80d0 	bne.w	8002cec <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002b4c:	4b72      	ldr	r3, [pc, #456]	@ (8002d18 <HAL_RCC_OscConfig+0x780>)
 8002b4e:	68db      	ldr	r3, [r3, #12]
 8002b50:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b52:	697b      	ldr	r3, [r7, #20]
 8002b54:	f003 0203 	and.w	r2, r3, #3
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b5c:	429a      	cmp	r2, r3
 8002b5e:	d130      	bne.n	8002bc2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002b60:	697b      	ldr	r3, [r7, #20]
 8002b62:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b6a:	3b01      	subs	r3, #1
 8002b6c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b6e:	429a      	cmp	r2, r3
 8002b70:	d127      	bne.n	8002bc2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002b72:	697b      	ldr	r3, [r7, #20]
 8002b74:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002b7c:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002b7e:	429a      	cmp	r2, r3
 8002b80:	d11f      	bne.n	8002bc2 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002b82:	697b      	ldr	r3, [r7, #20]
 8002b84:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b88:	687a      	ldr	r2, [r7, #4]
 8002b8a:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002b8c:	2a07      	cmp	r2, #7
 8002b8e:	bf14      	ite	ne
 8002b90:	2201      	movne	r2, #1
 8002b92:	2200      	moveq	r2, #0
 8002b94:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002b96:	4293      	cmp	r3, r2
 8002b98:	d113      	bne.n	8002bc2 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002b9a:	697b      	ldr	r3, [r7, #20]
 8002b9c:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ba4:	085b      	lsrs	r3, r3, #1
 8002ba6:	3b01      	subs	r3, #1
 8002ba8:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002baa:	429a      	cmp	r2, r3
 8002bac:	d109      	bne.n	8002bc2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002bae:	697b      	ldr	r3, [r7, #20]
 8002bb0:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bb8:	085b      	lsrs	r3, r3, #1
 8002bba:	3b01      	subs	r3, #1
 8002bbc:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002bbe:	429a      	cmp	r2, r3
 8002bc0:	d06e      	beq.n	8002ca0 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002bc2:	69bb      	ldr	r3, [r7, #24]
 8002bc4:	2b0c      	cmp	r3, #12
 8002bc6:	d069      	beq.n	8002c9c <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002bc8:	4b53      	ldr	r3, [pc, #332]	@ (8002d18 <HAL_RCC_OscConfig+0x780>)
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d105      	bne.n	8002be0 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002bd4:	4b50      	ldr	r3, [pc, #320]	@ (8002d18 <HAL_RCC_OscConfig+0x780>)
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d001      	beq.n	8002be4 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002be0:	2301      	movs	r3, #1
 8002be2:	e0ad      	b.n	8002d40 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002be4:	4b4c      	ldr	r3, [pc, #304]	@ (8002d18 <HAL_RCC_OscConfig+0x780>)
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	4a4b      	ldr	r2, [pc, #300]	@ (8002d18 <HAL_RCC_OscConfig+0x780>)
 8002bea:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002bee:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002bf0:	f7fe fd1a 	bl	8001628 <HAL_GetTick>
 8002bf4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002bf6:	e008      	b.n	8002c0a <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002bf8:	f7fe fd16 	bl	8001628 <HAL_GetTick>
 8002bfc:	4602      	mov	r2, r0
 8002bfe:	693b      	ldr	r3, [r7, #16]
 8002c00:	1ad3      	subs	r3, r2, r3
 8002c02:	2b02      	cmp	r3, #2
 8002c04:	d901      	bls.n	8002c0a <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8002c06:	2303      	movs	r3, #3
 8002c08:	e09a      	b.n	8002d40 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002c0a:	4b43      	ldr	r3, [pc, #268]	@ (8002d18 <HAL_RCC_OscConfig+0x780>)
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d1f0      	bne.n	8002bf8 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002c16:	4b40      	ldr	r3, [pc, #256]	@ (8002d18 <HAL_RCC_OscConfig+0x780>)
 8002c18:	68da      	ldr	r2, [r3, #12]
 8002c1a:	4b40      	ldr	r3, [pc, #256]	@ (8002d1c <HAL_RCC_OscConfig+0x784>)
 8002c1c:	4013      	ands	r3, r2
 8002c1e:	687a      	ldr	r2, [r7, #4]
 8002c20:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8002c22:	687a      	ldr	r2, [r7, #4]
 8002c24:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8002c26:	3a01      	subs	r2, #1
 8002c28:	0112      	lsls	r2, r2, #4
 8002c2a:	4311      	orrs	r1, r2
 8002c2c:	687a      	ldr	r2, [r7, #4]
 8002c2e:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8002c30:	0212      	lsls	r2, r2, #8
 8002c32:	4311      	orrs	r1, r2
 8002c34:	687a      	ldr	r2, [r7, #4]
 8002c36:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002c38:	0852      	lsrs	r2, r2, #1
 8002c3a:	3a01      	subs	r2, #1
 8002c3c:	0552      	lsls	r2, r2, #21
 8002c3e:	4311      	orrs	r1, r2
 8002c40:	687a      	ldr	r2, [r7, #4]
 8002c42:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8002c44:	0852      	lsrs	r2, r2, #1
 8002c46:	3a01      	subs	r2, #1
 8002c48:	0652      	lsls	r2, r2, #25
 8002c4a:	4311      	orrs	r1, r2
 8002c4c:	687a      	ldr	r2, [r7, #4]
 8002c4e:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002c50:	0912      	lsrs	r2, r2, #4
 8002c52:	0452      	lsls	r2, r2, #17
 8002c54:	430a      	orrs	r2, r1
 8002c56:	4930      	ldr	r1, [pc, #192]	@ (8002d18 <HAL_RCC_OscConfig+0x780>)
 8002c58:	4313      	orrs	r3, r2
 8002c5a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002c5c:	4b2e      	ldr	r3, [pc, #184]	@ (8002d18 <HAL_RCC_OscConfig+0x780>)
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	4a2d      	ldr	r2, [pc, #180]	@ (8002d18 <HAL_RCC_OscConfig+0x780>)
 8002c62:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002c66:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002c68:	4b2b      	ldr	r3, [pc, #172]	@ (8002d18 <HAL_RCC_OscConfig+0x780>)
 8002c6a:	68db      	ldr	r3, [r3, #12]
 8002c6c:	4a2a      	ldr	r2, [pc, #168]	@ (8002d18 <HAL_RCC_OscConfig+0x780>)
 8002c6e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002c72:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002c74:	f7fe fcd8 	bl	8001628 <HAL_GetTick>
 8002c78:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002c7a:	e008      	b.n	8002c8e <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c7c:	f7fe fcd4 	bl	8001628 <HAL_GetTick>
 8002c80:	4602      	mov	r2, r0
 8002c82:	693b      	ldr	r3, [r7, #16]
 8002c84:	1ad3      	subs	r3, r2, r3
 8002c86:	2b02      	cmp	r3, #2
 8002c88:	d901      	bls.n	8002c8e <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8002c8a:	2303      	movs	r3, #3
 8002c8c:	e058      	b.n	8002d40 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002c8e:	4b22      	ldr	r3, [pc, #136]	@ (8002d18 <HAL_RCC_OscConfig+0x780>)
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d0f0      	beq.n	8002c7c <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002c9a:	e050      	b.n	8002d3e <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002c9c:	2301      	movs	r3, #1
 8002c9e:	e04f      	b.n	8002d40 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002ca0:	4b1d      	ldr	r3, [pc, #116]	@ (8002d18 <HAL_RCC_OscConfig+0x780>)
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d148      	bne.n	8002d3e <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002cac:	4b1a      	ldr	r3, [pc, #104]	@ (8002d18 <HAL_RCC_OscConfig+0x780>)
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	4a19      	ldr	r2, [pc, #100]	@ (8002d18 <HAL_RCC_OscConfig+0x780>)
 8002cb2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002cb6:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002cb8:	4b17      	ldr	r3, [pc, #92]	@ (8002d18 <HAL_RCC_OscConfig+0x780>)
 8002cba:	68db      	ldr	r3, [r3, #12]
 8002cbc:	4a16      	ldr	r2, [pc, #88]	@ (8002d18 <HAL_RCC_OscConfig+0x780>)
 8002cbe:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002cc2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002cc4:	f7fe fcb0 	bl	8001628 <HAL_GetTick>
 8002cc8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002cca:	e008      	b.n	8002cde <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ccc:	f7fe fcac 	bl	8001628 <HAL_GetTick>
 8002cd0:	4602      	mov	r2, r0
 8002cd2:	693b      	ldr	r3, [r7, #16]
 8002cd4:	1ad3      	subs	r3, r2, r3
 8002cd6:	2b02      	cmp	r3, #2
 8002cd8:	d901      	bls.n	8002cde <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8002cda:	2303      	movs	r3, #3
 8002cdc:	e030      	b.n	8002d40 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002cde:	4b0e      	ldr	r3, [pc, #56]	@ (8002d18 <HAL_RCC_OscConfig+0x780>)
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d0f0      	beq.n	8002ccc <HAL_RCC_OscConfig+0x734>
 8002cea:	e028      	b.n	8002d3e <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002cec:	69bb      	ldr	r3, [r7, #24]
 8002cee:	2b0c      	cmp	r3, #12
 8002cf0:	d023      	beq.n	8002d3a <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002cf2:	4b09      	ldr	r3, [pc, #36]	@ (8002d18 <HAL_RCC_OscConfig+0x780>)
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	4a08      	ldr	r2, [pc, #32]	@ (8002d18 <HAL_RCC_OscConfig+0x780>)
 8002cf8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002cfc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cfe:	f7fe fc93 	bl	8001628 <HAL_GetTick>
 8002d02:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002d04:	e00c      	b.n	8002d20 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d06:	f7fe fc8f 	bl	8001628 <HAL_GetTick>
 8002d0a:	4602      	mov	r2, r0
 8002d0c:	693b      	ldr	r3, [r7, #16]
 8002d0e:	1ad3      	subs	r3, r2, r3
 8002d10:	2b02      	cmp	r3, #2
 8002d12:	d905      	bls.n	8002d20 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8002d14:	2303      	movs	r3, #3
 8002d16:	e013      	b.n	8002d40 <HAL_RCC_OscConfig+0x7a8>
 8002d18:	40021000 	.word	0x40021000
 8002d1c:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002d20:	4b09      	ldr	r3, [pc, #36]	@ (8002d48 <HAL_RCC_OscConfig+0x7b0>)
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d1ec      	bne.n	8002d06 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002d2c:	4b06      	ldr	r3, [pc, #24]	@ (8002d48 <HAL_RCC_OscConfig+0x7b0>)
 8002d2e:	68da      	ldr	r2, [r3, #12]
 8002d30:	4905      	ldr	r1, [pc, #20]	@ (8002d48 <HAL_RCC_OscConfig+0x7b0>)
 8002d32:	4b06      	ldr	r3, [pc, #24]	@ (8002d4c <HAL_RCC_OscConfig+0x7b4>)
 8002d34:	4013      	ands	r3, r2
 8002d36:	60cb      	str	r3, [r1, #12]
 8002d38:	e001      	b.n	8002d3e <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002d3a:	2301      	movs	r3, #1
 8002d3c:	e000      	b.n	8002d40 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8002d3e:	2300      	movs	r3, #0
}
 8002d40:	4618      	mov	r0, r3
 8002d42:	3720      	adds	r7, #32
 8002d44:	46bd      	mov	sp, r7
 8002d46:	bd80      	pop	{r7, pc}
 8002d48:	40021000 	.word	0x40021000
 8002d4c:	feeefffc 	.word	0xfeeefffc

08002d50 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002d50:	b580      	push	{r7, lr}
 8002d52:	b084      	sub	sp, #16
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	6078      	str	r0, [r7, #4]
 8002d58:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d101      	bne.n	8002d64 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002d60:	2301      	movs	r3, #1
 8002d62:	e0e7      	b.n	8002f34 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002d64:	4b75      	ldr	r3, [pc, #468]	@ (8002f3c <HAL_RCC_ClockConfig+0x1ec>)
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	f003 0307 	and.w	r3, r3, #7
 8002d6c:	683a      	ldr	r2, [r7, #0]
 8002d6e:	429a      	cmp	r2, r3
 8002d70:	d910      	bls.n	8002d94 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d72:	4b72      	ldr	r3, [pc, #456]	@ (8002f3c <HAL_RCC_ClockConfig+0x1ec>)
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f023 0207 	bic.w	r2, r3, #7
 8002d7a:	4970      	ldr	r1, [pc, #448]	@ (8002f3c <HAL_RCC_ClockConfig+0x1ec>)
 8002d7c:	683b      	ldr	r3, [r7, #0]
 8002d7e:	4313      	orrs	r3, r2
 8002d80:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d82:	4b6e      	ldr	r3, [pc, #440]	@ (8002f3c <HAL_RCC_ClockConfig+0x1ec>)
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	f003 0307 	and.w	r3, r3, #7
 8002d8a:	683a      	ldr	r2, [r7, #0]
 8002d8c:	429a      	cmp	r2, r3
 8002d8e:	d001      	beq.n	8002d94 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002d90:	2301      	movs	r3, #1
 8002d92:	e0cf      	b.n	8002f34 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	f003 0302 	and.w	r3, r3, #2
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d010      	beq.n	8002dc2 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	689a      	ldr	r2, [r3, #8]
 8002da4:	4b66      	ldr	r3, [pc, #408]	@ (8002f40 <HAL_RCC_ClockConfig+0x1f0>)
 8002da6:	689b      	ldr	r3, [r3, #8]
 8002da8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002dac:	429a      	cmp	r2, r3
 8002dae:	d908      	bls.n	8002dc2 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002db0:	4b63      	ldr	r3, [pc, #396]	@ (8002f40 <HAL_RCC_ClockConfig+0x1f0>)
 8002db2:	689b      	ldr	r3, [r3, #8]
 8002db4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	689b      	ldr	r3, [r3, #8]
 8002dbc:	4960      	ldr	r1, [pc, #384]	@ (8002f40 <HAL_RCC_ClockConfig+0x1f0>)
 8002dbe:	4313      	orrs	r3, r2
 8002dc0:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f003 0301 	and.w	r3, r3, #1
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d04c      	beq.n	8002e68 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	685b      	ldr	r3, [r3, #4]
 8002dd2:	2b03      	cmp	r3, #3
 8002dd4:	d107      	bne.n	8002de6 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002dd6:	4b5a      	ldr	r3, [pc, #360]	@ (8002f40 <HAL_RCC_ClockConfig+0x1f0>)
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d121      	bne.n	8002e26 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002de2:	2301      	movs	r3, #1
 8002de4:	e0a6      	b.n	8002f34 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	685b      	ldr	r3, [r3, #4]
 8002dea:	2b02      	cmp	r3, #2
 8002dec:	d107      	bne.n	8002dfe <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002dee:	4b54      	ldr	r3, [pc, #336]	@ (8002f40 <HAL_RCC_ClockConfig+0x1f0>)
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d115      	bne.n	8002e26 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002dfa:	2301      	movs	r3, #1
 8002dfc:	e09a      	b.n	8002f34 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	685b      	ldr	r3, [r3, #4]
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d107      	bne.n	8002e16 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002e06:	4b4e      	ldr	r3, [pc, #312]	@ (8002f40 <HAL_RCC_ClockConfig+0x1f0>)
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f003 0302 	and.w	r3, r3, #2
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d109      	bne.n	8002e26 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002e12:	2301      	movs	r3, #1
 8002e14:	e08e      	b.n	8002f34 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002e16:	4b4a      	ldr	r3, [pc, #296]	@ (8002f40 <HAL_RCC_ClockConfig+0x1f0>)
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d101      	bne.n	8002e26 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002e22:	2301      	movs	r3, #1
 8002e24:	e086      	b.n	8002f34 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002e26:	4b46      	ldr	r3, [pc, #280]	@ (8002f40 <HAL_RCC_ClockConfig+0x1f0>)
 8002e28:	689b      	ldr	r3, [r3, #8]
 8002e2a:	f023 0203 	bic.w	r2, r3, #3
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	685b      	ldr	r3, [r3, #4]
 8002e32:	4943      	ldr	r1, [pc, #268]	@ (8002f40 <HAL_RCC_ClockConfig+0x1f0>)
 8002e34:	4313      	orrs	r3, r2
 8002e36:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002e38:	f7fe fbf6 	bl	8001628 <HAL_GetTick>
 8002e3c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e3e:	e00a      	b.n	8002e56 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e40:	f7fe fbf2 	bl	8001628 <HAL_GetTick>
 8002e44:	4602      	mov	r2, r0
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	1ad3      	subs	r3, r2, r3
 8002e4a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002e4e:	4293      	cmp	r3, r2
 8002e50:	d901      	bls.n	8002e56 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002e52:	2303      	movs	r3, #3
 8002e54:	e06e      	b.n	8002f34 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e56:	4b3a      	ldr	r3, [pc, #232]	@ (8002f40 <HAL_RCC_ClockConfig+0x1f0>)
 8002e58:	689b      	ldr	r3, [r3, #8]
 8002e5a:	f003 020c 	and.w	r2, r3, #12
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	685b      	ldr	r3, [r3, #4]
 8002e62:	009b      	lsls	r3, r3, #2
 8002e64:	429a      	cmp	r2, r3
 8002e66:	d1eb      	bne.n	8002e40 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	f003 0302 	and.w	r3, r3, #2
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d010      	beq.n	8002e96 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	689a      	ldr	r2, [r3, #8]
 8002e78:	4b31      	ldr	r3, [pc, #196]	@ (8002f40 <HAL_RCC_ClockConfig+0x1f0>)
 8002e7a:	689b      	ldr	r3, [r3, #8]
 8002e7c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002e80:	429a      	cmp	r2, r3
 8002e82:	d208      	bcs.n	8002e96 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002e84:	4b2e      	ldr	r3, [pc, #184]	@ (8002f40 <HAL_RCC_ClockConfig+0x1f0>)
 8002e86:	689b      	ldr	r3, [r3, #8]
 8002e88:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	689b      	ldr	r3, [r3, #8]
 8002e90:	492b      	ldr	r1, [pc, #172]	@ (8002f40 <HAL_RCC_ClockConfig+0x1f0>)
 8002e92:	4313      	orrs	r3, r2
 8002e94:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002e96:	4b29      	ldr	r3, [pc, #164]	@ (8002f3c <HAL_RCC_ClockConfig+0x1ec>)
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f003 0307 	and.w	r3, r3, #7
 8002e9e:	683a      	ldr	r2, [r7, #0]
 8002ea0:	429a      	cmp	r2, r3
 8002ea2:	d210      	bcs.n	8002ec6 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ea4:	4b25      	ldr	r3, [pc, #148]	@ (8002f3c <HAL_RCC_ClockConfig+0x1ec>)
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	f023 0207 	bic.w	r2, r3, #7
 8002eac:	4923      	ldr	r1, [pc, #140]	@ (8002f3c <HAL_RCC_ClockConfig+0x1ec>)
 8002eae:	683b      	ldr	r3, [r7, #0]
 8002eb0:	4313      	orrs	r3, r2
 8002eb2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002eb4:	4b21      	ldr	r3, [pc, #132]	@ (8002f3c <HAL_RCC_ClockConfig+0x1ec>)
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	f003 0307 	and.w	r3, r3, #7
 8002ebc:	683a      	ldr	r2, [r7, #0]
 8002ebe:	429a      	cmp	r2, r3
 8002ec0:	d001      	beq.n	8002ec6 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8002ec2:	2301      	movs	r3, #1
 8002ec4:	e036      	b.n	8002f34 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	f003 0304 	and.w	r3, r3, #4
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d008      	beq.n	8002ee4 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002ed2:	4b1b      	ldr	r3, [pc, #108]	@ (8002f40 <HAL_RCC_ClockConfig+0x1f0>)
 8002ed4:	689b      	ldr	r3, [r3, #8]
 8002ed6:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	68db      	ldr	r3, [r3, #12]
 8002ede:	4918      	ldr	r1, [pc, #96]	@ (8002f40 <HAL_RCC_ClockConfig+0x1f0>)
 8002ee0:	4313      	orrs	r3, r2
 8002ee2:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	f003 0308 	and.w	r3, r3, #8
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d009      	beq.n	8002f04 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002ef0:	4b13      	ldr	r3, [pc, #76]	@ (8002f40 <HAL_RCC_ClockConfig+0x1f0>)
 8002ef2:	689b      	ldr	r3, [r3, #8]
 8002ef4:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	691b      	ldr	r3, [r3, #16]
 8002efc:	00db      	lsls	r3, r3, #3
 8002efe:	4910      	ldr	r1, [pc, #64]	@ (8002f40 <HAL_RCC_ClockConfig+0x1f0>)
 8002f00:	4313      	orrs	r3, r2
 8002f02:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002f04:	f000 f824 	bl	8002f50 <HAL_RCC_GetSysClockFreq>
 8002f08:	4602      	mov	r2, r0
 8002f0a:	4b0d      	ldr	r3, [pc, #52]	@ (8002f40 <HAL_RCC_ClockConfig+0x1f0>)
 8002f0c:	689b      	ldr	r3, [r3, #8]
 8002f0e:	091b      	lsrs	r3, r3, #4
 8002f10:	f003 030f 	and.w	r3, r3, #15
 8002f14:	490b      	ldr	r1, [pc, #44]	@ (8002f44 <HAL_RCC_ClockConfig+0x1f4>)
 8002f16:	5ccb      	ldrb	r3, [r1, r3]
 8002f18:	f003 031f 	and.w	r3, r3, #31
 8002f1c:	fa22 f303 	lsr.w	r3, r2, r3
 8002f20:	4a09      	ldr	r2, [pc, #36]	@ (8002f48 <HAL_RCC_ClockConfig+0x1f8>)
 8002f22:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002f24:	4b09      	ldr	r3, [pc, #36]	@ (8002f4c <HAL_RCC_ClockConfig+0x1fc>)
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	4618      	mov	r0, r3
 8002f2a:	f7fe fa4d 	bl	80013c8 <HAL_InitTick>
 8002f2e:	4603      	mov	r3, r0
 8002f30:	72fb      	strb	r3, [r7, #11]

  return status;
 8002f32:	7afb      	ldrb	r3, [r7, #11]
}
 8002f34:	4618      	mov	r0, r3
 8002f36:	3710      	adds	r7, #16
 8002f38:	46bd      	mov	sp, r7
 8002f3a:	bd80      	pop	{r7, pc}
 8002f3c:	40022000 	.word	0x40022000
 8002f40:	40021000 	.word	0x40021000
 8002f44:	08008bfc 	.word	0x08008bfc
 8002f48:	20000008 	.word	0x20000008
 8002f4c:	2000000c 	.word	0x2000000c

08002f50 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002f50:	b480      	push	{r7}
 8002f52:	b089      	sub	sp, #36	@ 0x24
 8002f54:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002f56:	2300      	movs	r3, #0
 8002f58:	61fb      	str	r3, [r7, #28]
 8002f5a:	2300      	movs	r3, #0
 8002f5c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002f5e:	4b3e      	ldr	r3, [pc, #248]	@ (8003058 <HAL_RCC_GetSysClockFreq+0x108>)
 8002f60:	689b      	ldr	r3, [r3, #8]
 8002f62:	f003 030c 	and.w	r3, r3, #12
 8002f66:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002f68:	4b3b      	ldr	r3, [pc, #236]	@ (8003058 <HAL_RCC_GetSysClockFreq+0x108>)
 8002f6a:	68db      	ldr	r3, [r3, #12]
 8002f6c:	f003 0303 	and.w	r3, r3, #3
 8002f70:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002f72:	693b      	ldr	r3, [r7, #16]
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d005      	beq.n	8002f84 <HAL_RCC_GetSysClockFreq+0x34>
 8002f78:	693b      	ldr	r3, [r7, #16]
 8002f7a:	2b0c      	cmp	r3, #12
 8002f7c:	d121      	bne.n	8002fc2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	2b01      	cmp	r3, #1
 8002f82:	d11e      	bne.n	8002fc2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002f84:	4b34      	ldr	r3, [pc, #208]	@ (8003058 <HAL_RCC_GetSysClockFreq+0x108>)
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	f003 0308 	and.w	r3, r3, #8
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d107      	bne.n	8002fa0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002f90:	4b31      	ldr	r3, [pc, #196]	@ (8003058 <HAL_RCC_GetSysClockFreq+0x108>)
 8002f92:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002f96:	0a1b      	lsrs	r3, r3, #8
 8002f98:	f003 030f 	and.w	r3, r3, #15
 8002f9c:	61fb      	str	r3, [r7, #28]
 8002f9e:	e005      	b.n	8002fac <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002fa0:	4b2d      	ldr	r3, [pc, #180]	@ (8003058 <HAL_RCC_GetSysClockFreq+0x108>)
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	091b      	lsrs	r3, r3, #4
 8002fa6:	f003 030f 	and.w	r3, r3, #15
 8002faa:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002fac:	4a2b      	ldr	r2, [pc, #172]	@ (800305c <HAL_RCC_GetSysClockFreq+0x10c>)
 8002fae:	69fb      	ldr	r3, [r7, #28]
 8002fb0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002fb4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002fb6:	693b      	ldr	r3, [r7, #16]
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d10d      	bne.n	8002fd8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002fbc:	69fb      	ldr	r3, [r7, #28]
 8002fbe:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002fc0:	e00a      	b.n	8002fd8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002fc2:	693b      	ldr	r3, [r7, #16]
 8002fc4:	2b04      	cmp	r3, #4
 8002fc6:	d102      	bne.n	8002fce <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002fc8:	4b25      	ldr	r3, [pc, #148]	@ (8003060 <HAL_RCC_GetSysClockFreq+0x110>)
 8002fca:	61bb      	str	r3, [r7, #24]
 8002fcc:	e004      	b.n	8002fd8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002fce:	693b      	ldr	r3, [r7, #16]
 8002fd0:	2b08      	cmp	r3, #8
 8002fd2:	d101      	bne.n	8002fd8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002fd4:	4b23      	ldr	r3, [pc, #140]	@ (8003064 <HAL_RCC_GetSysClockFreq+0x114>)
 8002fd6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002fd8:	693b      	ldr	r3, [r7, #16]
 8002fda:	2b0c      	cmp	r3, #12
 8002fdc:	d134      	bne.n	8003048 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002fde:	4b1e      	ldr	r3, [pc, #120]	@ (8003058 <HAL_RCC_GetSysClockFreq+0x108>)
 8002fe0:	68db      	ldr	r3, [r3, #12]
 8002fe2:	f003 0303 	and.w	r3, r3, #3
 8002fe6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002fe8:	68bb      	ldr	r3, [r7, #8]
 8002fea:	2b02      	cmp	r3, #2
 8002fec:	d003      	beq.n	8002ff6 <HAL_RCC_GetSysClockFreq+0xa6>
 8002fee:	68bb      	ldr	r3, [r7, #8]
 8002ff0:	2b03      	cmp	r3, #3
 8002ff2:	d003      	beq.n	8002ffc <HAL_RCC_GetSysClockFreq+0xac>
 8002ff4:	e005      	b.n	8003002 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002ff6:	4b1a      	ldr	r3, [pc, #104]	@ (8003060 <HAL_RCC_GetSysClockFreq+0x110>)
 8002ff8:	617b      	str	r3, [r7, #20]
      break;
 8002ffa:	e005      	b.n	8003008 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002ffc:	4b19      	ldr	r3, [pc, #100]	@ (8003064 <HAL_RCC_GetSysClockFreq+0x114>)
 8002ffe:	617b      	str	r3, [r7, #20]
      break;
 8003000:	e002      	b.n	8003008 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003002:	69fb      	ldr	r3, [r7, #28]
 8003004:	617b      	str	r3, [r7, #20]
      break;
 8003006:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003008:	4b13      	ldr	r3, [pc, #76]	@ (8003058 <HAL_RCC_GetSysClockFreq+0x108>)
 800300a:	68db      	ldr	r3, [r3, #12]
 800300c:	091b      	lsrs	r3, r3, #4
 800300e:	f003 0307 	and.w	r3, r3, #7
 8003012:	3301      	adds	r3, #1
 8003014:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003016:	4b10      	ldr	r3, [pc, #64]	@ (8003058 <HAL_RCC_GetSysClockFreq+0x108>)
 8003018:	68db      	ldr	r3, [r3, #12]
 800301a:	0a1b      	lsrs	r3, r3, #8
 800301c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003020:	697a      	ldr	r2, [r7, #20]
 8003022:	fb03 f202 	mul.w	r2, r3, r2
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	fbb2 f3f3 	udiv	r3, r2, r3
 800302c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800302e:	4b0a      	ldr	r3, [pc, #40]	@ (8003058 <HAL_RCC_GetSysClockFreq+0x108>)
 8003030:	68db      	ldr	r3, [r3, #12]
 8003032:	0e5b      	lsrs	r3, r3, #25
 8003034:	f003 0303 	and.w	r3, r3, #3
 8003038:	3301      	adds	r3, #1
 800303a:	005b      	lsls	r3, r3, #1
 800303c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800303e:	697a      	ldr	r2, [r7, #20]
 8003040:	683b      	ldr	r3, [r7, #0]
 8003042:	fbb2 f3f3 	udiv	r3, r2, r3
 8003046:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003048:	69bb      	ldr	r3, [r7, #24]
}
 800304a:	4618      	mov	r0, r3
 800304c:	3724      	adds	r7, #36	@ 0x24
 800304e:	46bd      	mov	sp, r7
 8003050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003054:	4770      	bx	lr
 8003056:	bf00      	nop
 8003058:	40021000 	.word	0x40021000
 800305c:	08008c14 	.word	0x08008c14
 8003060:	00f42400 	.word	0x00f42400
 8003064:	007a1200 	.word	0x007a1200

08003068 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003068:	b480      	push	{r7}
 800306a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800306c:	4b03      	ldr	r3, [pc, #12]	@ (800307c <HAL_RCC_GetHCLKFreq+0x14>)
 800306e:	681b      	ldr	r3, [r3, #0]
}
 8003070:	4618      	mov	r0, r3
 8003072:	46bd      	mov	sp, r7
 8003074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003078:	4770      	bx	lr
 800307a:	bf00      	nop
 800307c:	20000008 	.word	0x20000008

08003080 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003080:	b580      	push	{r7, lr}
 8003082:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003084:	f7ff fff0 	bl	8003068 <HAL_RCC_GetHCLKFreq>
 8003088:	4602      	mov	r2, r0
 800308a:	4b06      	ldr	r3, [pc, #24]	@ (80030a4 <HAL_RCC_GetPCLK1Freq+0x24>)
 800308c:	689b      	ldr	r3, [r3, #8]
 800308e:	0a1b      	lsrs	r3, r3, #8
 8003090:	f003 0307 	and.w	r3, r3, #7
 8003094:	4904      	ldr	r1, [pc, #16]	@ (80030a8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003096:	5ccb      	ldrb	r3, [r1, r3]
 8003098:	f003 031f 	and.w	r3, r3, #31
 800309c:	fa22 f303 	lsr.w	r3, r2, r3
}
 80030a0:	4618      	mov	r0, r3
 80030a2:	bd80      	pop	{r7, pc}
 80030a4:	40021000 	.word	0x40021000
 80030a8:	08008c0c 	.word	0x08008c0c

080030ac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80030ac:	b580      	push	{r7, lr}
 80030ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80030b0:	f7ff ffda 	bl	8003068 <HAL_RCC_GetHCLKFreq>
 80030b4:	4602      	mov	r2, r0
 80030b6:	4b06      	ldr	r3, [pc, #24]	@ (80030d0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80030b8:	689b      	ldr	r3, [r3, #8]
 80030ba:	0adb      	lsrs	r3, r3, #11
 80030bc:	f003 0307 	and.w	r3, r3, #7
 80030c0:	4904      	ldr	r1, [pc, #16]	@ (80030d4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80030c2:	5ccb      	ldrb	r3, [r1, r3]
 80030c4:	f003 031f 	and.w	r3, r3, #31
 80030c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80030cc:	4618      	mov	r0, r3
 80030ce:	bd80      	pop	{r7, pc}
 80030d0:	40021000 	.word	0x40021000
 80030d4:	08008c0c 	.word	0x08008c0c

080030d8 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80030d8:	b480      	push	{r7}
 80030da:	b083      	sub	sp, #12
 80030dc:	af00      	add	r7, sp, #0
 80030de:	6078      	str	r0, [r7, #4]
 80030e0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	220f      	movs	r2, #15
 80030e6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 80030e8:	4b12      	ldr	r3, [pc, #72]	@ (8003134 <HAL_RCC_GetClockConfig+0x5c>)
 80030ea:	689b      	ldr	r3, [r3, #8]
 80030ec:	f003 0203 	and.w	r2, r3, #3
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 80030f4:	4b0f      	ldr	r3, [pc, #60]	@ (8003134 <HAL_RCC_GetClockConfig+0x5c>)
 80030f6:	689b      	ldr	r3, [r3, #8]
 80030f8:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8003100:	4b0c      	ldr	r3, [pc, #48]	@ (8003134 <HAL_RCC_GetClockConfig+0x5c>)
 8003102:	689b      	ldr	r3, [r3, #8]
 8003104:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 800310c:	4b09      	ldr	r3, [pc, #36]	@ (8003134 <HAL_RCC_GetClockConfig+0x5c>)
 800310e:	689b      	ldr	r3, [r3, #8]
 8003110:	08db      	lsrs	r3, r3, #3
 8003112:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 800311a:	4b07      	ldr	r3, [pc, #28]	@ (8003138 <HAL_RCC_GetClockConfig+0x60>)
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	f003 0207 	and.w	r2, r3, #7
 8003122:	683b      	ldr	r3, [r7, #0]
 8003124:	601a      	str	r2, [r3, #0]
}
 8003126:	bf00      	nop
 8003128:	370c      	adds	r7, #12
 800312a:	46bd      	mov	sp, r7
 800312c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003130:	4770      	bx	lr
 8003132:	bf00      	nop
 8003134:	40021000 	.word	0x40021000
 8003138:	40022000 	.word	0x40022000

0800313c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800313c:	b580      	push	{r7, lr}
 800313e:	b086      	sub	sp, #24
 8003140:	af00      	add	r7, sp, #0
 8003142:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003144:	2300      	movs	r3, #0
 8003146:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003148:	4b2a      	ldr	r3, [pc, #168]	@ (80031f4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800314a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800314c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003150:	2b00      	cmp	r3, #0
 8003152:	d003      	beq.n	800315c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003154:	f7ff f8f0 	bl	8002338 <HAL_PWREx_GetVoltageRange>
 8003158:	6178      	str	r0, [r7, #20]
 800315a:	e014      	b.n	8003186 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800315c:	4b25      	ldr	r3, [pc, #148]	@ (80031f4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800315e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003160:	4a24      	ldr	r2, [pc, #144]	@ (80031f4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003162:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003166:	6593      	str	r3, [r2, #88]	@ 0x58
 8003168:	4b22      	ldr	r3, [pc, #136]	@ (80031f4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800316a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800316c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003170:	60fb      	str	r3, [r7, #12]
 8003172:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003174:	f7ff f8e0 	bl	8002338 <HAL_PWREx_GetVoltageRange>
 8003178:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800317a:	4b1e      	ldr	r3, [pc, #120]	@ (80031f4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800317c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800317e:	4a1d      	ldr	r2, [pc, #116]	@ (80031f4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003180:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003184:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003186:	697b      	ldr	r3, [r7, #20]
 8003188:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800318c:	d10b      	bne.n	80031a6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	2b80      	cmp	r3, #128	@ 0x80
 8003192:	d919      	bls.n	80031c8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	2ba0      	cmp	r3, #160	@ 0xa0
 8003198:	d902      	bls.n	80031a0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800319a:	2302      	movs	r3, #2
 800319c:	613b      	str	r3, [r7, #16]
 800319e:	e013      	b.n	80031c8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80031a0:	2301      	movs	r3, #1
 80031a2:	613b      	str	r3, [r7, #16]
 80031a4:	e010      	b.n	80031c8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	2b80      	cmp	r3, #128	@ 0x80
 80031aa:	d902      	bls.n	80031b2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80031ac:	2303      	movs	r3, #3
 80031ae:	613b      	str	r3, [r7, #16]
 80031b0:	e00a      	b.n	80031c8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	2b80      	cmp	r3, #128	@ 0x80
 80031b6:	d102      	bne.n	80031be <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80031b8:	2302      	movs	r3, #2
 80031ba:	613b      	str	r3, [r7, #16]
 80031bc:	e004      	b.n	80031c8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	2b70      	cmp	r3, #112	@ 0x70
 80031c2:	d101      	bne.n	80031c8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80031c4:	2301      	movs	r3, #1
 80031c6:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80031c8:	4b0b      	ldr	r3, [pc, #44]	@ (80031f8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	f023 0207 	bic.w	r2, r3, #7
 80031d0:	4909      	ldr	r1, [pc, #36]	@ (80031f8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80031d2:	693b      	ldr	r3, [r7, #16]
 80031d4:	4313      	orrs	r3, r2
 80031d6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80031d8:	4b07      	ldr	r3, [pc, #28]	@ (80031f8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f003 0307 	and.w	r3, r3, #7
 80031e0:	693a      	ldr	r2, [r7, #16]
 80031e2:	429a      	cmp	r2, r3
 80031e4:	d001      	beq.n	80031ea <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80031e6:	2301      	movs	r3, #1
 80031e8:	e000      	b.n	80031ec <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80031ea:	2300      	movs	r3, #0
}
 80031ec:	4618      	mov	r0, r3
 80031ee:	3718      	adds	r7, #24
 80031f0:	46bd      	mov	sp, r7
 80031f2:	bd80      	pop	{r7, pc}
 80031f4:	40021000 	.word	0x40021000
 80031f8:	40022000 	.word	0x40022000

080031fc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80031fc:	b580      	push	{r7, lr}
 80031fe:	b086      	sub	sp, #24
 8003200:	af00      	add	r7, sp, #0
 8003202:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003204:	2300      	movs	r3, #0
 8003206:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003208:	2300      	movs	r3, #0
 800320a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003214:	2b00      	cmp	r3, #0
 8003216:	d041      	beq.n	800329c <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800321c:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003220:	d02a      	beq.n	8003278 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8003222:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003226:	d824      	bhi.n	8003272 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003228:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800322c:	d008      	beq.n	8003240 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800322e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003232:	d81e      	bhi.n	8003272 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003234:	2b00      	cmp	r3, #0
 8003236:	d00a      	beq.n	800324e <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003238:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800323c:	d010      	beq.n	8003260 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800323e:	e018      	b.n	8003272 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003240:	4b86      	ldr	r3, [pc, #536]	@ (800345c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003242:	68db      	ldr	r3, [r3, #12]
 8003244:	4a85      	ldr	r2, [pc, #532]	@ (800345c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003246:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800324a:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800324c:	e015      	b.n	800327a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	3304      	adds	r3, #4
 8003252:	2100      	movs	r1, #0
 8003254:	4618      	mov	r0, r3
 8003256:	f000 facb 	bl	80037f0 <RCCEx_PLLSAI1_Config>
 800325a:	4603      	mov	r3, r0
 800325c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800325e:	e00c      	b.n	800327a <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	3320      	adds	r3, #32
 8003264:	2100      	movs	r1, #0
 8003266:	4618      	mov	r0, r3
 8003268:	f000 fbb6 	bl	80039d8 <RCCEx_PLLSAI2_Config>
 800326c:	4603      	mov	r3, r0
 800326e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003270:	e003      	b.n	800327a <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003272:	2301      	movs	r3, #1
 8003274:	74fb      	strb	r3, [r7, #19]
      break;
 8003276:	e000      	b.n	800327a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003278:	bf00      	nop
    }

    if(ret == HAL_OK)
 800327a:	7cfb      	ldrb	r3, [r7, #19]
 800327c:	2b00      	cmp	r3, #0
 800327e:	d10b      	bne.n	8003298 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003280:	4b76      	ldr	r3, [pc, #472]	@ (800345c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003282:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003286:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800328e:	4973      	ldr	r1, [pc, #460]	@ (800345c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003290:	4313      	orrs	r3, r2
 8003292:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8003296:	e001      	b.n	800329c <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003298:	7cfb      	ldrb	r3, [r7, #19]
 800329a:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d041      	beq.n	800332c <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80032ac:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80032b0:	d02a      	beq.n	8003308 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80032b2:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80032b6:	d824      	bhi.n	8003302 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80032b8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80032bc:	d008      	beq.n	80032d0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80032be:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80032c2:	d81e      	bhi.n	8003302 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d00a      	beq.n	80032de <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80032c8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80032cc:	d010      	beq.n	80032f0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80032ce:	e018      	b.n	8003302 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80032d0:	4b62      	ldr	r3, [pc, #392]	@ (800345c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80032d2:	68db      	ldr	r3, [r3, #12]
 80032d4:	4a61      	ldr	r2, [pc, #388]	@ (800345c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80032d6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80032da:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80032dc:	e015      	b.n	800330a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	3304      	adds	r3, #4
 80032e2:	2100      	movs	r1, #0
 80032e4:	4618      	mov	r0, r3
 80032e6:	f000 fa83 	bl	80037f0 <RCCEx_PLLSAI1_Config>
 80032ea:	4603      	mov	r3, r0
 80032ec:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80032ee:	e00c      	b.n	800330a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	3320      	adds	r3, #32
 80032f4:	2100      	movs	r1, #0
 80032f6:	4618      	mov	r0, r3
 80032f8:	f000 fb6e 	bl	80039d8 <RCCEx_PLLSAI2_Config>
 80032fc:	4603      	mov	r3, r0
 80032fe:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003300:	e003      	b.n	800330a <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003302:	2301      	movs	r3, #1
 8003304:	74fb      	strb	r3, [r7, #19]
      break;
 8003306:	e000      	b.n	800330a <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8003308:	bf00      	nop
    }

    if(ret == HAL_OK)
 800330a:	7cfb      	ldrb	r3, [r7, #19]
 800330c:	2b00      	cmp	r3, #0
 800330e:	d10b      	bne.n	8003328 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003310:	4b52      	ldr	r3, [pc, #328]	@ (800345c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003312:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003316:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800331e:	494f      	ldr	r1, [pc, #316]	@ (800345c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003320:	4313      	orrs	r3, r2
 8003322:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8003326:	e001      	b.n	800332c <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003328:	7cfb      	ldrb	r3, [r7, #19]
 800332a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003334:	2b00      	cmp	r3, #0
 8003336:	f000 80a0 	beq.w	800347a <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800333a:	2300      	movs	r3, #0
 800333c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800333e:	4b47      	ldr	r3, [pc, #284]	@ (800345c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003340:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003342:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003346:	2b00      	cmp	r3, #0
 8003348:	d101      	bne.n	800334e <HAL_RCCEx_PeriphCLKConfig+0x152>
 800334a:	2301      	movs	r3, #1
 800334c:	e000      	b.n	8003350 <HAL_RCCEx_PeriphCLKConfig+0x154>
 800334e:	2300      	movs	r3, #0
 8003350:	2b00      	cmp	r3, #0
 8003352:	d00d      	beq.n	8003370 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003354:	4b41      	ldr	r3, [pc, #260]	@ (800345c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003356:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003358:	4a40      	ldr	r2, [pc, #256]	@ (800345c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800335a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800335e:	6593      	str	r3, [r2, #88]	@ 0x58
 8003360:	4b3e      	ldr	r3, [pc, #248]	@ (800345c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003362:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003364:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003368:	60bb      	str	r3, [r7, #8]
 800336a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800336c:	2301      	movs	r3, #1
 800336e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003370:	4b3b      	ldr	r3, [pc, #236]	@ (8003460 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	4a3a      	ldr	r2, [pc, #232]	@ (8003460 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003376:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800337a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800337c:	f7fe f954 	bl	8001628 <HAL_GetTick>
 8003380:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003382:	e009      	b.n	8003398 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003384:	f7fe f950 	bl	8001628 <HAL_GetTick>
 8003388:	4602      	mov	r2, r0
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	1ad3      	subs	r3, r2, r3
 800338e:	2b02      	cmp	r3, #2
 8003390:	d902      	bls.n	8003398 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8003392:	2303      	movs	r3, #3
 8003394:	74fb      	strb	r3, [r7, #19]
        break;
 8003396:	e005      	b.n	80033a4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003398:	4b31      	ldr	r3, [pc, #196]	@ (8003460 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d0ef      	beq.n	8003384 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80033a4:	7cfb      	ldrb	r3, [r7, #19]
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d15c      	bne.n	8003464 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80033aa:	4b2c      	ldr	r3, [pc, #176]	@ (800345c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80033ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80033b0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80033b4:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80033b6:	697b      	ldr	r3, [r7, #20]
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d01f      	beq.n	80033fc <HAL_RCCEx_PeriphCLKConfig+0x200>
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80033c2:	697a      	ldr	r2, [r7, #20]
 80033c4:	429a      	cmp	r2, r3
 80033c6:	d019      	beq.n	80033fc <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80033c8:	4b24      	ldr	r3, [pc, #144]	@ (800345c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80033ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80033ce:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80033d2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80033d4:	4b21      	ldr	r3, [pc, #132]	@ (800345c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80033d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80033da:	4a20      	ldr	r2, [pc, #128]	@ (800345c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80033dc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80033e0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80033e4:	4b1d      	ldr	r3, [pc, #116]	@ (800345c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80033e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80033ea:	4a1c      	ldr	r2, [pc, #112]	@ (800345c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80033ec:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80033f0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80033f4:	4a19      	ldr	r2, [pc, #100]	@ (800345c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80033f6:	697b      	ldr	r3, [r7, #20]
 80033f8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80033fc:	697b      	ldr	r3, [r7, #20]
 80033fe:	f003 0301 	and.w	r3, r3, #1
 8003402:	2b00      	cmp	r3, #0
 8003404:	d016      	beq.n	8003434 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003406:	f7fe f90f 	bl	8001628 <HAL_GetTick>
 800340a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800340c:	e00b      	b.n	8003426 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800340e:	f7fe f90b 	bl	8001628 <HAL_GetTick>
 8003412:	4602      	mov	r2, r0
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	1ad3      	subs	r3, r2, r3
 8003418:	f241 3288 	movw	r2, #5000	@ 0x1388
 800341c:	4293      	cmp	r3, r2
 800341e:	d902      	bls.n	8003426 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8003420:	2303      	movs	r3, #3
 8003422:	74fb      	strb	r3, [r7, #19]
            break;
 8003424:	e006      	b.n	8003434 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003426:	4b0d      	ldr	r3, [pc, #52]	@ (800345c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003428:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800342c:	f003 0302 	and.w	r3, r3, #2
 8003430:	2b00      	cmp	r3, #0
 8003432:	d0ec      	beq.n	800340e <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8003434:	7cfb      	ldrb	r3, [r7, #19]
 8003436:	2b00      	cmp	r3, #0
 8003438:	d10c      	bne.n	8003454 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800343a:	4b08      	ldr	r3, [pc, #32]	@ (800345c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800343c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003440:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800344a:	4904      	ldr	r1, [pc, #16]	@ (800345c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800344c:	4313      	orrs	r3, r2
 800344e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8003452:	e009      	b.n	8003468 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003454:	7cfb      	ldrb	r3, [r7, #19]
 8003456:	74bb      	strb	r3, [r7, #18]
 8003458:	e006      	b.n	8003468 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800345a:	bf00      	nop
 800345c:	40021000 	.word	0x40021000
 8003460:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003464:	7cfb      	ldrb	r3, [r7, #19]
 8003466:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003468:	7c7b      	ldrb	r3, [r7, #17]
 800346a:	2b01      	cmp	r3, #1
 800346c:	d105      	bne.n	800347a <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800346e:	4b9e      	ldr	r3, [pc, #632]	@ (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003470:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003472:	4a9d      	ldr	r2, [pc, #628]	@ (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003474:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003478:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f003 0301 	and.w	r3, r3, #1
 8003482:	2b00      	cmp	r3, #0
 8003484:	d00a      	beq.n	800349c <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003486:	4b98      	ldr	r3, [pc, #608]	@ (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003488:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800348c:	f023 0203 	bic.w	r2, r3, #3
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003494:	4994      	ldr	r1, [pc, #592]	@ (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003496:	4313      	orrs	r3, r2
 8003498:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	f003 0302 	and.w	r3, r3, #2
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d00a      	beq.n	80034be <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80034a8:	4b8f      	ldr	r3, [pc, #572]	@ (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80034ae:	f023 020c 	bic.w	r2, r3, #12
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80034b6:	498c      	ldr	r1, [pc, #560]	@ (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034b8:	4313      	orrs	r3, r2
 80034ba:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	f003 0304 	and.w	r3, r3, #4
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d00a      	beq.n	80034e0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80034ca:	4b87      	ldr	r3, [pc, #540]	@ (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80034d0:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034d8:	4983      	ldr	r1, [pc, #524]	@ (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034da:	4313      	orrs	r3, r2
 80034dc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	f003 0308 	and.w	r3, r3, #8
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d00a      	beq.n	8003502 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80034ec:	4b7e      	ldr	r3, [pc, #504]	@ (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80034f2:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80034fa:	497b      	ldr	r1, [pc, #492]	@ (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034fc:	4313      	orrs	r3, r2
 80034fe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	f003 0310 	and.w	r3, r3, #16
 800350a:	2b00      	cmp	r3, #0
 800350c:	d00a      	beq.n	8003524 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800350e:	4b76      	ldr	r3, [pc, #472]	@ (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003510:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003514:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800351c:	4972      	ldr	r1, [pc, #456]	@ (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800351e:	4313      	orrs	r3, r2
 8003520:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	f003 0320 	and.w	r3, r3, #32
 800352c:	2b00      	cmp	r3, #0
 800352e:	d00a      	beq.n	8003546 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003530:	4b6d      	ldr	r3, [pc, #436]	@ (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003532:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003536:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800353e:	496a      	ldr	r1, [pc, #424]	@ (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003540:	4313      	orrs	r3, r2
 8003542:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800354e:	2b00      	cmp	r3, #0
 8003550:	d00a      	beq.n	8003568 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003552:	4b65      	ldr	r3, [pc, #404]	@ (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003554:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003558:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003560:	4961      	ldr	r1, [pc, #388]	@ (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003562:	4313      	orrs	r3, r2
 8003564:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003570:	2b00      	cmp	r3, #0
 8003572:	d00a      	beq.n	800358a <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003574:	4b5c      	ldr	r3, [pc, #368]	@ (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003576:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800357a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003582:	4959      	ldr	r1, [pc, #356]	@ (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003584:	4313      	orrs	r3, r2
 8003586:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003592:	2b00      	cmp	r3, #0
 8003594:	d00a      	beq.n	80035ac <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003596:	4b54      	ldr	r3, [pc, #336]	@ (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003598:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800359c:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80035a4:	4950      	ldr	r1, [pc, #320]	@ (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035a6:	4313      	orrs	r3, r2
 80035a8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d00a      	beq.n	80035ce <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80035b8:	4b4b      	ldr	r3, [pc, #300]	@ (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80035be:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80035c6:	4948      	ldr	r1, [pc, #288]	@ (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035c8:	4313      	orrs	r3, r2
 80035ca:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d00a      	beq.n	80035f0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80035da:	4b43      	ldr	r3, [pc, #268]	@ (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80035e0:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80035e8:	493f      	ldr	r1, [pc, #252]	@ (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035ea:	4313      	orrs	r3, r2
 80035ec:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d028      	beq.n	800364e <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80035fc:	4b3a      	ldr	r3, [pc, #232]	@ (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003602:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800360a:	4937      	ldr	r1, [pc, #220]	@ (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800360c:	4313      	orrs	r3, r2
 800360e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003616:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800361a:	d106      	bne.n	800362a <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800361c:	4b32      	ldr	r3, [pc, #200]	@ (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800361e:	68db      	ldr	r3, [r3, #12]
 8003620:	4a31      	ldr	r2, [pc, #196]	@ (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003622:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003626:	60d3      	str	r3, [r2, #12]
 8003628:	e011      	b.n	800364e <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800362e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003632:	d10c      	bne.n	800364e <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	3304      	adds	r3, #4
 8003638:	2101      	movs	r1, #1
 800363a:	4618      	mov	r0, r3
 800363c:	f000 f8d8 	bl	80037f0 <RCCEx_PLLSAI1_Config>
 8003640:	4603      	mov	r3, r0
 8003642:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003644:	7cfb      	ldrb	r3, [r7, #19]
 8003646:	2b00      	cmp	r3, #0
 8003648:	d001      	beq.n	800364e <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 800364a:	7cfb      	ldrb	r3, [r7, #19]
 800364c:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003656:	2b00      	cmp	r3, #0
 8003658:	d028      	beq.n	80036ac <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800365a:	4b23      	ldr	r3, [pc, #140]	@ (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800365c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003660:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003668:	491f      	ldr	r1, [pc, #124]	@ (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800366a:	4313      	orrs	r3, r2
 800366c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003674:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003678:	d106      	bne.n	8003688 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800367a:	4b1b      	ldr	r3, [pc, #108]	@ (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800367c:	68db      	ldr	r3, [r3, #12]
 800367e:	4a1a      	ldr	r2, [pc, #104]	@ (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003680:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003684:	60d3      	str	r3, [r2, #12]
 8003686:	e011      	b.n	80036ac <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800368c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003690:	d10c      	bne.n	80036ac <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	3304      	adds	r3, #4
 8003696:	2101      	movs	r1, #1
 8003698:	4618      	mov	r0, r3
 800369a:	f000 f8a9 	bl	80037f0 <RCCEx_PLLSAI1_Config>
 800369e:	4603      	mov	r3, r0
 80036a0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80036a2:	7cfb      	ldrb	r3, [r7, #19]
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d001      	beq.n	80036ac <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80036a8:	7cfb      	ldrb	r3, [r7, #19]
 80036aa:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d02b      	beq.n	8003710 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80036b8:	4b0b      	ldr	r3, [pc, #44]	@ (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80036be:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80036c6:	4908      	ldr	r1, [pc, #32]	@ (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036c8:	4313      	orrs	r3, r2
 80036ca:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80036d2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80036d6:	d109      	bne.n	80036ec <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80036d8:	4b03      	ldr	r3, [pc, #12]	@ (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036da:	68db      	ldr	r3, [r3, #12]
 80036dc:	4a02      	ldr	r2, [pc, #8]	@ (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036de:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80036e2:	60d3      	str	r3, [r2, #12]
 80036e4:	e014      	b.n	8003710 <HAL_RCCEx_PeriphCLKConfig+0x514>
 80036e6:	bf00      	nop
 80036e8:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80036f0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80036f4:	d10c      	bne.n	8003710 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	3304      	adds	r3, #4
 80036fa:	2101      	movs	r1, #1
 80036fc:	4618      	mov	r0, r3
 80036fe:	f000 f877 	bl	80037f0 <RCCEx_PLLSAI1_Config>
 8003702:	4603      	mov	r3, r0
 8003704:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003706:	7cfb      	ldrb	r3, [r7, #19]
 8003708:	2b00      	cmp	r3, #0
 800370a:	d001      	beq.n	8003710 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 800370c:	7cfb      	ldrb	r3, [r7, #19]
 800370e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003718:	2b00      	cmp	r3, #0
 800371a:	d02f      	beq.n	800377c <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800371c:	4b2b      	ldr	r3, [pc, #172]	@ (80037cc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800371e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003722:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800372a:	4928      	ldr	r1, [pc, #160]	@ (80037cc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800372c:	4313      	orrs	r3, r2
 800372e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003736:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800373a:	d10d      	bne.n	8003758 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	3304      	adds	r3, #4
 8003740:	2102      	movs	r1, #2
 8003742:	4618      	mov	r0, r3
 8003744:	f000 f854 	bl	80037f0 <RCCEx_PLLSAI1_Config>
 8003748:	4603      	mov	r3, r0
 800374a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800374c:	7cfb      	ldrb	r3, [r7, #19]
 800374e:	2b00      	cmp	r3, #0
 8003750:	d014      	beq.n	800377c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003752:	7cfb      	ldrb	r3, [r7, #19]
 8003754:	74bb      	strb	r3, [r7, #18]
 8003756:	e011      	b.n	800377c <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800375c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003760:	d10c      	bne.n	800377c <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	3320      	adds	r3, #32
 8003766:	2102      	movs	r1, #2
 8003768:	4618      	mov	r0, r3
 800376a:	f000 f935 	bl	80039d8 <RCCEx_PLLSAI2_Config>
 800376e:	4603      	mov	r3, r0
 8003770:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003772:	7cfb      	ldrb	r3, [r7, #19]
 8003774:	2b00      	cmp	r3, #0
 8003776:	d001      	beq.n	800377c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003778:	7cfb      	ldrb	r3, [r7, #19]
 800377a:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003784:	2b00      	cmp	r3, #0
 8003786:	d00a      	beq.n	800379e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003788:	4b10      	ldr	r3, [pc, #64]	@ (80037cc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800378a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800378e:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003796:	490d      	ldr	r1, [pc, #52]	@ (80037cc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003798:	4313      	orrs	r3, r2
 800379a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d00b      	beq.n	80037c2 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80037aa:	4b08      	ldr	r3, [pc, #32]	@ (80037cc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80037ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80037b0:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80037ba:	4904      	ldr	r1, [pc, #16]	@ (80037cc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80037bc:	4313      	orrs	r3, r2
 80037be:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80037c2:	7cbb      	ldrb	r3, [r7, #18]
}
 80037c4:	4618      	mov	r0, r3
 80037c6:	3718      	adds	r7, #24
 80037c8:	46bd      	mov	sp, r7
 80037ca:	bd80      	pop	{r7, pc}
 80037cc:	40021000 	.word	0x40021000

080037d0 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 80037d0:	b480      	push	{r7}
 80037d2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 80037d4:	4b05      	ldr	r3, [pc, #20]	@ (80037ec <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	4a04      	ldr	r2, [pc, #16]	@ (80037ec <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80037da:	f043 0304 	orr.w	r3, r3, #4
 80037de:	6013      	str	r3, [r2, #0]
}
 80037e0:	bf00      	nop
 80037e2:	46bd      	mov	sp, r7
 80037e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e8:	4770      	bx	lr
 80037ea:	bf00      	nop
 80037ec:	40021000 	.word	0x40021000

080037f0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80037f0:	b580      	push	{r7, lr}
 80037f2:	b084      	sub	sp, #16
 80037f4:	af00      	add	r7, sp, #0
 80037f6:	6078      	str	r0, [r7, #4]
 80037f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80037fa:	2300      	movs	r3, #0
 80037fc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80037fe:	4b75      	ldr	r3, [pc, #468]	@ (80039d4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003800:	68db      	ldr	r3, [r3, #12]
 8003802:	f003 0303 	and.w	r3, r3, #3
 8003806:	2b00      	cmp	r3, #0
 8003808:	d018      	beq.n	800383c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800380a:	4b72      	ldr	r3, [pc, #456]	@ (80039d4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800380c:	68db      	ldr	r3, [r3, #12]
 800380e:	f003 0203 	and.w	r2, r3, #3
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	429a      	cmp	r2, r3
 8003818:	d10d      	bne.n	8003836 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
       ||
 800381e:	2b00      	cmp	r3, #0
 8003820:	d009      	beq.n	8003836 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003822:	4b6c      	ldr	r3, [pc, #432]	@ (80039d4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003824:	68db      	ldr	r3, [r3, #12]
 8003826:	091b      	lsrs	r3, r3, #4
 8003828:	f003 0307 	and.w	r3, r3, #7
 800382c:	1c5a      	adds	r2, r3, #1
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	685b      	ldr	r3, [r3, #4]
       ||
 8003832:	429a      	cmp	r2, r3
 8003834:	d047      	beq.n	80038c6 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003836:	2301      	movs	r3, #1
 8003838:	73fb      	strb	r3, [r7, #15]
 800383a:	e044      	b.n	80038c6 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	2b03      	cmp	r3, #3
 8003842:	d018      	beq.n	8003876 <RCCEx_PLLSAI1_Config+0x86>
 8003844:	2b03      	cmp	r3, #3
 8003846:	d825      	bhi.n	8003894 <RCCEx_PLLSAI1_Config+0xa4>
 8003848:	2b01      	cmp	r3, #1
 800384a:	d002      	beq.n	8003852 <RCCEx_PLLSAI1_Config+0x62>
 800384c:	2b02      	cmp	r3, #2
 800384e:	d009      	beq.n	8003864 <RCCEx_PLLSAI1_Config+0x74>
 8003850:	e020      	b.n	8003894 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003852:	4b60      	ldr	r3, [pc, #384]	@ (80039d4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f003 0302 	and.w	r3, r3, #2
 800385a:	2b00      	cmp	r3, #0
 800385c:	d11d      	bne.n	800389a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800385e:	2301      	movs	r3, #1
 8003860:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003862:	e01a      	b.n	800389a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003864:	4b5b      	ldr	r3, [pc, #364]	@ (80039d4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800386c:	2b00      	cmp	r3, #0
 800386e:	d116      	bne.n	800389e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003870:	2301      	movs	r3, #1
 8003872:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003874:	e013      	b.n	800389e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003876:	4b57      	ldr	r3, [pc, #348]	@ (80039d4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800387e:	2b00      	cmp	r3, #0
 8003880:	d10f      	bne.n	80038a2 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003882:	4b54      	ldr	r3, [pc, #336]	@ (80039d4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800388a:	2b00      	cmp	r3, #0
 800388c:	d109      	bne.n	80038a2 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800388e:	2301      	movs	r3, #1
 8003890:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003892:	e006      	b.n	80038a2 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003894:	2301      	movs	r3, #1
 8003896:	73fb      	strb	r3, [r7, #15]
      break;
 8003898:	e004      	b.n	80038a4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800389a:	bf00      	nop
 800389c:	e002      	b.n	80038a4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800389e:	bf00      	nop
 80038a0:	e000      	b.n	80038a4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80038a2:	bf00      	nop
    }

    if(status == HAL_OK)
 80038a4:	7bfb      	ldrb	r3, [r7, #15]
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d10d      	bne.n	80038c6 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80038aa:	4b4a      	ldr	r3, [pc, #296]	@ (80039d4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80038ac:	68db      	ldr	r3, [r3, #12]
 80038ae:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	6819      	ldr	r1, [r3, #0]
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	685b      	ldr	r3, [r3, #4]
 80038ba:	3b01      	subs	r3, #1
 80038bc:	011b      	lsls	r3, r3, #4
 80038be:	430b      	orrs	r3, r1
 80038c0:	4944      	ldr	r1, [pc, #272]	@ (80039d4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80038c2:	4313      	orrs	r3, r2
 80038c4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80038c6:	7bfb      	ldrb	r3, [r7, #15]
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d17d      	bne.n	80039c8 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80038cc:	4b41      	ldr	r3, [pc, #260]	@ (80039d4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	4a40      	ldr	r2, [pc, #256]	@ (80039d4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80038d2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80038d6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80038d8:	f7fd fea6 	bl	8001628 <HAL_GetTick>
 80038dc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80038de:	e009      	b.n	80038f4 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80038e0:	f7fd fea2 	bl	8001628 <HAL_GetTick>
 80038e4:	4602      	mov	r2, r0
 80038e6:	68bb      	ldr	r3, [r7, #8]
 80038e8:	1ad3      	subs	r3, r2, r3
 80038ea:	2b02      	cmp	r3, #2
 80038ec:	d902      	bls.n	80038f4 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80038ee:	2303      	movs	r3, #3
 80038f0:	73fb      	strb	r3, [r7, #15]
        break;
 80038f2:	e005      	b.n	8003900 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80038f4:	4b37      	ldr	r3, [pc, #220]	@ (80039d4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d1ef      	bne.n	80038e0 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003900:	7bfb      	ldrb	r3, [r7, #15]
 8003902:	2b00      	cmp	r3, #0
 8003904:	d160      	bne.n	80039c8 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003906:	683b      	ldr	r3, [r7, #0]
 8003908:	2b00      	cmp	r3, #0
 800390a:	d111      	bne.n	8003930 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800390c:	4b31      	ldr	r3, [pc, #196]	@ (80039d4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800390e:	691b      	ldr	r3, [r3, #16]
 8003910:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8003914:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003918:	687a      	ldr	r2, [r7, #4]
 800391a:	6892      	ldr	r2, [r2, #8]
 800391c:	0211      	lsls	r1, r2, #8
 800391e:	687a      	ldr	r2, [r7, #4]
 8003920:	68d2      	ldr	r2, [r2, #12]
 8003922:	0912      	lsrs	r2, r2, #4
 8003924:	0452      	lsls	r2, r2, #17
 8003926:	430a      	orrs	r2, r1
 8003928:	492a      	ldr	r1, [pc, #168]	@ (80039d4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800392a:	4313      	orrs	r3, r2
 800392c:	610b      	str	r3, [r1, #16]
 800392e:	e027      	b.n	8003980 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003930:	683b      	ldr	r3, [r7, #0]
 8003932:	2b01      	cmp	r3, #1
 8003934:	d112      	bne.n	800395c <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003936:	4b27      	ldr	r3, [pc, #156]	@ (80039d4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003938:	691b      	ldr	r3, [r3, #16]
 800393a:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 800393e:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003942:	687a      	ldr	r2, [r7, #4]
 8003944:	6892      	ldr	r2, [r2, #8]
 8003946:	0211      	lsls	r1, r2, #8
 8003948:	687a      	ldr	r2, [r7, #4]
 800394a:	6912      	ldr	r2, [r2, #16]
 800394c:	0852      	lsrs	r2, r2, #1
 800394e:	3a01      	subs	r2, #1
 8003950:	0552      	lsls	r2, r2, #21
 8003952:	430a      	orrs	r2, r1
 8003954:	491f      	ldr	r1, [pc, #124]	@ (80039d4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003956:	4313      	orrs	r3, r2
 8003958:	610b      	str	r3, [r1, #16]
 800395a:	e011      	b.n	8003980 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800395c:	4b1d      	ldr	r3, [pc, #116]	@ (80039d4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800395e:	691b      	ldr	r3, [r3, #16]
 8003960:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8003964:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003968:	687a      	ldr	r2, [r7, #4]
 800396a:	6892      	ldr	r2, [r2, #8]
 800396c:	0211      	lsls	r1, r2, #8
 800396e:	687a      	ldr	r2, [r7, #4]
 8003970:	6952      	ldr	r2, [r2, #20]
 8003972:	0852      	lsrs	r2, r2, #1
 8003974:	3a01      	subs	r2, #1
 8003976:	0652      	lsls	r2, r2, #25
 8003978:	430a      	orrs	r2, r1
 800397a:	4916      	ldr	r1, [pc, #88]	@ (80039d4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800397c:	4313      	orrs	r3, r2
 800397e:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003980:	4b14      	ldr	r3, [pc, #80]	@ (80039d4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	4a13      	ldr	r2, [pc, #76]	@ (80039d4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003986:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800398a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800398c:	f7fd fe4c 	bl	8001628 <HAL_GetTick>
 8003990:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003992:	e009      	b.n	80039a8 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003994:	f7fd fe48 	bl	8001628 <HAL_GetTick>
 8003998:	4602      	mov	r2, r0
 800399a:	68bb      	ldr	r3, [r7, #8]
 800399c:	1ad3      	subs	r3, r2, r3
 800399e:	2b02      	cmp	r3, #2
 80039a0:	d902      	bls.n	80039a8 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80039a2:	2303      	movs	r3, #3
 80039a4:	73fb      	strb	r3, [r7, #15]
          break;
 80039a6:	e005      	b.n	80039b4 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80039a8:	4b0a      	ldr	r3, [pc, #40]	@ (80039d4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d0ef      	beq.n	8003994 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80039b4:	7bfb      	ldrb	r3, [r7, #15]
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d106      	bne.n	80039c8 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80039ba:	4b06      	ldr	r3, [pc, #24]	@ (80039d4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80039bc:	691a      	ldr	r2, [r3, #16]
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	699b      	ldr	r3, [r3, #24]
 80039c2:	4904      	ldr	r1, [pc, #16]	@ (80039d4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80039c4:	4313      	orrs	r3, r2
 80039c6:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80039c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80039ca:	4618      	mov	r0, r3
 80039cc:	3710      	adds	r7, #16
 80039ce:	46bd      	mov	sp, r7
 80039d0:	bd80      	pop	{r7, pc}
 80039d2:	bf00      	nop
 80039d4:	40021000 	.word	0x40021000

080039d8 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80039d8:	b580      	push	{r7, lr}
 80039da:	b084      	sub	sp, #16
 80039dc:	af00      	add	r7, sp, #0
 80039de:	6078      	str	r0, [r7, #4]
 80039e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80039e2:	2300      	movs	r3, #0
 80039e4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80039e6:	4b6a      	ldr	r3, [pc, #424]	@ (8003b90 <RCCEx_PLLSAI2_Config+0x1b8>)
 80039e8:	68db      	ldr	r3, [r3, #12]
 80039ea:	f003 0303 	and.w	r3, r3, #3
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d018      	beq.n	8003a24 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80039f2:	4b67      	ldr	r3, [pc, #412]	@ (8003b90 <RCCEx_PLLSAI2_Config+0x1b8>)
 80039f4:	68db      	ldr	r3, [r3, #12]
 80039f6:	f003 0203 	and.w	r2, r3, #3
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	429a      	cmp	r2, r3
 8003a00:	d10d      	bne.n	8003a1e <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
       ||
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d009      	beq.n	8003a1e <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8003a0a:	4b61      	ldr	r3, [pc, #388]	@ (8003b90 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a0c:	68db      	ldr	r3, [r3, #12]
 8003a0e:	091b      	lsrs	r3, r3, #4
 8003a10:	f003 0307 	and.w	r3, r3, #7
 8003a14:	1c5a      	adds	r2, r3, #1
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	685b      	ldr	r3, [r3, #4]
       ||
 8003a1a:	429a      	cmp	r2, r3
 8003a1c:	d047      	beq.n	8003aae <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003a1e:	2301      	movs	r3, #1
 8003a20:	73fb      	strb	r3, [r7, #15]
 8003a22:	e044      	b.n	8003aae <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	2b03      	cmp	r3, #3
 8003a2a:	d018      	beq.n	8003a5e <RCCEx_PLLSAI2_Config+0x86>
 8003a2c:	2b03      	cmp	r3, #3
 8003a2e:	d825      	bhi.n	8003a7c <RCCEx_PLLSAI2_Config+0xa4>
 8003a30:	2b01      	cmp	r3, #1
 8003a32:	d002      	beq.n	8003a3a <RCCEx_PLLSAI2_Config+0x62>
 8003a34:	2b02      	cmp	r3, #2
 8003a36:	d009      	beq.n	8003a4c <RCCEx_PLLSAI2_Config+0x74>
 8003a38:	e020      	b.n	8003a7c <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003a3a:	4b55      	ldr	r3, [pc, #340]	@ (8003b90 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	f003 0302 	and.w	r3, r3, #2
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d11d      	bne.n	8003a82 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8003a46:	2301      	movs	r3, #1
 8003a48:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003a4a:	e01a      	b.n	8003a82 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003a4c:	4b50      	ldr	r3, [pc, #320]	@ (8003b90 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d116      	bne.n	8003a86 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8003a58:	2301      	movs	r3, #1
 8003a5a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003a5c:	e013      	b.n	8003a86 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003a5e:	4b4c      	ldr	r3, [pc, #304]	@ (8003b90 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d10f      	bne.n	8003a8a <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003a6a:	4b49      	ldr	r3, [pc, #292]	@ (8003b90 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d109      	bne.n	8003a8a <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8003a76:	2301      	movs	r3, #1
 8003a78:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003a7a:	e006      	b.n	8003a8a <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003a7c:	2301      	movs	r3, #1
 8003a7e:	73fb      	strb	r3, [r7, #15]
      break;
 8003a80:	e004      	b.n	8003a8c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003a82:	bf00      	nop
 8003a84:	e002      	b.n	8003a8c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003a86:	bf00      	nop
 8003a88:	e000      	b.n	8003a8c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003a8a:	bf00      	nop
    }

    if(status == HAL_OK)
 8003a8c:	7bfb      	ldrb	r3, [r7, #15]
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d10d      	bne.n	8003aae <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003a92:	4b3f      	ldr	r3, [pc, #252]	@ (8003b90 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a94:	68db      	ldr	r3, [r3, #12]
 8003a96:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	6819      	ldr	r1, [r3, #0]
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	685b      	ldr	r3, [r3, #4]
 8003aa2:	3b01      	subs	r3, #1
 8003aa4:	011b      	lsls	r3, r3, #4
 8003aa6:	430b      	orrs	r3, r1
 8003aa8:	4939      	ldr	r1, [pc, #228]	@ (8003b90 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003aaa:	4313      	orrs	r3, r2
 8003aac:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003aae:	7bfb      	ldrb	r3, [r7, #15]
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d167      	bne.n	8003b84 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003ab4:	4b36      	ldr	r3, [pc, #216]	@ (8003b90 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	4a35      	ldr	r2, [pc, #212]	@ (8003b90 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003aba:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003abe:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003ac0:	f7fd fdb2 	bl	8001628 <HAL_GetTick>
 8003ac4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003ac6:	e009      	b.n	8003adc <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003ac8:	f7fd fdae 	bl	8001628 <HAL_GetTick>
 8003acc:	4602      	mov	r2, r0
 8003ace:	68bb      	ldr	r3, [r7, #8]
 8003ad0:	1ad3      	subs	r3, r2, r3
 8003ad2:	2b02      	cmp	r3, #2
 8003ad4:	d902      	bls.n	8003adc <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003ad6:	2303      	movs	r3, #3
 8003ad8:	73fb      	strb	r3, [r7, #15]
        break;
 8003ada:	e005      	b.n	8003ae8 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003adc:	4b2c      	ldr	r3, [pc, #176]	@ (8003b90 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d1ef      	bne.n	8003ac8 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003ae8:	7bfb      	ldrb	r3, [r7, #15]
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d14a      	bne.n	8003b84 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003aee:	683b      	ldr	r3, [r7, #0]
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d111      	bne.n	8003b18 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003af4:	4b26      	ldr	r3, [pc, #152]	@ (8003b90 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003af6:	695b      	ldr	r3, [r3, #20]
 8003af8:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8003afc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003b00:	687a      	ldr	r2, [r7, #4]
 8003b02:	6892      	ldr	r2, [r2, #8]
 8003b04:	0211      	lsls	r1, r2, #8
 8003b06:	687a      	ldr	r2, [r7, #4]
 8003b08:	68d2      	ldr	r2, [r2, #12]
 8003b0a:	0912      	lsrs	r2, r2, #4
 8003b0c:	0452      	lsls	r2, r2, #17
 8003b0e:	430a      	orrs	r2, r1
 8003b10:	491f      	ldr	r1, [pc, #124]	@ (8003b90 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b12:	4313      	orrs	r3, r2
 8003b14:	614b      	str	r3, [r1, #20]
 8003b16:	e011      	b.n	8003b3c <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003b18:	4b1d      	ldr	r3, [pc, #116]	@ (8003b90 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b1a:	695b      	ldr	r3, [r3, #20]
 8003b1c:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8003b20:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003b24:	687a      	ldr	r2, [r7, #4]
 8003b26:	6892      	ldr	r2, [r2, #8]
 8003b28:	0211      	lsls	r1, r2, #8
 8003b2a:	687a      	ldr	r2, [r7, #4]
 8003b2c:	6912      	ldr	r2, [r2, #16]
 8003b2e:	0852      	lsrs	r2, r2, #1
 8003b30:	3a01      	subs	r2, #1
 8003b32:	0652      	lsls	r2, r2, #25
 8003b34:	430a      	orrs	r2, r1
 8003b36:	4916      	ldr	r1, [pc, #88]	@ (8003b90 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b38:	4313      	orrs	r3, r2
 8003b3a:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003b3c:	4b14      	ldr	r3, [pc, #80]	@ (8003b90 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	4a13      	ldr	r2, [pc, #76]	@ (8003b90 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b42:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003b46:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b48:	f7fd fd6e 	bl	8001628 <HAL_GetTick>
 8003b4c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003b4e:	e009      	b.n	8003b64 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003b50:	f7fd fd6a 	bl	8001628 <HAL_GetTick>
 8003b54:	4602      	mov	r2, r0
 8003b56:	68bb      	ldr	r3, [r7, #8]
 8003b58:	1ad3      	subs	r3, r2, r3
 8003b5a:	2b02      	cmp	r3, #2
 8003b5c:	d902      	bls.n	8003b64 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8003b5e:	2303      	movs	r3, #3
 8003b60:	73fb      	strb	r3, [r7, #15]
          break;
 8003b62:	e005      	b.n	8003b70 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003b64:	4b0a      	ldr	r3, [pc, #40]	@ (8003b90 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d0ef      	beq.n	8003b50 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8003b70:	7bfb      	ldrb	r3, [r7, #15]
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d106      	bne.n	8003b84 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003b76:	4b06      	ldr	r3, [pc, #24]	@ (8003b90 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b78:	695a      	ldr	r2, [r3, #20]
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	695b      	ldr	r3, [r3, #20]
 8003b7e:	4904      	ldr	r1, [pc, #16]	@ (8003b90 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b80:	4313      	orrs	r3, r2
 8003b82:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003b84:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b86:	4618      	mov	r0, r3
 8003b88:	3710      	adds	r7, #16
 8003b8a:	46bd      	mov	sp, r7
 8003b8c:	bd80      	pop	{r7, pc}
 8003b8e:	bf00      	nop
 8003b90:	40021000 	.word	0x40021000

08003b94 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003b94:	b580      	push	{r7, lr}
 8003b96:	b084      	sub	sp, #16
 8003b98:	af00      	add	r7, sp, #0
 8003b9a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d101      	bne.n	8003ba6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003ba2:	2301      	movs	r3, #1
 8003ba4:	e095      	b.n	8003cd2 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d108      	bne.n	8003bc0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	685b      	ldr	r3, [r3, #4]
 8003bb2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003bb6:	d009      	beq.n	8003bcc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	2200      	movs	r2, #0
 8003bbc:	61da      	str	r2, [r3, #28]
 8003bbe:	e005      	b.n	8003bcc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	2200      	movs	r2, #0
 8003bc4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	2200      	movs	r2, #0
 8003bca:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	2200      	movs	r2, #0
 8003bd0:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003bd8:	b2db      	uxtb	r3, r3
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d106      	bne.n	8003bec <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	2200      	movs	r2, #0
 8003be2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003be6:	6878      	ldr	r0, [r7, #4]
 8003be8:	f7fd fa6a 	bl	80010c0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	2202      	movs	r2, #2
 8003bf0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	681a      	ldr	r2, [r3, #0]
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003c02:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	68db      	ldr	r3, [r3, #12]
 8003c08:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003c0c:	d902      	bls.n	8003c14 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003c0e:	2300      	movs	r3, #0
 8003c10:	60fb      	str	r3, [r7, #12]
 8003c12:	e002      	b.n	8003c1a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003c14:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003c18:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	68db      	ldr	r3, [r3, #12]
 8003c1e:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8003c22:	d007      	beq.n	8003c34 <HAL_SPI_Init+0xa0>
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	68db      	ldr	r3, [r3, #12]
 8003c28:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003c2c:	d002      	beq.n	8003c34 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	2200      	movs	r2, #0
 8003c32:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	685b      	ldr	r3, [r3, #4]
 8003c38:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	689b      	ldr	r3, [r3, #8]
 8003c40:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8003c44:	431a      	orrs	r2, r3
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	691b      	ldr	r3, [r3, #16]
 8003c4a:	f003 0302 	and.w	r3, r3, #2
 8003c4e:	431a      	orrs	r2, r3
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	695b      	ldr	r3, [r3, #20]
 8003c54:	f003 0301 	and.w	r3, r3, #1
 8003c58:	431a      	orrs	r2, r3
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	699b      	ldr	r3, [r3, #24]
 8003c5e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003c62:	431a      	orrs	r2, r3
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	69db      	ldr	r3, [r3, #28]
 8003c68:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003c6c:	431a      	orrs	r2, r3
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	6a1b      	ldr	r3, [r3, #32]
 8003c72:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003c76:	ea42 0103 	orr.w	r1, r2, r3
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c7e:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	430a      	orrs	r2, r1
 8003c88:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	699b      	ldr	r3, [r3, #24]
 8003c8e:	0c1b      	lsrs	r3, r3, #16
 8003c90:	f003 0204 	and.w	r2, r3, #4
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c98:	f003 0310 	and.w	r3, r3, #16
 8003c9c:	431a      	orrs	r2, r3
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003ca2:	f003 0308 	and.w	r3, r3, #8
 8003ca6:	431a      	orrs	r2, r3
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	68db      	ldr	r3, [r3, #12]
 8003cac:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8003cb0:	ea42 0103 	orr.w	r1, r2, r3
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	430a      	orrs	r2, r1
 8003cc0:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	2200      	movs	r2, #0
 8003cc6:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	2201      	movs	r2, #1
 8003ccc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8003cd0:	2300      	movs	r3, #0
}
 8003cd2:	4618      	mov	r0, r3
 8003cd4:	3710      	adds	r7, #16
 8003cd6:	46bd      	mov	sp, r7
 8003cd8:	bd80      	pop	{r7, pc}

08003cda <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003cda:	b580      	push	{r7, lr}
 8003cdc:	b082      	sub	sp, #8
 8003cde:	af00      	add	r7, sp, #0
 8003ce0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d101      	bne.n	8003cec <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003ce8:	2301      	movs	r3, #1
 8003cea:	e049      	b.n	8003d80 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003cf2:	b2db      	uxtb	r3, r3
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d106      	bne.n	8003d06 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	2200      	movs	r2, #0
 8003cfc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003d00:	6878      	ldr	r0, [r7, #4]
 8003d02:	f000 f841 	bl	8003d88 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	2202      	movs	r2, #2
 8003d0a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681a      	ldr	r2, [r3, #0]
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	3304      	adds	r3, #4
 8003d16:	4619      	mov	r1, r3
 8003d18:	4610      	mov	r0, r2
 8003d1a:	f000 f9df 	bl	80040dc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	2201      	movs	r2, #1
 8003d22:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	2201      	movs	r2, #1
 8003d2a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	2201      	movs	r2, #1
 8003d32:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	2201      	movs	r2, #1
 8003d3a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	2201      	movs	r2, #1
 8003d42:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	2201      	movs	r2, #1
 8003d4a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	2201      	movs	r2, #1
 8003d52:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	2201      	movs	r2, #1
 8003d5a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	2201      	movs	r2, #1
 8003d62:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	2201      	movs	r2, #1
 8003d6a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	2201      	movs	r2, #1
 8003d72:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	2201      	movs	r2, #1
 8003d7a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003d7e:	2300      	movs	r3, #0
}
 8003d80:	4618      	mov	r0, r3
 8003d82:	3708      	adds	r7, #8
 8003d84:	46bd      	mov	sp, r7
 8003d86:	bd80      	pop	{r7, pc}

08003d88 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003d88:	b480      	push	{r7}
 8003d8a:	b083      	sub	sp, #12
 8003d8c:	af00      	add	r7, sp, #0
 8003d8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003d90:	bf00      	nop
 8003d92:	370c      	adds	r7, #12
 8003d94:	46bd      	mov	sp, r7
 8003d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d9a:	4770      	bx	lr

08003d9c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003d9c:	b480      	push	{r7}
 8003d9e:	b085      	sub	sp, #20
 8003da0:	af00      	add	r7, sp, #0
 8003da2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003daa:	b2db      	uxtb	r3, r3
 8003dac:	2b01      	cmp	r3, #1
 8003dae:	d001      	beq.n	8003db4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003db0:	2301      	movs	r3, #1
 8003db2:	e04f      	b.n	8003e54 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	2202      	movs	r2, #2
 8003db8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	68da      	ldr	r2, [r3, #12]
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	f042 0201 	orr.w	r2, r2, #1
 8003dca:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	4a23      	ldr	r2, [pc, #140]	@ (8003e60 <HAL_TIM_Base_Start_IT+0xc4>)
 8003dd2:	4293      	cmp	r3, r2
 8003dd4:	d01d      	beq.n	8003e12 <HAL_TIM_Base_Start_IT+0x76>
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003dde:	d018      	beq.n	8003e12 <HAL_TIM_Base_Start_IT+0x76>
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	4a1f      	ldr	r2, [pc, #124]	@ (8003e64 <HAL_TIM_Base_Start_IT+0xc8>)
 8003de6:	4293      	cmp	r3, r2
 8003de8:	d013      	beq.n	8003e12 <HAL_TIM_Base_Start_IT+0x76>
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	4a1e      	ldr	r2, [pc, #120]	@ (8003e68 <HAL_TIM_Base_Start_IT+0xcc>)
 8003df0:	4293      	cmp	r3, r2
 8003df2:	d00e      	beq.n	8003e12 <HAL_TIM_Base_Start_IT+0x76>
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	4a1c      	ldr	r2, [pc, #112]	@ (8003e6c <HAL_TIM_Base_Start_IT+0xd0>)
 8003dfa:	4293      	cmp	r3, r2
 8003dfc:	d009      	beq.n	8003e12 <HAL_TIM_Base_Start_IT+0x76>
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	4a1b      	ldr	r2, [pc, #108]	@ (8003e70 <HAL_TIM_Base_Start_IT+0xd4>)
 8003e04:	4293      	cmp	r3, r2
 8003e06:	d004      	beq.n	8003e12 <HAL_TIM_Base_Start_IT+0x76>
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	4a19      	ldr	r2, [pc, #100]	@ (8003e74 <HAL_TIM_Base_Start_IT+0xd8>)
 8003e0e:	4293      	cmp	r3, r2
 8003e10:	d115      	bne.n	8003e3e <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	689a      	ldr	r2, [r3, #8]
 8003e18:	4b17      	ldr	r3, [pc, #92]	@ (8003e78 <HAL_TIM_Base_Start_IT+0xdc>)
 8003e1a:	4013      	ands	r3, r2
 8003e1c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	2b06      	cmp	r3, #6
 8003e22:	d015      	beq.n	8003e50 <HAL_TIM_Base_Start_IT+0xb4>
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003e2a:	d011      	beq.n	8003e50 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	681a      	ldr	r2, [r3, #0]
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	f042 0201 	orr.w	r2, r2, #1
 8003e3a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e3c:	e008      	b.n	8003e50 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	681a      	ldr	r2, [r3, #0]
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	f042 0201 	orr.w	r2, r2, #1
 8003e4c:	601a      	str	r2, [r3, #0]
 8003e4e:	e000      	b.n	8003e52 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e50:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003e52:	2300      	movs	r3, #0
}
 8003e54:	4618      	mov	r0, r3
 8003e56:	3714      	adds	r7, #20
 8003e58:	46bd      	mov	sp, r7
 8003e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e5e:	4770      	bx	lr
 8003e60:	40012c00 	.word	0x40012c00
 8003e64:	40000400 	.word	0x40000400
 8003e68:	40000800 	.word	0x40000800
 8003e6c:	40000c00 	.word	0x40000c00
 8003e70:	40013400 	.word	0x40013400
 8003e74:	40014000 	.word	0x40014000
 8003e78:	00010007 	.word	0x00010007

08003e7c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003e7c:	b580      	push	{r7, lr}
 8003e7e:	b084      	sub	sp, #16
 8003e80:	af00      	add	r7, sp, #0
 8003e82:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	68db      	ldr	r3, [r3, #12]
 8003e8a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	691b      	ldr	r3, [r3, #16]
 8003e92:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003e94:	68bb      	ldr	r3, [r7, #8]
 8003e96:	f003 0302 	and.w	r3, r3, #2
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d020      	beq.n	8003ee0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	f003 0302 	and.w	r3, r3, #2
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d01b      	beq.n	8003ee0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	f06f 0202 	mvn.w	r2, #2
 8003eb0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	2201      	movs	r2, #1
 8003eb6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	699b      	ldr	r3, [r3, #24]
 8003ebe:	f003 0303 	and.w	r3, r3, #3
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d003      	beq.n	8003ece <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003ec6:	6878      	ldr	r0, [r7, #4]
 8003ec8:	f000 f8e9 	bl	800409e <HAL_TIM_IC_CaptureCallback>
 8003ecc:	e005      	b.n	8003eda <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003ece:	6878      	ldr	r0, [r7, #4]
 8003ed0:	f000 f8db 	bl	800408a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ed4:	6878      	ldr	r0, [r7, #4]
 8003ed6:	f000 f8ec 	bl	80040b2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	2200      	movs	r2, #0
 8003ede:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003ee0:	68bb      	ldr	r3, [r7, #8]
 8003ee2:	f003 0304 	and.w	r3, r3, #4
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d020      	beq.n	8003f2c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	f003 0304 	and.w	r3, r3, #4
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d01b      	beq.n	8003f2c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	f06f 0204 	mvn.w	r2, #4
 8003efc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	2202      	movs	r2, #2
 8003f02:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	699b      	ldr	r3, [r3, #24]
 8003f0a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d003      	beq.n	8003f1a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003f12:	6878      	ldr	r0, [r7, #4]
 8003f14:	f000 f8c3 	bl	800409e <HAL_TIM_IC_CaptureCallback>
 8003f18:	e005      	b.n	8003f26 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f1a:	6878      	ldr	r0, [r7, #4]
 8003f1c:	f000 f8b5 	bl	800408a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f20:	6878      	ldr	r0, [r7, #4]
 8003f22:	f000 f8c6 	bl	80040b2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	2200      	movs	r2, #0
 8003f2a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003f2c:	68bb      	ldr	r3, [r7, #8]
 8003f2e:	f003 0308 	and.w	r3, r3, #8
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d020      	beq.n	8003f78 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	f003 0308 	and.w	r3, r3, #8
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d01b      	beq.n	8003f78 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	f06f 0208 	mvn.w	r2, #8
 8003f48:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	2204      	movs	r2, #4
 8003f4e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	69db      	ldr	r3, [r3, #28]
 8003f56:	f003 0303 	and.w	r3, r3, #3
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d003      	beq.n	8003f66 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003f5e:	6878      	ldr	r0, [r7, #4]
 8003f60:	f000 f89d 	bl	800409e <HAL_TIM_IC_CaptureCallback>
 8003f64:	e005      	b.n	8003f72 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f66:	6878      	ldr	r0, [r7, #4]
 8003f68:	f000 f88f 	bl	800408a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f6c:	6878      	ldr	r0, [r7, #4]
 8003f6e:	f000 f8a0 	bl	80040b2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	2200      	movs	r2, #0
 8003f76:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003f78:	68bb      	ldr	r3, [r7, #8]
 8003f7a:	f003 0310 	and.w	r3, r3, #16
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d020      	beq.n	8003fc4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	f003 0310 	and.w	r3, r3, #16
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d01b      	beq.n	8003fc4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	f06f 0210 	mvn.w	r2, #16
 8003f94:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	2208      	movs	r2, #8
 8003f9a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	69db      	ldr	r3, [r3, #28]
 8003fa2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d003      	beq.n	8003fb2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003faa:	6878      	ldr	r0, [r7, #4]
 8003fac:	f000 f877 	bl	800409e <HAL_TIM_IC_CaptureCallback>
 8003fb0:	e005      	b.n	8003fbe <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003fb2:	6878      	ldr	r0, [r7, #4]
 8003fb4:	f000 f869 	bl	800408a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003fb8:	6878      	ldr	r0, [r7, #4]
 8003fba:	f000 f87a 	bl	80040b2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	2200      	movs	r2, #0
 8003fc2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003fc4:	68bb      	ldr	r3, [r7, #8]
 8003fc6:	f003 0301 	and.w	r3, r3, #1
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d00c      	beq.n	8003fe8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	f003 0301 	and.w	r3, r3, #1
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d007      	beq.n	8003fe8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	f06f 0201 	mvn.w	r2, #1
 8003fe0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003fe2:	6878      	ldr	r0, [r7, #4]
 8003fe4:	f7fc ff26 	bl	8000e34 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8003fe8:	68bb      	ldr	r3, [r7, #8]
 8003fea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d104      	bne.n	8003ffc <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8003ff2:	68bb      	ldr	r3, [r7, #8]
 8003ff4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d00c      	beq.n	8004016 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004002:	2b00      	cmp	r3, #0
 8004004:	d007      	beq.n	8004016 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800400e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004010:	6878      	ldr	r0, [r7, #4]
 8004012:	f000 f913 	bl	800423c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8004016:	68bb      	ldr	r3, [r7, #8]
 8004018:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800401c:	2b00      	cmp	r3, #0
 800401e:	d00c      	beq.n	800403a <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004026:	2b00      	cmp	r3, #0
 8004028:	d007      	beq.n	800403a <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8004032:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004034:	6878      	ldr	r0, [r7, #4]
 8004036:	f000 f90b 	bl	8004250 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800403a:	68bb      	ldr	r3, [r7, #8]
 800403c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004040:	2b00      	cmp	r3, #0
 8004042:	d00c      	beq.n	800405e <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800404a:	2b00      	cmp	r3, #0
 800404c:	d007      	beq.n	800405e <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004056:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004058:	6878      	ldr	r0, [r7, #4]
 800405a:	f000 f834 	bl	80040c6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800405e:	68bb      	ldr	r3, [r7, #8]
 8004060:	f003 0320 	and.w	r3, r3, #32
 8004064:	2b00      	cmp	r3, #0
 8004066:	d00c      	beq.n	8004082 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	f003 0320 	and.w	r3, r3, #32
 800406e:	2b00      	cmp	r3, #0
 8004070:	d007      	beq.n	8004082 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	f06f 0220 	mvn.w	r2, #32
 800407a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800407c:	6878      	ldr	r0, [r7, #4]
 800407e:	f000 f8d3 	bl	8004228 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004082:	bf00      	nop
 8004084:	3710      	adds	r7, #16
 8004086:	46bd      	mov	sp, r7
 8004088:	bd80      	pop	{r7, pc}

0800408a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800408a:	b480      	push	{r7}
 800408c:	b083      	sub	sp, #12
 800408e:	af00      	add	r7, sp, #0
 8004090:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004092:	bf00      	nop
 8004094:	370c      	adds	r7, #12
 8004096:	46bd      	mov	sp, r7
 8004098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800409c:	4770      	bx	lr

0800409e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800409e:	b480      	push	{r7}
 80040a0:	b083      	sub	sp, #12
 80040a2:	af00      	add	r7, sp, #0
 80040a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80040a6:	bf00      	nop
 80040a8:	370c      	adds	r7, #12
 80040aa:	46bd      	mov	sp, r7
 80040ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b0:	4770      	bx	lr

080040b2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80040b2:	b480      	push	{r7}
 80040b4:	b083      	sub	sp, #12
 80040b6:	af00      	add	r7, sp, #0
 80040b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80040ba:	bf00      	nop
 80040bc:	370c      	adds	r7, #12
 80040be:	46bd      	mov	sp, r7
 80040c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c4:	4770      	bx	lr

080040c6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80040c6:	b480      	push	{r7}
 80040c8:	b083      	sub	sp, #12
 80040ca:	af00      	add	r7, sp, #0
 80040cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80040ce:	bf00      	nop
 80040d0:	370c      	adds	r7, #12
 80040d2:	46bd      	mov	sp, r7
 80040d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d8:	4770      	bx	lr
	...

080040dc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80040dc:	b480      	push	{r7}
 80040de:	b085      	sub	sp, #20
 80040e0:	af00      	add	r7, sp, #0
 80040e2:	6078      	str	r0, [r7, #4]
 80040e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	4a46      	ldr	r2, [pc, #280]	@ (8004208 <TIM_Base_SetConfig+0x12c>)
 80040f0:	4293      	cmp	r3, r2
 80040f2:	d013      	beq.n	800411c <TIM_Base_SetConfig+0x40>
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80040fa:	d00f      	beq.n	800411c <TIM_Base_SetConfig+0x40>
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	4a43      	ldr	r2, [pc, #268]	@ (800420c <TIM_Base_SetConfig+0x130>)
 8004100:	4293      	cmp	r3, r2
 8004102:	d00b      	beq.n	800411c <TIM_Base_SetConfig+0x40>
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	4a42      	ldr	r2, [pc, #264]	@ (8004210 <TIM_Base_SetConfig+0x134>)
 8004108:	4293      	cmp	r3, r2
 800410a:	d007      	beq.n	800411c <TIM_Base_SetConfig+0x40>
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	4a41      	ldr	r2, [pc, #260]	@ (8004214 <TIM_Base_SetConfig+0x138>)
 8004110:	4293      	cmp	r3, r2
 8004112:	d003      	beq.n	800411c <TIM_Base_SetConfig+0x40>
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	4a40      	ldr	r2, [pc, #256]	@ (8004218 <TIM_Base_SetConfig+0x13c>)
 8004118:	4293      	cmp	r3, r2
 800411a:	d108      	bne.n	800412e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004122:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004124:	683b      	ldr	r3, [r7, #0]
 8004126:	685b      	ldr	r3, [r3, #4]
 8004128:	68fa      	ldr	r2, [r7, #12]
 800412a:	4313      	orrs	r3, r2
 800412c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	4a35      	ldr	r2, [pc, #212]	@ (8004208 <TIM_Base_SetConfig+0x12c>)
 8004132:	4293      	cmp	r3, r2
 8004134:	d01f      	beq.n	8004176 <TIM_Base_SetConfig+0x9a>
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800413c:	d01b      	beq.n	8004176 <TIM_Base_SetConfig+0x9a>
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	4a32      	ldr	r2, [pc, #200]	@ (800420c <TIM_Base_SetConfig+0x130>)
 8004142:	4293      	cmp	r3, r2
 8004144:	d017      	beq.n	8004176 <TIM_Base_SetConfig+0x9a>
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	4a31      	ldr	r2, [pc, #196]	@ (8004210 <TIM_Base_SetConfig+0x134>)
 800414a:	4293      	cmp	r3, r2
 800414c:	d013      	beq.n	8004176 <TIM_Base_SetConfig+0x9a>
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	4a30      	ldr	r2, [pc, #192]	@ (8004214 <TIM_Base_SetConfig+0x138>)
 8004152:	4293      	cmp	r3, r2
 8004154:	d00f      	beq.n	8004176 <TIM_Base_SetConfig+0x9a>
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	4a2f      	ldr	r2, [pc, #188]	@ (8004218 <TIM_Base_SetConfig+0x13c>)
 800415a:	4293      	cmp	r3, r2
 800415c:	d00b      	beq.n	8004176 <TIM_Base_SetConfig+0x9a>
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	4a2e      	ldr	r2, [pc, #184]	@ (800421c <TIM_Base_SetConfig+0x140>)
 8004162:	4293      	cmp	r3, r2
 8004164:	d007      	beq.n	8004176 <TIM_Base_SetConfig+0x9a>
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	4a2d      	ldr	r2, [pc, #180]	@ (8004220 <TIM_Base_SetConfig+0x144>)
 800416a:	4293      	cmp	r3, r2
 800416c:	d003      	beq.n	8004176 <TIM_Base_SetConfig+0x9a>
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	4a2c      	ldr	r2, [pc, #176]	@ (8004224 <TIM_Base_SetConfig+0x148>)
 8004172:	4293      	cmp	r3, r2
 8004174:	d108      	bne.n	8004188 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800417c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800417e:	683b      	ldr	r3, [r7, #0]
 8004180:	68db      	ldr	r3, [r3, #12]
 8004182:	68fa      	ldr	r2, [r7, #12]
 8004184:	4313      	orrs	r3, r2
 8004186:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800418e:	683b      	ldr	r3, [r7, #0]
 8004190:	695b      	ldr	r3, [r3, #20]
 8004192:	4313      	orrs	r3, r2
 8004194:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	68fa      	ldr	r2, [r7, #12]
 800419a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800419c:	683b      	ldr	r3, [r7, #0]
 800419e:	689a      	ldr	r2, [r3, #8]
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80041a4:	683b      	ldr	r3, [r7, #0]
 80041a6:	681a      	ldr	r2, [r3, #0]
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	4a16      	ldr	r2, [pc, #88]	@ (8004208 <TIM_Base_SetConfig+0x12c>)
 80041b0:	4293      	cmp	r3, r2
 80041b2:	d00f      	beq.n	80041d4 <TIM_Base_SetConfig+0xf8>
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	4a18      	ldr	r2, [pc, #96]	@ (8004218 <TIM_Base_SetConfig+0x13c>)
 80041b8:	4293      	cmp	r3, r2
 80041ba:	d00b      	beq.n	80041d4 <TIM_Base_SetConfig+0xf8>
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	4a17      	ldr	r2, [pc, #92]	@ (800421c <TIM_Base_SetConfig+0x140>)
 80041c0:	4293      	cmp	r3, r2
 80041c2:	d007      	beq.n	80041d4 <TIM_Base_SetConfig+0xf8>
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	4a16      	ldr	r2, [pc, #88]	@ (8004220 <TIM_Base_SetConfig+0x144>)
 80041c8:	4293      	cmp	r3, r2
 80041ca:	d003      	beq.n	80041d4 <TIM_Base_SetConfig+0xf8>
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	4a15      	ldr	r2, [pc, #84]	@ (8004224 <TIM_Base_SetConfig+0x148>)
 80041d0:	4293      	cmp	r3, r2
 80041d2:	d103      	bne.n	80041dc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80041d4:	683b      	ldr	r3, [r7, #0]
 80041d6:	691a      	ldr	r2, [r3, #16]
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	2201      	movs	r2, #1
 80041e0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	691b      	ldr	r3, [r3, #16]
 80041e6:	f003 0301 	and.w	r3, r3, #1
 80041ea:	2b01      	cmp	r3, #1
 80041ec:	d105      	bne.n	80041fa <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	691b      	ldr	r3, [r3, #16]
 80041f2:	f023 0201 	bic.w	r2, r3, #1
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	611a      	str	r2, [r3, #16]
  }
}
 80041fa:	bf00      	nop
 80041fc:	3714      	adds	r7, #20
 80041fe:	46bd      	mov	sp, r7
 8004200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004204:	4770      	bx	lr
 8004206:	bf00      	nop
 8004208:	40012c00 	.word	0x40012c00
 800420c:	40000400 	.word	0x40000400
 8004210:	40000800 	.word	0x40000800
 8004214:	40000c00 	.word	0x40000c00
 8004218:	40013400 	.word	0x40013400
 800421c:	40014000 	.word	0x40014000
 8004220:	40014400 	.word	0x40014400
 8004224:	40014800 	.word	0x40014800

08004228 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004228:	b480      	push	{r7}
 800422a:	b083      	sub	sp, #12
 800422c:	af00      	add	r7, sp, #0
 800422e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004230:	bf00      	nop
 8004232:	370c      	adds	r7, #12
 8004234:	46bd      	mov	sp, r7
 8004236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800423a:	4770      	bx	lr

0800423c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800423c:	b480      	push	{r7}
 800423e:	b083      	sub	sp, #12
 8004240:	af00      	add	r7, sp, #0
 8004242:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004244:	bf00      	nop
 8004246:	370c      	adds	r7, #12
 8004248:	46bd      	mov	sp, r7
 800424a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800424e:	4770      	bx	lr

08004250 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004250:	b480      	push	{r7}
 8004252:	b083      	sub	sp, #12
 8004254:	af00      	add	r7, sp, #0
 8004256:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004258:	bf00      	nop
 800425a:	370c      	adds	r7, #12
 800425c:	46bd      	mov	sp, r7
 800425e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004262:	4770      	bx	lr

08004264 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004264:	b580      	push	{r7, lr}
 8004266:	b082      	sub	sp, #8
 8004268:	af00      	add	r7, sp, #0
 800426a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	2b00      	cmp	r3, #0
 8004270:	d101      	bne.n	8004276 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004272:	2301      	movs	r3, #1
 8004274:	e040      	b.n	80042f8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800427a:	2b00      	cmp	r3, #0
 800427c:	d106      	bne.n	800428c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	2200      	movs	r2, #0
 8004282:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004286:	6878      	ldr	r0, [r7, #4]
 8004288:	f7fc ff5e 	bl	8001148 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	2224      	movs	r2, #36	@ 0x24
 8004290:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	681a      	ldr	r2, [r3, #0]
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	f022 0201 	bic.w	r2, r2, #1
 80042a0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d002      	beq.n	80042b0 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80042aa:	6878      	ldr	r0, [r7, #4]
 80042ac:	f000 fae0 	bl	8004870 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80042b0:	6878      	ldr	r0, [r7, #4]
 80042b2:	f000 f825 	bl	8004300 <UART_SetConfig>
 80042b6:	4603      	mov	r3, r0
 80042b8:	2b01      	cmp	r3, #1
 80042ba:	d101      	bne.n	80042c0 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80042bc:	2301      	movs	r3, #1
 80042be:	e01b      	b.n	80042f8 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	685a      	ldr	r2, [r3, #4]
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80042ce:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	689a      	ldr	r2, [r3, #8]
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80042de:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	681a      	ldr	r2, [r3, #0]
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	f042 0201 	orr.w	r2, r2, #1
 80042ee:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80042f0:	6878      	ldr	r0, [r7, #4]
 80042f2:	f000 fb5f 	bl	80049b4 <UART_CheckIdleState>
 80042f6:	4603      	mov	r3, r0
}
 80042f8:	4618      	mov	r0, r3
 80042fa:	3708      	adds	r7, #8
 80042fc:	46bd      	mov	sp, r7
 80042fe:	bd80      	pop	{r7, pc}

08004300 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004300:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004304:	b08a      	sub	sp, #40	@ 0x28
 8004306:	af00      	add	r7, sp, #0
 8004308:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800430a:	2300      	movs	r3, #0
 800430c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	689a      	ldr	r2, [r3, #8]
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	691b      	ldr	r3, [r3, #16]
 8004318:	431a      	orrs	r2, r3
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	695b      	ldr	r3, [r3, #20]
 800431e:	431a      	orrs	r2, r3
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	69db      	ldr	r3, [r3, #28]
 8004324:	4313      	orrs	r3, r2
 8004326:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	681a      	ldr	r2, [r3, #0]
 800432e:	4ba4      	ldr	r3, [pc, #656]	@ (80045c0 <UART_SetConfig+0x2c0>)
 8004330:	4013      	ands	r3, r2
 8004332:	68fa      	ldr	r2, [r7, #12]
 8004334:	6812      	ldr	r2, [r2, #0]
 8004336:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004338:	430b      	orrs	r3, r1
 800433a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	685b      	ldr	r3, [r3, #4]
 8004342:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	68da      	ldr	r2, [r3, #12]
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	430a      	orrs	r2, r1
 8004350:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	699b      	ldr	r3, [r3, #24]
 8004356:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	4a99      	ldr	r2, [pc, #612]	@ (80045c4 <UART_SetConfig+0x2c4>)
 800435e:	4293      	cmp	r3, r2
 8004360:	d004      	beq.n	800436c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	6a1b      	ldr	r3, [r3, #32]
 8004366:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004368:	4313      	orrs	r3, r2
 800436a:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	689b      	ldr	r3, [r3, #8]
 8004372:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800437c:	430a      	orrs	r2, r1
 800437e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	4a90      	ldr	r2, [pc, #576]	@ (80045c8 <UART_SetConfig+0x2c8>)
 8004386:	4293      	cmp	r3, r2
 8004388:	d126      	bne.n	80043d8 <UART_SetConfig+0xd8>
 800438a:	4b90      	ldr	r3, [pc, #576]	@ (80045cc <UART_SetConfig+0x2cc>)
 800438c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004390:	f003 0303 	and.w	r3, r3, #3
 8004394:	2b03      	cmp	r3, #3
 8004396:	d81b      	bhi.n	80043d0 <UART_SetConfig+0xd0>
 8004398:	a201      	add	r2, pc, #4	@ (adr r2, 80043a0 <UART_SetConfig+0xa0>)
 800439a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800439e:	bf00      	nop
 80043a0:	080043b1 	.word	0x080043b1
 80043a4:	080043c1 	.word	0x080043c1
 80043a8:	080043b9 	.word	0x080043b9
 80043ac:	080043c9 	.word	0x080043c9
 80043b0:	2301      	movs	r3, #1
 80043b2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80043b6:	e116      	b.n	80045e6 <UART_SetConfig+0x2e6>
 80043b8:	2302      	movs	r3, #2
 80043ba:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80043be:	e112      	b.n	80045e6 <UART_SetConfig+0x2e6>
 80043c0:	2304      	movs	r3, #4
 80043c2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80043c6:	e10e      	b.n	80045e6 <UART_SetConfig+0x2e6>
 80043c8:	2308      	movs	r3, #8
 80043ca:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80043ce:	e10a      	b.n	80045e6 <UART_SetConfig+0x2e6>
 80043d0:	2310      	movs	r3, #16
 80043d2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80043d6:	e106      	b.n	80045e6 <UART_SetConfig+0x2e6>
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	4a7c      	ldr	r2, [pc, #496]	@ (80045d0 <UART_SetConfig+0x2d0>)
 80043de:	4293      	cmp	r3, r2
 80043e0:	d138      	bne.n	8004454 <UART_SetConfig+0x154>
 80043e2:	4b7a      	ldr	r3, [pc, #488]	@ (80045cc <UART_SetConfig+0x2cc>)
 80043e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80043e8:	f003 030c 	and.w	r3, r3, #12
 80043ec:	2b0c      	cmp	r3, #12
 80043ee:	d82d      	bhi.n	800444c <UART_SetConfig+0x14c>
 80043f0:	a201      	add	r2, pc, #4	@ (adr r2, 80043f8 <UART_SetConfig+0xf8>)
 80043f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043f6:	bf00      	nop
 80043f8:	0800442d 	.word	0x0800442d
 80043fc:	0800444d 	.word	0x0800444d
 8004400:	0800444d 	.word	0x0800444d
 8004404:	0800444d 	.word	0x0800444d
 8004408:	0800443d 	.word	0x0800443d
 800440c:	0800444d 	.word	0x0800444d
 8004410:	0800444d 	.word	0x0800444d
 8004414:	0800444d 	.word	0x0800444d
 8004418:	08004435 	.word	0x08004435
 800441c:	0800444d 	.word	0x0800444d
 8004420:	0800444d 	.word	0x0800444d
 8004424:	0800444d 	.word	0x0800444d
 8004428:	08004445 	.word	0x08004445
 800442c:	2300      	movs	r3, #0
 800442e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004432:	e0d8      	b.n	80045e6 <UART_SetConfig+0x2e6>
 8004434:	2302      	movs	r3, #2
 8004436:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800443a:	e0d4      	b.n	80045e6 <UART_SetConfig+0x2e6>
 800443c:	2304      	movs	r3, #4
 800443e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004442:	e0d0      	b.n	80045e6 <UART_SetConfig+0x2e6>
 8004444:	2308      	movs	r3, #8
 8004446:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800444a:	e0cc      	b.n	80045e6 <UART_SetConfig+0x2e6>
 800444c:	2310      	movs	r3, #16
 800444e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004452:	e0c8      	b.n	80045e6 <UART_SetConfig+0x2e6>
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	4a5e      	ldr	r2, [pc, #376]	@ (80045d4 <UART_SetConfig+0x2d4>)
 800445a:	4293      	cmp	r3, r2
 800445c:	d125      	bne.n	80044aa <UART_SetConfig+0x1aa>
 800445e:	4b5b      	ldr	r3, [pc, #364]	@ (80045cc <UART_SetConfig+0x2cc>)
 8004460:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004464:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8004468:	2b30      	cmp	r3, #48	@ 0x30
 800446a:	d016      	beq.n	800449a <UART_SetConfig+0x19a>
 800446c:	2b30      	cmp	r3, #48	@ 0x30
 800446e:	d818      	bhi.n	80044a2 <UART_SetConfig+0x1a2>
 8004470:	2b20      	cmp	r3, #32
 8004472:	d00a      	beq.n	800448a <UART_SetConfig+0x18a>
 8004474:	2b20      	cmp	r3, #32
 8004476:	d814      	bhi.n	80044a2 <UART_SetConfig+0x1a2>
 8004478:	2b00      	cmp	r3, #0
 800447a:	d002      	beq.n	8004482 <UART_SetConfig+0x182>
 800447c:	2b10      	cmp	r3, #16
 800447e:	d008      	beq.n	8004492 <UART_SetConfig+0x192>
 8004480:	e00f      	b.n	80044a2 <UART_SetConfig+0x1a2>
 8004482:	2300      	movs	r3, #0
 8004484:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004488:	e0ad      	b.n	80045e6 <UART_SetConfig+0x2e6>
 800448a:	2302      	movs	r3, #2
 800448c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004490:	e0a9      	b.n	80045e6 <UART_SetConfig+0x2e6>
 8004492:	2304      	movs	r3, #4
 8004494:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004498:	e0a5      	b.n	80045e6 <UART_SetConfig+0x2e6>
 800449a:	2308      	movs	r3, #8
 800449c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80044a0:	e0a1      	b.n	80045e6 <UART_SetConfig+0x2e6>
 80044a2:	2310      	movs	r3, #16
 80044a4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80044a8:	e09d      	b.n	80045e6 <UART_SetConfig+0x2e6>
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	4a4a      	ldr	r2, [pc, #296]	@ (80045d8 <UART_SetConfig+0x2d8>)
 80044b0:	4293      	cmp	r3, r2
 80044b2:	d125      	bne.n	8004500 <UART_SetConfig+0x200>
 80044b4:	4b45      	ldr	r3, [pc, #276]	@ (80045cc <UART_SetConfig+0x2cc>)
 80044b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80044ba:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80044be:	2bc0      	cmp	r3, #192	@ 0xc0
 80044c0:	d016      	beq.n	80044f0 <UART_SetConfig+0x1f0>
 80044c2:	2bc0      	cmp	r3, #192	@ 0xc0
 80044c4:	d818      	bhi.n	80044f8 <UART_SetConfig+0x1f8>
 80044c6:	2b80      	cmp	r3, #128	@ 0x80
 80044c8:	d00a      	beq.n	80044e0 <UART_SetConfig+0x1e0>
 80044ca:	2b80      	cmp	r3, #128	@ 0x80
 80044cc:	d814      	bhi.n	80044f8 <UART_SetConfig+0x1f8>
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d002      	beq.n	80044d8 <UART_SetConfig+0x1d8>
 80044d2:	2b40      	cmp	r3, #64	@ 0x40
 80044d4:	d008      	beq.n	80044e8 <UART_SetConfig+0x1e8>
 80044d6:	e00f      	b.n	80044f8 <UART_SetConfig+0x1f8>
 80044d8:	2300      	movs	r3, #0
 80044da:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80044de:	e082      	b.n	80045e6 <UART_SetConfig+0x2e6>
 80044e0:	2302      	movs	r3, #2
 80044e2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80044e6:	e07e      	b.n	80045e6 <UART_SetConfig+0x2e6>
 80044e8:	2304      	movs	r3, #4
 80044ea:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80044ee:	e07a      	b.n	80045e6 <UART_SetConfig+0x2e6>
 80044f0:	2308      	movs	r3, #8
 80044f2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80044f6:	e076      	b.n	80045e6 <UART_SetConfig+0x2e6>
 80044f8:	2310      	movs	r3, #16
 80044fa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80044fe:	e072      	b.n	80045e6 <UART_SetConfig+0x2e6>
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	4a35      	ldr	r2, [pc, #212]	@ (80045dc <UART_SetConfig+0x2dc>)
 8004506:	4293      	cmp	r3, r2
 8004508:	d12a      	bne.n	8004560 <UART_SetConfig+0x260>
 800450a:	4b30      	ldr	r3, [pc, #192]	@ (80045cc <UART_SetConfig+0x2cc>)
 800450c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004510:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004514:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004518:	d01a      	beq.n	8004550 <UART_SetConfig+0x250>
 800451a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800451e:	d81b      	bhi.n	8004558 <UART_SetConfig+0x258>
 8004520:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004524:	d00c      	beq.n	8004540 <UART_SetConfig+0x240>
 8004526:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800452a:	d815      	bhi.n	8004558 <UART_SetConfig+0x258>
 800452c:	2b00      	cmp	r3, #0
 800452e:	d003      	beq.n	8004538 <UART_SetConfig+0x238>
 8004530:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004534:	d008      	beq.n	8004548 <UART_SetConfig+0x248>
 8004536:	e00f      	b.n	8004558 <UART_SetConfig+0x258>
 8004538:	2300      	movs	r3, #0
 800453a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800453e:	e052      	b.n	80045e6 <UART_SetConfig+0x2e6>
 8004540:	2302      	movs	r3, #2
 8004542:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004546:	e04e      	b.n	80045e6 <UART_SetConfig+0x2e6>
 8004548:	2304      	movs	r3, #4
 800454a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800454e:	e04a      	b.n	80045e6 <UART_SetConfig+0x2e6>
 8004550:	2308      	movs	r3, #8
 8004552:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004556:	e046      	b.n	80045e6 <UART_SetConfig+0x2e6>
 8004558:	2310      	movs	r3, #16
 800455a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800455e:	e042      	b.n	80045e6 <UART_SetConfig+0x2e6>
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	4a17      	ldr	r2, [pc, #92]	@ (80045c4 <UART_SetConfig+0x2c4>)
 8004566:	4293      	cmp	r3, r2
 8004568:	d13a      	bne.n	80045e0 <UART_SetConfig+0x2e0>
 800456a:	4b18      	ldr	r3, [pc, #96]	@ (80045cc <UART_SetConfig+0x2cc>)
 800456c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004570:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8004574:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004578:	d01a      	beq.n	80045b0 <UART_SetConfig+0x2b0>
 800457a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800457e:	d81b      	bhi.n	80045b8 <UART_SetConfig+0x2b8>
 8004580:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004584:	d00c      	beq.n	80045a0 <UART_SetConfig+0x2a0>
 8004586:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800458a:	d815      	bhi.n	80045b8 <UART_SetConfig+0x2b8>
 800458c:	2b00      	cmp	r3, #0
 800458e:	d003      	beq.n	8004598 <UART_SetConfig+0x298>
 8004590:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004594:	d008      	beq.n	80045a8 <UART_SetConfig+0x2a8>
 8004596:	e00f      	b.n	80045b8 <UART_SetConfig+0x2b8>
 8004598:	2300      	movs	r3, #0
 800459a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800459e:	e022      	b.n	80045e6 <UART_SetConfig+0x2e6>
 80045a0:	2302      	movs	r3, #2
 80045a2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80045a6:	e01e      	b.n	80045e6 <UART_SetConfig+0x2e6>
 80045a8:	2304      	movs	r3, #4
 80045aa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80045ae:	e01a      	b.n	80045e6 <UART_SetConfig+0x2e6>
 80045b0:	2308      	movs	r3, #8
 80045b2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80045b6:	e016      	b.n	80045e6 <UART_SetConfig+0x2e6>
 80045b8:	2310      	movs	r3, #16
 80045ba:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80045be:	e012      	b.n	80045e6 <UART_SetConfig+0x2e6>
 80045c0:	efff69f3 	.word	0xefff69f3
 80045c4:	40008000 	.word	0x40008000
 80045c8:	40013800 	.word	0x40013800
 80045cc:	40021000 	.word	0x40021000
 80045d0:	40004400 	.word	0x40004400
 80045d4:	40004800 	.word	0x40004800
 80045d8:	40004c00 	.word	0x40004c00
 80045dc:	40005000 	.word	0x40005000
 80045e0:	2310      	movs	r3, #16
 80045e2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	4a9f      	ldr	r2, [pc, #636]	@ (8004868 <UART_SetConfig+0x568>)
 80045ec:	4293      	cmp	r3, r2
 80045ee:	d17a      	bne.n	80046e6 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80045f0:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80045f4:	2b08      	cmp	r3, #8
 80045f6:	d824      	bhi.n	8004642 <UART_SetConfig+0x342>
 80045f8:	a201      	add	r2, pc, #4	@ (adr r2, 8004600 <UART_SetConfig+0x300>)
 80045fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045fe:	bf00      	nop
 8004600:	08004625 	.word	0x08004625
 8004604:	08004643 	.word	0x08004643
 8004608:	0800462d 	.word	0x0800462d
 800460c:	08004643 	.word	0x08004643
 8004610:	08004633 	.word	0x08004633
 8004614:	08004643 	.word	0x08004643
 8004618:	08004643 	.word	0x08004643
 800461c:	08004643 	.word	0x08004643
 8004620:	0800463b 	.word	0x0800463b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004624:	f7fe fd2c 	bl	8003080 <HAL_RCC_GetPCLK1Freq>
 8004628:	61f8      	str	r0, [r7, #28]
        break;
 800462a:	e010      	b.n	800464e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800462c:	4b8f      	ldr	r3, [pc, #572]	@ (800486c <UART_SetConfig+0x56c>)
 800462e:	61fb      	str	r3, [r7, #28]
        break;
 8004630:	e00d      	b.n	800464e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004632:	f7fe fc8d 	bl	8002f50 <HAL_RCC_GetSysClockFreq>
 8004636:	61f8      	str	r0, [r7, #28]
        break;
 8004638:	e009      	b.n	800464e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800463a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800463e:	61fb      	str	r3, [r7, #28]
        break;
 8004640:	e005      	b.n	800464e <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8004642:	2300      	movs	r3, #0
 8004644:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004646:	2301      	movs	r3, #1
 8004648:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 800464c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800464e:	69fb      	ldr	r3, [r7, #28]
 8004650:	2b00      	cmp	r3, #0
 8004652:	f000 80fb 	beq.w	800484c <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	685a      	ldr	r2, [r3, #4]
 800465a:	4613      	mov	r3, r2
 800465c:	005b      	lsls	r3, r3, #1
 800465e:	4413      	add	r3, r2
 8004660:	69fa      	ldr	r2, [r7, #28]
 8004662:	429a      	cmp	r2, r3
 8004664:	d305      	bcc.n	8004672 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	685b      	ldr	r3, [r3, #4]
 800466a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800466c:	69fa      	ldr	r2, [r7, #28]
 800466e:	429a      	cmp	r2, r3
 8004670:	d903      	bls.n	800467a <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8004672:	2301      	movs	r3, #1
 8004674:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8004678:	e0e8      	b.n	800484c <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800467a:	69fb      	ldr	r3, [r7, #28]
 800467c:	2200      	movs	r2, #0
 800467e:	461c      	mov	r4, r3
 8004680:	4615      	mov	r5, r2
 8004682:	f04f 0200 	mov.w	r2, #0
 8004686:	f04f 0300 	mov.w	r3, #0
 800468a:	022b      	lsls	r3, r5, #8
 800468c:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8004690:	0222      	lsls	r2, r4, #8
 8004692:	68f9      	ldr	r1, [r7, #12]
 8004694:	6849      	ldr	r1, [r1, #4]
 8004696:	0849      	lsrs	r1, r1, #1
 8004698:	2000      	movs	r0, #0
 800469a:	4688      	mov	r8, r1
 800469c:	4681      	mov	r9, r0
 800469e:	eb12 0a08 	adds.w	sl, r2, r8
 80046a2:	eb43 0b09 	adc.w	fp, r3, r9
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	685b      	ldr	r3, [r3, #4]
 80046aa:	2200      	movs	r2, #0
 80046ac:	603b      	str	r3, [r7, #0]
 80046ae:	607a      	str	r2, [r7, #4]
 80046b0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80046b4:	4650      	mov	r0, sl
 80046b6:	4659      	mov	r1, fp
 80046b8:	f7fb fd8a 	bl	80001d0 <__aeabi_uldivmod>
 80046bc:	4602      	mov	r2, r0
 80046be:	460b      	mov	r3, r1
 80046c0:	4613      	mov	r3, r2
 80046c2:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80046c4:	69bb      	ldr	r3, [r7, #24]
 80046c6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80046ca:	d308      	bcc.n	80046de <UART_SetConfig+0x3de>
 80046cc:	69bb      	ldr	r3, [r7, #24]
 80046ce:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80046d2:	d204      	bcs.n	80046de <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	69ba      	ldr	r2, [r7, #24]
 80046da:	60da      	str	r2, [r3, #12]
 80046dc:	e0b6      	b.n	800484c <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 80046de:	2301      	movs	r3, #1
 80046e0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80046e4:	e0b2      	b.n	800484c <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	69db      	ldr	r3, [r3, #28]
 80046ea:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80046ee:	d15e      	bne.n	80047ae <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 80046f0:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80046f4:	2b08      	cmp	r3, #8
 80046f6:	d828      	bhi.n	800474a <UART_SetConfig+0x44a>
 80046f8:	a201      	add	r2, pc, #4	@ (adr r2, 8004700 <UART_SetConfig+0x400>)
 80046fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046fe:	bf00      	nop
 8004700:	08004725 	.word	0x08004725
 8004704:	0800472d 	.word	0x0800472d
 8004708:	08004735 	.word	0x08004735
 800470c:	0800474b 	.word	0x0800474b
 8004710:	0800473b 	.word	0x0800473b
 8004714:	0800474b 	.word	0x0800474b
 8004718:	0800474b 	.word	0x0800474b
 800471c:	0800474b 	.word	0x0800474b
 8004720:	08004743 	.word	0x08004743
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004724:	f7fe fcac 	bl	8003080 <HAL_RCC_GetPCLK1Freq>
 8004728:	61f8      	str	r0, [r7, #28]
        break;
 800472a:	e014      	b.n	8004756 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800472c:	f7fe fcbe 	bl	80030ac <HAL_RCC_GetPCLK2Freq>
 8004730:	61f8      	str	r0, [r7, #28]
        break;
 8004732:	e010      	b.n	8004756 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004734:	4b4d      	ldr	r3, [pc, #308]	@ (800486c <UART_SetConfig+0x56c>)
 8004736:	61fb      	str	r3, [r7, #28]
        break;
 8004738:	e00d      	b.n	8004756 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800473a:	f7fe fc09 	bl	8002f50 <HAL_RCC_GetSysClockFreq>
 800473e:	61f8      	str	r0, [r7, #28]
        break;
 8004740:	e009      	b.n	8004756 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004742:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004746:	61fb      	str	r3, [r7, #28]
        break;
 8004748:	e005      	b.n	8004756 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 800474a:	2300      	movs	r3, #0
 800474c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800474e:	2301      	movs	r3, #1
 8004750:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8004754:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004756:	69fb      	ldr	r3, [r7, #28]
 8004758:	2b00      	cmp	r3, #0
 800475a:	d077      	beq.n	800484c <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800475c:	69fb      	ldr	r3, [r7, #28]
 800475e:	005a      	lsls	r2, r3, #1
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	685b      	ldr	r3, [r3, #4]
 8004764:	085b      	lsrs	r3, r3, #1
 8004766:	441a      	add	r2, r3
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	685b      	ldr	r3, [r3, #4]
 800476c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004770:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004772:	69bb      	ldr	r3, [r7, #24]
 8004774:	2b0f      	cmp	r3, #15
 8004776:	d916      	bls.n	80047a6 <UART_SetConfig+0x4a6>
 8004778:	69bb      	ldr	r3, [r7, #24]
 800477a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800477e:	d212      	bcs.n	80047a6 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004780:	69bb      	ldr	r3, [r7, #24]
 8004782:	b29b      	uxth	r3, r3
 8004784:	f023 030f 	bic.w	r3, r3, #15
 8004788:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800478a:	69bb      	ldr	r3, [r7, #24]
 800478c:	085b      	lsrs	r3, r3, #1
 800478e:	b29b      	uxth	r3, r3
 8004790:	f003 0307 	and.w	r3, r3, #7
 8004794:	b29a      	uxth	r2, r3
 8004796:	8afb      	ldrh	r3, [r7, #22]
 8004798:	4313      	orrs	r3, r2
 800479a:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	8afa      	ldrh	r2, [r7, #22]
 80047a2:	60da      	str	r2, [r3, #12]
 80047a4:	e052      	b.n	800484c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80047a6:	2301      	movs	r3, #1
 80047a8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80047ac:	e04e      	b.n	800484c <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80047ae:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80047b2:	2b08      	cmp	r3, #8
 80047b4:	d827      	bhi.n	8004806 <UART_SetConfig+0x506>
 80047b6:	a201      	add	r2, pc, #4	@ (adr r2, 80047bc <UART_SetConfig+0x4bc>)
 80047b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047bc:	080047e1 	.word	0x080047e1
 80047c0:	080047e9 	.word	0x080047e9
 80047c4:	080047f1 	.word	0x080047f1
 80047c8:	08004807 	.word	0x08004807
 80047cc:	080047f7 	.word	0x080047f7
 80047d0:	08004807 	.word	0x08004807
 80047d4:	08004807 	.word	0x08004807
 80047d8:	08004807 	.word	0x08004807
 80047dc:	080047ff 	.word	0x080047ff
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80047e0:	f7fe fc4e 	bl	8003080 <HAL_RCC_GetPCLK1Freq>
 80047e4:	61f8      	str	r0, [r7, #28]
        break;
 80047e6:	e014      	b.n	8004812 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80047e8:	f7fe fc60 	bl	80030ac <HAL_RCC_GetPCLK2Freq>
 80047ec:	61f8      	str	r0, [r7, #28]
        break;
 80047ee:	e010      	b.n	8004812 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80047f0:	4b1e      	ldr	r3, [pc, #120]	@ (800486c <UART_SetConfig+0x56c>)
 80047f2:	61fb      	str	r3, [r7, #28]
        break;
 80047f4:	e00d      	b.n	8004812 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80047f6:	f7fe fbab 	bl	8002f50 <HAL_RCC_GetSysClockFreq>
 80047fa:	61f8      	str	r0, [r7, #28]
        break;
 80047fc:	e009      	b.n	8004812 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80047fe:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004802:	61fb      	str	r3, [r7, #28]
        break;
 8004804:	e005      	b.n	8004812 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8004806:	2300      	movs	r3, #0
 8004808:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800480a:	2301      	movs	r3, #1
 800480c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8004810:	bf00      	nop
    }

    if (pclk != 0U)
 8004812:	69fb      	ldr	r3, [r7, #28]
 8004814:	2b00      	cmp	r3, #0
 8004816:	d019      	beq.n	800484c <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	685b      	ldr	r3, [r3, #4]
 800481c:	085a      	lsrs	r2, r3, #1
 800481e:	69fb      	ldr	r3, [r7, #28]
 8004820:	441a      	add	r2, r3
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	685b      	ldr	r3, [r3, #4]
 8004826:	fbb2 f3f3 	udiv	r3, r2, r3
 800482a:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800482c:	69bb      	ldr	r3, [r7, #24]
 800482e:	2b0f      	cmp	r3, #15
 8004830:	d909      	bls.n	8004846 <UART_SetConfig+0x546>
 8004832:	69bb      	ldr	r3, [r7, #24]
 8004834:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004838:	d205      	bcs.n	8004846 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800483a:	69bb      	ldr	r3, [r7, #24]
 800483c:	b29a      	uxth	r2, r3
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	60da      	str	r2, [r3, #12]
 8004844:	e002      	b.n	800484c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8004846:	2301      	movs	r3, #1
 8004848:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	2200      	movs	r2, #0
 8004850:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	2200      	movs	r2, #0
 8004856:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8004858:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 800485c:	4618      	mov	r0, r3
 800485e:	3728      	adds	r7, #40	@ 0x28
 8004860:	46bd      	mov	sp, r7
 8004862:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004866:	bf00      	nop
 8004868:	40008000 	.word	0x40008000
 800486c:	00f42400 	.word	0x00f42400

08004870 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004870:	b480      	push	{r7}
 8004872:	b083      	sub	sp, #12
 8004874:	af00      	add	r7, sp, #0
 8004876:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800487c:	f003 0308 	and.w	r3, r3, #8
 8004880:	2b00      	cmp	r3, #0
 8004882:	d00a      	beq.n	800489a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	685b      	ldr	r3, [r3, #4]
 800488a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	430a      	orrs	r2, r1
 8004898:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800489e:	f003 0301 	and.w	r3, r3, #1
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d00a      	beq.n	80048bc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	685b      	ldr	r3, [r3, #4]
 80048ac:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	430a      	orrs	r2, r1
 80048ba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048c0:	f003 0302 	and.w	r3, r3, #2
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d00a      	beq.n	80048de <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	685b      	ldr	r3, [r3, #4]
 80048ce:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	430a      	orrs	r2, r1
 80048dc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048e2:	f003 0304 	and.w	r3, r3, #4
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d00a      	beq.n	8004900 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	685b      	ldr	r3, [r3, #4]
 80048f0:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	430a      	orrs	r2, r1
 80048fe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004904:	f003 0310 	and.w	r3, r3, #16
 8004908:	2b00      	cmp	r3, #0
 800490a:	d00a      	beq.n	8004922 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	689b      	ldr	r3, [r3, #8]
 8004912:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	430a      	orrs	r2, r1
 8004920:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004926:	f003 0320 	and.w	r3, r3, #32
 800492a:	2b00      	cmp	r3, #0
 800492c:	d00a      	beq.n	8004944 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	689b      	ldr	r3, [r3, #8]
 8004934:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	430a      	orrs	r2, r1
 8004942:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004948:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800494c:	2b00      	cmp	r3, #0
 800494e:	d01a      	beq.n	8004986 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	685b      	ldr	r3, [r3, #4]
 8004956:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	430a      	orrs	r2, r1
 8004964:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800496a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800496e:	d10a      	bne.n	8004986 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	685b      	ldr	r3, [r3, #4]
 8004976:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	430a      	orrs	r2, r1
 8004984:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800498a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800498e:	2b00      	cmp	r3, #0
 8004990:	d00a      	beq.n	80049a8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	685b      	ldr	r3, [r3, #4]
 8004998:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	430a      	orrs	r2, r1
 80049a6:	605a      	str	r2, [r3, #4]
  }
}
 80049a8:	bf00      	nop
 80049aa:	370c      	adds	r7, #12
 80049ac:	46bd      	mov	sp, r7
 80049ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b2:	4770      	bx	lr

080049b4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80049b4:	b580      	push	{r7, lr}
 80049b6:	b098      	sub	sp, #96	@ 0x60
 80049b8:	af02      	add	r7, sp, #8
 80049ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	2200      	movs	r2, #0
 80049c0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80049c4:	f7fc fe30 	bl	8001628 <HAL_GetTick>
 80049c8:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	f003 0308 	and.w	r3, r3, #8
 80049d4:	2b08      	cmp	r3, #8
 80049d6:	d12e      	bne.n	8004a36 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80049d8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80049dc:	9300      	str	r3, [sp, #0]
 80049de:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80049e0:	2200      	movs	r2, #0
 80049e2:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80049e6:	6878      	ldr	r0, [r7, #4]
 80049e8:	f000 f88c 	bl	8004b04 <UART_WaitOnFlagUntilTimeout>
 80049ec:	4603      	mov	r3, r0
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d021      	beq.n	8004a36 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80049fa:	e853 3f00 	ldrex	r3, [r3]
 80049fe:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004a00:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004a02:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004a06:	653b      	str	r3, [r7, #80]	@ 0x50
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	461a      	mov	r2, r3
 8004a0e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004a10:	647b      	str	r3, [r7, #68]	@ 0x44
 8004a12:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a14:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004a16:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004a18:	e841 2300 	strex	r3, r2, [r1]
 8004a1c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004a1e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d1e6      	bne.n	80049f2 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	2220      	movs	r2, #32
 8004a28:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	2200      	movs	r2, #0
 8004a2e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004a32:	2303      	movs	r3, #3
 8004a34:	e062      	b.n	8004afc <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	f003 0304 	and.w	r3, r3, #4
 8004a40:	2b04      	cmp	r3, #4
 8004a42:	d149      	bne.n	8004ad8 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004a44:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004a48:	9300      	str	r3, [sp, #0]
 8004a4a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004a4c:	2200      	movs	r2, #0
 8004a4e:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8004a52:	6878      	ldr	r0, [r7, #4]
 8004a54:	f000 f856 	bl	8004b04 <UART_WaitOnFlagUntilTimeout>
 8004a58:	4603      	mov	r3, r0
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d03c      	beq.n	8004ad8 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a66:	e853 3f00 	ldrex	r3, [r3]
 8004a6a:	623b      	str	r3, [r7, #32]
   return(result);
 8004a6c:	6a3b      	ldr	r3, [r7, #32]
 8004a6e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004a72:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	461a      	mov	r2, r3
 8004a7a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004a7c:	633b      	str	r3, [r7, #48]	@ 0x30
 8004a7e:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a80:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004a82:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004a84:	e841 2300 	strex	r3, r2, [r1]
 8004a88:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004a8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d1e6      	bne.n	8004a5e <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	3308      	adds	r3, #8
 8004a96:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a98:	693b      	ldr	r3, [r7, #16]
 8004a9a:	e853 3f00 	ldrex	r3, [r3]
 8004a9e:	60fb      	str	r3, [r7, #12]
   return(result);
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	f023 0301 	bic.w	r3, r3, #1
 8004aa6:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	3308      	adds	r3, #8
 8004aae:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004ab0:	61fa      	str	r2, [r7, #28]
 8004ab2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ab4:	69b9      	ldr	r1, [r7, #24]
 8004ab6:	69fa      	ldr	r2, [r7, #28]
 8004ab8:	e841 2300 	strex	r3, r2, [r1]
 8004abc:	617b      	str	r3, [r7, #20]
   return(result);
 8004abe:	697b      	ldr	r3, [r7, #20]
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d1e5      	bne.n	8004a90 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	2220      	movs	r2, #32
 8004ac8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	2200      	movs	r2, #0
 8004ad0:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004ad4:	2303      	movs	r3, #3
 8004ad6:	e011      	b.n	8004afc <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	2220      	movs	r2, #32
 8004adc:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	2220      	movs	r2, #32
 8004ae2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	2200      	movs	r2, #0
 8004aea:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	2200      	movs	r2, #0
 8004af0:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	2200      	movs	r2, #0
 8004af6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8004afa:	2300      	movs	r3, #0
}
 8004afc:	4618      	mov	r0, r3
 8004afe:	3758      	adds	r7, #88	@ 0x58
 8004b00:	46bd      	mov	sp, r7
 8004b02:	bd80      	pop	{r7, pc}

08004b04 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004b04:	b580      	push	{r7, lr}
 8004b06:	b084      	sub	sp, #16
 8004b08:	af00      	add	r7, sp, #0
 8004b0a:	60f8      	str	r0, [r7, #12]
 8004b0c:	60b9      	str	r1, [r7, #8]
 8004b0e:	603b      	str	r3, [r7, #0]
 8004b10:	4613      	mov	r3, r2
 8004b12:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004b14:	e04f      	b.n	8004bb6 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004b16:	69bb      	ldr	r3, [r7, #24]
 8004b18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b1c:	d04b      	beq.n	8004bb6 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004b1e:	f7fc fd83 	bl	8001628 <HAL_GetTick>
 8004b22:	4602      	mov	r2, r0
 8004b24:	683b      	ldr	r3, [r7, #0]
 8004b26:	1ad3      	subs	r3, r2, r3
 8004b28:	69ba      	ldr	r2, [r7, #24]
 8004b2a:	429a      	cmp	r2, r3
 8004b2c:	d302      	bcc.n	8004b34 <UART_WaitOnFlagUntilTimeout+0x30>
 8004b2e:	69bb      	ldr	r3, [r7, #24]
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d101      	bne.n	8004b38 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004b34:	2303      	movs	r3, #3
 8004b36:	e04e      	b.n	8004bd6 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	f003 0304 	and.w	r3, r3, #4
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d037      	beq.n	8004bb6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8004b46:	68bb      	ldr	r3, [r7, #8]
 8004b48:	2b80      	cmp	r3, #128	@ 0x80
 8004b4a:	d034      	beq.n	8004bb6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8004b4c:	68bb      	ldr	r3, [r7, #8]
 8004b4e:	2b40      	cmp	r3, #64	@ 0x40
 8004b50:	d031      	beq.n	8004bb6 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	69db      	ldr	r3, [r3, #28]
 8004b58:	f003 0308 	and.w	r3, r3, #8
 8004b5c:	2b08      	cmp	r3, #8
 8004b5e:	d110      	bne.n	8004b82 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	2208      	movs	r2, #8
 8004b66:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004b68:	68f8      	ldr	r0, [r7, #12]
 8004b6a:	f000 f838 	bl	8004bde <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	2208      	movs	r2, #8
 8004b72:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	2200      	movs	r2, #0
 8004b7a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8004b7e:	2301      	movs	r3, #1
 8004b80:	e029      	b.n	8004bd6 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	69db      	ldr	r3, [r3, #28]
 8004b88:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004b8c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004b90:	d111      	bne.n	8004bb6 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004b9a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004b9c:	68f8      	ldr	r0, [r7, #12]
 8004b9e:	f000 f81e 	bl	8004bde <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	2220      	movs	r2, #32
 8004ba6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	2200      	movs	r2, #0
 8004bae:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8004bb2:	2303      	movs	r3, #3
 8004bb4:	e00f      	b.n	8004bd6 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	69da      	ldr	r2, [r3, #28]
 8004bbc:	68bb      	ldr	r3, [r7, #8]
 8004bbe:	4013      	ands	r3, r2
 8004bc0:	68ba      	ldr	r2, [r7, #8]
 8004bc2:	429a      	cmp	r2, r3
 8004bc4:	bf0c      	ite	eq
 8004bc6:	2301      	moveq	r3, #1
 8004bc8:	2300      	movne	r3, #0
 8004bca:	b2db      	uxtb	r3, r3
 8004bcc:	461a      	mov	r2, r3
 8004bce:	79fb      	ldrb	r3, [r7, #7]
 8004bd0:	429a      	cmp	r2, r3
 8004bd2:	d0a0      	beq.n	8004b16 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004bd4:	2300      	movs	r3, #0
}
 8004bd6:	4618      	mov	r0, r3
 8004bd8:	3710      	adds	r7, #16
 8004bda:	46bd      	mov	sp, r7
 8004bdc:	bd80      	pop	{r7, pc}

08004bde <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004bde:	b480      	push	{r7}
 8004be0:	b095      	sub	sp, #84	@ 0x54
 8004be2:	af00      	add	r7, sp, #0
 8004be4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004bee:	e853 3f00 	ldrex	r3, [r3]
 8004bf2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004bf4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004bf6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004bfa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	461a      	mov	r2, r3
 8004c02:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004c04:	643b      	str	r3, [r7, #64]	@ 0x40
 8004c06:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c08:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004c0a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004c0c:	e841 2300 	strex	r3, r2, [r1]
 8004c10:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004c12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d1e6      	bne.n	8004be6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	3308      	adds	r3, #8
 8004c1e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c20:	6a3b      	ldr	r3, [r7, #32]
 8004c22:	e853 3f00 	ldrex	r3, [r3]
 8004c26:	61fb      	str	r3, [r7, #28]
   return(result);
 8004c28:	69fb      	ldr	r3, [r7, #28]
 8004c2a:	f023 0301 	bic.w	r3, r3, #1
 8004c2e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	3308      	adds	r3, #8
 8004c36:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004c38:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004c3a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c3c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004c3e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004c40:	e841 2300 	strex	r3, r2, [r1]
 8004c44:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004c46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d1e5      	bne.n	8004c18 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004c50:	2b01      	cmp	r3, #1
 8004c52:	d118      	bne.n	8004c86 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	e853 3f00 	ldrex	r3, [r3]
 8004c60:	60bb      	str	r3, [r7, #8]
   return(result);
 8004c62:	68bb      	ldr	r3, [r7, #8]
 8004c64:	f023 0310 	bic.w	r3, r3, #16
 8004c68:	647b      	str	r3, [r7, #68]	@ 0x44
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	461a      	mov	r2, r3
 8004c70:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004c72:	61bb      	str	r3, [r7, #24]
 8004c74:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c76:	6979      	ldr	r1, [r7, #20]
 8004c78:	69ba      	ldr	r2, [r7, #24]
 8004c7a:	e841 2300 	strex	r3, r2, [r1]
 8004c7e:	613b      	str	r3, [r7, #16]
   return(result);
 8004c80:	693b      	ldr	r3, [r7, #16]
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d1e6      	bne.n	8004c54 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	2220      	movs	r2, #32
 8004c8a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	2200      	movs	r2, #0
 8004c92:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	2200      	movs	r2, #0
 8004c98:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8004c9a:	bf00      	nop
 8004c9c:	3754      	adds	r7, #84	@ 0x54
 8004c9e:	46bd      	mov	sp, r7
 8004ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca4:	4770      	bx	lr

08004ca6 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004ca6:	b084      	sub	sp, #16
 8004ca8:	b580      	push	{r7, lr}
 8004caa:	b084      	sub	sp, #16
 8004cac:	af00      	add	r7, sp, #0
 8004cae:	6078      	str	r0, [r7, #4]
 8004cb0:	f107 001c 	add.w	r0, r7, #28
 8004cb4:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	68db      	ldr	r3, [r3, #12]
 8004cbc:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 8004cc4:	6878      	ldr	r0, [r7, #4]
 8004cc6:	f000 fa69 	bl	800519c <USB_CoreReset>
 8004cca:	4603      	mov	r3, r0
 8004ccc:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 8004cce:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d106      	bne.n	8004ce4 <USB_CoreInit+0x3e>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004cda:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	639a      	str	r2, [r3, #56]	@ 0x38
 8004ce2:	e005      	b.n	8004cf0 <USB_CoreInit+0x4a>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ce8:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return ret;
 8004cf0:	7bfb      	ldrb	r3, [r7, #15]
}
 8004cf2:	4618      	mov	r0, r3
 8004cf4:	3710      	adds	r7, #16
 8004cf6:	46bd      	mov	sp, r7
 8004cf8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004cfc:	b004      	add	sp, #16
 8004cfe:	4770      	bx	lr

08004d00 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004d00:	b480      	push	{r7}
 8004d02:	b083      	sub	sp, #12
 8004d04:	af00      	add	r7, sp, #0
 8004d06:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	689b      	ldr	r3, [r3, #8]
 8004d0c:	f023 0201 	bic.w	r2, r3, #1
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004d14:	2300      	movs	r3, #0
}
 8004d16:	4618      	mov	r0, r3
 8004d18:	370c      	adds	r7, #12
 8004d1a:	46bd      	mov	sp, r7
 8004d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d20:	4770      	bx	lr

08004d22 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 8004d22:	b580      	push	{r7, lr}
 8004d24:	b084      	sub	sp, #16
 8004d26:	af00      	add	r7, sp, #0
 8004d28:	6078      	str	r0, [r7, #4]
 8004d2a:	460b      	mov	r3, r1
 8004d2c:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004d2e:	2300      	movs	r3, #0
 8004d30:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	68db      	ldr	r3, [r3, #12]
 8004d36:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004d3e:	78fb      	ldrb	r3, [r7, #3]
 8004d40:	2b01      	cmp	r3, #1
 8004d42:	d115      	bne.n	8004d70 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	68db      	ldr	r3, [r3, #12]
 8004d48:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8004d50:	200a      	movs	r0, #10
 8004d52:	f7fc fc75 	bl	8001640 <HAL_Delay>
      ms += 10U;
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	330a      	adds	r3, #10
 8004d5a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8004d5c:	6878      	ldr	r0, [r7, #4]
 8004d5e:	f000 fa0f 	bl	8005180 <USB_GetMode>
 8004d62:	4603      	mov	r3, r0
 8004d64:	2b01      	cmp	r3, #1
 8004d66:	d01e      	beq.n	8004da6 <USB_SetCurrentMode+0x84>
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	2bc7      	cmp	r3, #199	@ 0xc7
 8004d6c:	d9f0      	bls.n	8004d50 <USB_SetCurrentMode+0x2e>
 8004d6e:	e01a      	b.n	8004da6 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004d70:	78fb      	ldrb	r3, [r7, #3]
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d115      	bne.n	8004da2 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	68db      	ldr	r3, [r3, #12]
 8004d7a:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8004d82:	200a      	movs	r0, #10
 8004d84:	f7fc fc5c 	bl	8001640 <HAL_Delay>
      ms += 10U;
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	330a      	adds	r3, #10
 8004d8c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8004d8e:	6878      	ldr	r0, [r7, #4]
 8004d90:	f000 f9f6 	bl	8005180 <USB_GetMode>
 8004d94:	4603      	mov	r3, r0
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d005      	beq.n	8004da6 <USB_SetCurrentMode+0x84>
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	2bc7      	cmp	r3, #199	@ 0xc7
 8004d9e:	d9f0      	bls.n	8004d82 <USB_SetCurrentMode+0x60>
 8004da0:	e001      	b.n	8004da6 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004da2:	2301      	movs	r3, #1
 8004da4:	e005      	b.n	8004db2 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	2bc8      	cmp	r3, #200	@ 0xc8
 8004daa:	d101      	bne.n	8004db0 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8004dac:	2301      	movs	r3, #1
 8004dae:	e000      	b.n	8004db2 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8004db0:	2300      	movs	r3, #0
}
 8004db2:	4618      	mov	r0, r3
 8004db4:	3710      	adds	r7, #16
 8004db6:	46bd      	mov	sp, r7
 8004db8:	bd80      	pop	{r7, pc}
	...

08004dbc <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004dbc:	b084      	sub	sp, #16
 8004dbe:	b580      	push	{r7, lr}
 8004dc0:	b086      	sub	sp, #24
 8004dc2:	af00      	add	r7, sp, #0
 8004dc4:	6078      	str	r0, [r7, #4]
 8004dc6:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8004dca:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004dce:	2300      	movs	r3, #0
 8004dd0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8004dd6:	2300      	movs	r3, #0
 8004dd8:	613b      	str	r3, [r7, #16]
 8004dda:	e009      	b.n	8004df0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004ddc:	687a      	ldr	r2, [r7, #4]
 8004dde:	693b      	ldr	r3, [r7, #16]
 8004de0:	3340      	adds	r3, #64	@ 0x40
 8004de2:	009b      	lsls	r3, r3, #2
 8004de4:	4413      	add	r3, r2
 8004de6:	2200      	movs	r2, #0
 8004de8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8004dea:	693b      	ldr	r3, [r7, #16]
 8004dec:	3301      	adds	r3, #1
 8004dee:	613b      	str	r3, [r7, #16]
 8004df0:	693b      	ldr	r3, [r7, #16]
 8004df2:	2b0e      	cmp	r3, #14
 8004df4:	d9f2      	bls.n	8004ddc <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004df6:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d11c      	bne.n	8004e38 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004e04:	685b      	ldr	r3, [r3, #4]
 8004e06:	68fa      	ldr	r2, [r7, #12]
 8004e08:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004e0c:	f043 0302 	orr.w	r3, r3, #2
 8004e10:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e16:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	601a      	str	r2, [r3, #0]
 8004e36:	e005      	b.n	8004e44 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e3c:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8004e4a:	461a      	mov	r2, r3
 8004e4c:	2300      	movs	r3, #0
 8004e4e:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004e50:	2103      	movs	r1, #3
 8004e52:	6878      	ldr	r0, [r7, #4]
 8004e54:	f000 f95a 	bl	800510c <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004e58:	2110      	movs	r1, #16
 8004e5a:	6878      	ldr	r0, [r7, #4]
 8004e5c:	f000 f8f6 	bl	800504c <USB_FlushTxFifo>
 8004e60:	4603      	mov	r3, r0
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d001      	beq.n	8004e6a <USB_DevInit+0xae>
  {
    ret = HAL_ERROR;
 8004e66:	2301      	movs	r3, #1
 8004e68:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004e6a:	6878      	ldr	r0, [r7, #4]
 8004e6c:	f000 f920 	bl	80050b0 <USB_FlushRxFifo>
 8004e70:	4603      	mov	r3, r0
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d001      	beq.n	8004e7a <USB_DevInit+0xbe>
  {
    ret = HAL_ERROR;
 8004e76:	2301      	movs	r3, #1
 8004e78:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004e80:	461a      	mov	r2, r3
 8004e82:	2300      	movs	r3, #0
 8004e84:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004e8c:	461a      	mov	r2, r3
 8004e8e:	2300      	movs	r3, #0
 8004e90:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004e98:	461a      	mov	r2, r3
 8004e9a:	2300      	movs	r3, #0
 8004e9c:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004e9e:	2300      	movs	r3, #0
 8004ea0:	613b      	str	r3, [r7, #16]
 8004ea2:	e043      	b.n	8004f2c <USB_DevInit+0x170>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004ea4:	693b      	ldr	r3, [r7, #16]
 8004ea6:	015a      	lsls	r2, r3, #5
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	4413      	add	r3, r2
 8004eac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004eb6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004eba:	d118      	bne.n	8004eee <USB_DevInit+0x132>
    {
      if (i == 0U)
 8004ebc:	693b      	ldr	r3, [r7, #16]
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d10a      	bne.n	8004ed8 <USB_DevInit+0x11c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004ec2:	693b      	ldr	r3, [r7, #16]
 8004ec4:	015a      	lsls	r2, r3, #5
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	4413      	add	r3, r2
 8004eca:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004ece:	461a      	mov	r2, r3
 8004ed0:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8004ed4:	6013      	str	r3, [r2, #0]
 8004ed6:	e013      	b.n	8004f00 <USB_DevInit+0x144>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004ed8:	693b      	ldr	r3, [r7, #16]
 8004eda:	015a      	lsls	r2, r3, #5
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	4413      	add	r3, r2
 8004ee0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004ee4:	461a      	mov	r2, r3
 8004ee6:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8004eea:	6013      	str	r3, [r2, #0]
 8004eec:	e008      	b.n	8004f00 <USB_DevInit+0x144>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004eee:	693b      	ldr	r3, [r7, #16]
 8004ef0:	015a      	lsls	r2, r3, #5
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	4413      	add	r3, r2
 8004ef6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004efa:	461a      	mov	r2, r3
 8004efc:	2300      	movs	r3, #0
 8004efe:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004f00:	693b      	ldr	r3, [r7, #16]
 8004f02:	015a      	lsls	r2, r3, #5
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	4413      	add	r3, r2
 8004f08:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004f0c:	461a      	mov	r2, r3
 8004f0e:	2300      	movs	r3, #0
 8004f10:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004f12:	693b      	ldr	r3, [r7, #16]
 8004f14:	015a      	lsls	r2, r3, #5
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	4413      	add	r3, r2
 8004f1a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004f1e:	461a      	mov	r2, r3
 8004f20:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8004f24:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004f26:	693b      	ldr	r3, [r7, #16]
 8004f28:	3301      	adds	r3, #1
 8004f2a:	613b      	str	r3, [r7, #16]
 8004f2c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8004f30:	461a      	mov	r2, r3
 8004f32:	693b      	ldr	r3, [r7, #16]
 8004f34:	4293      	cmp	r3, r2
 8004f36:	d3b5      	bcc.n	8004ea4 <USB_DevInit+0xe8>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004f38:	2300      	movs	r3, #0
 8004f3a:	613b      	str	r3, [r7, #16]
 8004f3c:	e043      	b.n	8004fc6 <USB_DevInit+0x20a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004f3e:	693b      	ldr	r3, [r7, #16]
 8004f40:	015a      	lsls	r2, r3, #5
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	4413      	add	r3, r2
 8004f46:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004f50:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004f54:	d118      	bne.n	8004f88 <USB_DevInit+0x1cc>
    {
      if (i == 0U)
 8004f56:	693b      	ldr	r3, [r7, #16]
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d10a      	bne.n	8004f72 <USB_DevInit+0x1b6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004f5c:	693b      	ldr	r3, [r7, #16]
 8004f5e:	015a      	lsls	r2, r3, #5
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	4413      	add	r3, r2
 8004f64:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004f68:	461a      	mov	r2, r3
 8004f6a:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8004f6e:	6013      	str	r3, [r2, #0]
 8004f70:	e013      	b.n	8004f9a <USB_DevInit+0x1de>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004f72:	693b      	ldr	r3, [r7, #16]
 8004f74:	015a      	lsls	r2, r3, #5
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	4413      	add	r3, r2
 8004f7a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004f7e:	461a      	mov	r2, r3
 8004f80:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8004f84:	6013      	str	r3, [r2, #0]
 8004f86:	e008      	b.n	8004f9a <USB_DevInit+0x1de>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004f88:	693b      	ldr	r3, [r7, #16]
 8004f8a:	015a      	lsls	r2, r3, #5
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	4413      	add	r3, r2
 8004f90:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004f94:	461a      	mov	r2, r3
 8004f96:	2300      	movs	r3, #0
 8004f98:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004f9a:	693b      	ldr	r3, [r7, #16]
 8004f9c:	015a      	lsls	r2, r3, #5
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	4413      	add	r3, r2
 8004fa2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004fa6:	461a      	mov	r2, r3
 8004fa8:	2300      	movs	r3, #0
 8004faa:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004fac:	693b      	ldr	r3, [r7, #16]
 8004fae:	015a      	lsls	r2, r3, #5
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	4413      	add	r3, r2
 8004fb4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004fb8:	461a      	mov	r2, r3
 8004fba:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8004fbe:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004fc0:	693b      	ldr	r3, [r7, #16]
 8004fc2:	3301      	adds	r3, #1
 8004fc4:	613b      	str	r3, [r7, #16]
 8004fc6:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8004fca:	461a      	mov	r2, r3
 8004fcc:	693b      	ldr	r3, [r7, #16]
 8004fce:	4293      	cmp	r3, r2
 8004fd0:	d3b5      	bcc.n	8004f3e <USB_DevInit+0x182>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004fd8:	691b      	ldr	r3, [r3, #16]
 8004fda:	68fa      	ldr	r2, [r7, #12]
 8004fdc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004fe0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004fe4:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	2200      	movs	r2, #0
 8004fea:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8004ff2:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	699b      	ldr	r3, [r3, #24]
 8004ff8:	f043 0210 	orr.w	r2, r3, #16
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	699a      	ldr	r2, [r3, #24]
 8005004:	4b10      	ldr	r3, [pc, #64]	@ (8005048 <USB_DevInit+0x28c>)
 8005006:	4313      	orrs	r3, r2
 8005008:	687a      	ldr	r2, [r7, #4]
 800500a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800500c:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8005010:	2b00      	cmp	r3, #0
 8005012:	d005      	beq.n	8005020 <USB_DevInit+0x264>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	699b      	ldr	r3, [r3, #24]
 8005018:	f043 0208 	orr.w	r2, r3, #8
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005020:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8005024:	2b01      	cmp	r3, #1
 8005026:	d107      	bne.n	8005038 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	699b      	ldr	r3, [r3, #24]
 800502c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005030:	f043 0304 	orr.w	r3, r3, #4
 8005034:	687a      	ldr	r2, [r7, #4]
 8005036:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005038:	7dfb      	ldrb	r3, [r7, #23]
}
 800503a:	4618      	mov	r0, r3
 800503c:	3718      	adds	r7, #24
 800503e:	46bd      	mov	sp, r7
 8005040:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005044:	b004      	add	sp, #16
 8005046:	4770      	bx	lr
 8005048:	803c3800 	.word	0x803c3800

0800504c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800504c:	b480      	push	{r7}
 800504e:	b085      	sub	sp, #20
 8005050:	af00      	add	r7, sp, #0
 8005052:	6078      	str	r0, [r7, #4]
 8005054:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005056:	2300      	movs	r3, #0
 8005058:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	3301      	adds	r3, #1
 800505e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005066:	d901      	bls.n	800506c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005068:	2303      	movs	r3, #3
 800506a:	e01b      	b.n	80050a4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	691b      	ldr	r3, [r3, #16]
 8005070:	2b00      	cmp	r3, #0
 8005072:	daf2      	bge.n	800505a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005074:	2300      	movs	r3, #0
 8005076:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005078:	683b      	ldr	r3, [r7, #0]
 800507a:	019b      	lsls	r3, r3, #6
 800507c:	f043 0220 	orr.w	r2, r3, #32
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	3301      	adds	r3, #1
 8005088:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005090:	d901      	bls.n	8005096 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8005092:	2303      	movs	r3, #3
 8005094:	e006      	b.n	80050a4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	691b      	ldr	r3, [r3, #16]
 800509a:	f003 0320 	and.w	r3, r3, #32
 800509e:	2b20      	cmp	r3, #32
 80050a0:	d0f0      	beq.n	8005084 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80050a2:	2300      	movs	r3, #0
}
 80050a4:	4618      	mov	r0, r3
 80050a6:	3714      	adds	r7, #20
 80050a8:	46bd      	mov	sp, r7
 80050aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ae:	4770      	bx	lr

080050b0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80050b0:	b480      	push	{r7}
 80050b2:	b085      	sub	sp, #20
 80050b4:	af00      	add	r7, sp, #0
 80050b6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80050b8:	2300      	movs	r3, #0
 80050ba:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	3301      	adds	r3, #1
 80050c0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80050c8:	d901      	bls.n	80050ce <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80050ca:	2303      	movs	r3, #3
 80050cc:	e018      	b.n	8005100 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	691b      	ldr	r3, [r3, #16]
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	daf2      	bge.n	80050bc <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80050d6:	2300      	movs	r3, #0
 80050d8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	2210      	movs	r2, #16
 80050de:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	3301      	adds	r3, #1
 80050e4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80050ec:	d901      	bls.n	80050f2 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80050ee:	2303      	movs	r3, #3
 80050f0:	e006      	b.n	8005100 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	691b      	ldr	r3, [r3, #16]
 80050f6:	f003 0310 	and.w	r3, r3, #16
 80050fa:	2b10      	cmp	r3, #16
 80050fc:	d0f0      	beq.n	80050e0 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80050fe:	2300      	movs	r3, #0
}
 8005100:	4618      	mov	r0, r3
 8005102:	3714      	adds	r7, #20
 8005104:	46bd      	mov	sp, r7
 8005106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800510a:	4770      	bx	lr

0800510c <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800510c:	b480      	push	{r7}
 800510e:	b085      	sub	sp, #20
 8005110:	af00      	add	r7, sp, #0
 8005112:	6078      	str	r0, [r7, #4]
 8005114:	460b      	mov	r3, r1
 8005116:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005122:	681a      	ldr	r2, [r3, #0]
 8005124:	78fb      	ldrb	r3, [r7, #3]
 8005126:	68f9      	ldr	r1, [r7, #12]
 8005128:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800512c:	4313      	orrs	r3, r2
 800512e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005130:	2300      	movs	r3, #0
}
 8005132:	4618      	mov	r0, r3
 8005134:	3714      	adds	r7, #20
 8005136:	46bd      	mov	sp, r7
 8005138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800513c:	4770      	bx	lr

0800513e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800513e:	b480      	push	{r7}
 8005140:	b085      	sub	sp, #20
 8005142:	af00      	add	r7, sp, #0
 8005144:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	68fa      	ldr	r2, [r7, #12]
 8005154:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8005158:	f023 0303 	bic.w	r3, r3, #3
 800515c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005164:	685b      	ldr	r3, [r3, #4]
 8005166:	68fa      	ldr	r2, [r7, #12]
 8005168:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800516c:	f043 0302 	orr.w	r3, r3, #2
 8005170:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005172:	2300      	movs	r3, #0
}
 8005174:	4618      	mov	r0, r3
 8005176:	3714      	adds	r7, #20
 8005178:	46bd      	mov	sp, r7
 800517a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800517e:	4770      	bx	lr

08005180 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8005180:	b480      	push	{r7}
 8005182:	b083      	sub	sp, #12
 8005184:	af00      	add	r7, sp, #0
 8005186:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	695b      	ldr	r3, [r3, #20]
 800518c:	f003 0301 	and.w	r3, r3, #1
}
 8005190:	4618      	mov	r0, r3
 8005192:	370c      	adds	r7, #12
 8005194:	46bd      	mov	sp, r7
 8005196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800519a:	4770      	bx	lr

0800519c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800519c:	b480      	push	{r7}
 800519e:	b085      	sub	sp, #20
 80051a0:	af00      	add	r7, sp, #0
 80051a2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80051a4:	2300      	movs	r3, #0
 80051a6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	3301      	adds	r3, #1
 80051ac:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80051b4:	d901      	bls.n	80051ba <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80051b6:	2303      	movs	r3, #3
 80051b8:	e01b      	b.n	80051f2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	691b      	ldr	r3, [r3, #16]
 80051be:	2b00      	cmp	r3, #0
 80051c0:	daf2      	bge.n	80051a8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80051c2:	2300      	movs	r3, #0
 80051c4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	691b      	ldr	r3, [r3, #16]
 80051ca:	f043 0201 	orr.w	r2, r3, #1
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	3301      	adds	r3, #1
 80051d6:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80051de:	d901      	bls.n	80051e4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80051e0:	2303      	movs	r3, #3
 80051e2:	e006      	b.n	80051f2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	691b      	ldr	r3, [r3, #16]
 80051e8:	f003 0301 	and.w	r3, r3, #1
 80051ec:	2b01      	cmp	r3, #1
 80051ee:	d0f0      	beq.n	80051d2 <USB_CoreReset+0x36>

  return HAL_OK;
 80051f0:	2300      	movs	r3, #0
}
 80051f2:	4618      	mov	r0, r3
 80051f4:	3714      	adds	r7, #20
 80051f6:	46bd      	mov	sp, r7
 80051f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051fc:	4770      	bx	lr
	...

08005200 <__NVIC_SetPriority>:
{
 8005200:	b480      	push	{r7}
 8005202:	b083      	sub	sp, #12
 8005204:	af00      	add	r7, sp, #0
 8005206:	4603      	mov	r3, r0
 8005208:	6039      	str	r1, [r7, #0]
 800520a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800520c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005210:	2b00      	cmp	r3, #0
 8005212:	db0a      	blt.n	800522a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005214:	683b      	ldr	r3, [r7, #0]
 8005216:	b2da      	uxtb	r2, r3
 8005218:	490c      	ldr	r1, [pc, #48]	@ (800524c <__NVIC_SetPriority+0x4c>)
 800521a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800521e:	0112      	lsls	r2, r2, #4
 8005220:	b2d2      	uxtb	r2, r2
 8005222:	440b      	add	r3, r1
 8005224:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8005228:	e00a      	b.n	8005240 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800522a:	683b      	ldr	r3, [r7, #0]
 800522c:	b2da      	uxtb	r2, r3
 800522e:	4908      	ldr	r1, [pc, #32]	@ (8005250 <__NVIC_SetPriority+0x50>)
 8005230:	79fb      	ldrb	r3, [r7, #7]
 8005232:	f003 030f 	and.w	r3, r3, #15
 8005236:	3b04      	subs	r3, #4
 8005238:	0112      	lsls	r2, r2, #4
 800523a:	b2d2      	uxtb	r2, r2
 800523c:	440b      	add	r3, r1
 800523e:	761a      	strb	r2, [r3, #24]
}
 8005240:	bf00      	nop
 8005242:	370c      	adds	r7, #12
 8005244:	46bd      	mov	sp, r7
 8005246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800524a:	4770      	bx	lr
 800524c:	e000e100 	.word	0xe000e100
 8005250:	e000ed00 	.word	0xe000ed00

08005254 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8005254:	b580      	push	{r7, lr}
 8005256:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8005258:	4b05      	ldr	r3, [pc, #20]	@ (8005270 <SysTick_Handler+0x1c>)
 800525a:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800525c:	f002 fe0c 	bl	8007e78 <xTaskGetSchedulerState>
 8005260:	4603      	mov	r3, r0
 8005262:	2b01      	cmp	r3, #1
 8005264:	d001      	beq.n	800526a <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8005266:	f000 feef 	bl	8006048 <xPortSysTickHandler>
  }
}
 800526a:	bf00      	nop
 800526c:	bd80      	pop	{r7, pc}
 800526e:	bf00      	nop
 8005270:	e000e010 	.word	0xe000e010

08005274 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8005274:	b580      	push	{r7, lr}
 8005276:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8005278:	2100      	movs	r1, #0
 800527a:	f06f 0004 	mvn.w	r0, #4
 800527e:	f7ff ffbf 	bl	8005200 <__NVIC_SetPriority>
#endif
}
 8005282:	bf00      	nop
 8005284:	bd80      	pop	{r7, pc}
	...

08005288 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8005288:	b480      	push	{r7}
 800528a:	b083      	sub	sp, #12
 800528c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800528e:	f3ef 8305 	mrs	r3, IPSR
 8005292:	603b      	str	r3, [r7, #0]
  return(result);
 8005294:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005296:	2b00      	cmp	r3, #0
 8005298:	d003      	beq.n	80052a2 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800529a:	f06f 0305 	mvn.w	r3, #5
 800529e:	607b      	str	r3, [r7, #4]
 80052a0:	e00c      	b.n	80052bc <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80052a2:	4b0a      	ldr	r3, [pc, #40]	@ (80052cc <osKernelInitialize+0x44>)
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d105      	bne.n	80052b6 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80052aa:	4b08      	ldr	r3, [pc, #32]	@ (80052cc <osKernelInitialize+0x44>)
 80052ac:	2201      	movs	r2, #1
 80052ae:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80052b0:	2300      	movs	r3, #0
 80052b2:	607b      	str	r3, [r7, #4]
 80052b4:	e002      	b.n	80052bc <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80052b6:	f04f 33ff 	mov.w	r3, #4294967295
 80052ba:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80052bc:	687b      	ldr	r3, [r7, #4]
}
 80052be:	4618      	mov	r0, r3
 80052c0:	370c      	adds	r7, #12
 80052c2:	46bd      	mov	sp, r7
 80052c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c8:	4770      	bx	lr
 80052ca:	bf00      	nop
 80052cc:	20001330 	.word	0x20001330

080052d0 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80052d0:	b580      	push	{r7, lr}
 80052d2:	b082      	sub	sp, #8
 80052d4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80052d6:	f3ef 8305 	mrs	r3, IPSR
 80052da:	603b      	str	r3, [r7, #0]
  return(result);
 80052dc:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d003      	beq.n	80052ea <osKernelStart+0x1a>
    stat = osErrorISR;
 80052e2:	f06f 0305 	mvn.w	r3, #5
 80052e6:	607b      	str	r3, [r7, #4]
 80052e8:	e010      	b.n	800530c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80052ea:	4b0b      	ldr	r3, [pc, #44]	@ (8005318 <osKernelStart+0x48>)
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	2b01      	cmp	r3, #1
 80052f0:	d109      	bne.n	8005306 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80052f2:	f7ff ffbf 	bl	8005274 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80052f6:	4b08      	ldr	r3, [pc, #32]	@ (8005318 <osKernelStart+0x48>)
 80052f8:	2202      	movs	r2, #2
 80052fa:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80052fc:	f002 f948 	bl	8007590 <vTaskStartScheduler>
      stat = osOK;
 8005300:	2300      	movs	r3, #0
 8005302:	607b      	str	r3, [r7, #4]
 8005304:	e002      	b.n	800530c <osKernelStart+0x3c>
    } else {
      stat = osError;
 8005306:	f04f 33ff 	mov.w	r3, #4294967295
 800530a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800530c:	687b      	ldr	r3, [r7, #4]
}
 800530e:	4618      	mov	r0, r3
 8005310:	3708      	adds	r7, #8
 8005312:	46bd      	mov	sp, r7
 8005314:	bd80      	pop	{r7, pc}
 8005316:	bf00      	nop
 8005318:	20001330 	.word	0x20001330

0800531c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800531c:	b580      	push	{r7, lr}
 800531e:	b08e      	sub	sp, #56	@ 0x38
 8005320:	af04      	add	r7, sp, #16
 8005322:	60f8      	str	r0, [r7, #12]
 8005324:	60b9      	str	r1, [r7, #8]
 8005326:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8005328:	2300      	movs	r3, #0
 800532a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800532c:	f3ef 8305 	mrs	r3, IPSR
 8005330:	617b      	str	r3, [r7, #20]
  return(result);
 8005332:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8005334:	2b00      	cmp	r3, #0
 8005336:	d17e      	bne.n	8005436 <osThreadNew+0x11a>
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	2b00      	cmp	r3, #0
 800533c:	d07b      	beq.n	8005436 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800533e:	2380      	movs	r3, #128	@ 0x80
 8005340:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8005342:	2318      	movs	r3, #24
 8005344:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8005346:	2300      	movs	r3, #0
 8005348:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 800534a:	f04f 33ff 	mov.w	r3, #4294967295
 800534e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	2b00      	cmp	r3, #0
 8005354:	d045      	beq.n	80053e2 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	2b00      	cmp	r3, #0
 800535c:	d002      	beq.n	8005364 <osThreadNew+0x48>
        name = attr->name;
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	699b      	ldr	r3, [r3, #24]
 8005368:	2b00      	cmp	r3, #0
 800536a:	d002      	beq.n	8005372 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	699b      	ldr	r3, [r3, #24]
 8005370:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8005372:	69fb      	ldr	r3, [r7, #28]
 8005374:	2b00      	cmp	r3, #0
 8005376:	d008      	beq.n	800538a <osThreadNew+0x6e>
 8005378:	69fb      	ldr	r3, [r7, #28]
 800537a:	2b38      	cmp	r3, #56	@ 0x38
 800537c:	d805      	bhi.n	800538a <osThreadNew+0x6e>
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	685b      	ldr	r3, [r3, #4]
 8005382:	f003 0301 	and.w	r3, r3, #1
 8005386:	2b00      	cmp	r3, #0
 8005388:	d001      	beq.n	800538e <osThreadNew+0x72>
        return (NULL);
 800538a:	2300      	movs	r3, #0
 800538c:	e054      	b.n	8005438 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	695b      	ldr	r3, [r3, #20]
 8005392:	2b00      	cmp	r3, #0
 8005394:	d003      	beq.n	800539e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	695b      	ldr	r3, [r3, #20]
 800539a:	089b      	lsrs	r3, r3, #2
 800539c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	689b      	ldr	r3, [r3, #8]
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d00e      	beq.n	80053c4 <osThreadNew+0xa8>
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	68db      	ldr	r3, [r3, #12]
 80053aa:	2ba7      	cmp	r3, #167	@ 0xa7
 80053ac:	d90a      	bls.n	80053c4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d006      	beq.n	80053c4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	695b      	ldr	r3, [r3, #20]
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d002      	beq.n	80053c4 <osThreadNew+0xa8>
        mem = 1;
 80053be:	2301      	movs	r3, #1
 80053c0:	61bb      	str	r3, [r7, #24]
 80053c2:	e010      	b.n	80053e6 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	689b      	ldr	r3, [r3, #8]
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d10c      	bne.n	80053e6 <osThreadNew+0xca>
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	68db      	ldr	r3, [r3, #12]
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d108      	bne.n	80053e6 <osThreadNew+0xca>
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	691b      	ldr	r3, [r3, #16]
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d104      	bne.n	80053e6 <osThreadNew+0xca>
          mem = 0;
 80053dc:	2300      	movs	r3, #0
 80053de:	61bb      	str	r3, [r7, #24]
 80053e0:	e001      	b.n	80053e6 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80053e2:	2300      	movs	r3, #0
 80053e4:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80053e6:	69bb      	ldr	r3, [r7, #24]
 80053e8:	2b01      	cmp	r3, #1
 80053ea:	d110      	bne.n	800540e <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80053f0:	687a      	ldr	r2, [r7, #4]
 80053f2:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80053f4:	9202      	str	r2, [sp, #8]
 80053f6:	9301      	str	r3, [sp, #4]
 80053f8:	69fb      	ldr	r3, [r7, #28]
 80053fa:	9300      	str	r3, [sp, #0]
 80053fc:	68bb      	ldr	r3, [r7, #8]
 80053fe:	6a3a      	ldr	r2, [r7, #32]
 8005400:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005402:	68f8      	ldr	r0, [r7, #12]
 8005404:	f001 fdc8 	bl	8006f98 <xTaskCreateStatic>
 8005408:	4603      	mov	r3, r0
 800540a:	613b      	str	r3, [r7, #16]
 800540c:	e013      	b.n	8005436 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800540e:	69bb      	ldr	r3, [r7, #24]
 8005410:	2b00      	cmp	r3, #0
 8005412:	d110      	bne.n	8005436 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8005414:	6a3b      	ldr	r3, [r7, #32]
 8005416:	b29a      	uxth	r2, r3
 8005418:	f107 0310 	add.w	r3, r7, #16
 800541c:	9301      	str	r3, [sp, #4]
 800541e:	69fb      	ldr	r3, [r7, #28]
 8005420:	9300      	str	r3, [sp, #0]
 8005422:	68bb      	ldr	r3, [r7, #8]
 8005424:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005426:	68f8      	ldr	r0, [r7, #12]
 8005428:	f001 fe16 	bl	8007058 <xTaskCreate>
 800542c:	4603      	mov	r3, r0
 800542e:	2b01      	cmp	r3, #1
 8005430:	d001      	beq.n	8005436 <osThreadNew+0x11a>
            hTask = NULL;
 8005432:	2300      	movs	r3, #0
 8005434:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8005436:	693b      	ldr	r3, [r7, #16]
}
 8005438:	4618      	mov	r0, r3
 800543a:	3728      	adds	r7, #40	@ 0x28
 800543c:	46bd      	mov	sp, r7
 800543e:	bd80      	pop	{r7, pc}

08005440 <osThreadSuspend>:

  return (stat);
}

#if (configUSE_OS2_THREAD_SUSPEND_RESUME == 1)
osStatus_t osThreadSuspend (osThreadId_t thread_id) {
 8005440:	b580      	push	{r7, lr}
 8005442:	b086      	sub	sp, #24
 8005444:	af00      	add	r7, sp, #0
 8005446:	6078      	str	r0, [r7, #4]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800544c:	f3ef 8305 	mrs	r3, IPSR
 8005450:	60fb      	str	r3, [r7, #12]
  return(result);
 8005452:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005454:	2b00      	cmp	r3, #0
 8005456:	d003      	beq.n	8005460 <osThreadSuspend+0x20>
    stat = osErrorISR;
 8005458:	f06f 0305 	mvn.w	r3, #5
 800545c:	617b      	str	r3, [r7, #20]
 800545e:	e00b      	b.n	8005478 <osThreadSuspend+0x38>
  }
  else if (hTask == NULL) {
 8005460:	693b      	ldr	r3, [r7, #16]
 8005462:	2b00      	cmp	r3, #0
 8005464:	d103      	bne.n	800546e <osThreadSuspend+0x2e>
    stat = osErrorParameter;
 8005466:	f06f 0303 	mvn.w	r3, #3
 800546a:	617b      	str	r3, [r7, #20]
 800546c:	e004      	b.n	8005478 <osThreadSuspend+0x38>
  }
  else {
    stat = osOK;
 800546e:	2300      	movs	r3, #0
 8005470:	617b      	str	r3, [r7, #20]
    vTaskSuspend (hTask);
 8005472:	6938      	ldr	r0, [r7, #16]
 8005474:	f001 ff84 	bl	8007380 <vTaskSuspend>
  }

  return (stat);
 8005478:	697b      	ldr	r3, [r7, #20]
}
 800547a:	4618      	mov	r0, r3
 800547c:	3718      	adds	r7, #24
 800547e:	46bd      	mov	sp, r7
 8005480:	bd80      	pop	{r7, pc}

08005482 <osThreadResume>:

osStatus_t osThreadResume (osThreadId_t thread_id) {
 8005482:	b580      	push	{r7, lr}
 8005484:	b086      	sub	sp, #24
 8005486:	af00      	add	r7, sp, #0
 8005488:	6078      	str	r0, [r7, #4]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800548e:	f3ef 8305 	mrs	r3, IPSR
 8005492:	60fb      	str	r3, [r7, #12]
  return(result);
 8005494:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005496:	2b00      	cmp	r3, #0
 8005498:	d003      	beq.n	80054a2 <osThreadResume+0x20>
    stat = osErrorISR;
 800549a:	f06f 0305 	mvn.w	r3, #5
 800549e:	617b      	str	r3, [r7, #20]
 80054a0:	e00b      	b.n	80054ba <osThreadResume+0x38>
  }
  else if (hTask == NULL) {
 80054a2:	693b      	ldr	r3, [r7, #16]
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d103      	bne.n	80054b0 <osThreadResume+0x2e>
    stat = osErrorParameter;
 80054a8:	f06f 0303 	mvn.w	r3, #3
 80054ac:	617b      	str	r3, [r7, #20]
 80054ae:	e004      	b.n	80054ba <osThreadResume+0x38>
  }
  else {
    stat = osOK;
 80054b0:	2300      	movs	r3, #0
 80054b2:	617b      	str	r3, [r7, #20]
    vTaskResume (hTask);
 80054b4:	6938      	ldr	r0, [r7, #16]
 80054b6:	f002 f80b 	bl	80074d0 <vTaskResume>
  }

  return (stat);
 80054ba:	697b      	ldr	r3, [r7, #20]
}
 80054bc:	4618      	mov	r0, r3
 80054be:	3718      	adds	r7, #24
 80054c0:	46bd      	mov	sp, r7
 80054c2:	bd80      	pop	{r7, pc}

080054c4 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80054c4:	b580      	push	{r7, lr}
 80054c6:	b084      	sub	sp, #16
 80054c8:	af00      	add	r7, sp, #0
 80054ca:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80054cc:	f3ef 8305 	mrs	r3, IPSR
 80054d0:	60bb      	str	r3, [r7, #8]
  return(result);
 80054d2:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d003      	beq.n	80054e0 <osDelay+0x1c>
    stat = osErrorISR;
 80054d8:	f06f 0305 	mvn.w	r3, #5
 80054dc:	60fb      	str	r3, [r7, #12]
 80054de:	e007      	b.n	80054f0 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80054e0:	2300      	movs	r3, #0
 80054e2:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d002      	beq.n	80054f0 <osDelay+0x2c>
      vTaskDelay(ticks);
 80054ea:	6878      	ldr	r0, [r7, #4]
 80054ec:	f001 ff12 	bl	8007314 <vTaskDelay>
    }
  }

  return (stat);
 80054f0:	68fb      	ldr	r3, [r7, #12]
}
 80054f2:	4618      	mov	r0, r3
 80054f4:	3710      	adds	r7, #16
 80054f6:	46bd      	mov	sp, r7
 80054f8:	bd80      	pop	{r7, pc}

080054fa <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 80054fa:	b580      	push	{r7, lr}
 80054fc:	b088      	sub	sp, #32
 80054fe:	af00      	add	r7, sp, #0
 8005500:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 8005502:	2300      	movs	r3, #0
 8005504:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005506:	f3ef 8305 	mrs	r3, IPSR
 800550a:	60bb      	str	r3, [r7, #8]
  return(result);
 800550c:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 800550e:	2b00      	cmp	r3, #0
 8005510:	d174      	bne.n	80055fc <osMutexNew+0x102>
    if (attr != NULL) {
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	2b00      	cmp	r3, #0
 8005516:	d003      	beq.n	8005520 <osMutexNew+0x26>
      type = attr->attr_bits;
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	685b      	ldr	r3, [r3, #4]
 800551c:	61bb      	str	r3, [r7, #24]
 800551e:	e001      	b.n	8005524 <osMutexNew+0x2a>
    } else {
      type = 0U;
 8005520:	2300      	movs	r3, #0
 8005522:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 8005524:	69bb      	ldr	r3, [r7, #24]
 8005526:	f003 0301 	and.w	r3, r3, #1
 800552a:	2b00      	cmp	r3, #0
 800552c:	d002      	beq.n	8005534 <osMutexNew+0x3a>
      rmtx = 1U;
 800552e:	2301      	movs	r3, #1
 8005530:	617b      	str	r3, [r7, #20]
 8005532:	e001      	b.n	8005538 <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 8005534:	2300      	movs	r3, #0
 8005536:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 8005538:	69bb      	ldr	r3, [r7, #24]
 800553a:	f003 0308 	and.w	r3, r3, #8
 800553e:	2b00      	cmp	r3, #0
 8005540:	d15c      	bne.n	80055fc <osMutexNew+0x102>
      mem = -1;
 8005542:	f04f 33ff 	mov.w	r3, #4294967295
 8005546:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	2b00      	cmp	r3, #0
 800554c:	d015      	beq.n	800557a <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	689b      	ldr	r3, [r3, #8]
 8005552:	2b00      	cmp	r3, #0
 8005554:	d006      	beq.n	8005564 <osMutexNew+0x6a>
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	68db      	ldr	r3, [r3, #12]
 800555a:	2b4f      	cmp	r3, #79	@ 0x4f
 800555c:	d902      	bls.n	8005564 <osMutexNew+0x6a>
          mem = 1;
 800555e:	2301      	movs	r3, #1
 8005560:	613b      	str	r3, [r7, #16]
 8005562:	e00c      	b.n	800557e <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	689b      	ldr	r3, [r3, #8]
 8005568:	2b00      	cmp	r3, #0
 800556a:	d108      	bne.n	800557e <osMutexNew+0x84>
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	68db      	ldr	r3, [r3, #12]
 8005570:	2b00      	cmp	r3, #0
 8005572:	d104      	bne.n	800557e <osMutexNew+0x84>
            mem = 0;
 8005574:	2300      	movs	r3, #0
 8005576:	613b      	str	r3, [r7, #16]
 8005578:	e001      	b.n	800557e <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 800557a:	2300      	movs	r3, #0
 800557c:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 800557e:	693b      	ldr	r3, [r7, #16]
 8005580:	2b01      	cmp	r3, #1
 8005582:	d112      	bne.n	80055aa <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 8005584:	697b      	ldr	r3, [r7, #20]
 8005586:	2b00      	cmp	r3, #0
 8005588:	d007      	beq.n	800559a <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	689b      	ldr	r3, [r3, #8]
 800558e:	4619      	mov	r1, r3
 8005590:	2004      	movs	r0, #4
 8005592:	f000 ff62 	bl	800645a <xQueueCreateMutexStatic>
 8005596:	61f8      	str	r0, [r7, #28]
 8005598:	e016      	b.n	80055c8 <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	689b      	ldr	r3, [r3, #8]
 800559e:	4619      	mov	r1, r3
 80055a0:	2001      	movs	r0, #1
 80055a2:	f000 ff5a 	bl	800645a <xQueueCreateMutexStatic>
 80055a6:	61f8      	str	r0, [r7, #28]
 80055a8:	e00e      	b.n	80055c8 <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 80055aa:	693b      	ldr	r3, [r7, #16]
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d10b      	bne.n	80055c8 <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 80055b0:	697b      	ldr	r3, [r7, #20]
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d004      	beq.n	80055c0 <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 80055b6:	2004      	movs	r0, #4
 80055b8:	f000 ff37 	bl	800642a <xQueueCreateMutex>
 80055bc:	61f8      	str	r0, [r7, #28]
 80055be:	e003      	b.n	80055c8 <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 80055c0:	2001      	movs	r0, #1
 80055c2:	f000 ff32 	bl	800642a <xQueueCreateMutex>
 80055c6:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 80055c8:	69fb      	ldr	r3, [r7, #28]
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d00c      	beq.n	80055e8 <osMutexNew+0xee>
        if (attr != NULL) {
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d003      	beq.n	80055dc <osMutexNew+0xe2>
          name = attr->name;
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	60fb      	str	r3, [r7, #12]
 80055da:	e001      	b.n	80055e0 <osMutexNew+0xe6>
        } else {
          name = NULL;
 80055dc:	2300      	movs	r3, #0
 80055de:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 80055e0:	68f9      	ldr	r1, [r7, #12]
 80055e2:	69f8      	ldr	r0, [r7, #28]
 80055e4:	f001 fc7a 	bl	8006edc <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 80055e8:	69fb      	ldr	r3, [r7, #28]
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d006      	beq.n	80055fc <osMutexNew+0x102>
 80055ee:	697b      	ldr	r3, [r7, #20]
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d003      	beq.n	80055fc <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 80055f4:	69fb      	ldr	r3, [r7, #28]
 80055f6:	f043 0301 	orr.w	r3, r3, #1
 80055fa:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 80055fc:	69fb      	ldr	r3, [r7, #28]
}
 80055fe:	4618      	mov	r0, r3
 8005600:	3720      	adds	r7, #32
 8005602:	46bd      	mov	sp, r7
 8005604:	bd80      	pop	{r7, pc}

08005606 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 8005606:	b580      	push	{r7, lr}
 8005608:	b086      	sub	sp, #24
 800560a:	af00      	add	r7, sp, #0
 800560c:	6078      	str	r0, [r7, #4]
 800560e:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	f023 0301 	bic.w	r3, r3, #1
 8005616:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	f003 0301 	and.w	r3, r3, #1
 800561e:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 8005620:	2300      	movs	r3, #0
 8005622:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005624:	f3ef 8305 	mrs	r3, IPSR
 8005628:	60bb      	str	r3, [r7, #8]
  return(result);
 800562a:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 800562c:	2b00      	cmp	r3, #0
 800562e:	d003      	beq.n	8005638 <osMutexAcquire+0x32>
    stat = osErrorISR;
 8005630:	f06f 0305 	mvn.w	r3, #5
 8005634:	617b      	str	r3, [r7, #20]
 8005636:	e02c      	b.n	8005692 <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 8005638:	693b      	ldr	r3, [r7, #16]
 800563a:	2b00      	cmp	r3, #0
 800563c:	d103      	bne.n	8005646 <osMutexAcquire+0x40>
    stat = osErrorParameter;
 800563e:	f06f 0303 	mvn.w	r3, #3
 8005642:	617b      	str	r3, [r7, #20]
 8005644:	e025      	b.n	8005692 <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	2b00      	cmp	r3, #0
 800564a:	d011      	beq.n	8005670 <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 800564c:	6839      	ldr	r1, [r7, #0]
 800564e:	6938      	ldr	r0, [r7, #16]
 8005650:	f000 ff53 	bl	80064fa <xQueueTakeMutexRecursive>
 8005654:	4603      	mov	r3, r0
 8005656:	2b01      	cmp	r3, #1
 8005658:	d01b      	beq.n	8005692 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 800565a:	683b      	ldr	r3, [r7, #0]
 800565c:	2b00      	cmp	r3, #0
 800565e:	d003      	beq.n	8005668 <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 8005660:	f06f 0301 	mvn.w	r3, #1
 8005664:	617b      	str	r3, [r7, #20]
 8005666:	e014      	b.n	8005692 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 8005668:	f06f 0302 	mvn.w	r3, #2
 800566c:	617b      	str	r3, [r7, #20]
 800566e:	e010      	b.n	8005692 <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 8005670:	6839      	ldr	r1, [r7, #0]
 8005672:	6938      	ldr	r0, [r7, #16]
 8005674:	f001 f9fa 	bl	8006a6c <xQueueSemaphoreTake>
 8005678:	4603      	mov	r3, r0
 800567a:	2b01      	cmp	r3, #1
 800567c:	d009      	beq.n	8005692 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 800567e:	683b      	ldr	r3, [r7, #0]
 8005680:	2b00      	cmp	r3, #0
 8005682:	d003      	beq.n	800568c <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 8005684:	f06f 0301 	mvn.w	r3, #1
 8005688:	617b      	str	r3, [r7, #20]
 800568a:	e002      	b.n	8005692 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 800568c:	f06f 0302 	mvn.w	r3, #2
 8005690:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 8005692:	697b      	ldr	r3, [r7, #20]
}
 8005694:	4618      	mov	r0, r3
 8005696:	3718      	adds	r7, #24
 8005698:	46bd      	mov	sp, r7
 800569a:	bd80      	pop	{r7, pc}

0800569c <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 800569c:	b580      	push	{r7, lr}
 800569e:	b086      	sub	sp, #24
 80056a0:	af00      	add	r7, sp, #0
 80056a2:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	f023 0301 	bic.w	r3, r3, #1
 80056aa:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	f003 0301 	and.w	r3, r3, #1
 80056b2:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 80056b4:	2300      	movs	r3, #0
 80056b6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80056b8:	f3ef 8305 	mrs	r3, IPSR
 80056bc:	60bb      	str	r3, [r7, #8]
  return(result);
 80056be:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d003      	beq.n	80056cc <osMutexRelease+0x30>
    stat = osErrorISR;
 80056c4:	f06f 0305 	mvn.w	r3, #5
 80056c8:	617b      	str	r3, [r7, #20]
 80056ca:	e01f      	b.n	800570c <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 80056cc:	693b      	ldr	r3, [r7, #16]
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d103      	bne.n	80056da <osMutexRelease+0x3e>
    stat = osErrorParameter;
 80056d2:	f06f 0303 	mvn.w	r3, #3
 80056d6:	617b      	str	r3, [r7, #20]
 80056d8:	e018      	b.n	800570c <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d009      	beq.n	80056f4 <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 80056e0:	6938      	ldr	r0, [r7, #16]
 80056e2:	f000 fed5 	bl	8006490 <xQueueGiveMutexRecursive>
 80056e6:	4603      	mov	r3, r0
 80056e8:	2b01      	cmp	r3, #1
 80056ea:	d00f      	beq.n	800570c <osMutexRelease+0x70>
        stat = osErrorResource;
 80056ec:	f06f 0302 	mvn.w	r3, #2
 80056f0:	617b      	str	r3, [r7, #20]
 80056f2:	e00b      	b.n	800570c <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 80056f4:	2300      	movs	r3, #0
 80056f6:	2200      	movs	r2, #0
 80056f8:	2100      	movs	r1, #0
 80056fa:	6938      	ldr	r0, [r7, #16]
 80056fc:	f000 ff34 	bl	8006568 <xQueueGenericSend>
 8005700:	4603      	mov	r3, r0
 8005702:	2b01      	cmp	r3, #1
 8005704:	d002      	beq.n	800570c <osMutexRelease+0x70>
        stat = osErrorResource;
 8005706:	f06f 0302 	mvn.w	r3, #2
 800570a:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 800570c:	697b      	ldr	r3, [r7, #20]
}
 800570e:	4618      	mov	r0, r3
 8005710:	3718      	adds	r7, #24
 8005712:	46bd      	mov	sp, r7
 8005714:	bd80      	pop	{r7, pc}
	...

08005718 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8005718:	b480      	push	{r7}
 800571a:	b085      	sub	sp, #20
 800571c:	af00      	add	r7, sp, #0
 800571e:	60f8      	str	r0, [r7, #12]
 8005720:	60b9      	str	r1, [r7, #8]
 8005722:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	4a07      	ldr	r2, [pc, #28]	@ (8005744 <vApplicationGetIdleTaskMemory+0x2c>)
 8005728:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800572a:	68bb      	ldr	r3, [r7, #8]
 800572c:	4a06      	ldr	r2, [pc, #24]	@ (8005748 <vApplicationGetIdleTaskMemory+0x30>)
 800572e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	2280      	movs	r2, #128	@ 0x80
 8005734:	601a      	str	r2, [r3, #0]
}
 8005736:	bf00      	nop
 8005738:	3714      	adds	r7, #20
 800573a:	46bd      	mov	sp, r7
 800573c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005740:	4770      	bx	lr
 8005742:	bf00      	nop
 8005744:	20001334 	.word	0x20001334
 8005748:	200013dc 	.word	0x200013dc

0800574c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800574c:	b480      	push	{r7}
 800574e:	b085      	sub	sp, #20
 8005750:	af00      	add	r7, sp, #0
 8005752:	60f8      	str	r0, [r7, #12]
 8005754:	60b9      	str	r1, [r7, #8]
 8005756:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	4a07      	ldr	r2, [pc, #28]	@ (8005778 <vApplicationGetTimerTaskMemory+0x2c>)
 800575c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800575e:	68bb      	ldr	r3, [r7, #8]
 8005760:	4a06      	ldr	r2, [pc, #24]	@ (800577c <vApplicationGetTimerTaskMemory+0x30>)
 8005762:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800576a:	601a      	str	r2, [r3, #0]
}
 800576c:	bf00      	nop
 800576e:	3714      	adds	r7, #20
 8005770:	46bd      	mov	sp, r7
 8005772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005776:	4770      	bx	lr
 8005778:	200015dc 	.word	0x200015dc
 800577c:	20001684 	.word	0x20001684

08005780 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005780:	b580      	push	{r7, lr}
 8005782:	b08a      	sub	sp, #40	@ 0x28
 8005784:	af00      	add	r7, sp, #0
 8005786:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005788:	2300      	movs	r3, #0
 800578a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800578c:	f001 ff70 	bl	8007670 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005790:	4b5c      	ldr	r3, [pc, #368]	@ (8005904 <pvPortMalloc+0x184>)
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	2b00      	cmp	r3, #0
 8005796:	d101      	bne.n	800579c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005798:	f000 f924 	bl	80059e4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800579c:	4b5a      	ldr	r3, [pc, #360]	@ (8005908 <pvPortMalloc+0x188>)
 800579e:	681a      	ldr	r2, [r3, #0]
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	4013      	ands	r3, r2
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	f040 8095 	bne.w	80058d4 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d01e      	beq.n	80057ee <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 80057b0:	2208      	movs	r2, #8
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	4413      	add	r3, r2
 80057b6:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	f003 0307 	and.w	r3, r3, #7
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d015      	beq.n	80057ee <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	f023 0307 	bic.w	r3, r3, #7
 80057c8:	3308      	adds	r3, #8
 80057ca:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	f003 0307 	and.w	r3, r3, #7
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d00b      	beq.n	80057ee <pvPortMalloc+0x6e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80057d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80057da:	f383 8811 	msr	BASEPRI, r3
 80057de:	f3bf 8f6f 	isb	sy
 80057e2:	f3bf 8f4f 	dsb	sy
 80057e6:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80057e8:	bf00      	nop
 80057ea:	bf00      	nop
 80057ec:	e7fd      	b.n	80057ea <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d06f      	beq.n	80058d4 <pvPortMalloc+0x154>
 80057f4:	4b45      	ldr	r3, [pc, #276]	@ (800590c <pvPortMalloc+0x18c>)
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	687a      	ldr	r2, [r7, #4]
 80057fa:	429a      	cmp	r2, r3
 80057fc:	d86a      	bhi.n	80058d4 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80057fe:	4b44      	ldr	r3, [pc, #272]	@ (8005910 <pvPortMalloc+0x190>)
 8005800:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005802:	4b43      	ldr	r3, [pc, #268]	@ (8005910 <pvPortMalloc+0x190>)
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005808:	e004      	b.n	8005814 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800580a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800580c:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800580e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005814:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005816:	685b      	ldr	r3, [r3, #4]
 8005818:	687a      	ldr	r2, [r7, #4]
 800581a:	429a      	cmp	r2, r3
 800581c:	d903      	bls.n	8005826 <pvPortMalloc+0xa6>
 800581e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	2b00      	cmp	r3, #0
 8005824:	d1f1      	bne.n	800580a <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005826:	4b37      	ldr	r3, [pc, #220]	@ (8005904 <pvPortMalloc+0x184>)
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800582c:	429a      	cmp	r2, r3
 800582e:	d051      	beq.n	80058d4 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005830:	6a3b      	ldr	r3, [r7, #32]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	2208      	movs	r2, #8
 8005836:	4413      	add	r3, r2
 8005838:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800583a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800583c:	681a      	ldr	r2, [r3, #0]
 800583e:	6a3b      	ldr	r3, [r7, #32]
 8005840:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005842:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005844:	685a      	ldr	r2, [r3, #4]
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	1ad2      	subs	r2, r2, r3
 800584a:	2308      	movs	r3, #8
 800584c:	005b      	lsls	r3, r3, #1
 800584e:	429a      	cmp	r2, r3
 8005850:	d920      	bls.n	8005894 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005852:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	4413      	add	r3, r2
 8005858:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800585a:	69bb      	ldr	r3, [r7, #24]
 800585c:	f003 0307 	and.w	r3, r3, #7
 8005860:	2b00      	cmp	r3, #0
 8005862:	d00b      	beq.n	800587c <pvPortMalloc+0xfc>
	__asm volatile
 8005864:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005868:	f383 8811 	msr	BASEPRI, r3
 800586c:	f3bf 8f6f 	isb	sy
 8005870:	f3bf 8f4f 	dsb	sy
 8005874:	613b      	str	r3, [r7, #16]
}
 8005876:	bf00      	nop
 8005878:	bf00      	nop
 800587a:	e7fd      	b.n	8005878 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800587c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800587e:	685a      	ldr	r2, [r3, #4]
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	1ad2      	subs	r2, r2, r3
 8005884:	69bb      	ldr	r3, [r7, #24]
 8005886:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005888:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800588a:	687a      	ldr	r2, [r7, #4]
 800588c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800588e:	69b8      	ldr	r0, [r7, #24]
 8005890:	f000 f90a 	bl	8005aa8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005894:	4b1d      	ldr	r3, [pc, #116]	@ (800590c <pvPortMalloc+0x18c>)
 8005896:	681a      	ldr	r2, [r3, #0]
 8005898:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800589a:	685b      	ldr	r3, [r3, #4]
 800589c:	1ad3      	subs	r3, r2, r3
 800589e:	4a1b      	ldr	r2, [pc, #108]	@ (800590c <pvPortMalloc+0x18c>)
 80058a0:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80058a2:	4b1a      	ldr	r3, [pc, #104]	@ (800590c <pvPortMalloc+0x18c>)
 80058a4:	681a      	ldr	r2, [r3, #0]
 80058a6:	4b1b      	ldr	r3, [pc, #108]	@ (8005914 <pvPortMalloc+0x194>)
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	429a      	cmp	r2, r3
 80058ac:	d203      	bcs.n	80058b6 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80058ae:	4b17      	ldr	r3, [pc, #92]	@ (800590c <pvPortMalloc+0x18c>)
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	4a18      	ldr	r2, [pc, #96]	@ (8005914 <pvPortMalloc+0x194>)
 80058b4:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80058b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058b8:	685a      	ldr	r2, [r3, #4]
 80058ba:	4b13      	ldr	r3, [pc, #76]	@ (8005908 <pvPortMalloc+0x188>)
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	431a      	orrs	r2, r3
 80058c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058c2:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80058c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058c6:	2200      	movs	r2, #0
 80058c8:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80058ca:	4b13      	ldr	r3, [pc, #76]	@ (8005918 <pvPortMalloc+0x198>)
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	3301      	adds	r3, #1
 80058d0:	4a11      	ldr	r2, [pc, #68]	@ (8005918 <pvPortMalloc+0x198>)
 80058d2:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80058d4:	f001 feda 	bl	800768c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80058d8:	69fb      	ldr	r3, [r7, #28]
 80058da:	f003 0307 	and.w	r3, r3, #7
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d00b      	beq.n	80058fa <pvPortMalloc+0x17a>
	__asm volatile
 80058e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80058e6:	f383 8811 	msr	BASEPRI, r3
 80058ea:	f3bf 8f6f 	isb	sy
 80058ee:	f3bf 8f4f 	dsb	sy
 80058f2:	60fb      	str	r3, [r7, #12]
}
 80058f4:	bf00      	nop
 80058f6:	bf00      	nop
 80058f8:	e7fd      	b.n	80058f6 <pvPortMalloc+0x176>
	return pvReturn;
 80058fa:	69fb      	ldr	r3, [r7, #28]
}
 80058fc:	4618      	mov	r0, r3
 80058fe:	3728      	adds	r7, #40	@ 0x28
 8005900:	46bd      	mov	sp, r7
 8005902:	bd80      	pop	{r7, pc}
 8005904:	20002644 	.word	0x20002644
 8005908:	20002658 	.word	0x20002658
 800590c:	20002648 	.word	0x20002648
 8005910:	2000263c 	.word	0x2000263c
 8005914:	2000264c 	.word	0x2000264c
 8005918:	20002650 	.word	0x20002650

0800591c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800591c:	b580      	push	{r7, lr}
 800591e:	b086      	sub	sp, #24
 8005920:	af00      	add	r7, sp, #0
 8005922:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	2b00      	cmp	r3, #0
 800592c:	d04f      	beq.n	80059ce <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800592e:	2308      	movs	r3, #8
 8005930:	425b      	negs	r3, r3
 8005932:	697a      	ldr	r2, [r7, #20]
 8005934:	4413      	add	r3, r2
 8005936:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005938:	697b      	ldr	r3, [r7, #20]
 800593a:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800593c:	693b      	ldr	r3, [r7, #16]
 800593e:	685a      	ldr	r2, [r3, #4]
 8005940:	4b25      	ldr	r3, [pc, #148]	@ (80059d8 <vPortFree+0xbc>)
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	4013      	ands	r3, r2
 8005946:	2b00      	cmp	r3, #0
 8005948:	d10b      	bne.n	8005962 <vPortFree+0x46>
	__asm volatile
 800594a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800594e:	f383 8811 	msr	BASEPRI, r3
 8005952:	f3bf 8f6f 	isb	sy
 8005956:	f3bf 8f4f 	dsb	sy
 800595a:	60fb      	str	r3, [r7, #12]
}
 800595c:	bf00      	nop
 800595e:	bf00      	nop
 8005960:	e7fd      	b.n	800595e <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005962:	693b      	ldr	r3, [r7, #16]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	2b00      	cmp	r3, #0
 8005968:	d00b      	beq.n	8005982 <vPortFree+0x66>
	__asm volatile
 800596a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800596e:	f383 8811 	msr	BASEPRI, r3
 8005972:	f3bf 8f6f 	isb	sy
 8005976:	f3bf 8f4f 	dsb	sy
 800597a:	60bb      	str	r3, [r7, #8]
}
 800597c:	bf00      	nop
 800597e:	bf00      	nop
 8005980:	e7fd      	b.n	800597e <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005982:	693b      	ldr	r3, [r7, #16]
 8005984:	685a      	ldr	r2, [r3, #4]
 8005986:	4b14      	ldr	r3, [pc, #80]	@ (80059d8 <vPortFree+0xbc>)
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	4013      	ands	r3, r2
 800598c:	2b00      	cmp	r3, #0
 800598e:	d01e      	beq.n	80059ce <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005990:	693b      	ldr	r3, [r7, #16]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	2b00      	cmp	r3, #0
 8005996:	d11a      	bne.n	80059ce <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005998:	693b      	ldr	r3, [r7, #16]
 800599a:	685a      	ldr	r2, [r3, #4]
 800599c:	4b0e      	ldr	r3, [pc, #56]	@ (80059d8 <vPortFree+0xbc>)
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	43db      	mvns	r3, r3
 80059a2:	401a      	ands	r2, r3
 80059a4:	693b      	ldr	r3, [r7, #16]
 80059a6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80059a8:	f001 fe62 	bl	8007670 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80059ac:	693b      	ldr	r3, [r7, #16]
 80059ae:	685a      	ldr	r2, [r3, #4]
 80059b0:	4b0a      	ldr	r3, [pc, #40]	@ (80059dc <vPortFree+0xc0>)
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	4413      	add	r3, r2
 80059b6:	4a09      	ldr	r2, [pc, #36]	@ (80059dc <vPortFree+0xc0>)
 80059b8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80059ba:	6938      	ldr	r0, [r7, #16]
 80059bc:	f000 f874 	bl	8005aa8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80059c0:	4b07      	ldr	r3, [pc, #28]	@ (80059e0 <vPortFree+0xc4>)
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	3301      	adds	r3, #1
 80059c6:	4a06      	ldr	r2, [pc, #24]	@ (80059e0 <vPortFree+0xc4>)
 80059c8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80059ca:	f001 fe5f 	bl	800768c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80059ce:	bf00      	nop
 80059d0:	3718      	adds	r7, #24
 80059d2:	46bd      	mov	sp, r7
 80059d4:	bd80      	pop	{r7, pc}
 80059d6:	bf00      	nop
 80059d8:	20002658 	.word	0x20002658
 80059dc:	20002648 	.word	0x20002648
 80059e0:	20002654 	.word	0x20002654

080059e4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80059e4:	b480      	push	{r7}
 80059e6:	b085      	sub	sp, #20
 80059e8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80059ea:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 80059ee:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80059f0:	4b27      	ldr	r3, [pc, #156]	@ (8005a90 <prvHeapInit+0xac>)
 80059f2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	f003 0307 	and.w	r3, r3, #7
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d00c      	beq.n	8005a18 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	3307      	adds	r3, #7
 8005a02:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	f023 0307 	bic.w	r3, r3, #7
 8005a0a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005a0c:	68ba      	ldr	r2, [r7, #8]
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	1ad3      	subs	r3, r2, r3
 8005a12:	4a1f      	ldr	r2, [pc, #124]	@ (8005a90 <prvHeapInit+0xac>)
 8005a14:	4413      	add	r3, r2
 8005a16:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005a1c:	4a1d      	ldr	r2, [pc, #116]	@ (8005a94 <prvHeapInit+0xb0>)
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005a22:	4b1c      	ldr	r3, [pc, #112]	@ (8005a94 <prvHeapInit+0xb0>)
 8005a24:	2200      	movs	r2, #0
 8005a26:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	68ba      	ldr	r2, [r7, #8]
 8005a2c:	4413      	add	r3, r2
 8005a2e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005a30:	2208      	movs	r2, #8
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	1a9b      	subs	r3, r3, r2
 8005a36:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	f023 0307 	bic.w	r3, r3, #7
 8005a3e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	4a15      	ldr	r2, [pc, #84]	@ (8005a98 <prvHeapInit+0xb4>)
 8005a44:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005a46:	4b14      	ldr	r3, [pc, #80]	@ (8005a98 <prvHeapInit+0xb4>)
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	2200      	movs	r2, #0
 8005a4c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8005a4e:	4b12      	ldr	r3, [pc, #72]	@ (8005a98 <prvHeapInit+0xb4>)
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	2200      	movs	r2, #0
 8005a54:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005a5a:	683b      	ldr	r3, [r7, #0]
 8005a5c:	68fa      	ldr	r2, [r7, #12]
 8005a5e:	1ad2      	subs	r2, r2, r3
 8005a60:	683b      	ldr	r3, [r7, #0]
 8005a62:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005a64:	4b0c      	ldr	r3, [pc, #48]	@ (8005a98 <prvHeapInit+0xb4>)
 8005a66:	681a      	ldr	r2, [r3, #0]
 8005a68:	683b      	ldr	r3, [r7, #0]
 8005a6a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005a6c:	683b      	ldr	r3, [r7, #0]
 8005a6e:	685b      	ldr	r3, [r3, #4]
 8005a70:	4a0a      	ldr	r2, [pc, #40]	@ (8005a9c <prvHeapInit+0xb8>)
 8005a72:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005a74:	683b      	ldr	r3, [r7, #0]
 8005a76:	685b      	ldr	r3, [r3, #4]
 8005a78:	4a09      	ldr	r2, [pc, #36]	@ (8005aa0 <prvHeapInit+0xbc>)
 8005a7a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005a7c:	4b09      	ldr	r3, [pc, #36]	@ (8005aa4 <prvHeapInit+0xc0>)
 8005a7e:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8005a82:	601a      	str	r2, [r3, #0]
}
 8005a84:	bf00      	nop
 8005a86:	3714      	adds	r7, #20
 8005a88:	46bd      	mov	sp, r7
 8005a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a8e:	4770      	bx	lr
 8005a90:	20001a84 	.word	0x20001a84
 8005a94:	2000263c 	.word	0x2000263c
 8005a98:	20002644 	.word	0x20002644
 8005a9c:	2000264c 	.word	0x2000264c
 8005aa0:	20002648 	.word	0x20002648
 8005aa4:	20002658 	.word	0x20002658

08005aa8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005aa8:	b480      	push	{r7}
 8005aaa:	b085      	sub	sp, #20
 8005aac:	af00      	add	r7, sp, #0
 8005aae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005ab0:	4b28      	ldr	r3, [pc, #160]	@ (8005b54 <prvInsertBlockIntoFreeList+0xac>)
 8005ab2:	60fb      	str	r3, [r7, #12]
 8005ab4:	e002      	b.n	8005abc <prvInsertBlockIntoFreeList+0x14>
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	60fb      	str	r3, [r7, #12]
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	687a      	ldr	r2, [r7, #4]
 8005ac2:	429a      	cmp	r2, r3
 8005ac4:	d8f7      	bhi.n	8005ab6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	685b      	ldr	r3, [r3, #4]
 8005ace:	68ba      	ldr	r2, [r7, #8]
 8005ad0:	4413      	add	r3, r2
 8005ad2:	687a      	ldr	r2, [r7, #4]
 8005ad4:	429a      	cmp	r2, r3
 8005ad6:	d108      	bne.n	8005aea <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	685a      	ldr	r2, [r3, #4]
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	685b      	ldr	r3, [r3, #4]
 8005ae0:	441a      	add	r2, r3
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	685b      	ldr	r3, [r3, #4]
 8005af2:	68ba      	ldr	r2, [r7, #8]
 8005af4:	441a      	add	r2, r3
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	429a      	cmp	r2, r3
 8005afc:	d118      	bne.n	8005b30 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	681a      	ldr	r2, [r3, #0]
 8005b02:	4b15      	ldr	r3, [pc, #84]	@ (8005b58 <prvInsertBlockIntoFreeList+0xb0>)
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	429a      	cmp	r2, r3
 8005b08:	d00d      	beq.n	8005b26 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	685a      	ldr	r2, [r3, #4]
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	685b      	ldr	r3, [r3, #4]
 8005b14:	441a      	add	r2, r3
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	681a      	ldr	r2, [r3, #0]
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	601a      	str	r2, [r3, #0]
 8005b24:	e008      	b.n	8005b38 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005b26:	4b0c      	ldr	r3, [pc, #48]	@ (8005b58 <prvInsertBlockIntoFreeList+0xb0>)
 8005b28:	681a      	ldr	r2, [r3, #0]
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	601a      	str	r2, [r3, #0]
 8005b2e:	e003      	b.n	8005b38 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	681a      	ldr	r2, [r3, #0]
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005b38:	68fa      	ldr	r2, [r7, #12]
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	429a      	cmp	r2, r3
 8005b3e:	d002      	beq.n	8005b46 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	687a      	ldr	r2, [r7, #4]
 8005b44:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005b46:	bf00      	nop
 8005b48:	3714      	adds	r7, #20
 8005b4a:	46bd      	mov	sp, r7
 8005b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b50:	4770      	bx	lr
 8005b52:	bf00      	nop
 8005b54:	2000263c 	.word	0x2000263c
 8005b58:	20002644 	.word	0x20002644

08005b5c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005b5c:	b480      	push	{r7}
 8005b5e:	b083      	sub	sp, #12
 8005b60:	af00      	add	r7, sp, #0
 8005b62:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	f103 0208 	add.w	r2, r3, #8
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	f04f 32ff 	mov.w	r2, #4294967295
 8005b74:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	f103 0208 	add.w	r2, r3, #8
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	f103 0208 	add.w	r2, r3, #8
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	2200      	movs	r2, #0
 8005b8e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005b90:	bf00      	nop
 8005b92:	370c      	adds	r7, #12
 8005b94:	46bd      	mov	sp, r7
 8005b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b9a:	4770      	bx	lr

08005b9c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005b9c:	b480      	push	{r7}
 8005b9e:	b083      	sub	sp, #12
 8005ba0:	af00      	add	r7, sp, #0
 8005ba2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	2200      	movs	r2, #0
 8005ba8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005baa:	bf00      	nop
 8005bac:	370c      	adds	r7, #12
 8005bae:	46bd      	mov	sp, r7
 8005bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bb4:	4770      	bx	lr

08005bb6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005bb6:	b480      	push	{r7}
 8005bb8:	b085      	sub	sp, #20
 8005bba:	af00      	add	r7, sp, #0
 8005bbc:	6078      	str	r0, [r7, #4]
 8005bbe:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	685b      	ldr	r3, [r3, #4]
 8005bc4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005bc6:	683b      	ldr	r3, [r7, #0]
 8005bc8:	68fa      	ldr	r2, [r7, #12]
 8005bca:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	689a      	ldr	r2, [r3, #8]
 8005bd0:	683b      	ldr	r3, [r7, #0]
 8005bd2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	689b      	ldr	r3, [r3, #8]
 8005bd8:	683a      	ldr	r2, [r7, #0]
 8005bda:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	683a      	ldr	r2, [r7, #0]
 8005be0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8005be2:	683b      	ldr	r3, [r7, #0]
 8005be4:	687a      	ldr	r2, [r7, #4]
 8005be6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	1c5a      	adds	r2, r3, #1
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	601a      	str	r2, [r3, #0]
}
 8005bf2:	bf00      	nop
 8005bf4:	3714      	adds	r7, #20
 8005bf6:	46bd      	mov	sp, r7
 8005bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bfc:	4770      	bx	lr

08005bfe <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005bfe:	b480      	push	{r7}
 8005c00:	b085      	sub	sp, #20
 8005c02:	af00      	add	r7, sp, #0
 8005c04:	6078      	str	r0, [r7, #4]
 8005c06:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005c08:	683b      	ldr	r3, [r7, #0]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005c0e:	68bb      	ldr	r3, [r7, #8]
 8005c10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c14:	d103      	bne.n	8005c1e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	691b      	ldr	r3, [r3, #16]
 8005c1a:	60fb      	str	r3, [r7, #12]
 8005c1c:	e00c      	b.n	8005c38 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	3308      	adds	r3, #8
 8005c22:	60fb      	str	r3, [r7, #12]
 8005c24:	e002      	b.n	8005c2c <vListInsert+0x2e>
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	685b      	ldr	r3, [r3, #4]
 8005c2a:	60fb      	str	r3, [r7, #12]
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	685b      	ldr	r3, [r3, #4]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	68ba      	ldr	r2, [r7, #8]
 8005c34:	429a      	cmp	r2, r3
 8005c36:	d2f6      	bcs.n	8005c26 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	685a      	ldr	r2, [r3, #4]
 8005c3c:	683b      	ldr	r3, [r7, #0]
 8005c3e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005c40:	683b      	ldr	r3, [r7, #0]
 8005c42:	685b      	ldr	r3, [r3, #4]
 8005c44:	683a      	ldr	r2, [r7, #0]
 8005c46:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005c48:	683b      	ldr	r3, [r7, #0]
 8005c4a:	68fa      	ldr	r2, [r7, #12]
 8005c4c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	683a      	ldr	r2, [r7, #0]
 8005c52:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8005c54:	683b      	ldr	r3, [r7, #0]
 8005c56:	687a      	ldr	r2, [r7, #4]
 8005c58:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	1c5a      	adds	r2, r3, #1
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	601a      	str	r2, [r3, #0]
}
 8005c64:	bf00      	nop
 8005c66:	3714      	adds	r7, #20
 8005c68:	46bd      	mov	sp, r7
 8005c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c6e:	4770      	bx	lr

08005c70 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005c70:	b480      	push	{r7}
 8005c72:	b085      	sub	sp, #20
 8005c74:	af00      	add	r7, sp, #0
 8005c76:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	691b      	ldr	r3, [r3, #16]
 8005c7c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	685b      	ldr	r3, [r3, #4]
 8005c82:	687a      	ldr	r2, [r7, #4]
 8005c84:	6892      	ldr	r2, [r2, #8]
 8005c86:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	689b      	ldr	r3, [r3, #8]
 8005c8c:	687a      	ldr	r2, [r7, #4]
 8005c8e:	6852      	ldr	r2, [r2, #4]
 8005c90:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	685b      	ldr	r3, [r3, #4]
 8005c96:	687a      	ldr	r2, [r7, #4]
 8005c98:	429a      	cmp	r2, r3
 8005c9a:	d103      	bne.n	8005ca4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	689a      	ldr	r2, [r3, #8]
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	2200      	movs	r2, #0
 8005ca8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	1e5a      	subs	r2, r3, #1
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	681b      	ldr	r3, [r3, #0]
}
 8005cb8:	4618      	mov	r0, r3
 8005cba:	3714      	adds	r7, #20
 8005cbc:	46bd      	mov	sp, r7
 8005cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cc2:	4770      	bx	lr

08005cc4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005cc4:	b480      	push	{r7}
 8005cc6:	b085      	sub	sp, #20
 8005cc8:	af00      	add	r7, sp, #0
 8005cca:	60f8      	str	r0, [r7, #12]
 8005ccc:	60b9      	str	r1, [r7, #8]
 8005cce:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	3b04      	subs	r3, #4
 8005cd4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8005cdc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	3b04      	subs	r3, #4
 8005ce2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005ce4:	68bb      	ldr	r3, [r7, #8]
 8005ce6:	f023 0201 	bic.w	r2, r3, #1
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	3b04      	subs	r3, #4
 8005cf2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005cf4:	4a0c      	ldr	r2, [pc, #48]	@ (8005d28 <pxPortInitialiseStack+0x64>)
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	3b14      	subs	r3, #20
 8005cfe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005d00:	687a      	ldr	r2, [r7, #4]
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	3b04      	subs	r3, #4
 8005d0a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	f06f 0202 	mvn.w	r2, #2
 8005d12:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	3b20      	subs	r3, #32
 8005d18:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005d1a:	68fb      	ldr	r3, [r7, #12]
}
 8005d1c:	4618      	mov	r0, r3
 8005d1e:	3714      	adds	r7, #20
 8005d20:	46bd      	mov	sp, r7
 8005d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d26:	4770      	bx	lr
 8005d28:	08005d2d 	.word	0x08005d2d

08005d2c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005d2c:	b480      	push	{r7}
 8005d2e:	b085      	sub	sp, #20
 8005d30:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8005d32:	2300      	movs	r3, #0
 8005d34:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005d36:	4b13      	ldr	r3, [pc, #76]	@ (8005d84 <prvTaskExitError+0x58>)
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d3e:	d00b      	beq.n	8005d58 <prvTaskExitError+0x2c>
	__asm volatile
 8005d40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d44:	f383 8811 	msr	BASEPRI, r3
 8005d48:	f3bf 8f6f 	isb	sy
 8005d4c:	f3bf 8f4f 	dsb	sy
 8005d50:	60fb      	str	r3, [r7, #12]
}
 8005d52:	bf00      	nop
 8005d54:	bf00      	nop
 8005d56:	e7fd      	b.n	8005d54 <prvTaskExitError+0x28>
	__asm volatile
 8005d58:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d5c:	f383 8811 	msr	BASEPRI, r3
 8005d60:	f3bf 8f6f 	isb	sy
 8005d64:	f3bf 8f4f 	dsb	sy
 8005d68:	60bb      	str	r3, [r7, #8]
}
 8005d6a:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005d6c:	bf00      	nop
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d0fc      	beq.n	8005d6e <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005d74:	bf00      	nop
 8005d76:	bf00      	nop
 8005d78:	3714      	adds	r7, #20
 8005d7a:	46bd      	mov	sp, r7
 8005d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d80:	4770      	bx	lr
 8005d82:	bf00      	nop
 8005d84:	20000014 	.word	0x20000014
	...

08005d90 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005d90:	4b07      	ldr	r3, [pc, #28]	@ (8005db0 <pxCurrentTCBConst2>)
 8005d92:	6819      	ldr	r1, [r3, #0]
 8005d94:	6808      	ldr	r0, [r1, #0]
 8005d96:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d9a:	f380 8809 	msr	PSP, r0
 8005d9e:	f3bf 8f6f 	isb	sy
 8005da2:	f04f 0000 	mov.w	r0, #0
 8005da6:	f380 8811 	msr	BASEPRI, r0
 8005daa:	4770      	bx	lr
 8005dac:	f3af 8000 	nop.w

08005db0 <pxCurrentTCBConst2>:
 8005db0:	200026a4 	.word	0x200026a4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005db4:	bf00      	nop
 8005db6:	bf00      	nop

08005db8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005db8:	4808      	ldr	r0, [pc, #32]	@ (8005ddc <prvPortStartFirstTask+0x24>)
 8005dba:	6800      	ldr	r0, [r0, #0]
 8005dbc:	6800      	ldr	r0, [r0, #0]
 8005dbe:	f380 8808 	msr	MSP, r0
 8005dc2:	f04f 0000 	mov.w	r0, #0
 8005dc6:	f380 8814 	msr	CONTROL, r0
 8005dca:	b662      	cpsie	i
 8005dcc:	b661      	cpsie	f
 8005dce:	f3bf 8f4f 	dsb	sy
 8005dd2:	f3bf 8f6f 	isb	sy
 8005dd6:	df00      	svc	0
 8005dd8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8005dda:	bf00      	nop
 8005ddc:	e000ed08 	.word	0xe000ed08

08005de0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005de0:	b580      	push	{r7, lr}
 8005de2:	b086      	sub	sp, #24
 8005de4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005de6:	4b47      	ldr	r3, [pc, #284]	@ (8005f04 <xPortStartScheduler+0x124>)
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	4a47      	ldr	r2, [pc, #284]	@ (8005f08 <xPortStartScheduler+0x128>)
 8005dec:	4293      	cmp	r3, r2
 8005dee:	d10b      	bne.n	8005e08 <xPortStartScheduler+0x28>
	__asm volatile
 8005df0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005df4:	f383 8811 	msr	BASEPRI, r3
 8005df8:	f3bf 8f6f 	isb	sy
 8005dfc:	f3bf 8f4f 	dsb	sy
 8005e00:	60fb      	str	r3, [r7, #12]
}
 8005e02:	bf00      	nop
 8005e04:	bf00      	nop
 8005e06:	e7fd      	b.n	8005e04 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005e08:	4b3e      	ldr	r3, [pc, #248]	@ (8005f04 <xPortStartScheduler+0x124>)
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	4a3f      	ldr	r2, [pc, #252]	@ (8005f0c <xPortStartScheduler+0x12c>)
 8005e0e:	4293      	cmp	r3, r2
 8005e10:	d10b      	bne.n	8005e2a <xPortStartScheduler+0x4a>
	__asm volatile
 8005e12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e16:	f383 8811 	msr	BASEPRI, r3
 8005e1a:	f3bf 8f6f 	isb	sy
 8005e1e:	f3bf 8f4f 	dsb	sy
 8005e22:	613b      	str	r3, [r7, #16]
}
 8005e24:	bf00      	nop
 8005e26:	bf00      	nop
 8005e28:	e7fd      	b.n	8005e26 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005e2a:	4b39      	ldr	r3, [pc, #228]	@ (8005f10 <xPortStartScheduler+0x130>)
 8005e2c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005e2e:	697b      	ldr	r3, [r7, #20]
 8005e30:	781b      	ldrb	r3, [r3, #0]
 8005e32:	b2db      	uxtb	r3, r3
 8005e34:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005e36:	697b      	ldr	r3, [r7, #20]
 8005e38:	22ff      	movs	r2, #255	@ 0xff
 8005e3a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005e3c:	697b      	ldr	r3, [r7, #20]
 8005e3e:	781b      	ldrb	r3, [r3, #0]
 8005e40:	b2db      	uxtb	r3, r3
 8005e42:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005e44:	78fb      	ldrb	r3, [r7, #3]
 8005e46:	b2db      	uxtb	r3, r3
 8005e48:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8005e4c:	b2da      	uxtb	r2, r3
 8005e4e:	4b31      	ldr	r3, [pc, #196]	@ (8005f14 <xPortStartScheduler+0x134>)
 8005e50:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005e52:	4b31      	ldr	r3, [pc, #196]	@ (8005f18 <xPortStartScheduler+0x138>)
 8005e54:	2207      	movs	r2, #7
 8005e56:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005e58:	e009      	b.n	8005e6e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 8005e5a:	4b2f      	ldr	r3, [pc, #188]	@ (8005f18 <xPortStartScheduler+0x138>)
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	3b01      	subs	r3, #1
 8005e60:	4a2d      	ldr	r2, [pc, #180]	@ (8005f18 <xPortStartScheduler+0x138>)
 8005e62:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005e64:	78fb      	ldrb	r3, [r7, #3]
 8005e66:	b2db      	uxtb	r3, r3
 8005e68:	005b      	lsls	r3, r3, #1
 8005e6a:	b2db      	uxtb	r3, r3
 8005e6c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005e6e:	78fb      	ldrb	r3, [r7, #3]
 8005e70:	b2db      	uxtb	r3, r3
 8005e72:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005e76:	2b80      	cmp	r3, #128	@ 0x80
 8005e78:	d0ef      	beq.n	8005e5a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005e7a:	4b27      	ldr	r3, [pc, #156]	@ (8005f18 <xPortStartScheduler+0x138>)
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	f1c3 0307 	rsb	r3, r3, #7
 8005e82:	2b04      	cmp	r3, #4
 8005e84:	d00b      	beq.n	8005e9e <xPortStartScheduler+0xbe>
	__asm volatile
 8005e86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e8a:	f383 8811 	msr	BASEPRI, r3
 8005e8e:	f3bf 8f6f 	isb	sy
 8005e92:	f3bf 8f4f 	dsb	sy
 8005e96:	60bb      	str	r3, [r7, #8]
}
 8005e98:	bf00      	nop
 8005e9a:	bf00      	nop
 8005e9c:	e7fd      	b.n	8005e9a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005e9e:	4b1e      	ldr	r3, [pc, #120]	@ (8005f18 <xPortStartScheduler+0x138>)
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	021b      	lsls	r3, r3, #8
 8005ea4:	4a1c      	ldr	r2, [pc, #112]	@ (8005f18 <xPortStartScheduler+0x138>)
 8005ea6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005ea8:	4b1b      	ldr	r3, [pc, #108]	@ (8005f18 <xPortStartScheduler+0x138>)
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8005eb0:	4a19      	ldr	r2, [pc, #100]	@ (8005f18 <xPortStartScheduler+0x138>)
 8005eb2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	b2da      	uxtb	r2, r3
 8005eb8:	697b      	ldr	r3, [r7, #20]
 8005eba:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005ebc:	4b17      	ldr	r3, [pc, #92]	@ (8005f1c <xPortStartScheduler+0x13c>)
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	4a16      	ldr	r2, [pc, #88]	@ (8005f1c <xPortStartScheduler+0x13c>)
 8005ec2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8005ec6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005ec8:	4b14      	ldr	r3, [pc, #80]	@ (8005f1c <xPortStartScheduler+0x13c>)
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	4a13      	ldr	r2, [pc, #76]	@ (8005f1c <xPortStartScheduler+0x13c>)
 8005ece:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8005ed2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005ed4:	f000 f8da 	bl	800608c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005ed8:	4b11      	ldr	r3, [pc, #68]	@ (8005f20 <xPortStartScheduler+0x140>)
 8005eda:	2200      	movs	r2, #0
 8005edc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8005ede:	f000 f8f9 	bl	80060d4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8005ee2:	4b10      	ldr	r3, [pc, #64]	@ (8005f24 <xPortStartScheduler+0x144>)
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	4a0f      	ldr	r2, [pc, #60]	@ (8005f24 <xPortStartScheduler+0x144>)
 8005ee8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8005eec:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005eee:	f7ff ff63 	bl	8005db8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005ef2:	f001 fd33 	bl	800795c <vTaskSwitchContext>
	prvTaskExitError();
 8005ef6:	f7ff ff19 	bl	8005d2c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8005efa:	2300      	movs	r3, #0
}
 8005efc:	4618      	mov	r0, r3
 8005efe:	3718      	adds	r7, #24
 8005f00:	46bd      	mov	sp, r7
 8005f02:	bd80      	pop	{r7, pc}
 8005f04:	e000ed00 	.word	0xe000ed00
 8005f08:	410fc271 	.word	0x410fc271
 8005f0c:	410fc270 	.word	0x410fc270
 8005f10:	e000e400 	.word	0xe000e400
 8005f14:	2000265c 	.word	0x2000265c
 8005f18:	20002660 	.word	0x20002660
 8005f1c:	e000ed20 	.word	0xe000ed20
 8005f20:	20000014 	.word	0x20000014
 8005f24:	e000ef34 	.word	0xe000ef34

08005f28 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005f28:	b480      	push	{r7}
 8005f2a:	b083      	sub	sp, #12
 8005f2c:	af00      	add	r7, sp, #0
	__asm volatile
 8005f2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f32:	f383 8811 	msr	BASEPRI, r3
 8005f36:	f3bf 8f6f 	isb	sy
 8005f3a:	f3bf 8f4f 	dsb	sy
 8005f3e:	607b      	str	r3, [r7, #4]
}
 8005f40:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005f42:	4b10      	ldr	r3, [pc, #64]	@ (8005f84 <vPortEnterCritical+0x5c>)
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	3301      	adds	r3, #1
 8005f48:	4a0e      	ldr	r2, [pc, #56]	@ (8005f84 <vPortEnterCritical+0x5c>)
 8005f4a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005f4c:	4b0d      	ldr	r3, [pc, #52]	@ (8005f84 <vPortEnterCritical+0x5c>)
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	2b01      	cmp	r3, #1
 8005f52:	d110      	bne.n	8005f76 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005f54:	4b0c      	ldr	r3, [pc, #48]	@ (8005f88 <vPortEnterCritical+0x60>)
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	b2db      	uxtb	r3, r3
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d00b      	beq.n	8005f76 <vPortEnterCritical+0x4e>
	__asm volatile
 8005f5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f62:	f383 8811 	msr	BASEPRI, r3
 8005f66:	f3bf 8f6f 	isb	sy
 8005f6a:	f3bf 8f4f 	dsb	sy
 8005f6e:	603b      	str	r3, [r7, #0]
}
 8005f70:	bf00      	nop
 8005f72:	bf00      	nop
 8005f74:	e7fd      	b.n	8005f72 <vPortEnterCritical+0x4a>
	}
}
 8005f76:	bf00      	nop
 8005f78:	370c      	adds	r7, #12
 8005f7a:	46bd      	mov	sp, r7
 8005f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f80:	4770      	bx	lr
 8005f82:	bf00      	nop
 8005f84:	20000014 	.word	0x20000014
 8005f88:	e000ed04 	.word	0xe000ed04

08005f8c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005f8c:	b480      	push	{r7}
 8005f8e:	b083      	sub	sp, #12
 8005f90:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8005f92:	4b12      	ldr	r3, [pc, #72]	@ (8005fdc <vPortExitCritical+0x50>)
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d10b      	bne.n	8005fb2 <vPortExitCritical+0x26>
	__asm volatile
 8005f9a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f9e:	f383 8811 	msr	BASEPRI, r3
 8005fa2:	f3bf 8f6f 	isb	sy
 8005fa6:	f3bf 8f4f 	dsb	sy
 8005faa:	607b      	str	r3, [r7, #4]
}
 8005fac:	bf00      	nop
 8005fae:	bf00      	nop
 8005fb0:	e7fd      	b.n	8005fae <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8005fb2:	4b0a      	ldr	r3, [pc, #40]	@ (8005fdc <vPortExitCritical+0x50>)
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	3b01      	subs	r3, #1
 8005fb8:	4a08      	ldr	r2, [pc, #32]	@ (8005fdc <vPortExitCritical+0x50>)
 8005fba:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005fbc:	4b07      	ldr	r3, [pc, #28]	@ (8005fdc <vPortExitCritical+0x50>)
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d105      	bne.n	8005fd0 <vPortExitCritical+0x44>
 8005fc4:	2300      	movs	r3, #0
 8005fc6:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005fc8:	683b      	ldr	r3, [r7, #0]
 8005fca:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8005fce:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8005fd0:	bf00      	nop
 8005fd2:	370c      	adds	r7, #12
 8005fd4:	46bd      	mov	sp, r7
 8005fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fda:	4770      	bx	lr
 8005fdc:	20000014 	.word	0x20000014

08005fe0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005fe0:	f3ef 8009 	mrs	r0, PSP
 8005fe4:	f3bf 8f6f 	isb	sy
 8005fe8:	4b15      	ldr	r3, [pc, #84]	@ (8006040 <pxCurrentTCBConst>)
 8005fea:	681a      	ldr	r2, [r3, #0]
 8005fec:	f01e 0f10 	tst.w	lr, #16
 8005ff0:	bf08      	it	eq
 8005ff2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005ff6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ffa:	6010      	str	r0, [r2, #0]
 8005ffc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006000:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8006004:	f380 8811 	msr	BASEPRI, r0
 8006008:	f3bf 8f4f 	dsb	sy
 800600c:	f3bf 8f6f 	isb	sy
 8006010:	f001 fca4 	bl	800795c <vTaskSwitchContext>
 8006014:	f04f 0000 	mov.w	r0, #0
 8006018:	f380 8811 	msr	BASEPRI, r0
 800601c:	bc09      	pop	{r0, r3}
 800601e:	6819      	ldr	r1, [r3, #0]
 8006020:	6808      	ldr	r0, [r1, #0]
 8006022:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006026:	f01e 0f10 	tst.w	lr, #16
 800602a:	bf08      	it	eq
 800602c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006030:	f380 8809 	msr	PSP, r0
 8006034:	f3bf 8f6f 	isb	sy
 8006038:	4770      	bx	lr
 800603a:	bf00      	nop
 800603c:	f3af 8000 	nop.w

08006040 <pxCurrentTCBConst>:
 8006040:	200026a4 	.word	0x200026a4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006044:	bf00      	nop
 8006046:	bf00      	nop

08006048 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006048:	b580      	push	{r7, lr}
 800604a:	b082      	sub	sp, #8
 800604c:	af00      	add	r7, sp, #0
	__asm volatile
 800604e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006052:	f383 8811 	msr	BASEPRI, r3
 8006056:	f3bf 8f6f 	isb	sy
 800605a:	f3bf 8f4f 	dsb	sy
 800605e:	607b      	str	r3, [r7, #4]
}
 8006060:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006062:	f001 fbc1 	bl	80077e8 <xTaskIncrementTick>
 8006066:	4603      	mov	r3, r0
 8006068:	2b00      	cmp	r3, #0
 800606a:	d003      	beq.n	8006074 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800606c:	4b06      	ldr	r3, [pc, #24]	@ (8006088 <xPortSysTickHandler+0x40>)
 800606e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006072:	601a      	str	r2, [r3, #0]
 8006074:	2300      	movs	r3, #0
 8006076:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006078:	683b      	ldr	r3, [r7, #0]
 800607a:	f383 8811 	msr	BASEPRI, r3
}
 800607e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006080:	bf00      	nop
 8006082:	3708      	adds	r7, #8
 8006084:	46bd      	mov	sp, r7
 8006086:	bd80      	pop	{r7, pc}
 8006088:	e000ed04 	.word	0xe000ed04

0800608c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800608c:	b480      	push	{r7}
 800608e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006090:	4b0b      	ldr	r3, [pc, #44]	@ (80060c0 <vPortSetupTimerInterrupt+0x34>)
 8006092:	2200      	movs	r2, #0
 8006094:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006096:	4b0b      	ldr	r3, [pc, #44]	@ (80060c4 <vPortSetupTimerInterrupt+0x38>)
 8006098:	2200      	movs	r2, #0
 800609a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800609c:	4b0a      	ldr	r3, [pc, #40]	@ (80060c8 <vPortSetupTimerInterrupt+0x3c>)
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	4a0a      	ldr	r2, [pc, #40]	@ (80060cc <vPortSetupTimerInterrupt+0x40>)
 80060a2:	fba2 2303 	umull	r2, r3, r2, r3
 80060a6:	099b      	lsrs	r3, r3, #6
 80060a8:	4a09      	ldr	r2, [pc, #36]	@ (80060d0 <vPortSetupTimerInterrupt+0x44>)
 80060aa:	3b01      	subs	r3, #1
 80060ac:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80060ae:	4b04      	ldr	r3, [pc, #16]	@ (80060c0 <vPortSetupTimerInterrupt+0x34>)
 80060b0:	2207      	movs	r2, #7
 80060b2:	601a      	str	r2, [r3, #0]
}
 80060b4:	bf00      	nop
 80060b6:	46bd      	mov	sp, r7
 80060b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060bc:	4770      	bx	lr
 80060be:	bf00      	nop
 80060c0:	e000e010 	.word	0xe000e010
 80060c4:	e000e018 	.word	0xe000e018
 80060c8:	20000008 	.word	0x20000008
 80060cc:	10624dd3 	.word	0x10624dd3
 80060d0:	e000e014 	.word	0xe000e014

080060d4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80060d4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 80060e4 <vPortEnableVFP+0x10>
 80060d8:	6801      	ldr	r1, [r0, #0]
 80060da:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80060de:	6001      	str	r1, [r0, #0]
 80060e0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80060e2:	bf00      	nop
 80060e4:	e000ed88 	.word	0xe000ed88

080060e8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80060e8:	b480      	push	{r7}
 80060ea:	b085      	sub	sp, #20
 80060ec:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80060ee:	f3ef 8305 	mrs	r3, IPSR
 80060f2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	2b0f      	cmp	r3, #15
 80060f8:	d915      	bls.n	8006126 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80060fa:	4a18      	ldr	r2, [pc, #96]	@ (800615c <vPortValidateInterruptPriority+0x74>)
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	4413      	add	r3, r2
 8006100:	781b      	ldrb	r3, [r3, #0]
 8006102:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006104:	4b16      	ldr	r3, [pc, #88]	@ (8006160 <vPortValidateInterruptPriority+0x78>)
 8006106:	781b      	ldrb	r3, [r3, #0]
 8006108:	7afa      	ldrb	r2, [r7, #11]
 800610a:	429a      	cmp	r2, r3
 800610c:	d20b      	bcs.n	8006126 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800610e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006112:	f383 8811 	msr	BASEPRI, r3
 8006116:	f3bf 8f6f 	isb	sy
 800611a:	f3bf 8f4f 	dsb	sy
 800611e:	607b      	str	r3, [r7, #4]
}
 8006120:	bf00      	nop
 8006122:	bf00      	nop
 8006124:	e7fd      	b.n	8006122 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006126:	4b0f      	ldr	r3, [pc, #60]	@ (8006164 <vPortValidateInterruptPriority+0x7c>)
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800612e:	4b0e      	ldr	r3, [pc, #56]	@ (8006168 <vPortValidateInterruptPriority+0x80>)
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	429a      	cmp	r2, r3
 8006134:	d90b      	bls.n	800614e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8006136:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800613a:	f383 8811 	msr	BASEPRI, r3
 800613e:	f3bf 8f6f 	isb	sy
 8006142:	f3bf 8f4f 	dsb	sy
 8006146:	603b      	str	r3, [r7, #0]
}
 8006148:	bf00      	nop
 800614a:	bf00      	nop
 800614c:	e7fd      	b.n	800614a <vPortValidateInterruptPriority+0x62>
	}
 800614e:	bf00      	nop
 8006150:	3714      	adds	r7, #20
 8006152:	46bd      	mov	sp, r7
 8006154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006158:	4770      	bx	lr
 800615a:	bf00      	nop
 800615c:	e000e3f0 	.word	0xe000e3f0
 8006160:	2000265c 	.word	0x2000265c
 8006164:	e000ed0c 	.word	0xe000ed0c
 8006168:	20002660 	.word	0x20002660

0800616c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800616c:	b580      	push	{r7, lr}
 800616e:	b084      	sub	sp, #16
 8006170:	af00      	add	r7, sp, #0
 8006172:	6078      	str	r0, [r7, #4]
 8006174:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	2b00      	cmp	r3, #0
 800617e:	d10b      	bne.n	8006198 <xQueueGenericReset+0x2c>
	__asm volatile
 8006180:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006184:	f383 8811 	msr	BASEPRI, r3
 8006188:	f3bf 8f6f 	isb	sy
 800618c:	f3bf 8f4f 	dsb	sy
 8006190:	60bb      	str	r3, [r7, #8]
}
 8006192:	bf00      	nop
 8006194:	bf00      	nop
 8006196:	e7fd      	b.n	8006194 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8006198:	f7ff fec6 	bl	8005f28 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	681a      	ldr	r2, [r3, #0]
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80061a4:	68f9      	ldr	r1, [r7, #12]
 80061a6:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80061a8:	fb01 f303 	mul.w	r3, r1, r3
 80061ac:	441a      	add	r2, r3
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	2200      	movs	r2, #0
 80061b6:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	681a      	ldr	r2, [r3, #0]
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	681a      	ldr	r2, [r3, #0]
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80061c8:	3b01      	subs	r3, #1
 80061ca:	68f9      	ldr	r1, [r7, #12]
 80061cc:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80061ce:	fb01 f303 	mul.w	r3, r1, r3
 80061d2:	441a      	add	r2, r3
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	22ff      	movs	r2, #255	@ 0xff
 80061dc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	22ff      	movs	r2, #255	@ 0xff
 80061e4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 80061e8:	683b      	ldr	r3, [r7, #0]
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d114      	bne.n	8006218 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	691b      	ldr	r3, [r3, #16]
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d01a      	beq.n	800622c <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	3310      	adds	r3, #16
 80061fa:	4618      	mov	r0, r3
 80061fc:	f001 fc66 	bl	8007acc <xTaskRemoveFromEventList>
 8006200:	4603      	mov	r3, r0
 8006202:	2b00      	cmp	r3, #0
 8006204:	d012      	beq.n	800622c <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8006206:	4b0d      	ldr	r3, [pc, #52]	@ (800623c <xQueueGenericReset+0xd0>)
 8006208:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800620c:	601a      	str	r2, [r3, #0]
 800620e:	f3bf 8f4f 	dsb	sy
 8006212:	f3bf 8f6f 	isb	sy
 8006216:	e009      	b.n	800622c <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	3310      	adds	r3, #16
 800621c:	4618      	mov	r0, r3
 800621e:	f7ff fc9d 	bl	8005b5c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	3324      	adds	r3, #36	@ 0x24
 8006226:	4618      	mov	r0, r3
 8006228:	f7ff fc98 	bl	8005b5c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800622c:	f7ff feae 	bl	8005f8c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8006230:	2301      	movs	r3, #1
}
 8006232:	4618      	mov	r0, r3
 8006234:	3710      	adds	r7, #16
 8006236:	46bd      	mov	sp, r7
 8006238:	bd80      	pop	{r7, pc}
 800623a:	bf00      	nop
 800623c:	e000ed04 	.word	0xe000ed04

08006240 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8006240:	b580      	push	{r7, lr}
 8006242:	b08e      	sub	sp, #56	@ 0x38
 8006244:	af02      	add	r7, sp, #8
 8006246:	60f8      	str	r0, [r7, #12]
 8006248:	60b9      	str	r1, [r7, #8]
 800624a:	607a      	str	r2, [r7, #4]
 800624c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	2b00      	cmp	r3, #0
 8006252:	d10b      	bne.n	800626c <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8006254:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006258:	f383 8811 	msr	BASEPRI, r3
 800625c:	f3bf 8f6f 	isb	sy
 8006260:	f3bf 8f4f 	dsb	sy
 8006264:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8006266:	bf00      	nop
 8006268:	bf00      	nop
 800626a:	e7fd      	b.n	8006268 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800626c:	683b      	ldr	r3, [r7, #0]
 800626e:	2b00      	cmp	r3, #0
 8006270:	d10b      	bne.n	800628a <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8006272:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006276:	f383 8811 	msr	BASEPRI, r3
 800627a:	f3bf 8f6f 	isb	sy
 800627e:	f3bf 8f4f 	dsb	sy
 8006282:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8006284:	bf00      	nop
 8006286:	bf00      	nop
 8006288:	e7fd      	b.n	8006286 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	2b00      	cmp	r3, #0
 800628e:	d002      	beq.n	8006296 <xQueueGenericCreateStatic+0x56>
 8006290:	68bb      	ldr	r3, [r7, #8]
 8006292:	2b00      	cmp	r3, #0
 8006294:	d001      	beq.n	800629a <xQueueGenericCreateStatic+0x5a>
 8006296:	2301      	movs	r3, #1
 8006298:	e000      	b.n	800629c <xQueueGenericCreateStatic+0x5c>
 800629a:	2300      	movs	r3, #0
 800629c:	2b00      	cmp	r3, #0
 800629e:	d10b      	bne.n	80062b8 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 80062a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80062a4:	f383 8811 	msr	BASEPRI, r3
 80062a8:	f3bf 8f6f 	isb	sy
 80062ac:	f3bf 8f4f 	dsb	sy
 80062b0:	623b      	str	r3, [r7, #32]
}
 80062b2:	bf00      	nop
 80062b4:	bf00      	nop
 80062b6:	e7fd      	b.n	80062b4 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d102      	bne.n	80062c4 <xQueueGenericCreateStatic+0x84>
 80062be:	68bb      	ldr	r3, [r7, #8]
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d101      	bne.n	80062c8 <xQueueGenericCreateStatic+0x88>
 80062c4:	2301      	movs	r3, #1
 80062c6:	e000      	b.n	80062ca <xQueueGenericCreateStatic+0x8a>
 80062c8:	2300      	movs	r3, #0
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d10b      	bne.n	80062e6 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 80062ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80062d2:	f383 8811 	msr	BASEPRI, r3
 80062d6:	f3bf 8f6f 	isb	sy
 80062da:	f3bf 8f4f 	dsb	sy
 80062de:	61fb      	str	r3, [r7, #28]
}
 80062e0:	bf00      	nop
 80062e2:	bf00      	nop
 80062e4:	e7fd      	b.n	80062e2 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80062e6:	2350      	movs	r3, #80	@ 0x50
 80062e8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80062ea:	697b      	ldr	r3, [r7, #20]
 80062ec:	2b50      	cmp	r3, #80	@ 0x50
 80062ee:	d00b      	beq.n	8006308 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 80062f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80062f4:	f383 8811 	msr	BASEPRI, r3
 80062f8:	f3bf 8f6f 	isb	sy
 80062fc:	f3bf 8f4f 	dsb	sy
 8006300:	61bb      	str	r3, [r7, #24]
}
 8006302:	bf00      	nop
 8006304:	bf00      	nop
 8006306:	e7fd      	b.n	8006304 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8006308:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800630a:	683b      	ldr	r3, [r7, #0]
 800630c:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800630e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006310:	2b00      	cmp	r3, #0
 8006312:	d00d      	beq.n	8006330 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8006314:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006316:	2201      	movs	r2, #1
 8006318:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800631c:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8006320:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006322:	9300      	str	r3, [sp, #0]
 8006324:	4613      	mov	r3, r2
 8006326:	687a      	ldr	r2, [r7, #4]
 8006328:	68b9      	ldr	r1, [r7, #8]
 800632a:	68f8      	ldr	r0, [r7, #12]
 800632c:	f000 f840 	bl	80063b0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006330:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8006332:	4618      	mov	r0, r3
 8006334:	3730      	adds	r7, #48	@ 0x30
 8006336:	46bd      	mov	sp, r7
 8006338:	bd80      	pop	{r7, pc}

0800633a <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800633a:	b580      	push	{r7, lr}
 800633c:	b08a      	sub	sp, #40	@ 0x28
 800633e:	af02      	add	r7, sp, #8
 8006340:	60f8      	str	r0, [r7, #12]
 8006342:	60b9      	str	r1, [r7, #8]
 8006344:	4613      	mov	r3, r2
 8006346:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	2b00      	cmp	r3, #0
 800634c:	d10b      	bne.n	8006366 <xQueueGenericCreate+0x2c>
	__asm volatile
 800634e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006352:	f383 8811 	msr	BASEPRI, r3
 8006356:	f3bf 8f6f 	isb	sy
 800635a:	f3bf 8f4f 	dsb	sy
 800635e:	613b      	str	r3, [r7, #16]
}
 8006360:	bf00      	nop
 8006362:	bf00      	nop
 8006364:	e7fd      	b.n	8006362 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	68ba      	ldr	r2, [r7, #8]
 800636a:	fb02 f303 	mul.w	r3, r2, r3
 800636e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8006370:	69fb      	ldr	r3, [r7, #28]
 8006372:	3350      	adds	r3, #80	@ 0x50
 8006374:	4618      	mov	r0, r3
 8006376:	f7ff fa03 	bl	8005780 <pvPortMalloc>
 800637a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800637c:	69bb      	ldr	r3, [r7, #24]
 800637e:	2b00      	cmp	r3, #0
 8006380:	d011      	beq.n	80063a6 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8006382:	69bb      	ldr	r3, [r7, #24]
 8006384:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006386:	697b      	ldr	r3, [r7, #20]
 8006388:	3350      	adds	r3, #80	@ 0x50
 800638a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800638c:	69bb      	ldr	r3, [r7, #24]
 800638e:	2200      	movs	r2, #0
 8006390:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006394:	79fa      	ldrb	r2, [r7, #7]
 8006396:	69bb      	ldr	r3, [r7, #24]
 8006398:	9300      	str	r3, [sp, #0]
 800639a:	4613      	mov	r3, r2
 800639c:	697a      	ldr	r2, [r7, #20]
 800639e:	68b9      	ldr	r1, [r7, #8]
 80063a0:	68f8      	ldr	r0, [r7, #12]
 80063a2:	f000 f805 	bl	80063b0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80063a6:	69bb      	ldr	r3, [r7, #24]
	}
 80063a8:	4618      	mov	r0, r3
 80063aa:	3720      	adds	r7, #32
 80063ac:	46bd      	mov	sp, r7
 80063ae:	bd80      	pop	{r7, pc}

080063b0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80063b0:	b580      	push	{r7, lr}
 80063b2:	b084      	sub	sp, #16
 80063b4:	af00      	add	r7, sp, #0
 80063b6:	60f8      	str	r0, [r7, #12]
 80063b8:	60b9      	str	r1, [r7, #8]
 80063ba:	607a      	str	r2, [r7, #4]
 80063bc:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80063be:	68bb      	ldr	r3, [r7, #8]
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d103      	bne.n	80063cc <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80063c4:	69bb      	ldr	r3, [r7, #24]
 80063c6:	69ba      	ldr	r2, [r7, #24]
 80063c8:	601a      	str	r2, [r3, #0]
 80063ca:	e002      	b.n	80063d2 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80063cc:	69bb      	ldr	r3, [r7, #24]
 80063ce:	687a      	ldr	r2, [r7, #4]
 80063d0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80063d2:	69bb      	ldr	r3, [r7, #24]
 80063d4:	68fa      	ldr	r2, [r7, #12]
 80063d6:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80063d8:	69bb      	ldr	r3, [r7, #24]
 80063da:	68ba      	ldr	r2, [r7, #8]
 80063dc:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80063de:	2101      	movs	r1, #1
 80063e0:	69b8      	ldr	r0, [r7, #24]
 80063e2:	f7ff fec3 	bl	800616c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80063e6:	69bb      	ldr	r3, [r7, #24]
 80063e8:	78fa      	ldrb	r2, [r7, #3]
 80063ea:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80063ee:	bf00      	nop
 80063f0:	3710      	adds	r7, #16
 80063f2:	46bd      	mov	sp, r7
 80063f4:	bd80      	pop	{r7, pc}

080063f6 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 80063f6:	b580      	push	{r7, lr}
 80063f8:	b082      	sub	sp, #8
 80063fa:	af00      	add	r7, sp, #0
 80063fc:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	2b00      	cmp	r3, #0
 8006402:	d00e      	beq.n	8006422 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	2200      	movs	r2, #0
 8006408:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	2200      	movs	r2, #0
 800640e:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	2200      	movs	r2, #0
 8006414:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8006416:	2300      	movs	r3, #0
 8006418:	2200      	movs	r2, #0
 800641a:	2100      	movs	r1, #0
 800641c:	6878      	ldr	r0, [r7, #4]
 800641e:	f000 f8a3 	bl	8006568 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8006422:	bf00      	nop
 8006424:	3708      	adds	r7, #8
 8006426:	46bd      	mov	sp, r7
 8006428:	bd80      	pop	{r7, pc}

0800642a <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800642a:	b580      	push	{r7, lr}
 800642c:	b086      	sub	sp, #24
 800642e:	af00      	add	r7, sp, #0
 8006430:	4603      	mov	r3, r0
 8006432:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8006434:	2301      	movs	r3, #1
 8006436:	617b      	str	r3, [r7, #20]
 8006438:	2300      	movs	r3, #0
 800643a:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800643c:	79fb      	ldrb	r3, [r7, #7]
 800643e:	461a      	mov	r2, r3
 8006440:	6939      	ldr	r1, [r7, #16]
 8006442:	6978      	ldr	r0, [r7, #20]
 8006444:	f7ff ff79 	bl	800633a <xQueueGenericCreate>
 8006448:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800644a:	68f8      	ldr	r0, [r7, #12]
 800644c:	f7ff ffd3 	bl	80063f6 <prvInitialiseMutex>

		return xNewQueue;
 8006450:	68fb      	ldr	r3, [r7, #12]
	}
 8006452:	4618      	mov	r0, r3
 8006454:	3718      	adds	r7, #24
 8006456:	46bd      	mov	sp, r7
 8006458:	bd80      	pop	{r7, pc}

0800645a <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800645a:	b580      	push	{r7, lr}
 800645c:	b088      	sub	sp, #32
 800645e:	af02      	add	r7, sp, #8
 8006460:	4603      	mov	r3, r0
 8006462:	6039      	str	r1, [r7, #0]
 8006464:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8006466:	2301      	movs	r3, #1
 8006468:	617b      	str	r3, [r7, #20]
 800646a:	2300      	movs	r3, #0
 800646c:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800646e:	79fb      	ldrb	r3, [r7, #7]
 8006470:	9300      	str	r3, [sp, #0]
 8006472:	683b      	ldr	r3, [r7, #0]
 8006474:	2200      	movs	r2, #0
 8006476:	6939      	ldr	r1, [r7, #16]
 8006478:	6978      	ldr	r0, [r7, #20]
 800647a:	f7ff fee1 	bl	8006240 <xQueueGenericCreateStatic>
 800647e:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8006480:	68f8      	ldr	r0, [r7, #12]
 8006482:	f7ff ffb8 	bl	80063f6 <prvInitialiseMutex>

		return xNewQueue;
 8006486:	68fb      	ldr	r3, [r7, #12]
	}
 8006488:	4618      	mov	r0, r3
 800648a:	3718      	adds	r7, #24
 800648c:	46bd      	mov	sp, r7
 800648e:	bd80      	pop	{r7, pc}

08006490 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 8006490:	b590      	push	{r4, r7, lr}
 8006492:	b087      	sub	sp, #28
 8006494:	af00      	add	r7, sp, #0
 8006496:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800649c:	693b      	ldr	r3, [r7, #16]
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d10b      	bne.n	80064ba <xQueueGiveMutexRecursive+0x2a>
	__asm volatile
 80064a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80064a6:	f383 8811 	msr	BASEPRI, r3
 80064aa:	f3bf 8f6f 	isb	sy
 80064ae:	f3bf 8f4f 	dsb	sy
 80064b2:	60fb      	str	r3, [r7, #12]
}
 80064b4:	bf00      	nop
 80064b6:	bf00      	nop
 80064b8:	e7fd      	b.n	80064b6 <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 80064ba:	693b      	ldr	r3, [r7, #16]
 80064bc:	689c      	ldr	r4, [r3, #8]
 80064be:	f001 fccb 	bl	8007e58 <xTaskGetCurrentTaskHandle>
 80064c2:	4603      	mov	r3, r0
 80064c4:	429c      	cmp	r4, r3
 80064c6:	d111      	bne.n	80064ec <xQueueGiveMutexRecursive+0x5c>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 80064c8:	693b      	ldr	r3, [r7, #16]
 80064ca:	68db      	ldr	r3, [r3, #12]
 80064cc:	1e5a      	subs	r2, r3, #1
 80064ce:	693b      	ldr	r3, [r7, #16]
 80064d0:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 80064d2:	693b      	ldr	r3, [r7, #16]
 80064d4:	68db      	ldr	r3, [r3, #12]
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d105      	bne.n	80064e6 <xQueueGiveMutexRecursive+0x56>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 80064da:	2300      	movs	r3, #0
 80064dc:	2200      	movs	r2, #0
 80064de:	2100      	movs	r1, #0
 80064e0:	6938      	ldr	r0, [r7, #16]
 80064e2:	f000 f841 	bl	8006568 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 80064e6:	2301      	movs	r3, #1
 80064e8:	617b      	str	r3, [r7, #20]
 80064ea:	e001      	b.n	80064f0 <xQueueGiveMutexRecursive+0x60>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 80064ec:	2300      	movs	r3, #0
 80064ee:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 80064f0:	697b      	ldr	r3, [r7, #20]
	}
 80064f2:	4618      	mov	r0, r3
 80064f4:	371c      	adds	r7, #28
 80064f6:	46bd      	mov	sp, r7
 80064f8:	bd90      	pop	{r4, r7, pc}

080064fa <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 80064fa:	b590      	push	{r4, r7, lr}
 80064fc:	b087      	sub	sp, #28
 80064fe:	af00      	add	r7, sp, #0
 8006500:	6078      	str	r0, [r7, #4]
 8006502:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8006508:	693b      	ldr	r3, [r7, #16]
 800650a:	2b00      	cmp	r3, #0
 800650c:	d10b      	bne.n	8006526 <xQueueTakeMutexRecursive+0x2c>
	__asm volatile
 800650e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006512:	f383 8811 	msr	BASEPRI, r3
 8006516:	f3bf 8f6f 	isb	sy
 800651a:	f3bf 8f4f 	dsb	sy
 800651e:	60fb      	str	r3, [r7, #12]
}
 8006520:	bf00      	nop
 8006522:	bf00      	nop
 8006524:	e7fd      	b.n	8006522 <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8006526:	693b      	ldr	r3, [r7, #16]
 8006528:	689c      	ldr	r4, [r3, #8]
 800652a:	f001 fc95 	bl	8007e58 <xTaskGetCurrentTaskHandle>
 800652e:	4603      	mov	r3, r0
 8006530:	429c      	cmp	r4, r3
 8006532:	d107      	bne.n	8006544 <xQueueTakeMutexRecursive+0x4a>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8006534:	693b      	ldr	r3, [r7, #16]
 8006536:	68db      	ldr	r3, [r3, #12]
 8006538:	1c5a      	adds	r2, r3, #1
 800653a:	693b      	ldr	r3, [r7, #16]
 800653c:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 800653e:	2301      	movs	r3, #1
 8006540:	617b      	str	r3, [r7, #20]
 8006542:	e00c      	b.n	800655e <xQueueTakeMutexRecursive+0x64>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 8006544:	6839      	ldr	r1, [r7, #0]
 8006546:	6938      	ldr	r0, [r7, #16]
 8006548:	f000 fa90 	bl	8006a6c <xQueueSemaphoreTake>
 800654c:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 800654e:	697b      	ldr	r3, [r7, #20]
 8006550:	2b00      	cmp	r3, #0
 8006552:	d004      	beq.n	800655e <xQueueTakeMutexRecursive+0x64>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8006554:	693b      	ldr	r3, [r7, #16]
 8006556:	68db      	ldr	r3, [r3, #12]
 8006558:	1c5a      	adds	r2, r3, #1
 800655a:	693b      	ldr	r3, [r7, #16]
 800655c:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 800655e:	697b      	ldr	r3, [r7, #20]
	}
 8006560:	4618      	mov	r0, r3
 8006562:	371c      	adds	r7, #28
 8006564:	46bd      	mov	sp, r7
 8006566:	bd90      	pop	{r4, r7, pc}

08006568 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8006568:	b580      	push	{r7, lr}
 800656a:	b08e      	sub	sp, #56	@ 0x38
 800656c:	af00      	add	r7, sp, #0
 800656e:	60f8      	str	r0, [r7, #12]
 8006570:	60b9      	str	r1, [r7, #8]
 8006572:	607a      	str	r2, [r7, #4]
 8006574:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8006576:	2300      	movs	r3, #0
 8006578:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800657e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006580:	2b00      	cmp	r3, #0
 8006582:	d10b      	bne.n	800659c <xQueueGenericSend+0x34>
	__asm volatile
 8006584:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006588:	f383 8811 	msr	BASEPRI, r3
 800658c:	f3bf 8f6f 	isb	sy
 8006590:	f3bf 8f4f 	dsb	sy
 8006594:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8006596:	bf00      	nop
 8006598:	bf00      	nop
 800659a:	e7fd      	b.n	8006598 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800659c:	68bb      	ldr	r3, [r7, #8]
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d103      	bne.n	80065aa <xQueueGenericSend+0x42>
 80065a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80065a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d101      	bne.n	80065ae <xQueueGenericSend+0x46>
 80065aa:	2301      	movs	r3, #1
 80065ac:	e000      	b.n	80065b0 <xQueueGenericSend+0x48>
 80065ae:	2300      	movs	r3, #0
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d10b      	bne.n	80065cc <xQueueGenericSend+0x64>
	__asm volatile
 80065b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80065b8:	f383 8811 	msr	BASEPRI, r3
 80065bc:	f3bf 8f6f 	isb	sy
 80065c0:	f3bf 8f4f 	dsb	sy
 80065c4:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80065c6:	bf00      	nop
 80065c8:	bf00      	nop
 80065ca:	e7fd      	b.n	80065c8 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80065cc:	683b      	ldr	r3, [r7, #0]
 80065ce:	2b02      	cmp	r3, #2
 80065d0:	d103      	bne.n	80065da <xQueueGenericSend+0x72>
 80065d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80065d4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80065d6:	2b01      	cmp	r3, #1
 80065d8:	d101      	bne.n	80065de <xQueueGenericSend+0x76>
 80065da:	2301      	movs	r3, #1
 80065dc:	e000      	b.n	80065e0 <xQueueGenericSend+0x78>
 80065de:	2300      	movs	r3, #0
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d10b      	bne.n	80065fc <xQueueGenericSend+0x94>
	__asm volatile
 80065e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80065e8:	f383 8811 	msr	BASEPRI, r3
 80065ec:	f3bf 8f6f 	isb	sy
 80065f0:	f3bf 8f4f 	dsb	sy
 80065f4:	623b      	str	r3, [r7, #32]
}
 80065f6:	bf00      	nop
 80065f8:	bf00      	nop
 80065fa:	e7fd      	b.n	80065f8 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80065fc:	f001 fc3c 	bl	8007e78 <xTaskGetSchedulerState>
 8006600:	4603      	mov	r3, r0
 8006602:	2b00      	cmp	r3, #0
 8006604:	d102      	bne.n	800660c <xQueueGenericSend+0xa4>
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	2b00      	cmp	r3, #0
 800660a:	d101      	bne.n	8006610 <xQueueGenericSend+0xa8>
 800660c:	2301      	movs	r3, #1
 800660e:	e000      	b.n	8006612 <xQueueGenericSend+0xaa>
 8006610:	2300      	movs	r3, #0
 8006612:	2b00      	cmp	r3, #0
 8006614:	d10b      	bne.n	800662e <xQueueGenericSend+0xc6>
	__asm volatile
 8006616:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800661a:	f383 8811 	msr	BASEPRI, r3
 800661e:	f3bf 8f6f 	isb	sy
 8006622:	f3bf 8f4f 	dsb	sy
 8006626:	61fb      	str	r3, [r7, #28]
}
 8006628:	bf00      	nop
 800662a:	bf00      	nop
 800662c:	e7fd      	b.n	800662a <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800662e:	f7ff fc7b 	bl	8005f28 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006632:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006634:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006636:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006638:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800663a:	429a      	cmp	r2, r3
 800663c:	d302      	bcc.n	8006644 <xQueueGenericSend+0xdc>
 800663e:	683b      	ldr	r3, [r7, #0]
 8006640:	2b02      	cmp	r3, #2
 8006642:	d129      	bne.n	8006698 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006644:	683a      	ldr	r2, [r7, #0]
 8006646:	68b9      	ldr	r1, [r7, #8]
 8006648:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800664a:	f000 fb37 	bl	8006cbc <prvCopyDataToQueue>
 800664e:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006650:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006652:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006654:	2b00      	cmp	r3, #0
 8006656:	d010      	beq.n	800667a <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006658:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800665a:	3324      	adds	r3, #36	@ 0x24
 800665c:	4618      	mov	r0, r3
 800665e:	f001 fa35 	bl	8007acc <xTaskRemoveFromEventList>
 8006662:	4603      	mov	r3, r0
 8006664:	2b00      	cmp	r3, #0
 8006666:	d013      	beq.n	8006690 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8006668:	4b3f      	ldr	r3, [pc, #252]	@ (8006768 <xQueueGenericSend+0x200>)
 800666a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800666e:	601a      	str	r2, [r3, #0]
 8006670:	f3bf 8f4f 	dsb	sy
 8006674:	f3bf 8f6f 	isb	sy
 8006678:	e00a      	b.n	8006690 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800667a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800667c:	2b00      	cmp	r3, #0
 800667e:	d007      	beq.n	8006690 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8006680:	4b39      	ldr	r3, [pc, #228]	@ (8006768 <xQueueGenericSend+0x200>)
 8006682:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006686:	601a      	str	r2, [r3, #0]
 8006688:	f3bf 8f4f 	dsb	sy
 800668c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8006690:	f7ff fc7c 	bl	8005f8c <vPortExitCritical>
				return pdPASS;
 8006694:	2301      	movs	r3, #1
 8006696:	e063      	b.n	8006760 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	2b00      	cmp	r3, #0
 800669c:	d103      	bne.n	80066a6 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800669e:	f7ff fc75 	bl	8005f8c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80066a2:	2300      	movs	r3, #0
 80066a4:	e05c      	b.n	8006760 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80066a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	d106      	bne.n	80066ba <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80066ac:	f107 0314 	add.w	r3, r7, #20
 80066b0:	4618      	mov	r0, r3
 80066b2:	f001 fa6f 	bl	8007b94 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80066b6:	2301      	movs	r3, #1
 80066b8:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80066ba:	f7ff fc67 	bl	8005f8c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80066be:	f000 ffd7 	bl	8007670 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80066c2:	f7ff fc31 	bl	8005f28 <vPortEnterCritical>
 80066c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066c8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80066cc:	b25b      	sxtb	r3, r3
 80066ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80066d2:	d103      	bne.n	80066dc <xQueueGenericSend+0x174>
 80066d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066d6:	2200      	movs	r2, #0
 80066d8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80066dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066de:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80066e2:	b25b      	sxtb	r3, r3
 80066e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80066e8:	d103      	bne.n	80066f2 <xQueueGenericSend+0x18a>
 80066ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066ec:	2200      	movs	r2, #0
 80066ee:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80066f2:	f7ff fc4b 	bl	8005f8c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80066f6:	1d3a      	adds	r2, r7, #4
 80066f8:	f107 0314 	add.w	r3, r7, #20
 80066fc:	4611      	mov	r1, r2
 80066fe:	4618      	mov	r0, r3
 8006700:	f001 fa5e 	bl	8007bc0 <xTaskCheckForTimeOut>
 8006704:	4603      	mov	r3, r0
 8006706:	2b00      	cmp	r3, #0
 8006708:	d124      	bne.n	8006754 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800670a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800670c:	f000 fbce 	bl	8006eac <prvIsQueueFull>
 8006710:	4603      	mov	r3, r0
 8006712:	2b00      	cmp	r3, #0
 8006714:	d018      	beq.n	8006748 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8006716:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006718:	3310      	adds	r3, #16
 800671a:	687a      	ldr	r2, [r7, #4]
 800671c:	4611      	mov	r1, r2
 800671e:	4618      	mov	r0, r3
 8006720:	f001 f982 	bl	8007a28 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8006724:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006726:	f000 fb59 	bl	8006ddc <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800672a:	f000 ffaf 	bl	800768c <xTaskResumeAll>
 800672e:	4603      	mov	r3, r0
 8006730:	2b00      	cmp	r3, #0
 8006732:	f47f af7c 	bne.w	800662e <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8006736:	4b0c      	ldr	r3, [pc, #48]	@ (8006768 <xQueueGenericSend+0x200>)
 8006738:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800673c:	601a      	str	r2, [r3, #0]
 800673e:	f3bf 8f4f 	dsb	sy
 8006742:	f3bf 8f6f 	isb	sy
 8006746:	e772      	b.n	800662e <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8006748:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800674a:	f000 fb47 	bl	8006ddc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800674e:	f000 ff9d 	bl	800768c <xTaskResumeAll>
 8006752:	e76c      	b.n	800662e <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8006754:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006756:	f000 fb41 	bl	8006ddc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800675a:	f000 ff97 	bl	800768c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800675e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8006760:	4618      	mov	r0, r3
 8006762:	3738      	adds	r7, #56	@ 0x38
 8006764:	46bd      	mov	sp, r7
 8006766:	bd80      	pop	{r7, pc}
 8006768:	e000ed04 	.word	0xe000ed04

0800676c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800676c:	b580      	push	{r7, lr}
 800676e:	b090      	sub	sp, #64	@ 0x40
 8006770:	af00      	add	r7, sp, #0
 8006772:	60f8      	str	r0, [r7, #12]
 8006774:	60b9      	str	r1, [r7, #8]
 8006776:	607a      	str	r2, [r7, #4]
 8006778:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800677e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006780:	2b00      	cmp	r3, #0
 8006782:	d10b      	bne.n	800679c <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8006784:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006788:	f383 8811 	msr	BASEPRI, r3
 800678c:	f3bf 8f6f 	isb	sy
 8006790:	f3bf 8f4f 	dsb	sy
 8006794:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8006796:	bf00      	nop
 8006798:	bf00      	nop
 800679a:	e7fd      	b.n	8006798 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800679c:	68bb      	ldr	r3, [r7, #8]
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d103      	bne.n	80067aa <xQueueGenericSendFromISR+0x3e>
 80067a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80067a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d101      	bne.n	80067ae <xQueueGenericSendFromISR+0x42>
 80067aa:	2301      	movs	r3, #1
 80067ac:	e000      	b.n	80067b0 <xQueueGenericSendFromISR+0x44>
 80067ae:	2300      	movs	r3, #0
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	d10b      	bne.n	80067cc <xQueueGenericSendFromISR+0x60>
	__asm volatile
 80067b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80067b8:	f383 8811 	msr	BASEPRI, r3
 80067bc:	f3bf 8f6f 	isb	sy
 80067c0:	f3bf 8f4f 	dsb	sy
 80067c4:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80067c6:	bf00      	nop
 80067c8:	bf00      	nop
 80067ca:	e7fd      	b.n	80067c8 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80067cc:	683b      	ldr	r3, [r7, #0]
 80067ce:	2b02      	cmp	r3, #2
 80067d0:	d103      	bne.n	80067da <xQueueGenericSendFromISR+0x6e>
 80067d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80067d4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80067d6:	2b01      	cmp	r3, #1
 80067d8:	d101      	bne.n	80067de <xQueueGenericSendFromISR+0x72>
 80067da:	2301      	movs	r3, #1
 80067dc:	e000      	b.n	80067e0 <xQueueGenericSendFromISR+0x74>
 80067de:	2300      	movs	r3, #0
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d10b      	bne.n	80067fc <xQueueGenericSendFromISR+0x90>
	__asm volatile
 80067e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80067e8:	f383 8811 	msr	BASEPRI, r3
 80067ec:	f3bf 8f6f 	isb	sy
 80067f0:	f3bf 8f4f 	dsb	sy
 80067f4:	623b      	str	r3, [r7, #32]
}
 80067f6:	bf00      	nop
 80067f8:	bf00      	nop
 80067fa:	e7fd      	b.n	80067f8 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80067fc:	f7ff fc74 	bl	80060e8 <vPortValidateInterruptPriority>
	__asm volatile
 8006800:	f3ef 8211 	mrs	r2, BASEPRI
 8006804:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006808:	f383 8811 	msr	BASEPRI, r3
 800680c:	f3bf 8f6f 	isb	sy
 8006810:	f3bf 8f4f 	dsb	sy
 8006814:	61fa      	str	r2, [r7, #28]
 8006816:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 8006818:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800681a:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800681c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800681e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006820:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006822:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006824:	429a      	cmp	r2, r3
 8006826:	d302      	bcc.n	800682e <xQueueGenericSendFromISR+0xc2>
 8006828:	683b      	ldr	r3, [r7, #0]
 800682a:	2b02      	cmp	r3, #2
 800682c:	d12f      	bne.n	800688e <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800682e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006830:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006834:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006838:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800683a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800683c:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800683e:	683a      	ldr	r2, [r7, #0]
 8006840:	68b9      	ldr	r1, [r7, #8]
 8006842:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8006844:	f000 fa3a 	bl	8006cbc <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006848:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 800684c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006850:	d112      	bne.n	8006878 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006852:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006854:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006856:	2b00      	cmp	r3, #0
 8006858:	d016      	beq.n	8006888 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800685a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800685c:	3324      	adds	r3, #36	@ 0x24
 800685e:	4618      	mov	r0, r3
 8006860:	f001 f934 	bl	8007acc <xTaskRemoveFromEventList>
 8006864:	4603      	mov	r3, r0
 8006866:	2b00      	cmp	r3, #0
 8006868:	d00e      	beq.n	8006888 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	2b00      	cmp	r3, #0
 800686e:	d00b      	beq.n	8006888 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	2201      	movs	r2, #1
 8006874:	601a      	str	r2, [r3, #0]
 8006876:	e007      	b.n	8006888 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006878:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800687c:	3301      	adds	r3, #1
 800687e:	b2db      	uxtb	r3, r3
 8006880:	b25a      	sxtb	r2, r3
 8006882:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006884:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8006888:	2301      	movs	r3, #1
 800688a:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 800688c:	e001      	b.n	8006892 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800688e:	2300      	movs	r3, #0
 8006890:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006892:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006894:	617b      	str	r3, [r7, #20]
	__asm volatile
 8006896:	697b      	ldr	r3, [r7, #20]
 8006898:	f383 8811 	msr	BASEPRI, r3
}
 800689c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800689e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 80068a0:	4618      	mov	r0, r3
 80068a2:	3740      	adds	r7, #64	@ 0x40
 80068a4:	46bd      	mov	sp, r7
 80068a6:	bd80      	pop	{r7, pc}

080068a8 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80068a8:	b580      	push	{r7, lr}
 80068aa:	b08c      	sub	sp, #48	@ 0x30
 80068ac:	af00      	add	r7, sp, #0
 80068ae:	60f8      	str	r0, [r7, #12]
 80068b0:	60b9      	str	r1, [r7, #8]
 80068b2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80068b4:	2300      	movs	r3, #0
 80068b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80068bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d10b      	bne.n	80068da <xQueueReceive+0x32>
	__asm volatile
 80068c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80068c6:	f383 8811 	msr	BASEPRI, r3
 80068ca:	f3bf 8f6f 	isb	sy
 80068ce:	f3bf 8f4f 	dsb	sy
 80068d2:	623b      	str	r3, [r7, #32]
}
 80068d4:	bf00      	nop
 80068d6:	bf00      	nop
 80068d8:	e7fd      	b.n	80068d6 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80068da:	68bb      	ldr	r3, [r7, #8]
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d103      	bne.n	80068e8 <xQueueReceive+0x40>
 80068e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80068e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	d101      	bne.n	80068ec <xQueueReceive+0x44>
 80068e8:	2301      	movs	r3, #1
 80068ea:	e000      	b.n	80068ee <xQueueReceive+0x46>
 80068ec:	2300      	movs	r3, #0
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d10b      	bne.n	800690a <xQueueReceive+0x62>
	__asm volatile
 80068f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80068f6:	f383 8811 	msr	BASEPRI, r3
 80068fa:	f3bf 8f6f 	isb	sy
 80068fe:	f3bf 8f4f 	dsb	sy
 8006902:	61fb      	str	r3, [r7, #28]
}
 8006904:	bf00      	nop
 8006906:	bf00      	nop
 8006908:	e7fd      	b.n	8006906 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800690a:	f001 fab5 	bl	8007e78 <xTaskGetSchedulerState>
 800690e:	4603      	mov	r3, r0
 8006910:	2b00      	cmp	r3, #0
 8006912:	d102      	bne.n	800691a <xQueueReceive+0x72>
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	2b00      	cmp	r3, #0
 8006918:	d101      	bne.n	800691e <xQueueReceive+0x76>
 800691a:	2301      	movs	r3, #1
 800691c:	e000      	b.n	8006920 <xQueueReceive+0x78>
 800691e:	2300      	movs	r3, #0
 8006920:	2b00      	cmp	r3, #0
 8006922:	d10b      	bne.n	800693c <xQueueReceive+0x94>
	__asm volatile
 8006924:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006928:	f383 8811 	msr	BASEPRI, r3
 800692c:	f3bf 8f6f 	isb	sy
 8006930:	f3bf 8f4f 	dsb	sy
 8006934:	61bb      	str	r3, [r7, #24]
}
 8006936:	bf00      	nop
 8006938:	bf00      	nop
 800693a:	e7fd      	b.n	8006938 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800693c:	f7ff faf4 	bl	8005f28 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006940:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006942:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006944:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006946:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006948:	2b00      	cmp	r3, #0
 800694a:	d01f      	beq.n	800698c <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800694c:	68b9      	ldr	r1, [r7, #8]
 800694e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006950:	f000 fa1e 	bl	8006d90 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006954:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006956:	1e5a      	subs	r2, r3, #1
 8006958:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800695a:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800695c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800695e:	691b      	ldr	r3, [r3, #16]
 8006960:	2b00      	cmp	r3, #0
 8006962:	d00f      	beq.n	8006984 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006964:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006966:	3310      	adds	r3, #16
 8006968:	4618      	mov	r0, r3
 800696a:	f001 f8af 	bl	8007acc <xTaskRemoveFromEventList>
 800696e:	4603      	mov	r3, r0
 8006970:	2b00      	cmp	r3, #0
 8006972:	d007      	beq.n	8006984 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006974:	4b3c      	ldr	r3, [pc, #240]	@ (8006a68 <xQueueReceive+0x1c0>)
 8006976:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800697a:	601a      	str	r2, [r3, #0]
 800697c:	f3bf 8f4f 	dsb	sy
 8006980:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006984:	f7ff fb02 	bl	8005f8c <vPortExitCritical>
				return pdPASS;
 8006988:	2301      	movs	r3, #1
 800698a:	e069      	b.n	8006a60 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	2b00      	cmp	r3, #0
 8006990:	d103      	bne.n	800699a <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006992:	f7ff fafb 	bl	8005f8c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006996:	2300      	movs	r3, #0
 8006998:	e062      	b.n	8006a60 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800699a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800699c:	2b00      	cmp	r3, #0
 800699e:	d106      	bne.n	80069ae <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80069a0:	f107 0310 	add.w	r3, r7, #16
 80069a4:	4618      	mov	r0, r3
 80069a6:	f001 f8f5 	bl	8007b94 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80069aa:	2301      	movs	r3, #1
 80069ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80069ae:	f7ff faed 	bl	8005f8c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80069b2:	f000 fe5d 	bl	8007670 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80069b6:	f7ff fab7 	bl	8005f28 <vPortEnterCritical>
 80069ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80069bc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80069c0:	b25b      	sxtb	r3, r3
 80069c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80069c6:	d103      	bne.n	80069d0 <xQueueReceive+0x128>
 80069c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80069ca:	2200      	movs	r2, #0
 80069cc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80069d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80069d2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80069d6:	b25b      	sxtb	r3, r3
 80069d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80069dc:	d103      	bne.n	80069e6 <xQueueReceive+0x13e>
 80069de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80069e0:	2200      	movs	r2, #0
 80069e2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80069e6:	f7ff fad1 	bl	8005f8c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80069ea:	1d3a      	adds	r2, r7, #4
 80069ec:	f107 0310 	add.w	r3, r7, #16
 80069f0:	4611      	mov	r1, r2
 80069f2:	4618      	mov	r0, r3
 80069f4:	f001 f8e4 	bl	8007bc0 <xTaskCheckForTimeOut>
 80069f8:	4603      	mov	r3, r0
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d123      	bne.n	8006a46 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80069fe:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006a00:	f000 fa3e 	bl	8006e80 <prvIsQueueEmpty>
 8006a04:	4603      	mov	r3, r0
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d017      	beq.n	8006a3a <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006a0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a0c:	3324      	adds	r3, #36	@ 0x24
 8006a0e:	687a      	ldr	r2, [r7, #4]
 8006a10:	4611      	mov	r1, r2
 8006a12:	4618      	mov	r0, r3
 8006a14:	f001 f808 	bl	8007a28 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006a18:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006a1a:	f000 f9df 	bl	8006ddc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006a1e:	f000 fe35 	bl	800768c <xTaskResumeAll>
 8006a22:	4603      	mov	r3, r0
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	d189      	bne.n	800693c <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8006a28:	4b0f      	ldr	r3, [pc, #60]	@ (8006a68 <xQueueReceive+0x1c0>)
 8006a2a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006a2e:	601a      	str	r2, [r3, #0]
 8006a30:	f3bf 8f4f 	dsb	sy
 8006a34:	f3bf 8f6f 	isb	sy
 8006a38:	e780      	b.n	800693c <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8006a3a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006a3c:	f000 f9ce 	bl	8006ddc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006a40:	f000 fe24 	bl	800768c <xTaskResumeAll>
 8006a44:	e77a      	b.n	800693c <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8006a46:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006a48:	f000 f9c8 	bl	8006ddc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006a4c:	f000 fe1e 	bl	800768c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006a50:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006a52:	f000 fa15 	bl	8006e80 <prvIsQueueEmpty>
 8006a56:	4603      	mov	r3, r0
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	f43f af6f 	beq.w	800693c <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006a5e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8006a60:	4618      	mov	r0, r3
 8006a62:	3730      	adds	r7, #48	@ 0x30
 8006a64:	46bd      	mov	sp, r7
 8006a66:	bd80      	pop	{r7, pc}
 8006a68:	e000ed04 	.word	0xe000ed04

08006a6c <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8006a6c:	b580      	push	{r7, lr}
 8006a6e:	b08e      	sub	sp, #56	@ 0x38
 8006a70:	af00      	add	r7, sp, #0
 8006a72:	6078      	str	r0, [r7, #4]
 8006a74:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8006a76:	2300      	movs	r3, #0
 8006a78:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8006a7e:	2300      	movs	r3, #0
 8006a80:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006a82:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	d10b      	bne.n	8006aa0 <xQueueSemaphoreTake+0x34>
	__asm volatile
 8006a88:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a8c:	f383 8811 	msr	BASEPRI, r3
 8006a90:	f3bf 8f6f 	isb	sy
 8006a94:	f3bf 8f4f 	dsb	sy
 8006a98:	623b      	str	r3, [r7, #32]
}
 8006a9a:	bf00      	nop
 8006a9c:	bf00      	nop
 8006a9e:	e7fd      	b.n	8006a9c <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8006aa0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006aa2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d00b      	beq.n	8006ac0 <xQueueSemaphoreTake+0x54>
	__asm volatile
 8006aa8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006aac:	f383 8811 	msr	BASEPRI, r3
 8006ab0:	f3bf 8f6f 	isb	sy
 8006ab4:	f3bf 8f4f 	dsb	sy
 8006ab8:	61fb      	str	r3, [r7, #28]
}
 8006aba:	bf00      	nop
 8006abc:	bf00      	nop
 8006abe:	e7fd      	b.n	8006abc <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006ac0:	f001 f9da 	bl	8007e78 <xTaskGetSchedulerState>
 8006ac4:	4603      	mov	r3, r0
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d102      	bne.n	8006ad0 <xQueueSemaphoreTake+0x64>
 8006aca:	683b      	ldr	r3, [r7, #0]
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	d101      	bne.n	8006ad4 <xQueueSemaphoreTake+0x68>
 8006ad0:	2301      	movs	r3, #1
 8006ad2:	e000      	b.n	8006ad6 <xQueueSemaphoreTake+0x6a>
 8006ad4:	2300      	movs	r3, #0
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d10b      	bne.n	8006af2 <xQueueSemaphoreTake+0x86>
	__asm volatile
 8006ada:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ade:	f383 8811 	msr	BASEPRI, r3
 8006ae2:	f3bf 8f6f 	isb	sy
 8006ae6:	f3bf 8f4f 	dsb	sy
 8006aea:	61bb      	str	r3, [r7, #24]
}
 8006aec:	bf00      	nop
 8006aee:	bf00      	nop
 8006af0:	e7fd      	b.n	8006aee <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006af2:	f7ff fa19 	bl	8005f28 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8006af6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006af8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006afa:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8006afc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d024      	beq.n	8006b4c <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8006b02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b04:	1e5a      	subs	r2, r3, #1
 8006b06:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006b08:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006b0a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d104      	bne.n	8006b1c <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8006b12:	f001 fb2b 	bl	800816c <pvTaskIncrementMutexHeldCount>
 8006b16:	4602      	mov	r2, r0
 8006b18:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006b1a:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006b1c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006b1e:	691b      	ldr	r3, [r3, #16]
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	d00f      	beq.n	8006b44 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006b24:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006b26:	3310      	adds	r3, #16
 8006b28:	4618      	mov	r0, r3
 8006b2a:	f000 ffcf 	bl	8007acc <xTaskRemoveFromEventList>
 8006b2e:	4603      	mov	r3, r0
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	d007      	beq.n	8006b44 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006b34:	4b54      	ldr	r3, [pc, #336]	@ (8006c88 <xQueueSemaphoreTake+0x21c>)
 8006b36:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006b3a:	601a      	str	r2, [r3, #0]
 8006b3c:	f3bf 8f4f 	dsb	sy
 8006b40:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006b44:	f7ff fa22 	bl	8005f8c <vPortExitCritical>
				return pdPASS;
 8006b48:	2301      	movs	r3, #1
 8006b4a:	e098      	b.n	8006c7e <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006b4c:	683b      	ldr	r3, [r7, #0]
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d112      	bne.n	8006b78 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8006b52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	d00b      	beq.n	8006b70 <xQueueSemaphoreTake+0x104>
	__asm volatile
 8006b58:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b5c:	f383 8811 	msr	BASEPRI, r3
 8006b60:	f3bf 8f6f 	isb	sy
 8006b64:	f3bf 8f4f 	dsb	sy
 8006b68:	617b      	str	r3, [r7, #20]
}
 8006b6a:	bf00      	nop
 8006b6c:	bf00      	nop
 8006b6e:	e7fd      	b.n	8006b6c <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8006b70:	f7ff fa0c 	bl	8005f8c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006b74:	2300      	movs	r3, #0
 8006b76:	e082      	b.n	8006c7e <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006b78:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d106      	bne.n	8006b8c <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006b7e:	f107 030c 	add.w	r3, r7, #12
 8006b82:	4618      	mov	r0, r3
 8006b84:	f001 f806 	bl	8007b94 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006b88:	2301      	movs	r3, #1
 8006b8a:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006b8c:	f7ff f9fe 	bl	8005f8c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006b90:	f000 fd6e 	bl	8007670 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006b94:	f7ff f9c8 	bl	8005f28 <vPortEnterCritical>
 8006b98:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006b9a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006b9e:	b25b      	sxtb	r3, r3
 8006ba0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ba4:	d103      	bne.n	8006bae <xQueueSemaphoreTake+0x142>
 8006ba6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006ba8:	2200      	movs	r2, #0
 8006baa:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006bae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006bb0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006bb4:	b25b      	sxtb	r3, r3
 8006bb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006bba:	d103      	bne.n	8006bc4 <xQueueSemaphoreTake+0x158>
 8006bbc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006bbe:	2200      	movs	r2, #0
 8006bc0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006bc4:	f7ff f9e2 	bl	8005f8c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006bc8:	463a      	mov	r2, r7
 8006bca:	f107 030c 	add.w	r3, r7, #12
 8006bce:	4611      	mov	r1, r2
 8006bd0:	4618      	mov	r0, r3
 8006bd2:	f000 fff5 	bl	8007bc0 <xTaskCheckForTimeOut>
 8006bd6:	4603      	mov	r3, r0
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	d132      	bne.n	8006c42 <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006bdc:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006bde:	f000 f94f 	bl	8006e80 <prvIsQueueEmpty>
 8006be2:	4603      	mov	r3, r0
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d026      	beq.n	8006c36 <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006be8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d109      	bne.n	8006c04 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 8006bf0:	f7ff f99a 	bl	8005f28 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006bf4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006bf6:	689b      	ldr	r3, [r3, #8]
 8006bf8:	4618      	mov	r0, r3
 8006bfa:	f001 f95b 	bl	8007eb4 <xTaskPriorityInherit>
 8006bfe:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 8006c00:	f7ff f9c4 	bl	8005f8c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006c04:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006c06:	3324      	adds	r3, #36	@ 0x24
 8006c08:	683a      	ldr	r2, [r7, #0]
 8006c0a:	4611      	mov	r1, r2
 8006c0c:	4618      	mov	r0, r3
 8006c0e:	f000 ff0b 	bl	8007a28 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006c12:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006c14:	f000 f8e2 	bl	8006ddc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006c18:	f000 fd38 	bl	800768c <xTaskResumeAll>
 8006c1c:	4603      	mov	r3, r0
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	f47f af67 	bne.w	8006af2 <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 8006c24:	4b18      	ldr	r3, [pc, #96]	@ (8006c88 <xQueueSemaphoreTake+0x21c>)
 8006c26:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006c2a:	601a      	str	r2, [r3, #0]
 8006c2c:	f3bf 8f4f 	dsb	sy
 8006c30:	f3bf 8f6f 	isb	sy
 8006c34:	e75d      	b.n	8006af2 <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8006c36:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006c38:	f000 f8d0 	bl	8006ddc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006c3c:	f000 fd26 	bl	800768c <xTaskResumeAll>
 8006c40:	e757      	b.n	8006af2 <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8006c42:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006c44:	f000 f8ca 	bl	8006ddc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006c48:	f000 fd20 	bl	800768c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006c4c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006c4e:	f000 f917 	bl	8006e80 <prvIsQueueEmpty>
 8006c52:	4603      	mov	r3, r0
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	f43f af4c 	beq.w	8006af2 <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8006c5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d00d      	beq.n	8006c7c <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 8006c60:	f7ff f962 	bl	8005f28 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8006c64:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006c66:	f000 f811 	bl	8006c8c <prvGetDisinheritPriorityAfterTimeout>
 8006c6a:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8006c6c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006c6e:	689b      	ldr	r3, [r3, #8]
 8006c70:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006c72:	4618      	mov	r0, r3
 8006c74:	f001 f9f6 	bl	8008064 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8006c78:	f7ff f988 	bl	8005f8c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006c7c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8006c7e:	4618      	mov	r0, r3
 8006c80:	3738      	adds	r7, #56	@ 0x38
 8006c82:	46bd      	mov	sp, r7
 8006c84:	bd80      	pop	{r7, pc}
 8006c86:	bf00      	nop
 8006c88:	e000ed04 	.word	0xe000ed04

08006c8c <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8006c8c:	b480      	push	{r7}
 8006c8e:	b085      	sub	sp, #20
 8006c90:	af00      	add	r7, sp, #0
 8006c92:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	d006      	beq.n	8006caa <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 8006ca6:	60fb      	str	r3, [r7, #12]
 8006ca8:	e001      	b.n	8006cae <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8006caa:	2300      	movs	r3, #0
 8006cac:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8006cae:	68fb      	ldr	r3, [r7, #12]
	}
 8006cb0:	4618      	mov	r0, r3
 8006cb2:	3714      	adds	r7, #20
 8006cb4:	46bd      	mov	sp, r7
 8006cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cba:	4770      	bx	lr

08006cbc <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8006cbc:	b580      	push	{r7, lr}
 8006cbe:	b086      	sub	sp, #24
 8006cc0:	af00      	add	r7, sp, #0
 8006cc2:	60f8      	str	r0, [r7, #12]
 8006cc4:	60b9      	str	r1, [r7, #8]
 8006cc6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8006cc8:	2300      	movs	r3, #0
 8006cca:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006cd0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d10d      	bne.n	8006cf6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d14d      	bne.n	8006d7e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	689b      	ldr	r3, [r3, #8]
 8006ce6:	4618      	mov	r0, r3
 8006ce8:	f001 f94c 	bl	8007f84 <xTaskPriorityDisinherit>
 8006cec:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	2200      	movs	r2, #0
 8006cf2:	609a      	str	r2, [r3, #8]
 8006cf4:	e043      	b.n	8006d7e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	d119      	bne.n	8006d30 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	6858      	ldr	r0, [r3, #4]
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d04:	461a      	mov	r2, r3
 8006d06:	68b9      	ldr	r1, [r7, #8]
 8006d08:	f001 fe7e 	bl	8008a08 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	685a      	ldr	r2, [r3, #4]
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d14:	441a      	add	r2, r3
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	685a      	ldr	r2, [r3, #4]
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	689b      	ldr	r3, [r3, #8]
 8006d22:	429a      	cmp	r2, r3
 8006d24:	d32b      	bcc.n	8006d7e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	681a      	ldr	r2, [r3, #0]
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	605a      	str	r2, [r3, #4]
 8006d2e:	e026      	b.n	8006d7e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	68d8      	ldr	r0, [r3, #12]
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d38:	461a      	mov	r2, r3
 8006d3a:	68b9      	ldr	r1, [r7, #8]
 8006d3c:	f001 fe64 	bl	8008a08 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	68da      	ldr	r2, [r3, #12]
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d48:	425b      	negs	r3, r3
 8006d4a:	441a      	add	r2, r3
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	68da      	ldr	r2, [r3, #12]
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	429a      	cmp	r2, r3
 8006d5a:	d207      	bcs.n	8006d6c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	689a      	ldr	r2, [r3, #8]
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d64:	425b      	negs	r3, r3
 8006d66:	441a      	add	r2, r3
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	2b02      	cmp	r3, #2
 8006d70:	d105      	bne.n	8006d7e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006d72:	693b      	ldr	r3, [r7, #16]
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	d002      	beq.n	8006d7e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8006d78:	693b      	ldr	r3, [r7, #16]
 8006d7a:	3b01      	subs	r3, #1
 8006d7c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006d7e:	693b      	ldr	r3, [r7, #16]
 8006d80:	1c5a      	adds	r2, r3, #1
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8006d86:	697b      	ldr	r3, [r7, #20]
}
 8006d88:	4618      	mov	r0, r3
 8006d8a:	3718      	adds	r7, #24
 8006d8c:	46bd      	mov	sp, r7
 8006d8e:	bd80      	pop	{r7, pc}

08006d90 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8006d90:	b580      	push	{r7, lr}
 8006d92:	b082      	sub	sp, #8
 8006d94:	af00      	add	r7, sp, #0
 8006d96:	6078      	str	r0, [r7, #4]
 8006d98:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d018      	beq.n	8006dd4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	68da      	ldr	r2, [r3, #12]
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006daa:	441a      	add	r2, r3
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	68da      	ldr	r2, [r3, #12]
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	689b      	ldr	r3, [r3, #8]
 8006db8:	429a      	cmp	r2, r3
 8006dba:	d303      	bcc.n	8006dc4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	681a      	ldr	r2, [r3, #0]
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	68d9      	ldr	r1, [r3, #12]
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006dcc:	461a      	mov	r2, r3
 8006dce:	6838      	ldr	r0, [r7, #0]
 8006dd0:	f001 fe1a 	bl	8008a08 <memcpy>
	}
}
 8006dd4:	bf00      	nop
 8006dd6:	3708      	adds	r7, #8
 8006dd8:	46bd      	mov	sp, r7
 8006dda:	bd80      	pop	{r7, pc}

08006ddc <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8006ddc:	b580      	push	{r7, lr}
 8006dde:	b084      	sub	sp, #16
 8006de0:	af00      	add	r7, sp, #0
 8006de2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8006de4:	f7ff f8a0 	bl	8005f28 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006dee:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006df0:	e011      	b.n	8006e16 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	d012      	beq.n	8006e20 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	3324      	adds	r3, #36	@ 0x24
 8006dfe:	4618      	mov	r0, r3
 8006e00:	f000 fe64 	bl	8007acc <xTaskRemoveFromEventList>
 8006e04:	4603      	mov	r3, r0
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d001      	beq.n	8006e0e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8006e0a:	f000 ff3d 	bl	8007c88 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8006e0e:	7bfb      	ldrb	r3, [r7, #15]
 8006e10:	3b01      	subs	r3, #1
 8006e12:	b2db      	uxtb	r3, r3
 8006e14:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006e16:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	dce9      	bgt.n	8006df2 <prvUnlockQueue+0x16>
 8006e1e:	e000      	b.n	8006e22 <prvUnlockQueue+0x46>
					break;
 8006e20:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	22ff      	movs	r2, #255	@ 0xff
 8006e26:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8006e2a:	f7ff f8af 	bl	8005f8c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8006e2e:	f7ff f87b 	bl	8005f28 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006e38:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006e3a:	e011      	b.n	8006e60 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	691b      	ldr	r3, [r3, #16]
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	d012      	beq.n	8006e6a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	3310      	adds	r3, #16
 8006e48:	4618      	mov	r0, r3
 8006e4a:	f000 fe3f 	bl	8007acc <xTaskRemoveFromEventList>
 8006e4e:	4603      	mov	r3, r0
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	d001      	beq.n	8006e58 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8006e54:	f000 ff18 	bl	8007c88 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8006e58:	7bbb      	ldrb	r3, [r7, #14]
 8006e5a:	3b01      	subs	r3, #1
 8006e5c:	b2db      	uxtb	r3, r3
 8006e5e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006e60:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	dce9      	bgt.n	8006e3c <prvUnlockQueue+0x60>
 8006e68:	e000      	b.n	8006e6c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8006e6a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	22ff      	movs	r2, #255	@ 0xff
 8006e70:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8006e74:	f7ff f88a 	bl	8005f8c <vPortExitCritical>
}
 8006e78:	bf00      	nop
 8006e7a:	3710      	adds	r7, #16
 8006e7c:	46bd      	mov	sp, r7
 8006e7e:	bd80      	pop	{r7, pc}

08006e80 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8006e80:	b580      	push	{r7, lr}
 8006e82:	b084      	sub	sp, #16
 8006e84:	af00      	add	r7, sp, #0
 8006e86:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006e88:	f7ff f84e 	bl	8005f28 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	d102      	bne.n	8006e9a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8006e94:	2301      	movs	r3, #1
 8006e96:	60fb      	str	r3, [r7, #12]
 8006e98:	e001      	b.n	8006e9e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8006e9a:	2300      	movs	r3, #0
 8006e9c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006e9e:	f7ff f875 	bl	8005f8c <vPortExitCritical>

	return xReturn;
 8006ea2:	68fb      	ldr	r3, [r7, #12]
}
 8006ea4:	4618      	mov	r0, r3
 8006ea6:	3710      	adds	r7, #16
 8006ea8:	46bd      	mov	sp, r7
 8006eaa:	bd80      	pop	{r7, pc}

08006eac <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8006eac:	b580      	push	{r7, lr}
 8006eae:	b084      	sub	sp, #16
 8006eb0:	af00      	add	r7, sp, #0
 8006eb2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006eb4:	f7ff f838 	bl	8005f28 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006ec0:	429a      	cmp	r2, r3
 8006ec2:	d102      	bne.n	8006eca <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8006ec4:	2301      	movs	r3, #1
 8006ec6:	60fb      	str	r3, [r7, #12]
 8006ec8:	e001      	b.n	8006ece <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8006eca:	2300      	movs	r3, #0
 8006ecc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006ece:	f7ff f85d 	bl	8005f8c <vPortExitCritical>

	return xReturn;
 8006ed2:	68fb      	ldr	r3, [r7, #12]
}
 8006ed4:	4618      	mov	r0, r3
 8006ed6:	3710      	adds	r7, #16
 8006ed8:	46bd      	mov	sp, r7
 8006eda:	bd80      	pop	{r7, pc}

08006edc <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8006edc:	b480      	push	{r7}
 8006ede:	b085      	sub	sp, #20
 8006ee0:	af00      	add	r7, sp, #0
 8006ee2:	6078      	str	r0, [r7, #4]
 8006ee4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006ee6:	2300      	movs	r3, #0
 8006ee8:	60fb      	str	r3, [r7, #12]
 8006eea:	e014      	b.n	8006f16 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8006eec:	4a0f      	ldr	r2, [pc, #60]	@ (8006f2c <vQueueAddToRegistry+0x50>)
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	d10b      	bne.n	8006f10 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8006ef8:	490c      	ldr	r1, [pc, #48]	@ (8006f2c <vQueueAddToRegistry+0x50>)
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	683a      	ldr	r2, [r7, #0]
 8006efe:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8006f02:	4a0a      	ldr	r2, [pc, #40]	@ (8006f2c <vQueueAddToRegistry+0x50>)
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	00db      	lsls	r3, r3, #3
 8006f08:	4413      	add	r3, r2
 8006f0a:	687a      	ldr	r2, [r7, #4]
 8006f0c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8006f0e:	e006      	b.n	8006f1e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	3301      	adds	r3, #1
 8006f14:	60fb      	str	r3, [r7, #12]
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	2b07      	cmp	r3, #7
 8006f1a:	d9e7      	bls.n	8006eec <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8006f1c:	bf00      	nop
 8006f1e:	bf00      	nop
 8006f20:	3714      	adds	r7, #20
 8006f22:	46bd      	mov	sp, r7
 8006f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f28:	4770      	bx	lr
 8006f2a:	bf00      	nop
 8006f2c:	20002664 	.word	0x20002664

08006f30 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006f30:	b580      	push	{r7, lr}
 8006f32:	b086      	sub	sp, #24
 8006f34:	af00      	add	r7, sp, #0
 8006f36:	60f8      	str	r0, [r7, #12]
 8006f38:	60b9      	str	r1, [r7, #8]
 8006f3a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8006f40:	f7fe fff2 	bl	8005f28 <vPortEnterCritical>
 8006f44:	697b      	ldr	r3, [r7, #20]
 8006f46:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006f4a:	b25b      	sxtb	r3, r3
 8006f4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f50:	d103      	bne.n	8006f5a <vQueueWaitForMessageRestricted+0x2a>
 8006f52:	697b      	ldr	r3, [r7, #20]
 8006f54:	2200      	movs	r2, #0
 8006f56:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006f5a:	697b      	ldr	r3, [r7, #20]
 8006f5c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006f60:	b25b      	sxtb	r3, r3
 8006f62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f66:	d103      	bne.n	8006f70 <vQueueWaitForMessageRestricted+0x40>
 8006f68:	697b      	ldr	r3, [r7, #20]
 8006f6a:	2200      	movs	r2, #0
 8006f6c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006f70:	f7ff f80c 	bl	8005f8c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8006f74:	697b      	ldr	r3, [r7, #20]
 8006f76:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	d106      	bne.n	8006f8a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8006f7c:	697b      	ldr	r3, [r7, #20]
 8006f7e:	3324      	adds	r3, #36	@ 0x24
 8006f80:	687a      	ldr	r2, [r7, #4]
 8006f82:	68b9      	ldr	r1, [r7, #8]
 8006f84:	4618      	mov	r0, r3
 8006f86:	f000 fd75 	bl	8007a74 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8006f8a:	6978      	ldr	r0, [r7, #20]
 8006f8c:	f7ff ff26 	bl	8006ddc <prvUnlockQueue>
	}
 8006f90:	bf00      	nop
 8006f92:	3718      	adds	r7, #24
 8006f94:	46bd      	mov	sp, r7
 8006f96:	bd80      	pop	{r7, pc}

08006f98 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006f98:	b580      	push	{r7, lr}
 8006f9a:	b08e      	sub	sp, #56	@ 0x38
 8006f9c:	af04      	add	r7, sp, #16
 8006f9e:	60f8      	str	r0, [r7, #12]
 8006fa0:	60b9      	str	r1, [r7, #8]
 8006fa2:	607a      	str	r2, [r7, #4]
 8006fa4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8006fa6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	d10b      	bne.n	8006fc4 <xTaskCreateStatic+0x2c>
	__asm volatile
 8006fac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006fb0:	f383 8811 	msr	BASEPRI, r3
 8006fb4:	f3bf 8f6f 	isb	sy
 8006fb8:	f3bf 8f4f 	dsb	sy
 8006fbc:	623b      	str	r3, [r7, #32]
}
 8006fbe:	bf00      	nop
 8006fc0:	bf00      	nop
 8006fc2:	e7fd      	b.n	8006fc0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8006fc4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	d10b      	bne.n	8006fe2 <xTaskCreateStatic+0x4a>
	__asm volatile
 8006fca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006fce:	f383 8811 	msr	BASEPRI, r3
 8006fd2:	f3bf 8f6f 	isb	sy
 8006fd6:	f3bf 8f4f 	dsb	sy
 8006fda:	61fb      	str	r3, [r7, #28]
}
 8006fdc:	bf00      	nop
 8006fde:	bf00      	nop
 8006fe0:	e7fd      	b.n	8006fde <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8006fe2:	23a8      	movs	r3, #168	@ 0xa8
 8006fe4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8006fe6:	693b      	ldr	r3, [r7, #16]
 8006fe8:	2ba8      	cmp	r3, #168	@ 0xa8
 8006fea:	d00b      	beq.n	8007004 <xTaskCreateStatic+0x6c>
	__asm volatile
 8006fec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ff0:	f383 8811 	msr	BASEPRI, r3
 8006ff4:	f3bf 8f6f 	isb	sy
 8006ff8:	f3bf 8f4f 	dsb	sy
 8006ffc:	61bb      	str	r3, [r7, #24]
}
 8006ffe:	bf00      	nop
 8007000:	bf00      	nop
 8007002:	e7fd      	b.n	8007000 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8007004:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8007006:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007008:	2b00      	cmp	r3, #0
 800700a:	d01e      	beq.n	800704a <xTaskCreateStatic+0xb2>
 800700c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800700e:	2b00      	cmp	r3, #0
 8007010:	d01b      	beq.n	800704a <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007012:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007014:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8007016:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007018:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800701a:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800701c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800701e:	2202      	movs	r2, #2
 8007020:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8007024:	2300      	movs	r3, #0
 8007026:	9303      	str	r3, [sp, #12]
 8007028:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800702a:	9302      	str	r3, [sp, #8]
 800702c:	f107 0314 	add.w	r3, r7, #20
 8007030:	9301      	str	r3, [sp, #4]
 8007032:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007034:	9300      	str	r3, [sp, #0]
 8007036:	683b      	ldr	r3, [r7, #0]
 8007038:	687a      	ldr	r2, [r7, #4]
 800703a:	68b9      	ldr	r1, [r7, #8]
 800703c:	68f8      	ldr	r0, [r7, #12]
 800703e:	f000 f851 	bl	80070e4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007042:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8007044:	f000 f8f6 	bl	8007234 <prvAddNewTaskToReadyList>
 8007048:	e001      	b.n	800704e <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800704a:	2300      	movs	r3, #0
 800704c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800704e:	697b      	ldr	r3, [r7, #20]
	}
 8007050:	4618      	mov	r0, r3
 8007052:	3728      	adds	r7, #40	@ 0x28
 8007054:	46bd      	mov	sp, r7
 8007056:	bd80      	pop	{r7, pc}

08007058 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8007058:	b580      	push	{r7, lr}
 800705a:	b08c      	sub	sp, #48	@ 0x30
 800705c:	af04      	add	r7, sp, #16
 800705e:	60f8      	str	r0, [r7, #12]
 8007060:	60b9      	str	r1, [r7, #8]
 8007062:	603b      	str	r3, [r7, #0]
 8007064:	4613      	mov	r3, r2
 8007066:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8007068:	88fb      	ldrh	r3, [r7, #6]
 800706a:	009b      	lsls	r3, r3, #2
 800706c:	4618      	mov	r0, r3
 800706e:	f7fe fb87 	bl	8005780 <pvPortMalloc>
 8007072:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8007074:	697b      	ldr	r3, [r7, #20]
 8007076:	2b00      	cmp	r3, #0
 8007078:	d00e      	beq.n	8007098 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800707a:	20a8      	movs	r0, #168	@ 0xa8
 800707c:	f7fe fb80 	bl	8005780 <pvPortMalloc>
 8007080:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8007082:	69fb      	ldr	r3, [r7, #28]
 8007084:	2b00      	cmp	r3, #0
 8007086:	d003      	beq.n	8007090 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8007088:	69fb      	ldr	r3, [r7, #28]
 800708a:	697a      	ldr	r2, [r7, #20]
 800708c:	631a      	str	r2, [r3, #48]	@ 0x30
 800708e:	e005      	b.n	800709c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8007090:	6978      	ldr	r0, [r7, #20]
 8007092:	f7fe fc43 	bl	800591c <vPortFree>
 8007096:	e001      	b.n	800709c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8007098:	2300      	movs	r3, #0
 800709a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800709c:	69fb      	ldr	r3, [r7, #28]
 800709e:	2b00      	cmp	r3, #0
 80070a0:	d017      	beq.n	80070d2 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80070a2:	69fb      	ldr	r3, [r7, #28]
 80070a4:	2200      	movs	r2, #0
 80070a6:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80070aa:	88fa      	ldrh	r2, [r7, #6]
 80070ac:	2300      	movs	r3, #0
 80070ae:	9303      	str	r3, [sp, #12]
 80070b0:	69fb      	ldr	r3, [r7, #28]
 80070b2:	9302      	str	r3, [sp, #8]
 80070b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80070b6:	9301      	str	r3, [sp, #4]
 80070b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80070ba:	9300      	str	r3, [sp, #0]
 80070bc:	683b      	ldr	r3, [r7, #0]
 80070be:	68b9      	ldr	r1, [r7, #8]
 80070c0:	68f8      	ldr	r0, [r7, #12]
 80070c2:	f000 f80f 	bl	80070e4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80070c6:	69f8      	ldr	r0, [r7, #28]
 80070c8:	f000 f8b4 	bl	8007234 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80070cc:	2301      	movs	r3, #1
 80070ce:	61bb      	str	r3, [r7, #24]
 80070d0:	e002      	b.n	80070d8 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80070d2:	f04f 33ff 	mov.w	r3, #4294967295
 80070d6:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80070d8:	69bb      	ldr	r3, [r7, #24]
	}
 80070da:	4618      	mov	r0, r3
 80070dc:	3720      	adds	r7, #32
 80070de:	46bd      	mov	sp, r7
 80070e0:	bd80      	pop	{r7, pc}
	...

080070e4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80070e4:	b580      	push	{r7, lr}
 80070e6:	b088      	sub	sp, #32
 80070e8:	af00      	add	r7, sp, #0
 80070ea:	60f8      	str	r0, [r7, #12]
 80070ec:	60b9      	str	r1, [r7, #8]
 80070ee:	607a      	str	r2, [r7, #4]
 80070f0:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80070f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070f4:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	009b      	lsls	r3, r3, #2
 80070fa:	461a      	mov	r2, r3
 80070fc:	21a5      	movs	r1, #165	@ 0xa5
 80070fe:	f001 fbf7 	bl	80088f0 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8007102:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007104:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800710c:	3b01      	subs	r3, #1
 800710e:	009b      	lsls	r3, r3, #2
 8007110:	4413      	add	r3, r2
 8007112:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8007114:	69bb      	ldr	r3, [r7, #24]
 8007116:	f023 0307 	bic.w	r3, r3, #7
 800711a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800711c:	69bb      	ldr	r3, [r7, #24]
 800711e:	f003 0307 	and.w	r3, r3, #7
 8007122:	2b00      	cmp	r3, #0
 8007124:	d00b      	beq.n	800713e <prvInitialiseNewTask+0x5a>
	__asm volatile
 8007126:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800712a:	f383 8811 	msr	BASEPRI, r3
 800712e:	f3bf 8f6f 	isb	sy
 8007132:	f3bf 8f4f 	dsb	sy
 8007136:	617b      	str	r3, [r7, #20]
}
 8007138:	bf00      	nop
 800713a:	bf00      	nop
 800713c:	e7fd      	b.n	800713a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800713e:	68bb      	ldr	r3, [r7, #8]
 8007140:	2b00      	cmp	r3, #0
 8007142:	d01f      	beq.n	8007184 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007144:	2300      	movs	r3, #0
 8007146:	61fb      	str	r3, [r7, #28]
 8007148:	e012      	b.n	8007170 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800714a:	68ba      	ldr	r2, [r7, #8]
 800714c:	69fb      	ldr	r3, [r7, #28]
 800714e:	4413      	add	r3, r2
 8007150:	7819      	ldrb	r1, [r3, #0]
 8007152:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007154:	69fb      	ldr	r3, [r7, #28]
 8007156:	4413      	add	r3, r2
 8007158:	3334      	adds	r3, #52	@ 0x34
 800715a:	460a      	mov	r2, r1
 800715c:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800715e:	68ba      	ldr	r2, [r7, #8]
 8007160:	69fb      	ldr	r3, [r7, #28]
 8007162:	4413      	add	r3, r2
 8007164:	781b      	ldrb	r3, [r3, #0]
 8007166:	2b00      	cmp	r3, #0
 8007168:	d006      	beq.n	8007178 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800716a:	69fb      	ldr	r3, [r7, #28]
 800716c:	3301      	adds	r3, #1
 800716e:	61fb      	str	r3, [r7, #28]
 8007170:	69fb      	ldr	r3, [r7, #28]
 8007172:	2b0f      	cmp	r3, #15
 8007174:	d9e9      	bls.n	800714a <prvInitialiseNewTask+0x66>
 8007176:	e000      	b.n	800717a <prvInitialiseNewTask+0x96>
			{
				break;
 8007178:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800717a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800717c:	2200      	movs	r2, #0
 800717e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8007182:	e003      	b.n	800718c <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8007184:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007186:	2200      	movs	r2, #0
 8007188:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800718c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800718e:	2b37      	cmp	r3, #55	@ 0x37
 8007190:	d901      	bls.n	8007196 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8007192:	2337      	movs	r3, #55	@ 0x37
 8007194:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8007196:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007198:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800719a:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800719c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800719e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80071a0:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80071a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071a4:	2200      	movs	r2, #0
 80071a6:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80071a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071aa:	3304      	adds	r3, #4
 80071ac:	4618      	mov	r0, r3
 80071ae:	f7fe fcf5 	bl	8005b9c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80071b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071b4:	3318      	adds	r3, #24
 80071b6:	4618      	mov	r0, r3
 80071b8:	f7fe fcf0 	bl	8005b9c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80071bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071be:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80071c0:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80071c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80071c4:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80071c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071ca:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80071cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071ce:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80071d0:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80071d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071d4:	2200      	movs	r2, #0
 80071d6:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80071da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071dc:	2200      	movs	r2, #0
 80071de:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80071e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071e4:	3354      	adds	r3, #84	@ 0x54
 80071e6:	224c      	movs	r2, #76	@ 0x4c
 80071e8:	2100      	movs	r1, #0
 80071ea:	4618      	mov	r0, r3
 80071ec:	f001 fb80 	bl	80088f0 <memset>
 80071f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071f2:	4a0d      	ldr	r2, [pc, #52]	@ (8007228 <prvInitialiseNewTask+0x144>)
 80071f4:	659a      	str	r2, [r3, #88]	@ 0x58
 80071f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071f8:	4a0c      	ldr	r2, [pc, #48]	@ (800722c <prvInitialiseNewTask+0x148>)
 80071fa:	65da      	str	r2, [r3, #92]	@ 0x5c
 80071fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071fe:	4a0c      	ldr	r2, [pc, #48]	@ (8007230 <prvInitialiseNewTask+0x14c>)
 8007200:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007202:	683a      	ldr	r2, [r7, #0]
 8007204:	68f9      	ldr	r1, [r7, #12]
 8007206:	69b8      	ldr	r0, [r7, #24]
 8007208:	f7fe fd5c 	bl	8005cc4 <pxPortInitialiseStack>
 800720c:	4602      	mov	r2, r0
 800720e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007210:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8007212:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007214:	2b00      	cmp	r3, #0
 8007216:	d002      	beq.n	800721e <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8007218:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800721a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800721c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800721e:	bf00      	nop
 8007220:	3720      	adds	r7, #32
 8007222:	46bd      	mov	sp, r7
 8007224:	bd80      	pop	{r7, pc}
 8007226:	bf00      	nop
 8007228:	20002cd0 	.word	0x20002cd0
 800722c:	20002d38 	.word	0x20002d38
 8007230:	20002da0 	.word	0x20002da0

08007234 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007234:	b580      	push	{r7, lr}
 8007236:	b082      	sub	sp, #8
 8007238:	af00      	add	r7, sp, #0
 800723a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800723c:	f7fe fe74 	bl	8005f28 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007240:	4b2d      	ldr	r3, [pc, #180]	@ (80072f8 <prvAddNewTaskToReadyList+0xc4>)
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	3301      	adds	r3, #1
 8007246:	4a2c      	ldr	r2, [pc, #176]	@ (80072f8 <prvAddNewTaskToReadyList+0xc4>)
 8007248:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800724a:	4b2c      	ldr	r3, [pc, #176]	@ (80072fc <prvAddNewTaskToReadyList+0xc8>)
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	2b00      	cmp	r3, #0
 8007250:	d109      	bne.n	8007266 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8007252:	4a2a      	ldr	r2, [pc, #168]	@ (80072fc <prvAddNewTaskToReadyList+0xc8>)
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007258:	4b27      	ldr	r3, [pc, #156]	@ (80072f8 <prvAddNewTaskToReadyList+0xc4>)
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	2b01      	cmp	r3, #1
 800725e:	d110      	bne.n	8007282 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007260:	f000 fd36 	bl	8007cd0 <prvInitialiseTaskLists>
 8007264:	e00d      	b.n	8007282 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8007266:	4b26      	ldr	r3, [pc, #152]	@ (8007300 <prvAddNewTaskToReadyList+0xcc>)
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	2b00      	cmp	r3, #0
 800726c:	d109      	bne.n	8007282 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800726e:	4b23      	ldr	r3, [pc, #140]	@ (80072fc <prvAddNewTaskToReadyList+0xc8>)
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007278:	429a      	cmp	r2, r3
 800727a:	d802      	bhi.n	8007282 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800727c:	4a1f      	ldr	r2, [pc, #124]	@ (80072fc <prvAddNewTaskToReadyList+0xc8>)
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8007282:	4b20      	ldr	r3, [pc, #128]	@ (8007304 <prvAddNewTaskToReadyList+0xd0>)
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	3301      	adds	r3, #1
 8007288:	4a1e      	ldr	r2, [pc, #120]	@ (8007304 <prvAddNewTaskToReadyList+0xd0>)
 800728a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800728c:	4b1d      	ldr	r3, [pc, #116]	@ (8007304 <prvAddNewTaskToReadyList+0xd0>)
 800728e:	681a      	ldr	r2, [r3, #0]
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007298:	4b1b      	ldr	r3, [pc, #108]	@ (8007308 <prvAddNewTaskToReadyList+0xd4>)
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	429a      	cmp	r2, r3
 800729e:	d903      	bls.n	80072a8 <prvAddNewTaskToReadyList+0x74>
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80072a4:	4a18      	ldr	r2, [pc, #96]	@ (8007308 <prvAddNewTaskToReadyList+0xd4>)
 80072a6:	6013      	str	r3, [r2, #0]
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80072ac:	4613      	mov	r3, r2
 80072ae:	009b      	lsls	r3, r3, #2
 80072b0:	4413      	add	r3, r2
 80072b2:	009b      	lsls	r3, r3, #2
 80072b4:	4a15      	ldr	r2, [pc, #84]	@ (800730c <prvAddNewTaskToReadyList+0xd8>)
 80072b6:	441a      	add	r2, r3
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	3304      	adds	r3, #4
 80072bc:	4619      	mov	r1, r3
 80072be:	4610      	mov	r0, r2
 80072c0:	f7fe fc79 	bl	8005bb6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80072c4:	f7fe fe62 	bl	8005f8c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80072c8:	4b0d      	ldr	r3, [pc, #52]	@ (8007300 <prvAddNewTaskToReadyList+0xcc>)
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	d00e      	beq.n	80072ee <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80072d0:	4b0a      	ldr	r3, [pc, #40]	@ (80072fc <prvAddNewTaskToReadyList+0xc8>)
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80072da:	429a      	cmp	r2, r3
 80072dc:	d207      	bcs.n	80072ee <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80072de:	4b0c      	ldr	r3, [pc, #48]	@ (8007310 <prvAddNewTaskToReadyList+0xdc>)
 80072e0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80072e4:	601a      	str	r2, [r3, #0]
 80072e6:	f3bf 8f4f 	dsb	sy
 80072ea:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80072ee:	bf00      	nop
 80072f0:	3708      	adds	r7, #8
 80072f2:	46bd      	mov	sp, r7
 80072f4:	bd80      	pop	{r7, pc}
 80072f6:	bf00      	nop
 80072f8:	20002b78 	.word	0x20002b78
 80072fc:	200026a4 	.word	0x200026a4
 8007300:	20002b84 	.word	0x20002b84
 8007304:	20002b94 	.word	0x20002b94
 8007308:	20002b80 	.word	0x20002b80
 800730c:	200026a8 	.word	0x200026a8
 8007310:	e000ed04 	.word	0xe000ed04

08007314 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8007314:	b580      	push	{r7, lr}
 8007316:	b084      	sub	sp, #16
 8007318:	af00      	add	r7, sp, #0
 800731a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800731c:	2300      	movs	r3, #0
 800731e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	2b00      	cmp	r3, #0
 8007324:	d018      	beq.n	8007358 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8007326:	4b14      	ldr	r3, [pc, #80]	@ (8007378 <vTaskDelay+0x64>)
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	2b00      	cmp	r3, #0
 800732c:	d00b      	beq.n	8007346 <vTaskDelay+0x32>
	__asm volatile
 800732e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007332:	f383 8811 	msr	BASEPRI, r3
 8007336:	f3bf 8f6f 	isb	sy
 800733a:	f3bf 8f4f 	dsb	sy
 800733e:	60bb      	str	r3, [r7, #8]
}
 8007340:	bf00      	nop
 8007342:	bf00      	nop
 8007344:	e7fd      	b.n	8007342 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8007346:	f000 f993 	bl	8007670 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800734a:	2100      	movs	r1, #0
 800734c:	6878      	ldr	r0, [r7, #4]
 800734e:	f000 ff21 	bl	8008194 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8007352:	f000 f99b 	bl	800768c <xTaskResumeAll>
 8007356:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	2b00      	cmp	r3, #0
 800735c:	d107      	bne.n	800736e <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800735e:	4b07      	ldr	r3, [pc, #28]	@ (800737c <vTaskDelay+0x68>)
 8007360:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007364:	601a      	str	r2, [r3, #0]
 8007366:	f3bf 8f4f 	dsb	sy
 800736a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800736e:	bf00      	nop
 8007370:	3710      	adds	r7, #16
 8007372:	46bd      	mov	sp, r7
 8007374:	bd80      	pop	{r7, pc}
 8007376:	bf00      	nop
 8007378:	20002ba0 	.word	0x20002ba0
 800737c:	e000ed04 	.word	0xe000ed04

08007380 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 8007380:	b580      	push	{r7, lr}
 8007382:	b084      	sub	sp, #16
 8007384:	af00      	add	r7, sp, #0
 8007386:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8007388:	f7fe fdce 	bl	8005f28 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	2b00      	cmp	r3, #0
 8007390:	d102      	bne.n	8007398 <vTaskSuspend+0x18>
 8007392:	4b30      	ldr	r3, [pc, #192]	@ (8007454 <vTaskSuspend+0xd4>)
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	e000      	b.n	800739a <vTaskSuspend+0x1a>
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	3304      	adds	r3, #4
 80073a0:	4618      	mov	r0, r3
 80073a2:	f7fe fc65 	bl	8005c70 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	d004      	beq.n	80073b8 <vTaskSuspend+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	3318      	adds	r3, #24
 80073b2:	4618      	mov	r0, r3
 80073b4:	f7fe fc5c 	bl	8005c70 <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	3304      	adds	r3, #4
 80073bc:	4619      	mov	r1, r3
 80073be:	4826      	ldr	r0, [pc, #152]	@ (8007458 <vTaskSuspend+0xd8>)
 80073c0:	f7fe fbf9 	bl	8005bb6 <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 80073ca:	b2db      	uxtb	r3, r3
 80073cc:	2b01      	cmp	r3, #1
 80073ce:	d103      	bne.n	80073d8 <vTaskSuspend+0x58>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	2200      	movs	r2, #0
 80073d4:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 80073d8:	f7fe fdd8 	bl	8005f8c <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 80073dc:	4b1f      	ldr	r3, [pc, #124]	@ (800745c <vTaskSuspend+0xdc>)
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	d005      	beq.n	80073f0 <vTaskSuspend+0x70>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 80073e4:	f7fe fda0 	bl	8005f28 <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 80073e8:	f000 fd16 	bl	8007e18 <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 80073ec:	f7fe fdce 	bl	8005f8c <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 80073f0:	4b18      	ldr	r3, [pc, #96]	@ (8007454 <vTaskSuspend+0xd4>)
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	68fa      	ldr	r2, [r7, #12]
 80073f6:	429a      	cmp	r2, r3
 80073f8:	d128      	bne.n	800744c <vTaskSuspend+0xcc>
		{
			if( xSchedulerRunning != pdFALSE )
 80073fa:	4b18      	ldr	r3, [pc, #96]	@ (800745c <vTaskSuspend+0xdc>)
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	2b00      	cmp	r3, #0
 8007400:	d018      	beq.n	8007434 <vTaskSuspend+0xb4>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 8007402:	4b17      	ldr	r3, [pc, #92]	@ (8007460 <vTaskSuspend+0xe0>)
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	2b00      	cmp	r3, #0
 8007408:	d00b      	beq.n	8007422 <vTaskSuspend+0xa2>
	__asm volatile
 800740a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800740e:	f383 8811 	msr	BASEPRI, r3
 8007412:	f3bf 8f6f 	isb	sy
 8007416:	f3bf 8f4f 	dsb	sy
 800741a:	60bb      	str	r3, [r7, #8]
}
 800741c:	bf00      	nop
 800741e:	bf00      	nop
 8007420:	e7fd      	b.n	800741e <vTaskSuspend+0x9e>
				portYIELD_WITHIN_API();
 8007422:	4b10      	ldr	r3, [pc, #64]	@ (8007464 <vTaskSuspend+0xe4>)
 8007424:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007428:	601a      	str	r2, [r3, #0]
 800742a:	f3bf 8f4f 	dsb	sy
 800742e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007432:	e00b      	b.n	800744c <vTaskSuspend+0xcc>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 8007434:	4b08      	ldr	r3, [pc, #32]	@ (8007458 <vTaskSuspend+0xd8>)
 8007436:	681a      	ldr	r2, [r3, #0]
 8007438:	4b0b      	ldr	r3, [pc, #44]	@ (8007468 <vTaskSuspend+0xe8>)
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	429a      	cmp	r2, r3
 800743e:	d103      	bne.n	8007448 <vTaskSuspend+0xc8>
					pxCurrentTCB = NULL;
 8007440:	4b04      	ldr	r3, [pc, #16]	@ (8007454 <vTaskSuspend+0xd4>)
 8007442:	2200      	movs	r2, #0
 8007444:	601a      	str	r2, [r3, #0]
	}
 8007446:	e001      	b.n	800744c <vTaskSuspend+0xcc>
					vTaskSwitchContext();
 8007448:	f000 fa88 	bl	800795c <vTaskSwitchContext>
	}
 800744c:	bf00      	nop
 800744e:	3710      	adds	r7, #16
 8007450:	46bd      	mov	sp, r7
 8007452:	bd80      	pop	{r7, pc}
 8007454:	200026a4 	.word	0x200026a4
 8007458:	20002b64 	.word	0x20002b64
 800745c:	20002b84 	.word	0x20002b84
 8007460:	20002ba0 	.word	0x20002ba0
 8007464:	e000ed04 	.word	0xe000ed04
 8007468:	20002b78 	.word	0x20002b78

0800746c <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 800746c:	b480      	push	{r7}
 800746e:	b087      	sub	sp, #28
 8007470:	af00      	add	r7, sp, #0
 8007472:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 8007474:	2300      	movs	r3, #0
 8007476:	617b      	str	r3, [r7, #20]
	const TCB_t * const pxTCB = xTask;
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	613b      	str	r3, [r7, #16]

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	2b00      	cmp	r3, #0
 8007480:	d10b      	bne.n	800749a <prvTaskIsTaskSuspended+0x2e>
	__asm volatile
 8007482:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007486:	f383 8811 	msr	BASEPRI, r3
 800748a:	f3bf 8f6f 	isb	sy
 800748e:	f3bf 8f4f 	dsb	sy
 8007492:	60fb      	str	r3, [r7, #12]
}
 8007494:	bf00      	nop
 8007496:	bf00      	nop
 8007498:	e7fd      	b.n	8007496 <prvTaskIsTaskSuspended+0x2a>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 800749a:	693b      	ldr	r3, [r7, #16]
 800749c:	695b      	ldr	r3, [r3, #20]
 800749e:	4a0a      	ldr	r2, [pc, #40]	@ (80074c8 <prvTaskIsTaskSuspended+0x5c>)
 80074a0:	4293      	cmp	r3, r2
 80074a2:	d10a      	bne.n	80074ba <prvTaskIsTaskSuspended+0x4e>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 80074a4:	693b      	ldr	r3, [r7, #16]
 80074a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80074a8:	4a08      	ldr	r2, [pc, #32]	@ (80074cc <prvTaskIsTaskSuspended+0x60>)
 80074aa:	4293      	cmp	r3, r2
 80074ac:	d005      	beq.n	80074ba <prvTaskIsTaskSuspended+0x4e>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 80074ae:	693b      	ldr	r3, [r7, #16]
 80074b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80074b2:	2b00      	cmp	r3, #0
 80074b4:	d101      	bne.n	80074ba <prvTaskIsTaskSuspended+0x4e>
				{
					xReturn = pdTRUE;
 80074b6:	2301      	movs	r3, #1
 80074b8:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80074ba:	697b      	ldr	r3, [r7, #20]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 80074bc:	4618      	mov	r0, r3
 80074be:	371c      	adds	r7, #28
 80074c0:	46bd      	mov	sp, r7
 80074c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074c6:	4770      	bx	lr
 80074c8:	20002b64 	.word	0x20002b64
 80074cc:	20002b38 	.word	0x20002b38

080074d0 <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( TaskHandle_t xTaskToResume )
	{
 80074d0:	b580      	push	{r7, lr}
 80074d2:	b084      	sub	sp, #16
 80074d4:	af00      	add	r7, sp, #0
 80074d6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = xTaskToResume;
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	60fb      	str	r3, [r7, #12]

		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	2b00      	cmp	r3, #0
 80074e0:	d10b      	bne.n	80074fa <vTaskResume+0x2a>
	__asm volatile
 80074e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80074e6:	f383 8811 	msr	BASEPRI, r3
 80074ea:	f3bf 8f6f 	isb	sy
 80074ee:	f3bf 8f4f 	dsb	sy
 80074f2:	60bb      	str	r3, [r7, #8]
}
 80074f4:	bf00      	nop
 80074f6:	bf00      	nop
 80074f8:	e7fd      	b.n	80074f6 <vTaskResume+0x26>

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
 80074fa:	4b21      	ldr	r3, [pc, #132]	@ (8007580 <vTaskResume+0xb0>)
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	68fa      	ldr	r2, [r7, #12]
 8007500:	429a      	cmp	r2, r3
 8007502:	d038      	beq.n	8007576 <vTaskResume+0xa6>
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	2b00      	cmp	r3, #0
 8007508:	d035      	beq.n	8007576 <vTaskResume+0xa6>
		{
			taskENTER_CRITICAL();
 800750a:	f7fe fd0d 	bl	8005f28 <vPortEnterCritical>
			{
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 800750e:	68f8      	ldr	r0, [r7, #12]
 8007510:	f7ff ffac 	bl	800746c <prvTaskIsTaskSuspended>
 8007514:	4603      	mov	r3, r0
 8007516:	2b00      	cmp	r3, #0
 8007518:	d02b      	beq.n	8007572 <vTaskResume+0xa2>
				{
					traceTASK_RESUME( pxTCB );

					/* The ready list can be accessed even if the scheduler is
					suspended because this is inside a critical section. */
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	3304      	adds	r3, #4
 800751e:	4618      	mov	r0, r3
 8007520:	f7fe fba6 	bl	8005c70 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007528:	4b16      	ldr	r3, [pc, #88]	@ (8007584 <vTaskResume+0xb4>)
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	429a      	cmp	r2, r3
 800752e:	d903      	bls.n	8007538 <vTaskResume+0x68>
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007534:	4a13      	ldr	r2, [pc, #76]	@ (8007584 <vTaskResume+0xb4>)
 8007536:	6013      	str	r3, [r2, #0]
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800753c:	4613      	mov	r3, r2
 800753e:	009b      	lsls	r3, r3, #2
 8007540:	4413      	add	r3, r2
 8007542:	009b      	lsls	r3, r3, #2
 8007544:	4a10      	ldr	r2, [pc, #64]	@ (8007588 <vTaskResume+0xb8>)
 8007546:	441a      	add	r2, r3
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	3304      	adds	r3, #4
 800754c:	4619      	mov	r1, r3
 800754e:	4610      	mov	r0, r2
 8007550:	f7fe fb31 	bl	8005bb6 <vListInsertEnd>

					/* A higher priority task may have just been resumed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007558:	4b09      	ldr	r3, [pc, #36]	@ (8007580 <vTaskResume+0xb0>)
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800755e:	429a      	cmp	r2, r3
 8007560:	d307      	bcc.n	8007572 <vTaskResume+0xa2>
					{
						/* This yield may not cause the task just resumed to run,
						but will leave the lists in the correct state for the
						next yield. */
						taskYIELD_IF_USING_PREEMPTION();
 8007562:	4b0a      	ldr	r3, [pc, #40]	@ (800758c <vTaskResume+0xbc>)
 8007564:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007568:	601a      	str	r2, [r3, #0]
 800756a:	f3bf 8f4f 	dsb	sy
 800756e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
 8007572:	f7fe fd0b 	bl	8005f8c <vPortExitCritical>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007576:	bf00      	nop
 8007578:	3710      	adds	r7, #16
 800757a:	46bd      	mov	sp, r7
 800757c:	bd80      	pop	{r7, pc}
 800757e:	bf00      	nop
 8007580:	200026a4 	.word	0x200026a4
 8007584:	20002b80 	.word	0x20002b80
 8007588:	200026a8 	.word	0x200026a8
 800758c:	e000ed04 	.word	0xe000ed04

08007590 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8007590:	b580      	push	{r7, lr}
 8007592:	b08a      	sub	sp, #40	@ 0x28
 8007594:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8007596:	2300      	movs	r3, #0
 8007598:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800759a:	2300      	movs	r3, #0
 800759c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800759e:	463a      	mov	r2, r7
 80075a0:	1d39      	adds	r1, r7, #4
 80075a2:	f107 0308 	add.w	r3, r7, #8
 80075a6:	4618      	mov	r0, r3
 80075a8:	f7fe f8b6 	bl	8005718 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80075ac:	6839      	ldr	r1, [r7, #0]
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	68ba      	ldr	r2, [r7, #8]
 80075b2:	9202      	str	r2, [sp, #8]
 80075b4:	9301      	str	r3, [sp, #4]
 80075b6:	2300      	movs	r3, #0
 80075b8:	9300      	str	r3, [sp, #0]
 80075ba:	2300      	movs	r3, #0
 80075bc:	460a      	mov	r2, r1
 80075be:	4924      	ldr	r1, [pc, #144]	@ (8007650 <vTaskStartScheduler+0xc0>)
 80075c0:	4824      	ldr	r0, [pc, #144]	@ (8007654 <vTaskStartScheduler+0xc4>)
 80075c2:	f7ff fce9 	bl	8006f98 <xTaskCreateStatic>
 80075c6:	4603      	mov	r3, r0
 80075c8:	4a23      	ldr	r2, [pc, #140]	@ (8007658 <vTaskStartScheduler+0xc8>)
 80075ca:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80075cc:	4b22      	ldr	r3, [pc, #136]	@ (8007658 <vTaskStartScheduler+0xc8>)
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	d002      	beq.n	80075da <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80075d4:	2301      	movs	r3, #1
 80075d6:	617b      	str	r3, [r7, #20]
 80075d8:	e001      	b.n	80075de <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80075da:	2300      	movs	r3, #0
 80075dc:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80075de:	697b      	ldr	r3, [r7, #20]
 80075e0:	2b01      	cmp	r3, #1
 80075e2:	d102      	bne.n	80075ea <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80075e4:	f000 fe2a 	bl	800823c <xTimerCreateTimerTask>
 80075e8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80075ea:	697b      	ldr	r3, [r7, #20]
 80075ec:	2b01      	cmp	r3, #1
 80075ee:	d11b      	bne.n	8007628 <vTaskStartScheduler+0x98>
	__asm volatile
 80075f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80075f4:	f383 8811 	msr	BASEPRI, r3
 80075f8:	f3bf 8f6f 	isb	sy
 80075fc:	f3bf 8f4f 	dsb	sy
 8007600:	613b      	str	r3, [r7, #16]
}
 8007602:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8007604:	4b15      	ldr	r3, [pc, #84]	@ (800765c <vTaskStartScheduler+0xcc>)
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	3354      	adds	r3, #84	@ 0x54
 800760a:	4a15      	ldr	r2, [pc, #84]	@ (8007660 <vTaskStartScheduler+0xd0>)
 800760c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800760e:	4b15      	ldr	r3, [pc, #84]	@ (8007664 <vTaskStartScheduler+0xd4>)
 8007610:	f04f 32ff 	mov.w	r2, #4294967295
 8007614:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8007616:	4b14      	ldr	r3, [pc, #80]	@ (8007668 <vTaskStartScheduler+0xd8>)
 8007618:	2201      	movs	r2, #1
 800761a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800761c:	4b13      	ldr	r3, [pc, #76]	@ (800766c <vTaskStartScheduler+0xdc>)
 800761e:	2200      	movs	r2, #0
 8007620:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8007622:	f7fe fbdd 	bl	8005de0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8007626:	e00f      	b.n	8007648 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8007628:	697b      	ldr	r3, [r7, #20]
 800762a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800762e:	d10b      	bne.n	8007648 <vTaskStartScheduler+0xb8>
	__asm volatile
 8007630:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007634:	f383 8811 	msr	BASEPRI, r3
 8007638:	f3bf 8f6f 	isb	sy
 800763c:	f3bf 8f4f 	dsb	sy
 8007640:	60fb      	str	r3, [r7, #12]
}
 8007642:	bf00      	nop
 8007644:	bf00      	nop
 8007646:	e7fd      	b.n	8007644 <vTaskStartScheduler+0xb4>
}
 8007648:	bf00      	nop
 800764a:	3718      	adds	r7, #24
 800764c:	46bd      	mov	sp, r7
 800764e:	bd80      	pop	{r7, pc}
 8007650:	08008b20 	.word	0x08008b20
 8007654:	08007ca1 	.word	0x08007ca1
 8007658:	20002b9c 	.word	0x20002b9c
 800765c:	200026a4 	.word	0x200026a4
 8007660:	20000018 	.word	0x20000018
 8007664:	20002b98 	.word	0x20002b98
 8007668:	20002b84 	.word	0x20002b84
 800766c:	20002b7c 	.word	0x20002b7c

08007670 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007670:	b480      	push	{r7}
 8007672:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8007674:	4b04      	ldr	r3, [pc, #16]	@ (8007688 <vTaskSuspendAll+0x18>)
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	3301      	adds	r3, #1
 800767a:	4a03      	ldr	r2, [pc, #12]	@ (8007688 <vTaskSuspendAll+0x18>)
 800767c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800767e:	bf00      	nop
 8007680:	46bd      	mov	sp, r7
 8007682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007686:	4770      	bx	lr
 8007688:	20002ba0 	.word	0x20002ba0

0800768c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800768c:	b580      	push	{r7, lr}
 800768e:	b084      	sub	sp, #16
 8007690:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8007692:	2300      	movs	r3, #0
 8007694:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8007696:	2300      	movs	r3, #0
 8007698:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800769a:	4b42      	ldr	r3, [pc, #264]	@ (80077a4 <xTaskResumeAll+0x118>)
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	2b00      	cmp	r3, #0
 80076a0:	d10b      	bne.n	80076ba <xTaskResumeAll+0x2e>
	__asm volatile
 80076a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80076a6:	f383 8811 	msr	BASEPRI, r3
 80076aa:	f3bf 8f6f 	isb	sy
 80076ae:	f3bf 8f4f 	dsb	sy
 80076b2:	603b      	str	r3, [r7, #0]
}
 80076b4:	bf00      	nop
 80076b6:	bf00      	nop
 80076b8:	e7fd      	b.n	80076b6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80076ba:	f7fe fc35 	bl	8005f28 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80076be:	4b39      	ldr	r3, [pc, #228]	@ (80077a4 <xTaskResumeAll+0x118>)
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	3b01      	subs	r3, #1
 80076c4:	4a37      	ldr	r2, [pc, #220]	@ (80077a4 <xTaskResumeAll+0x118>)
 80076c6:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80076c8:	4b36      	ldr	r3, [pc, #216]	@ (80077a4 <xTaskResumeAll+0x118>)
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	d162      	bne.n	8007796 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80076d0:	4b35      	ldr	r3, [pc, #212]	@ (80077a8 <xTaskResumeAll+0x11c>)
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	d05e      	beq.n	8007796 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80076d8:	e02f      	b.n	800773a <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80076da:	4b34      	ldr	r3, [pc, #208]	@ (80077ac <xTaskResumeAll+0x120>)
 80076dc:	68db      	ldr	r3, [r3, #12]
 80076de:	68db      	ldr	r3, [r3, #12]
 80076e0:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80076e2:	68fb      	ldr	r3, [r7, #12]
 80076e4:	3318      	adds	r3, #24
 80076e6:	4618      	mov	r0, r3
 80076e8:	f7fe fac2 	bl	8005c70 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	3304      	adds	r3, #4
 80076f0:	4618      	mov	r0, r3
 80076f2:	f7fe fabd 	bl	8005c70 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80076fa:	4b2d      	ldr	r3, [pc, #180]	@ (80077b0 <xTaskResumeAll+0x124>)
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	429a      	cmp	r2, r3
 8007700:	d903      	bls.n	800770a <xTaskResumeAll+0x7e>
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007706:	4a2a      	ldr	r2, [pc, #168]	@ (80077b0 <xTaskResumeAll+0x124>)
 8007708:	6013      	str	r3, [r2, #0]
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800770e:	4613      	mov	r3, r2
 8007710:	009b      	lsls	r3, r3, #2
 8007712:	4413      	add	r3, r2
 8007714:	009b      	lsls	r3, r3, #2
 8007716:	4a27      	ldr	r2, [pc, #156]	@ (80077b4 <xTaskResumeAll+0x128>)
 8007718:	441a      	add	r2, r3
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	3304      	adds	r3, #4
 800771e:	4619      	mov	r1, r3
 8007720:	4610      	mov	r0, r2
 8007722:	f7fe fa48 	bl	8005bb6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800772a:	4b23      	ldr	r3, [pc, #140]	@ (80077b8 <xTaskResumeAll+0x12c>)
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007730:	429a      	cmp	r2, r3
 8007732:	d302      	bcc.n	800773a <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8007734:	4b21      	ldr	r3, [pc, #132]	@ (80077bc <xTaskResumeAll+0x130>)
 8007736:	2201      	movs	r2, #1
 8007738:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800773a:	4b1c      	ldr	r3, [pc, #112]	@ (80077ac <xTaskResumeAll+0x120>)
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	2b00      	cmp	r3, #0
 8007740:	d1cb      	bne.n	80076da <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8007742:	68fb      	ldr	r3, [r7, #12]
 8007744:	2b00      	cmp	r3, #0
 8007746:	d001      	beq.n	800774c <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8007748:	f000 fb66 	bl	8007e18 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800774c:	4b1c      	ldr	r3, [pc, #112]	@ (80077c0 <xTaskResumeAll+0x134>)
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	2b00      	cmp	r3, #0
 8007756:	d010      	beq.n	800777a <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8007758:	f000 f846 	bl	80077e8 <xTaskIncrementTick>
 800775c:	4603      	mov	r3, r0
 800775e:	2b00      	cmp	r3, #0
 8007760:	d002      	beq.n	8007768 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8007762:	4b16      	ldr	r3, [pc, #88]	@ (80077bc <xTaskResumeAll+0x130>)
 8007764:	2201      	movs	r2, #1
 8007766:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	3b01      	subs	r3, #1
 800776c:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	2b00      	cmp	r3, #0
 8007772:	d1f1      	bne.n	8007758 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8007774:	4b12      	ldr	r3, [pc, #72]	@ (80077c0 <xTaskResumeAll+0x134>)
 8007776:	2200      	movs	r2, #0
 8007778:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800777a:	4b10      	ldr	r3, [pc, #64]	@ (80077bc <xTaskResumeAll+0x130>)
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	2b00      	cmp	r3, #0
 8007780:	d009      	beq.n	8007796 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8007782:	2301      	movs	r3, #1
 8007784:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8007786:	4b0f      	ldr	r3, [pc, #60]	@ (80077c4 <xTaskResumeAll+0x138>)
 8007788:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800778c:	601a      	str	r2, [r3, #0]
 800778e:	f3bf 8f4f 	dsb	sy
 8007792:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007796:	f7fe fbf9 	bl	8005f8c <vPortExitCritical>

	return xAlreadyYielded;
 800779a:	68bb      	ldr	r3, [r7, #8]
}
 800779c:	4618      	mov	r0, r3
 800779e:	3710      	adds	r7, #16
 80077a0:	46bd      	mov	sp, r7
 80077a2:	bd80      	pop	{r7, pc}
 80077a4:	20002ba0 	.word	0x20002ba0
 80077a8:	20002b78 	.word	0x20002b78
 80077ac:	20002b38 	.word	0x20002b38
 80077b0:	20002b80 	.word	0x20002b80
 80077b4:	200026a8 	.word	0x200026a8
 80077b8:	200026a4 	.word	0x200026a4
 80077bc:	20002b8c 	.word	0x20002b8c
 80077c0:	20002b88 	.word	0x20002b88
 80077c4:	e000ed04 	.word	0xe000ed04

080077c8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80077c8:	b480      	push	{r7}
 80077ca:	b083      	sub	sp, #12
 80077cc:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80077ce:	4b05      	ldr	r3, [pc, #20]	@ (80077e4 <xTaskGetTickCount+0x1c>)
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80077d4:	687b      	ldr	r3, [r7, #4]
}
 80077d6:	4618      	mov	r0, r3
 80077d8:	370c      	adds	r7, #12
 80077da:	46bd      	mov	sp, r7
 80077dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077e0:	4770      	bx	lr
 80077e2:	bf00      	nop
 80077e4:	20002b7c 	.word	0x20002b7c

080077e8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80077e8:	b580      	push	{r7, lr}
 80077ea:	b086      	sub	sp, #24
 80077ec:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80077ee:	2300      	movs	r3, #0
 80077f0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80077f2:	4b4f      	ldr	r3, [pc, #316]	@ (8007930 <xTaskIncrementTick+0x148>)
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	f040 8090 	bne.w	800791c <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80077fc:	4b4d      	ldr	r3, [pc, #308]	@ (8007934 <xTaskIncrementTick+0x14c>)
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	3301      	adds	r3, #1
 8007802:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007804:	4a4b      	ldr	r2, [pc, #300]	@ (8007934 <xTaskIncrementTick+0x14c>)
 8007806:	693b      	ldr	r3, [r7, #16]
 8007808:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800780a:	693b      	ldr	r3, [r7, #16]
 800780c:	2b00      	cmp	r3, #0
 800780e:	d121      	bne.n	8007854 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8007810:	4b49      	ldr	r3, [pc, #292]	@ (8007938 <xTaskIncrementTick+0x150>)
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	2b00      	cmp	r3, #0
 8007818:	d00b      	beq.n	8007832 <xTaskIncrementTick+0x4a>
	__asm volatile
 800781a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800781e:	f383 8811 	msr	BASEPRI, r3
 8007822:	f3bf 8f6f 	isb	sy
 8007826:	f3bf 8f4f 	dsb	sy
 800782a:	603b      	str	r3, [r7, #0]
}
 800782c:	bf00      	nop
 800782e:	bf00      	nop
 8007830:	e7fd      	b.n	800782e <xTaskIncrementTick+0x46>
 8007832:	4b41      	ldr	r3, [pc, #260]	@ (8007938 <xTaskIncrementTick+0x150>)
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	60fb      	str	r3, [r7, #12]
 8007838:	4b40      	ldr	r3, [pc, #256]	@ (800793c <xTaskIncrementTick+0x154>)
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	4a3e      	ldr	r2, [pc, #248]	@ (8007938 <xTaskIncrementTick+0x150>)
 800783e:	6013      	str	r3, [r2, #0]
 8007840:	4a3e      	ldr	r2, [pc, #248]	@ (800793c <xTaskIncrementTick+0x154>)
 8007842:	68fb      	ldr	r3, [r7, #12]
 8007844:	6013      	str	r3, [r2, #0]
 8007846:	4b3e      	ldr	r3, [pc, #248]	@ (8007940 <xTaskIncrementTick+0x158>)
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	3301      	adds	r3, #1
 800784c:	4a3c      	ldr	r2, [pc, #240]	@ (8007940 <xTaskIncrementTick+0x158>)
 800784e:	6013      	str	r3, [r2, #0]
 8007850:	f000 fae2 	bl	8007e18 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007854:	4b3b      	ldr	r3, [pc, #236]	@ (8007944 <xTaskIncrementTick+0x15c>)
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	693a      	ldr	r2, [r7, #16]
 800785a:	429a      	cmp	r2, r3
 800785c:	d349      	bcc.n	80078f2 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800785e:	4b36      	ldr	r3, [pc, #216]	@ (8007938 <xTaskIncrementTick+0x150>)
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	2b00      	cmp	r3, #0
 8007866:	d104      	bne.n	8007872 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007868:	4b36      	ldr	r3, [pc, #216]	@ (8007944 <xTaskIncrementTick+0x15c>)
 800786a:	f04f 32ff 	mov.w	r2, #4294967295
 800786e:	601a      	str	r2, [r3, #0]
					break;
 8007870:	e03f      	b.n	80078f2 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007872:	4b31      	ldr	r3, [pc, #196]	@ (8007938 <xTaskIncrementTick+0x150>)
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	68db      	ldr	r3, [r3, #12]
 8007878:	68db      	ldr	r3, [r3, #12]
 800787a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800787c:	68bb      	ldr	r3, [r7, #8]
 800787e:	685b      	ldr	r3, [r3, #4]
 8007880:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007882:	693a      	ldr	r2, [r7, #16]
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	429a      	cmp	r2, r3
 8007888:	d203      	bcs.n	8007892 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800788a:	4a2e      	ldr	r2, [pc, #184]	@ (8007944 <xTaskIncrementTick+0x15c>)
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8007890:	e02f      	b.n	80078f2 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007892:	68bb      	ldr	r3, [r7, #8]
 8007894:	3304      	adds	r3, #4
 8007896:	4618      	mov	r0, r3
 8007898:	f7fe f9ea 	bl	8005c70 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800789c:	68bb      	ldr	r3, [r7, #8]
 800789e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80078a0:	2b00      	cmp	r3, #0
 80078a2:	d004      	beq.n	80078ae <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80078a4:	68bb      	ldr	r3, [r7, #8]
 80078a6:	3318      	adds	r3, #24
 80078a8:	4618      	mov	r0, r3
 80078aa:	f7fe f9e1 	bl	8005c70 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80078ae:	68bb      	ldr	r3, [r7, #8]
 80078b0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80078b2:	4b25      	ldr	r3, [pc, #148]	@ (8007948 <xTaskIncrementTick+0x160>)
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	429a      	cmp	r2, r3
 80078b8:	d903      	bls.n	80078c2 <xTaskIncrementTick+0xda>
 80078ba:	68bb      	ldr	r3, [r7, #8]
 80078bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80078be:	4a22      	ldr	r2, [pc, #136]	@ (8007948 <xTaskIncrementTick+0x160>)
 80078c0:	6013      	str	r3, [r2, #0]
 80078c2:	68bb      	ldr	r3, [r7, #8]
 80078c4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80078c6:	4613      	mov	r3, r2
 80078c8:	009b      	lsls	r3, r3, #2
 80078ca:	4413      	add	r3, r2
 80078cc:	009b      	lsls	r3, r3, #2
 80078ce:	4a1f      	ldr	r2, [pc, #124]	@ (800794c <xTaskIncrementTick+0x164>)
 80078d0:	441a      	add	r2, r3
 80078d2:	68bb      	ldr	r3, [r7, #8]
 80078d4:	3304      	adds	r3, #4
 80078d6:	4619      	mov	r1, r3
 80078d8:	4610      	mov	r0, r2
 80078da:	f7fe f96c 	bl	8005bb6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80078de:	68bb      	ldr	r3, [r7, #8]
 80078e0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80078e2:	4b1b      	ldr	r3, [pc, #108]	@ (8007950 <xTaskIncrementTick+0x168>)
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80078e8:	429a      	cmp	r2, r3
 80078ea:	d3b8      	bcc.n	800785e <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 80078ec:	2301      	movs	r3, #1
 80078ee:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80078f0:	e7b5      	b.n	800785e <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80078f2:	4b17      	ldr	r3, [pc, #92]	@ (8007950 <xTaskIncrementTick+0x168>)
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80078f8:	4914      	ldr	r1, [pc, #80]	@ (800794c <xTaskIncrementTick+0x164>)
 80078fa:	4613      	mov	r3, r2
 80078fc:	009b      	lsls	r3, r3, #2
 80078fe:	4413      	add	r3, r2
 8007900:	009b      	lsls	r3, r3, #2
 8007902:	440b      	add	r3, r1
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	2b01      	cmp	r3, #1
 8007908:	d901      	bls.n	800790e <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800790a:	2301      	movs	r3, #1
 800790c:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800790e:	4b11      	ldr	r3, [pc, #68]	@ (8007954 <xTaskIncrementTick+0x16c>)
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	2b00      	cmp	r3, #0
 8007914:	d007      	beq.n	8007926 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8007916:	2301      	movs	r3, #1
 8007918:	617b      	str	r3, [r7, #20]
 800791a:	e004      	b.n	8007926 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800791c:	4b0e      	ldr	r3, [pc, #56]	@ (8007958 <xTaskIncrementTick+0x170>)
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	3301      	adds	r3, #1
 8007922:	4a0d      	ldr	r2, [pc, #52]	@ (8007958 <xTaskIncrementTick+0x170>)
 8007924:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8007926:	697b      	ldr	r3, [r7, #20]
}
 8007928:	4618      	mov	r0, r3
 800792a:	3718      	adds	r7, #24
 800792c:	46bd      	mov	sp, r7
 800792e:	bd80      	pop	{r7, pc}
 8007930:	20002ba0 	.word	0x20002ba0
 8007934:	20002b7c 	.word	0x20002b7c
 8007938:	20002b30 	.word	0x20002b30
 800793c:	20002b34 	.word	0x20002b34
 8007940:	20002b90 	.word	0x20002b90
 8007944:	20002b98 	.word	0x20002b98
 8007948:	20002b80 	.word	0x20002b80
 800794c:	200026a8 	.word	0x200026a8
 8007950:	200026a4 	.word	0x200026a4
 8007954:	20002b8c 	.word	0x20002b8c
 8007958:	20002b88 	.word	0x20002b88

0800795c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800795c:	b480      	push	{r7}
 800795e:	b085      	sub	sp, #20
 8007960:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007962:	4b2b      	ldr	r3, [pc, #172]	@ (8007a10 <vTaskSwitchContext+0xb4>)
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	2b00      	cmp	r3, #0
 8007968:	d003      	beq.n	8007972 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800796a:	4b2a      	ldr	r3, [pc, #168]	@ (8007a14 <vTaskSwitchContext+0xb8>)
 800796c:	2201      	movs	r2, #1
 800796e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007970:	e047      	b.n	8007a02 <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 8007972:	4b28      	ldr	r3, [pc, #160]	@ (8007a14 <vTaskSwitchContext+0xb8>)
 8007974:	2200      	movs	r2, #0
 8007976:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007978:	4b27      	ldr	r3, [pc, #156]	@ (8007a18 <vTaskSwitchContext+0xbc>)
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	60fb      	str	r3, [r7, #12]
 800797e:	e011      	b.n	80079a4 <vTaskSwitchContext+0x48>
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	2b00      	cmp	r3, #0
 8007984:	d10b      	bne.n	800799e <vTaskSwitchContext+0x42>
	__asm volatile
 8007986:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800798a:	f383 8811 	msr	BASEPRI, r3
 800798e:	f3bf 8f6f 	isb	sy
 8007992:	f3bf 8f4f 	dsb	sy
 8007996:	607b      	str	r3, [r7, #4]
}
 8007998:	bf00      	nop
 800799a:	bf00      	nop
 800799c:	e7fd      	b.n	800799a <vTaskSwitchContext+0x3e>
 800799e:	68fb      	ldr	r3, [r7, #12]
 80079a0:	3b01      	subs	r3, #1
 80079a2:	60fb      	str	r3, [r7, #12]
 80079a4:	491d      	ldr	r1, [pc, #116]	@ (8007a1c <vTaskSwitchContext+0xc0>)
 80079a6:	68fa      	ldr	r2, [r7, #12]
 80079a8:	4613      	mov	r3, r2
 80079aa:	009b      	lsls	r3, r3, #2
 80079ac:	4413      	add	r3, r2
 80079ae:	009b      	lsls	r3, r3, #2
 80079b0:	440b      	add	r3, r1
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	d0e3      	beq.n	8007980 <vTaskSwitchContext+0x24>
 80079b8:	68fa      	ldr	r2, [r7, #12]
 80079ba:	4613      	mov	r3, r2
 80079bc:	009b      	lsls	r3, r3, #2
 80079be:	4413      	add	r3, r2
 80079c0:	009b      	lsls	r3, r3, #2
 80079c2:	4a16      	ldr	r2, [pc, #88]	@ (8007a1c <vTaskSwitchContext+0xc0>)
 80079c4:	4413      	add	r3, r2
 80079c6:	60bb      	str	r3, [r7, #8]
 80079c8:	68bb      	ldr	r3, [r7, #8]
 80079ca:	685b      	ldr	r3, [r3, #4]
 80079cc:	685a      	ldr	r2, [r3, #4]
 80079ce:	68bb      	ldr	r3, [r7, #8]
 80079d0:	605a      	str	r2, [r3, #4]
 80079d2:	68bb      	ldr	r3, [r7, #8]
 80079d4:	685a      	ldr	r2, [r3, #4]
 80079d6:	68bb      	ldr	r3, [r7, #8]
 80079d8:	3308      	adds	r3, #8
 80079da:	429a      	cmp	r2, r3
 80079dc:	d104      	bne.n	80079e8 <vTaskSwitchContext+0x8c>
 80079de:	68bb      	ldr	r3, [r7, #8]
 80079e0:	685b      	ldr	r3, [r3, #4]
 80079e2:	685a      	ldr	r2, [r3, #4]
 80079e4:	68bb      	ldr	r3, [r7, #8]
 80079e6:	605a      	str	r2, [r3, #4]
 80079e8:	68bb      	ldr	r3, [r7, #8]
 80079ea:	685b      	ldr	r3, [r3, #4]
 80079ec:	68db      	ldr	r3, [r3, #12]
 80079ee:	4a0c      	ldr	r2, [pc, #48]	@ (8007a20 <vTaskSwitchContext+0xc4>)
 80079f0:	6013      	str	r3, [r2, #0]
 80079f2:	4a09      	ldr	r2, [pc, #36]	@ (8007a18 <vTaskSwitchContext+0xbc>)
 80079f4:	68fb      	ldr	r3, [r7, #12]
 80079f6:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80079f8:	4b09      	ldr	r3, [pc, #36]	@ (8007a20 <vTaskSwitchContext+0xc4>)
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	3354      	adds	r3, #84	@ 0x54
 80079fe:	4a09      	ldr	r2, [pc, #36]	@ (8007a24 <vTaskSwitchContext+0xc8>)
 8007a00:	6013      	str	r3, [r2, #0]
}
 8007a02:	bf00      	nop
 8007a04:	3714      	adds	r7, #20
 8007a06:	46bd      	mov	sp, r7
 8007a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a0c:	4770      	bx	lr
 8007a0e:	bf00      	nop
 8007a10:	20002ba0 	.word	0x20002ba0
 8007a14:	20002b8c 	.word	0x20002b8c
 8007a18:	20002b80 	.word	0x20002b80
 8007a1c:	200026a8 	.word	0x200026a8
 8007a20:	200026a4 	.word	0x200026a4
 8007a24:	20000018 	.word	0x20000018

08007a28 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8007a28:	b580      	push	{r7, lr}
 8007a2a:	b084      	sub	sp, #16
 8007a2c:	af00      	add	r7, sp, #0
 8007a2e:	6078      	str	r0, [r7, #4]
 8007a30:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	d10b      	bne.n	8007a50 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8007a38:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a3c:	f383 8811 	msr	BASEPRI, r3
 8007a40:	f3bf 8f6f 	isb	sy
 8007a44:	f3bf 8f4f 	dsb	sy
 8007a48:	60fb      	str	r3, [r7, #12]
}
 8007a4a:	bf00      	nop
 8007a4c:	bf00      	nop
 8007a4e:	e7fd      	b.n	8007a4c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007a50:	4b07      	ldr	r3, [pc, #28]	@ (8007a70 <vTaskPlaceOnEventList+0x48>)
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	3318      	adds	r3, #24
 8007a56:	4619      	mov	r1, r3
 8007a58:	6878      	ldr	r0, [r7, #4]
 8007a5a:	f7fe f8d0 	bl	8005bfe <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007a5e:	2101      	movs	r1, #1
 8007a60:	6838      	ldr	r0, [r7, #0]
 8007a62:	f000 fb97 	bl	8008194 <prvAddCurrentTaskToDelayedList>
}
 8007a66:	bf00      	nop
 8007a68:	3710      	adds	r7, #16
 8007a6a:	46bd      	mov	sp, r7
 8007a6c:	bd80      	pop	{r7, pc}
 8007a6e:	bf00      	nop
 8007a70:	200026a4 	.word	0x200026a4

08007a74 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007a74:	b580      	push	{r7, lr}
 8007a76:	b086      	sub	sp, #24
 8007a78:	af00      	add	r7, sp, #0
 8007a7a:	60f8      	str	r0, [r7, #12]
 8007a7c:	60b9      	str	r1, [r7, #8]
 8007a7e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8007a80:	68fb      	ldr	r3, [r7, #12]
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	d10b      	bne.n	8007a9e <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8007a86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a8a:	f383 8811 	msr	BASEPRI, r3
 8007a8e:	f3bf 8f6f 	isb	sy
 8007a92:	f3bf 8f4f 	dsb	sy
 8007a96:	617b      	str	r3, [r7, #20]
}
 8007a98:	bf00      	nop
 8007a9a:	bf00      	nop
 8007a9c:	e7fd      	b.n	8007a9a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007a9e:	4b0a      	ldr	r3, [pc, #40]	@ (8007ac8 <vTaskPlaceOnEventListRestricted+0x54>)
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	3318      	adds	r3, #24
 8007aa4:	4619      	mov	r1, r3
 8007aa6:	68f8      	ldr	r0, [r7, #12]
 8007aa8:	f7fe f885 	bl	8005bb6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	d002      	beq.n	8007ab8 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8007ab2:	f04f 33ff 	mov.w	r3, #4294967295
 8007ab6:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8007ab8:	6879      	ldr	r1, [r7, #4]
 8007aba:	68b8      	ldr	r0, [r7, #8]
 8007abc:	f000 fb6a 	bl	8008194 <prvAddCurrentTaskToDelayedList>
	}
 8007ac0:	bf00      	nop
 8007ac2:	3718      	adds	r7, #24
 8007ac4:	46bd      	mov	sp, r7
 8007ac6:	bd80      	pop	{r7, pc}
 8007ac8:	200026a4 	.word	0x200026a4

08007acc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8007acc:	b580      	push	{r7, lr}
 8007ace:	b086      	sub	sp, #24
 8007ad0:	af00      	add	r7, sp, #0
 8007ad2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	68db      	ldr	r3, [r3, #12]
 8007ad8:	68db      	ldr	r3, [r3, #12]
 8007ada:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8007adc:	693b      	ldr	r3, [r7, #16]
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	d10b      	bne.n	8007afa <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8007ae2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ae6:	f383 8811 	msr	BASEPRI, r3
 8007aea:	f3bf 8f6f 	isb	sy
 8007aee:	f3bf 8f4f 	dsb	sy
 8007af2:	60fb      	str	r3, [r7, #12]
}
 8007af4:	bf00      	nop
 8007af6:	bf00      	nop
 8007af8:	e7fd      	b.n	8007af6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8007afa:	693b      	ldr	r3, [r7, #16]
 8007afc:	3318      	adds	r3, #24
 8007afe:	4618      	mov	r0, r3
 8007b00:	f7fe f8b6 	bl	8005c70 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007b04:	4b1d      	ldr	r3, [pc, #116]	@ (8007b7c <xTaskRemoveFromEventList+0xb0>)
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	2b00      	cmp	r3, #0
 8007b0a:	d11d      	bne.n	8007b48 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007b0c:	693b      	ldr	r3, [r7, #16]
 8007b0e:	3304      	adds	r3, #4
 8007b10:	4618      	mov	r0, r3
 8007b12:	f7fe f8ad 	bl	8005c70 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8007b16:	693b      	ldr	r3, [r7, #16]
 8007b18:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007b1a:	4b19      	ldr	r3, [pc, #100]	@ (8007b80 <xTaskRemoveFromEventList+0xb4>)
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	429a      	cmp	r2, r3
 8007b20:	d903      	bls.n	8007b2a <xTaskRemoveFromEventList+0x5e>
 8007b22:	693b      	ldr	r3, [r7, #16]
 8007b24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b26:	4a16      	ldr	r2, [pc, #88]	@ (8007b80 <xTaskRemoveFromEventList+0xb4>)
 8007b28:	6013      	str	r3, [r2, #0]
 8007b2a:	693b      	ldr	r3, [r7, #16]
 8007b2c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007b2e:	4613      	mov	r3, r2
 8007b30:	009b      	lsls	r3, r3, #2
 8007b32:	4413      	add	r3, r2
 8007b34:	009b      	lsls	r3, r3, #2
 8007b36:	4a13      	ldr	r2, [pc, #76]	@ (8007b84 <xTaskRemoveFromEventList+0xb8>)
 8007b38:	441a      	add	r2, r3
 8007b3a:	693b      	ldr	r3, [r7, #16]
 8007b3c:	3304      	adds	r3, #4
 8007b3e:	4619      	mov	r1, r3
 8007b40:	4610      	mov	r0, r2
 8007b42:	f7fe f838 	bl	8005bb6 <vListInsertEnd>
 8007b46:	e005      	b.n	8007b54 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8007b48:	693b      	ldr	r3, [r7, #16]
 8007b4a:	3318      	adds	r3, #24
 8007b4c:	4619      	mov	r1, r3
 8007b4e:	480e      	ldr	r0, [pc, #56]	@ (8007b88 <xTaskRemoveFromEventList+0xbc>)
 8007b50:	f7fe f831 	bl	8005bb6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007b54:	693b      	ldr	r3, [r7, #16]
 8007b56:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007b58:	4b0c      	ldr	r3, [pc, #48]	@ (8007b8c <xTaskRemoveFromEventList+0xc0>)
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b5e:	429a      	cmp	r2, r3
 8007b60:	d905      	bls.n	8007b6e <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8007b62:	2301      	movs	r3, #1
 8007b64:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8007b66:	4b0a      	ldr	r3, [pc, #40]	@ (8007b90 <xTaskRemoveFromEventList+0xc4>)
 8007b68:	2201      	movs	r2, #1
 8007b6a:	601a      	str	r2, [r3, #0]
 8007b6c:	e001      	b.n	8007b72 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8007b6e:	2300      	movs	r3, #0
 8007b70:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8007b72:	697b      	ldr	r3, [r7, #20]
}
 8007b74:	4618      	mov	r0, r3
 8007b76:	3718      	adds	r7, #24
 8007b78:	46bd      	mov	sp, r7
 8007b7a:	bd80      	pop	{r7, pc}
 8007b7c:	20002ba0 	.word	0x20002ba0
 8007b80:	20002b80 	.word	0x20002b80
 8007b84:	200026a8 	.word	0x200026a8
 8007b88:	20002b38 	.word	0x20002b38
 8007b8c:	200026a4 	.word	0x200026a4
 8007b90:	20002b8c 	.word	0x20002b8c

08007b94 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007b94:	b480      	push	{r7}
 8007b96:	b083      	sub	sp, #12
 8007b98:	af00      	add	r7, sp, #0
 8007b9a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007b9c:	4b06      	ldr	r3, [pc, #24]	@ (8007bb8 <vTaskInternalSetTimeOutState+0x24>)
 8007b9e:	681a      	ldr	r2, [r3, #0]
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007ba4:	4b05      	ldr	r3, [pc, #20]	@ (8007bbc <vTaskInternalSetTimeOutState+0x28>)
 8007ba6:	681a      	ldr	r2, [r3, #0]
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	605a      	str	r2, [r3, #4]
}
 8007bac:	bf00      	nop
 8007bae:	370c      	adds	r7, #12
 8007bb0:	46bd      	mov	sp, r7
 8007bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bb6:	4770      	bx	lr
 8007bb8:	20002b90 	.word	0x20002b90
 8007bbc:	20002b7c 	.word	0x20002b7c

08007bc0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8007bc0:	b580      	push	{r7, lr}
 8007bc2:	b088      	sub	sp, #32
 8007bc4:	af00      	add	r7, sp, #0
 8007bc6:	6078      	str	r0, [r7, #4]
 8007bc8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	2b00      	cmp	r3, #0
 8007bce:	d10b      	bne.n	8007be8 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8007bd0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007bd4:	f383 8811 	msr	BASEPRI, r3
 8007bd8:	f3bf 8f6f 	isb	sy
 8007bdc:	f3bf 8f4f 	dsb	sy
 8007be0:	613b      	str	r3, [r7, #16]
}
 8007be2:	bf00      	nop
 8007be4:	bf00      	nop
 8007be6:	e7fd      	b.n	8007be4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8007be8:	683b      	ldr	r3, [r7, #0]
 8007bea:	2b00      	cmp	r3, #0
 8007bec:	d10b      	bne.n	8007c06 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8007bee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007bf2:	f383 8811 	msr	BASEPRI, r3
 8007bf6:	f3bf 8f6f 	isb	sy
 8007bfa:	f3bf 8f4f 	dsb	sy
 8007bfe:	60fb      	str	r3, [r7, #12]
}
 8007c00:	bf00      	nop
 8007c02:	bf00      	nop
 8007c04:	e7fd      	b.n	8007c02 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8007c06:	f7fe f98f 	bl	8005f28 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8007c0a:	4b1d      	ldr	r3, [pc, #116]	@ (8007c80 <xTaskCheckForTimeOut+0xc0>)
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	685b      	ldr	r3, [r3, #4]
 8007c14:	69ba      	ldr	r2, [r7, #24]
 8007c16:	1ad3      	subs	r3, r2, r3
 8007c18:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8007c1a:	683b      	ldr	r3, [r7, #0]
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c22:	d102      	bne.n	8007c2a <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8007c24:	2300      	movs	r3, #0
 8007c26:	61fb      	str	r3, [r7, #28]
 8007c28:	e023      	b.n	8007c72 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	681a      	ldr	r2, [r3, #0]
 8007c2e:	4b15      	ldr	r3, [pc, #84]	@ (8007c84 <xTaskCheckForTimeOut+0xc4>)
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	429a      	cmp	r2, r3
 8007c34:	d007      	beq.n	8007c46 <xTaskCheckForTimeOut+0x86>
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	685b      	ldr	r3, [r3, #4]
 8007c3a:	69ba      	ldr	r2, [r7, #24]
 8007c3c:	429a      	cmp	r2, r3
 8007c3e:	d302      	bcc.n	8007c46 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8007c40:	2301      	movs	r3, #1
 8007c42:	61fb      	str	r3, [r7, #28]
 8007c44:	e015      	b.n	8007c72 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8007c46:	683b      	ldr	r3, [r7, #0]
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	697a      	ldr	r2, [r7, #20]
 8007c4c:	429a      	cmp	r2, r3
 8007c4e:	d20b      	bcs.n	8007c68 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8007c50:	683b      	ldr	r3, [r7, #0]
 8007c52:	681a      	ldr	r2, [r3, #0]
 8007c54:	697b      	ldr	r3, [r7, #20]
 8007c56:	1ad2      	subs	r2, r2, r3
 8007c58:	683b      	ldr	r3, [r7, #0]
 8007c5a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8007c5c:	6878      	ldr	r0, [r7, #4]
 8007c5e:	f7ff ff99 	bl	8007b94 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8007c62:	2300      	movs	r3, #0
 8007c64:	61fb      	str	r3, [r7, #28]
 8007c66:	e004      	b.n	8007c72 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8007c68:	683b      	ldr	r3, [r7, #0]
 8007c6a:	2200      	movs	r2, #0
 8007c6c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8007c6e:	2301      	movs	r3, #1
 8007c70:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8007c72:	f7fe f98b 	bl	8005f8c <vPortExitCritical>

	return xReturn;
 8007c76:	69fb      	ldr	r3, [r7, #28]
}
 8007c78:	4618      	mov	r0, r3
 8007c7a:	3720      	adds	r7, #32
 8007c7c:	46bd      	mov	sp, r7
 8007c7e:	bd80      	pop	{r7, pc}
 8007c80:	20002b7c 	.word	0x20002b7c
 8007c84:	20002b90 	.word	0x20002b90

08007c88 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007c88:	b480      	push	{r7}
 8007c8a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8007c8c:	4b03      	ldr	r3, [pc, #12]	@ (8007c9c <vTaskMissedYield+0x14>)
 8007c8e:	2201      	movs	r2, #1
 8007c90:	601a      	str	r2, [r3, #0]
}
 8007c92:	bf00      	nop
 8007c94:	46bd      	mov	sp, r7
 8007c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c9a:	4770      	bx	lr
 8007c9c:	20002b8c 	.word	0x20002b8c

08007ca0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007ca0:	b580      	push	{r7, lr}
 8007ca2:	b082      	sub	sp, #8
 8007ca4:	af00      	add	r7, sp, #0
 8007ca6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007ca8:	f000 f852 	bl	8007d50 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007cac:	4b06      	ldr	r3, [pc, #24]	@ (8007cc8 <prvIdleTask+0x28>)
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	2b01      	cmp	r3, #1
 8007cb2:	d9f9      	bls.n	8007ca8 <prvIdleTask+0x8>
			{
				taskYIELD();
 8007cb4:	4b05      	ldr	r3, [pc, #20]	@ (8007ccc <prvIdleTask+0x2c>)
 8007cb6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007cba:	601a      	str	r2, [r3, #0]
 8007cbc:	f3bf 8f4f 	dsb	sy
 8007cc0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007cc4:	e7f0      	b.n	8007ca8 <prvIdleTask+0x8>
 8007cc6:	bf00      	nop
 8007cc8:	200026a8 	.word	0x200026a8
 8007ccc:	e000ed04 	.word	0xe000ed04

08007cd0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007cd0:	b580      	push	{r7, lr}
 8007cd2:	b082      	sub	sp, #8
 8007cd4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007cd6:	2300      	movs	r3, #0
 8007cd8:	607b      	str	r3, [r7, #4]
 8007cda:	e00c      	b.n	8007cf6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007cdc:	687a      	ldr	r2, [r7, #4]
 8007cde:	4613      	mov	r3, r2
 8007ce0:	009b      	lsls	r3, r3, #2
 8007ce2:	4413      	add	r3, r2
 8007ce4:	009b      	lsls	r3, r3, #2
 8007ce6:	4a12      	ldr	r2, [pc, #72]	@ (8007d30 <prvInitialiseTaskLists+0x60>)
 8007ce8:	4413      	add	r3, r2
 8007cea:	4618      	mov	r0, r3
 8007cec:	f7fd ff36 	bl	8005b5c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	3301      	adds	r3, #1
 8007cf4:	607b      	str	r3, [r7, #4]
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	2b37      	cmp	r3, #55	@ 0x37
 8007cfa:	d9ef      	bls.n	8007cdc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007cfc:	480d      	ldr	r0, [pc, #52]	@ (8007d34 <prvInitialiseTaskLists+0x64>)
 8007cfe:	f7fd ff2d 	bl	8005b5c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007d02:	480d      	ldr	r0, [pc, #52]	@ (8007d38 <prvInitialiseTaskLists+0x68>)
 8007d04:	f7fd ff2a 	bl	8005b5c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007d08:	480c      	ldr	r0, [pc, #48]	@ (8007d3c <prvInitialiseTaskLists+0x6c>)
 8007d0a:	f7fd ff27 	bl	8005b5c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8007d0e:	480c      	ldr	r0, [pc, #48]	@ (8007d40 <prvInitialiseTaskLists+0x70>)
 8007d10:	f7fd ff24 	bl	8005b5c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007d14:	480b      	ldr	r0, [pc, #44]	@ (8007d44 <prvInitialiseTaskLists+0x74>)
 8007d16:	f7fd ff21 	bl	8005b5c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007d1a:	4b0b      	ldr	r3, [pc, #44]	@ (8007d48 <prvInitialiseTaskLists+0x78>)
 8007d1c:	4a05      	ldr	r2, [pc, #20]	@ (8007d34 <prvInitialiseTaskLists+0x64>)
 8007d1e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007d20:	4b0a      	ldr	r3, [pc, #40]	@ (8007d4c <prvInitialiseTaskLists+0x7c>)
 8007d22:	4a05      	ldr	r2, [pc, #20]	@ (8007d38 <prvInitialiseTaskLists+0x68>)
 8007d24:	601a      	str	r2, [r3, #0]
}
 8007d26:	bf00      	nop
 8007d28:	3708      	adds	r7, #8
 8007d2a:	46bd      	mov	sp, r7
 8007d2c:	bd80      	pop	{r7, pc}
 8007d2e:	bf00      	nop
 8007d30:	200026a8 	.word	0x200026a8
 8007d34:	20002b08 	.word	0x20002b08
 8007d38:	20002b1c 	.word	0x20002b1c
 8007d3c:	20002b38 	.word	0x20002b38
 8007d40:	20002b4c 	.word	0x20002b4c
 8007d44:	20002b64 	.word	0x20002b64
 8007d48:	20002b30 	.word	0x20002b30
 8007d4c:	20002b34 	.word	0x20002b34

08007d50 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007d50:	b580      	push	{r7, lr}
 8007d52:	b082      	sub	sp, #8
 8007d54:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007d56:	e019      	b.n	8007d8c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007d58:	f7fe f8e6 	bl	8005f28 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007d5c:	4b10      	ldr	r3, [pc, #64]	@ (8007da0 <prvCheckTasksWaitingTermination+0x50>)
 8007d5e:	68db      	ldr	r3, [r3, #12]
 8007d60:	68db      	ldr	r3, [r3, #12]
 8007d62:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	3304      	adds	r3, #4
 8007d68:	4618      	mov	r0, r3
 8007d6a:	f7fd ff81 	bl	8005c70 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8007d6e:	4b0d      	ldr	r3, [pc, #52]	@ (8007da4 <prvCheckTasksWaitingTermination+0x54>)
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	3b01      	subs	r3, #1
 8007d74:	4a0b      	ldr	r2, [pc, #44]	@ (8007da4 <prvCheckTasksWaitingTermination+0x54>)
 8007d76:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007d78:	4b0b      	ldr	r3, [pc, #44]	@ (8007da8 <prvCheckTasksWaitingTermination+0x58>)
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	3b01      	subs	r3, #1
 8007d7e:	4a0a      	ldr	r2, [pc, #40]	@ (8007da8 <prvCheckTasksWaitingTermination+0x58>)
 8007d80:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8007d82:	f7fe f903 	bl	8005f8c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8007d86:	6878      	ldr	r0, [r7, #4]
 8007d88:	f000 f810 	bl	8007dac <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007d8c:	4b06      	ldr	r3, [pc, #24]	@ (8007da8 <prvCheckTasksWaitingTermination+0x58>)
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	2b00      	cmp	r3, #0
 8007d92:	d1e1      	bne.n	8007d58 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007d94:	bf00      	nop
 8007d96:	bf00      	nop
 8007d98:	3708      	adds	r7, #8
 8007d9a:	46bd      	mov	sp, r7
 8007d9c:	bd80      	pop	{r7, pc}
 8007d9e:	bf00      	nop
 8007da0:	20002b4c 	.word	0x20002b4c
 8007da4:	20002b78 	.word	0x20002b78
 8007da8:	20002b60 	.word	0x20002b60

08007dac <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007dac:	b580      	push	{r7, lr}
 8007dae:	b084      	sub	sp, #16
 8007db0:	af00      	add	r7, sp, #0
 8007db2:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	3354      	adds	r3, #84	@ 0x54
 8007db8:	4618      	mov	r0, r3
 8007dba:	f000 fda1 	bl	8008900 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8007dc4:	2b00      	cmp	r3, #0
 8007dc6:	d108      	bne.n	8007dda <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007dcc:	4618      	mov	r0, r3
 8007dce:	f7fd fda5 	bl	800591c <vPortFree>
				vPortFree( pxTCB );
 8007dd2:	6878      	ldr	r0, [r7, #4]
 8007dd4:	f7fd fda2 	bl	800591c <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007dd8:	e019      	b.n	8007e0e <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8007de0:	2b01      	cmp	r3, #1
 8007de2:	d103      	bne.n	8007dec <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8007de4:	6878      	ldr	r0, [r7, #4]
 8007de6:	f7fd fd99 	bl	800591c <vPortFree>
	}
 8007dea:	e010      	b.n	8007e0e <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8007df2:	2b02      	cmp	r3, #2
 8007df4:	d00b      	beq.n	8007e0e <prvDeleteTCB+0x62>
	__asm volatile
 8007df6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007dfa:	f383 8811 	msr	BASEPRI, r3
 8007dfe:	f3bf 8f6f 	isb	sy
 8007e02:	f3bf 8f4f 	dsb	sy
 8007e06:	60fb      	str	r3, [r7, #12]
}
 8007e08:	bf00      	nop
 8007e0a:	bf00      	nop
 8007e0c:	e7fd      	b.n	8007e0a <prvDeleteTCB+0x5e>
	}
 8007e0e:	bf00      	nop
 8007e10:	3710      	adds	r7, #16
 8007e12:	46bd      	mov	sp, r7
 8007e14:	bd80      	pop	{r7, pc}
	...

08007e18 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007e18:	b480      	push	{r7}
 8007e1a:	b083      	sub	sp, #12
 8007e1c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007e1e:	4b0c      	ldr	r3, [pc, #48]	@ (8007e50 <prvResetNextTaskUnblockTime+0x38>)
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	2b00      	cmp	r3, #0
 8007e26:	d104      	bne.n	8007e32 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007e28:	4b0a      	ldr	r3, [pc, #40]	@ (8007e54 <prvResetNextTaskUnblockTime+0x3c>)
 8007e2a:	f04f 32ff 	mov.w	r2, #4294967295
 8007e2e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007e30:	e008      	b.n	8007e44 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007e32:	4b07      	ldr	r3, [pc, #28]	@ (8007e50 <prvResetNextTaskUnblockTime+0x38>)
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	68db      	ldr	r3, [r3, #12]
 8007e38:	68db      	ldr	r3, [r3, #12]
 8007e3a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	685b      	ldr	r3, [r3, #4]
 8007e40:	4a04      	ldr	r2, [pc, #16]	@ (8007e54 <prvResetNextTaskUnblockTime+0x3c>)
 8007e42:	6013      	str	r3, [r2, #0]
}
 8007e44:	bf00      	nop
 8007e46:	370c      	adds	r7, #12
 8007e48:	46bd      	mov	sp, r7
 8007e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e4e:	4770      	bx	lr
 8007e50:	20002b30 	.word	0x20002b30
 8007e54:	20002b98 	.word	0x20002b98

08007e58 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 8007e58:	b480      	push	{r7}
 8007e5a:	b083      	sub	sp, #12
 8007e5c:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 8007e5e:	4b05      	ldr	r3, [pc, #20]	@ (8007e74 <xTaskGetCurrentTaskHandle+0x1c>)
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	607b      	str	r3, [r7, #4]

		return xReturn;
 8007e64:	687b      	ldr	r3, [r7, #4]
	}
 8007e66:	4618      	mov	r0, r3
 8007e68:	370c      	adds	r7, #12
 8007e6a:	46bd      	mov	sp, r7
 8007e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e70:	4770      	bx	lr
 8007e72:	bf00      	nop
 8007e74:	200026a4 	.word	0x200026a4

08007e78 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8007e78:	b480      	push	{r7}
 8007e7a:	b083      	sub	sp, #12
 8007e7c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8007e7e:	4b0b      	ldr	r3, [pc, #44]	@ (8007eac <xTaskGetSchedulerState+0x34>)
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	2b00      	cmp	r3, #0
 8007e84:	d102      	bne.n	8007e8c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8007e86:	2301      	movs	r3, #1
 8007e88:	607b      	str	r3, [r7, #4]
 8007e8a:	e008      	b.n	8007e9e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007e8c:	4b08      	ldr	r3, [pc, #32]	@ (8007eb0 <xTaskGetSchedulerState+0x38>)
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	2b00      	cmp	r3, #0
 8007e92:	d102      	bne.n	8007e9a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8007e94:	2302      	movs	r3, #2
 8007e96:	607b      	str	r3, [r7, #4]
 8007e98:	e001      	b.n	8007e9e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8007e9a:	2300      	movs	r3, #0
 8007e9c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8007e9e:	687b      	ldr	r3, [r7, #4]
	}
 8007ea0:	4618      	mov	r0, r3
 8007ea2:	370c      	adds	r7, #12
 8007ea4:	46bd      	mov	sp, r7
 8007ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eaa:	4770      	bx	lr
 8007eac:	20002b84 	.word	0x20002b84
 8007eb0:	20002ba0 	.word	0x20002ba0

08007eb4 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8007eb4:	b580      	push	{r7, lr}
 8007eb6:	b084      	sub	sp, #16
 8007eb8:	af00      	add	r7, sp, #0
 8007eba:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8007ec0:	2300      	movs	r3, #0
 8007ec2:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	d051      	beq.n	8007f6e <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8007eca:	68bb      	ldr	r3, [r7, #8]
 8007ecc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007ece:	4b2a      	ldr	r3, [pc, #168]	@ (8007f78 <xTaskPriorityInherit+0xc4>)
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ed4:	429a      	cmp	r2, r3
 8007ed6:	d241      	bcs.n	8007f5c <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8007ed8:	68bb      	ldr	r3, [r7, #8]
 8007eda:	699b      	ldr	r3, [r3, #24]
 8007edc:	2b00      	cmp	r3, #0
 8007ede:	db06      	blt.n	8007eee <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007ee0:	4b25      	ldr	r3, [pc, #148]	@ (8007f78 <xTaskPriorityInherit+0xc4>)
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ee6:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8007eea:	68bb      	ldr	r3, [r7, #8]
 8007eec:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8007eee:	68bb      	ldr	r3, [r7, #8]
 8007ef0:	6959      	ldr	r1, [r3, #20]
 8007ef2:	68bb      	ldr	r3, [r7, #8]
 8007ef4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007ef6:	4613      	mov	r3, r2
 8007ef8:	009b      	lsls	r3, r3, #2
 8007efa:	4413      	add	r3, r2
 8007efc:	009b      	lsls	r3, r3, #2
 8007efe:	4a1f      	ldr	r2, [pc, #124]	@ (8007f7c <xTaskPriorityInherit+0xc8>)
 8007f00:	4413      	add	r3, r2
 8007f02:	4299      	cmp	r1, r3
 8007f04:	d122      	bne.n	8007f4c <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007f06:	68bb      	ldr	r3, [r7, #8]
 8007f08:	3304      	adds	r3, #4
 8007f0a:	4618      	mov	r0, r3
 8007f0c:	f7fd feb0 	bl	8005c70 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8007f10:	4b19      	ldr	r3, [pc, #100]	@ (8007f78 <xTaskPriorityInherit+0xc4>)
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007f16:	68bb      	ldr	r3, [r7, #8]
 8007f18:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8007f1a:	68bb      	ldr	r3, [r7, #8]
 8007f1c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007f1e:	4b18      	ldr	r3, [pc, #96]	@ (8007f80 <xTaskPriorityInherit+0xcc>)
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	429a      	cmp	r2, r3
 8007f24:	d903      	bls.n	8007f2e <xTaskPriorityInherit+0x7a>
 8007f26:	68bb      	ldr	r3, [r7, #8]
 8007f28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007f2a:	4a15      	ldr	r2, [pc, #84]	@ (8007f80 <xTaskPriorityInherit+0xcc>)
 8007f2c:	6013      	str	r3, [r2, #0]
 8007f2e:	68bb      	ldr	r3, [r7, #8]
 8007f30:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007f32:	4613      	mov	r3, r2
 8007f34:	009b      	lsls	r3, r3, #2
 8007f36:	4413      	add	r3, r2
 8007f38:	009b      	lsls	r3, r3, #2
 8007f3a:	4a10      	ldr	r2, [pc, #64]	@ (8007f7c <xTaskPriorityInherit+0xc8>)
 8007f3c:	441a      	add	r2, r3
 8007f3e:	68bb      	ldr	r3, [r7, #8]
 8007f40:	3304      	adds	r3, #4
 8007f42:	4619      	mov	r1, r3
 8007f44:	4610      	mov	r0, r2
 8007f46:	f7fd fe36 	bl	8005bb6 <vListInsertEnd>
 8007f4a:	e004      	b.n	8007f56 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8007f4c:	4b0a      	ldr	r3, [pc, #40]	@ (8007f78 <xTaskPriorityInherit+0xc4>)
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007f52:	68bb      	ldr	r3, [r7, #8]
 8007f54:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8007f56:	2301      	movs	r3, #1
 8007f58:	60fb      	str	r3, [r7, #12]
 8007f5a:	e008      	b.n	8007f6e <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8007f5c:	68bb      	ldr	r3, [r7, #8]
 8007f5e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007f60:	4b05      	ldr	r3, [pc, #20]	@ (8007f78 <xTaskPriorityInherit+0xc4>)
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007f66:	429a      	cmp	r2, r3
 8007f68:	d201      	bcs.n	8007f6e <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8007f6a:	2301      	movs	r3, #1
 8007f6c:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007f6e:	68fb      	ldr	r3, [r7, #12]
	}
 8007f70:	4618      	mov	r0, r3
 8007f72:	3710      	adds	r7, #16
 8007f74:	46bd      	mov	sp, r7
 8007f76:	bd80      	pop	{r7, pc}
 8007f78:	200026a4 	.word	0x200026a4
 8007f7c:	200026a8 	.word	0x200026a8
 8007f80:	20002b80 	.word	0x20002b80

08007f84 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8007f84:	b580      	push	{r7, lr}
 8007f86:	b086      	sub	sp, #24
 8007f88:	af00      	add	r7, sp, #0
 8007f8a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8007f90:	2300      	movs	r3, #0
 8007f92:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	2b00      	cmp	r3, #0
 8007f98:	d058      	beq.n	800804c <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8007f9a:	4b2f      	ldr	r3, [pc, #188]	@ (8008058 <xTaskPriorityDisinherit+0xd4>)
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	693a      	ldr	r2, [r7, #16]
 8007fa0:	429a      	cmp	r2, r3
 8007fa2:	d00b      	beq.n	8007fbc <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8007fa4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007fa8:	f383 8811 	msr	BASEPRI, r3
 8007fac:	f3bf 8f6f 	isb	sy
 8007fb0:	f3bf 8f4f 	dsb	sy
 8007fb4:	60fb      	str	r3, [r7, #12]
}
 8007fb6:	bf00      	nop
 8007fb8:	bf00      	nop
 8007fba:	e7fd      	b.n	8007fb8 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8007fbc:	693b      	ldr	r3, [r7, #16]
 8007fbe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007fc0:	2b00      	cmp	r3, #0
 8007fc2:	d10b      	bne.n	8007fdc <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8007fc4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007fc8:	f383 8811 	msr	BASEPRI, r3
 8007fcc:	f3bf 8f6f 	isb	sy
 8007fd0:	f3bf 8f4f 	dsb	sy
 8007fd4:	60bb      	str	r3, [r7, #8]
}
 8007fd6:	bf00      	nop
 8007fd8:	bf00      	nop
 8007fda:	e7fd      	b.n	8007fd8 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8007fdc:	693b      	ldr	r3, [r7, #16]
 8007fde:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007fe0:	1e5a      	subs	r2, r3, #1
 8007fe2:	693b      	ldr	r3, [r7, #16]
 8007fe4:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8007fe6:	693b      	ldr	r3, [r7, #16]
 8007fe8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007fea:	693b      	ldr	r3, [r7, #16]
 8007fec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007fee:	429a      	cmp	r2, r3
 8007ff0:	d02c      	beq.n	800804c <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8007ff2:	693b      	ldr	r3, [r7, #16]
 8007ff4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007ff6:	2b00      	cmp	r3, #0
 8007ff8:	d128      	bne.n	800804c <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007ffa:	693b      	ldr	r3, [r7, #16]
 8007ffc:	3304      	adds	r3, #4
 8007ffe:	4618      	mov	r0, r3
 8008000:	f7fd fe36 	bl	8005c70 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8008004:	693b      	ldr	r3, [r7, #16]
 8008006:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8008008:	693b      	ldr	r3, [r7, #16]
 800800a:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800800c:	693b      	ldr	r3, [r7, #16]
 800800e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008010:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8008014:	693b      	ldr	r3, [r7, #16]
 8008016:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8008018:	693b      	ldr	r3, [r7, #16]
 800801a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800801c:	4b0f      	ldr	r3, [pc, #60]	@ (800805c <xTaskPriorityDisinherit+0xd8>)
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	429a      	cmp	r2, r3
 8008022:	d903      	bls.n	800802c <xTaskPriorityDisinherit+0xa8>
 8008024:	693b      	ldr	r3, [r7, #16]
 8008026:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008028:	4a0c      	ldr	r2, [pc, #48]	@ (800805c <xTaskPriorityDisinherit+0xd8>)
 800802a:	6013      	str	r3, [r2, #0]
 800802c:	693b      	ldr	r3, [r7, #16]
 800802e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008030:	4613      	mov	r3, r2
 8008032:	009b      	lsls	r3, r3, #2
 8008034:	4413      	add	r3, r2
 8008036:	009b      	lsls	r3, r3, #2
 8008038:	4a09      	ldr	r2, [pc, #36]	@ (8008060 <xTaskPriorityDisinherit+0xdc>)
 800803a:	441a      	add	r2, r3
 800803c:	693b      	ldr	r3, [r7, #16]
 800803e:	3304      	adds	r3, #4
 8008040:	4619      	mov	r1, r3
 8008042:	4610      	mov	r0, r2
 8008044:	f7fd fdb7 	bl	8005bb6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8008048:	2301      	movs	r3, #1
 800804a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800804c:	697b      	ldr	r3, [r7, #20]
	}
 800804e:	4618      	mov	r0, r3
 8008050:	3718      	adds	r7, #24
 8008052:	46bd      	mov	sp, r7
 8008054:	bd80      	pop	{r7, pc}
 8008056:	bf00      	nop
 8008058:	200026a4 	.word	0x200026a4
 800805c:	20002b80 	.word	0x20002b80
 8008060:	200026a8 	.word	0x200026a8

08008064 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8008064:	b580      	push	{r7, lr}
 8008066:	b088      	sub	sp, #32
 8008068:	af00      	add	r7, sp, #0
 800806a:	6078      	str	r0, [r7, #4]
 800806c:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8008072:	2301      	movs	r3, #1
 8008074:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	2b00      	cmp	r3, #0
 800807a:	d06c      	beq.n	8008156 <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800807c:	69bb      	ldr	r3, [r7, #24]
 800807e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008080:	2b00      	cmp	r3, #0
 8008082:	d10b      	bne.n	800809c <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 8008084:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008088:	f383 8811 	msr	BASEPRI, r3
 800808c:	f3bf 8f6f 	isb	sy
 8008090:	f3bf 8f4f 	dsb	sy
 8008094:	60fb      	str	r3, [r7, #12]
}
 8008096:	bf00      	nop
 8008098:	bf00      	nop
 800809a:	e7fd      	b.n	8008098 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800809c:	69bb      	ldr	r3, [r7, #24]
 800809e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80080a0:	683a      	ldr	r2, [r7, #0]
 80080a2:	429a      	cmp	r2, r3
 80080a4:	d902      	bls.n	80080ac <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80080a6:	683b      	ldr	r3, [r7, #0]
 80080a8:	61fb      	str	r3, [r7, #28]
 80080aa:	e002      	b.n	80080b2 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80080ac:	69bb      	ldr	r3, [r7, #24]
 80080ae:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80080b0:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 80080b2:	69bb      	ldr	r3, [r7, #24]
 80080b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80080b6:	69fa      	ldr	r2, [r7, #28]
 80080b8:	429a      	cmp	r2, r3
 80080ba:	d04c      	beq.n	8008156 <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80080bc:	69bb      	ldr	r3, [r7, #24]
 80080be:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80080c0:	697a      	ldr	r2, [r7, #20]
 80080c2:	429a      	cmp	r2, r3
 80080c4:	d147      	bne.n	8008156 <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80080c6:	4b26      	ldr	r3, [pc, #152]	@ (8008160 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	69ba      	ldr	r2, [r7, #24]
 80080cc:	429a      	cmp	r2, r3
 80080ce:	d10b      	bne.n	80080e8 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 80080d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80080d4:	f383 8811 	msr	BASEPRI, r3
 80080d8:	f3bf 8f6f 	isb	sy
 80080dc:	f3bf 8f4f 	dsb	sy
 80080e0:	60bb      	str	r3, [r7, #8]
}
 80080e2:	bf00      	nop
 80080e4:	bf00      	nop
 80080e6:	e7fd      	b.n	80080e4 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80080e8:	69bb      	ldr	r3, [r7, #24]
 80080ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80080ec:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 80080ee:	69bb      	ldr	r3, [r7, #24]
 80080f0:	69fa      	ldr	r2, [r7, #28]
 80080f2:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80080f4:	69bb      	ldr	r3, [r7, #24]
 80080f6:	699b      	ldr	r3, [r3, #24]
 80080f8:	2b00      	cmp	r3, #0
 80080fa:	db04      	blt.n	8008106 <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80080fc:	69fb      	ldr	r3, [r7, #28]
 80080fe:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8008102:	69bb      	ldr	r3, [r7, #24]
 8008104:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8008106:	69bb      	ldr	r3, [r7, #24]
 8008108:	6959      	ldr	r1, [r3, #20]
 800810a:	693a      	ldr	r2, [r7, #16]
 800810c:	4613      	mov	r3, r2
 800810e:	009b      	lsls	r3, r3, #2
 8008110:	4413      	add	r3, r2
 8008112:	009b      	lsls	r3, r3, #2
 8008114:	4a13      	ldr	r2, [pc, #76]	@ (8008164 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8008116:	4413      	add	r3, r2
 8008118:	4299      	cmp	r1, r3
 800811a:	d11c      	bne.n	8008156 <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800811c:	69bb      	ldr	r3, [r7, #24]
 800811e:	3304      	adds	r3, #4
 8008120:	4618      	mov	r0, r3
 8008122:	f7fd fda5 	bl	8005c70 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8008126:	69bb      	ldr	r3, [r7, #24]
 8008128:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800812a:	4b0f      	ldr	r3, [pc, #60]	@ (8008168 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	429a      	cmp	r2, r3
 8008130:	d903      	bls.n	800813a <vTaskPriorityDisinheritAfterTimeout+0xd6>
 8008132:	69bb      	ldr	r3, [r7, #24]
 8008134:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008136:	4a0c      	ldr	r2, [pc, #48]	@ (8008168 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8008138:	6013      	str	r3, [r2, #0]
 800813a:	69bb      	ldr	r3, [r7, #24]
 800813c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800813e:	4613      	mov	r3, r2
 8008140:	009b      	lsls	r3, r3, #2
 8008142:	4413      	add	r3, r2
 8008144:	009b      	lsls	r3, r3, #2
 8008146:	4a07      	ldr	r2, [pc, #28]	@ (8008164 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8008148:	441a      	add	r2, r3
 800814a:	69bb      	ldr	r3, [r7, #24]
 800814c:	3304      	adds	r3, #4
 800814e:	4619      	mov	r1, r3
 8008150:	4610      	mov	r0, r2
 8008152:	f7fd fd30 	bl	8005bb6 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008156:	bf00      	nop
 8008158:	3720      	adds	r7, #32
 800815a:	46bd      	mov	sp, r7
 800815c:	bd80      	pop	{r7, pc}
 800815e:	bf00      	nop
 8008160:	200026a4 	.word	0x200026a4
 8008164:	200026a8 	.word	0x200026a8
 8008168:	20002b80 	.word	0x20002b80

0800816c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800816c:	b480      	push	{r7}
 800816e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8008170:	4b07      	ldr	r3, [pc, #28]	@ (8008190 <pvTaskIncrementMutexHeldCount+0x24>)
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	2b00      	cmp	r3, #0
 8008176:	d004      	beq.n	8008182 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8008178:	4b05      	ldr	r3, [pc, #20]	@ (8008190 <pvTaskIncrementMutexHeldCount+0x24>)
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800817e:	3201      	adds	r2, #1
 8008180:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 8008182:	4b03      	ldr	r3, [pc, #12]	@ (8008190 <pvTaskIncrementMutexHeldCount+0x24>)
 8008184:	681b      	ldr	r3, [r3, #0]
	}
 8008186:	4618      	mov	r0, r3
 8008188:	46bd      	mov	sp, r7
 800818a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800818e:	4770      	bx	lr
 8008190:	200026a4 	.word	0x200026a4

08008194 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008194:	b580      	push	{r7, lr}
 8008196:	b084      	sub	sp, #16
 8008198:	af00      	add	r7, sp, #0
 800819a:	6078      	str	r0, [r7, #4]
 800819c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800819e:	4b21      	ldr	r3, [pc, #132]	@ (8008224 <prvAddCurrentTaskToDelayedList+0x90>)
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80081a4:	4b20      	ldr	r3, [pc, #128]	@ (8008228 <prvAddCurrentTaskToDelayedList+0x94>)
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	3304      	adds	r3, #4
 80081aa:	4618      	mov	r0, r3
 80081ac:	f7fd fd60 	bl	8005c70 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80081b6:	d10a      	bne.n	80081ce <prvAddCurrentTaskToDelayedList+0x3a>
 80081b8:	683b      	ldr	r3, [r7, #0]
 80081ba:	2b00      	cmp	r3, #0
 80081bc:	d007      	beq.n	80081ce <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80081be:	4b1a      	ldr	r3, [pc, #104]	@ (8008228 <prvAddCurrentTaskToDelayedList+0x94>)
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	3304      	adds	r3, #4
 80081c4:	4619      	mov	r1, r3
 80081c6:	4819      	ldr	r0, [pc, #100]	@ (800822c <prvAddCurrentTaskToDelayedList+0x98>)
 80081c8:	f7fd fcf5 	bl	8005bb6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80081cc:	e026      	b.n	800821c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80081ce:	68fa      	ldr	r2, [r7, #12]
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	4413      	add	r3, r2
 80081d4:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80081d6:	4b14      	ldr	r3, [pc, #80]	@ (8008228 <prvAddCurrentTaskToDelayedList+0x94>)
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	68ba      	ldr	r2, [r7, #8]
 80081dc:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80081de:	68ba      	ldr	r2, [r7, #8]
 80081e0:	68fb      	ldr	r3, [r7, #12]
 80081e2:	429a      	cmp	r2, r3
 80081e4:	d209      	bcs.n	80081fa <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80081e6:	4b12      	ldr	r3, [pc, #72]	@ (8008230 <prvAddCurrentTaskToDelayedList+0x9c>)
 80081e8:	681a      	ldr	r2, [r3, #0]
 80081ea:	4b0f      	ldr	r3, [pc, #60]	@ (8008228 <prvAddCurrentTaskToDelayedList+0x94>)
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	3304      	adds	r3, #4
 80081f0:	4619      	mov	r1, r3
 80081f2:	4610      	mov	r0, r2
 80081f4:	f7fd fd03 	bl	8005bfe <vListInsert>
}
 80081f8:	e010      	b.n	800821c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80081fa:	4b0e      	ldr	r3, [pc, #56]	@ (8008234 <prvAddCurrentTaskToDelayedList+0xa0>)
 80081fc:	681a      	ldr	r2, [r3, #0]
 80081fe:	4b0a      	ldr	r3, [pc, #40]	@ (8008228 <prvAddCurrentTaskToDelayedList+0x94>)
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	3304      	adds	r3, #4
 8008204:	4619      	mov	r1, r3
 8008206:	4610      	mov	r0, r2
 8008208:	f7fd fcf9 	bl	8005bfe <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800820c:	4b0a      	ldr	r3, [pc, #40]	@ (8008238 <prvAddCurrentTaskToDelayedList+0xa4>)
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	68ba      	ldr	r2, [r7, #8]
 8008212:	429a      	cmp	r2, r3
 8008214:	d202      	bcs.n	800821c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8008216:	4a08      	ldr	r2, [pc, #32]	@ (8008238 <prvAddCurrentTaskToDelayedList+0xa4>)
 8008218:	68bb      	ldr	r3, [r7, #8]
 800821a:	6013      	str	r3, [r2, #0]
}
 800821c:	bf00      	nop
 800821e:	3710      	adds	r7, #16
 8008220:	46bd      	mov	sp, r7
 8008222:	bd80      	pop	{r7, pc}
 8008224:	20002b7c 	.word	0x20002b7c
 8008228:	200026a4 	.word	0x200026a4
 800822c:	20002b64 	.word	0x20002b64
 8008230:	20002b34 	.word	0x20002b34
 8008234:	20002b30 	.word	0x20002b30
 8008238:	20002b98 	.word	0x20002b98

0800823c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800823c:	b580      	push	{r7, lr}
 800823e:	b08a      	sub	sp, #40	@ 0x28
 8008240:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8008242:	2300      	movs	r3, #0
 8008244:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8008246:	f000 fb13 	bl	8008870 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800824a:	4b1d      	ldr	r3, [pc, #116]	@ (80082c0 <xTimerCreateTimerTask+0x84>)
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	2b00      	cmp	r3, #0
 8008250:	d021      	beq.n	8008296 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8008252:	2300      	movs	r3, #0
 8008254:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8008256:	2300      	movs	r3, #0
 8008258:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800825a:	1d3a      	adds	r2, r7, #4
 800825c:	f107 0108 	add.w	r1, r7, #8
 8008260:	f107 030c 	add.w	r3, r7, #12
 8008264:	4618      	mov	r0, r3
 8008266:	f7fd fa71 	bl	800574c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800826a:	6879      	ldr	r1, [r7, #4]
 800826c:	68bb      	ldr	r3, [r7, #8]
 800826e:	68fa      	ldr	r2, [r7, #12]
 8008270:	9202      	str	r2, [sp, #8]
 8008272:	9301      	str	r3, [sp, #4]
 8008274:	2302      	movs	r3, #2
 8008276:	9300      	str	r3, [sp, #0]
 8008278:	2300      	movs	r3, #0
 800827a:	460a      	mov	r2, r1
 800827c:	4911      	ldr	r1, [pc, #68]	@ (80082c4 <xTimerCreateTimerTask+0x88>)
 800827e:	4812      	ldr	r0, [pc, #72]	@ (80082c8 <xTimerCreateTimerTask+0x8c>)
 8008280:	f7fe fe8a 	bl	8006f98 <xTaskCreateStatic>
 8008284:	4603      	mov	r3, r0
 8008286:	4a11      	ldr	r2, [pc, #68]	@ (80082cc <xTimerCreateTimerTask+0x90>)
 8008288:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800828a:	4b10      	ldr	r3, [pc, #64]	@ (80082cc <xTimerCreateTimerTask+0x90>)
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	2b00      	cmp	r3, #0
 8008290:	d001      	beq.n	8008296 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8008292:	2301      	movs	r3, #1
 8008294:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8008296:	697b      	ldr	r3, [r7, #20]
 8008298:	2b00      	cmp	r3, #0
 800829a:	d10b      	bne.n	80082b4 <xTimerCreateTimerTask+0x78>
	__asm volatile
 800829c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80082a0:	f383 8811 	msr	BASEPRI, r3
 80082a4:	f3bf 8f6f 	isb	sy
 80082a8:	f3bf 8f4f 	dsb	sy
 80082ac:	613b      	str	r3, [r7, #16]
}
 80082ae:	bf00      	nop
 80082b0:	bf00      	nop
 80082b2:	e7fd      	b.n	80082b0 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80082b4:	697b      	ldr	r3, [r7, #20]
}
 80082b6:	4618      	mov	r0, r3
 80082b8:	3718      	adds	r7, #24
 80082ba:	46bd      	mov	sp, r7
 80082bc:	bd80      	pop	{r7, pc}
 80082be:	bf00      	nop
 80082c0:	20002bd4 	.word	0x20002bd4
 80082c4:	08008b28 	.word	0x08008b28
 80082c8:	08008409 	.word	0x08008409
 80082cc:	20002bd8 	.word	0x20002bd8

080082d0 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80082d0:	b580      	push	{r7, lr}
 80082d2:	b08a      	sub	sp, #40	@ 0x28
 80082d4:	af00      	add	r7, sp, #0
 80082d6:	60f8      	str	r0, [r7, #12]
 80082d8:	60b9      	str	r1, [r7, #8]
 80082da:	607a      	str	r2, [r7, #4]
 80082dc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80082de:	2300      	movs	r3, #0
 80082e0:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80082e2:	68fb      	ldr	r3, [r7, #12]
 80082e4:	2b00      	cmp	r3, #0
 80082e6:	d10b      	bne.n	8008300 <xTimerGenericCommand+0x30>
	__asm volatile
 80082e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80082ec:	f383 8811 	msr	BASEPRI, r3
 80082f0:	f3bf 8f6f 	isb	sy
 80082f4:	f3bf 8f4f 	dsb	sy
 80082f8:	623b      	str	r3, [r7, #32]
}
 80082fa:	bf00      	nop
 80082fc:	bf00      	nop
 80082fe:	e7fd      	b.n	80082fc <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8008300:	4b19      	ldr	r3, [pc, #100]	@ (8008368 <xTimerGenericCommand+0x98>)
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	2b00      	cmp	r3, #0
 8008306:	d02a      	beq.n	800835e <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8008308:	68bb      	ldr	r3, [r7, #8]
 800830a:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8008310:	68fb      	ldr	r3, [r7, #12]
 8008312:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8008314:	68bb      	ldr	r3, [r7, #8]
 8008316:	2b05      	cmp	r3, #5
 8008318:	dc18      	bgt.n	800834c <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800831a:	f7ff fdad 	bl	8007e78 <xTaskGetSchedulerState>
 800831e:	4603      	mov	r3, r0
 8008320:	2b02      	cmp	r3, #2
 8008322:	d109      	bne.n	8008338 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8008324:	4b10      	ldr	r3, [pc, #64]	@ (8008368 <xTimerGenericCommand+0x98>)
 8008326:	6818      	ldr	r0, [r3, #0]
 8008328:	f107 0110 	add.w	r1, r7, #16
 800832c:	2300      	movs	r3, #0
 800832e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008330:	f7fe f91a 	bl	8006568 <xQueueGenericSend>
 8008334:	6278      	str	r0, [r7, #36]	@ 0x24
 8008336:	e012      	b.n	800835e <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8008338:	4b0b      	ldr	r3, [pc, #44]	@ (8008368 <xTimerGenericCommand+0x98>)
 800833a:	6818      	ldr	r0, [r3, #0]
 800833c:	f107 0110 	add.w	r1, r7, #16
 8008340:	2300      	movs	r3, #0
 8008342:	2200      	movs	r2, #0
 8008344:	f7fe f910 	bl	8006568 <xQueueGenericSend>
 8008348:	6278      	str	r0, [r7, #36]	@ 0x24
 800834a:	e008      	b.n	800835e <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800834c:	4b06      	ldr	r3, [pc, #24]	@ (8008368 <xTimerGenericCommand+0x98>)
 800834e:	6818      	ldr	r0, [r3, #0]
 8008350:	f107 0110 	add.w	r1, r7, #16
 8008354:	2300      	movs	r3, #0
 8008356:	683a      	ldr	r2, [r7, #0]
 8008358:	f7fe fa08 	bl	800676c <xQueueGenericSendFromISR>
 800835c:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800835e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8008360:	4618      	mov	r0, r3
 8008362:	3728      	adds	r7, #40	@ 0x28
 8008364:	46bd      	mov	sp, r7
 8008366:	bd80      	pop	{r7, pc}
 8008368:	20002bd4 	.word	0x20002bd4

0800836c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800836c:	b580      	push	{r7, lr}
 800836e:	b088      	sub	sp, #32
 8008370:	af02      	add	r7, sp, #8
 8008372:	6078      	str	r0, [r7, #4]
 8008374:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008376:	4b23      	ldr	r3, [pc, #140]	@ (8008404 <prvProcessExpiredTimer+0x98>)
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	68db      	ldr	r3, [r3, #12]
 800837c:	68db      	ldr	r3, [r3, #12]
 800837e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008380:	697b      	ldr	r3, [r7, #20]
 8008382:	3304      	adds	r3, #4
 8008384:	4618      	mov	r0, r3
 8008386:	f7fd fc73 	bl	8005c70 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800838a:	697b      	ldr	r3, [r7, #20]
 800838c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008390:	f003 0304 	and.w	r3, r3, #4
 8008394:	2b00      	cmp	r3, #0
 8008396:	d023      	beq.n	80083e0 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8008398:	697b      	ldr	r3, [r7, #20]
 800839a:	699a      	ldr	r2, [r3, #24]
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	18d1      	adds	r1, r2, r3
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	683a      	ldr	r2, [r7, #0]
 80083a4:	6978      	ldr	r0, [r7, #20]
 80083a6:	f000 f8d5 	bl	8008554 <prvInsertTimerInActiveList>
 80083aa:	4603      	mov	r3, r0
 80083ac:	2b00      	cmp	r3, #0
 80083ae:	d020      	beq.n	80083f2 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80083b0:	2300      	movs	r3, #0
 80083b2:	9300      	str	r3, [sp, #0]
 80083b4:	2300      	movs	r3, #0
 80083b6:	687a      	ldr	r2, [r7, #4]
 80083b8:	2100      	movs	r1, #0
 80083ba:	6978      	ldr	r0, [r7, #20]
 80083bc:	f7ff ff88 	bl	80082d0 <xTimerGenericCommand>
 80083c0:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80083c2:	693b      	ldr	r3, [r7, #16]
 80083c4:	2b00      	cmp	r3, #0
 80083c6:	d114      	bne.n	80083f2 <prvProcessExpiredTimer+0x86>
	__asm volatile
 80083c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80083cc:	f383 8811 	msr	BASEPRI, r3
 80083d0:	f3bf 8f6f 	isb	sy
 80083d4:	f3bf 8f4f 	dsb	sy
 80083d8:	60fb      	str	r3, [r7, #12]
}
 80083da:	bf00      	nop
 80083dc:	bf00      	nop
 80083de:	e7fd      	b.n	80083dc <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80083e0:	697b      	ldr	r3, [r7, #20]
 80083e2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80083e6:	f023 0301 	bic.w	r3, r3, #1
 80083ea:	b2da      	uxtb	r2, r3
 80083ec:	697b      	ldr	r3, [r7, #20]
 80083ee:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80083f2:	697b      	ldr	r3, [r7, #20]
 80083f4:	6a1b      	ldr	r3, [r3, #32]
 80083f6:	6978      	ldr	r0, [r7, #20]
 80083f8:	4798      	blx	r3
}
 80083fa:	bf00      	nop
 80083fc:	3718      	adds	r7, #24
 80083fe:	46bd      	mov	sp, r7
 8008400:	bd80      	pop	{r7, pc}
 8008402:	bf00      	nop
 8008404:	20002bcc 	.word	0x20002bcc

08008408 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8008408:	b580      	push	{r7, lr}
 800840a:	b084      	sub	sp, #16
 800840c:	af00      	add	r7, sp, #0
 800840e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008410:	f107 0308 	add.w	r3, r7, #8
 8008414:	4618      	mov	r0, r3
 8008416:	f000 f859 	bl	80084cc <prvGetNextExpireTime>
 800841a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800841c:	68bb      	ldr	r3, [r7, #8]
 800841e:	4619      	mov	r1, r3
 8008420:	68f8      	ldr	r0, [r7, #12]
 8008422:	f000 f805 	bl	8008430 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8008426:	f000 f8d7 	bl	80085d8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800842a:	bf00      	nop
 800842c:	e7f0      	b.n	8008410 <prvTimerTask+0x8>
	...

08008430 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8008430:	b580      	push	{r7, lr}
 8008432:	b084      	sub	sp, #16
 8008434:	af00      	add	r7, sp, #0
 8008436:	6078      	str	r0, [r7, #4]
 8008438:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800843a:	f7ff f919 	bl	8007670 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800843e:	f107 0308 	add.w	r3, r7, #8
 8008442:	4618      	mov	r0, r3
 8008444:	f000 f866 	bl	8008514 <prvSampleTimeNow>
 8008448:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800844a:	68bb      	ldr	r3, [r7, #8]
 800844c:	2b00      	cmp	r3, #0
 800844e:	d130      	bne.n	80084b2 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8008450:	683b      	ldr	r3, [r7, #0]
 8008452:	2b00      	cmp	r3, #0
 8008454:	d10a      	bne.n	800846c <prvProcessTimerOrBlockTask+0x3c>
 8008456:	687a      	ldr	r2, [r7, #4]
 8008458:	68fb      	ldr	r3, [r7, #12]
 800845a:	429a      	cmp	r2, r3
 800845c:	d806      	bhi.n	800846c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800845e:	f7ff f915 	bl	800768c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8008462:	68f9      	ldr	r1, [r7, #12]
 8008464:	6878      	ldr	r0, [r7, #4]
 8008466:	f7ff ff81 	bl	800836c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800846a:	e024      	b.n	80084b6 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800846c:	683b      	ldr	r3, [r7, #0]
 800846e:	2b00      	cmp	r3, #0
 8008470:	d008      	beq.n	8008484 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8008472:	4b13      	ldr	r3, [pc, #76]	@ (80084c0 <prvProcessTimerOrBlockTask+0x90>)
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	2b00      	cmp	r3, #0
 800847a:	d101      	bne.n	8008480 <prvProcessTimerOrBlockTask+0x50>
 800847c:	2301      	movs	r3, #1
 800847e:	e000      	b.n	8008482 <prvProcessTimerOrBlockTask+0x52>
 8008480:	2300      	movs	r3, #0
 8008482:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8008484:	4b0f      	ldr	r3, [pc, #60]	@ (80084c4 <prvProcessTimerOrBlockTask+0x94>)
 8008486:	6818      	ldr	r0, [r3, #0]
 8008488:	687a      	ldr	r2, [r7, #4]
 800848a:	68fb      	ldr	r3, [r7, #12]
 800848c:	1ad3      	subs	r3, r2, r3
 800848e:	683a      	ldr	r2, [r7, #0]
 8008490:	4619      	mov	r1, r3
 8008492:	f7fe fd4d 	bl	8006f30 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8008496:	f7ff f8f9 	bl	800768c <xTaskResumeAll>
 800849a:	4603      	mov	r3, r0
 800849c:	2b00      	cmp	r3, #0
 800849e:	d10a      	bne.n	80084b6 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80084a0:	4b09      	ldr	r3, [pc, #36]	@ (80084c8 <prvProcessTimerOrBlockTask+0x98>)
 80084a2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80084a6:	601a      	str	r2, [r3, #0]
 80084a8:	f3bf 8f4f 	dsb	sy
 80084ac:	f3bf 8f6f 	isb	sy
}
 80084b0:	e001      	b.n	80084b6 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80084b2:	f7ff f8eb 	bl	800768c <xTaskResumeAll>
}
 80084b6:	bf00      	nop
 80084b8:	3710      	adds	r7, #16
 80084ba:	46bd      	mov	sp, r7
 80084bc:	bd80      	pop	{r7, pc}
 80084be:	bf00      	nop
 80084c0:	20002bd0 	.word	0x20002bd0
 80084c4:	20002bd4 	.word	0x20002bd4
 80084c8:	e000ed04 	.word	0xe000ed04

080084cc <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80084cc:	b480      	push	{r7}
 80084ce:	b085      	sub	sp, #20
 80084d0:	af00      	add	r7, sp, #0
 80084d2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80084d4:	4b0e      	ldr	r3, [pc, #56]	@ (8008510 <prvGetNextExpireTime+0x44>)
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	2b00      	cmp	r3, #0
 80084dc:	d101      	bne.n	80084e2 <prvGetNextExpireTime+0x16>
 80084de:	2201      	movs	r2, #1
 80084e0:	e000      	b.n	80084e4 <prvGetNextExpireTime+0x18>
 80084e2:	2200      	movs	r2, #0
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	2b00      	cmp	r3, #0
 80084ee:	d105      	bne.n	80084fc <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80084f0:	4b07      	ldr	r3, [pc, #28]	@ (8008510 <prvGetNextExpireTime+0x44>)
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	68db      	ldr	r3, [r3, #12]
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	60fb      	str	r3, [r7, #12]
 80084fa:	e001      	b.n	8008500 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80084fc:	2300      	movs	r3, #0
 80084fe:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8008500:	68fb      	ldr	r3, [r7, #12]
}
 8008502:	4618      	mov	r0, r3
 8008504:	3714      	adds	r7, #20
 8008506:	46bd      	mov	sp, r7
 8008508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800850c:	4770      	bx	lr
 800850e:	bf00      	nop
 8008510:	20002bcc 	.word	0x20002bcc

08008514 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8008514:	b580      	push	{r7, lr}
 8008516:	b084      	sub	sp, #16
 8008518:	af00      	add	r7, sp, #0
 800851a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800851c:	f7ff f954 	bl	80077c8 <xTaskGetTickCount>
 8008520:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8008522:	4b0b      	ldr	r3, [pc, #44]	@ (8008550 <prvSampleTimeNow+0x3c>)
 8008524:	681b      	ldr	r3, [r3, #0]
 8008526:	68fa      	ldr	r2, [r7, #12]
 8008528:	429a      	cmp	r2, r3
 800852a:	d205      	bcs.n	8008538 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800852c:	f000 f93a 	bl	80087a4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	2201      	movs	r2, #1
 8008534:	601a      	str	r2, [r3, #0]
 8008536:	e002      	b.n	800853e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	2200      	movs	r2, #0
 800853c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800853e:	4a04      	ldr	r2, [pc, #16]	@ (8008550 <prvSampleTimeNow+0x3c>)
 8008540:	68fb      	ldr	r3, [r7, #12]
 8008542:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8008544:	68fb      	ldr	r3, [r7, #12]
}
 8008546:	4618      	mov	r0, r3
 8008548:	3710      	adds	r7, #16
 800854a:	46bd      	mov	sp, r7
 800854c:	bd80      	pop	{r7, pc}
 800854e:	bf00      	nop
 8008550:	20002bdc 	.word	0x20002bdc

08008554 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8008554:	b580      	push	{r7, lr}
 8008556:	b086      	sub	sp, #24
 8008558:	af00      	add	r7, sp, #0
 800855a:	60f8      	str	r0, [r7, #12]
 800855c:	60b9      	str	r1, [r7, #8]
 800855e:	607a      	str	r2, [r7, #4]
 8008560:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8008562:	2300      	movs	r3, #0
 8008564:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8008566:	68fb      	ldr	r3, [r7, #12]
 8008568:	68ba      	ldr	r2, [r7, #8]
 800856a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800856c:	68fb      	ldr	r3, [r7, #12]
 800856e:	68fa      	ldr	r2, [r7, #12]
 8008570:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8008572:	68ba      	ldr	r2, [r7, #8]
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	429a      	cmp	r2, r3
 8008578:	d812      	bhi.n	80085a0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800857a:	687a      	ldr	r2, [r7, #4]
 800857c:	683b      	ldr	r3, [r7, #0]
 800857e:	1ad2      	subs	r2, r2, r3
 8008580:	68fb      	ldr	r3, [r7, #12]
 8008582:	699b      	ldr	r3, [r3, #24]
 8008584:	429a      	cmp	r2, r3
 8008586:	d302      	bcc.n	800858e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8008588:	2301      	movs	r3, #1
 800858a:	617b      	str	r3, [r7, #20]
 800858c:	e01b      	b.n	80085c6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800858e:	4b10      	ldr	r3, [pc, #64]	@ (80085d0 <prvInsertTimerInActiveList+0x7c>)
 8008590:	681a      	ldr	r2, [r3, #0]
 8008592:	68fb      	ldr	r3, [r7, #12]
 8008594:	3304      	adds	r3, #4
 8008596:	4619      	mov	r1, r3
 8008598:	4610      	mov	r0, r2
 800859a:	f7fd fb30 	bl	8005bfe <vListInsert>
 800859e:	e012      	b.n	80085c6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80085a0:	687a      	ldr	r2, [r7, #4]
 80085a2:	683b      	ldr	r3, [r7, #0]
 80085a4:	429a      	cmp	r2, r3
 80085a6:	d206      	bcs.n	80085b6 <prvInsertTimerInActiveList+0x62>
 80085a8:	68ba      	ldr	r2, [r7, #8]
 80085aa:	683b      	ldr	r3, [r7, #0]
 80085ac:	429a      	cmp	r2, r3
 80085ae:	d302      	bcc.n	80085b6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80085b0:	2301      	movs	r3, #1
 80085b2:	617b      	str	r3, [r7, #20]
 80085b4:	e007      	b.n	80085c6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80085b6:	4b07      	ldr	r3, [pc, #28]	@ (80085d4 <prvInsertTimerInActiveList+0x80>)
 80085b8:	681a      	ldr	r2, [r3, #0]
 80085ba:	68fb      	ldr	r3, [r7, #12]
 80085bc:	3304      	adds	r3, #4
 80085be:	4619      	mov	r1, r3
 80085c0:	4610      	mov	r0, r2
 80085c2:	f7fd fb1c 	bl	8005bfe <vListInsert>
		}
	}

	return xProcessTimerNow;
 80085c6:	697b      	ldr	r3, [r7, #20]
}
 80085c8:	4618      	mov	r0, r3
 80085ca:	3718      	adds	r7, #24
 80085cc:	46bd      	mov	sp, r7
 80085ce:	bd80      	pop	{r7, pc}
 80085d0:	20002bd0 	.word	0x20002bd0
 80085d4:	20002bcc 	.word	0x20002bcc

080085d8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80085d8:	b580      	push	{r7, lr}
 80085da:	b08e      	sub	sp, #56	@ 0x38
 80085dc:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80085de:	e0ce      	b.n	800877e <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	2b00      	cmp	r3, #0
 80085e4:	da19      	bge.n	800861a <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80085e6:	1d3b      	adds	r3, r7, #4
 80085e8:	3304      	adds	r3, #4
 80085ea:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80085ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80085ee:	2b00      	cmp	r3, #0
 80085f0:	d10b      	bne.n	800860a <prvProcessReceivedCommands+0x32>
	__asm volatile
 80085f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80085f6:	f383 8811 	msr	BASEPRI, r3
 80085fa:	f3bf 8f6f 	isb	sy
 80085fe:	f3bf 8f4f 	dsb	sy
 8008602:	61fb      	str	r3, [r7, #28]
}
 8008604:	bf00      	nop
 8008606:	bf00      	nop
 8008608:	e7fd      	b.n	8008606 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800860a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800860c:	681b      	ldr	r3, [r3, #0]
 800860e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008610:	6850      	ldr	r0, [r2, #4]
 8008612:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008614:	6892      	ldr	r2, [r2, #8]
 8008616:	4611      	mov	r1, r2
 8008618:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	2b00      	cmp	r3, #0
 800861e:	f2c0 80ae 	blt.w	800877e <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8008622:	68fb      	ldr	r3, [r7, #12]
 8008624:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8008626:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008628:	695b      	ldr	r3, [r3, #20]
 800862a:	2b00      	cmp	r3, #0
 800862c:	d004      	beq.n	8008638 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800862e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008630:	3304      	adds	r3, #4
 8008632:	4618      	mov	r0, r3
 8008634:	f7fd fb1c 	bl	8005c70 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008638:	463b      	mov	r3, r7
 800863a:	4618      	mov	r0, r3
 800863c:	f7ff ff6a 	bl	8008514 <prvSampleTimeNow>
 8008640:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	2b09      	cmp	r3, #9
 8008646:	f200 8097 	bhi.w	8008778 <prvProcessReceivedCommands+0x1a0>
 800864a:	a201      	add	r2, pc, #4	@ (adr r2, 8008650 <prvProcessReceivedCommands+0x78>)
 800864c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008650:	08008679 	.word	0x08008679
 8008654:	08008679 	.word	0x08008679
 8008658:	08008679 	.word	0x08008679
 800865c:	080086ef 	.word	0x080086ef
 8008660:	08008703 	.word	0x08008703
 8008664:	0800874f 	.word	0x0800874f
 8008668:	08008679 	.word	0x08008679
 800866c:	08008679 	.word	0x08008679
 8008670:	080086ef 	.word	0x080086ef
 8008674:	08008703 	.word	0x08008703
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008678:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800867a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800867e:	f043 0301 	orr.w	r3, r3, #1
 8008682:	b2da      	uxtb	r2, r3
 8008684:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008686:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800868a:	68ba      	ldr	r2, [r7, #8]
 800868c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800868e:	699b      	ldr	r3, [r3, #24]
 8008690:	18d1      	adds	r1, r2, r3
 8008692:	68bb      	ldr	r3, [r7, #8]
 8008694:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008696:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008698:	f7ff ff5c 	bl	8008554 <prvInsertTimerInActiveList>
 800869c:	4603      	mov	r3, r0
 800869e:	2b00      	cmp	r3, #0
 80086a0:	d06c      	beq.n	800877c <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80086a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80086a4:	6a1b      	ldr	r3, [r3, #32]
 80086a6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80086a8:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80086aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80086ac:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80086b0:	f003 0304 	and.w	r3, r3, #4
 80086b4:	2b00      	cmp	r3, #0
 80086b6:	d061      	beq.n	800877c <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80086b8:	68ba      	ldr	r2, [r7, #8]
 80086ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80086bc:	699b      	ldr	r3, [r3, #24]
 80086be:	441a      	add	r2, r3
 80086c0:	2300      	movs	r3, #0
 80086c2:	9300      	str	r3, [sp, #0]
 80086c4:	2300      	movs	r3, #0
 80086c6:	2100      	movs	r1, #0
 80086c8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80086ca:	f7ff fe01 	bl	80082d0 <xTimerGenericCommand>
 80086ce:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80086d0:	6a3b      	ldr	r3, [r7, #32]
 80086d2:	2b00      	cmp	r3, #0
 80086d4:	d152      	bne.n	800877c <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 80086d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80086da:	f383 8811 	msr	BASEPRI, r3
 80086de:	f3bf 8f6f 	isb	sy
 80086e2:	f3bf 8f4f 	dsb	sy
 80086e6:	61bb      	str	r3, [r7, #24]
}
 80086e8:	bf00      	nop
 80086ea:	bf00      	nop
 80086ec:	e7fd      	b.n	80086ea <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80086ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80086f0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80086f4:	f023 0301 	bic.w	r3, r3, #1
 80086f8:	b2da      	uxtb	r2, r3
 80086fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80086fc:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8008700:	e03d      	b.n	800877e <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008702:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008704:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008708:	f043 0301 	orr.w	r3, r3, #1
 800870c:	b2da      	uxtb	r2, r3
 800870e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008710:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8008714:	68ba      	ldr	r2, [r7, #8]
 8008716:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008718:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800871a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800871c:	699b      	ldr	r3, [r3, #24]
 800871e:	2b00      	cmp	r3, #0
 8008720:	d10b      	bne.n	800873a <prvProcessReceivedCommands+0x162>
	__asm volatile
 8008722:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008726:	f383 8811 	msr	BASEPRI, r3
 800872a:	f3bf 8f6f 	isb	sy
 800872e:	f3bf 8f4f 	dsb	sy
 8008732:	617b      	str	r3, [r7, #20]
}
 8008734:	bf00      	nop
 8008736:	bf00      	nop
 8008738:	e7fd      	b.n	8008736 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800873a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800873c:	699a      	ldr	r2, [r3, #24]
 800873e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008740:	18d1      	adds	r1, r2, r3
 8008742:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008744:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008746:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008748:	f7ff ff04 	bl	8008554 <prvInsertTimerInActiveList>
					break;
 800874c:	e017      	b.n	800877e <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800874e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008750:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008754:	f003 0302 	and.w	r3, r3, #2
 8008758:	2b00      	cmp	r3, #0
 800875a:	d103      	bne.n	8008764 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800875c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800875e:	f7fd f8dd 	bl	800591c <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8008762:	e00c      	b.n	800877e <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008764:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008766:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800876a:	f023 0301 	bic.w	r3, r3, #1
 800876e:	b2da      	uxtb	r2, r3
 8008770:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008772:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8008776:	e002      	b.n	800877e <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8008778:	bf00      	nop
 800877a:	e000      	b.n	800877e <prvProcessReceivedCommands+0x1a6>
					break;
 800877c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800877e:	4b08      	ldr	r3, [pc, #32]	@ (80087a0 <prvProcessReceivedCommands+0x1c8>)
 8008780:	681b      	ldr	r3, [r3, #0]
 8008782:	1d39      	adds	r1, r7, #4
 8008784:	2200      	movs	r2, #0
 8008786:	4618      	mov	r0, r3
 8008788:	f7fe f88e 	bl	80068a8 <xQueueReceive>
 800878c:	4603      	mov	r3, r0
 800878e:	2b00      	cmp	r3, #0
 8008790:	f47f af26 	bne.w	80085e0 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8008794:	bf00      	nop
 8008796:	bf00      	nop
 8008798:	3730      	adds	r7, #48	@ 0x30
 800879a:	46bd      	mov	sp, r7
 800879c:	bd80      	pop	{r7, pc}
 800879e:	bf00      	nop
 80087a0:	20002bd4 	.word	0x20002bd4

080087a4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80087a4:	b580      	push	{r7, lr}
 80087a6:	b088      	sub	sp, #32
 80087a8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80087aa:	e049      	b.n	8008840 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80087ac:	4b2e      	ldr	r3, [pc, #184]	@ (8008868 <prvSwitchTimerLists+0xc4>)
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	68db      	ldr	r3, [r3, #12]
 80087b2:	681b      	ldr	r3, [r3, #0]
 80087b4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80087b6:	4b2c      	ldr	r3, [pc, #176]	@ (8008868 <prvSwitchTimerLists+0xc4>)
 80087b8:	681b      	ldr	r3, [r3, #0]
 80087ba:	68db      	ldr	r3, [r3, #12]
 80087bc:	68db      	ldr	r3, [r3, #12]
 80087be:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80087c0:	68fb      	ldr	r3, [r7, #12]
 80087c2:	3304      	adds	r3, #4
 80087c4:	4618      	mov	r0, r3
 80087c6:	f7fd fa53 	bl	8005c70 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80087ca:	68fb      	ldr	r3, [r7, #12]
 80087cc:	6a1b      	ldr	r3, [r3, #32]
 80087ce:	68f8      	ldr	r0, [r7, #12]
 80087d0:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80087d2:	68fb      	ldr	r3, [r7, #12]
 80087d4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80087d8:	f003 0304 	and.w	r3, r3, #4
 80087dc:	2b00      	cmp	r3, #0
 80087de:	d02f      	beq.n	8008840 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80087e0:	68fb      	ldr	r3, [r7, #12]
 80087e2:	699b      	ldr	r3, [r3, #24]
 80087e4:	693a      	ldr	r2, [r7, #16]
 80087e6:	4413      	add	r3, r2
 80087e8:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80087ea:	68ba      	ldr	r2, [r7, #8]
 80087ec:	693b      	ldr	r3, [r7, #16]
 80087ee:	429a      	cmp	r2, r3
 80087f0:	d90e      	bls.n	8008810 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80087f2:	68fb      	ldr	r3, [r7, #12]
 80087f4:	68ba      	ldr	r2, [r7, #8]
 80087f6:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80087f8:	68fb      	ldr	r3, [r7, #12]
 80087fa:	68fa      	ldr	r2, [r7, #12]
 80087fc:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80087fe:	4b1a      	ldr	r3, [pc, #104]	@ (8008868 <prvSwitchTimerLists+0xc4>)
 8008800:	681a      	ldr	r2, [r3, #0]
 8008802:	68fb      	ldr	r3, [r7, #12]
 8008804:	3304      	adds	r3, #4
 8008806:	4619      	mov	r1, r3
 8008808:	4610      	mov	r0, r2
 800880a:	f7fd f9f8 	bl	8005bfe <vListInsert>
 800880e:	e017      	b.n	8008840 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008810:	2300      	movs	r3, #0
 8008812:	9300      	str	r3, [sp, #0]
 8008814:	2300      	movs	r3, #0
 8008816:	693a      	ldr	r2, [r7, #16]
 8008818:	2100      	movs	r1, #0
 800881a:	68f8      	ldr	r0, [r7, #12]
 800881c:	f7ff fd58 	bl	80082d0 <xTimerGenericCommand>
 8008820:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	2b00      	cmp	r3, #0
 8008826:	d10b      	bne.n	8008840 <prvSwitchTimerLists+0x9c>
	__asm volatile
 8008828:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800882c:	f383 8811 	msr	BASEPRI, r3
 8008830:	f3bf 8f6f 	isb	sy
 8008834:	f3bf 8f4f 	dsb	sy
 8008838:	603b      	str	r3, [r7, #0]
}
 800883a:	bf00      	nop
 800883c:	bf00      	nop
 800883e:	e7fd      	b.n	800883c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008840:	4b09      	ldr	r3, [pc, #36]	@ (8008868 <prvSwitchTimerLists+0xc4>)
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	2b00      	cmp	r3, #0
 8008848:	d1b0      	bne.n	80087ac <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800884a:	4b07      	ldr	r3, [pc, #28]	@ (8008868 <prvSwitchTimerLists+0xc4>)
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8008850:	4b06      	ldr	r3, [pc, #24]	@ (800886c <prvSwitchTimerLists+0xc8>)
 8008852:	681b      	ldr	r3, [r3, #0]
 8008854:	4a04      	ldr	r2, [pc, #16]	@ (8008868 <prvSwitchTimerLists+0xc4>)
 8008856:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8008858:	4a04      	ldr	r2, [pc, #16]	@ (800886c <prvSwitchTimerLists+0xc8>)
 800885a:	697b      	ldr	r3, [r7, #20]
 800885c:	6013      	str	r3, [r2, #0]
}
 800885e:	bf00      	nop
 8008860:	3718      	adds	r7, #24
 8008862:	46bd      	mov	sp, r7
 8008864:	bd80      	pop	{r7, pc}
 8008866:	bf00      	nop
 8008868:	20002bcc 	.word	0x20002bcc
 800886c:	20002bd0 	.word	0x20002bd0

08008870 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8008870:	b580      	push	{r7, lr}
 8008872:	b082      	sub	sp, #8
 8008874:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8008876:	f7fd fb57 	bl	8005f28 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800887a:	4b15      	ldr	r3, [pc, #84]	@ (80088d0 <prvCheckForValidListAndQueue+0x60>)
 800887c:	681b      	ldr	r3, [r3, #0]
 800887e:	2b00      	cmp	r3, #0
 8008880:	d120      	bne.n	80088c4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8008882:	4814      	ldr	r0, [pc, #80]	@ (80088d4 <prvCheckForValidListAndQueue+0x64>)
 8008884:	f7fd f96a 	bl	8005b5c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8008888:	4813      	ldr	r0, [pc, #76]	@ (80088d8 <prvCheckForValidListAndQueue+0x68>)
 800888a:	f7fd f967 	bl	8005b5c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800888e:	4b13      	ldr	r3, [pc, #76]	@ (80088dc <prvCheckForValidListAndQueue+0x6c>)
 8008890:	4a10      	ldr	r2, [pc, #64]	@ (80088d4 <prvCheckForValidListAndQueue+0x64>)
 8008892:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8008894:	4b12      	ldr	r3, [pc, #72]	@ (80088e0 <prvCheckForValidListAndQueue+0x70>)
 8008896:	4a10      	ldr	r2, [pc, #64]	@ (80088d8 <prvCheckForValidListAndQueue+0x68>)
 8008898:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800889a:	2300      	movs	r3, #0
 800889c:	9300      	str	r3, [sp, #0]
 800889e:	4b11      	ldr	r3, [pc, #68]	@ (80088e4 <prvCheckForValidListAndQueue+0x74>)
 80088a0:	4a11      	ldr	r2, [pc, #68]	@ (80088e8 <prvCheckForValidListAndQueue+0x78>)
 80088a2:	2110      	movs	r1, #16
 80088a4:	200a      	movs	r0, #10
 80088a6:	f7fd fccb 	bl	8006240 <xQueueGenericCreateStatic>
 80088aa:	4603      	mov	r3, r0
 80088ac:	4a08      	ldr	r2, [pc, #32]	@ (80088d0 <prvCheckForValidListAndQueue+0x60>)
 80088ae:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80088b0:	4b07      	ldr	r3, [pc, #28]	@ (80088d0 <prvCheckForValidListAndQueue+0x60>)
 80088b2:	681b      	ldr	r3, [r3, #0]
 80088b4:	2b00      	cmp	r3, #0
 80088b6:	d005      	beq.n	80088c4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80088b8:	4b05      	ldr	r3, [pc, #20]	@ (80088d0 <prvCheckForValidListAndQueue+0x60>)
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	490b      	ldr	r1, [pc, #44]	@ (80088ec <prvCheckForValidListAndQueue+0x7c>)
 80088be:	4618      	mov	r0, r3
 80088c0:	f7fe fb0c 	bl	8006edc <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80088c4:	f7fd fb62 	bl	8005f8c <vPortExitCritical>
}
 80088c8:	bf00      	nop
 80088ca:	46bd      	mov	sp, r7
 80088cc:	bd80      	pop	{r7, pc}
 80088ce:	bf00      	nop
 80088d0:	20002bd4 	.word	0x20002bd4
 80088d4:	20002ba4 	.word	0x20002ba4
 80088d8:	20002bb8 	.word	0x20002bb8
 80088dc:	20002bcc 	.word	0x20002bcc
 80088e0:	20002bd0 	.word	0x20002bd0
 80088e4:	20002c80 	.word	0x20002c80
 80088e8:	20002be0 	.word	0x20002be0
 80088ec:	08008b30 	.word	0x08008b30

080088f0 <memset>:
 80088f0:	4402      	add	r2, r0
 80088f2:	4603      	mov	r3, r0
 80088f4:	4293      	cmp	r3, r2
 80088f6:	d100      	bne.n	80088fa <memset+0xa>
 80088f8:	4770      	bx	lr
 80088fa:	f803 1b01 	strb.w	r1, [r3], #1
 80088fe:	e7f9      	b.n	80088f4 <memset+0x4>

08008900 <_reclaim_reent>:
 8008900:	4b2d      	ldr	r3, [pc, #180]	@ (80089b8 <_reclaim_reent+0xb8>)
 8008902:	681b      	ldr	r3, [r3, #0]
 8008904:	4283      	cmp	r3, r0
 8008906:	b570      	push	{r4, r5, r6, lr}
 8008908:	4604      	mov	r4, r0
 800890a:	d053      	beq.n	80089b4 <_reclaim_reent+0xb4>
 800890c:	69c3      	ldr	r3, [r0, #28]
 800890e:	b31b      	cbz	r3, 8008958 <_reclaim_reent+0x58>
 8008910:	68db      	ldr	r3, [r3, #12]
 8008912:	b163      	cbz	r3, 800892e <_reclaim_reent+0x2e>
 8008914:	2500      	movs	r5, #0
 8008916:	69e3      	ldr	r3, [r4, #28]
 8008918:	68db      	ldr	r3, [r3, #12]
 800891a:	5959      	ldr	r1, [r3, r5]
 800891c:	b9b1      	cbnz	r1, 800894c <_reclaim_reent+0x4c>
 800891e:	3504      	adds	r5, #4
 8008920:	2d80      	cmp	r5, #128	@ 0x80
 8008922:	d1f8      	bne.n	8008916 <_reclaim_reent+0x16>
 8008924:	69e3      	ldr	r3, [r4, #28]
 8008926:	4620      	mov	r0, r4
 8008928:	68d9      	ldr	r1, [r3, #12]
 800892a:	f000 f87b 	bl	8008a24 <_free_r>
 800892e:	69e3      	ldr	r3, [r4, #28]
 8008930:	6819      	ldr	r1, [r3, #0]
 8008932:	b111      	cbz	r1, 800893a <_reclaim_reent+0x3a>
 8008934:	4620      	mov	r0, r4
 8008936:	f000 f875 	bl	8008a24 <_free_r>
 800893a:	69e3      	ldr	r3, [r4, #28]
 800893c:	689d      	ldr	r5, [r3, #8]
 800893e:	b15d      	cbz	r5, 8008958 <_reclaim_reent+0x58>
 8008940:	4629      	mov	r1, r5
 8008942:	4620      	mov	r0, r4
 8008944:	682d      	ldr	r5, [r5, #0]
 8008946:	f000 f86d 	bl	8008a24 <_free_r>
 800894a:	e7f8      	b.n	800893e <_reclaim_reent+0x3e>
 800894c:	680e      	ldr	r6, [r1, #0]
 800894e:	4620      	mov	r0, r4
 8008950:	f000 f868 	bl	8008a24 <_free_r>
 8008954:	4631      	mov	r1, r6
 8008956:	e7e1      	b.n	800891c <_reclaim_reent+0x1c>
 8008958:	6961      	ldr	r1, [r4, #20]
 800895a:	b111      	cbz	r1, 8008962 <_reclaim_reent+0x62>
 800895c:	4620      	mov	r0, r4
 800895e:	f000 f861 	bl	8008a24 <_free_r>
 8008962:	69e1      	ldr	r1, [r4, #28]
 8008964:	b111      	cbz	r1, 800896c <_reclaim_reent+0x6c>
 8008966:	4620      	mov	r0, r4
 8008968:	f000 f85c 	bl	8008a24 <_free_r>
 800896c:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800896e:	b111      	cbz	r1, 8008976 <_reclaim_reent+0x76>
 8008970:	4620      	mov	r0, r4
 8008972:	f000 f857 	bl	8008a24 <_free_r>
 8008976:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008978:	b111      	cbz	r1, 8008980 <_reclaim_reent+0x80>
 800897a:	4620      	mov	r0, r4
 800897c:	f000 f852 	bl	8008a24 <_free_r>
 8008980:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8008982:	b111      	cbz	r1, 800898a <_reclaim_reent+0x8a>
 8008984:	4620      	mov	r0, r4
 8008986:	f000 f84d 	bl	8008a24 <_free_r>
 800898a:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800898c:	b111      	cbz	r1, 8008994 <_reclaim_reent+0x94>
 800898e:	4620      	mov	r0, r4
 8008990:	f000 f848 	bl	8008a24 <_free_r>
 8008994:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8008996:	b111      	cbz	r1, 800899e <_reclaim_reent+0x9e>
 8008998:	4620      	mov	r0, r4
 800899a:	f000 f843 	bl	8008a24 <_free_r>
 800899e:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 80089a0:	b111      	cbz	r1, 80089a8 <_reclaim_reent+0xa8>
 80089a2:	4620      	mov	r0, r4
 80089a4:	f000 f83e 	bl	8008a24 <_free_r>
 80089a8:	6a23      	ldr	r3, [r4, #32]
 80089aa:	b11b      	cbz	r3, 80089b4 <_reclaim_reent+0xb4>
 80089ac:	4620      	mov	r0, r4
 80089ae:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80089b2:	4718      	bx	r3
 80089b4:	bd70      	pop	{r4, r5, r6, pc}
 80089b6:	bf00      	nop
 80089b8:	20000018 	.word	0x20000018

080089bc <__libc_init_array>:
 80089bc:	b570      	push	{r4, r5, r6, lr}
 80089be:	4d0d      	ldr	r5, [pc, #52]	@ (80089f4 <__libc_init_array+0x38>)
 80089c0:	4c0d      	ldr	r4, [pc, #52]	@ (80089f8 <__libc_init_array+0x3c>)
 80089c2:	1b64      	subs	r4, r4, r5
 80089c4:	10a4      	asrs	r4, r4, #2
 80089c6:	2600      	movs	r6, #0
 80089c8:	42a6      	cmp	r6, r4
 80089ca:	d109      	bne.n	80089e0 <__libc_init_array+0x24>
 80089cc:	4d0b      	ldr	r5, [pc, #44]	@ (80089fc <__libc_init_array+0x40>)
 80089ce:	4c0c      	ldr	r4, [pc, #48]	@ (8008a00 <__libc_init_array+0x44>)
 80089d0:	f000 f87e 	bl	8008ad0 <_init>
 80089d4:	1b64      	subs	r4, r4, r5
 80089d6:	10a4      	asrs	r4, r4, #2
 80089d8:	2600      	movs	r6, #0
 80089da:	42a6      	cmp	r6, r4
 80089dc:	d105      	bne.n	80089ea <__libc_init_array+0x2e>
 80089de:	bd70      	pop	{r4, r5, r6, pc}
 80089e0:	f855 3b04 	ldr.w	r3, [r5], #4
 80089e4:	4798      	blx	r3
 80089e6:	3601      	adds	r6, #1
 80089e8:	e7ee      	b.n	80089c8 <__libc_init_array+0xc>
 80089ea:	f855 3b04 	ldr.w	r3, [r5], #4
 80089ee:	4798      	blx	r3
 80089f0:	3601      	adds	r6, #1
 80089f2:	e7f2      	b.n	80089da <__libc_init_array+0x1e>
 80089f4:	08008c4c 	.word	0x08008c4c
 80089f8:	08008c4c 	.word	0x08008c4c
 80089fc:	08008c4c 	.word	0x08008c4c
 8008a00:	08008c50 	.word	0x08008c50

08008a04 <__retarget_lock_acquire_recursive>:
 8008a04:	4770      	bx	lr

08008a06 <__retarget_lock_release_recursive>:
 8008a06:	4770      	bx	lr

08008a08 <memcpy>:
 8008a08:	440a      	add	r2, r1
 8008a0a:	4291      	cmp	r1, r2
 8008a0c:	f100 33ff 	add.w	r3, r0, #4294967295
 8008a10:	d100      	bne.n	8008a14 <memcpy+0xc>
 8008a12:	4770      	bx	lr
 8008a14:	b510      	push	{r4, lr}
 8008a16:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008a1a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008a1e:	4291      	cmp	r1, r2
 8008a20:	d1f9      	bne.n	8008a16 <memcpy+0xe>
 8008a22:	bd10      	pop	{r4, pc}

08008a24 <_free_r>:
 8008a24:	b538      	push	{r3, r4, r5, lr}
 8008a26:	4605      	mov	r5, r0
 8008a28:	2900      	cmp	r1, #0
 8008a2a:	d041      	beq.n	8008ab0 <_free_r+0x8c>
 8008a2c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008a30:	1f0c      	subs	r4, r1, #4
 8008a32:	2b00      	cmp	r3, #0
 8008a34:	bfb8      	it	lt
 8008a36:	18e4      	addlt	r4, r4, r3
 8008a38:	f000 f83e 	bl	8008ab8 <__malloc_lock>
 8008a3c:	4a1d      	ldr	r2, [pc, #116]	@ (8008ab4 <_free_r+0x90>)
 8008a3e:	6813      	ldr	r3, [r2, #0]
 8008a40:	b933      	cbnz	r3, 8008a50 <_free_r+0x2c>
 8008a42:	6063      	str	r3, [r4, #4]
 8008a44:	6014      	str	r4, [r2, #0]
 8008a46:	4628      	mov	r0, r5
 8008a48:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008a4c:	f000 b83a 	b.w	8008ac4 <__malloc_unlock>
 8008a50:	42a3      	cmp	r3, r4
 8008a52:	d908      	bls.n	8008a66 <_free_r+0x42>
 8008a54:	6820      	ldr	r0, [r4, #0]
 8008a56:	1821      	adds	r1, r4, r0
 8008a58:	428b      	cmp	r3, r1
 8008a5a:	bf01      	itttt	eq
 8008a5c:	6819      	ldreq	r1, [r3, #0]
 8008a5e:	685b      	ldreq	r3, [r3, #4]
 8008a60:	1809      	addeq	r1, r1, r0
 8008a62:	6021      	streq	r1, [r4, #0]
 8008a64:	e7ed      	b.n	8008a42 <_free_r+0x1e>
 8008a66:	461a      	mov	r2, r3
 8008a68:	685b      	ldr	r3, [r3, #4]
 8008a6a:	b10b      	cbz	r3, 8008a70 <_free_r+0x4c>
 8008a6c:	42a3      	cmp	r3, r4
 8008a6e:	d9fa      	bls.n	8008a66 <_free_r+0x42>
 8008a70:	6811      	ldr	r1, [r2, #0]
 8008a72:	1850      	adds	r0, r2, r1
 8008a74:	42a0      	cmp	r0, r4
 8008a76:	d10b      	bne.n	8008a90 <_free_r+0x6c>
 8008a78:	6820      	ldr	r0, [r4, #0]
 8008a7a:	4401      	add	r1, r0
 8008a7c:	1850      	adds	r0, r2, r1
 8008a7e:	4283      	cmp	r3, r0
 8008a80:	6011      	str	r1, [r2, #0]
 8008a82:	d1e0      	bne.n	8008a46 <_free_r+0x22>
 8008a84:	6818      	ldr	r0, [r3, #0]
 8008a86:	685b      	ldr	r3, [r3, #4]
 8008a88:	6053      	str	r3, [r2, #4]
 8008a8a:	4408      	add	r0, r1
 8008a8c:	6010      	str	r0, [r2, #0]
 8008a8e:	e7da      	b.n	8008a46 <_free_r+0x22>
 8008a90:	d902      	bls.n	8008a98 <_free_r+0x74>
 8008a92:	230c      	movs	r3, #12
 8008a94:	602b      	str	r3, [r5, #0]
 8008a96:	e7d6      	b.n	8008a46 <_free_r+0x22>
 8008a98:	6820      	ldr	r0, [r4, #0]
 8008a9a:	1821      	adds	r1, r4, r0
 8008a9c:	428b      	cmp	r3, r1
 8008a9e:	bf04      	itt	eq
 8008aa0:	6819      	ldreq	r1, [r3, #0]
 8008aa2:	685b      	ldreq	r3, [r3, #4]
 8008aa4:	6063      	str	r3, [r4, #4]
 8008aa6:	bf04      	itt	eq
 8008aa8:	1809      	addeq	r1, r1, r0
 8008aaa:	6021      	streq	r1, [r4, #0]
 8008aac:	6054      	str	r4, [r2, #4]
 8008aae:	e7ca      	b.n	8008a46 <_free_r+0x22>
 8008ab0:	bd38      	pop	{r3, r4, r5, pc}
 8008ab2:	bf00      	nop
 8008ab4:	20002e0c 	.word	0x20002e0c

08008ab8 <__malloc_lock>:
 8008ab8:	4801      	ldr	r0, [pc, #4]	@ (8008ac0 <__malloc_lock+0x8>)
 8008aba:	f7ff bfa3 	b.w	8008a04 <__retarget_lock_acquire_recursive>
 8008abe:	bf00      	nop
 8008ac0:	20002e08 	.word	0x20002e08

08008ac4 <__malloc_unlock>:
 8008ac4:	4801      	ldr	r0, [pc, #4]	@ (8008acc <__malloc_unlock+0x8>)
 8008ac6:	f7ff bf9e 	b.w	8008a06 <__retarget_lock_release_recursive>
 8008aca:	bf00      	nop
 8008acc:	20002e08 	.word	0x20002e08

08008ad0 <_init>:
 8008ad0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008ad2:	bf00      	nop
 8008ad4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008ad6:	bc08      	pop	{r3}
 8008ad8:	469e      	mov	lr, r3
 8008ada:	4770      	bx	lr

08008adc <_fini>:
 8008adc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008ade:	bf00      	nop
 8008ae0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008ae2:	bc08      	pop	{r3}
 8008ae4:	469e      	mov	lr, r3
 8008ae6:	4770      	bx	lr
