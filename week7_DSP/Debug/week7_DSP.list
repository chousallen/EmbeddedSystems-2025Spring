
week7_DSP.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b1f4  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004f4  0800b388  0800b388  0000c388  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b87c  0800b87c  0000dc14  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800b87c  0800b87c  0000c87c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b884  0800b884  0000dc14  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b884  0800b884  0000c884  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800b888  0800b888  0000c888  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000c14  20000000  0800b88c  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000a04  20000c14  0800c4a0  0000dc14  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001618  0800c4a0  0000e618  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000dc14  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001284e  00000000  00000000  0000dc44  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002a41  00000000  00000000  00020492  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010f0  00000000  00000000  00022ed8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000cff  00000000  00000000  00023fc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000289e0  00000000  00000000  00024cc7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014cac  00000000  00000000  0004d6a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f27c5  00000000  00000000  00062353  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00154b18  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005bd0  00000000  00000000  00154b5c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005a  00000000  00000000  0015a72c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000c14 	.word	0x20000c14
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800b36c 	.word	0x0800b36c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000c18 	.word	0x20000c18
 80001cc:	0800b36c 	.word	0x0800b36c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b9be 	b.w	800101c <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	@ (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	@ (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9d08      	ldr	r5, [sp, #32]
 8000d2a:	468e      	mov	lr, r1
 8000d2c:	4604      	mov	r4, r0
 8000d2e:	4688      	mov	r8, r1
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d14a      	bne.n	8000dca <__udivmoddi4+0xa6>
 8000d34:	428a      	cmp	r2, r1
 8000d36:	4617      	mov	r7, r2
 8000d38:	d962      	bls.n	8000e00 <__udivmoddi4+0xdc>
 8000d3a:	fab2 f682 	clz	r6, r2
 8000d3e:	b14e      	cbz	r6, 8000d54 <__udivmoddi4+0x30>
 8000d40:	f1c6 0320 	rsb	r3, r6, #32
 8000d44:	fa01 f806 	lsl.w	r8, r1, r6
 8000d48:	fa20 f303 	lsr.w	r3, r0, r3
 8000d4c:	40b7      	lsls	r7, r6
 8000d4e:	ea43 0808 	orr.w	r8, r3, r8
 8000d52:	40b4      	lsls	r4, r6
 8000d54:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d58:	fa1f fc87 	uxth.w	ip, r7
 8000d5c:	fbb8 f1fe 	udiv	r1, r8, lr
 8000d60:	0c23      	lsrs	r3, r4, #16
 8000d62:	fb0e 8811 	mls	r8, lr, r1, r8
 8000d66:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d6a:	fb01 f20c 	mul.w	r2, r1, ip
 8000d6e:	429a      	cmp	r2, r3
 8000d70:	d909      	bls.n	8000d86 <__udivmoddi4+0x62>
 8000d72:	18fb      	adds	r3, r7, r3
 8000d74:	f101 30ff 	add.w	r0, r1, #4294967295
 8000d78:	f080 80ea 	bcs.w	8000f50 <__udivmoddi4+0x22c>
 8000d7c:	429a      	cmp	r2, r3
 8000d7e:	f240 80e7 	bls.w	8000f50 <__udivmoddi4+0x22c>
 8000d82:	3902      	subs	r1, #2
 8000d84:	443b      	add	r3, r7
 8000d86:	1a9a      	subs	r2, r3, r2
 8000d88:	b2a3      	uxth	r3, r4
 8000d8a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d8e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d92:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000d96:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d9a:	459c      	cmp	ip, r3
 8000d9c:	d909      	bls.n	8000db2 <__udivmoddi4+0x8e>
 8000d9e:	18fb      	adds	r3, r7, r3
 8000da0:	f100 32ff 	add.w	r2, r0, #4294967295
 8000da4:	f080 80d6 	bcs.w	8000f54 <__udivmoddi4+0x230>
 8000da8:	459c      	cmp	ip, r3
 8000daa:	f240 80d3 	bls.w	8000f54 <__udivmoddi4+0x230>
 8000dae:	443b      	add	r3, r7
 8000db0:	3802      	subs	r0, #2
 8000db2:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000db6:	eba3 030c 	sub.w	r3, r3, ip
 8000dba:	2100      	movs	r1, #0
 8000dbc:	b11d      	cbz	r5, 8000dc6 <__udivmoddi4+0xa2>
 8000dbe:	40f3      	lsrs	r3, r6
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	e9c5 3200 	strd	r3, r2, [r5]
 8000dc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dca:	428b      	cmp	r3, r1
 8000dcc:	d905      	bls.n	8000dda <__udivmoddi4+0xb6>
 8000dce:	b10d      	cbz	r5, 8000dd4 <__udivmoddi4+0xb0>
 8000dd0:	e9c5 0100 	strd	r0, r1, [r5]
 8000dd4:	2100      	movs	r1, #0
 8000dd6:	4608      	mov	r0, r1
 8000dd8:	e7f5      	b.n	8000dc6 <__udivmoddi4+0xa2>
 8000dda:	fab3 f183 	clz	r1, r3
 8000dde:	2900      	cmp	r1, #0
 8000de0:	d146      	bne.n	8000e70 <__udivmoddi4+0x14c>
 8000de2:	4573      	cmp	r3, lr
 8000de4:	d302      	bcc.n	8000dec <__udivmoddi4+0xc8>
 8000de6:	4282      	cmp	r2, r0
 8000de8:	f200 8105 	bhi.w	8000ff6 <__udivmoddi4+0x2d2>
 8000dec:	1a84      	subs	r4, r0, r2
 8000dee:	eb6e 0203 	sbc.w	r2, lr, r3
 8000df2:	2001      	movs	r0, #1
 8000df4:	4690      	mov	r8, r2
 8000df6:	2d00      	cmp	r5, #0
 8000df8:	d0e5      	beq.n	8000dc6 <__udivmoddi4+0xa2>
 8000dfa:	e9c5 4800 	strd	r4, r8, [r5]
 8000dfe:	e7e2      	b.n	8000dc6 <__udivmoddi4+0xa2>
 8000e00:	2a00      	cmp	r2, #0
 8000e02:	f000 8090 	beq.w	8000f26 <__udivmoddi4+0x202>
 8000e06:	fab2 f682 	clz	r6, r2
 8000e0a:	2e00      	cmp	r6, #0
 8000e0c:	f040 80a4 	bne.w	8000f58 <__udivmoddi4+0x234>
 8000e10:	1a8a      	subs	r2, r1, r2
 8000e12:	0c03      	lsrs	r3, r0, #16
 8000e14:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e18:	b280      	uxth	r0, r0
 8000e1a:	b2bc      	uxth	r4, r7
 8000e1c:	2101      	movs	r1, #1
 8000e1e:	fbb2 fcfe 	udiv	ip, r2, lr
 8000e22:	fb0e 221c 	mls	r2, lr, ip, r2
 8000e26:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000e2a:	fb04 f20c 	mul.w	r2, r4, ip
 8000e2e:	429a      	cmp	r2, r3
 8000e30:	d907      	bls.n	8000e42 <__udivmoddi4+0x11e>
 8000e32:	18fb      	adds	r3, r7, r3
 8000e34:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000e38:	d202      	bcs.n	8000e40 <__udivmoddi4+0x11c>
 8000e3a:	429a      	cmp	r2, r3
 8000e3c:	f200 80e0 	bhi.w	8001000 <__udivmoddi4+0x2dc>
 8000e40:	46c4      	mov	ip, r8
 8000e42:	1a9b      	subs	r3, r3, r2
 8000e44:	fbb3 f2fe 	udiv	r2, r3, lr
 8000e48:	fb0e 3312 	mls	r3, lr, r2, r3
 8000e4c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000e50:	fb02 f404 	mul.w	r4, r2, r4
 8000e54:	429c      	cmp	r4, r3
 8000e56:	d907      	bls.n	8000e68 <__udivmoddi4+0x144>
 8000e58:	18fb      	adds	r3, r7, r3
 8000e5a:	f102 30ff 	add.w	r0, r2, #4294967295
 8000e5e:	d202      	bcs.n	8000e66 <__udivmoddi4+0x142>
 8000e60:	429c      	cmp	r4, r3
 8000e62:	f200 80ca 	bhi.w	8000ffa <__udivmoddi4+0x2d6>
 8000e66:	4602      	mov	r2, r0
 8000e68:	1b1b      	subs	r3, r3, r4
 8000e6a:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000e6e:	e7a5      	b.n	8000dbc <__udivmoddi4+0x98>
 8000e70:	f1c1 0620 	rsb	r6, r1, #32
 8000e74:	408b      	lsls	r3, r1
 8000e76:	fa22 f706 	lsr.w	r7, r2, r6
 8000e7a:	431f      	orrs	r7, r3
 8000e7c:	fa0e f401 	lsl.w	r4, lr, r1
 8000e80:	fa20 f306 	lsr.w	r3, r0, r6
 8000e84:	fa2e fe06 	lsr.w	lr, lr, r6
 8000e88:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000e8c:	4323      	orrs	r3, r4
 8000e8e:	fa00 f801 	lsl.w	r8, r0, r1
 8000e92:	fa1f fc87 	uxth.w	ip, r7
 8000e96:	fbbe f0f9 	udiv	r0, lr, r9
 8000e9a:	0c1c      	lsrs	r4, r3, #16
 8000e9c:	fb09 ee10 	mls	lr, r9, r0, lr
 8000ea0:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000ea4:	fb00 fe0c 	mul.w	lr, r0, ip
 8000ea8:	45a6      	cmp	lr, r4
 8000eaa:	fa02 f201 	lsl.w	r2, r2, r1
 8000eae:	d909      	bls.n	8000ec4 <__udivmoddi4+0x1a0>
 8000eb0:	193c      	adds	r4, r7, r4
 8000eb2:	f100 3aff 	add.w	sl, r0, #4294967295
 8000eb6:	f080 809c 	bcs.w	8000ff2 <__udivmoddi4+0x2ce>
 8000eba:	45a6      	cmp	lr, r4
 8000ebc:	f240 8099 	bls.w	8000ff2 <__udivmoddi4+0x2ce>
 8000ec0:	3802      	subs	r0, #2
 8000ec2:	443c      	add	r4, r7
 8000ec4:	eba4 040e 	sub.w	r4, r4, lr
 8000ec8:	fa1f fe83 	uxth.w	lr, r3
 8000ecc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000ed0:	fb09 4413 	mls	r4, r9, r3, r4
 8000ed4:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000ed8:	fb03 fc0c 	mul.w	ip, r3, ip
 8000edc:	45a4      	cmp	ip, r4
 8000ede:	d908      	bls.n	8000ef2 <__udivmoddi4+0x1ce>
 8000ee0:	193c      	adds	r4, r7, r4
 8000ee2:	f103 3eff 	add.w	lr, r3, #4294967295
 8000ee6:	f080 8082 	bcs.w	8000fee <__udivmoddi4+0x2ca>
 8000eea:	45a4      	cmp	ip, r4
 8000eec:	d97f      	bls.n	8000fee <__udivmoddi4+0x2ca>
 8000eee:	3b02      	subs	r3, #2
 8000ef0:	443c      	add	r4, r7
 8000ef2:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000ef6:	eba4 040c 	sub.w	r4, r4, ip
 8000efa:	fba0 ec02 	umull	lr, ip, r0, r2
 8000efe:	4564      	cmp	r4, ip
 8000f00:	4673      	mov	r3, lr
 8000f02:	46e1      	mov	r9, ip
 8000f04:	d362      	bcc.n	8000fcc <__udivmoddi4+0x2a8>
 8000f06:	d05f      	beq.n	8000fc8 <__udivmoddi4+0x2a4>
 8000f08:	b15d      	cbz	r5, 8000f22 <__udivmoddi4+0x1fe>
 8000f0a:	ebb8 0203 	subs.w	r2, r8, r3
 8000f0e:	eb64 0409 	sbc.w	r4, r4, r9
 8000f12:	fa04 f606 	lsl.w	r6, r4, r6
 8000f16:	fa22 f301 	lsr.w	r3, r2, r1
 8000f1a:	431e      	orrs	r6, r3
 8000f1c:	40cc      	lsrs	r4, r1
 8000f1e:	e9c5 6400 	strd	r6, r4, [r5]
 8000f22:	2100      	movs	r1, #0
 8000f24:	e74f      	b.n	8000dc6 <__udivmoddi4+0xa2>
 8000f26:	fbb1 fcf2 	udiv	ip, r1, r2
 8000f2a:	0c01      	lsrs	r1, r0, #16
 8000f2c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000f30:	b280      	uxth	r0, r0
 8000f32:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000f36:	463b      	mov	r3, r7
 8000f38:	4638      	mov	r0, r7
 8000f3a:	463c      	mov	r4, r7
 8000f3c:	46b8      	mov	r8, r7
 8000f3e:	46be      	mov	lr, r7
 8000f40:	2620      	movs	r6, #32
 8000f42:	fbb1 f1f7 	udiv	r1, r1, r7
 8000f46:	eba2 0208 	sub.w	r2, r2, r8
 8000f4a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000f4e:	e766      	b.n	8000e1e <__udivmoddi4+0xfa>
 8000f50:	4601      	mov	r1, r0
 8000f52:	e718      	b.n	8000d86 <__udivmoddi4+0x62>
 8000f54:	4610      	mov	r0, r2
 8000f56:	e72c      	b.n	8000db2 <__udivmoddi4+0x8e>
 8000f58:	f1c6 0220 	rsb	r2, r6, #32
 8000f5c:	fa2e f302 	lsr.w	r3, lr, r2
 8000f60:	40b7      	lsls	r7, r6
 8000f62:	40b1      	lsls	r1, r6
 8000f64:	fa20 f202 	lsr.w	r2, r0, r2
 8000f68:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000f6c:	430a      	orrs	r2, r1
 8000f6e:	fbb3 f8fe 	udiv	r8, r3, lr
 8000f72:	b2bc      	uxth	r4, r7
 8000f74:	fb0e 3318 	mls	r3, lr, r8, r3
 8000f78:	0c11      	lsrs	r1, r2, #16
 8000f7a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f7e:	fb08 f904 	mul.w	r9, r8, r4
 8000f82:	40b0      	lsls	r0, r6
 8000f84:	4589      	cmp	r9, r1
 8000f86:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000f8a:	b280      	uxth	r0, r0
 8000f8c:	d93e      	bls.n	800100c <__udivmoddi4+0x2e8>
 8000f8e:	1879      	adds	r1, r7, r1
 8000f90:	f108 3cff 	add.w	ip, r8, #4294967295
 8000f94:	d201      	bcs.n	8000f9a <__udivmoddi4+0x276>
 8000f96:	4589      	cmp	r9, r1
 8000f98:	d81f      	bhi.n	8000fda <__udivmoddi4+0x2b6>
 8000f9a:	eba1 0109 	sub.w	r1, r1, r9
 8000f9e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000fa2:	fb09 f804 	mul.w	r8, r9, r4
 8000fa6:	fb0e 1119 	mls	r1, lr, r9, r1
 8000faa:	b292      	uxth	r2, r2
 8000fac:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000fb0:	4542      	cmp	r2, r8
 8000fb2:	d229      	bcs.n	8001008 <__udivmoddi4+0x2e4>
 8000fb4:	18ba      	adds	r2, r7, r2
 8000fb6:	f109 31ff 	add.w	r1, r9, #4294967295
 8000fba:	d2c4      	bcs.n	8000f46 <__udivmoddi4+0x222>
 8000fbc:	4542      	cmp	r2, r8
 8000fbe:	d2c2      	bcs.n	8000f46 <__udivmoddi4+0x222>
 8000fc0:	f1a9 0102 	sub.w	r1, r9, #2
 8000fc4:	443a      	add	r2, r7
 8000fc6:	e7be      	b.n	8000f46 <__udivmoddi4+0x222>
 8000fc8:	45f0      	cmp	r8, lr
 8000fca:	d29d      	bcs.n	8000f08 <__udivmoddi4+0x1e4>
 8000fcc:	ebbe 0302 	subs.w	r3, lr, r2
 8000fd0:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000fd4:	3801      	subs	r0, #1
 8000fd6:	46e1      	mov	r9, ip
 8000fd8:	e796      	b.n	8000f08 <__udivmoddi4+0x1e4>
 8000fda:	eba7 0909 	sub.w	r9, r7, r9
 8000fde:	4449      	add	r1, r9
 8000fe0:	f1a8 0c02 	sub.w	ip, r8, #2
 8000fe4:	fbb1 f9fe 	udiv	r9, r1, lr
 8000fe8:	fb09 f804 	mul.w	r8, r9, r4
 8000fec:	e7db      	b.n	8000fa6 <__udivmoddi4+0x282>
 8000fee:	4673      	mov	r3, lr
 8000ff0:	e77f      	b.n	8000ef2 <__udivmoddi4+0x1ce>
 8000ff2:	4650      	mov	r0, sl
 8000ff4:	e766      	b.n	8000ec4 <__udivmoddi4+0x1a0>
 8000ff6:	4608      	mov	r0, r1
 8000ff8:	e6fd      	b.n	8000df6 <__udivmoddi4+0xd2>
 8000ffa:	443b      	add	r3, r7
 8000ffc:	3a02      	subs	r2, #2
 8000ffe:	e733      	b.n	8000e68 <__udivmoddi4+0x144>
 8001000:	f1ac 0c02 	sub.w	ip, ip, #2
 8001004:	443b      	add	r3, r7
 8001006:	e71c      	b.n	8000e42 <__udivmoddi4+0x11e>
 8001008:	4649      	mov	r1, r9
 800100a:	e79c      	b.n	8000f46 <__udivmoddi4+0x222>
 800100c:	eba1 0109 	sub.w	r1, r1, r9
 8001010:	46c4      	mov	ip, r8
 8001012:	fbb1 f9fe 	udiv	r9, r1, lr
 8001016:	fb09 f804 	mul.w	r8, r9, r4
 800101a:	e7c4      	b.n	8000fa6 <__udivmoddi4+0x282>

0800101c <__aeabi_idiv0>:
 800101c:	4770      	bx	lr
 800101e:	bf00      	nop

08001020 <I2Cx_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  i2c_handler  I2C handler
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	b08a      	sub	sp, #40	@ 0x28
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;

  /*** Configure the GPIOs ***/
  /* Enable GPIO clock */
  DISCOVERY_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8001028:	4b27      	ldr	r3, [pc, #156]	@ (80010c8 <I2Cx_MspInit+0xa8>)
 800102a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800102c:	4a26      	ldr	r2, [pc, #152]	@ (80010c8 <I2Cx_MspInit+0xa8>)
 800102e:	f043 0302 	orr.w	r3, r3, #2
 8001032:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001034:	4b24      	ldr	r3, [pc, #144]	@ (80010c8 <I2Cx_MspInit+0xa8>)
 8001036:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001038:	f003 0302 	and.w	r3, r3, #2
 800103c:	613b      	str	r3, [r7, #16]
 800103e:	693b      	ldr	r3, [r7, #16]

  /* Configure I2C Tx, Rx as alternate function */
  gpio_init_structure.Pin = DISCOVERY_I2Cx_SCL_PIN | DISCOVERY_I2Cx_SDA_PIN;
 8001040:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8001044:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8001046:	2312      	movs	r3, #18
 8001048:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull = GPIO_PULLUP;
 800104a:	2301      	movs	r3, #1
 800104c:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800104e:	2303      	movs	r3, #3
 8001050:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate = DISCOVERY_I2Cx_SCL_SDA_AF;
 8001052:	2304      	movs	r3, #4
 8001054:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8001056:	f107 0314 	add.w	r3, r7, #20
 800105a:	4619      	mov	r1, r3
 800105c:	481b      	ldr	r0, [pc, #108]	@ (80010cc <I2Cx_MspInit+0xac>)
 800105e:	f002 f8a5 	bl	80031ac <HAL_GPIO_Init>

  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8001062:	f107 0314 	add.w	r3, r7, #20
 8001066:	4619      	mov	r1, r3
 8001068:	4818      	ldr	r0, [pc, #96]	@ (80010cc <I2Cx_MspInit+0xac>)
 800106a:	f002 f89f 	bl	80031ac <HAL_GPIO_Init>

  /*** Configure the I2C peripheral ***/
  /* Enable I2C clock */
  DISCOVERY_I2Cx_CLK_ENABLE();
 800106e:	4b16      	ldr	r3, [pc, #88]	@ (80010c8 <I2Cx_MspInit+0xa8>)
 8001070:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001072:	4a15      	ldr	r2, [pc, #84]	@ (80010c8 <I2Cx_MspInit+0xa8>)
 8001074:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001078:	6593      	str	r3, [r2, #88]	@ 0x58
 800107a:	4b13      	ldr	r3, [pc, #76]	@ (80010c8 <I2Cx_MspInit+0xa8>)
 800107c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800107e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001082:	60fb      	str	r3, [r7, #12]
 8001084:	68fb      	ldr	r3, [r7, #12]

  /* Force the I2C peripheral clock reset */
  DISCOVERY_I2Cx_FORCE_RESET();
 8001086:	4b10      	ldr	r3, [pc, #64]	@ (80010c8 <I2Cx_MspInit+0xa8>)
 8001088:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800108a:	4a0f      	ldr	r2, [pc, #60]	@ (80010c8 <I2Cx_MspInit+0xa8>)
 800108c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001090:	6393      	str	r3, [r2, #56]	@ 0x38

  /* Release the I2C peripheral clock reset */
  DISCOVERY_I2Cx_RELEASE_RESET();
 8001092:	4b0d      	ldr	r3, [pc, #52]	@ (80010c8 <I2Cx_MspInit+0xa8>)
 8001094:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001096:	4a0c      	ldr	r2, [pc, #48]	@ (80010c8 <I2Cx_MspInit+0xa8>)
 8001098:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 800109c:	6393      	str	r3, [r2, #56]	@ 0x38

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_EV_IRQn, 0x0F, 0);
 800109e:	2200      	movs	r2, #0
 80010a0:	210f      	movs	r1, #15
 80010a2:	2021      	movs	r0, #33	@ 0x21
 80010a4:	f002 f84b 	bl	800313e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_EV_IRQn);
 80010a8:	2021      	movs	r0, #33	@ 0x21
 80010aa:	f002 f864 	bl	8003176 <HAL_NVIC_EnableIRQ>

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_ER_IRQn, 0x0F, 0);
 80010ae:	2200      	movs	r2, #0
 80010b0:	210f      	movs	r1, #15
 80010b2:	2022      	movs	r0, #34	@ 0x22
 80010b4:	f002 f843 	bl	800313e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_ER_IRQn);
 80010b8:	2022      	movs	r0, #34	@ 0x22
 80010ba:	f002 f85c 	bl	8003176 <HAL_NVIC_EnableIRQ>
}
 80010be:	bf00      	nop
 80010c0:	3728      	adds	r7, #40	@ 0x28
 80010c2:	46bd      	mov	sp, r7
 80010c4:	bd80      	pop	{r7, pc}
 80010c6:	bf00      	nop
 80010c8:	40021000 	.word	0x40021000
 80010cc:	48000400 	.word	0x48000400

080010d0 <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler  I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b082      	sub	sp, #8
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]
  /* I2C configuration */
  i2c_handler->Instance              = DISCOVERY_I2Cx;
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	4a12      	ldr	r2, [pc, #72]	@ (8001124 <I2Cx_Init+0x54>)
 80010dc:	601a      	str	r2, [r3, #0]
  i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	4a11      	ldr	r2, [pc, #68]	@ (8001128 <I2Cx_Init+0x58>)
 80010e2:	605a      	str	r2, [r3, #4]
  i2c_handler->Init.OwnAddress1      = 0;
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	2200      	movs	r2, #0
 80010e8:	609a      	str	r2, [r3, #8]
  i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	2201      	movs	r2, #1
 80010ee:	60da      	str	r2, [r3, #12]
  i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	2200      	movs	r2, #0
 80010f4:	611a      	str	r2, [r3, #16]
  i2c_handler->Init.OwnAddress2      = 0;
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	2200      	movs	r2, #0
 80010fa:	615a      	str	r2, [r3, #20]
  i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	2200      	movs	r2, #0
 8001100:	61da      	str	r2, [r3, #28]
  i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	2200      	movs	r2, #0
 8001106:	621a      	str	r2, [r3, #32]

  /* Init the I2C */
  I2Cx_MspInit(i2c_handler);
 8001108:	6878      	ldr	r0, [r7, #4]
 800110a:	f7ff ff89 	bl	8001020 <I2Cx_MspInit>
  HAL_I2C_Init(i2c_handler);
 800110e:	6878      	ldr	r0, [r7, #4]
 8001110:	f002 fb25 	bl	800375e <HAL_I2C_Init>
  
  /**Configure Analogue filter */
  HAL_I2CEx_ConfigAnalogFilter(i2c_handler, I2C_ANALOGFILTER_ENABLE);  
 8001114:	2100      	movs	r1, #0
 8001116:	6878      	ldr	r0, [r7, #4]
 8001118:	f003 f8dc 	bl	80042d4 <HAL_I2CEx_ConfigAnalogFilter>
}
 800111c:	bf00      	nop
 800111e:	3708      	adds	r7, #8
 8001120:	46bd      	mov	sp, r7
 8001122:	bd80      	pop	{r7, pc}
 8001124:	40005800 	.word	0x40005800
 8001128:	00702681 	.word	0x00702681

0800112c <I2Cx_ReadMultiple>:
  * @param  Buffer  Pointer to data buffer
  * @param  Length  Length of the data
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_ReadMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	b08a      	sub	sp, #40	@ 0x28
 8001130:	af04      	add	r7, sp, #16
 8001132:	60f8      	str	r0, [r7, #12]
 8001134:	4608      	mov	r0, r1
 8001136:	4611      	mov	r1, r2
 8001138:	461a      	mov	r2, r3
 800113a:	4603      	mov	r3, r0
 800113c:	72fb      	strb	r3, [r7, #11]
 800113e:	460b      	mov	r3, r1
 8001140:	813b      	strh	r3, [r7, #8]
 8001142:	4613      	mov	r3, r2
 8001144:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8001146:	2300      	movs	r3, #0
 8001148:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 800114a:	7afb      	ldrb	r3, [r7, #11]
 800114c:	b299      	uxth	r1, r3
 800114e:	88f8      	ldrh	r0, [r7, #6]
 8001150:	893a      	ldrh	r2, [r7, #8]
 8001152:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001156:	9302      	str	r3, [sp, #8]
 8001158:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800115a:	9301      	str	r3, [sp, #4]
 800115c:	6a3b      	ldr	r3, [r7, #32]
 800115e:	9300      	str	r3, [sp, #0]
 8001160:	4603      	mov	r3, r0
 8001162:	68f8      	ldr	r0, [r7, #12]
 8001164:	f002 fcda 	bl	8003b1c <HAL_I2C_Mem_Read>
 8001168:	4603      	mov	r3, r0
 800116a:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 800116c:	7dfb      	ldrb	r3, [r7, #23]
 800116e:	2b00      	cmp	r3, #0
 8001170:	d004      	beq.n	800117c <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occurred */
    I2Cx_Error(i2c_handler, Addr);
 8001172:	7afb      	ldrb	r3, [r7, #11]
 8001174:	4619      	mov	r1, r3
 8001176:	68f8      	ldr	r0, [r7, #12]
 8001178:	f000 f832 	bl	80011e0 <I2Cx_Error>
  }
  return status;
 800117c:	7dfb      	ldrb	r3, [r7, #23]
}
 800117e:	4618      	mov	r0, r3
 8001180:	3718      	adds	r7, #24
 8001182:	46bd      	mov	sp, r7
 8001184:	bd80      	pop	{r7, pc}

08001186 <I2Cx_WriteMultiple>:
  * @param  Buffer  The target register value to be written
  * @param  Length  buffer size to be written
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_WriteMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 8001186:	b580      	push	{r7, lr}
 8001188:	b08a      	sub	sp, #40	@ 0x28
 800118a:	af04      	add	r7, sp, #16
 800118c:	60f8      	str	r0, [r7, #12]
 800118e:	4608      	mov	r0, r1
 8001190:	4611      	mov	r1, r2
 8001192:	461a      	mov	r2, r3
 8001194:	4603      	mov	r3, r0
 8001196:	72fb      	strb	r3, [r7, #11]
 8001198:	460b      	mov	r3, r1
 800119a:	813b      	strh	r3, [r7, #8]
 800119c:	4613      	mov	r3, r2
 800119e:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 80011a0:	2300      	movs	r3, #0
 80011a2:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 80011a4:	7afb      	ldrb	r3, [r7, #11]
 80011a6:	b299      	uxth	r1, r3
 80011a8:	88f8      	ldrh	r0, [r7, #6]
 80011aa:	893a      	ldrh	r2, [r7, #8]
 80011ac:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80011b0:	9302      	str	r3, [sp, #8]
 80011b2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80011b4:	9301      	str	r3, [sp, #4]
 80011b6:	6a3b      	ldr	r3, [r7, #32]
 80011b8:	9300      	str	r3, [sp, #0]
 80011ba:	4603      	mov	r3, r0
 80011bc:	68f8      	ldr	r0, [r7, #12]
 80011be:	f002 fb99 	bl	80038f4 <HAL_I2C_Mem_Write>
 80011c2:	4603      	mov	r3, r0
 80011c4:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 80011c6:	7dfb      	ldrb	r3, [r7, #23]
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d004      	beq.n	80011d6 <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 80011cc:	7afb      	ldrb	r3, [r7, #11]
 80011ce:	4619      	mov	r1, r3
 80011d0:	68f8      	ldr	r0, [r7, #12]
 80011d2:	f000 f805 	bl	80011e0 <I2Cx_Error>
  }
  return status;
 80011d6:	7dfb      	ldrb	r3, [r7, #23]
}
 80011d8:	4618      	mov	r0, r3
 80011da:	3718      	adds	r7, #24
 80011dc:	46bd      	mov	sp, r7
 80011de:	bd80      	pop	{r7, pc}

080011e0 <I2Cx_Error>:
  * @param  i2c_handler  I2C handler
  * @param  Addr  I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b082      	sub	sp, #8
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	6078      	str	r0, [r7, #4]
 80011e8:	460b      	mov	r3, r1
 80011ea:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 80011ec:	6878      	ldr	r0, [r7, #4]
 80011ee:	f002 fb51 	bl	8003894 <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 80011f2:	6878      	ldr	r0, [r7, #4]
 80011f4:	f7ff ff6c 	bl	80010d0 <I2Cx_Init>
}
 80011f8:	bf00      	nop
 80011fa:	3708      	adds	r7, #8
 80011fc:	46bd      	mov	sp, r7
 80011fe:	bd80      	pop	{r7, pc}

08001200 <SENSOR_IO_Init>:
/**
  * @brief  Initializes Sensors low level.
  * @retval None
  */
void SENSOR_IO_Init(void)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cHandler);
 8001204:	4802      	ldr	r0, [pc, #8]	@ (8001210 <SENSOR_IO_Init+0x10>)
 8001206:	f7ff ff63 	bl	80010d0 <I2Cx_Init>
}
 800120a:	bf00      	nop
 800120c:	bd80      	pop	{r7, pc}
 800120e:	bf00      	nop
 8001210:	20000c30 	.word	0x20000c30

08001214 <SENSOR_IO_Write>:
  * @param  Reg  Reg address
  * @param  Value  Data to be written
  * @retval None
  */
void SENSOR_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	b084      	sub	sp, #16
 8001218:	af02      	add	r7, sp, #8
 800121a:	4603      	mov	r3, r0
 800121c:	71fb      	strb	r3, [r7, #7]
 800121e:	460b      	mov	r3, r1
 8001220:	71bb      	strb	r3, [r7, #6]
 8001222:	4613      	mov	r3, r2
 8001224:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 8001226:	79bb      	ldrb	r3, [r7, #6]
 8001228:	b29a      	uxth	r2, r3
 800122a:	79f9      	ldrb	r1, [r7, #7]
 800122c:	2301      	movs	r3, #1
 800122e:	9301      	str	r3, [sp, #4]
 8001230:	1d7b      	adds	r3, r7, #5
 8001232:	9300      	str	r3, [sp, #0]
 8001234:	2301      	movs	r3, #1
 8001236:	4803      	ldr	r0, [pc, #12]	@ (8001244 <SENSOR_IO_Write+0x30>)
 8001238:	f7ff ffa5 	bl	8001186 <I2Cx_WriteMultiple>
}
 800123c:	bf00      	nop
 800123e:	3708      	adds	r7, #8
 8001240:	46bd      	mov	sp, r7
 8001242:	bd80      	pop	{r7, pc}
 8001244:	20000c30 	.word	0x20000c30

08001248 <SENSOR_IO_Read>:
  * @param  Addr  I2C address
  * @param  Reg  Reg address
  * @retval Data to be read
  */
uint8_t SENSOR_IO_Read(uint8_t Addr, uint8_t Reg)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	b086      	sub	sp, #24
 800124c:	af02      	add	r7, sp, #8
 800124e:	4603      	mov	r3, r0
 8001250:	460a      	mov	r2, r1
 8001252:	71fb      	strb	r3, [r7, #7]
 8001254:	4613      	mov	r3, r2
 8001256:	71bb      	strb	r3, [r7, #6]
  uint8_t read_value = 0;
 8001258:	2300      	movs	r3, #0
 800125a:	73fb      	strb	r3, [r7, #15]

  I2Cx_ReadMultiple(&hI2cHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 800125c:	79bb      	ldrb	r3, [r7, #6]
 800125e:	b29a      	uxth	r2, r3
 8001260:	79f9      	ldrb	r1, [r7, #7]
 8001262:	2301      	movs	r3, #1
 8001264:	9301      	str	r3, [sp, #4]
 8001266:	f107 030f 	add.w	r3, r7, #15
 800126a:	9300      	str	r3, [sp, #0]
 800126c:	2301      	movs	r3, #1
 800126e:	4804      	ldr	r0, [pc, #16]	@ (8001280 <SENSOR_IO_Read+0x38>)
 8001270:	f7ff ff5c 	bl	800112c <I2Cx_ReadMultiple>

  return read_value;
 8001274:	7bfb      	ldrb	r3, [r7, #15]
}
 8001276:	4618      	mov	r0, r3
 8001278:	3710      	adds	r7, #16
 800127a:	46bd      	mov	sp, r7
 800127c:	bd80      	pop	{r7, pc}
 800127e:	bf00      	nop
 8001280:	20000c30 	.word	0x20000c30

08001284 <SENSOR_IO_ReadMultiple>:
  * @param  Buffer  Pointer to data buffer
  * @param  Length  Length of the data
  * @retval HAL status
  */
uint16_t SENSOR_IO_ReadMultiple(uint8_t Addr, uint8_t Reg, uint8_t *Buffer, uint16_t Length)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	b084      	sub	sp, #16
 8001288:	af02      	add	r7, sp, #8
 800128a:	603a      	str	r2, [r7, #0]
 800128c:	461a      	mov	r2, r3
 800128e:	4603      	mov	r3, r0
 8001290:	71fb      	strb	r3, [r7, #7]
 8001292:	460b      	mov	r3, r1
 8001294:	71bb      	strb	r3, [r7, #6]
 8001296:	4613      	mov	r3, r2
 8001298:	80bb      	strh	r3, [r7, #4]
 return I2Cx_ReadMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, Buffer, Length);
 800129a:	79bb      	ldrb	r3, [r7, #6]
 800129c:	b29a      	uxth	r2, r3
 800129e:	79f9      	ldrb	r1, [r7, #7]
 80012a0:	88bb      	ldrh	r3, [r7, #4]
 80012a2:	9301      	str	r3, [sp, #4]
 80012a4:	683b      	ldr	r3, [r7, #0]
 80012a6:	9300      	str	r3, [sp, #0]
 80012a8:	2301      	movs	r3, #1
 80012aa:	4804      	ldr	r0, [pc, #16]	@ (80012bc <SENSOR_IO_ReadMultiple+0x38>)
 80012ac:	f7ff ff3e 	bl	800112c <I2Cx_ReadMultiple>
 80012b0:	4603      	mov	r3, r0
}
 80012b2:	4618      	mov	r0, r3
 80012b4:	3708      	adds	r7, #8
 80012b6:	46bd      	mov	sp, r7
 80012b8:	bd80      	pop	{r7, pc}
 80012ba:	bf00      	nop
 80012bc:	20000c30 	.word	0x20000c30

080012c0 <BSP_ACCELERO_Init>:
/**
  * @brief  Initialize the ACCELERO.
  * @retval ACCELERO_OK or ACCELERO_ERROR
  */
ACCELERO_StatusTypeDef BSP_ACCELERO_Init(void)
{  
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b084      	sub	sp, #16
 80012c4:	af00      	add	r7, sp, #0
  ACCELERO_StatusTypeDef ret = ACCELERO_OK;
 80012c6:	2300      	movs	r3, #0
 80012c8:	73fb      	strb	r3, [r7, #15]
  uint16_t ctrl = 0x0000;
 80012ca:	2300      	movs	r3, #0
 80012cc:	81bb      	strh	r3, [r7, #12]
  ACCELERO_InitTypeDef LSM6DSL_InitStructure;

  if(Lsm6dslAccDrv.ReadID() != LSM6DSL_ACC_GYRO_WHO_AM_I)
 80012ce:	4b1a      	ldr	r3, [pc, #104]	@ (8001338 <BSP_ACCELERO_Init+0x78>)
 80012d0:	689b      	ldr	r3, [r3, #8]
 80012d2:	4798      	blx	r3
 80012d4:	4603      	mov	r3, r0
 80012d6:	2b6a      	cmp	r3, #106	@ 0x6a
 80012d8:	d002      	beq.n	80012e0 <BSP_ACCELERO_Init+0x20>
  {
    ret = ACCELERO_ERROR;
 80012da:	2301      	movs	r3, #1
 80012dc:	73fb      	strb	r3, [r7, #15]
 80012de:	e025      	b.n	800132c <BSP_ACCELERO_Init+0x6c>
  }
  else
  {
    /* Initialize the ACCELERO accelerometer driver structure */
    AccelerometerDrv = &Lsm6dslAccDrv;
 80012e0:	4b16      	ldr	r3, [pc, #88]	@ (800133c <BSP_ACCELERO_Init+0x7c>)
 80012e2:	4a15      	ldr	r2, [pc, #84]	@ (8001338 <BSP_ACCELERO_Init+0x78>)
 80012e4:	601a      	str	r2, [r3, #0]
  
    /* MEMS configuration ------------------------------------------------------*/
    /* Fill the ACCELERO accelerometer structure */
    LSM6DSL_InitStructure.AccOutput_DataRate = LSM6DSL_ODR_52Hz;
 80012e6:	2330      	movs	r3, #48	@ 0x30
 80012e8:	717b      	strb	r3, [r7, #5]
    LSM6DSL_InitStructure.Axes_Enable = 0;
 80012ea:	2300      	movs	r3, #0
 80012ec:	71bb      	strb	r3, [r7, #6]
    LSM6DSL_InitStructure.AccFull_Scale = LSM6DSL_ACC_FULLSCALE_2G;
 80012ee:	2300      	movs	r3, #0
 80012f0:	72bb      	strb	r3, [r7, #10]
    LSM6DSL_InitStructure.BlockData_Update = LSM6DSL_BDU_BLOCK_UPDATE;
 80012f2:	2340      	movs	r3, #64	@ 0x40
 80012f4:	723b      	strb	r3, [r7, #8]
    LSM6DSL_InitStructure.High_Resolution = 0;
 80012f6:	2300      	movs	r3, #0
 80012f8:	71fb      	strb	r3, [r7, #7]
    LSM6DSL_InitStructure.Communication_Mode = 0;
 80012fa:	2300      	movs	r3, #0
 80012fc:	72fb      	strb	r3, [r7, #11]
        
    /* Configure MEMS: data rate, full scale  */
    ctrl =  (LSM6DSL_InitStructure.AccOutput_DataRate | LSM6DSL_InitStructure.AccFull_Scale);
 80012fe:	797a      	ldrb	r2, [r7, #5]
 8001300:	7abb      	ldrb	r3, [r7, #10]
 8001302:	4313      	orrs	r3, r2
 8001304:	b2db      	uxtb	r3, r3
 8001306:	81bb      	strh	r3, [r7, #12]
    
    /* Configure MEMS: BDU and Auto-increment for multi read/write */
    ctrl |= ((LSM6DSL_InitStructure.BlockData_Update | LSM6DSL_ACC_GYRO_IF_INC_ENABLED) << 8);
 8001308:	7a3b      	ldrb	r3, [r7, #8]
 800130a:	f043 0304 	orr.w	r3, r3, #4
 800130e:	b2db      	uxtb	r3, r3
 8001310:	b21b      	sxth	r3, r3
 8001312:	021b      	lsls	r3, r3, #8
 8001314:	b21a      	sxth	r2, r3
 8001316:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800131a:	4313      	orrs	r3, r2
 800131c:	b21b      	sxth	r3, r3
 800131e:	81bb      	strh	r3, [r7, #12]

    /* Configure the ACCELERO accelerometer main parameters */
    AccelerometerDrv->Init(ctrl);
 8001320:	4b06      	ldr	r3, [pc, #24]	@ (800133c <BSP_ACCELERO_Init+0x7c>)
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	89ba      	ldrh	r2, [r7, #12]
 8001328:	4610      	mov	r0, r2
 800132a:	4798      	blx	r3
  }  

  return ret;
 800132c:	7bfb      	ldrb	r3, [r7, #15]
}
 800132e:	4618      	mov	r0, r3
 8001330:	3710      	adds	r7, #16
 8001332:	46bd      	mov	sp, r7
 8001334:	bd80      	pop	{r7, pc}
 8001336:	bf00      	nop
 8001338:	20000a10 	.word	0x20000a10
 800133c:	20000c84 	.word	0x20000c84

08001340 <BSP_ACCELERO_AccGetXYZ>:
  * @param  pDataXYZ Pointer on 3 angular accelerations table with  
  *                  pDataXYZ[0] = X axis, pDataXYZ[1] = Y axis, pDataXYZ[2] = Z axis
  * @retval None
  */
void BSP_ACCELERO_AccGetXYZ(int16_t *pDataXYZ)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	b082      	sub	sp, #8
 8001344:	af00      	add	r7, sp, #0
 8001346:	6078      	str	r0, [r7, #4]
  if(AccelerometerDrv != NULL)
 8001348:	4b08      	ldr	r3, [pc, #32]	@ (800136c <BSP_ACCELERO_AccGetXYZ+0x2c>)
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	2b00      	cmp	r3, #0
 800134e:	d009      	beq.n	8001364 <BSP_ACCELERO_AccGetXYZ+0x24>
  {
    if(AccelerometerDrv->GetXYZ != NULL)
 8001350:	4b06      	ldr	r3, [pc, #24]	@ (800136c <BSP_ACCELERO_AccGetXYZ+0x2c>)
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001356:	2b00      	cmp	r3, #0
 8001358:	d004      	beq.n	8001364 <BSP_ACCELERO_AccGetXYZ+0x24>
    {   
      AccelerometerDrv->GetXYZ(pDataXYZ);
 800135a:	4b04      	ldr	r3, [pc, #16]	@ (800136c <BSP_ACCELERO_AccGetXYZ+0x2c>)
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001360:	6878      	ldr	r0, [r7, #4]
 8001362:	4798      	blx	r3
    }
  }
}
 8001364:	bf00      	nop
 8001366:	3708      	adds	r7, #8
 8001368:	46bd      	mov	sp, r7
 800136a:	bd80      	pop	{r7, pc}
 800136c:	20000c84 	.word	0x20000c84

08001370 <__io_putchar>:
static void MX_USART1_UART_Init(void);
static void MX_I2C1_Init(void);
static void MX_SPI1_Init(void);
/* USER CODE BEGIN PFP */

int __io_putchar(int ch){
 8001370:	b580      	push	{r7, lr}
 8001372:	b082      	sub	sp, #8
 8001374:	af00      	add	r7, sp, #0
 8001376:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, 0xFFFF);
 8001378:	1d39      	adds	r1, r7, #4
 800137a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800137e:	2201      	movs	r2, #1
 8001380:	4803      	ldr	r0, [pc, #12]	@ (8001390 <__io_putchar+0x20>)
 8001382:	f004 fc50 	bl	8005c26 <HAL_UART_Transmit>
	return ch;
 8001386:	687b      	ldr	r3, [r7, #4]
}
 8001388:	4618      	mov	r0, r3
 800138a:	3708      	adds	r7, #8
 800138c:	46bd      	mov	sp, r7
 800138e:	bd80      	pop	{r7, pc}
 8001390:	20000d40 	.word	0x20000d40

08001394 <arm_fir_init_f32>:
		arm_fir_instance_f32 * S,
        uint16_t numTaps,
  const float32_t * pCoeffs,
        float32_t * pState,
        uint32_t blockSize)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	b084      	sub	sp, #16
 8001398:	af00      	add	r7, sp, #0
 800139a:	60f8      	str	r0, [r7, #12]
 800139c:	607a      	str	r2, [r7, #4]
 800139e:	603b      	str	r3, [r7, #0]
 80013a0:	460b      	mov	r3, r1
 80013a2:	817b      	strh	r3, [r7, #10]
  /* Assign filter taps */
  S->numTaps = numTaps;
 80013a4:	68fb      	ldr	r3, [r7, #12]
 80013a6:	897a      	ldrh	r2, [r7, #10]
 80013a8:	801a      	strh	r2, [r3, #0]

  /* Assign coefficient pointer */
  S->pCoeffs = pCoeffs;
 80013aa:	68fb      	ldr	r3, [r7, #12]
 80013ac:	687a      	ldr	r2, [r7, #4]
 80013ae:	609a      	str	r2, [r3, #8]

  /* Clear state buffer and the size of state buffer is (blockSize + numTaps - 1) */
  memset(pState, 0, (numTaps + (blockSize - 1u)) * sizeof(float32_t));
 80013b0:	897a      	ldrh	r2, [r7, #10]
 80013b2:	69bb      	ldr	r3, [r7, #24]
 80013b4:	4413      	add	r3, r2
 80013b6:	3b01      	subs	r3, #1
 80013b8:	009b      	lsls	r3, r3, #2
 80013ba:	461a      	mov	r2, r3
 80013bc:	2100      	movs	r1, #0
 80013be:	6838      	ldr	r0, [r7, #0]
 80013c0:	f006 fa0a 	bl	80077d8 <memset>

  /* Assign state pointer */
  S->pState = pState;
 80013c4:	68fb      	ldr	r3, [r7, #12]
 80013c6:	683a      	ldr	r2, [r7, #0]
 80013c8:	605a      	str	r2, [r3, #4]

}
 80013ca:	bf00      	nop
 80013cc:	3710      	adds	r7, #16
 80013ce:	46bd      	mov	sp, r7
 80013d0:	bd80      	pop	{r7, pc}

080013d2 <arm_fir_f32>:
void arm_fir_f32(
		  const arm_fir_instance_f32 * S,
		  const float32_t * pSrc,
		        float32_t * pDst,
		        uint32_t blockSize)
{
 80013d2:	b480      	push	{r7}
 80013d4:	b09f      	sub	sp, #124	@ 0x7c
 80013d6:	af00      	add	r7, sp, #0
 80013d8:	60f8      	str	r0, [r7, #12]
 80013da:	60b9      	str	r1, [r7, #8]
 80013dc:	607a      	str	r2, [r7, #4]
 80013de:	603b      	str	r3, [r7, #0]
   float32_t *pState = S->pState;                 /* State pointer */
 80013e0:	68fb      	ldr	r3, [r7, #12]
 80013e2:	685b      	ldr	r3, [r3, #4]
 80013e4:	677b      	str	r3, [r7, #116]	@ 0x74
   float32_t *pCoeffs = S->pCoeffs;               /* Coefficient pointer */
 80013e6:	68fb      	ldr	r3, [r7, #12]
 80013e8:	689b      	ldr	r3, [r3, #8]
 80013ea:	61fb      	str	r3, [r7, #28]
   float32_t *pStateCurnt;                        /* Points to the current sample of the state */
   float32_t *px, *pb;                            /* Temporary pointers for state and coefficient buffers */
   float32_t acc0, acc1, acc2, acc3, acc4, acc5, acc6, acc7;     /* Accumulators */
   float32_t x0, x1, x2, x3, x4, x5, x6, x7, c0;  /* Temporary variables to hold state and coefficient values */
   uint32_t numTaps = S->numTaps;                 /* Number of filter coefficients in the filter */
 80013ec:	68fb      	ldr	r3, [r7, #12]
 80013ee:	881b      	ldrh	r3, [r3, #0]
 80013f0:	61bb      	str	r3, [r7, #24]
   uint32_t i, tapCnt, blkCnt;                    /* Loop counters */

   /* S->pState points to state array which contains previous frame (numTaps - 1) samples */
   /* pStateCurnt points to the location where the new input data should be written */
   pStateCurnt = &(S->pState[(numTaps - 1u)]);
 80013f2:	68fb      	ldr	r3, [r7, #12]
 80013f4:	685a      	ldr	r2, [r3, #4]
 80013f6:	69bb      	ldr	r3, [r7, #24]
 80013f8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80013fc:	3b01      	subs	r3, #1
 80013fe:	009b      	lsls	r3, r3, #2
 8001400:	4413      	add	r3, r2
 8001402:	673b      	str	r3, [r7, #112]	@ 0x70
    *    acc0 =  b[numTaps-1] * x[n-numTaps-1] + b[numTaps-2] * x[n-numTaps-2] + b[numTaps-3] * x[n-numTaps-3] +...+ b[0] * x[0]
    *    acc1 =  b[numTaps-1] * x[n-numTaps] +   b[numTaps-2] * x[n-numTaps-1] + b[numTaps-3] * x[n-numTaps-2] +...+ b[0] * x[1]
    *    acc2 =  b[numTaps-1] * x[n-numTaps+1] + b[numTaps-2] * x[n-numTaps] +   b[numTaps-3] * x[n-numTaps-1] +...+ b[0] * x[2]
    *    acc3 =  b[numTaps-1] * x[n-numTaps+2] + b[numTaps-2] * x[n-numTaps+1] + b[numTaps-3] * x[n-numTaps]   +...+ b[0] * x[3]
    */
   blkCnt = blockSize >> 3;
 8001404:	683b      	ldr	r3, [r7, #0]
 8001406:	08db      	lsrs	r3, r3, #3
 8001408:	623b      	str	r3, [r7, #32]

   /* First part of the processing with loop unrolling.  Compute 8 outputs at a time.
   ** a second loop below computes the remaining 1 to 7 samples. */
   while(blkCnt > 0u)
 800140a:	f000 bc8b 	b.w	8001d24 <arm_fir_f32+0x952>
   {
      /* Copy four new input samples into the state buffer */
      *pStateCurnt++ = *pSrc++;
 800140e:	68ba      	ldr	r2, [r7, #8]
 8001410:	1d13      	adds	r3, r2, #4
 8001412:	60bb      	str	r3, [r7, #8]
 8001414:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001416:	1d19      	adds	r1, r3, #4
 8001418:	6739      	str	r1, [r7, #112]	@ 0x70
 800141a:	6812      	ldr	r2, [r2, #0]
 800141c:	601a      	str	r2, [r3, #0]
      *pStateCurnt++ = *pSrc++;
 800141e:	68ba      	ldr	r2, [r7, #8]
 8001420:	1d13      	adds	r3, r2, #4
 8001422:	60bb      	str	r3, [r7, #8]
 8001424:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001426:	1d19      	adds	r1, r3, #4
 8001428:	6739      	str	r1, [r7, #112]	@ 0x70
 800142a:	6812      	ldr	r2, [r2, #0]
 800142c:	601a      	str	r2, [r3, #0]
      *pStateCurnt++ = *pSrc++;
 800142e:	68ba      	ldr	r2, [r7, #8]
 8001430:	1d13      	adds	r3, r2, #4
 8001432:	60bb      	str	r3, [r7, #8]
 8001434:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001436:	1d19      	adds	r1, r3, #4
 8001438:	6739      	str	r1, [r7, #112]	@ 0x70
 800143a:	6812      	ldr	r2, [r2, #0]
 800143c:	601a      	str	r2, [r3, #0]
      *pStateCurnt++ = *pSrc++;
 800143e:	68ba      	ldr	r2, [r7, #8]
 8001440:	1d13      	adds	r3, r2, #4
 8001442:	60bb      	str	r3, [r7, #8]
 8001444:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001446:	1d19      	adds	r1, r3, #4
 8001448:	6739      	str	r1, [r7, #112]	@ 0x70
 800144a:	6812      	ldr	r2, [r2, #0]
 800144c:	601a      	str	r2, [r3, #0]

      /* Set all accumulators to zero */
      acc0 = 0.0f;
 800144e:	f04f 0300 	mov.w	r3, #0
 8001452:	667b      	str	r3, [r7, #100]	@ 0x64
      acc1 = 0.0f;
 8001454:	f04f 0300 	mov.w	r3, #0
 8001458:	663b      	str	r3, [r7, #96]	@ 0x60
      acc2 = 0.0f;
 800145a:	f04f 0300 	mov.w	r3, #0
 800145e:	65fb      	str	r3, [r7, #92]	@ 0x5c
      acc3 = 0.0f;
 8001460:	f04f 0300 	mov.w	r3, #0
 8001464:	65bb      	str	r3, [r7, #88]	@ 0x58
      acc4 = 0.0f;
 8001466:	f04f 0300 	mov.w	r3, #0
 800146a:	657b      	str	r3, [r7, #84]	@ 0x54
      acc5 = 0.0f;
 800146c:	f04f 0300 	mov.w	r3, #0
 8001470:	653b      	str	r3, [r7, #80]	@ 0x50
      acc6 = 0.0f;
 8001472:	f04f 0300 	mov.w	r3, #0
 8001476:	64fb      	str	r3, [r7, #76]	@ 0x4c
      acc7 = 0.0f;
 8001478:	f04f 0300 	mov.w	r3, #0
 800147c:	64bb      	str	r3, [r7, #72]	@ 0x48

      /* Initialize state pointer */
      px = pState;
 800147e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001480:	66fb      	str	r3, [r7, #108]	@ 0x6c

      /* Initialize coeff pointer */
      pb = (pCoeffs);
 8001482:	69fb      	ldr	r3, [r7, #28]
 8001484:	66bb      	str	r3, [r7, #104]	@ 0x68

      /* This is separated from the others to avoid
       * a call to __aeabi_memmove which would be slower
       */
      *pStateCurnt++ = *pSrc++;
 8001486:	68ba      	ldr	r2, [r7, #8]
 8001488:	1d13      	adds	r3, r2, #4
 800148a:	60bb      	str	r3, [r7, #8]
 800148c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800148e:	1d19      	adds	r1, r3, #4
 8001490:	6739      	str	r1, [r7, #112]	@ 0x70
 8001492:	6812      	ldr	r2, [r2, #0]
 8001494:	601a      	str	r2, [r3, #0]
      *pStateCurnt++ = *pSrc++;
 8001496:	68ba      	ldr	r2, [r7, #8]
 8001498:	1d13      	adds	r3, r2, #4
 800149a:	60bb      	str	r3, [r7, #8]
 800149c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800149e:	1d19      	adds	r1, r3, #4
 80014a0:	6739      	str	r1, [r7, #112]	@ 0x70
 80014a2:	6812      	ldr	r2, [r2, #0]
 80014a4:	601a      	str	r2, [r3, #0]
      *pStateCurnt++ = *pSrc++;
 80014a6:	68ba      	ldr	r2, [r7, #8]
 80014a8:	1d13      	adds	r3, r2, #4
 80014aa:	60bb      	str	r3, [r7, #8]
 80014ac:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80014ae:	1d19      	adds	r1, r3, #4
 80014b0:	6739      	str	r1, [r7, #112]	@ 0x70
 80014b2:	6812      	ldr	r2, [r2, #0]
 80014b4:	601a      	str	r2, [r3, #0]
      *pStateCurnt++ = *pSrc++;
 80014b6:	68ba      	ldr	r2, [r7, #8]
 80014b8:	1d13      	adds	r3, r2, #4
 80014ba:	60bb      	str	r3, [r7, #8]
 80014bc:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80014be:	1d19      	adds	r1, r3, #4
 80014c0:	6739      	str	r1, [r7, #112]	@ 0x70
 80014c2:	6812      	ldr	r2, [r2, #0]
 80014c4:	601a      	str	r2, [r3, #0]

      /* Read the first seven samples from the state buffer:  x[n-numTaps], x[n-numTaps-1], x[n-numTaps-2] */
      x0 = *px++;
 80014c6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80014c8:	1d1a      	adds	r2, r3, #4
 80014ca:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	647b      	str	r3, [r7, #68]	@ 0x44
      x1 = *px++;
 80014d0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80014d2:	1d1a      	adds	r2, r3, #4
 80014d4:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	643b      	str	r3, [r7, #64]	@ 0x40
      x2 = *px++;
 80014da:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80014dc:	1d1a      	adds	r2, r3, #4
 80014de:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
      x3 = *px++;
 80014e4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80014e6:	1d1a      	adds	r2, r3, #4
 80014e8:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	63bb      	str	r3, [r7, #56]	@ 0x38
      x4 = *px++;
 80014ee:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80014f0:	1d1a      	adds	r2, r3, #4
 80014f2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	637b      	str	r3, [r7, #52]	@ 0x34
      x5 = *px++;
 80014f8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80014fa:	1d1a      	adds	r2, r3, #4
 80014fc:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	633b      	str	r3, [r7, #48]	@ 0x30
      x6 = *px++;
 8001502:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001504:	1d1a      	adds	r2, r3, #4
 8001506:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	62fb      	str	r3, [r7, #44]	@ 0x2c

      /* Loop unrolling.  Process 8 taps at a time. */
      tapCnt = numTaps >> 3u;
 800150c:	69bb      	ldr	r3, [r7, #24]
 800150e:	08db      	lsrs	r3, r3, #3
 8001510:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Loop over the number of taps.  Unroll by a factor of 8.
       ** Repeat until we've computed numTaps-8 coefficients. */
      while(tapCnt > 0u)
 8001512:	e352      	b.n	8001bba <arm_fir_f32+0x7e8>
      {
         /* Read the b[numTaps-1] coefficient */
         c0 = *(pb++);
 8001514:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001516:	1d1a      	adds	r2, r3, #4
 8001518:	66ba      	str	r2, [r7, #104]	@ 0x68
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	617b      	str	r3, [r7, #20]

         /* Read x[n-numTaps-3] sample */
         x7 = *(px++);
 800151e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001520:	1d1a      	adds	r2, r3, #4
 8001522:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	613b      	str	r3, [r7, #16]

         /* acc0 +=  b[numTaps-1] * x[n-numTaps] */
         acc0 += x0 * c0;
 8001528:	ed97 7a11 	vldr	s14, [r7, #68]	@ 0x44
 800152c:	edd7 7a05 	vldr	s15, [r7, #20]
 8001530:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001534:	ed97 7a19 	vldr	s14, [r7, #100]	@ 0x64
 8001538:	ee77 7a27 	vadd.f32	s15, s14, s15
 800153c:	edc7 7a19 	vstr	s15, [r7, #100]	@ 0x64

         /* acc1 +=  b[numTaps-1] * x[n-numTaps-1] */
         acc1 += x1 * c0;
 8001540:	ed97 7a10 	vldr	s14, [r7, #64]	@ 0x40
 8001544:	edd7 7a05 	vldr	s15, [r7, #20]
 8001548:	ee67 7a27 	vmul.f32	s15, s14, s15
 800154c:	ed97 7a18 	vldr	s14, [r7, #96]	@ 0x60
 8001550:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001554:	edc7 7a18 	vstr	s15, [r7, #96]	@ 0x60

         /* acc2 +=  b[numTaps-1] * x[n-numTaps-2] */
         acc2 += x2 * c0;
 8001558:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 800155c:	edd7 7a05 	vldr	s15, [r7, #20]
 8001560:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001564:	ed97 7a17 	vldr	s14, [r7, #92]	@ 0x5c
 8001568:	ee77 7a27 	vadd.f32	s15, s14, s15
 800156c:	edc7 7a17 	vstr	s15, [r7, #92]	@ 0x5c

         /* acc3 +=  b[numTaps-1] * x[n-numTaps-3] */
         acc3 += x3 * c0;
 8001570:	ed97 7a0e 	vldr	s14, [r7, #56]	@ 0x38
 8001574:	edd7 7a05 	vldr	s15, [r7, #20]
 8001578:	ee67 7a27 	vmul.f32	s15, s14, s15
 800157c:	ed97 7a16 	vldr	s14, [r7, #88]	@ 0x58
 8001580:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001584:	edc7 7a16 	vstr	s15, [r7, #88]	@ 0x58

         /* acc4 +=  b[numTaps-1] * x[n-numTaps-4] */
         acc4 += x4 * c0;
 8001588:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 800158c:	edd7 7a05 	vldr	s15, [r7, #20]
 8001590:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001594:	ed97 7a15 	vldr	s14, [r7, #84]	@ 0x54
 8001598:	ee77 7a27 	vadd.f32	s15, s14, s15
 800159c:	edc7 7a15 	vstr	s15, [r7, #84]	@ 0x54

         /* acc1 +=  b[numTaps-1] * x[n-numTaps-5] */
         acc5 += x5 * c0;
 80015a0:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 80015a4:	edd7 7a05 	vldr	s15, [r7, #20]
 80015a8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80015ac:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 80015b0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80015b4:	edc7 7a14 	vstr	s15, [r7, #80]	@ 0x50

         /* acc2 +=  b[numTaps-1] * x[n-numTaps-6] */
         acc6 += x6 * c0;
 80015b8:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 80015bc:	edd7 7a05 	vldr	s15, [r7, #20]
 80015c0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80015c4:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 80015c8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80015cc:	edc7 7a13 	vstr	s15, [r7, #76]	@ 0x4c

         /* acc3 +=  b[numTaps-1] * x[n-numTaps-7] */
         acc7 += x7 * c0;
 80015d0:	ed97 7a04 	vldr	s14, [r7, #16]
 80015d4:	edd7 7a05 	vldr	s15, [r7, #20]
 80015d8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80015dc:	ed97 7a12 	vldr	s14, [r7, #72]	@ 0x48
 80015e0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80015e4:	edc7 7a12 	vstr	s15, [r7, #72]	@ 0x48

         /* Read the b[numTaps-2] coefficient */
         c0 = *(pb++);
 80015e8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80015ea:	1d1a      	adds	r2, r3, #4
 80015ec:	66ba      	str	r2, [r7, #104]	@ 0x68
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	617b      	str	r3, [r7, #20]

         /* Read x[n-numTaps-4] sample */
         x0 = *(px++);
 80015f2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80015f4:	1d1a      	adds	r2, r3, #4
 80015f6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	647b      	str	r3, [r7, #68]	@ 0x44

         /* Perform the multiply-accumulate */
         acc0 += x1 * c0;
 80015fc:	ed97 7a10 	vldr	s14, [r7, #64]	@ 0x40
 8001600:	edd7 7a05 	vldr	s15, [r7, #20]
 8001604:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001608:	ed97 7a19 	vldr	s14, [r7, #100]	@ 0x64
 800160c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001610:	edc7 7a19 	vstr	s15, [r7, #100]	@ 0x64
         acc1 += x2 * c0;
 8001614:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 8001618:	edd7 7a05 	vldr	s15, [r7, #20]
 800161c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001620:	ed97 7a18 	vldr	s14, [r7, #96]	@ 0x60
 8001624:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001628:	edc7 7a18 	vstr	s15, [r7, #96]	@ 0x60
         acc2 += x3 * c0;
 800162c:	ed97 7a0e 	vldr	s14, [r7, #56]	@ 0x38
 8001630:	edd7 7a05 	vldr	s15, [r7, #20]
 8001634:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001638:	ed97 7a17 	vldr	s14, [r7, #92]	@ 0x5c
 800163c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001640:	edc7 7a17 	vstr	s15, [r7, #92]	@ 0x5c
         acc3 += x4 * c0;
 8001644:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 8001648:	edd7 7a05 	vldr	s15, [r7, #20]
 800164c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001650:	ed97 7a16 	vldr	s14, [r7, #88]	@ 0x58
 8001654:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001658:	edc7 7a16 	vstr	s15, [r7, #88]	@ 0x58
         acc4 += x5 * c0;
 800165c:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 8001660:	edd7 7a05 	vldr	s15, [r7, #20]
 8001664:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001668:	ed97 7a15 	vldr	s14, [r7, #84]	@ 0x54
 800166c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001670:	edc7 7a15 	vstr	s15, [r7, #84]	@ 0x54
         acc5 += x6 * c0;
 8001674:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 8001678:	edd7 7a05 	vldr	s15, [r7, #20]
 800167c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001680:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 8001684:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001688:	edc7 7a14 	vstr	s15, [r7, #80]	@ 0x50
         acc6 += x7 * c0;
 800168c:	ed97 7a04 	vldr	s14, [r7, #16]
 8001690:	edd7 7a05 	vldr	s15, [r7, #20]
 8001694:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001698:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 800169c:	ee77 7a27 	vadd.f32	s15, s14, s15
 80016a0:	edc7 7a13 	vstr	s15, [r7, #76]	@ 0x4c
         acc7 += x0 * c0;
 80016a4:	ed97 7a11 	vldr	s14, [r7, #68]	@ 0x44
 80016a8:	edd7 7a05 	vldr	s15, [r7, #20]
 80016ac:	ee67 7a27 	vmul.f32	s15, s14, s15
 80016b0:	ed97 7a12 	vldr	s14, [r7, #72]	@ 0x48
 80016b4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80016b8:	edc7 7a12 	vstr	s15, [r7, #72]	@ 0x48

         /* Read the b[numTaps-3] coefficient */
         c0 = *(pb++);
 80016bc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80016be:	1d1a      	adds	r2, r3, #4
 80016c0:	66ba      	str	r2, [r7, #104]	@ 0x68
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	617b      	str	r3, [r7, #20]

         /* Read x[n-numTaps-5] sample */
         x1 = *(px++);
 80016c6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80016c8:	1d1a      	adds	r2, r3, #4
 80016ca:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	643b      	str	r3, [r7, #64]	@ 0x40

         /* Perform the multiply-accumulates */
         acc0 += x2 * c0;
 80016d0:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 80016d4:	edd7 7a05 	vldr	s15, [r7, #20]
 80016d8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80016dc:	ed97 7a19 	vldr	s14, [r7, #100]	@ 0x64
 80016e0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80016e4:	edc7 7a19 	vstr	s15, [r7, #100]	@ 0x64
         acc1 += x3 * c0;
 80016e8:	ed97 7a0e 	vldr	s14, [r7, #56]	@ 0x38
 80016ec:	edd7 7a05 	vldr	s15, [r7, #20]
 80016f0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80016f4:	ed97 7a18 	vldr	s14, [r7, #96]	@ 0x60
 80016f8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80016fc:	edc7 7a18 	vstr	s15, [r7, #96]	@ 0x60
         acc2 += x4 * c0;
 8001700:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 8001704:	edd7 7a05 	vldr	s15, [r7, #20]
 8001708:	ee67 7a27 	vmul.f32	s15, s14, s15
 800170c:	ed97 7a17 	vldr	s14, [r7, #92]	@ 0x5c
 8001710:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001714:	edc7 7a17 	vstr	s15, [r7, #92]	@ 0x5c
         acc3 += x5 * c0;
 8001718:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 800171c:	edd7 7a05 	vldr	s15, [r7, #20]
 8001720:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001724:	ed97 7a16 	vldr	s14, [r7, #88]	@ 0x58
 8001728:	ee77 7a27 	vadd.f32	s15, s14, s15
 800172c:	edc7 7a16 	vstr	s15, [r7, #88]	@ 0x58
         acc4 += x6 * c0;
 8001730:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 8001734:	edd7 7a05 	vldr	s15, [r7, #20]
 8001738:	ee67 7a27 	vmul.f32	s15, s14, s15
 800173c:	ed97 7a15 	vldr	s14, [r7, #84]	@ 0x54
 8001740:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001744:	edc7 7a15 	vstr	s15, [r7, #84]	@ 0x54
         acc5 += x7 * c0;
 8001748:	ed97 7a04 	vldr	s14, [r7, #16]
 800174c:	edd7 7a05 	vldr	s15, [r7, #20]
 8001750:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001754:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 8001758:	ee77 7a27 	vadd.f32	s15, s14, s15
 800175c:	edc7 7a14 	vstr	s15, [r7, #80]	@ 0x50
         acc6 += x0 * c0;
 8001760:	ed97 7a11 	vldr	s14, [r7, #68]	@ 0x44
 8001764:	edd7 7a05 	vldr	s15, [r7, #20]
 8001768:	ee67 7a27 	vmul.f32	s15, s14, s15
 800176c:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 8001770:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001774:	edc7 7a13 	vstr	s15, [r7, #76]	@ 0x4c
         acc7 += x1 * c0;
 8001778:	ed97 7a10 	vldr	s14, [r7, #64]	@ 0x40
 800177c:	edd7 7a05 	vldr	s15, [r7, #20]
 8001780:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001784:	ed97 7a12 	vldr	s14, [r7, #72]	@ 0x48
 8001788:	ee77 7a27 	vadd.f32	s15, s14, s15
 800178c:	edc7 7a12 	vstr	s15, [r7, #72]	@ 0x48

         /* Read the b[numTaps-4] coefficient */
         c0 = *(pb++);
 8001790:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001792:	1d1a      	adds	r2, r3, #4
 8001794:	66ba      	str	r2, [r7, #104]	@ 0x68
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	617b      	str	r3, [r7, #20]

         /* Read x[n-numTaps-6] sample */
         x2 = *(px++);
 800179a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800179c:	1d1a      	adds	r2, r3, #4
 800179e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	63fb      	str	r3, [r7, #60]	@ 0x3c

         /* Perform the multiply-accumulates */
         acc0 += x3 * c0;
 80017a4:	ed97 7a0e 	vldr	s14, [r7, #56]	@ 0x38
 80017a8:	edd7 7a05 	vldr	s15, [r7, #20]
 80017ac:	ee67 7a27 	vmul.f32	s15, s14, s15
 80017b0:	ed97 7a19 	vldr	s14, [r7, #100]	@ 0x64
 80017b4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80017b8:	edc7 7a19 	vstr	s15, [r7, #100]	@ 0x64
         acc1 += x4 * c0;
 80017bc:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 80017c0:	edd7 7a05 	vldr	s15, [r7, #20]
 80017c4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80017c8:	ed97 7a18 	vldr	s14, [r7, #96]	@ 0x60
 80017cc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80017d0:	edc7 7a18 	vstr	s15, [r7, #96]	@ 0x60
         acc2 += x5 * c0;
 80017d4:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 80017d8:	edd7 7a05 	vldr	s15, [r7, #20]
 80017dc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80017e0:	ed97 7a17 	vldr	s14, [r7, #92]	@ 0x5c
 80017e4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80017e8:	edc7 7a17 	vstr	s15, [r7, #92]	@ 0x5c
         acc3 += x6 * c0;
 80017ec:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 80017f0:	edd7 7a05 	vldr	s15, [r7, #20]
 80017f4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80017f8:	ed97 7a16 	vldr	s14, [r7, #88]	@ 0x58
 80017fc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001800:	edc7 7a16 	vstr	s15, [r7, #88]	@ 0x58
         acc4 += x7 * c0;
 8001804:	ed97 7a04 	vldr	s14, [r7, #16]
 8001808:	edd7 7a05 	vldr	s15, [r7, #20]
 800180c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001810:	ed97 7a15 	vldr	s14, [r7, #84]	@ 0x54
 8001814:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001818:	edc7 7a15 	vstr	s15, [r7, #84]	@ 0x54
         acc5 += x0 * c0;
 800181c:	ed97 7a11 	vldr	s14, [r7, #68]	@ 0x44
 8001820:	edd7 7a05 	vldr	s15, [r7, #20]
 8001824:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001828:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 800182c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001830:	edc7 7a14 	vstr	s15, [r7, #80]	@ 0x50
         acc6 += x1 * c0;
 8001834:	ed97 7a10 	vldr	s14, [r7, #64]	@ 0x40
 8001838:	edd7 7a05 	vldr	s15, [r7, #20]
 800183c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001840:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 8001844:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001848:	edc7 7a13 	vstr	s15, [r7, #76]	@ 0x4c
         acc7 += x2 * c0;
 800184c:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 8001850:	edd7 7a05 	vldr	s15, [r7, #20]
 8001854:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001858:	ed97 7a12 	vldr	s14, [r7, #72]	@ 0x48
 800185c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001860:	edc7 7a12 	vstr	s15, [r7, #72]	@ 0x48

         /* Read the b[numTaps-4] coefficient */
         c0 = *(pb++);
 8001864:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001866:	1d1a      	adds	r2, r3, #4
 8001868:	66ba      	str	r2, [r7, #104]	@ 0x68
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	617b      	str	r3, [r7, #20]

         /* Read x[n-numTaps-6] sample */
         x3 = *(px++);
 800186e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001870:	1d1a      	adds	r2, r3, #4
 8001872:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	63bb      	str	r3, [r7, #56]	@ 0x38
         /* Perform the multiply-accumulates */
         acc0 += x4 * c0;
 8001878:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 800187c:	edd7 7a05 	vldr	s15, [r7, #20]
 8001880:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001884:	ed97 7a19 	vldr	s14, [r7, #100]	@ 0x64
 8001888:	ee77 7a27 	vadd.f32	s15, s14, s15
 800188c:	edc7 7a19 	vstr	s15, [r7, #100]	@ 0x64
         acc1 += x5 * c0;
 8001890:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 8001894:	edd7 7a05 	vldr	s15, [r7, #20]
 8001898:	ee67 7a27 	vmul.f32	s15, s14, s15
 800189c:	ed97 7a18 	vldr	s14, [r7, #96]	@ 0x60
 80018a0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80018a4:	edc7 7a18 	vstr	s15, [r7, #96]	@ 0x60
         acc2 += x6 * c0;
 80018a8:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 80018ac:	edd7 7a05 	vldr	s15, [r7, #20]
 80018b0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80018b4:	ed97 7a17 	vldr	s14, [r7, #92]	@ 0x5c
 80018b8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80018bc:	edc7 7a17 	vstr	s15, [r7, #92]	@ 0x5c
         acc3 += x7 * c0;
 80018c0:	ed97 7a04 	vldr	s14, [r7, #16]
 80018c4:	edd7 7a05 	vldr	s15, [r7, #20]
 80018c8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80018cc:	ed97 7a16 	vldr	s14, [r7, #88]	@ 0x58
 80018d0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80018d4:	edc7 7a16 	vstr	s15, [r7, #88]	@ 0x58
         acc4 += x0 * c0;
 80018d8:	ed97 7a11 	vldr	s14, [r7, #68]	@ 0x44
 80018dc:	edd7 7a05 	vldr	s15, [r7, #20]
 80018e0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80018e4:	ed97 7a15 	vldr	s14, [r7, #84]	@ 0x54
 80018e8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80018ec:	edc7 7a15 	vstr	s15, [r7, #84]	@ 0x54
         acc5 += x1 * c0;
 80018f0:	ed97 7a10 	vldr	s14, [r7, #64]	@ 0x40
 80018f4:	edd7 7a05 	vldr	s15, [r7, #20]
 80018f8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80018fc:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 8001900:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001904:	edc7 7a14 	vstr	s15, [r7, #80]	@ 0x50
         acc6 += x2 * c0;
 8001908:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 800190c:	edd7 7a05 	vldr	s15, [r7, #20]
 8001910:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001914:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 8001918:	ee77 7a27 	vadd.f32	s15, s14, s15
 800191c:	edc7 7a13 	vstr	s15, [r7, #76]	@ 0x4c
         acc7 += x3 * c0;
 8001920:	ed97 7a0e 	vldr	s14, [r7, #56]	@ 0x38
 8001924:	edd7 7a05 	vldr	s15, [r7, #20]
 8001928:	ee67 7a27 	vmul.f32	s15, s14, s15
 800192c:	ed97 7a12 	vldr	s14, [r7, #72]	@ 0x48
 8001930:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001934:	edc7 7a12 	vstr	s15, [r7, #72]	@ 0x48

         /* Read the b[numTaps-4] coefficient */
         c0 = *(pb++);
 8001938:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800193a:	1d1a      	adds	r2, r3, #4
 800193c:	66ba      	str	r2, [r7, #104]	@ 0x68
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	617b      	str	r3, [r7, #20]

         /* Read x[n-numTaps-6] sample */
         x4 = *(px++);
 8001942:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001944:	1d1a      	adds	r2, r3, #4
 8001946:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	637b      	str	r3, [r7, #52]	@ 0x34

         /* Perform the multiply-accumulates */
         acc0 += x5 * c0;
 800194c:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 8001950:	edd7 7a05 	vldr	s15, [r7, #20]
 8001954:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001958:	ed97 7a19 	vldr	s14, [r7, #100]	@ 0x64
 800195c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001960:	edc7 7a19 	vstr	s15, [r7, #100]	@ 0x64
         acc1 += x6 * c0;
 8001964:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 8001968:	edd7 7a05 	vldr	s15, [r7, #20]
 800196c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001970:	ed97 7a18 	vldr	s14, [r7, #96]	@ 0x60
 8001974:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001978:	edc7 7a18 	vstr	s15, [r7, #96]	@ 0x60
         acc2 += x7 * c0;
 800197c:	ed97 7a04 	vldr	s14, [r7, #16]
 8001980:	edd7 7a05 	vldr	s15, [r7, #20]
 8001984:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001988:	ed97 7a17 	vldr	s14, [r7, #92]	@ 0x5c
 800198c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001990:	edc7 7a17 	vstr	s15, [r7, #92]	@ 0x5c
         acc3 += x0 * c0;
 8001994:	ed97 7a11 	vldr	s14, [r7, #68]	@ 0x44
 8001998:	edd7 7a05 	vldr	s15, [r7, #20]
 800199c:	ee67 7a27 	vmul.f32	s15, s14, s15
 80019a0:	ed97 7a16 	vldr	s14, [r7, #88]	@ 0x58
 80019a4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80019a8:	edc7 7a16 	vstr	s15, [r7, #88]	@ 0x58
         acc4 += x1 * c0;
 80019ac:	ed97 7a10 	vldr	s14, [r7, #64]	@ 0x40
 80019b0:	edd7 7a05 	vldr	s15, [r7, #20]
 80019b4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80019b8:	ed97 7a15 	vldr	s14, [r7, #84]	@ 0x54
 80019bc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80019c0:	edc7 7a15 	vstr	s15, [r7, #84]	@ 0x54
         acc5 += x2 * c0;
 80019c4:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 80019c8:	edd7 7a05 	vldr	s15, [r7, #20]
 80019cc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80019d0:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 80019d4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80019d8:	edc7 7a14 	vstr	s15, [r7, #80]	@ 0x50
         acc6 += x3 * c0;
 80019dc:	ed97 7a0e 	vldr	s14, [r7, #56]	@ 0x38
 80019e0:	edd7 7a05 	vldr	s15, [r7, #20]
 80019e4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80019e8:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 80019ec:	ee77 7a27 	vadd.f32	s15, s14, s15
 80019f0:	edc7 7a13 	vstr	s15, [r7, #76]	@ 0x4c
         acc7 += x4 * c0;
 80019f4:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 80019f8:	edd7 7a05 	vldr	s15, [r7, #20]
 80019fc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a00:	ed97 7a12 	vldr	s14, [r7, #72]	@ 0x48
 8001a04:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a08:	edc7 7a12 	vstr	s15, [r7, #72]	@ 0x48

         /* Read the b[numTaps-4] coefficient */
         c0 = *(pb++);
 8001a0c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001a0e:	1d1a      	adds	r2, r3, #4
 8001a10:	66ba      	str	r2, [r7, #104]	@ 0x68
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	617b      	str	r3, [r7, #20]

         /* Read x[n-numTaps-6] sample */
         x5 = *(px++);
 8001a16:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001a18:	1d1a      	adds	r2, r3, #4
 8001a1a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	633b      	str	r3, [r7, #48]	@ 0x30

         /* Perform the multiply-accumulates */
         acc0 += x6 * c0;
 8001a20:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 8001a24:	edd7 7a05 	vldr	s15, [r7, #20]
 8001a28:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a2c:	ed97 7a19 	vldr	s14, [r7, #100]	@ 0x64
 8001a30:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a34:	edc7 7a19 	vstr	s15, [r7, #100]	@ 0x64
         acc1 += x7 * c0;
 8001a38:	ed97 7a04 	vldr	s14, [r7, #16]
 8001a3c:	edd7 7a05 	vldr	s15, [r7, #20]
 8001a40:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a44:	ed97 7a18 	vldr	s14, [r7, #96]	@ 0x60
 8001a48:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a4c:	edc7 7a18 	vstr	s15, [r7, #96]	@ 0x60
         acc2 += x0 * c0;
 8001a50:	ed97 7a11 	vldr	s14, [r7, #68]	@ 0x44
 8001a54:	edd7 7a05 	vldr	s15, [r7, #20]
 8001a58:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a5c:	ed97 7a17 	vldr	s14, [r7, #92]	@ 0x5c
 8001a60:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a64:	edc7 7a17 	vstr	s15, [r7, #92]	@ 0x5c
         acc3 += x1 * c0;
 8001a68:	ed97 7a10 	vldr	s14, [r7, #64]	@ 0x40
 8001a6c:	edd7 7a05 	vldr	s15, [r7, #20]
 8001a70:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a74:	ed97 7a16 	vldr	s14, [r7, #88]	@ 0x58
 8001a78:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a7c:	edc7 7a16 	vstr	s15, [r7, #88]	@ 0x58
         acc4 += x2 * c0;
 8001a80:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 8001a84:	edd7 7a05 	vldr	s15, [r7, #20]
 8001a88:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a8c:	ed97 7a15 	vldr	s14, [r7, #84]	@ 0x54
 8001a90:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a94:	edc7 7a15 	vstr	s15, [r7, #84]	@ 0x54
         acc5 += x3 * c0;
 8001a98:	ed97 7a0e 	vldr	s14, [r7, #56]	@ 0x38
 8001a9c:	edd7 7a05 	vldr	s15, [r7, #20]
 8001aa0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001aa4:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 8001aa8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001aac:	edc7 7a14 	vstr	s15, [r7, #80]	@ 0x50
         acc6 += x4 * c0;
 8001ab0:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 8001ab4:	edd7 7a05 	vldr	s15, [r7, #20]
 8001ab8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001abc:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 8001ac0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ac4:	edc7 7a13 	vstr	s15, [r7, #76]	@ 0x4c
         acc7 += x5 * c0;
 8001ac8:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 8001acc:	edd7 7a05 	vldr	s15, [r7, #20]
 8001ad0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ad4:	ed97 7a12 	vldr	s14, [r7, #72]	@ 0x48
 8001ad8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001adc:	edc7 7a12 	vstr	s15, [r7, #72]	@ 0x48

         /* Read the b[numTaps-4] coefficient */
         c0 = *(pb++);
 8001ae0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001ae2:	1d1a      	adds	r2, r3, #4
 8001ae4:	66ba      	str	r2, [r7, #104]	@ 0x68
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	617b      	str	r3, [r7, #20]

         /* Read x[n-numTaps-6] sample */
         x6 = *(px++);
 8001aea:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001aec:	1d1a      	adds	r2, r3, #4
 8001aee:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	62fb      	str	r3, [r7, #44]	@ 0x2c

         /* Perform the multiply-accumulates */
         acc0 += x7 * c0;
 8001af4:	ed97 7a04 	vldr	s14, [r7, #16]
 8001af8:	edd7 7a05 	vldr	s15, [r7, #20]
 8001afc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b00:	ed97 7a19 	vldr	s14, [r7, #100]	@ 0x64
 8001b04:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b08:	edc7 7a19 	vstr	s15, [r7, #100]	@ 0x64
         acc1 += x0 * c0;
 8001b0c:	ed97 7a11 	vldr	s14, [r7, #68]	@ 0x44
 8001b10:	edd7 7a05 	vldr	s15, [r7, #20]
 8001b14:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b18:	ed97 7a18 	vldr	s14, [r7, #96]	@ 0x60
 8001b1c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b20:	edc7 7a18 	vstr	s15, [r7, #96]	@ 0x60
         acc2 += x1 * c0;
 8001b24:	ed97 7a10 	vldr	s14, [r7, #64]	@ 0x40
 8001b28:	edd7 7a05 	vldr	s15, [r7, #20]
 8001b2c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b30:	ed97 7a17 	vldr	s14, [r7, #92]	@ 0x5c
 8001b34:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b38:	edc7 7a17 	vstr	s15, [r7, #92]	@ 0x5c
         acc3 += x2 * c0;
 8001b3c:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 8001b40:	edd7 7a05 	vldr	s15, [r7, #20]
 8001b44:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b48:	ed97 7a16 	vldr	s14, [r7, #88]	@ 0x58
 8001b4c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b50:	edc7 7a16 	vstr	s15, [r7, #88]	@ 0x58
         acc4 += x3 * c0;
 8001b54:	ed97 7a0e 	vldr	s14, [r7, #56]	@ 0x38
 8001b58:	edd7 7a05 	vldr	s15, [r7, #20]
 8001b5c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b60:	ed97 7a15 	vldr	s14, [r7, #84]	@ 0x54
 8001b64:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b68:	edc7 7a15 	vstr	s15, [r7, #84]	@ 0x54
         acc5 += x4 * c0;
 8001b6c:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 8001b70:	edd7 7a05 	vldr	s15, [r7, #20]
 8001b74:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b78:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 8001b7c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b80:	edc7 7a14 	vstr	s15, [r7, #80]	@ 0x50
         acc6 += x5 * c0;
 8001b84:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 8001b88:	edd7 7a05 	vldr	s15, [r7, #20]
 8001b8c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b90:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 8001b94:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b98:	edc7 7a13 	vstr	s15, [r7, #76]	@ 0x4c
         acc7 += x6 * c0;
 8001b9c:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 8001ba0:	edd7 7a05 	vldr	s15, [r7, #20]
 8001ba4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ba8:	ed97 7a12 	vldr	s14, [r7, #72]	@ 0x48
 8001bac:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001bb0:	edc7 7a12 	vstr	s15, [r7, #72]	@ 0x48

         tapCnt--;
 8001bb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bb6:	3b01      	subs	r3, #1
 8001bb8:	627b      	str	r3, [r7, #36]	@ 0x24
      while(tapCnt > 0u)
 8001bba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	f47f aca9 	bne.w	8001514 <arm_fir_f32+0x142>
      }

      /* If the filter length is not a multiple of 8, compute the remaining filter taps */
      tapCnt = numTaps % 0x8u;
 8001bc2:	69bb      	ldr	r3, [r7, #24]
 8001bc4:	f003 0307 	and.w	r3, r3, #7
 8001bc8:	627b      	str	r3, [r7, #36]	@ 0x24

      while(tapCnt > 0u)
 8001bca:	e07a      	b.n	8001cc2 <arm_fir_f32+0x8f0>
      {
         /* Read coefficients */
         c0 = *(pb++);
 8001bcc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001bce:	1d1a      	adds	r2, r3, #4
 8001bd0:	66ba      	str	r2, [r7, #104]	@ 0x68
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	617b      	str	r3, [r7, #20]

         /* Fetch 1 state variable */
         x7 = *(px++);
 8001bd6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001bd8:	1d1a      	adds	r2, r3, #4
 8001bda:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	613b      	str	r3, [r7, #16]

         /* Perform the multiply-accumulates */
         acc0 += x0 * c0;
 8001be0:	ed97 7a11 	vldr	s14, [r7, #68]	@ 0x44
 8001be4:	edd7 7a05 	vldr	s15, [r7, #20]
 8001be8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001bec:	ed97 7a19 	vldr	s14, [r7, #100]	@ 0x64
 8001bf0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001bf4:	edc7 7a19 	vstr	s15, [r7, #100]	@ 0x64
         acc1 += x1 * c0;
 8001bf8:	ed97 7a10 	vldr	s14, [r7, #64]	@ 0x40
 8001bfc:	edd7 7a05 	vldr	s15, [r7, #20]
 8001c00:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001c04:	ed97 7a18 	vldr	s14, [r7, #96]	@ 0x60
 8001c08:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c0c:	edc7 7a18 	vstr	s15, [r7, #96]	@ 0x60
         acc2 += x2 * c0;
 8001c10:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 8001c14:	edd7 7a05 	vldr	s15, [r7, #20]
 8001c18:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001c1c:	ed97 7a17 	vldr	s14, [r7, #92]	@ 0x5c
 8001c20:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c24:	edc7 7a17 	vstr	s15, [r7, #92]	@ 0x5c
         acc3 += x3 * c0;
 8001c28:	ed97 7a0e 	vldr	s14, [r7, #56]	@ 0x38
 8001c2c:	edd7 7a05 	vldr	s15, [r7, #20]
 8001c30:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001c34:	ed97 7a16 	vldr	s14, [r7, #88]	@ 0x58
 8001c38:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c3c:	edc7 7a16 	vstr	s15, [r7, #88]	@ 0x58
         acc4 += x4 * c0;
 8001c40:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 8001c44:	edd7 7a05 	vldr	s15, [r7, #20]
 8001c48:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001c4c:	ed97 7a15 	vldr	s14, [r7, #84]	@ 0x54
 8001c50:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c54:	edc7 7a15 	vstr	s15, [r7, #84]	@ 0x54
         acc5 += x5 * c0;
 8001c58:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 8001c5c:	edd7 7a05 	vldr	s15, [r7, #20]
 8001c60:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001c64:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 8001c68:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c6c:	edc7 7a14 	vstr	s15, [r7, #80]	@ 0x50
         acc6 += x6 * c0;
 8001c70:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 8001c74:	edd7 7a05 	vldr	s15, [r7, #20]
 8001c78:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001c7c:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 8001c80:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c84:	edc7 7a13 	vstr	s15, [r7, #76]	@ 0x4c
         acc7 += x7 * c0;
 8001c88:	ed97 7a04 	vldr	s14, [r7, #16]
 8001c8c:	edd7 7a05 	vldr	s15, [r7, #20]
 8001c90:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001c94:	ed97 7a12 	vldr	s14, [r7, #72]	@ 0x48
 8001c98:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c9c:	edc7 7a12 	vstr	s15, [r7, #72]	@ 0x48

         /* Reuse the present sample states for next sample */
         x0 = x1;
 8001ca0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001ca2:	647b      	str	r3, [r7, #68]	@ 0x44
         x1 = x2;
 8001ca4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001ca6:	643b      	str	r3, [r7, #64]	@ 0x40
         x2 = x3;
 8001ca8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001caa:	63fb      	str	r3, [r7, #60]	@ 0x3c
         x3 = x4;
 8001cac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001cae:	63bb      	str	r3, [r7, #56]	@ 0x38
         x4 = x5;
 8001cb0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001cb2:	637b      	str	r3, [r7, #52]	@ 0x34
         x5 = x6;
 8001cb4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001cb6:	633b      	str	r3, [r7, #48]	@ 0x30
         x6 = x7;
 8001cb8:	693b      	ldr	r3, [r7, #16]
 8001cba:	62fb      	str	r3, [r7, #44]	@ 0x2c

         /* Decrement the loop counter */
         tapCnt--;
 8001cbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cbe:	3b01      	subs	r3, #1
 8001cc0:	627b      	str	r3, [r7, #36]	@ 0x24
      while(tapCnt > 0u)
 8001cc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d181      	bne.n	8001bcc <arm_fir_f32+0x7fa>
      }

      /* Advance the state pointer by 8 to process the next group of 8 samples */
      pState = pState + 8;
 8001cc8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001cca:	3320      	adds	r3, #32
 8001ccc:	677b      	str	r3, [r7, #116]	@ 0x74

      /* The results in the 8 accumulators, store in the destination buffer. */
      *pDst++ = acc0;
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	1d1a      	adds	r2, r3, #4
 8001cd2:	607a      	str	r2, [r7, #4]
 8001cd4:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8001cd6:	601a      	str	r2, [r3, #0]
      *pDst++ = acc1;
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	1d1a      	adds	r2, r3, #4
 8001cdc:	607a      	str	r2, [r7, #4]
 8001cde:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8001ce0:	601a      	str	r2, [r3, #0]
      *pDst++ = acc2;
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	1d1a      	adds	r2, r3, #4
 8001ce6:	607a      	str	r2, [r7, #4]
 8001ce8:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8001cea:	601a      	str	r2, [r3, #0]
      *pDst++ = acc3;
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	1d1a      	adds	r2, r3, #4
 8001cf0:	607a      	str	r2, [r7, #4]
 8001cf2:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8001cf4:	601a      	str	r2, [r3, #0]
      *pDst++ = acc4;
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	1d1a      	adds	r2, r3, #4
 8001cfa:	607a      	str	r2, [r7, #4]
 8001cfc:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8001cfe:	601a      	str	r2, [r3, #0]
      *pDst++ = acc5;
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	1d1a      	adds	r2, r3, #4
 8001d04:	607a      	str	r2, [r7, #4]
 8001d06:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8001d08:	601a      	str	r2, [r3, #0]
      *pDst++ = acc6;
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	1d1a      	adds	r2, r3, #4
 8001d0e:	607a      	str	r2, [r7, #4]
 8001d10:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001d12:	601a      	str	r2, [r3, #0]
      *pDst++ = acc7;
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	1d1a      	adds	r2, r3, #4
 8001d18:	607a      	str	r2, [r7, #4]
 8001d1a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8001d1c:	601a      	str	r2, [r3, #0]

      blkCnt--;
 8001d1e:	6a3b      	ldr	r3, [r7, #32]
 8001d20:	3b01      	subs	r3, #1
 8001d22:	623b      	str	r3, [r7, #32]
   while(blkCnt > 0u)
 8001d24:	6a3b      	ldr	r3, [r7, #32]
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	f47f ab71 	bne.w	800140e <arm_fir_f32+0x3c>
   }

   /* If the blockSize is not a multiple of 8, compute any remaining output samples here.
   ** No loop unrolling is used. */
   blkCnt = blockSize % 0x8u;
 8001d2c:	683b      	ldr	r3, [r7, #0]
 8001d2e:	f003 0307 	and.w	r3, r3, #7
 8001d32:	623b      	str	r3, [r7, #32]

   while(blkCnt > 0u)
 8001d34:	e033      	b.n	8001d9e <arm_fir_f32+0x9cc>
   {
      /* Copy one sample at a time into state buffer */
      *pStateCurnt++ = *pSrc++;
 8001d36:	68ba      	ldr	r2, [r7, #8]
 8001d38:	1d13      	adds	r3, r2, #4
 8001d3a:	60bb      	str	r3, [r7, #8]
 8001d3c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001d3e:	1d19      	adds	r1, r3, #4
 8001d40:	6739      	str	r1, [r7, #112]	@ 0x70
 8001d42:	6812      	ldr	r2, [r2, #0]
 8001d44:	601a      	str	r2, [r3, #0]

      /* Set the accumulator to zero */
      acc0 = 0.0f;
 8001d46:	f04f 0300 	mov.w	r3, #0
 8001d4a:	667b      	str	r3, [r7, #100]	@ 0x64

      /* Initialize state pointer */
      px = pState;
 8001d4c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001d4e:	66fb      	str	r3, [r7, #108]	@ 0x6c

      /* Initialize Coefficient pointer */
      pb = (pCoeffs);
 8001d50:	69fb      	ldr	r3, [r7, #28]
 8001d52:	66bb      	str	r3, [r7, #104]	@ 0x68

      i = numTaps;
 8001d54:	69bb      	ldr	r3, [r7, #24]
 8001d56:	62bb      	str	r3, [r7, #40]	@ 0x28

      /* Perform the multiply-accumulates */
      do
      {
         acc0 += *px++ * *pb++;
 8001d58:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001d5a:	1d1a      	adds	r2, r3, #4
 8001d5c:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8001d5e:	ed93 7a00 	vldr	s14, [r3]
 8001d62:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001d64:	1d1a      	adds	r2, r3, #4
 8001d66:	66ba      	str	r2, [r7, #104]	@ 0x68
 8001d68:	edd3 7a00 	vldr	s15, [r3]
 8001d6c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001d70:	ed97 7a19 	vldr	s14, [r7, #100]	@ 0x64
 8001d74:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d78:	edc7 7a19 	vstr	s15, [r7, #100]	@ 0x64
         i--;
 8001d7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001d7e:	3b01      	subs	r3, #1
 8001d80:	62bb      	str	r3, [r7, #40]	@ 0x28

      } while(i > 0u);
 8001d82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d1e7      	bne.n	8001d58 <arm_fir_f32+0x986>

      /* The result is store in the destination buffer. */
      *pDst++ = acc0;
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	1d1a      	adds	r2, r3, #4
 8001d8c:	607a      	str	r2, [r7, #4]
 8001d8e:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8001d90:	601a      	str	r2, [r3, #0]

      /* Advance state pointer by 1 for the next sample */
      pState = pState + 1;
 8001d92:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001d94:	3304      	adds	r3, #4
 8001d96:	677b      	str	r3, [r7, #116]	@ 0x74

      blkCnt--;
 8001d98:	6a3b      	ldr	r3, [r7, #32]
 8001d9a:	3b01      	subs	r3, #1
 8001d9c:	623b      	str	r3, [r7, #32]
   while(blkCnt > 0u)
 8001d9e:	6a3b      	ldr	r3, [r7, #32]
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d1c8      	bne.n	8001d36 <arm_fir_f32+0x964>
   /* Processing is complete.
   ** Now copy the last numTaps - 1 samples to the start of the state buffer.
   ** This prepares the state buffer for the next function call. */

   /* Points to the start of the state buffer */
   pStateCurnt = S->pState;
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	685b      	ldr	r3, [r3, #4]
 8001da8:	673b      	str	r3, [r7, #112]	@ 0x70

   tapCnt = (numTaps - 1u) >> 2u;
 8001daa:	69bb      	ldr	r3, [r7, #24]
 8001dac:	3b01      	subs	r3, #1
 8001dae:	089b      	lsrs	r3, r3, #2
 8001db0:	627b      	str	r3, [r7, #36]	@ 0x24

   /* copy data */
   while(tapCnt > 0u)
 8001db2:	e022      	b.n	8001dfa <arm_fir_f32+0xa28>
   {
      *pStateCurnt++ = *pState++;
 8001db4:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8001db6:	1d13      	adds	r3, r2, #4
 8001db8:	677b      	str	r3, [r7, #116]	@ 0x74
 8001dba:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001dbc:	1d19      	adds	r1, r3, #4
 8001dbe:	6739      	str	r1, [r7, #112]	@ 0x70
 8001dc0:	6812      	ldr	r2, [r2, #0]
 8001dc2:	601a      	str	r2, [r3, #0]
      *pStateCurnt++ = *pState++;
 8001dc4:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8001dc6:	1d13      	adds	r3, r2, #4
 8001dc8:	677b      	str	r3, [r7, #116]	@ 0x74
 8001dca:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001dcc:	1d19      	adds	r1, r3, #4
 8001dce:	6739      	str	r1, [r7, #112]	@ 0x70
 8001dd0:	6812      	ldr	r2, [r2, #0]
 8001dd2:	601a      	str	r2, [r3, #0]
      *pStateCurnt++ = *pState++;
 8001dd4:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8001dd6:	1d13      	adds	r3, r2, #4
 8001dd8:	677b      	str	r3, [r7, #116]	@ 0x74
 8001dda:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001ddc:	1d19      	adds	r1, r3, #4
 8001dde:	6739      	str	r1, [r7, #112]	@ 0x70
 8001de0:	6812      	ldr	r2, [r2, #0]
 8001de2:	601a      	str	r2, [r3, #0]
      *pStateCurnt++ = *pState++;
 8001de4:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8001de6:	1d13      	adds	r3, r2, #4
 8001de8:	677b      	str	r3, [r7, #116]	@ 0x74
 8001dea:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001dec:	1d19      	adds	r1, r3, #4
 8001dee:	6739      	str	r1, [r7, #112]	@ 0x70
 8001df0:	6812      	ldr	r2, [r2, #0]
 8001df2:	601a      	str	r2, [r3, #0]

      /* Decrement the loop counter */
      tapCnt--;
 8001df4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001df6:	3b01      	subs	r3, #1
 8001df8:	627b      	str	r3, [r7, #36]	@ 0x24
   while(tapCnt > 0u)
 8001dfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d1d9      	bne.n	8001db4 <arm_fir_f32+0x9e2>
   }

   /* Calculate remaining number of copies */
   tapCnt = (numTaps - 1u) % 0x4u;
 8001e00:	69bb      	ldr	r3, [r7, #24]
 8001e02:	3b01      	subs	r3, #1
 8001e04:	f003 0303 	and.w	r3, r3, #3
 8001e08:	627b      	str	r3, [r7, #36]	@ 0x24

   /* Copy the remaining q31_t data */
   while(tapCnt > 0u)
 8001e0a:	e00a      	b.n	8001e22 <arm_fir_f32+0xa50>
   {
      *pStateCurnt++ = *pState++;
 8001e0c:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8001e0e:	1d13      	adds	r3, r2, #4
 8001e10:	677b      	str	r3, [r7, #116]	@ 0x74
 8001e12:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001e14:	1d19      	adds	r1, r3, #4
 8001e16:	6739      	str	r1, [r7, #112]	@ 0x70
 8001e18:	6812      	ldr	r2, [r2, #0]
 8001e1a:	601a      	str	r2, [r3, #0]

      /* Decrement the loop counter */
      tapCnt--;
 8001e1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e1e:	3b01      	subs	r3, #1
 8001e20:	627b      	str	r3, [r7, #36]	@ 0x24
   while(tapCnt > 0u)
 8001e22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d1f1      	bne.n	8001e0c <arm_fir_f32+0xa3a>
   }
}
 8001e28:	bf00      	nop
 8001e2a:	bf00      	nop
 8001e2c:	377c      	adds	r7, #124	@ 0x7c
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e34:	4770      	bx	lr
	...

08001e38 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	b08a      	sub	sp, #40	@ 0x28
 8001e3c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001e3e:	f001 f80b 	bl	8002e58 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001e42:	f000 f8a5 	bl	8001f90 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001e46:	f000 f9a3 	bl	8002190 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8001e4a:	f000 f971 	bl	8002130 <MX_USART1_UART_Init>
  MX_I2C1_Init();
 8001e4e:	f000 f8f1 	bl	8002034 <MX_I2C1_Init>
  MX_SPI1_Init();
 8001e52:	f000 f92f 	bl	80020b4 <MX_SPI1_Init>
  arm_fir_instance_f32 S;
  arm_status status;
  float32_t  *inputF32, *outputF32;

  /* Initialize input and output buffer pointers */
  inputF32 = &testInput_f32_1kHz_15kHz[0];
 8001e56:	4b3f      	ldr	r3, [pc, #252]	@ (8001f54 <main+0x11c>)
 8001e58:	613b      	str	r3, [r7, #16]
  outputF32 = &testOutput[0];
 8001e5a:	4b3f      	ldr	r3, [pc, #252]	@ (8001f58 <main+0x120>)
 8001e5c:	60fb      	str	r3, [r7, #12]

  /* Call FIR init function to initialize the instance structure. */
  arm_fir_init_f32(&S, NUM_TAPS, (float32_t *)&firCoeffs32[0], &firStateF32[0], blockSize);
 8001e5e:	4b3f      	ldr	r3, [pc, #252]	@ (8001f5c <main+0x124>)
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	4638      	mov	r0, r7
 8001e64:	9300      	str	r3, [sp, #0]
 8001e66:	4b3e      	ldr	r3, [pc, #248]	@ (8001f60 <main+0x128>)
 8001e68:	4a3e      	ldr	r2, [pc, #248]	@ (8001f64 <main+0x12c>)
 8001e6a:	211d      	movs	r1, #29
 8001e6c:	f7ff fa92 	bl	8001394 <arm_fir_init_f32>

    /* ----------------------------------------------------------------------
    ** Call the FIR process function for every blockSize samples
    ** ------------------------------------------------------------------- */

  for(i=0; i < numBlocks; i++)
 8001e70:	2300      	movs	r3, #0
 8001e72:	61fb      	str	r3, [r7, #28]
 8001e74:	e017      	b.n	8001ea6 <main+0x6e>
  {
    arm_fir_f32(&S, inputF32 + (i * blockSize), outputF32 + (i * blockSize), blockSize);
 8001e76:	4b39      	ldr	r3, [pc, #228]	@ (8001f5c <main+0x124>)
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	69fa      	ldr	r2, [r7, #28]
 8001e7c:	fb02 f303 	mul.w	r3, r2, r3
 8001e80:	009b      	lsls	r3, r3, #2
 8001e82:	693a      	ldr	r2, [r7, #16]
 8001e84:	18d1      	adds	r1, r2, r3
 8001e86:	4b35      	ldr	r3, [pc, #212]	@ (8001f5c <main+0x124>)
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	69fa      	ldr	r2, [r7, #28]
 8001e8c:	fb02 f303 	mul.w	r3, r2, r3
 8001e90:	009b      	lsls	r3, r3, #2
 8001e92:	68fa      	ldr	r2, [r7, #12]
 8001e94:	441a      	add	r2, r3
 8001e96:	4b31      	ldr	r3, [pc, #196]	@ (8001f5c <main+0x124>)
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	4638      	mov	r0, r7
 8001e9c:	f7ff fa99 	bl	80013d2 <arm_fir_f32>
  for(i=0; i < numBlocks; i++)
 8001ea0:	69fb      	ldr	r3, [r7, #28]
 8001ea2:	3301      	adds	r3, #1
 8001ea4:	61fb      	str	r3, [r7, #28]
 8001ea6:	4b30      	ldr	r3, [pc, #192]	@ (8001f68 <main+0x130>)
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	69fa      	ldr	r2, [r7, #28]
 8001eac:	429a      	cmp	r2, r3
 8001eae:	d3e2      	bcc.n	8001e76 <main+0x3e>
  /* ----------------------------------------------------------------------
  ** Compare the generated output against the reference output computed
  ** in MATLAB.
  ** ------------------------------------------------------------------- */

  snr = arm_snr_f32(&refOutput[0], &testOutput[0], TEST_LENGTH_SAMPLES);
 8001eb0:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8001eb4:	4928      	ldr	r1, [pc, #160]	@ (8001f58 <main+0x120>)
 8001eb6:	482d      	ldr	r0, [pc, #180]	@ (8001f6c <main+0x134>)
 8001eb8:	f000 fb76 	bl	80025a8 <arm_snr_f32>
 8001ebc:	eef0 7a40 	vmov.f32	s15, s0
 8001ec0:	4b2b      	ldr	r3, [pc, #172]	@ (8001f70 <main+0x138>)
 8001ec2:	edc3 7a00 	vstr	s15, [r3]

  if (snr < SNR_THRESHOLD_F32)
 8001ec6:	4b2a      	ldr	r3, [pc, #168]	@ (8001f70 <main+0x138>)
 8001ec8:	edd3 7a00 	vldr	s15, [r3]
 8001ecc:	ed9f 7a29 	vldr	s14, [pc, #164]	@ 8001f74 <main+0x13c>
 8001ed0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001ed4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ed8:	d502      	bpl.n	8001ee0 <main+0xa8>
  {
    status = ARM_MATH_TEST_FAILURE;
 8001eda:	23fa      	movs	r3, #250	@ 0xfa
 8001edc:	76fb      	strb	r3, [r7, #27]
 8001ede:	e001      	b.n	8001ee4 <main+0xac>
  }
  else
  {
    status = ARM_MATH_SUCCESS;
 8001ee0:	2300      	movs	r3, #0
 8001ee2:	76fb      	strb	r3, [r7, #27]
  }
  if(status == ARM_MATH_SUCCESS) {
 8001ee4:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d106      	bne.n	8001efa <main+0xc2>
	  state = 0;
 8001eec:	4b22      	ldr	r3, [pc, #136]	@ (8001f78 <main+0x140>)
 8001eee:	2200      	movs	r2, #0
 8001ef0:	601a      	str	r2, [r3, #0]
	  printf("success\n");
 8001ef2:	4822      	ldr	r0, [pc, #136]	@ (8001f7c <main+0x144>)
 8001ef4:	f005 fb6e 	bl	80075d4 <puts>
 8001ef8:	e005      	b.n	8001f06 <main+0xce>
  }
  else {
	  state = 1;
 8001efa:	4b1f      	ldr	r3, [pc, #124]	@ (8001f78 <main+0x140>)
 8001efc:	2201      	movs	r2, #1
 8001efe:	601a      	str	r2, [r3, #0]
	  printf("failed\n");
 8001f00:	481f      	ldr	r0, [pc, #124]	@ (8001f80 <main+0x148>)
 8001f02:	f005 fb67 	bl	80075d4 <puts>
  }

  BSP_ACCELERO_Init();
 8001f06:	f7ff f9db 	bl	80012c0 <BSP_ACCELERO_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  for(int i = 0; i < 32; ++i){
 8001f0a:	2300      	movs	r3, #0
 8001f0c:	617b      	str	r3, [r7, #20]
 8001f0e:	e015      	b.n	8001f3c <main+0x104>
		  BSP_ACCELERO_AccGetXYZ(pDataXYZ);
 8001f10:	481c      	ldr	r0, [pc, #112]	@ (8001f84 <main+0x14c>)
 8001f12:	f7ff fa15 	bl	8001340 <BSP_ACCELERO_AccGetXYZ>
		  raw_data_buff[i] = pDataXYZ[0];
 8001f16:	4b1b      	ldr	r3, [pc, #108]	@ (8001f84 <main+0x14c>)
 8001f18:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001f1c:	ee07 3a90 	vmov	s15, r3
 8001f20:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001f24:	4a18      	ldr	r2, [pc, #96]	@ (8001f88 <main+0x150>)
 8001f26:	697b      	ldr	r3, [r7, #20]
 8001f28:	009b      	lsls	r3, r3, #2
 8001f2a:	4413      	add	r3, r2
 8001f2c:	edc3 7a00 	vstr	s15, [r3]
		  HAL_Delay(100);
 8001f30:	2064      	movs	r0, #100	@ 0x64
 8001f32:	f001 f805 	bl	8002f40 <HAL_Delay>
	  for(int i = 0; i < 32; ++i){
 8001f36:	697b      	ldr	r3, [r7, #20]
 8001f38:	3301      	adds	r3, #1
 8001f3a:	617b      	str	r3, [r7, #20]
 8001f3c:	697b      	ldr	r3, [r7, #20]
 8001f3e:	2b1f      	cmp	r3, #31
 8001f40:	dde6      	ble.n	8001f10 <main+0xd8>
	  }
//	  BSP_ACCELERO_AccGetXYZ(pDataXYZ);
//	  printf("HI\n");
	  arm_fir_f32(&S, raw_data_buff, filtered_buff, blockSize);
 8001f42:	4b06      	ldr	r3, [pc, #24]	@ (8001f5c <main+0x124>)
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	4638      	mov	r0, r7
 8001f48:	4a10      	ldr	r2, [pc, #64]	@ (8001f8c <main+0x154>)
 8001f4a:	490f      	ldr	r1, [pc, #60]	@ (8001f88 <main+0x150>)
 8001f4c:	f7ff fa41 	bl	80013d2 <arm_fir_f32>
	  for(int i = 0; i < 32; ++i){
 8001f50:	e7db      	b.n	8001f0a <main+0xd2>
 8001f52:	bf00      	nop
 8001f54:	20000000 	.word	0x20000000
 8001f58:	20000ed0 	.word	0x20000ed0
 8001f5c:	20000a00 	.word	0x20000a00
 8001f60:	200013d0 	.word	0x200013d0
 8001f64:	0800b398 	.word	0x0800b398
 8001f68:	20000a04 	.word	0x20000a04
 8001f6c:	20000500 	.word	0x20000500
 8001f70:	200014c0 	.word	0x200014c0
 8001f74:	430c0000 	.word	0x430c0000
 8001f78:	20000a08 	.word	0x20000a08
 8001f7c:	0800b388 	.word	0x0800b388
 8001f80:	0800b390 	.word	0x0800b390
 8001f84:	20000dc8 	.word	0x20000dc8
 8001f88:	20000dd0 	.word	0x20000dd0
 8001f8c:	20000e50 	.word	0x20000e50

08001f90 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001f90:	b580      	push	{r7, lr}
 8001f92:	b096      	sub	sp, #88	@ 0x58
 8001f94:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001f96:	f107 0314 	add.w	r3, r7, #20
 8001f9a:	2244      	movs	r2, #68	@ 0x44
 8001f9c:	2100      	movs	r1, #0
 8001f9e:	4618      	mov	r0, r3
 8001fa0:	f005 fc1a 	bl	80077d8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001fa4:	463b      	mov	r3, r7
 8001fa6:	2200      	movs	r2, #0
 8001fa8:	601a      	str	r2, [r3, #0]
 8001faa:	605a      	str	r2, [r3, #4]
 8001fac:	609a      	str	r2, [r3, #8]
 8001fae:	60da      	str	r2, [r3, #12]
 8001fb0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001fb2:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8001fb6:	f002 fa33 	bl	8004420 <HAL_PWREx_ControlVoltageScaling>
 8001fba:	4603      	mov	r3, r0
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d001      	beq.n	8001fc4 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001fc0:	f000 faec 	bl	800259c <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8001fc4:	2310      	movs	r3, #16
 8001fc6:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001fc8:	2301      	movs	r3, #1
 8001fca:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8001fcc:	2300      	movs	r3, #0
 8001fce:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001fd0:	2360      	movs	r3, #96	@ 0x60
 8001fd2:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001fd4:	2302      	movs	r3, #2
 8001fd6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8001fd8:	2301      	movs	r3, #1
 8001fda:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001fdc:	2301      	movs	r3, #1
 8001fde:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 8001fe0:	2328      	movs	r3, #40	@ 0x28
 8001fe2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001fe4:	2307      	movs	r3, #7
 8001fe6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001fe8:	2302      	movs	r3, #2
 8001fea:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001fec:	2302      	movs	r3, #2
 8001fee:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001ff0:	f107 0314 	add.w	r3, r7, #20
 8001ff4:	4618      	mov	r0, r3
 8001ff6:	f002 fa69 	bl	80044cc <HAL_RCC_OscConfig>
 8001ffa:	4603      	mov	r3, r0
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d001      	beq.n	8002004 <SystemClock_Config+0x74>
  {
    Error_Handler();
 8002000:	f000 facc 	bl	800259c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002004:	230f      	movs	r3, #15
 8002006:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002008:	2303      	movs	r3, #3
 800200a:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800200c:	2300      	movs	r3, #0
 800200e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002010:	2300      	movs	r3, #0
 8002012:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002014:	2300      	movs	r3, #0
 8002016:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8002018:	463b      	mov	r3, r7
 800201a:	2104      	movs	r1, #4
 800201c:	4618      	mov	r0, r3
 800201e:	f002 fe31 	bl	8004c84 <HAL_RCC_ClockConfig>
 8002022:	4603      	mov	r3, r0
 8002024:	2b00      	cmp	r3, #0
 8002026:	d001      	beq.n	800202c <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8002028:	f000 fab8 	bl	800259c <Error_Handler>
  }
}
 800202c:	bf00      	nop
 800202e:	3758      	adds	r7, #88	@ 0x58
 8002030:	46bd      	mov	sp, r7
 8002032:	bd80      	pop	{r7, pc}

08002034 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002034:	b580      	push	{r7, lr}
 8002036:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002038:	4b1b      	ldr	r3, [pc, #108]	@ (80020a8 <MX_I2C1_Init+0x74>)
 800203a:	4a1c      	ldr	r2, [pc, #112]	@ (80020ac <MX_I2C1_Init+0x78>)
 800203c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10D19CE4;
 800203e:	4b1a      	ldr	r3, [pc, #104]	@ (80020a8 <MX_I2C1_Init+0x74>)
 8002040:	4a1b      	ldr	r2, [pc, #108]	@ (80020b0 <MX_I2C1_Init+0x7c>)
 8002042:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8002044:	4b18      	ldr	r3, [pc, #96]	@ (80020a8 <MX_I2C1_Init+0x74>)
 8002046:	2200      	movs	r2, #0
 8002048:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800204a:	4b17      	ldr	r3, [pc, #92]	@ (80020a8 <MX_I2C1_Init+0x74>)
 800204c:	2201      	movs	r2, #1
 800204e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002050:	4b15      	ldr	r3, [pc, #84]	@ (80020a8 <MX_I2C1_Init+0x74>)
 8002052:	2200      	movs	r2, #0
 8002054:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8002056:	4b14      	ldr	r3, [pc, #80]	@ (80020a8 <MX_I2C1_Init+0x74>)
 8002058:	2200      	movs	r2, #0
 800205a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800205c:	4b12      	ldr	r3, [pc, #72]	@ (80020a8 <MX_I2C1_Init+0x74>)
 800205e:	2200      	movs	r2, #0
 8002060:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002062:	4b11      	ldr	r3, [pc, #68]	@ (80020a8 <MX_I2C1_Init+0x74>)
 8002064:	2200      	movs	r2, #0
 8002066:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002068:	4b0f      	ldr	r3, [pc, #60]	@ (80020a8 <MX_I2C1_Init+0x74>)
 800206a:	2200      	movs	r2, #0
 800206c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800206e:	480e      	ldr	r0, [pc, #56]	@ (80020a8 <MX_I2C1_Init+0x74>)
 8002070:	f001 fb75 	bl	800375e <HAL_I2C_Init>
 8002074:	4603      	mov	r3, r0
 8002076:	2b00      	cmp	r3, #0
 8002078:	d001      	beq.n	800207e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800207a:	f000 fa8f 	bl	800259c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800207e:	2100      	movs	r1, #0
 8002080:	4809      	ldr	r0, [pc, #36]	@ (80020a8 <MX_I2C1_Init+0x74>)
 8002082:	f002 f927 	bl	80042d4 <HAL_I2CEx_ConfigAnalogFilter>
 8002086:	4603      	mov	r3, r0
 8002088:	2b00      	cmp	r3, #0
 800208a:	d001      	beq.n	8002090 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800208c:	f000 fa86 	bl	800259c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8002090:	2100      	movs	r1, #0
 8002092:	4805      	ldr	r0, [pc, #20]	@ (80020a8 <MX_I2C1_Init+0x74>)
 8002094:	f002 f969 	bl	800436a <HAL_I2CEx_ConfigDigitalFilter>
 8002098:	4603      	mov	r3, r0
 800209a:	2b00      	cmp	r3, #0
 800209c:	d001      	beq.n	80020a2 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800209e:	f000 fa7d 	bl	800259c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80020a2:	bf00      	nop
 80020a4:	bd80      	pop	{r7, pc}
 80020a6:	bf00      	nop
 80020a8:	20000c88 	.word	0x20000c88
 80020ac:	40005400 	.word	0x40005400
 80020b0:	10d19ce4 	.word	0x10d19ce4

080020b4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80020b4:	b580      	push	{r7, lr}
 80020b6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80020b8:	4b1b      	ldr	r3, [pc, #108]	@ (8002128 <MX_SPI1_Init+0x74>)
 80020ba:	4a1c      	ldr	r2, [pc, #112]	@ (800212c <MX_SPI1_Init+0x78>)
 80020bc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80020be:	4b1a      	ldr	r3, [pc, #104]	@ (8002128 <MX_SPI1_Init+0x74>)
 80020c0:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80020c4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80020c6:	4b18      	ldr	r3, [pc, #96]	@ (8002128 <MX_SPI1_Init+0x74>)
 80020c8:	2200      	movs	r2, #0
 80020ca:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 80020cc:	4b16      	ldr	r3, [pc, #88]	@ (8002128 <MX_SPI1_Init+0x74>)
 80020ce:	f44f 7240 	mov.w	r2, #768	@ 0x300
 80020d2:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80020d4:	4b14      	ldr	r3, [pc, #80]	@ (8002128 <MX_SPI1_Init+0x74>)
 80020d6:	2200      	movs	r2, #0
 80020d8:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80020da:	4b13      	ldr	r3, [pc, #76]	@ (8002128 <MX_SPI1_Init+0x74>)
 80020dc:	2200      	movs	r2, #0
 80020de:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80020e0:	4b11      	ldr	r3, [pc, #68]	@ (8002128 <MX_SPI1_Init+0x74>)
 80020e2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80020e6:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80020e8:	4b0f      	ldr	r3, [pc, #60]	@ (8002128 <MX_SPI1_Init+0x74>)
 80020ea:	2200      	movs	r2, #0
 80020ec:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80020ee:	4b0e      	ldr	r3, [pc, #56]	@ (8002128 <MX_SPI1_Init+0x74>)
 80020f0:	2200      	movs	r2, #0
 80020f2:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80020f4:	4b0c      	ldr	r3, [pc, #48]	@ (8002128 <MX_SPI1_Init+0x74>)
 80020f6:	2200      	movs	r2, #0
 80020f8:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80020fa:	4b0b      	ldr	r3, [pc, #44]	@ (8002128 <MX_SPI1_Init+0x74>)
 80020fc:	2200      	movs	r2, #0
 80020fe:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8002100:	4b09      	ldr	r3, [pc, #36]	@ (8002128 <MX_SPI1_Init+0x74>)
 8002102:	2207      	movs	r2, #7
 8002104:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002106:	4b08      	ldr	r3, [pc, #32]	@ (8002128 <MX_SPI1_Init+0x74>)
 8002108:	2200      	movs	r2, #0
 800210a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800210c:	4b06      	ldr	r3, [pc, #24]	@ (8002128 <MX_SPI1_Init+0x74>)
 800210e:	2208      	movs	r2, #8
 8002110:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002112:	4805      	ldr	r0, [pc, #20]	@ (8002128 <MX_SPI1_Init+0x74>)
 8002114:	f003 fc96 	bl	8005a44 <HAL_SPI_Init>
 8002118:	4603      	mov	r3, r0
 800211a:	2b00      	cmp	r3, #0
 800211c:	d001      	beq.n	8002122 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800211e:	f000 fa3d 	bl	800259c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002122:	bf00      	nop
 8002124:	bd80      	pop	{r7, pc}
 8002126:	bf00      	nop
 8002128:	20000cdc 	.word	0x20000cdc
 800212c:	40013000 	.word	0x40013000

08002130 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002130:	b580      	push	{r7, lr}
 8002132:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002134:	4b14      	ldr	r3, [pc, #80]	@ (8002188 <MX_USART1_UART_Init+0x58>)
 8002136:	4a15      	ldr	r2, [pc, #84]	@ (800218c <MX_USART1_UART_Init+0x5c>)
 8002138:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800213a:	4b13      	ldr	r3, [pc, #76]	@ (8002188 <MX_USART1_UART_Init+0x58>)
 800213c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002140:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002142:	4b11      	ldr	r3, [pc, #68]	@ (8002188 <MX_USART1_UART_Init+0x58>)
 8002144:	2200      	movs	r2, #0
 8002146:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002148:	4b0f      	ldr	r3, [pc, #60]	@ (8002188 <MX_USART1_UART_Init+0x58>)
 800214a:	2200      	movs	r2, #0
 800214c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800214e:	4b0e      	ldr	r3, [pc, #56]	@ (8002188 <MX_USART1_UART_Init+0x58>)
 8002150:	2200      	movs	r2, #0
 8002152:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002154:	4b0c      	ldr	r3, [pc, #48]	@ (8002188 <MX_USART1_UART_Init+0x58>)
 8002156:	220c      	movs	r2, #12
 8002158:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800215a:	4b0b      	ldr	r3, [pc, #44]	@ (8002188 <MX_USART1_UART_Init+0x58>)
 800215c:	2200      	movs	r2, #0
 800215e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002160:	4b09      	ldr	r3, [pc, #36]	@ (8002188 <MX_USART1_UART_Init+0x58>)
 8002162:	2200      	movs	r2, #0
 8002164:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002166:	4b08      	ldr	r3, [pc, #32]	@ (8002188 <MX_USART1_UART_Init+0x58>)
 8002168:	2200      	movs	r2, #0
 800216a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800216c:	4b06      	ldr	r3, [pc, #24]	@ (8002188 <MX_USART1_UART_Init+0x58>)
 800216e:	2200      	movs	r2, #0
 8002170:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002172:	4805      	ldr	r0, [pc, #20]	@ (8002188 <MX_USART1_UART_Init+0x58>)
 8002174:	f003 fd09 	bl	8005b8a <HAL_UART_Init>
 8002178:	4603      	mov	r3, r0
 800217a:	2b00      	cmp	r3, #0
 800217c:	d001      	beq.n	8002182 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800217e:	f000 fa0d 	bl	800259c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002182:	bf00      	nop
 8002184:	bd80      	pop	{r7, pc}
 8002186:	bf00      	nop
 8002188:	20000d40 	.word	0x20000d40
 800218c:	40013800 	.word	0x40013800

08002190 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002190:	b580      	push	{r7, lr}
 8002192:	b08a      	sub	sp, #40	@ 0x28
 8002194:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002196:	f107 0314 	add.w	r3, r7, #20
 800219a:	2200      	movs	r2, #0
 800219c:	601a      	str	r2, [r3, #0]
 800219e:	605a      	str	r2, [r3, #4]
 80021a0:	609a      	str	r2, [r3, #8]
 80021a2:	60da      	str	r2, [r3, #12]
 80021a4:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80021a6:	4bbc      	ldr	r3, [pc, #752]	@ (8002498 <MX_GPIO_Init+0x308>)
 80021a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80021aa:	4abb      	ldr	r2, [pc, #748]	@ (8002498 <MX_GPIO_Init+0x308>)
 80021ac:	f043 0310 	orr.w	r3, r3, #16
 80021b0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80021b2:	4bb9      	ldr	r3, [pc, #740]	@ (8002498 <MX_GPIO_Init+0x308>)
 80021b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80021b6:	f003 0310 	and.w	r3, r3, #16
 80021ba:	613b      	str	r3, [r7, #16]
 80021bc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80021be:	4bb6      	ldr	r3, [pc, #728]	@ (8002498 <MX_GPIO_Init+0x308>)
 80021c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80021c2:	4ab5      	ldr	r2, [pc, #724]	@ (8002498 <MX_GPIO_Init+0x308>)
 80021c4:	f043 0304 	orr.w	r3, r3, #4
 80021c8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80021ca:	4bb3      	ldr	r3, [pc, #716]	@ (8002498 <MX_GPIO_Init+0x308>)
 80021cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80021ce:	f003 0304 	and.w	r3, r3, #4
 80021d2:	60fb      	str	r3, [r7, #12]
 80021d4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80021d6:	4bb0      	ldr	r3, [pc, #704]	@ (8002498 <MX_GPIO_Init+0x308>)
 80021d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80021da:	4aaf      	ldr	r2, [pc, #700]	@ (8002498 <MX_GPIO_Init+0x308>)
 80021dc:	f043 0301 	orr.w	r3, r3, #1
 80021e0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80021e2:	4bad      	ldr	r3, [pc, #692]	@ (8002498 <MX_GPIO_Init+0x308>)
 80021e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80021e6:	f003 0301 	and.w	r3, r3, #1
 80021ea:	60bb      	str	r3, [r7, #8]
 80021ec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80021ee:	4baa      	ldr	r3, [pc, #680]	@ (8002498 <MX_GPIO_Init+0x308>)
 80021f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80021f2:	4aa9      	ldr	r2, [pc, #676]	@ (8002498 <MX_GPIO_Init+0x308>)
 80021f4:	f043 0302 	orr.w	r3, r3, #2
 80021f8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80021fa:	4ba7      	ldr	r3, [pc, #668]	@ (8002498 <MX_GPIO_Init+0x308>)
 80021fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80021fe:	f003 0302 	and.w	r3, r3, #2
 8002202:	607b      	str	r3, [r7, #4]
 8002204:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002206:	4ba4      	ldr	r3, [pc, #656]	@ (8002498 <MX_GPIO_Init+0x308>)
 8002208:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800220a:	4aa3      	ldr	r2, [pc, #652]	@ (8002498 <MX_GPIO_Init+0x308>)
 800220c:	f043 0308 	orr.w	r3, r3, #8
 8002210:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002212:	4ba1      	ldr	r3, [pc, #644]	@ (8002498 <MX_GPIO_Init+0x308>)
 8002214:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002216:	f003 0308 	and.w	r3, r3, #8
 800221a:	603b      	str	r3, [r7, #0]
 800221c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin, GPIO_PIN_RESET);
 800221e:	2200      	movs	r2, #0
 8002220:	f44f 718a 	mov.w	r1, #276	@ 0x114
 8002224:	489d      	ldr	r0, [pc, #628]	@ (800249c <MX_GPIO_Init+0x30c>)
 8002226:	f001 fa5f 	bl	80036e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ARD_D10_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin, GPIO_PIN_RESET);
 800222a:	2200      	movs	r2, #0
 800222c:	f248 1104 	movw	r1, #33028	@ 0x8104
 8002230:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002234:	f001 fa58 	bl	80036e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 8002238:	2200      	movs	r2, #0
 800223a:	f24f 0114 	movw	r1, #61460	@ 0xf014
 800223e:	4898      	ldr	r0, [pc, #608]	@ (80024a0 <MX_GPIO_Init+0x310>)
 8002240:	f001 fa52 	bl	80036e8 <HAL_GPIO_WritePin>
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, USB_OTG_FS_PWR_EN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin, GPIO_PIN_RESET);
 8002244:	2200      	movs	r2, #0
 8002246:	f241 0181 	movw	r1, #4225	@ 0x1081
 800224a:	4896      	ldr	r0, [pc, #600]	@ (80024a4 <MX_GPIO_Init+0x314>)
 800224c:	f001 fa4c 	bl	80036e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPBTLE_RF_SPI3_CSN_GPIO_Port, SPBTLE_RF_SPI3_CSN_Pin, GPIO_PIN_SET);
 8002250:	2201      	movs	r2, #1
 8002252:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002256:	4893      	ldr	r0, [pc, #588]	@ (80024a4 <MX_GPIO_Init+0x314>)
 8002258:	f001 fa46 	bl	80036e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin, GPIO_PIN_RESET);
 800225c:	2200      	movs	r2, #0
 800225e:	f44f 7110 	mov.w	r1, #576	@ 0x240
 8002262:	4891      	ldr	r0, [pc, #580]	@ (80024a8 <MX_GPIO_Init+0x318>)
 8002264:	f001 fa40 	bl	80036e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPSGRF_915_SPI3_CSN_GPIO_Port, SPSGRF_915_SPI3_CSN_Pin, GPIO_PIN_SET);
 8002268:	2201      	movs	r2, #1
 800226a:	2120      	movs	r1, #32
 800226c:	488c      	ldr	r0, [pc, #560]	@ (80024a0 <MX_GPIO_Init+0x310>)
 800226e:	f001 fa3b 	bl	80036e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ISM43362_SPI3_CSN_GPIO_Port, ISM43362_SPI3_CSN_Pin, GPIO_PIN_SET);
 8002272:	2201      	movs	r2, #1
 8002274:	2101      	movs	r1, #1
 8002276:	4889      	ldr	r0, [pc, #548]	@ (800249c <MX_GPIO_Init+0x30c>)
 8002278:	f001 fa36 	bl	80036e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : M24SR64_Y_RF_DISABLE_Pin M24SR64_Y_GPO_Pin ISM43362_RST_Pin ISM43362_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin|ISM43362_SPI3_CSN_Pin;
 800227c:	f240 1315 	movw	r3, #277	@ 0x115
 8002280:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002282:	2301      	movs	r3, #1
 8002284:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002286:	2300      	movs	r3, #0
 8002288:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800228a:	2300      	movs	r3, #0
 800228c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800228e:	f107 0314 	add.w	r3, r7, #20
 8002292:	4619      	mov	r1, r3
 8002294:	4881      	ldr	r0, [pc, #516]	@ (800249c <MX_GPIO_Init+0x30c>)
 8002296:	f000 ff89 	bl	80031ac <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_OVRCR_EXTI3_Pin SPSGRF_915_GPIO3_EXTI5_Pin SPBTLE_RF_IRQ_EXTI6_Pin ISM43362_DRDY_EXTI1_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVRCR_EXTI3_Pin|SPSGRF_915_GPIO3_EXTI5_Pin|SPBTLE_RF_IRQ_EXTI6_Pin|ISM43362_DRDY_EXTI1_Pin;
 800229a:	236a      	movs	r3, #106	@ 0x6a
 800229c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800229e:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80022a2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022a4:	2300      	movs	r3, #0
 80022a6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80022a8:	f107 0314 	add.w	r3, r7, #20
 80022ac:	4619      	mov	r1, r3
 80022ae:	487b      	ldr	r0, [pc, #492]	@ (800249c <MX_GPIO_Init+0x30c>)
 80022b0:	f000 ff7c 	bl	80031ac <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_EXTI13_Pin */
  GPIO_InitStruct.Pin = BUTTON_EXTI13_Pin;
 80022b4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80022b8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80022ba:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80022be:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022c0:	2300      	movs	r3, #0
 80022c2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BUTTON_EXTI13_GPIO_Port, &GPIO_InitStruct);
 80022c4:	f107 0314 	add.w	r3, r7, #20
 80022c8:	4619      	mov	r1, r3
 80022ca:	4877      	ldr	r0, [pc, #476]	@ (80024a8 <MX_GPIO_Init+0x318>)
 80022cc:	f000 ff6e 	bl	80031ac <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_A5_Pin ARD_A4_Pin ARD_A3_Pin ARD_A2_Pin
                           ARD_A1_Pin ARD_A0_Pin */
  GPIO_InitStruct.Pin = ARD_A5_Pin|ARD_A4_Pin|ARD_A3_Pin|ARD_A2_Pin
 80022d0:	233f      	movs	r3, #63	@ 0x3f
 80022d2:	617b      	str	r3, [r7, #20]
                          |ARD_A1_Pin|ARD_A0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80022d4:	230b      	movs	r3, #11
 80022d6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022d8:	2300      	movs	r3, #0
 80022da:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80022dc:	f107 0314 	add.w	r3, r7, #20
 80022e0:	4619      	mov	r1, r3
 80022e2:	4871      	ldr	r0, [pc, #452]	@ (80024a8 <MX_GPIO_Init+0x318>)
 80022e4:	f000 ff62 	bl	80031ac <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D1_Pin ARD_D0_Pin */
  GPIO_InitStruct.Pin = ARD_D1_Pin|ARD_D0_Pin;
 80022e8:	2303      	movs	r3, #3
 80022ea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022ec:	2302      	movs	r3, #2
 80022ee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022f0:	2300      	movs	r3, #0
 80022f2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022f4:	2303      	movs	r3, #3
 80022f6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80022f8:	2308      	movs	r3, #8
 80022fa:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022fc:	f107 0314 	add.w	r3, r7, #20
 8002300:	4619      	mov	r1, r3
 8002302:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002306:	f000 ff51 	bl	80031ac <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D10_Pin SPBTLE_RF_RST_Pin ARD_D9_Pin */
  GPIO_InitStruct.Pin = ARD_D10_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin;
 800230a:	f248 1304 	movw	r3, #33028	@ 0x8104
 800230e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002310:	2301      	movs	r3, #1
 8002312:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002314:	2300      	movs	r3, #0
 8002316:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002318:	2300      	movs	r3, #0
 800231a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800231c:	f107 0314 	add.w	r3, r7, #20
 8002320:	4619      	mov	r1, r3
 8002322:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002326:	f000 ff41 	bl	80031ac <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D4_Pin */
  GPIO_InitStruct.Pin = ARD_D4_Pin;
 800232a:	2308      	movs	r3, #8
 800232c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800232e:	2302      	movs	r3, #2
 8002330:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002332:	2300      	movs	r3, #0
 8002334:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002336:	2300      	movs	r3, #0
 8002338:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800233a:	2301      	movs	r3, #1
 800233c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(ARD_D4_GPIO_Port, &GPIO_InitStruct);
 800233e:	f107 0314 	add.w	r3, r7, #20
 8002342:	4619      	mov	r1, r3
 8002344:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002348:	f000 ff30 	bl	80031ac <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D7_Pin */
  GPIO_InitStruct.Pin = ARD_D7_Pin;
 800234c:	2310      	movs	r3, #16
 800234e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8002350:	230b      	movs	r3, #11
 8002352:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002354:	2300      	movs	r3, #0
 8002356:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D7_GPIO_Port, &GPIO_InitStruct);
 8002358:	f107 0314 	add.w	r3, r7, #20
 800235c:	4619      	mov	r1, r3
 800235e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002362:	f000 ff23 	bl	80031ac <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D3_Pin */
  GPIO_InitStruct.Pin = ARD_D3_Pin;
 8002366:	2301      	movs	r3, #1
 8002368:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800236a:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800236e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002370:	2300      	movs	r3, #0
 8002372:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D3_GPIO_Port, &GPIO_InitStruct);
 8002374:	f107 0314 	add.w	r3, r7, #20
 8002378:	4619      	mov	r1, r3
 800237a:	4849      	ldr	r0, [pc, #292]	@ (80024a0 <MX_GPIO_Init+0x310>)
 800237c:	f000 ff16 	bl	80031ac <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D6_Pin */
  GPIO_InitStruct.Pin = ARD_D6_Pin;
 8002380:	2302      	movs	r3, #2
 8002382:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8002384:	230b      	movs	r3, #11
 8002386:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002388:	2300      	movs	r3, #0
 800238a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D6_GPIO_Port, &GPIO_InitStruct);
 800238c:	f107 0314 	add.w	r3, r7, #20
 8002390:	4619      	mov	r1, r3
 8002392:	4843      	ldr	r0, [pc, #268]	@ (80024a0 <MX_GPIO_Init+0x310>)
 8002394:	f000 ff0a 	bl	80031ac <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D8_Pin ISM43362_BOOT0_Pin ISM43362_WAKEUP_Pin LED2_Pin
                           SPSGRF_915_SDN_Pin ARD_D5_Pin SPSGRF_915_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 8002398:	f24f 0334 	movw	r3, #61492	@ 0xf034
 800239c:	617b      	str	r3, [r7, #20]
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin|SPSGRF_915_SPI3_CSN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800239e:	2301      	movs	r3, #1
 80023a0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023a2:	2300      	movs	r3, #0
 80023a4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023a6:	2300      	movs	r3, #0
 80023a8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80023aa:	f107 0314 	add.w	r3, r7, #20
 80023ae:	4619      	mov	r1, r3
 80023b0:	483b      	ldr	r0, [pc, #236]	@ (80024a0 <MX_GPIO_Init+0x310>)
 80023b2:	f000 fefb 	bl	80031ac <HAL_GPIO_Init>

  /*Configure GPIO pins : DFSDM1_DATIN2_Pin DFSDM1_CKOUT_Pin */
  GPIO_InitStruct.Pin = DFSDM1_DATIN2_Pin|DFSDM1_CKOUT_Pin;
 80023b6:	f44f 7320 	mov.w	r3, #640	@ 0x280
 80023ba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023bc:	2302      	movs	r3, #2
 80023be:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023c0:	2300      	movs	r3, #0
 80023c2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023c4:	2300      	movs	r3, #0
 80023c6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 80023c8:	2306      	movs	r3, #6
 80023ca:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80023cc:	f107 0314 	add.w	r3, r7, #20
 80023d0:	4619      	mov	r1, r3
 80023d2:	4832      	ldr	r0, [pc, #200]	@ (800249c <MX_GPIO_Init+0x30c>)
 80023d4:	f000 feea 	bl	80031ac <HAL_GPIO_Init>

  /*Configure GPIO pins : QUADSPI_CLK_Pin QUADSPI_NCS_Pin OQUADSPI_BK1_IO0_Pin QUADSPI_BK1_IO1_Pin
                           QUAD_SPI_BK1_IO2_Pin QUAD_SPI_BK1_IO3_Pin */
  GPIO_InitStruct.Pin = QUADSPI_CLK_Pin|QUADSPI_NCS_Pin|OQUADSPI_BK1_IO0_Pin|QUADSPI_BK1_IO1_Pin
 80023d8:	f44f 437c 	mov.w	r3, #64512	@ 0xfc00
 80023dc:	617b      	str	r3, [r7, #20]
                          |QUAD_SPI_BK1_IO2_Pin|QUAD_SPI_BK1_IO3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023de:	2302      	movs	r3, #2
 80023e0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023e2:	2300      	movs	r3, #0
 80023e4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023e6:	2303      	movs	r3, #3
 80023e8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 80023ea:	230a      	movs	r3, #10
 80023ec:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80023ee:	f107 0314 	add.w	r3, r7, #20
 80023f2:	4619      	mov	r1, r3
 80023f4:	4829      	ldr	r0, [pc, #164]	@ (800249c <MX_GPIO_Init+0x30c>)
 80023f6:	f000 fed9 	bl	80031ac <HAL_GPIO_Init>

  /*Configure GPIO pins : INTERNAL_I2C2_SCL_Pin INTERNAL_I2C2_SDA_Pin */
  GPIO_InitStruct.Pin = INTERNAL_I2C2_SCL_Pin|INTERNAL_I2C2_SDA_Pin;
 80023fa:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80023fe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002400:	2312      	movs	r3, #18
 8002402:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002404:	2300      	movs	r3, #0
 8002406:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002408:	2303      	movs	r3, #3
 800240a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800240c:	2304      	movs	r3, #4
 800240e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002410:	f107 0314 	add.w	r3, r7, #20
 8002414:	4619      	mov	r1, r3
 8002416:	4822      	ldr	r0, [pc, #136]	@ (80024a0 <MX_GPIO_Init+0x310>)
 8002418:	f000 fec8 	bl	80031ac <HAL_GPIO_Init>

  /*Configure GPIO pins : INTERNAL_UART3_TX_Pin INTERNAL_UART3_RX_Pin */
  GPIO_InitStruct.Pin = INTERNAL_UART3_TX_Pin|INTERNAL_UART3_RX_Pin;
 800241c:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8002420:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002422:	2302      	movs	r3, #2
 8002424:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002426:	2300      	movs	r3, #0
 8002428:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800242a:	2303      	movs	r3, #3
 800242c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800242e:	2307      	movs	r3, #7
 8002430:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002432:	f107 0314 	add.w	r3, r7, #20
 8002436:	4619      	mov	r1, r3
 8002438:	481a      	ldr	r0, [pc, #104]	@ (80024a4 <MX_GPIO_Init+0x314>)
 800243a:	f000 feb7 	bl	80031ac <HAL_GPIO_Init>

  /*Configure GPIO pins : LPS22HB_INT_DRDY_EXTI0_Pin LSM6DSL_INT1_EXTI11_Pin ARD_D2_Pin HTS221_DRDY_EXTI15_Pin
                           PMOD_IRQ_EXTI12_Pin */
  GPIO_InitStruct.Pin = LPS22HB_INT_DRDY_EXTI0_Pin|LSM6DSL_INT1_EXTI11_Pin|ARD_D2_Pin|HTS221_DRDY_EXTI15_Pin
 800243e:	f64c 4304 	movw	r3, #52228	@ 0xcc04
 8002442:	617b      	str	r3, [r7, #20]
                          |PMOD_IRQ_EXTI12_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002444:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8002448:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800244a:	2300      	movs	r3, #0
 800244c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800244e:	f107 0314 	add.w	r3, r7, #20
 8002452:	4619      	mov	r1, r3
 8002454:	4813      	ldr	r0, [pc, #76]	@ (80024a4 <MX_GPIO_Init+0x314>)
 8002456:	f000 fea9 	bl	80031ac <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_PWR_EN_Pin SPBTLE_RF_SPI3_CSN_Pin PMOD_RESET_Pin STSAFE_A100_RESET_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin|SPBTLE_RF_SPI3_CSN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin;
 800245a:	f243 0381 	movw	r3, #12417	@ 0x3081
 800245e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002460:	2301      	movs	r3, #1
 8002462:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002464:	2300      	movs	r3, #0
 8002466:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002468:	2300      	movs	r3, #0
 800246a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800246c:	f107 0314 	add.w	r3, r7, #20
 8002470:	4619      	mov	r1, r3
 8002472:	480c      	ldr	r0, [pc, #48]	@ (80024a4 <MX_GPIO_Init+0x314>)
 8002474:	f000 fe9a 	bl	80031ac <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_XSHUT_Pin LED3_WIFI__LED4_BLE_Pin */
  GPIO_InitStruct.Pin = VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin;
 8002478:	f44f 7310 	mov.w	r3, #576	@ 0x240
 800247c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800247e:	2301      	movs	r3, #1
 8002480:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002482:	2300      	movs	r3, #0
 8002484:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002486:	2300      	movs	r3, #0
 8002488:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800248a:	f107 0314 	add.w	r3, r7, #20
 800248e:	4619      	mov	r1, r3
 8002490:	4805      	ldr	r0, [pc, #20]	@ (80024a8 <MX_GPIO_Init+0x318>)
 8002492:	f000 fe8b 	bl	80031ac <HAL_GPIO_Init>
 8002496:	e009      	b.n	80024ac <MX_GPIO_Init+0x31c>
 8002498:	40021000 	.word	0x40021000
 800249c:	48001000 	.word	0x48001000
 80024a0:	48000400 	.word	0x48000400
 80024a4:	48000c00 	.word	0x48000c00
 80024a8:	48000800 	.word	0x48000800

  /*Configure GPIO pins : VL53L0X_GPIO1_EXTI7_Pin LSM3MDL_DRDY_EXTI8_Pin */
  GPIO_InitStruct.Pin = VL53L0X_GPIO1_EXTI7_Pin|LSM3MDL_DRDY_EXTI8_Pin;
 80024ac:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 80024b0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80024b2:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80024b6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024b8:	2300      	movs	r3, #0
 80024ba:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80024bc:	f107 0314 	add.w	r3, r7, #20
 80024c0:	4619      	mov	r1, r3
 80024c2:	4834      	ldr	r0, [pc, #208]	@ (8002594 <MX_GPIO_Init+0x404>)
 80024c4:	f000 fe72 	bl	80031ac <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_VBUS_Pin;
 80024c8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80024cc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80024ce:	2300      	movs	r3, #0
 80024d0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024d2:	2300      	movs	r3, #0
 80024d4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USB_OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 80024d6:	f107 0314 	add.w	r3, r7, #20
 80024da:	4619      	mov	r1, r3
 80024dc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80024e0:	f000 fe64 	bl	80031ac <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_ID_Pin USB_OTG_FS_DM_Pin USB_OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_ID_Pin|USB_OTG_FS_DM_Pin|USB_OTG_FS_DP_Pin;
 80024e4:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 80024e8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024ea:	2302      	movs	r3, #2
 80024ec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024ee:	2300      	movs	r3, #0
 80024f0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024f2:	2303      	movs	r3, #3
 80024f4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80024f6:	230a      	movs	r3, #10
 80024f8:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024fa:	f107 0314 	add.w	r3, r7, #20
 80024fe:	4619      	mov	r1, r3
 8002500:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002504:	f000 fe52 	bl	80031ac <HAL_GPIO_Init>

  /*Configure GPIO pins : INTERNAL_SPI3_SCK_Pin INTERNAL_SPI3_MISO_Pin INTERNAL_SPI3_MOSI_Pin */
  GPIO_InitStruct.Pin = INTERNAL_SPI3_SCK_Pin|INTERNAL_SPI3_MISO_Pin|INTERNAL_SPI3_MOSI_Pin;
 8002508:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 800250c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800250e:	2302      	movs	r3, #2
 8002510:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002512:	2300      	movs	r3, #0
 8002514:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002516:	2303      	movs	r3, #3
 8002518:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800251a:	2306      	movs	r3, #6
 800251c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800251e:	f107 0314 	add.w	r3, r7, #20
 8002522:	4619      	mov	r1, r3
 8002524:	481b      	ldr	r0, [pc, #108]	@ (8002594 <MX_GPIO_Init+0x404>)
 8002526:	f000 fe41 	bl	80031ac <HAL_GPIO_Init>

  /*Configure GPIO pin : PMOD_SPI2_SCK_Pin */
  GPIO_InitStruct.Pin = PMOD_SPI2_SCK_Pin;
 800252a:	2302      	movs	r3, #2
 800252c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800252e:	2302      	movs	r3, #2
 8002530:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002532:	2300      	movs	r3, #0
 8002534:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002536:	2303      	movs	r3, #3
 8002538:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800253a:	2305      	movs	r3, #5
 800253c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(PMOD_SPI2_SCK_GPIO_Port, &GPIO_InitStruct);
 800253e:	f107 0314 	add.w	r3, r7, #20
 8002542:	4619      	mov	r1, r3
 8002544:	4814      	ldr	r0, [pc, #80]	@ (8002598 <MX_GPIO_Init+0x408>)
 8002546:	f000 fe31 	bl	80031ac <HAL_GPIO_Init>

  /*Configure GPIO pins : PMOD_UART2_CTS_Pin PMOD_UART2_RTS_Pin PMOD_UART2_TX_Pin PMOD_UART2_RX_Pin */
  GPIO_InitStruct.Pin = PMOD_UART2_CTS_Pin|PMOD_UART2_RTS_Pin|PMOD_UART2_TX_Pin|PMOD_UART2_RX_Pin;
 800254a:	2378      	movs	r3, #120	@ 0x78
 800254c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800254e:	2302      	movs	r3, #2
 8002550:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002552:	2300      	movs	r3, #0
 8002554:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002556:	2303      	movs	r3, #3
 8002558:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800255a:	2307      	movs	r3, #7
 800255c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800255e:	f107 0314 	add.w	r3, r7, #20
 8002562:	4619      	mov	r1, r3
 8002564:	480c      	ldr	r0, [pc, #48]	@ (8002598 <MX_GPIO_Init+0x408>)
 8002566:	f000 fe21 	bl	80031ac <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 800256a:	2200      	movs	r2, #0
 800256c:	2100      	movs	r1, #0
 800256e:	2017      	movs	r0, #23
 8002570:	f000 fde5 	bl	800313e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8002574:	2017      	movs	r0, #23
 8002576:	f000 fdfe 	bl	8003176 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800257a:	2200      	movs	r2, #0
 800257c:	2100      	movs	r1, #0
 800257e:	2028      	movs	r0, #40	@ 0x28
 8002580:	f000 fddd 	bl	800313e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002584:	2028      	movs	r0, #40	@ 0x28
 8002586:	f000 fdf6 	bl	8003176 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 800258a:	bf00      	nop
 800258c:	3728      	adds	r7, #40	@ 0x28
 800258e:	46bd      	mov	sp, r7
 8002590:	bd80      	pop	{r7, pc}
 8002592:	bf00      	nop
 8002594:	48000800 	.word	0x48000800
 8002598:	48000c00 	.word	0x48000c00

0800259c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800259c:	b480      	push	{r7}
 800259e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80025a0:	b672      	cpsid	i
}
 80025a2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80025a4:	bf00      	nop
 80025a6:	e7fd      	b.n	80025a4 <Error_Handler+0x8>

080025a8 <arm_snr_f32>:
 * The function Caluclates signal to noise ratio for the reference output
 * and test output
 */

float arm_snr_f32(float *pRef, float *pTest, uint32_t buffSize)
{
 80025a8:	b580      	push	{r7, lr}
 80025aa:	b08a      	sub	sp, #40	@ 0x28
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	60f8      	str	r0, [r7, #12]
 80025b0:	60b9      	str	r1, [r7, #8]
 80025b2:	607a      	str	r2, [r7, #4]
  float EnergySignal = 0.0, EnergyError = 0.0;
 80025b4:	f04f 0300 	mov.w	r3, #0
 80025b8:	627b      	str	r3, [r7, #36]	@ 0x24
 80025ba:	f04f 0300 	mov.w	r3, #0
 80025be:	613b      	str	r3, [r7, #16]
  uint32_t i;
  float SNR;
  int temp;
  int *test;

  for (i = 0; i < buffSize; i++)
 80025c0:	2300      	movs	r3, #0
 80025c2:	623b      	str	r3, [r7, #32]
 80025c4:	e058      	b.n	8002678 <arm_snr_f32+0xd0>
    {
 	  /* Checking for a NAN value in pRef array */
	  test =   (int *)(&pRef[i]);
 80025c6:	6a3b      	ldr	r3, [r7, #32]
 80025c8:	009b      	lsls	r3, r3, #2
 80025ca:	68fa      	ldr	r2, [r7, #12]
 80025cc:	4413      	add	r3, r2
 80025ce:	61fb      	str	r3, [r7, #28]
      temp =  *test;
 80025d0:	69fb      	ldr	r3, [r7, #28]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	61bb      	str	r3, [r7, #24]

	  if (temp == 0x7FC00000)
 80025d6:	69bb      	ldr	r3, [r7, #24]
 80025d8:	4a43      	ldr	r2, [pc, #268]	@ (80026e8 <arm_snr_f32+0x140>)
 80025da:	4293      	cmp	r3, r2
 80025dc:	d102      	bne.n	80025e4 <arm_snr_f32+0x3c>
	  {
	  		return(0);
 80025de:	f04f 0300 	mov.w	r3, #0
 80025e2:	e07a      	b.n	80026da <arm_snr_f32+0x132>
	  }

	  /* Checking for a NAN value in pTest array */
	  test =   (int *)(&pTest[i]);
 80025e4:	6a3b      	ldr	r3, [r7, #32]
 80025e6:	009b      	lsls	r3, r3, #2
 80025e8:	68ba      	ldr	r2, [r7, #8]
 80025ea:	4413      	add	r3, r2
 80025ec:	61fb      	str	r3, [r7, #28]
      temp =  *test;
 80025ee:	69fb      	ldr	r3, [r7, #28]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	61bb      	str	r3, [r7, #24]

	  if (temp == 0x7FC00000)
 80025f4:	69bb      	ldr	r3, [r7, #24]
 80025f6:	4a3c      	ldr	r2, [pc, #240]	@ (80026e8 <arm_snr_f32+0x140>)
 80025f8:	4293      	cmp	r3, r2
 80025fa:	d102      	bne.n	8002602 <arm_snr_f32+0x5a>
	  {
	  		return(0);
 80025fc:	f04f 0300 	mov.w	r3, #0
 8002600:	e06b      	b.n	80026da <arm_snr_f32+0x132>
	  }
      EnergySignal += pRef[i] * pRef[i];
 8002602:	6a3b      	ldr	r3, [r7, #32]
 8002604:	009b      	lsls	r3, r3, #2
 8002606:	68fa      	ldr	r2, [r7, #12]
 8002608:	4413      	add	r3, r2
 800260a:	ed93 7a00 	vldr	s14, [r3]
 800260e:	6a3b      	ldr	r3, [r7, #32]
 8002610:	009b      	lsls	r3, r3, #2
 8002612:	68fa      	ldr	r2, [r7, #12]
 8002614:	4413      	add	r3, r2
 8002616:	edd3 7a00 	vldr	s15, [r3]
 800261a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800261e:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8002622:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002626:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
      EnergyError += (pRef[i] - pTest[i]) * (pRef[i] - pTest[i]);
 800262a:	6a3b      	ldr	r3, [r7, #32]
 800262c:	009b      	lsls	r3, r3, #2
 800262e:	68fa      	ldr	r2, [r7, #12]
 8002630:	4413      	add	r3, r2
 8002632:	ed93 7a00 	vldr	s14, [r3]
 8002636:	6a3b      	ldr	r3, [r7, #32]
 8002638:	009b      	lsls	r3, r3, #2
 800263a:	68ba      	ldr	r2, [r7, #8]
 800263c:	4413      	add	r3, r2
 800263e:	edd3 7a00 	vldr	s15, [r3]
 8002642:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002646:	6a3b      	ldr	r3, [r7, #32]
 8002648:	009b      	lsls	r3, r3, #2
 800264a:	68fa      	ldr	r2, [r7, #12]
 800264c:	4413      	add	r3, r2
 800264e:	edd3 6a00 	vldr	s13, [r3]
 8002652:	6a3b      	ldr	r3, [r7, #32]
 8002654:	009b      	lsls	r3, r3, #2
 8002656:	68ba      	ldr	r2, [r7, #8]
 8002658:	4413      	add	r3, r2
 800265a:	edd3 7a00 	vldr	s15, [r3]
 800265e:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8002662:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002666:	edd7 7a04 	vldr	s15, [r7, #16]
 800266a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800266e:	edc7 7a04 	vstr	s15, [r7, #16]
  for (i = 0; i < buffSize; i++)
 8002672:	6a3b      	ldr	r3, [r7, #32]
 8002674:	3301      	adds	r3, #1
 8002676:	623b      	str	r3, [r7, #32]
 8002678:	6a3a      	ldr	r2, [r7, #32]
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	429a      	cmp	r2, r3
 800267e:	d3a2      	bcc.n	80025c6 <arm_snr_f32+0x1e>
    }

	/* Checking for a NAN value in EnergyError */
	test =   (int *)(&EnergyError);
 8002680:	f107 0310 	add.w	r3, r7, #16
 8002684:	61fb      	str	r3, [r7, #28]
    temp =  *test;
 8002686:	69fb      	ldr	r3, [r7, #28]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	61bb      	str	r3, [r7, #24]

    if (temp == 0x7FC00000)
 800268c:	69bb      	ldr	r3, [r7, #24]
 800268e:	4a16      	ldr	r2, [pc, #88]	@ (80026e8 <arm_snr_f32+0x140>)
 8002690:	4293      	cmp	r3, r2
 8002692:	d102      	bne.n	800269a <arm_snr_f32+0xf2>
    {
  		return(0);
 8002694:	f04f 0300 	mov.w	r3, #0
 8002698:	e01f      	b.n	80026da <arm_snr_f32+0x132>
    }


  SNR = 10 * log10 (EnergySignal / EnergyError);
 800269a:	edd7 7a04 	vldr	s15, [r7, #16]
 800269e:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 80026a2:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80026a6:	ee16 0a90 	vmov	r0, s13
 80026aa:	f7fd ff4d 	bl	8000548 <__aeabi_f2d>
 80026ae:	4602      	mov	r2, r0
 80026b0:	460b      	mov	r3, r1
 80026b2:	ec43 2b10 	vmov	d0, r2, r3
 80026b6:	f008 fbd7 	bl	800ae68 <log10>
 80026ba:	ec51 0b10 	vmov	r0, r1, d0
 80026be:	f04f 0200 	mov.w	r2, #0
 80026c2:	4b0a      	ldr	r3, [pc, #40]	@ (80026ec <arm_snr_f32+0x144>)
 80026c4:	f7fd ff98 	bl	80005f8 <__aeabi_dmul>
 80026c8:	4602      	mov	r2, r0
 80026ca:	460b      	mov	r3, r1
 80026cc:	4610      	mov	r0, r2
 80026ce:	4619      	mov	r1, r3
 80026d0:	f7fe fa8a 	bl	8000be8 <__aeabi_d2f>
 80026d4:	4603      	mov	r3, r0
 80026d6:	617b      	str	r3, [r7, #20]

  return (SNR);
 80026d8:	697b      	ldr	r3, [r7, #20]

}
 80026da:	ee07 3a90 	vmov	s15, r3
 80026de:	eeb0 0a67 	vmov.f32	s0, s15
 80026e2:	3728      	adds	r7, #40	@ 0x28
 80026e4:	46bd      	mov	sp, r7
 80026e6:	bd80      	pop	{r7, pc}
 80026e8:	7fc00000 	.word	0x7fc00000
 80026ec:	40240000 	.word	0x40240000

080026f0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80026f0:	b480      	push	{r7}
 80026f2:	b083      	sub	sp, #12
 80026f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80026f6:	4b0f      	ldr	r3, [pc, #60]	@ (8002734 <HAL_MspInit+0x44>)
 80026f8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80026fa:	4a0e      	ldr	r2, [pc, #56]	@ (8002734 <HAL_MspInit+0x44>)
 80026fc:	f043 0301 	orr.w	r3, r3, #1
 8002700:	6613      	str	r3, [r2, #96]	@ 0x60
 8002702:	4b0c      	ldr	r3, [pc, #48]	@ (8002734 <HAL_MspInit+0x44>)
 8002704:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002706:	f003 0301 	and.w	r3, r3, #1
 800270a:	607b      	str	r3, [r7, #4]
 800270c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800270e:	4b09      	ldr	r3, [pc, #36]	@ (8002734 <HAL_MspInit+0x44>)
 8002710:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002712:	4a08      	ldr	r2, [pc, #32]	@ (8002734 <HAL_MspInit+0x44>)
 8002714:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002718:	6593      	str	r3, [r2, #88]	@ 0x58
 800271a:	4b06      	ldr	r3, [pc, #24]	@ (8002734 <HAL_MspInit+0x44>)
 800271c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800271e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002722:	603b      	str	r3, [r7, #0]
 8002724:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002726:	bf00      	nop
 8002728:	370c      	adds	r7, #12
 800272a:	46bd      	mov	sp, r7
 800272c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002730:	4770      	bx	lr
 8002732:	bf00      	nop
 8002734:	40021000 	.word	0x40021000

08002738 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002738:	b580      	push	{r7, lr}
 800273a:	b0ac      	sub	sp, #176	@ 0xb0
 800273c:	af00      	add	r7, sp, #0
 800273e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002740:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8002744:	2200      	movs	r2, #0
 8002746:	601a      	str	r2, [r3, #0]
 8002748:	605a      	str	r2, [r3, #4]
 800274a:	609a      	str	r2, [r3, #8]
 800274c:	60da      	str	r2, [r3, #12]
 800274e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002750:	f107 0314 	add.w	r3, r7, #20
 8002754:	2288      	movs	r2, #136	@ 0x88
 8002756:	2100      	movs	r1, #0
 8002758:	4618      	mov	r0, r3
 800275a:	f005 f83d 	bl	80077d8 <memset>
  if(hi2c->Instance==I2C1)
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	4a21      	ldr	r2, [pc, #132]	@ (80027e8 <HAL_I2C_MspInit+0xb0>)
 8002764:	4293      	cmp	r3, r2
 8002766:	d13b      	bne.n	80027e0 <HAL_I2C_MspInit+0xa8>

    /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8002768:	2340      	movs	r3, #64	@ 0x40
 800276a:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800276c:	2300      	movs	r3, #0
 800276e:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002770:	f107 0314 	add.w	r3, r7, #20
 8002774:	4618      	mov	r0, r3
 8002776:	f002 fca9 	bl	80050cc <HAL_RCCEx_PeriphCLKConfig>
 800277a:	4603      	mov	r3, r0
 800277c:	2b00      	cmp	r3, #0
 800277e:	d001      	beq.n	8002784 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8002780:	f7ff ff0c 	bl	800259c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002784:	4b19      	ldr	r3, [pc, #100]	@ (80027ec <HAL_I2C_MspInit+0xb4>)
 8002786:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002788:	4a18      	ldr	r2, [pc, #96]	@ (80027ec <HAL_I2C_MspInit+0xb4>)
 800278a:	f043 0302 	orr.w	r3, r3, #2
 800278e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002790:	4b16      	ldr	r3, [pc, #88]	@ (80027ec <HAL_I2C_MspInit+0xb4>)
 8002792:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002794:	f003 0302 	and.w	r3, r3, #2
 8002798:	613b      	str	r3, [r7, #16]
 800279a:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = ARD_D15_Pin|ARD_D14_Pin;
 800279c:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80027a0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80027a4:	2312      	movs	r3, #18
 80027a6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027aa:	2300      	movs	r3, #0
 80027ac:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80027b0:	2303      	movs	r3, #3
 80027b2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80027b6:	2304      	movs	r3, #4
 80027b8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80027bc:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80027c0:	4619      	mov	r1, r3
 80027c2:	480b      	ldr	r0, [pc, #44]	@ (80027f0 <HAL_I2C_MspInit+0xb8>)
 80027c4:	f000 fcf2 	bl	80031ac <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80027c8:	4b08      	ldr	r3, [pc, #32]	@ (80027ec <HAL_I2C_MspInit+0xb4>)
 80027ca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80027cc:	4a07      	ldr	r2, [pc, #28]	@ (80027ec <HAL_I2C_MspInit+0xb4>)
 80027ce:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80027d2:	6593      	str	r3, [r2, #88]	@ 0x58
 80027d4:	4b05      	ldr	r3, [pc, #20]	@ (80027ec <HAL_I2C_MspInit+0xb4>)
 80027d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80027d8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80027dc:	60fb      	str	r3, [r7, #12]
 80027de:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 80027e0:	bf00      	nop
 80027e2:	37b0      	adds	r7, #176	@ 0xb0
 80027e4:	46bd      	mov	sp, r7
 80027e6:	bd80      	pop	{r7, pc}
 80027e8:	40005400 	.word	0x40005400
 80027ec:	40021000 	.word	0x40021000
 80027f0:	48000400 	.word	0x48000400

080027f4 <HAL_I2C_MspDeInit>:
  * This function freeze the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 80027f4:	b580      	push	{r7, lr}
 80027f6:	b082      	sub	sp, #8
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	4a0b      	ldr	r2, [pc, #44]	@ (8002830 <HAL_I2C_MspDeInit+0x3c>)
 8002802:	4293      	cmp	r3, r2
 8002804:	d10f      	bne.n	8002826 <HAL_I2C_MspDeInit+0x32>
  {
    /* USER CODE BEGIN I2C1_MspDeInit 0 */

    /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8002806:	4b0b      	ldr	r3, [pc, #44]	@ (8002834 <HAL_I2C_MspDeInit+0x40>)
 8002808:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800280a:	4a0a      	ldr	r2, [pc, #40]	@ (8002834 <HAL_I2C_MspDeInit+0x40>)
 800280c:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8002810:	6593      	str	r3, [r2, #88]	@ 0x58

    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(ARD_D15_GPIO_Port, ARD_D15_Pin);
 8002812:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002816:	4808      	ldr	r0, [pc, #32]	@ (8002838 <HAL_I2C_MspDeInit+0x44>)
 8002818:	f000 fe72 	bl	8003500 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(ARD_D14_GPIO_Port, ARD_D14_Pin);
 800281c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002820:	4805      	ldr	r0, [pc, #20]	@ (8002838 <HAL_I2C_MspDeInit+0x44>)
 8002822:	f000 fe6d 	bl	8003500 <HAL_GPIO_DeInit>
    /* USER CODE BEGIN I2C1_MspDeInit 1 */

    /* USER CODE END I2C1_MspDeInit 1 */
  }

}
 8002826:	bf00      	nop
 8002828:	3708      	adds	r7, #8
 800282a:	46bd      	mov	sp, r7
 800282c:	bd80      	pop	{r7, pc}
 800282e:	bf00      	nop
 8002830:	40005400 	.word	0x40005400
 8002834:	40021000 	.word	0x40021000
 8002838:	48000400 	.word	0x48000400

0800283c <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800283c:	b580      	push	{r7, lr}
 800283e:	b08a      	sub	sp, #40	@ 0x28
 8002840:	af00      	add	r7, sp, #0
 8002842:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002844:	f107 0314 	add.w	r3, r7, #20
 8002848:	2200      	movs	r2, #0
 800284a:	601a      	str	r2, [r3, #0]
 800284c:	605a      	str	r2, [r3, #4]
 800284e:	609a      	str	r2, [r3, #8]
 8002850:	60da      	str	r2, [r3, #12]
 8002852:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	4a17      	ldr	r2, [pc, #92]	@ (80028b8 <HAL_SPI_MspInit+0x7c>)
 800285a:	4293      	cmp	r3, r2
 800285c:	d128      	bne.n	80028b0 <HAL_SPI_MspInit+0x74>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800285e:	4b17      	ldr	r3, [pc, #92]	@ (80028bc <HAL_SPI_MspInit+0x80>)
 8002860:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002862:	4a16      	ldr	r2, [pc, #88]	@ (80028bc <HAL_SPI_MspInit+0x80>)
 8002864:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002868:	6613      	str	r3, [r2, #96]	@ 0x60
 800286a:	4b14      	ldr	r3, [pc, #80]	@ (80028bc <HAL_SPI_MspInit+0x80>)
 800286c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800286e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002872:	613b      	str	r3, [r7, #16]
 8002874:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002876:	4b11      	ldr	r3, [pc, #68]	@ (80028bc <HAL_SPI_MspInit+0x80>)
 8002878:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800287a:	4a10      	ldr	r2, [pc, #64]	@ (80028bc <HAL_SPI_MspInit+0x80>)
 800287c:	f043 0301 	orr.w	r3, r3, #1
 8002880:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002882:	4b0e      	ldr	r3, [pc, #56]	@ (80028bc <HAL_SPI_MspInit+0x80>)
 8002884:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002886:	f003 0301 	and.w	r3, r3, #1
 800288a:	60fb      	str	r3, [r7, #12]
 800288c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = ARD_D13_Pin|ARD_D12_Pin|ARD_D11_Pin;
 800288e:	23e0      	movs	r3, #224	@ 0xe0
 8002890:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002892:	2302      	movs	r3, #2
 8002894:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002896:	2300      	movs	r3, #0
 8002898:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800289a:	2303      	movs	r3, #3
 800289c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800289e:	2305      	movs	r3, #5
 80028a0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80028a2:	f107 0314 	add.w	r3, r7, #20
 80028a6:	4619      	mov	r1, r3
 80028a8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80028ac:	f000 fc7e 	bl	80031ac <HAL_GPIO_Init>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 80028b0:	bf00      	nop
 80028b2:	3728      	adds	r7, #40	@ 0x28
 80028b4:	46bd      	mov	sp, r7
 80028b6:	bd80      	pop	{r7, pc}
 80028b8:	40013000 	.word	0x40013000
 80028bc:	40021000 	.word	0x40021000

080028c0 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80028c0:	b580      	push	{r7, lr}
 80028c2:	b0ac      	sub	sp, #176	@ 0xb0
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028c8:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80028cc:	2200      	movs	r2, #0
 80028ce:	601a      	str	r2, [r3, #0]
 80028d0:	605a      	str	r2, [r3, #4]
 80028d2:	609a      	str	r2, [r3, #8]
 80028d4:	60da      	str	r2, [r3, #12]
 80028d6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80028d8:	f107 0314 	add.w	r3, r7, #20
 80028dc:	2288      	movs	r2, #136	@ 0x88
 80028de:	2100      	movs	r1, #0
 80028e0:	4618      	mov	r0, r3
 80028e2:	f004 ff79 	bl	80077d8 <memset>
  if(huart->Instance==USART1)
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	4a21      	ldr	r2, [pc, #132]	@ (8002970 <HAL_UART_MspInit+0xb0>)
 80028ec:	4293      	cmp	r3, r2
 80028ee:	d13a      	bne.n	8002966 <HAL_UART_MspInit+0xa6>

    /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80028f0:	2301      	movs	r3, #1
 80028f2:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80028f4:	2300      	movs	r3, #0
 80028f6:	64fb      	str	r3, [r7, #76]	@ 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80028f8:	f107 0314 	add.w	r3, r7, #20
 80028fc:	4618      	mov	r0, r3
 80028fe:	f002 fbe5 	bl	80050cc <HAL_RCCEx_PeriphCLKConfig>
 8002902:	4603      	mov	r3, r0
 8002904:	2b00      	cmp	r3, #0
 8002906:	d001      	beq.n	800290c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002908:	f7ff fe48 	bl	800259c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800290c:	4b19      	ldr	r3, [pc, #100]	@ (8002974 <HAL_UART_MspInit+0xb4>)
 800290e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002910:	4a18      	ldr	r2, [pc, #96]	@ (8002974 <HAL_UART_MspInit+0xb4>)
 8002912:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002916:	6613      	str	r3, [r2, #96]	@ 0x60
 8002918:	4b16      	ldr	r3, [pc, #88]	@ (8002974 <HAL_UART_MspInit+0xb4>)
 800291a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800291c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002920:	613b      	str	r3, [r7, #16]
 8002922:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002924:	4b13      	ldr	r3, [pc, #76]	@ (8002974 <HAL_UART_MspInit+0xb4>)
 8002926:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002928:	4a12      	ldr	r2, [pc, #72]	@ (8002974 <HAL_UART_MspInit+0xb4>)
 800292a:	f043 0302 	orr.w	r3, r3, #2
 800292e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002930:	4b10      	ldr	r3, [pc, #64]	@ (8002974 <HAL_UART_MspInit+0xb4>)
 8002932:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002934:	f003 0302 	and.w	r3, r3, #2
 8002938:	60fb      	str	r3, [r7, #12]
 800293a:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = ST_LINK_UART1_TX_Pin|ST_LINK_UART1_RX_Pin;
 800293c:	23c0      	movs	r3, #192	@ 0xc0
 800293e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002942:	2302      	movs	r3, #2
 8002944:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002948:	2300      	movs	r3, #0
 800294a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800294e:	2303      	movs	r3, #3
 8002950:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002954:	2307      	movs	r3, #7
 8002956:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800295a:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800295e:	4619      	mov	r1, r3
 8002960:	4805      	ldr	r0, [pc, #20]	@ (8002978 <HAL_UART_MspInit+0xb8>)
 8002962:	f000 fc23 	bl	80031ac <HAL_GPIO_Init>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 8002966:	bf00      	nop
 8002968:	37b0      	adds	r7, #176	@ 0xb0
 800296a:	46bd      	mov	sp, r7
 800296c:	bd80      	pop	{r7, pc}
 800296e:	bf00      	nop
 8002970:	40013800 	.word	0x40013800
 8002974:	40021000 	.word	0x40021000
 8002978:	48000400 	.word	0x48000400

0800297c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800297c:	b480      	push	{r7}
 800297e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002980:	bf00      	nop
 8002982:	e7fd      	b.n	8002980 <NMI_Handler+0x4>

08002984 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002984:	b480      	push	{r7}
 8002986:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002988:	bf00      	nop
 800298a:	e7fd      	b.n	8002988 <HardFault_Handler+0x4>

0800298c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800298c:	b480      	push	{r7}
 800298e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002990:	bf00      	nop
 8002992:	e7fd      	b.n	8002990 <MemManage_Handler+0x4>

08002994 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002994:	b480      	push	{r7}
 8002996:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002998:	bf00      	nop
 800299a:	e7fd      	b.n	8002998 <BusFault_Handler+0x4>

0800299c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800299c:	b480      	push	{r7}
 800299e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80029a0:	bf00      	nop
 80029a2:	e7fd      	b.n	80029a0 <UsageFault_Handler+0x4>

080029a4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80029a4:	b480      	push	{r7}
 80029a6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80029a8:	bf00      	nop
 80029aa:	46bd      	mov	sp, r7
 80029ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b0:	4770      	bx	lr

080029b2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80029b2:	b480      	push	{r7}
 80029b4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80029b6:	bf00      	nop
 80029b8:	46bd      	mov	sp, r7
 80029ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029be:	4770      	bx	lr

080029c0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80029c0:	b480      	push	{r7}
 80029c2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80029c4:	bf00      	nop
 80029c6:	46bd      	mov	sp, r7
 80029c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029cc:	4770      	bx	lr

080029ce <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80029ce:	b580      	push	{r7, lr}
 80029d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80029d2:	f000 fa95 	bl	8002f00 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80029d6:	bf00      	nop
 80029d8:	bd80      	pop	{r7, pc}

080029da <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80029da:	b580      	push	{r7, lr}
 80029dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SPSGRF_915_GPIO3_EXTI5_Pin);
 80029de:	2020      	movs	r0, #32
 80029e0:	f000 fe9a 	bl	8003718 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(SPBTLE_RF_IRQ_EXTI6_Pin);
 80029e4:	2040      	movs	r0, #64	@ 0x40
 80029e6:	f000 fe97 	bl	8003718 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(VL53L0X_GPIO1_EXTI7_Pin);
 80029ea:	2080      	movs	r0, #128	@ 0x80
 80029ec:	f000 fe94 	bl	8003718 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM3MDL_DRDY_EXTI8_Pin);
 80029f0:	f44f 7080 	mov.w	r0, #256	@ 0x100
 80029f4:	f000 fe90 	bl	8003718 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80029f8:	bf00      	nop
 80029fa:	bd80      	pop	{r7, pc}

080029fc <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80029fc:	b580      	push	{r7, lr}
 80029fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LPS22HB_INT_DRDY_EXTI0_Pin);
 8002a00:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8002a04:	f000 fe88 	bl	8003718 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM6DSL_INT1_EXTI11_Pin);
 8002a08:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8002a0c:	f000 fe84 	bl	8003718 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BUTTON_EXTI13_Pin);
 8002a10:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8002a14:	f000 fe80 	bl	8003718 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ARD_D2_Pin);
 8002a18:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8002a1c:	f000 fe7c 	bl	8003718 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(HTS221_DRDY_EXTI15_Pin);
 8002a20:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8002a24:	f000 fe78 	bl	8003718 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002a28:	bf00      	nop
 8002a2a:	bd80      	pop	{r7, pc}

08002a2c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002a2c:	b480      	push	{r7}
 8002a2e:	af00      	add	r7, sp, #0
  return 1;
 8002a30:	2301      	movs	r3, #1
}
 8002a32:	4618      	mov	r0, r3
 8002a34:	46bd      	mov	sp, r7
 8002a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a3a:	4770      	bx	lr

08002a3c <_kill>:

int _kill(int pid, int sig)
{
 8002a3c:	b580      	push	{r7, lr}
 8002a3e:	b082      	sub	sp, #8
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	6078      	str	r0, [r7, #4]
 8002a44:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002a46:	f004 ff19 	bl	800787c <__errno>
 8002a4a:	4603      	mov	r3, r0
 8002a4c:	2216      	movs	r2, #22
 8002a4e:	601a      	str	r2, [r3, #0]
  return -1;
 8002a50:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002a54:	4618      	mov	r0, r3
 8002a56:	3708      	adds	r7, #8
 8002a58:	46bd      	mov	sp, r7
 8002a5a:	bd80      	pop	{r7, pc}

08002a5c <_exit>:

void _exit (int status)
{
 8002a5c:	b580      	push	{r7, lr}
 8002a5e:	b082      	sub	sp, #8
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002a64:	f04f 31ff 	mov.w	r1, #4294967295
 8002a68:	6878      	ldr	r0, [r7, #4]
 8002a6a:	f7ff ffe7 	bl	8002a3c <_kill>
  while (1) {}    /* Make sure we hang here */
 8002a6e:	bf00      	nop
 8002a70:	e7fd      	b.n	8002a6e <_exit+0x12>

08002a72 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002a72:	b580      	push	{r7, lr}
 8002a74:	b086      	sub	sp, #24
 8002a76:	af00      	add	r7, sp, #0
 8002a78:	60f8      	str	r0, [r7, #12]
 8002a7a:	60b9      	str	r1, [r7, #8]
 8002a7c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002a7e:	2300      	movs	r3, #0
 8002a80:	617b      	str	r3, [r7, #20]
 8002a82:	e00a      	b.n	8002a9a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002a84:	f3af 8000 	nop.w
 8002a88:	4601      	mov	r1, r0
 8002a8a:	68bb      	ldr	r3, [r7, #8]
 8002a8c:	1c5a      	adds	r2, r3, #1
 8002a8e:	60ba      	str	r2, [r7, #8]
 8002a90:	b2ca      	uxtb	r2, r1
 8002a92:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002a94:	697b      	ldr	r3, [r7, #20]
 8002a96:	3301      	adds	r3, #1
 8002a98:	617b      	str	r3, [r7, #20]
 8002a9a:	697a      	ldr	r2, [r7, #20]
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	429a      	cmp	r2, r3
 8002aa0:	dbf0      	blt.n	8002a84 <_read+0x12>
  }

  return len;
 8002aa2:	687b      	ldr	r3, [r7, #4]
}
 8002aa4:	4618      	mov	r0, r3
 8002aa6:	3718      	adds	r7, #24
 8002aa8:	46bd      	mov	sp, r7
 8002aaa:	bd80      	pop	{r7, pc}

08002aac <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002aac:	b580      	push	{r7, lr}
 8002aae:	b086      	sub	sp, #24
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	60f8      	str	r0, [r7, #12]
 8002ab4:	60b9      	str	r1, [r7, #8]
 8002ab6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002ab8:	2300      	movs	r3, #0
 8002aba:	617b      	str	r3, [r7, #20]
 8002abc:	e009      	b.n	8002ad2 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002abe:	68bb      	ldr	r3, [r7, #8]
 8002ac0:	1c5a      	adds	r2, r3, #1
 8002ac2:	60ba      	str	r2, [r7, #8]
 8002ac4:	781b      	ldrb	r3, [r3, #0]
 8002ac6:	4618      	mov	r0, r3
 8002ac8:	f7fe fc52 	bl	8001370 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002acc:	697b      	ldr	r3, [r7, #20]
 8002ace:	3301      	adds	r3, #1
 8002ad0:	617b      	str	r3, [r7, #20]
 8002ad2:	697a      	ldr	r2, [r7, #20]
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	429a      	cmp	r2, r3
 8002ad8:	dbf1      	blt.n	8002abe <_write+0x12>
  }
  return len;
 8002ada:	687b      	ldr	r3, [r7, #4]
}
 8002adc:	4618      	mov	r0, r3
 8002ade:	3718      	adds	r7, #24
 8002ae0:	46bd      	mov	sp, r7
 8002ae2:	bd80      	pop	{r7, pc}

08002ae4 <_close>:

int _close(int file)
{
 8002ae4:	b480      	push	{r7}
 8002ae6:	b083      	sub	sp, #12
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002aec:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002af0:	4618      	mov	r0, r3
 8002af2:	370c      	adds	r7, #12
 8002af4:	46bd      	mov	sp, r7
 8002af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002afa:	4770      	bx	lr

08002afc <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002afc:	b480      	push	{r7}
 8002afe:	b083      	sub	sp, #12
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	6078      	str	r0, [r7, #4]
 8002b04:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002b06:	683b      	ldr	r3, [r7, #0]
 8002b08:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002b0c:	605a      	str	r2, [r3, #4]
  return 0;
 8002b0e:	2300      	movs	r3, #0
}
 8002b10:	4618      	mov	r0, r3
 8002b12:	370c      	adds	r7, #12
 8002b14:	46bd      	mov	sp, r7
 8002b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b1a:	4770      	bx	lr

08002b1c <_isatty>:

int _isatty(int file)
{
 8002b1c:	b480      	push	{r7}
 8002b1e:	b083      	sub	sp, #12
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002b24:	2301      	movs	r3, #1
}
 8002b26:	4618      	mov	r0, r3
 8002b28:	370c      	adds	r7, #12
 8002b2a:	46bd      	mov	sp, r7
 8002b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b30:	4770      	bx	lr

08002b32 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002b32:	b480      	push	{r7}
 8002b34:	b085      	sub	sp, #20
 8002b36:	af00      	add	r7, sp, #0
 8002b38:	60f8      	str	r0, [r7, #12]
 8002b3a:	60b9      	str	r1, [r7, #8]
 8002b3c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002b3e:	2300      	movs	r3, #0
}
 8002b40:	4618      	mov	r0, r3
 8002b42:	3714      	adds	r7, #20
 8002b44:	46bd      	mov	sp, r7
 8002b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b4a:	4770      	bx	lr

08002b4c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002b4c:	b580      	push	{r7, lr}
 8002b4e:	b086      	sub	sp, #24
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002b54:	4a14      	ldr	r2, [pc, #80]	@ (8002ba8 <_sbrk+0x5c>)
 8002b56:	4b15      	ldr	r3, [pc, #84]	@ (8002bac <_sbrk+0x60>)
 8002b58:	1ad3      	subs	r3, r2, r3
 8002b5a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002b5c:	697b      	ldr	r3, [r7, #20]
 8002b5e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002b60:	4b13      	ldr	r3, [pc, #76]	@ (8002bb0 <_sbrk+0x64>)
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d102      	bne.n	8002b6e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002b68:	4b11      	ldr	r3, [pc, #68]	@ (8002bb0 <_sbrk+0x64>)
 8002b6a:	4a12      	ldr	r2, [pc, #72]	@ (8002bb4 <_sbrk+0x68>)
 8002b6c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002b6e:	4b10      	ldr	r3, [pc, #64]	@ (8002bb0 <_sbrk+0x64>)
 8002b70:	681a      	ldr	r2, [r3, #0]
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	4413      	add	r3, r2
 8002b76:	693a      	ldr	r2, [r7, #16]
 8002b78:	429a      	cmp	r2, r3
 8002b7a:	d207      	bcs.n	8002b8c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002b7c:	f004 fe7e 	bl	800787c <__errno>
 8002b80:	4603      	mov	r3, r0
 8002b82:	220c      	movs	r2, #12
 8002b84:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002b86:	f04f 33ff 	mov.w	r3, #4294967295
 8002b8a:	e009      	b.n	8002ba0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002b8c:	4b08      	ldr	r3, [pc, #32]	@ (8002bb0 <_sbrk+0x64>)
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002b92:	4b07      	ldr	r3, [pc, #28]	@ (8002bb0 <_sbrk+0x64>)
 8002b94:	681a      	ldr	r2, [r3, #0]
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	4413      	add	r3, r2
 8002b9a:	4a05      	ldr	r2, [pc, #20]	@ (8002bb0 <_sbrk+0x64>)
 8002b9c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002b9e:	68fb      	ldr	r3, [r7, #12]
}
 8002ba0:	4618      	mov	r0, r3
 8002ba2:	3718      	adds	r7, #24
 8002ba4:	46bd      	mov	sp, r7
 8002ba6:	bd80      	pop	{r7, pc}
 8002ba8:	20018000 	.word	0x20018000
 8002bac:	00000400 	.word	0x00000400
 8002bb0:	200014c4 	.word	0x200014c4
 8002bb4:	20001618 	.word	0x20001618

08002bb8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8002bb8:	b480      	push	{r7}
 8002bba:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002bbc:	4b06      	ldr	r3, [pc, #24]	@ (8002bd8 <SystemInit+0x20>)
 8002bbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002bc2:	4a05      	ldr	r2, [pc, #20]	@ (8002bd8 <SystemInit+0x20>)
 8002bc4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002bc8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8002bcc:	bf00      	nop
 8002bce:	46bd      	mov	sp, r7
 8002bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd4:	4770      	bx	lr
 8002bd6:	bf00      	nop
 8002bd8:	e000ed00 	.word	0xe000ed00

08002bdc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002bdc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002c14 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002be0:	f7ff ffea 	bl	8002bb8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002be4:	480c      	ldr	r0, [pc, #48]	@ (8002c18 <LoopForever+0x6>)
  ldr r1, =_edata
 8002be6:	490d      	ldr	r1, [pc, #52]	@ (8002c1c <LoopForever+0xa>)
  ldr r2, =_sidata
 8002be8:	4a0d      	ldr	r2, [pc, #52]	@ (8002c20 <LoopForever+0xe>)
  movs r3, #0
 8002bea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002bec:	e002      	b.n	8002bf4 <LoopCopyDataInit>

08002bee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002bee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002bf0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002bf2:	3304      	adds	r3, #4

08002bf4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002bf4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002bf6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002bf8:	d3f9      	bcc.n	8002bee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002bfa:	4a0a      	ldr	r2, [pc, #40]	@ (8002c24 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002bfc:	4c0a      	ldr	r4, [pc, #40]	@ (8002c28 <LoopForever+0x16>)
  movs r3, #0
 8002bfe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002c00:	e001      	b.n	8002c06 <LoopFillZerobss>

08002c02 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002c02:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002c04:	3204      	adds	r2, #4

08002c06 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002c06:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002c08:	d3fb      	bcc.n	8002c02 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002c0a:	f004 fe3d 	bl	8007888 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002c0e:	f7ff f913 	bl	8001e38 <main>

08002c12 <LoopForever>:

LoopForever:
    b LoopForever
 8002c12:	e7fe      	b.n	8002c12 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002c14:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8002c18:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002c1c:	20000c14 	.word	0x20000c14
  ldr r2, =_sidata
 8002c20:	0800b88c 	.word	0x0800b88c
  ldr r2, =_sbss
 8002c24:	20000c14 	.word	0x20000c14
  ldr r4, =_ebss
 8002c28:	20001618 	.word	0x20001618

08002c2c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002c2c:	e7fe      	b.n	8002c2c <ADC1_2_IRQHandler>

08002c2e <LSM6DSL_AccInit>:
/**
  * @brief  Set LSM6DSL Accelerometer Initialization.
  * @param  InitStruct: Init parameters
  */
void LSM6DSL_AccInit(uint16_t InitStruct)
{  
 8002c2e:	b580      	push	{r7, lr}
 8002c30:	b084      	sub	sp, #16
 8002c32:	af00      	add	r7, sp, #0
 8002c34:	4603      	mov	r3, r0
 8002c36:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8002c38:	2300      	movs	r3, #0
 8002c3a:	73fb      	strb	r3, [r7, #15]
  uint8_t tmp;

  /* Read CTRL1_XL */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 8002c3c:	2110      	movs	r1, #16
 8002c3e:	20d4      	movs	r0, #212	@ 0xd4
 8002c40:	f7fe fb02 	bl	8001248 <SENSOR_IO_Read>
 8002c44:	4603      	mov	r3, r0
 8002c46:	73bb      	strb	r3, [r7, #14]

  /* Write value to ACC MEMS CTRL1_XL register: FS and Data Rate */
  ctrl = (uint8_t) InitStruct;
 8002c48:	88fb      	ldrh	r3, [r7, #6]
 8002c4a:	73fb      	strb	r3, [r7, #15]
  tmp &= ~(0xFC);
 8002c4c:	7bbb      	ldrb	r3, [r7, #14]
 8002c4e:	f003 0303 	and.w	r3, r3, #3
 8002c52:	73bb      	strb	r3, [r7, #14]
  tmp |= ctrl;
 8002c54:	7bba      	ldrb	r2, [r7, #14]
 8002c56:	7bfb      	ldrb	r3, [r7, #15]
 8002c58:	4313      	orrs	r3, r2
 8002c5a:	73bb      	strb	r3, [r7, #14]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL, tmp);
 8002c5c:	7bbb      	ldrb	r3, [r7, #14]
 8002c5e:	461a      	mov	r2, r3
 8002c60:	2110      	movs	r1, #16
 8002c62:	20d4      	movs	r0, #212	@ 0xd4
 8002c64:	f7fe fad6 	bl	8001214 <SENSOR_IO_Write>

  /* Read CTRL3_C */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C);
 8002c68:	2112      	movs	r1, #18
 8002c6a:	20d4      	movs	r0, #212	@ 0xd4
 8002c6c:	f7fe faec 	bl	8001248 <SENSOR_IO_Read>
 8002c70:	4603      	mov	r3, r0
 8002c72:	73bb      	strb	r3, [r7, #14]

  /* Write value to ACC MEMS CTRL3_C register: BDU and Auto-increment */
  ctrl = ((uint8_t) (InitStruct >> 8));
 8002c74:	88fb      	ldrh	r3, [r7, #6]
 8002c76:	0a1b      	lsrs	r3, r3, #8
 8002c78:	b29b      	uxth	r3, r3
 8002c7a:	73fb      	strb	r3, [r7, #15]
  tmp &= ~(0x44);
 8002c7c:	7bbb      	ldrb	r3, [r7, #14]
 8002c7e:	f023 0344 	bic.w	r3, r3, #68	@ 0x44
 8002c82:	73bb      	strb	r3, [r7, #14]
  tmp |= ctrl; 
 8002c84:	7bba      	ldrb	r2, [r7, #14]
 8002c86:	7bfb      	ldrb	r3, [r7, #15]
 8002c88:	4313      	orrs	r3, r2
 8002c8a:	73bb      	strb	r3, [r7, #14]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C, tmp);
 8002c8c:	7bbb      	ldrb	r3, [r7, #14]
 8002c8e:	461a      	mov	r2, r3
 8002c90:	2112      	movs	r1, #18
 8002c92:	20d4      	movs	r0, #212	@ 0xd4
 8002c94:	f7fe fabe 	bl	8001214 <SENSOR_IO_Write>
}
 8002c98:	bf00      	nop
 8002c9a:	3710      	adds	r7, #16
 8002c9c:	46bd      	mov	sp, r7
 8002c9e:	bd80      	pop	{r7, pc}

08002ca0 <LSM6DSL_AccDeInit>:

/**
  * @brief  LSM6DSL Accelerometer De-initialization.
  */
void LSM6DSL_AccDeInit(void)
{
 8002ca0:	b580      	push	{r7, lr}
 8002ca2:	b082      	sub	sp, #8
 8002ca4:	af00      	add	r7, sp, #0
  uint8_t ctrl = 0x00;
 8002ca6:	2300      	movs	r3, #0
 8002ca8:	71fb      	strb	r3, [r7, #7]
  
  /* Read control register 1 value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 8002caa:	2110      	movs	r1, #16
 8002cac:	20d4      	movs	r0, #212	@ 0xd4
 8002cae:	f7fe facb 	bl	8001248 <SENSOR_IO_Read>
 8002cb2:	4603      	mov	r3, r0
 8002cb4:	71fb      	strb	r3, [r7, #7]

  /* Clear ODR bits */
  ctrl &= ~(LSM6DSL_ODR_BITPOSITION);
 8002cb6:	79fb      	ldrb	r3, [r7, #7]
 8002cb8:	f003 030f 	and.w	r3, r3, #15
 8002cbc:	71fb      	strb	r3, [r7, #7]

  /* Set Power down */
  ctrl |= LSM6DSL_ODR_POWER_DOWN;
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL, ctrl);
 8002cbe:	79fb      	ldrb	r3, [r7, #7]
 8002cc0:	461a      	mov	r2, r3
 8002cc2:	2110      	movs	r1, #16
 8002cc4:	20d4      	movs	r0, #212	@ 0xd4
 8002cc6:	f7fe faa5 	bl	8001214 <SENSOR_IO_Write>
}
 8002cca:	bf00      	nop
 8002ccc:	3708      	adds	r7, #8
 8002cce:	46bd      	mov	sp, r7
 8002cd0:	bd80      	pop	{r7, pc}

08002cd2 <LSM6DSL_AccReadID>:
/**
  * @brief  Read LSM6DSL ID.
  * @retval ID 
  */
uint8_t LSM6DSL_AccReadID(void)
{  
 8002cd2:	b580      	push	{r7, lr}
 8002cd4:	af00      	add	r7, sp, #0
  /* IO interface initialization */
  SENSOR_IO_Init();
 8002cd6:	f7fe fa93 	bl	8001200 <SENSOR_IO_Init>
  /* Read value at Who am I register address */
  return (SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_WHO_AM_I_REG));
 8002cda:	210f      	movs	r1, #15
 8002cdc:	20d4      	movs	r0, #212	@ 0xd4
 8002cde:	f7fe fab3 	bl	8001248 <SENSOR_IO_Read>
 8002ce2:	4603      	mov	r3, r0
}
 8002ce4:	4618      	mov	r0, r3
 8002ce6:	bd80      	pop	{r7, pc}

08002ce8 <LSM6DSL_AccLowPower>:
/**
  * @brief  Set/Unset Accelerometer in low power mode.
  * @param  status 0 means disable Low Power Mode, otherwise Low Power Mode is enabled
  */
void LSM6DSL_AccLowPower(uint16_t status)
{
 8002ce8:	b580      	push	{r7, lr}
 8002cea:	b084      	sub	sp, #16
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	4603      	mov	r3, r0
 8002cf0:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8002cf2:	2300      	movs	r3, #0
 8002cf4:	73fb      	strb	r3, [r7, #15]
  
  /* Read CTRL6_C value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL6_C);
 8002cf6:	2115      	movs	r1, #21
 8002cf8:	20d4      	movs	r0, #212	@ 0xd4
 8002cfa:	f7fe faa5 	bl	8001248 <SENSOR_IO_Read>
 8002cfe:	4603      	mov	r3, r0
 8002d00:	73fb      	strb	r3, [r7, #15]

  /* Clear Low Power Mode bit */
  ctrl &= ~(0x10);
 8002d02:	7bfb      	ldrb	r3, [r7, #15]
 8002d04:	f023 0310 	bic.w	r3, r3, #16
 8002d08:	73fb      	strb	r3, [r7, #15]

  /* Set Low Power Mode */
  if(status)
 8002d0a:	88fb      	ldrh	r3, [r7, #6]
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d003      	beq.n	8002d18 <LSM6DSL_AccLowPower+0x30>
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_XL_ENABLED;
 8002d10:	7bfb      	ldrb	r3, [r7, #15]
 8002d12:	f043 0310 	orr.w	r3, r3, #16
 8002d16:	73fb      	strb	r3, [r7, #15]
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_XL_DISABLED;
  }
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL6_C, ctrl);
 8002d18:	7bfb      	ldrb	r3, [r7, #15]
 8002d1a:	461a      	mov	r2, r3
 8002d1c:	2115      	movs	r1, #21
 8002d1e:	20d4      	movs	r0, #212	@ 0xd4
 8002d20:	f7fe fa78 	bl	8001214 <SENSOR_IO_Write>
}
 8002d24:	bf00      	nop
 8002d26:	3710      	adds	r7, #16
 8002d28:	46bd      	mov	sp, r7
 8002d2a:	bd80      	pop	{r7, pc}

08002d2c <LSM6DSL_AccReadXYZ>:
/**
  * @brief  Read X, Y & Z Acceleration values 
  * @param  pData: Data out pointer
  */
void LSM6DSL_AccReadXYZ(int16_t* pData)
{
 8002d2c:	b580      	push	{r7, lr}
 8002d2e:	b088      	sub	sp, #32
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	6078      	str	r0, [r7, #4]
  int16_t pnRawData[3];
  uint8_t ctrlx= 0;
 8002d34:	2300      	movs	r3, #0
 8002d36:	75fb      	strb	r3, [r7, #23]
  uint8_t buffer[6];
  uint8_t i = 0;
 8002d38:	2300      	movs	r3, #0
 8002d3a:	77fb      	strb	r3, [r7, #31]
  float sensitivity = 0;
 8002d3c:	f04f 0300 	mov.w	r3, #0
 8002d40:	61bb      	str	r3, [r7, #24]
  
  /* Read the acceleration control register content */
  ctrlx = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 8002d42:	2110      	movs	r1, #16
 8002d44:	20d4      	movs	r0, #212	@ 0xd4
 8002d46:	f7fe fa7f 	bl	8001248 <SENSOR_IO_Read>
 8002d4a:	4603      	mov	r3, r0
 8002d4c:	75fb      	strb	r3, [r7, #23]
  
  /* Read output register X, Y & Z acceleration */
  SENSOR_IO_ReadMultiple(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_OUTX_L_XL, buffer, 6);
 8002d4e:	f107 0208 	add.w	r2, r7, #8
 8002d52:	2306      	movs	r3, #6
 8002d54:	2128      	movs	r1, #40	@ 0x28
 8002d56:	20d4      	movs	r0, #212	@ 0xd4
 8002d58:	f7fe fa94 	bl	8001284 <SENSOR_IO_ReadMultiple>
  
  for(i=0; i<3; i++)
 8002d5c:	2300      	movs	r3, #0
 8002d5e:	77fb      	strb	r3, [r7, #31]
 8002d60:	e01a      	b.n	8002d98 <LSM6DSL_AccReadXYZ+0x6c>
  {
    pnRawData[i]=((((uint16_t)buffer[2*i+1]) << 8) + (uint16_t)buffer[2*i]);
 8002d62:	7ffb      	ldrb	r3, [r7, #31]
 8002d64:	005b      	lsls	r3, r3, #1
 8002d66:	3301      	adds	r3, #1
 8002d68:	3320      	adds	r3, #32
 8002d6a:	443b      	add	r3, r7
 8002d6c:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8002d70:	021b      	lsls	r3, r3, #8
 8002d72:	b29b      	uxth	r3, r3
 8002d74:	7ffa      	ldrb	r2, [r7, #31]
 8002d76:	0052      	lsls	r2, r2, #1
 8002d78:	3220      	adds	r2, #32
 8002d7a:	443a      	add	r2, r7
 8002d7c:	f812 2c18 	ldrb.w	r2, [r2, #-24]
 8002d80:	4413      	add	r3, r2
 8002d82:	b29a      	uxth	r2, r3
 8002d84:	7ffb      	ldrb	r3, [r7, #31]
 8002d86:	b212      	sxth	r2, r2
 8002d88:	005b      	lsls	r3, r3, #1
 8002d8a:	3320      	adds	r3, #32
 8002d8c:	443b      	add	r3, r7
 8002d8e:	f823 2c10 	strh.w	r2, [r3, #-16]
  for(i=0; i<3; i++)
 8002d92:	7ffb      	ldrb	r3, [r7, #31]
 8002d94:	3301      	adds	r3, #1
 8002d96:	77fb      	strb	r3, [r7, #31]
 8002d98:	7ffb      	ldrb	r3, [r7, #31]
 8002d9a:	2b02      	cmp	r3, #2
 8002d9c:	d9e1      	bls.n	8002d62 <LSM6DSL_AccReadXYZ+0x36>
  }
  
  /* Normal mode */
  /* Switch the sensitivity value set in the CRTL1_XL */
  switch(ctrlx & 0x0C)
 8002d9e:	7dfb      	ldrb	r3, [r7, #23]
 8002da0:	f003 030c 	and.w	r3, r3, #12
 8002da4:	2b0c      	cmp	r3, #12
 8002da6:	d829      	bhi.n	8002dfc <LSM6DSL_AccReadXYZ+0xd0>
 8002da8:	a201      	add	r2, pc, #4	@ (adr r2, 8002db0 <LSM6DSL_AccReadXYZ+0x84>)
 8002daa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002dae:	bf00      	nop
 8002db0:	08002de5 	.word	0x08002de5
 8002db4:	08002dfd 	.word	0x08002dfd
 8002db8:	08002dfd 	.word	0x08002dfd
 8002dbc:	08002dfd 	.word	0x08002dfd
 8002dc0:	08002df7 	.word	0x08002df7
 8002dc4:	08002dfd 	.word	0x08002dfd
 8002dc8:	08002dfd 	.word	0x08002dfd
 8002dcc:	08002dfd 	.word	0x08002dfd
 8002dd0:	08002deb 	.word	0x08002deb
 8002dd4:	08002dfd 	.word	0x08002dfd
 8002dd8:	08002dfd 	.word	0x08002dfd
 8002ddc:	08002dfd 	.word	0x08002dfd
 8002de0:	08002df1 	.word	0x08002df1
  {
  case LSM6DSL_ACC_FULLSCALE_2G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_2G;
 8002de4:	4b18      	ldr	r3, [pc, #96]	@ (8002e48 <LSM6DSL_AccReadXYZ+0x11c>)
 8002de6:	61bb      	str	r3, [r7, #24]
    break;
 8002de8:	e008      	b.n	8002dfc <LSM6DSL_AccReadXYZ+0xd0>
  case LSM6DSL_ACC_FULLSCALE_4G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_4G;
 8002dea:	4b18      	ldr	r3, [pc, #96]	@ (8002e4c <LSM6DSL_AccReadXYZ+0x120>)
 8002dec:	61bb      	str	r3, [r7, #24]
    break;
 8002dee:	e005      	b.n	8002dfc <LSM6DSL_AccReadXYZ+0xd0>
  case LSM6DSL_ACC_FULLSCALE_8G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_8G;
 8002df0:	4b17      	ldr	r3, [pc, #92]	@ (8002e50 <LSM6DSL_AccReadXYZ+0x124>)
 8002df2:	61bb      	str	r3, [r7, #24]
    break;
 8002df4:	e002      	b.n	8002dfc <LSM6DSL_AccReadXYZ+0xd0>
  case LSM6DSL_ACC_FULLSCALE_16G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_16G;
 8002df6:	4b17      	ldr	r3, [pc, #92]	@ (8002e54 <LSM6DSL_AccReadXYZ+0x128>)
 8002df8:	61bb      	str	r3, [r7, #24]
    break;    
 8002dfa:	bf00      	nop
  }
  
  /* Obtain the mg value for the three axis */
  for(i=0; i<3; i++)
 8002dfc:	2300      	movs	r3, #0
 8002dfe:	77fb      	strb	r3, [r7, #31]
 8002e00:	e01a      	b.n	8002e38 <LSM6DSL_AccReadXYZ+0x10c>
  {
    pData[i]=( int16_t )(pnRawData[i] * sensitivity);
 8002e02:	7ffb      	ldrb	r3, [r7, #31]
 8002e04:	005b      	lsls	r3, r3, #1
 8002e06:	3320      	adds	r3, #32
 8002e08:	443b      	add	r3, r7
 8002e0a:	f933 3c10 	ldrsh.w	r3, [r3, #-16]
 8002e0e:	ee07 3a90 	vmov	s15, r3
 8002e12:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002e16:	edd7 7a06 	vldr	s15, [r7, #24]
 8002e1a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002e1e:	7ffb      	ldrb	r3, [r7, #31]
 8002e20:	005b      	lsls	r3, r3, #1
 8002e22:	687a      	ldr	r2, [r7, #4]
 8002e24:	4413      	add	r3, r2
 8002e26:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002e2a:	ee17 2a90 	vmov	r2, s15
 8002e2e:	b212      	sxth	r2, r2
 8002e30:	801a      	strh	r2, [r3, #0]
  for(i=0; i<3; i++)
 8002e32:	7ffb      	ldrb	r3, [r7, #31]
 8002e34:	3301      	adds	r3, #1
 8002e36:	77fb      	strb	r3, [r7, #31]
 8002e38:	7ffb      	ldrb	r3, [r7, #31]
 8002e3a:	2b02      	cmp	r3, #2
 8002e3c:	d9e1      	bls.n	8002e02 <LSM6DSL_AccReadXYZ+0xd6>
  }
}
 8002e3e:	bf00      	nop
 8002e40:	bf00      	nop
 8002e42:	3720      	adds	r7, #32
 8002e44:	46bd      	mov	sp, r7
 8002e46:	bd80      	pop	{r7, pc}
 8002e48:	3d79db23 	.word	0x3d79db23
 8002e4c:	3df9db23 	.word	0x3df9db23
 8002e50:	3e79db23 	.word	0x3e79db23
 8002e54:	3ef9db23 	.word	0x3ef9db23

08002e58 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002e58:	b580      	push	{r7, lr}
 8002e5a:	b082      	sub	sp, #8
 8002e5c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002e5e:	2300      	movs	r3, #0
 8002e60:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002e62:	2003      	movs	r0, #3
 8002e64:	f000 f960 	bl	8003128 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002e68:	2000      	movs	r0, #0
 8002e6a:	f000 f80d 	bl	8002e88 <HAL_InitTick>
 8002e6e:	4603      	mov	r3, r0
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d002      	beq.n	8002e7a <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002e74:	2301      	movs	r3, #1
 8002e76:	71fb      	strb	r3, [r7, #7]
 8002e78:	e001      	b.n	8002e7e <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002e7a:	f7ff fc39 	bl	80026f0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002e7e:	79fb      	ldrb	r3, [r7, #7]
}
 8002e80:	4618      	mov	r0, r3
 8002e82:	3708      	adds	r7, #8
 8002e84:	46bd      	mov	sp, r7
 8002e86:	bd80      	pop	{r7, pc}

08002e88 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002e88:	b580      	push	{r7, lr}
 8002e8a:	b084      	sub	sp, #16
 8002e8c:	af00      	add	r7, sp, #0
 8002e8e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002e90:	2300      	movs	r3, #0
 8002e92:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8002e94:	4b17      	ldr	r3, [pc, #92]	@ (8002ef4 <HAL_InitTick+0x6c>)
 8002e96:	781b      	ldrb	r3, [r3, #0]
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d023      	beq.n	8002ee4 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8002e9c:	4b16      	ldr	r3, [pc, #88]	@ (8002ef8 <HAL_InitTick+0x70>)
 8002e9e:	681a      	ldr	r2, [r3, #0]
 8002ea0:	4b14      	ldr	r3, [pc, #80]	@ (8002ef4 <HAL_InitTick+0x6c>)
 8002ea2:	781b      	ldrb	r3, [r3, #0]
 8002ea4:	4619      	mov	r1, r3
 8002ea6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002eaa:	fbb3 f3f1 	udiv	r3, r3, r1
 8002eae:	fbb2 f3f3 	udiv	r3, r2, r3
 8002eb2:	4618      	mov	r0, r3
 8002eb4:	f000 f96d 	bl	8003192 <HAL_SYSTICK_Config>
 8002eb8:	4603      	mov	r3, r0
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d10f      	bne.n	8002ede <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	2b0f      	cmp	r3, #15
 8002ec2:	d809      	bhi.n	8002ed8 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002ec4:	2200      	movs	r2, #0
 8002ec6:	6879      	ldr	r1, [r7, #4]
 8002ec8:	f04f 30ff 	mov.w	r0, #4294967295
 8002ecc:	f000 f937 	bl	800313e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002ed0:	4a0a      	ldr	r2, [pc, #40]	@ (8002efc <HAL_InitTick+0x74>)
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	6013      	str	r3, [r2, #0]
 8002ed6:	e007      	b.n	8002ee8 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8002ed8:	2301      	movs	r3, #1
 8002eda:	73fb      	strb	r3, [r7, #15]
 8002edc:	e004      	b.n	8002ee8 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002ede:	2301      	movs	r3, #1
 8002ee0:	73fb      	strb	r3, [r7, #15]
 8002ee2:	e001      	b.n	8002ee8 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002ee4:	2301      	movs	r3, #1
 8002ee6:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002ee8:	7bfb      	ldrb	r3, [r7, #15]
}
 8002eea:	4618      	mov	r0, r3
 8002eec:	3710      	adds	r7, #16
 8002eee:	46bd      	mov	sp, r7
 8002ef0:	bd80      	pop	{r7, pc}
 8002ef2:	bf00      	nop
 8002ef4:	20000a48 	.word	0x20000a48
 8002ef8:	20000a0c 	.word	0x20000a0c
 8002efc:	20000a44 	.word	0x20000a44

08002f00 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002f00:	b480      	push	{r7}
 8002f02:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002f04:	4b06      	ldr	r3, [pc, #24]	@ (8002f20 <HAL_IncTick+0x20>)
 8002f06:	781b      	ldrb	r3, [r3, #0]
 8002f08:	461a      	mov	r2, r3
 8002f0a:	4b06      	ldr	r3, [pc, #24]	@ (8002f24 <HAL_IncTick+0x24>)
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	4413      	add	r3, r2
 8002f10:	4a04      	ldr	r2, [pc, #16]	@ (8002f24 <HAL_IncTick+0x24>)
 8002f12:	6013      	str	r3, [r2, #0]
}
 8002f14:	bf00      	nop
 8002f16:	46bd      	mov	sp, r7
 8002f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f1c:	4770      	bx	lr
 8002f1e:	bf00      	nop
 8002f20:	20000a48 	.word	0x20000a48
 8002f24:	200014c8 	.word	0x200014c8

08002f28 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002f28:	b480      	push	{r7}
 8002f2a:	af00      	add	r7, sp, #0
  return uwTick;
 8002f2c:	4b03      	ldr	r3, [pc, #12]	@ (8002f3c <HAL_GetTick+0x14>)
 8002f2e:	681b      	ldr	r3, [r3, #0]
}
 8002f30:	4618      	mov	r0, r3
 8002f32:	46bd      	mov	sp, r7
 8002f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f38:	4770      	bx	lr
 8002f3a:	bf00      	nop
 8002f3c:	200014c8 	.word	0x200014c8

08002f40 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002f40:	b580      	push	{r7, lr}
 8002f42:	b084      	sub	sp, #16
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002f48:	f7ff ffee 	bl	8002f28 <HAL_GetTick>
 8002f4c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f58:	d005      	beq.n	8002f66 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8002f5a:	4b0a      	ldr	r3, [pc, #40]	@ (8002f84 <HAL_Delay+0x44>)
 8002f5c:	781b      	ldrb	r3, [r3, #0]
 8002f5e:	461a      	mov	r2, r3
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	4413      	add	r3, r2
 8002f64:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002f66:	bf00      	nop
 8002f68:	f7ff ffde 	bl	8002f28 <HAL_GetTick>
 8002f6c:	4602      	mov	r2, r0
 8002f6e:	68bb      	ldr	r3, [r7, #8]
 8002f70:	1ad3      	subs	r3, r2, r3
 8002f72:	68fa      	ldr	r2, [r7, #12]
 8002f74:	429a      	cmp	r2, r3
 8002f76:	d8f7      	bhi.n	8002f68 <HAL_Delay+0x28>
  {
  }
}
 8002f78:	bf00      	nop
 8002f7a:	bf00      	nop
 8002f7c:	3710      	adds	r7, #16
 8002f7e:	46bd      	mov	sp, r7
 8002f80:	bd80      	pop	{r7, pc}
 8002f82:	bf00      	nop
 8002f84:	20000a48 	.word	0x20000a48

08002f88 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f88:	b480      	push	{r7}
 8002f8a:	b085      	sub	sp, #20
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	f003 0307 	and.w	r3, r3, #7
 8002f96:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002f98:	4b0c      	ldr	r3, [pc, #48]	@ (8002fcc <__NVIC_SetPriorityGrouping+0x44>)
 8002f9a:	68db      	ldr	r3, [r3, #12]
 8002f9c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002f9e:	68ba      	ldr	r2, [r7, #8]
 8002fa0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002fa4:	4013      	ands	r3, r2
 8002fa6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002fac:	68bb      	ldr	r3, [r7, #8]
 8002fae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002fb0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002fb4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002fb8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002fba:	4a04      	ldr	r2, [pc, #16]	@ (8002fcc <__NVIC_SetPriorityGrouping+0x44>)
 8002fbc:	68bb      	ldr	r3, [r7, #8]
 8002fbe:	60d3      	str	r3, [r2, #12]
}
 8002fc0:	bf00      	nop
 8002fc2:	3714      	adds	r7, #20
 8002fc4:	46bd      	mov	sp, r7
 8002fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fca:	4770      	bx	lr
 8002fcc:	e000ed00 	.word	0xe000ed00

08002fd0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002fd0:	b480      	push	{r7}
 8002fd2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002fd4:	4b04      	ldr	r3, [pc, #16]	@ (8002fe8 <__NVIC_GetPriorityGrouping+0x18>)
 8002fd6:	68db      	ldr	r3, [r3, #12]
 8002fd8:	0a1b      	lsrs	r3, r3, #8
 8002fda:	f003 0307 	and.w	r3, r3, #7
}
 8002fde:	4618      	mov	r0, r3
 8002fe0:	46bd      	mov	sp, r7
 8002fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe6:	4770      	bx	lr
 8002fe8:	e000ed00 	.word	0xe000ed00

08002fec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002fec:	b480      	push	{r7}
 8002fee:	b083      	sub	sp, #12
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	4603      	mov	r3, r0
 8002ff4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ff6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	db0b      	blt.n	8003016 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002ffe:	79fb      	ldrb	r3, [r7, #7]
 8003000:	f003 021f 	and.w	r2, r3, #31
 8003004:	4907      	ldr	r1, [pc, #28]	@ (8003024 <__NVIC_EnableIRQ+0x38>)
 8003006:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800300a:	095b      	lsrs	r3, r3, #5
 800300c:	2001      	movs	r0, #1
 800300e:	fa00 f202 	lsl.w	r2, r0, r2
 8003012:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003016:	bf00      	nop
 8003018:	370c      	adds	r7, #12
 800301a:	46bd      	mov	sp, r7
 800301c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003020:	4770      	bx	lr
 8003022:	bf00      	nop
 8003024:	e000e100 	.word	0xe000e100

08003028 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003028:	b480      	push	{r7}
 800302a:	b083      	sub	sp, #12
 800302c:	af00      	add	r7, sp, #0
 800302e:	4603      	mov	r3, r0
 8003030:	6039      	str	r1, [r7, #0]
 8003032:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003034:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003038:	2b00      	cmp	r3, #0
 800303a:	db0a      	blt.n	8003052 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800303c:	683b      	ldr	r3, [r7, #0]
 800303e:	b2da      	uxtb	r2, r3
 8003040:	490c      	ldr	r1, [pc, #48]	@ (8003074 <__NVIC_SetPriority+0x4c>)
 8003042:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003046:	0112      	lsls	r2, r2, #4
 8003048:	b2d2      	uxtb	r2, r2
 800304a:	440b      	add	r3, r1
 800304c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003050:	e00a      	b.n	8003068 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003052:	683b      	ldr	r3, [r7, #0]
 8003054:	b2da      	uxtb	r2, r3
 8003056:	4908      	ldr	r1, [pc, #32]	@ (8003078 <__NVIC_SetPriority+0x50>)
 8003058:	79fb      	ldrb	r3, [r7, #7]
 800305a:	f003 030f 	and.w	r3, r3, #15
 800305e:	3b04      	subs	r3, #4
 8003060:	0112      	lsls	r2, r2, #4
 8003062:	b2d2      	uxtb	r2, r2
 8003064:	440b      	add	r3, r1
 8003066:	761a      	strb	r2, [r3, #24]
}
 8003068:	bf00      	nop
 800306a:	370c      	adds	r7, #12
 800306c:	46bd      	mov	sp, r7
 800306e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003072:	4770      	bx	lr
 8003074:	e000e100 	.word	0xe000e100
 8003078:	e000ed00 	.word	0xe000ed00

0800307c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800307c:	b480      	push	{r7}
 800307e:	b089      	sub	sp, #36	@ 0x24
 8003080:	af00      	add	r7, sp, #0
 8003082:	60f8      	str	r0, [r7, #12]
 8003084:	60b9      	str	r1, [r7, #8]
 8003086:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	f003 0307 	and.w	r3, r3, #7
 800308e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003090:	69fb      	ldr	r3, [r7, #28]
 8003092:	f1c3 0307 	rsb	r3, r3, #7
 8003096:	2b04      	cmp	r3, #4
 8003098:	bf28      	it	cs
 800309a:	2304      	movcs	r3, #4
 800309c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800309e:	69fb      	ldr	r3, [r7, #28]
 80030a0:	3304      	adds	r3, #4
 80030a2:	2b06      	cmp	r3, #6
 80030a4:	d902      	bls.n	80030ac <NVIC_EncodePriority+0x30>
 80030a6:	69fb      	ldr	r3, [r7, #28]
 80030a8:	3b03      	subs	r3, #3
 80030aa:	e000      	b.n	80030ae <NVIC_EncodePriority+0x32>
 80030ac:	2300      	movs	r3, #0
 80030ae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80030b0:	f04f 32ff 	mov.w	r2, #4294967295
 80030b4:	69bb      	ldr	r3, [r7, #24]
 80030b6:	fa02 f303 	lsl.w	r3, r2, r3
 80030ba:	43da      	mvns	r2, r3
 80030bc:	68bb      	ldr	r3, [r7, #8]
 80030be:	401a      	ands	r2, r3
 80030c0:	697b      	ldr	r3, [r7, #20]
 80030c2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80030c4:	f04f 31ff 	mov.w	r1, #4294967295
 80030c8:	697b      	ldr	r3, [r7, #20]
 80030ca:	fa01 f303 	lsl.w	r3, r1, r3
 80030ce:	43d9      	mvns	r1, r3
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80030d4:	4313      	orrs	r3, r2
         );
}
 80030d6:	4618      	mov	r0, r3
 80030d8:	3724      	adds	r7, #36	@ 0x24
 80030da:	46bd      	mov	sp, r7
 80030dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e0:	4770      	bx	lr
	...

080030e4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80030e4:	b580      	push	{r7, lr}
 80030e6:	b082      	sub	sp, #8
 80030e8:	af00      	add	r7, sp, #0
 80030ea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	3b01      	subs	r3, #1
 80030f0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80030f4:	d301      	bcc.n	80030fa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80030f6:	2301      	movs	r3, #1
 80030f8:	e00f      	b.n	800311a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80030fa:	4a0a      	ldr	r2, [pc, #40]	@ (8003124 <SysTick_Config+0x40>)
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	3b01      	subs	r3, #1
 8003100:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003102:	210f      	movs	r1, #15
 8003104:	f04f 30ff 	mov.w	r0, #4294967295
 8003108:	f7ff ff8e 	bl	8003028 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800310c:	4b05      	ldr	r3, [pc, #20]	@ (8003124 <SysTick_Config+0x40>)
 800310e:	2200      	movs	r2, #0
 8003110:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003112:	4b04      	ldr	r3, [pc, #16]	@ (8003124 <SysTick_Config+0x40>)
 8003114:	2207      	movs	r2, #7
 8003116:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003118:	2300      	movs	r3, #0
}
 800311a:	4618      	mov	r0, r3
 800311c:	3708      	adds	r7, #8
 800311e:	46bd      	mov	sp, r7
 8003120:	bd80      	pop	{r7, pc}
 8003122:	bf00      	nop
 8003124:	e000e010 	.word	0xe000e010

08003128 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003128:	b580      	push	{r7, lr}
 800312a:	b082      	sub	sp, #8
 800312c:	af00      	add	r7, sp, #0
 800312e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003130:	6878      	ldr	r0, [r7, #4]
 8003132:	f7ff ff29 	bl	8002f88 <__NVIC_SetPriorityGrouping>
}
 8003136:	bf00      	nop
 8003138:	3708      	adds	r7, #8
 800313a:	46bd      	mov	sp, r7
 800313c:	bd80      	pop	{r7, pc}

0800313e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800313e:	b580      	push	{r7, lr}
 8003140:	b086      	sub	sp, #24
 8003142:	af00      	add	r7, sp, #0
 8003144:	4603      	mov	r3, r0
 8003146:	60b9      	str	r1, [r7, #8]
 8003148:	607a      	str	r2, [r7, #4]
 800314a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800314c:	2300      	movs	r3, #0
 800314e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003150:	f7ff ff3e 	bl	8002fd0 <__NVIC_GetPriorityGrouping>
 8003154:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003156:	687a      	ldr	r2, [r7, #4]
 8003158:	68b9      	ldr	r1, [r7, #8]
 800315a:	6978      	ldr	r0, [r7, #20]
 800315c:	f7ff ff8e 	bl	800307c <NVIC_EncodePriority>
 8003160:	4602      	mov	r2, r0
 8003162:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003166:	4611      	mov	r1, r2
 8003168:	4618      	mov	r0, r3
 800316a:	f7ff ff5d 	bl	8003028 <__NVIC_SetPriority>
}
 800316e:	bf00      	nop
 8003170:	3718      	adds	r7, #24
 8003172:	46bd      	mov	sp, r7
 8003174:	bd80      	pop	{r7, pc}

08003176 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003176:	b580      	push	{r7, lr}
 8003178:	b082      	sub	sp, #8
 800317a:	af00      	add	r7, sp, #0
 800317c:	4603      	mov	r3, r0
 800317e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003180:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003184:	4618      	mov	r0, r3
 8003186:	f7ff ff31 	bl	8002fec <__NVIC_EnableIRQ>
}
 800318a:	bf00      	nop
 800318c:	3708      	adds	r7, #8
 800318e:	46bd      	mov	sp, r7
 8003190:	bd80      	pop	{r7, pc}

08003192 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003192:	b580      	push	{r7, lr}
 8003194:	b082      	sub	sp, #8
 8003196:	af00      	add	r7, sp, #0
 8003198:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800319a:	6878      	ldr	r0, [r7, #4]
 800319c:	f7ff ffa2 	bl	80030e4 <SysTick_Config>
 80031a0:	4603      	mov	r3, r0
}
 80031a2:	4618      	mov	r0, r3
 80031a4:	3708      	adds	r7, #8
 80031a6:	46bd      	mov	sp, r7
 80031a8:	bd80      	pop	{r7, pc}
	...

080031ac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80031ac:	b480      	push	{r7}
 80031ae:	b087      	sub	sp, #28
 80031b0:	af00      	add	r7, sp, #0
 80031b2:	6078      	str	r0, [r7, #4]
 80031b4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80031b6:	2300      	movs	r3, #0
 80031b8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80031ba:	e17f      	b.n	80034bc <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80031bc:	683b      	ldr	r3, [r7, #0]
 80031be:	681a      	ldr	r2, [r3, #0]
 80031c0:	2101      	movs	r1, #1
 80031c2:	697b      	ldr	r3, [r7, #20]
 80031c4:	fa01 f303 	lsl.w	r3, r1, r3
 80031c8:	4013      	ands	r3, r2
 80031ca:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	f000 8171 	beq.w	80034b6 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80031d4:	683b      	ldr	r3, [r7, #0]
 80031d6:	685b      	ldr	r3, [r3, #4]
 80031d8:	f003 0303 	and.w	r3, r3, #3
 80031dc:	2b01      	cmp	r3, #1
 80031de:	d005      	beq.n	80031ec <HAL_GPIO_Init+0x40>
 80031e0:	683b      	ldr	r3, [r7, #0]
 80031e2:	685b      	ldr	r3, [r3, #4]
 80031e4:	f003 0303 	and.w	r3, r3, #3
 80031e8:	2b02      	cmp	r3, #2
 80031ea:	d130      	bne.n	800324e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	689b      	ldr	r3, [r3, #8]
 80031f0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80031f2:	697b      	ldr	r3, [r7, #20]
 80031f4:	005b      	lsls	r3, r3, #1
 80031f6:	2203      	movs	r2, #3
 80031f8:	fa02 f303 	lsl.w	r3, r2, r3
 80031fc:	43db      	mvns	r3, r3
 80031fe:	693a      	ldr	r2, [r7, #16]
 8003200:	4013      	ands	r3, r2
 8003202:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003204:	683b      	ldr	r3, [r7, #0]
 8003206:	68da      	ldr	r2, [r3, #12]
 8003208:	697b      	ldr	r3, [r7, #20]
 800320a:	005b      	lsls	r3, r3, #1
 800320c:	fa02 f303 	lsl.w	r3, r2, r3
 8003210:	693a      	ldr	r2, [r7, #16]
 8003212:	4313      	orrs	r3, r2
 8003214:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	693a      	ldr	r2, [r7, #16]
 800321a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	685b      	ldr	r3, [r3, #4]
 8003220:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003222:	2201      	movs	r2, #1
 8003224:	697b      	ldr	r3, [r7, #20]
 8003226:	fa02 f303 	lsl.w	r3, r2, r3
 800322a:	43db      	mvns	r3, r3
 800322c:	693a      	ldr	r2, [r7, #16]
 800322e:	4013      	ands	r3, r2
 8003230:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003232:	683b      	ldr	r3, [r7, #0]
 8003234:	685b      	ldr	r3, [r3, #4]
 8003236:	091b      	lsrs	r3, r3, #4
 8003238:	f003 0201 	and.w	r2, r3, #1
 800323c:	697b      	ldr	r3, [r7, #20]
 800323e:	fa02 f303 	lsl.w	r3, r2, r3
 8003242:	693a      	ldr	r2, [r7, #16]
 8003244:	4313      	orrs	r3, r2
 8003246:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	693a      	ldr	r2, [r7, #16]
 800324c:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800324e:	683b      	ldr	r3, [r7, #0]
 8003250:	685b      	ldr	r3, [r3, #4]
 8003252:	f003 0303 	and.w	r3, r3, #3
 8003256:	2b03      	cmp	r3, #3
 8003258:	d118      	bne.n	800328c <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800325e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8003260:	2201      	movs	r2, #1
 8003262:	697b      	ldr	r3, [r7, #20]
 8003264:	fa02 f303 	lsl.w	r3, r2, r3
 8003268:	43db      	mvns	r3, r3
 800326a:	693a      	ldr	r2, [r7, #16]
 800326c:	4013      	ands	r3, r2
 800326e:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8003270:	683b      	ldr	r3, [r7, #0]
 8003272:	685b      	ldr	r3, [r3, #4]
 8003274:	08db      	lsrs	r3, r3, #3
 8003276:	f003 0201 	and.w	r2, r3, #1
 800327a:	697b      	ldr	r3, [r7, #20]
 800327c:	fa02 f303 	lsl.w	r3, r2, r3
 8003280:	693a      	ldr	r2, [r7, #16]
 8003282:	4313      	orrs	r3, r2
 8003284:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	693a      	ldr	r2, [r7, #16]
 800328a:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800328c:	683b      	ldr	r3, [r7, #0]
 800328e:	685b      	ldr	r3, [r3, #4]
 8003290:	f003 0303 	and.w	r3, r3, #3
 8003294:	2b03      	cmp	r3, #3
 8003296:	d017      	beq.n	80032c8 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	68db      	ldr	r3, [r3, #12]
 800329c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800329e:	697b      	ldr	r3, [r7, #20]
 80032a0:	005b      	lsls	r3, r3, #1
 80032a2:	2203      	movs	r2, #3
 80032a4:	fa02 f303 	lsl.w	r3, r2, r3
 80032a8:	43db      	mvns	r3, r3
 80032aa:	693a      	ldr	r2, [r7, #16]
 80032ac:	4013      	ands	r3, r2
 80032ae:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80032b0:	683b      	ldr	r3, [r7, #0]
 80032b2:	689a      	ldr	r2, [r3, #8]
 80032b4:	697b      	ldr	r3, [r7, #20]
 80032b6:	005b      	lsls	r3, r3, #1
 80032b8:	fa02 f303 	lsl.w	r3, r2, r3
 80032bc:	693a      	ldr	r2, [r7, #16]
 80032be:	4313      	orrs	r3, r2
 80032c0:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	693a      	ldr	r2, [r7, #16]
 80032c6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80032c8:	683b      	ldr	r3, [r7, #0]
 80032ca:	685b      	ldr	r3, [r3, #4]
 80032cc:	f003 0303 	and.w	r3, r3, #3
 80032d0:	2b02      	cmp	r3, #2
 80032d2:	d123      	bne.n	800331c <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80032d4:	697b      	ldr	r3, [r7, #20]
 80032d6:	08da      	lsrs	r2, r3, #3
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	3208      	adds	r2, #8
 80032dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80032e0:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80032e2:	697b      	ldr	r3, [r7, #20]
 80032e4:	f003 0307 	and.w	r3, r3, #7
 80032e8:	009b      	lsls	r3, r3, #2
 80032ea:	220f      	movs	r2, #15
 80032ec:	fa02 f303 	lsl.w	r3, r2, r3
 80032f0:	43db      	mvns	r3, r3
 80032f2:	693a      	ldr	r2, [r7, #16]
 80032f4:	4013      	ands	r3, r2
 80032f6:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80032f8:	683b      	ldr	r3, [r7, #0]
 80032fa:	691a      	ldr	r2, [r3, #16]
 80032fc:	697b      	ldr	r3, [r7, #20]
 80032fe:	f003 0307 	and.w	r3, r3, #7
 8003302:	009b      	lsls	r3, r3, #2
 8003304:	fa02 f303 	lsl.w	r3, r2, r3
 8003308:	693a      	ldr	r2, [r7, #16]
 800330a:	4313      	orrs	r3, r2
 800330c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800330e:	697b      	ldr	r3, [r7, #20]
 8003310:	08da      	lsrs	r2, r3, #3
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	3208      	adds	r2, #8
 8003316:	6939      	ldr	r1, [r7, #16]
 8003318:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003322:	697b      	ldr	r3, [r7, #20]
 8003324:	005b      	lsls	r3, r3, #1
 8003326:	2203      	movs	r2, #3
 8003328:	fa02 f303 	lsl.w	r3, r2, r3
 800332c:	43db      	mvns	r3, r3
 800332e:	693a      	ldr	r2, [r7, #16]
 8003330:	4013      	ands	r3, r2
 8003332:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003334:	683b      	ldr	r3, [r7, #0]
 8003336:	685b      	ldr	r3, [r3, #4]
 8003338:	f003 0203 	and.w	r2, r3, #3
 800333c:	697b      	ldr	r3, [r7, #20]
 800333e:	005b      	lsls	r3, r3, #1
 8003340:	fa02 f303 	lsl.w	r3, r2, r3
 8003344:	693a      	ldr	r2, [r7, #16]
 8003346:	4313      	orrs	r3, r2
 8003348:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	693a      	ldr	r2, [r7, #16]
 800334e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003350:	683b      	ldr	r3, [r7, #0]
 8003352:	685b      	ldr	r3, [r3, #4]
 8003354:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003358:	2b00      	cmp	r3, #0
 800335a:	f000 80ac 	beq.w	80034b6 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800335e:	4b5f      	ldr	r3, [pc, #380]	@ (80034dc <HAL_GPIO_Init+0x330>)
 8003360:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003362:	4a5e      	ldr	r2, [pc, #376]	@ (80034dc <HAL_GPIO_Init+0x330>)
 8003364:	f043 0301 	orr.w	r3, r3, #1
 8003368:	6613      	str	r3, [r2, #96]	@ 0x60
 800336a:	4b5c      	ldr	r3, [pc, #368]	@ (80034dc <HAL_GPIO_Init+0x330>)
 800336c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800336e:	f003 0301 	and.w	r3, r3, #1
 8003372:	60bb      	str	r3, [r7, #8]
 8003374:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003376:	4a5a      	ldr	r2, [pc, #360]	@ (80034e0 <HAL_GPIO_Init+0x334>)
 8003378:	697b      	ldr	r3, [r7, #20]
 800337a:	089b      	lsrs	r3, r3, #2
 800337c:	3302      	adds	r3, #2
 800337e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003382:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003384:	697b      	ldr	r3, [r7, #20]
 8003386:	f003 0303 	and.w	r3, r3, #3
 800338a:	009b      	lsls	r3, r3, #2
 800338c:	220f      	movs	r2, #15
 800338e:	fa02 f303 	lsl.w	r3, r2, r3
 8003392:	43db      	mvns	r3, r3
 8003394:	693a      	ldr	r2, [r7, #16]
 8003396:	4013      	ands	r3, r2
 8003398:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80033a0:	d025      	beq.n	80033ee <HAL_GPIO_Init+0x242>
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	4a4f      	ldr	r2, [pc, #316]	@ (80034e4 <HAL_GPIO_Init+0x338>)
 80033a6:	4293      	cmp	r3, r2
 80033a8:	d01f      	beq.n	80033ea <HAL_GPIO_Init+0x23e>
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	4a4e      	ldr	r2, [pc, #312]	@ (80034e8 <HAL_GPIO_Init+0x33c>)
 80033ae:	4293      	cmp	r3, r2
 80033b0:	d019      	beq.n	80033e6 <HAL_GPIO_Init+0x23a>
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	4a4d      	ldr	r2, [pc, #308]	@ (80034ec <HAL_GPIO_Init+0x340>)
 80033b6:	4293      	cmp	r3, r2
 80033b8:	d013      	beq.n	80033e2 <HAL_GPIO_Init+0x236>
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	4a4c      	ldr	r2, [pc, #304]	@ (80034f0 <HAL_GPIO_Init+0x344>)
 80033be:	4293      	cmp	r3, r2
 80033c0:	d00d      	beq.n	80033de <HAL_GPIO_Init+0x232>
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	4a4b      	ldr	r2, [pc, #300]	@ (80034f4 <HAL_GPIO_Init+0x348>)
 80033c6:	4293      	cmp	r3, r2
 80033c8:	d007      	beq.n	80033da <HAL_GPIO_Init+0x22e>
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	4a4a      	ldr	r2, [pc, #296]	@ (80034f8 <HAL_GPIO_Init+0x34c>)
 80033ce:	4293      	cmp	r3, r2
 80033d0:	d101      	bne.n	80033d6 <HAL_GPIO_Init+0x22a>
 80033d2:	2306      	movs	r3, #6
 80033d4:	e00c      	b.n	80033f0 <HAL_GPIO_Init+0x244>
 80033d6:	2307      	movs	r3, #7
 80033d8:	e00a      	b.n	80033f0 <HAL_GPIO_Init+0x244>
 80033da:	2305      	movs	r3, #5
 80033dc:	e008      	b.n	80033f0 <HAL_GPIO_Init+0x244>
 80033de:	2304      	movs	r3, #4
 80033e0:	e006      	b.n	80033f0 <HAL_GPIO_Init+0x244>
 80033e2:	2303      	movs	r3, #3
 80033e4:	e004      	b.n	80033f0 <HAL_GPIO_Init+0x244>
 80033e6:	2302      	movs	r3, #2
 80033e8:	e002      	b.n	80033f0 <HAL_GPIO_Init+0x244>
 80033ea:	2301      	movs	r3, #1
 80033ec:	e000      	b.n	80033f0 <HAL_GPIO_Init+0x244>
 80033ee:	2300      	movs	r3, #0
 80033f0:	697a      	ldr	r2, [r7, #20]
 80033f2:	f002 0203 	and.w	r2, r2, #3
 80033f6:	0092      	lsls	r2, r2, #2
 80033f8:	4093      	lsls	r3, r2
 80033fa:	693a      	ldr	r2, [r7, #16]
 80033fc:	4313      	orrs	r3, r2
 80033fe:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003400:	4937      	ldr	r1, [pc, #220]	@ (80034e0 <HAL_GPIO_Init+0x334>)
 8003402:	697b      	ldr	r3, [r7, #20]
 8003404:	089b      	lsrs	r3, r3, #2
 8003406:	3302      	adds	r3, #2
 8003408:	693a      	ldr	r2, [r7, #16]
 800340a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800340e:	4b3b      	ldr	r3, [pc, #236]	@ (80034fc <HAL_GPIO_Init+0x350>)
 8003410:	689b      	ldr	r3, [r3, #8]
 8003412:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	43db      	mvns	r3, r3
 8003418:	693a      	ldr	r2, [r7, #16]
 800341a:	4013      	ands	r3, r2
 800341c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800341e:	683b      	ldr	r3, [r7, #0]
 8003420:	685b      	ldr	r3, [r3, #4]
 8003422:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003426:	2b00      	cmp	r3, #0
 8003428:	d003      	beq.n	8003432 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800342a:	693a      	ldr	r2, [r7, #16]
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	4313      	orrs	r3, r2
 8003430:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003432:	4a32      	ldr	r2, [pc, #200]	@ (80034fc <HAL_GPIO_Init+0x350>)
 8003434:	693b      	ldr	r3, [r7, #16]
 8003436:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003438:	4b30      	ldr	r3, [pc, #192]	@ (80034fc <HAL_GPIO_Init+0x350>)
 800343a:	68db      	ldr	r3, [r3, #12]
 800343c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	43db      	mvns	r3, r3
 8003442:	693a      	ldr	r2, [r7, #16]
 8003444:	4013      	ands	r3, r2
 8003446:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003448:	683b      	ldr	r3, [r7, #0]
 800344a:	685b      	ldr	r3, [r3, #4]
 800344c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003450:	2b00      	cmp	r3, #0
 8003452:	d003      	beq.n	800345c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8003454:	693a      	ldr	r2, [r7, #16]
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	4313      	orrs	r3, r2
 800345a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800345c:	4a27      	ldr	r2, [pc, #156]	@ (80034fc <HAL_GPIO_Init+0x350>)
 800345e:	693b      	ldr	r3, [r7, #16]
 8003460:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003462:	4b26      	ldr	r3, [pc, #152]	@ (80034fc <HAL_GPIO_Init+0x350>)
 8003464:	685b      	ldr	r3, [r3, #4]
 8003466:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	43db      	mvns	r3, r3
 800346c:	693a      	ldr	r2, [r7, #16]
 800346e:	4013      	ands	r3, r2
 8003470:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003472:	683b      	ldr	r3, [r7, #0]
 8003474:	685b      	ldr	r3, [r3, #4]
 8003476:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800347a:	2b00      	cmp	r3, #0
 800347c:	d003      	beq.n	8003486 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800347e:	693a      	ldr	r2, [r7, #16]
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	4313      	orrs	r3, r2
 8003484:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003486:	4a1d      	ldr	r2, [pc, #116]	@ (80034fc <HAL_GPIO_Init+0x350>)
 8003488:	693b      	ldr	r3, [r7, #16]
 800348a:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800348c:	4b1b      	ldr	r3, [pc, #108]	@ (80034fc <HAL_GPIO_Init+0x350>)
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	43db      	mvns	r3, r3
 8003496:	693a      	ldr	r2, [r7, #16]
 8003498:	4013      	ands	r3, r2
 800349a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800349c:	683b      	ldr	r3, [r7, #0]
 800349e:	685b      	ldr	r3, [r3, #4]
 80034a0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d003      	beq.n	80034b0 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80034a8:	693a      	ldr	r2, [r7, #16]
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	4313      	orrs	r3, r2
 80034ae:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80034b0:	4a12      	ldr	r2, [pc, #72]	@ (80034fc <HAL_GPIO_Init+0x350>)
 80034b2:	693b      	ldr	r3, [r7, #16]
 80034b4:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80034b6:	697b      	ldr	r3, [r7, #20]
 80034b8:	3301      	adds	r3, #1
 80034ba:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80034bc:	683b      	ldr	r3, [r7, #0]
 80034be:	681a      	ldr	r2, [r3, #0]
 80034c0:	697b      	ldr	r3, [r7, #20]
 80034c2:	fa22 f303 	lsr.w	r3, r2, r3
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	f47f ae78 	bne.w	80031bc <HAL_GPIO_Init+0x10>
  }
}
 80034cc:	bf00      	nop
 80034ce:	bf00      	nop
 80034d0:	371c      	adds	r7, #28
 80034d2:	46bd      	mov	sp, r7
 80034d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d8:	4770      	bx	lr
 80034da:	bf00      	nop
 80034dc:	40021000 	.word	0x40021000
 80034e0:	40010000 	.word	0x40010000
 80034e4:	48000400 	.word	0x48000400
 80034e8:	48000800 	.word	0x48000800
 80034ec:	48000c00 	.word	0x48000c00
 80034f0:	48001000 	.word	0x48001000
 80034f4:	48001400 	.word	0x48001400
 80034f8:	48001800 	.word	0x48001800
 80034fc:	40010400 	.word	0x40010400

08003500 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8003500:	b480      	push	{r7}
 8003502:	b087      	sub	sp, #28
 8003504:	af00      	add	r7, sp, #0
 8003506:	6078      	str	r0, [r7, #4]
 8003508:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800350a:	2300      	movs	r3, #0
 800350c:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 800350e:	e0cd      	b.n	80036ac <HAL_GPIO_DeInit+0x1ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8003510:	2201      	movs	r2, #1
 8003512:	697b      	ldr	r3, [r7, #20]
 8003514:	fa02 f303 	lsl.w	r3, r2, r3
 8003518:	683a      	ldr	r2, [r7, #0]
 800351a:	4013      	ands	r3, r2
 800351c:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 800351e:	693b      	ldr	r3, [r7, #16]
 8003520:	2b00      	cmp	r3, #0
 8003522:	f000 80c0 	beq.w	80036a6 <HAL_GPIO_DeInit+0x1a6>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 8003526:	4a68      	ldr	r2, [pc, #416]	@ (80036c8 <HAL_GPIO_DeInit+0x1c8>)
 8003528:	697b      	ldr	r3, [r7, #20]
 800352a:	089b      	lsrs	r3, r3, #2
 800352c:	3302      	adds	r3, #2
 800352e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003532:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8003534:	697b      	ldr	r3, [r7, #20]
 8003536:	f003 0303 	and.w	r3, r3, #3
 800353a:	009b      	lsls	r3, r3, #2
 800353c:	220f      	movs	r2, #15
 800353e:	fa02 f303 	lsl.w	r3, r2, r3
 8003542:	68fa      	ldr	r2, [r7, #12]
 8003544:	4013      	ands	r3, r2
 8003546:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800354e:	d025      	beq.n	800359c <HAL_GPIO_DeInit+0x9c>
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	4a5e      	ldr	r2, [pc, #376]	@ (80036cc <HAL_GPIO_DeInit+0x1cc>)
 8003554:	4293      	cmp	r3, r2
 8003556:	d01f      	beq.n	8003598 <HAL_GPIO_DeInit+0x98>
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	4a5d      	ldr	r2, [pc, #372]	@ (80036d0 <HAL_GPIO_DeInit+0x1d0>)
 800355c:	4293      	cmp	r3, r2
 800355e:	d019      	beq.n	8003594 <HAL_GPIO_DeInit+0x94>
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	4a5c      	ldr	r2, [pc, #368]	@ (80036d4 <HAL_GPIO_DeInit+0x1d4>)
 8003564:	4293      	cmp	r3, r2
 8003566:	d013      	beq.n	8003590 <HAL_GPIO_DeInit+0x90>
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	4a5b      	ldr	r2, [pc, #364]	@ (80036d8 <HAL_GPIO_DeInit+0x1d8>)
 800356c:	4293      	cmp	r3, r2
 800356e:	d00d      	beq.n	800358c <HAL_GPIO_DeInit+0x8c>
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	4a5a      	ldr	r2, [pc, #360]	@ (80036dc <HAL_GPIO_DeInit+0x1dc>)
 8003574:	4293      	cmp	r3, r2
 8003576:	d007      	beq.n	8003588 <HAL_GPIO_DeInit+0x88>
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	4a59      	ldr	r2, [pc, #356]	@ (80036e0 <HAL_GPIO_DeInit+0x1e0>)
 800357c:	4293      	cmp	r3, r2
 800357e:	d101      	bne.n	8003584 <HAL_GPIO_DeInit+0x84>
 8003580:	2306      	movs	r3, #6
 8003582:	e00c      	b.n	800359e <HAL_GPIO_DeInit+0x9e>
 8003584:	2307      	movs	r3, #7
 8003586:	e00a      	b.n	800359e <HAL_GPIO_DeInit+0x9e>
 8003588:	2305      	movs	r3, #5
 800358a:	e008      	b.n	800359e <HAL_GPIO_DeInit+0x9e>
 800358c:	2304      	movs	r3, #4
 800358e:	e006      	b.n	800359e <HAL_GPIO_DeInit+0x9e>
 8003590:	2303      	movs	r3, #3
 8003592:	e004      	b.n	800359e <HAL_GPIO_DeInit+0x9e>
 8003594:	2302      	movs	r3, #2
 8003596:	e002      	b.n	800359e <HAL_GPIO_DeInit+0x9e>
 8003598:	2301      	movs	r3, #1
 800359a:	e000      	b.n	800359e <HAL_GPIO_DeInit+0x9e>
 800359c:	2300      	movs	r3, #0
 800359e:	697a      	ldr	r2, [r7, #20]
 80035a0:	f002 0203 	and.w	r2, r2, #3
 80035a4:	0092      	lsls	r2, r2, #2
 80035a6:	4093      	lsls	r3, r2
 80035a8:	68fa      	ldr	r2, [r7, #12]
 80035aa:	429a      	cmp	r2, r3
 80035ac:	d132      	bne.n	8003614 <HAL_GPIO_DeInit+0x114>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 80035ae:	4b4d      	ldr	r3, [pc, #308]	@ (80036e4 <HAL_GPIO_DeInit+0x1e4>)
 80035b0:	681a      	ldr	r2, [r3, #0]
 80035b2:	693b      	ldr	r3, [r7, #16]
 80035b4:	43db      	mvns	r3, r3
 80035b6:	494b      	ldr	r1, [pc, #300]	@ (80036e4 <HAL_GPIO_DeInit+0x1e4>)
 80035b8:	4013      	ands	r3, r2
 80035ba:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 80035bc:	4b49      	ldr	r3, [pc, #292]	@ (80036e4 <HAL_GPIO_DeInit+0x1e4>)
 80035be:	685a      	ldr	r2, [r3, #4]
 80035c0:	693b      	ldr	r3, [r7, #16]
 80035c2:	43db      	mvns	r3, r3
 80035c4:	4947      	ldr	r1, [pc, #284]	@ (80036e4 <HAL_GPIO_DeInit+0x1e4>)
 80035c6:	4013      	ands	r3, r2
 80035c8:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 80035ca:	4b46      	ldr	r3, [pc, #280]	@ (80036e4 <HAL_GPIO_DeInit+0x1e4>)
 80035cc:	68da      	ldr	r2, [r3, #12]
 80035ce:	693b      	ldr	r3, [r7, #16]
 80035d0:	43db      	mvns	r3, r3
 80035d2:	4944      	ldr	r1, [pc, #272]	@ (80036e4 <HAL_GPIO_DeInit+0x1e4>)
 80035d4:	4013      	ands	r3, r2
 80035d6:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR1 &= ~(iocurrent);
 80035d8:	4b42      	ldr	r3, [pc, #264]	@ (80036e4 <HAL_GPIO_DeInit+0x1e4>)
 80035da:	689a      	ldr	r2, [r3, #8]
 80035dc:	693b      	ldr	r3, [r7, #16]
 80035de:	43db      	mvns	r3, r3
 80035e0:	4940      	ldr	r1, [pc, #256]	@ (80036e4 <HAL_GPIO_DeInit+0x1e4>)
 80035e2:	4013      	ands	r3, r2
 80035e4:	608b      	str	r3, [r1, #8]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 80035e6:	697b      	ldr	r3, [r7, #20]
 80035e8:	f003 0303 	and.w	r3, r3, #3
 80035ec:	009b      	lsls	r3, r3, #2
 80035ee:	220f      	movs	r2, #15
 80035f0:	fa02 f303 	lsl.w	r3, r2, r3
 80035f4:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 80035f6:	4a34      	ldr	r2, [pc, #208]	@ (80036c8 <HAL_GPIO_DeInit+0x1c8>)
 80035f8:	697b      	ldr	r3, [r7, #20]
 80035fa:	089b      	lsrs	r3, r3, #2
 80035fc:	3302      	adds	r3, #2
 80035fe:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	43da      	mvns	r2, r3
 8003606:	4830      	ldr	r0, [pc, #192]	@ (80036c8 <HAL_GPIO_DeInit+0x1c8>)
 8003608:	697b      	ldr	r3, [r7, #20]
 800360a:	089b      	lsrs	r3, r3, #2
 800360c:	400a      	ands	r2, r1
 800360e:	3302      	adds	r3, #2
 8003610:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681a      	ldr	r2, [r3, #0]
 8003618:	697b      	ldr	r3, [r7, #20]
 800361a:	005b      	lsls	r3, r3, #1
 800361c:	2103      	movs	r1, #3
 800361e:	fa01 f303 	lsl.w	r3, r1, r3
 8003622:	431a      	orrs	r2, r3
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 8003628:	697b      	ldr	r3, [r7, #20]
 800362a:	08da      	lsrs	r2, r3, #3
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	3208      	adds	r2, #8
 8003630:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003634:	697b      	ldr	r3, [r7, #20]
 8003636:	f003 0307 	and.w	r3, r3, #7
 800363a:	009b      	lsls	r3, r3, #2
 800363c:	220f      	movs	r2, #15
 800363e:	fa02 f303 	lsl.w	r3, r2, r3
 8003642:	43db      	mvns	r3, r3
 8003644:	697a      	ldr	r2, [r7, #20]
 8003646:	08d2      	lsrs	r2, r2, #3
 8003648:	4019      	ands	r1, r3
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	3208      	adds	r2, #8
 800364e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	689a      	ldr	r2, [r3, #8]
 8003656:	697b      	ldr	r3, [r7, #20]
 8003658:	005b      	lsls	r3, r3, #1
 800365a:	2103      	movs	r1, #3
 800365c:	fa01 f303 	lsl.w	r3, r1, r3
 8003660:	43db      	mvns	r3, r3
 8003662:	401a      	ands	r2, r3
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	685a      	ldr	r2, [r3, #4]
 800366c:	2101      	movs	r1, #1
 800366e:	697b      	ldr	r3, [r7, #20]
 8003670:	fa01 f303 	lsl.w	r3, r1, r3
 8003674:	43db      	mvns	r3, r3
 8003676:	401a      	ands	r2, r3
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	68da      	ldr	r2, [r3, #12]
 8003680:	697b      	ldr	r3, [r7, #20]
 8003682:	005b      	lsls	r3, r3, #1
 8003684:	2103      	movs	r1, #3
 8003686:	fa01 f303 	lsl.w	r3, r1, r3
 800368a:	43db      	mvns	r3, r3
 800368c:	401a      	ands	r2, r3
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	60da      	str	r2, [r3, #12]

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003696:	2101      	movs	r1, #1
 8003698:	697b      	ldr	r3, [r7, #20]
 800369a:	fa01 f303 	lsl.w	r3, r1, r3
 800369e:	43db      	mvns	r3, r3
 80036a0:	401a      	ands	r2, r3
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 80036a6:	697b      	ldr	r3, [r7, #20]
 80036a8:	3301      	adds	r3, #1
 80036aa:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 80036ac:	683a      	ldr	r2, [r7, #0]
 80036ae:	697b      	ldr	r3, [r7, #20]
 80036b0:	fa22 f303 	lsr.w	r3, r2, r3
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	f47f af2b 	bne.w	8003510 <HAL_GPIO_DeInit+0x10>
  }
}
 80036ba:	bf00      	nop
 80036bc:	bf00      	nop
 80036be:	371c      	adds	r7, #28
 80036c0:	46bd      	mov	sp, r7
 80036c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c6:	4770      	bx	lr
 80036c8:	40010000 	.word	0x40010000
 80036cc:	48000400 	.word	0x48000400
 80036d0:	48000800 	.word	0x48000800
 80036d4:	48000c00 	.word	0x48000c00
 80036d8:	48001000 	.word	0x48001000
 80036dc:	48001400 	.word	0x48001400
 80036e0:	48001800 	.word	0x48001800
 80036e4:	40010400 	.word	0x40010400

080036e8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80036e8:	b480      	push	{r7}
 80036ea:	b083      	sub	sp, #12
 80036ec:	af00      	add	r7, sp, #0
 80036ee:	6078      	str	r0, [r7, #4]
 80036f0:	460b      	mov	r3, r1
 80036f2:	807b      	strh	r3, [r7, #2]
 80036f4:	4613      	mov	r3, r2
 80036f6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80036f8:	787b      	ldrb	r3, [r7, #1]
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d003      	beq.n	8003706 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80036fe:	887a      	ldrh	r2, [r7, #2]
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003704:	e002      	b.n	800370c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003706:	887a      	ldrh	r2, [r7, #2]
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800370c:	bf00      	nop
 800370e:	370c      	adds	r7, #12
 8003710:	46bd      	mov	sp, r7
 8003712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003716:	4770      	bx	lr

08003718 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003718:	b580      	push	{r7, lr}
 800371a:	b082      	sub	sp, #8
 800371c:	af00      	add	r7, sp, #0
 800371e:	4603      	mov	r3, r0
 8003720:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003722:	4b08      	ldr	r3, [pc, #32]	@ (8003744 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003724:	695a      	ldr	r2, [r3, #20]
 8003726:	88fb      	ldrh	r3, [r7, #6]
 8003728:	4013      	ands	r3, r2
 800372a:	2b00      	cmp	r3, #0
 800372c:	d006      	beq.n	800373c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800372e:	4a05      	ldr	r2, [pc, #20]	@ (8003744 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003730:	88fb      	ldrh	r3, [r7, #6]
 8003732:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003734:	88fb      	ldrh	r3, [r7, #6]
 8003736:	4618      	mov	r0, r3
 8003738:	f000 f806 	bl	8003748 <HAL_GPIO_EXTI_Callback>
  }
}
 800373c:	bf00      	nop
 800373e:	3708      	adds	r7, #8
 8003740:	46bd      	mov	sp, r7
 8003742:	bd80      	pop	{r7, pc}
 8003744:	40010400 	.word	0x40010400

08003748 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003748:	b480      	push	{r7}
 800374a:	b083      	sub	sp, #12
 800374c:	af00      	add	r7, sp, #0
 800374e:	4603      	mov	r3, r0
 8003750:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8003752:	bf00      	nop
 8003754:	370c      	adds	r7, #12
 8003756:	46bd      	mov	sp, r7
 8003758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800375c:	4770      	bx	lr

0800375e <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800375e:	b580      	push	{r7, lr}
 8003760:	b082      	sub	sp, #8
 8003762:	af00      	add	r7, sp, #0
 8003764:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	2b00      	cmp	r3, #0
 800376a:	d101      	bne.n	8003770 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800376c:	2301      	movs	r3, #1
 800376e:	e08d      	b.n	800388c <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003776:	b2db      	uxtb	r3, r3
 8003778:	2b00      	cmp	r3, #0
 800377a:	d106      	bne.n	800378a <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	2200      	movs	r2, #0
 8003780:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003784:	6878      	ldr	r0, [r7, #4]
 8003786:	f7fe ffd7 	bl	8002738 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	2224      	movs	r2, #36	@ 0x24
 800378e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	681a      	ldr	r2, [r3, #0]
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	f022 0201 	bic.w	r2, r2, #1
 80037a0:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	685a      	ldr	r2, [r3, #4]
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80037ae:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	689a      	ldr	r2, [r3, #8]
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80037be:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	68db      	ldr	r3, [r3, #12]
 80037c4:	2b01      	cmp	r3, #1
 80037c6:	d107      	bne.n	80037d8 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	689a      	ldr	r2, [r3, #8]
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80037d4:	609a      	str	r2, [r3, #8]
 80037d6:	e006      	b.n	80037e6 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	689a      	ldr	r2, [r3, #8]
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 80037e4:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	68db      	ldr	r3, [r3, #12]
 80037ea:	2b02      	cmp	r3, #2
 80037ec:	d108      	bne.n	8003800 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	685a      	ldr	r2, [r3, #4]
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80037fc:	605a      	str	r2, [r3, #4]
 80037fe:	e007      	b.n	8003810 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	685a      	ldr	r2, [r3, #4]
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800380e:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	685b      	ldr	r3, [r3, #4]
 8003816:	687a      	ldr	r2, [r7, #4]
 8003818:	6812      	ldr	r2, [r2, #0]
 800381a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800381e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003822:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	68da      	ldr	r2, [r3, #12]
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003832:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	691a      	ldr	r2, [r3, #16]
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	695b      	ldr	r3, [r3, #20]
 800383c:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	699b      	ldr	r3, [r3, #24]
 8003844:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	430a      	orrs	r2, r1
 800384c:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	69d9      	ldr	r1, [r3, #28]
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	6a1a      	ldr	r2, [r3, #32]
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	430a      	orrs	r2, r1
 800385c:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	681a      	ldr	r2, [r3, #0]
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	f042 0201 	orr.w	r2, r2, #1
 800386c:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	2200      	movs	r2, #0
 8003872:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	2220      	movs	r2, #32
 8003878:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	2200      	movs	r2, #0
 8003880:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	2200      	movs	r2, #0
 8003886:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 800388a:	2300      	movs	r3, #0
}
 800388c:	4618      	mov	r0, r3
 800388e:	3708      	adds	r7, #8
 8003890:	46bd      	mov	sp, r7
 8003892:	bd80      	pop	{r7, pc}

08003894 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8003894:	b580      	push	{r7, lr}
 8003896:	b082      	sub	sp, #8
 8003898:	af00      	add	r7, sp, #0
 800389a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d101      	bne.n	80038a6 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 80038a2:	2301      	movs	r3, #1
 80038a4:	e021      	b.n	80038ea <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	2224      	movs	r2, #36	@ 0x24
 80038aa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	681a      	ldr	r2, [r3, #0]
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	f022 0201 	bic.w	r2, r2, #1
 80038bc:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 80038be:	6878      	ldr	r0, [r7, #4]
 80038c0:	f7fe ff98 	bl	80027f4 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	2200      	movs	r2, #0
 80038c8:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	2200      	movs	r2, #0
 80038ce:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	2200      	movs	r2, #0
 80038d6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	2200      	movs	r2, #0
 80038dc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	2200      	movs	r2, #0
 80038e4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80038e8:	2300      	movs	r3, #0
}
 80038ea:	4618      	mov	r0, r3
 80038ec:	3708      	adds	r7, #8
 80038ee:	46bd      	mov	sp, r7
 80038f0:	bd80      	pop	{r7, pc}
	...

080038f4 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80038f4:	b580      	push	{r7, lr}
 80038f6:	b088      	sub	sp, #32
 80038f8:	af02      	add	r7, sp, #8
 80038fa:	60f8      	str	r0, [r7, #12]
 80038fc:	4608      	mov	r0, r1
 80038fe:	4611      	mov	r1, r2
 8003900:	461a      	mov	r2, r3
 8003902:	4603      	mov	r3, r0
 8003904:	817b      	strh	r3, [r7, #10]
 8003906:	460b      	mov	r3, r1
 8003908:	813b      	strh	r3, [r7, #8]
 800390a:	4613      	mov	r3, r2
 800390c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003914:	b2db      	uxtb	r3, r3
 8003916:	2b20      	cmp	r3, #32
 8003918:	f040 80f9 	bne.w	8003b0e <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 800391c:	6a3b      	ldr	r3, [r7, #32]
 800391e:	2b00      	cmp	r3, #0
 8003920:	d002      	beq.n	8003928 <HAL_I2C_Mem_Write+0x34>
 8003922:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8003924:	2b00      	cmp	r3, #0
 8003926:	d105      	bne.n	8003934 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800392e:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8003930:	2301      	movs	r3, #1
 8003932:	e0ed      	b.n	8003b10 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800393a:	2b01      	cmp	r3, #1
 800393c:	d101      	bne.n	8003942 <HAL_I2C_Mem_Write+0x4e>
 800393e:	2302      	movs	r3, #2
 8003940:	e0e6      	b.n	8003b10 <HAL_I2C_Mem_Write+0x21c>
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	2201      	movs	r2, #1
 8003946:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800394a:	f7ff faed 	bl	8002f28 <HAL_GetTick>
 800394e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003950:	697b      	ldr	r3, [r7, #20]
 8003952:	9300      	str	r3, [sp, #0]
 8003954:	2319      	movs	r3, #25
 8003956:	2201      	movs	r2, #1
 8003958:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800395c:	68f8      	ldr	r0, [r7, #12]
 800395e:	f000 fac3 	bl	8003ee8 <I2C_WaitOnFlagUntilTimeout>
 8003962:	4603      	mov	r3, r0
 8003964:	2b00      	cmp	r3, #0
 8003966:	d001      	beq.n	800396c <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8003968:	2301      	movs	r3, #1
 800396a:	e0d1      	b.n	8003b10 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	2221      	movs	r2, #33	@ 0x21
 8003970:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	2240      	movs	r2, #64	@ 0x40
 8003978:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	2200      	movs	r2, #0
 8003980:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	6a3a      	ldr	r2, [r7, #32]
 8003986:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800398c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	2200      	movs	r2, #0
 8003992:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003994:	88f8      	ldrh	r0, [r7, #6]
 8003996:	893a      	ldrh	r2, [r7, #8]
 8003998:	8979      	ldrh	r1, [r7, #10]
 800399a:	697b      	ldr	r3, [r7, #20]
 800399c:	9301      	str	r3, [sp, #4]
 800399e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80039a0:	9300      	str	r3, [sp, #0]
 80039a2:	4603      	mov	r3, r0
 80039a4:	68f8      	ldr	r0, [r7, #12]
 80039a6:	f000 f9d3 	bl	8003d50 <I2C_RequestMemoryWrite>
 80039aa:	4603      	mov	r3, r0
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d005      	beq.n	80039bc <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	2200      	movs	r2, #0
 80039b4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 80039b8:	2301      	movs	r3, #1
 80039ba:	e0a9      	b.n	8003b10 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80039c0:	b29b      	uxth	r3, r3
 80039c2:	2bff      	cmp	r3, #255	@ 0xff
 80039c4:	d90e      	bls.n	80039e4 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	22ff      	movs	r2, #255	@ 0xff
 80039ca:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80039d0:	b2da      	uxtb	r2, r3
 80039d2:	8979      	ldrh	r1, [r7, #10]
 80039d4:	2300      	movs	r3, #0
 80039d6:	9300      	str	r3, [sp, #0]
 80039d8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80039dc:	68f8      	ldr	r0, [r7, #12]
 80039de:	f000 fc47 	bl	8004270 <I2C_TransferConfig>
 80039e2:	e00f      	b.n	8003a04 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80039e8:	b29a      	uxth	r2, r3
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80039f2:	b2da      	uxtb	r2, r3
 80039f4:	8979      	ldrh	r1, [r7, #10]
 80039f6:	2300      	movs	r3, #0
 80039f8:	9300      	str	r3, [sp, #0]
 80039fa:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80039fe:	68f8      	ldr	r0, [r7, #12]
 8003a00:	f000 fc36 	bl	8004270 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003a04:	697a      	ldr	r2, [r7, #20]
 8003a06:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003a08:	68f8      	ldr	r0, [r7, #12]
 8003a0a:	f000 fac6 	bl	8003f9a <I2C_WaitOnTXISFlagUntilTimeout>
 8003a0e:	4603      	mov	r3, r0
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d001      	beq.n	8003a18 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8003a14:	2301      	movs	r3, #1
 8003a16:	e07b      	b.n	8003b10 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a1c:	781a      	ldrb	r2, [r3, #0]
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a28:	1c5a      	adds	r2, r3, #1
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a32:	b29b      	uxth	r3, r3
 8003a34:	3b01      	subs	r3, #1
 8003a36:	b29a      	uxth	r2, r3
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003a40:	3b01      	subs	r3, #1
 8003a42:	b29a      	uxth	r2, r3
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a4c:	b29b      	uxth	r3, r3
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d034      	beq.n	8003abc <HAL_I2C_Mem_Write+0x1c8>
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d130      	bne.n	8003abc <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003a5a:	697b      	ldr	r3, [r7, #20]
 8003a5c:	9300      	str	r3, [sp, #0]
 8003a5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a60:	2200      	movs	r2, #0
 8003a62:	2180      	movs	r1, #128	@ 0x80
 8003a64:	68f8      	ldr	r0, [r7, #12]
 8003a66:	f000 fa3f 	bl	8003ee8 <I2C_WaitOnFlagUntilTimeout>
 8003a6a:	4603      	mov	r3, r0
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d001      	beq.n	8003a74 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8003a70:	2301      	movs	r3, #1
 8003a72:	e04d      	b.n	8003b10 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a78:	b29b      	uxth	r3, r3
 8003a7a:	2bff      	cmp	r3, #255	@ 0xff
 8003a7c:	d90e      	bls.n	8003a9c <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	22ff      	movs	r2, #255	@ 0xff
 8003a82:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003a88:	b2da      	uxtb	r2, r3
 8003a8a:	8979      	ldrh	r1, [r7, #10]
 8003a8c:	2300      	movs	r3, #0
 8003a8e:	9300      	str	r3, [sp, #0]
 8003a90:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003a94:	68f8      	ldr	r0, [r7, #12]
 8003a96:	f000 fbeb 	bl	8004270 <I2C_TransferConfig>
 8003a9a:	e00f      	b.n	8003abc <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003aa0:	b29a      	uxth	r2, r3
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003aaa:	b2da      	uxtb	r2, r3
 8003aac:	8979      	ldrh	r1, [r7, #10]
 8003aae:	2300      	movs	r3, #0
 8003ab0:	9300      	str	r3, [sp, #0]
 8003ab2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003ab6:	68f8      	ldr	r0, [r7, #12]
 8003ab8:	f000 fbda 	bl	8004270 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ac0:	b29b      	uxth	r3, r3
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d19e      	bne.n	8003a04 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003ac6:	697a      	ldr	r2, [r7, #20]
 8003ac8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003aca:	68f8      	ldr	r0, [r7, #12]
 8003acc:	f000 faac 	bl	8004028 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003ad0:	4603      	mov	r3, r0
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d001      	beq.n	8003ada <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8003ad6:	2301      	movs	r3, #1
 8003ad8:	e01a      	b.n	8003b10 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	2220      	movs	r2, #32
 8003ae0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	6859      	ldr	r1, [r3, #4]
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	681a      	ldr	r2, [r3, #0]
 8003aec:	4b0a      	ldr	r3, [pc, #40]	@ (8003b18 <HAL_I2C_Mem_Write+0x224>)
 8003aee:	400b      	ands	r3, r1
 8003af0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	2220      	movs	r2, #32
 8003af6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	2200      	movs	r2, #0
 8003afe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	2200      	movs	r2, #0
 8003b06:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003b0a:	2300      	movs	r3, #0
 8003b0c:	e000      	b.n	8003b10 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8003b0e:	2302      	movs	r3, #2
  }
}
 8003b10:	4618      	mov	r0, r3
 8003b12:	3718      	adds	r7, #24
 8003b14:	46bd      	mov	sp, r7
 8003b16:	bd80      	pop	{r7, pc}
 8003b18:	fe00e800 	.word	0xfe00e800

08003b1c <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003b1c:	b580      	push	{r7, lr}
 8003b1e:	b088      	sub	sp, #32
 8003b20:	af02      	add	r7, sp, #8
 8003b22:	60f8      	str	r0, [r7, #12]
 8003b24:	4608      	mov	r0, r1
 8003b26:	4611      	mov	r1, r2
 8003b28:	461a      	mov	r2, r3
 8003b2a:	4603      	mov	r3, r0
 8003b2c:	817b      	strh	r3, [r7, #10]
 8003b2e:	460b      	mov	r3, r1
 8003b30:	813b      	strh	r3, [r7, #8]
 8003b32:	4613      	mov	r3, r2
 8003b34:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003b3c:	b2db      	uxtb	r3, r3
 8003b3e:	2b20      	cmp	r3, #32
 8003b40:	f040 80fd 	bne.w	8003d3e <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8003b44:	6a3b      	ldr	r3, [r7, #32]
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d002      	beq.n	8003b50 <HAL_I2C_Mem_Read+0x34>
 8003b4a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d105      	bne.n	8003b5c <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003b56:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8003b58:	2301      	movs	r3, #1
 8003b5a:	e0f1      	b.n	8003d40 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003b62:	2b01      	cmp	r3, #1
 8003b64:	d101      	bne.n	8003b6a <HAL_I2C_Mem_Read+0x4e>
 8003b66:	2302      	movs	r3, #2
 8003b68:	e0ea      	b.n	8003d40 <HAL_I2C_Mem_Read+0x224>
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	2201      	movs	r2, #1
 8003b6e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003b72:	f7ff f9d9 	bl	8002f28 <HAL_GetTick>
 8003b76:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003b78:	697b      	ldr	r3, [r7, #20]
 8003b7a:	9300      	str	r3, [sp, #0]
 8003b7c:	2319      	movs	r3, #25
 8003b7e:	2201      	movs	r2, #1
 8003b80:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003b84:	68f8      	ldr	r0, [r7, #12]
 8003b86:	f000 f9af 	bl	8003ee8 <I2C_WaitOnFlagUntilTimeout>
 8003b8a:	4603      	mov	r3, r0
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d001      	beq.n	8003b94 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8003b90:	2301      	movs	r3, #1
 8003b92:	e0d5      	b.n	8003d40 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	2222      	movs	r2, #34	@ 0x22
 8003b98:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	2240      	movs	r2, #64	@ 0x40
 8003ba0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	2200      	movs	r2, #0
 8003ba8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	6a3a      	ldr	r2, [r7, #32]
 8003bae:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8003bb4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	2200      	movs	r2, #0
 8003bba:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003bbc:	88f8      	ldrh	r0, [r7, #6]
 8003bbe:	893a      	ldrh	r2, [r7, #8]
 8003bc0:	8979      	ldrh	r1, [r7, #10]
 8003bc2:	697b      	ldr	r3, [r7, #20]
 8003bc4:	9301      	str	r3, [sp, #4]
 8003bc6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003bc8:	9300      	str	r3, [sp, #0]
 8003bca:	4603      	mov	r3, r0
 8003bcc:	68f8      	ldr	r0, [r7, #12]
 8003bce:	f000 f913 	bl	8003df8 <I2C_RequestMemoryRead>
 8003bd2:	4603      	mov	r3, r0
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d005      	beq.n	8003be4 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	2200      	movs	r2, #0
 8003bdc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8003be0:	2301      	movs	r3, #1
 8003be2:	e0ad      	b.n	8003d40 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003be8:	b29b      	uxth	r3, r3
 8003bea:	2bff      	cmp	r3, #255	@ 0xff
 8003bec:	d90e      	bls.n	8003c0c <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = 1U;
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	2201      	movs	r2, #1
 8003bf2:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003bf8:	b2da      	uxtb	r2, r3
 8003bfa:	8979      	ldrh	r1, [r7, #10]
 8003bfc:	4b52      	ldr	r3, [pc, #328]	@ (8003d48 <HAL_I2C_Mem_Read+0x22c>)
 8003bfe:	9300      	str	r3, [sp, #0]
 8003c00:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003c04:	68f8      	ldr	r0, [r7, #12]
 8003c06:	f000 fb33 	bl	8004270 <I2C_TransferConfig>
 8003c0a:	e00f      	b.n	8003c2c <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c10:	b29a      	uxth	r2, r3
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003c1a:	b2da      	uxtb	r2, r3
 8003c1c:	8979      	ldrh	r1, [r7, #10]
 8003c1e:	4b4a      	ldr	r3, [pc, #296]	@ (8003d48 <HAL_I2C_Mem_Read+0x22c>)
 8003c20:	9300      	str	r3, [sp, #0]
 8003c22:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003c26:	68f8      	ldr	r0, [r7, #12]
 8003c28:	f000 fb22 	bl	8004270 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8003c2c:	697b      	ldr	r3, [r7, #20]
 8003c2e:	9300      	str	r3, [sp, #0]
 8003c30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c32:	2200      	movs	r2, #0
 8003c34:	2104      	movs	r1, #4
 8003c36:	68f8      	ldr	r0, [r7, #12]
 8003c38:	f000 f956 	bl	8003ee8 <I2C_WaitOnFlagUntilTimeout>
 8003c3c:	4603      	mov	r3, r0
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d001      	beq.n	8003c46 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8003c42:	2301      	movs	r3, #1
 8003c44:	e07c      	b.n	8003d40 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c50:	b2d2      	uxtb	r2, r2
 8003c52:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c58:	1c5a      	adds	r2, r3, #1
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003c62:	3b01      	subs	r3, #1
 8003c64:	b29a      	uxth	r2, r3
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c6e:	b29b      	uxth	r3, r3
 8003c70:	3b01      	subs	r3, #1
 8003c72:	b29a      	uxth	r2, r3
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c7c:	b29b      	uxth	r3, r3
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d034      	beq.n	8003cec <HAL_I2C_Mem_Read+0x1d0>
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d130      	bne.n	8003cec <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003c8a:	697b      	ldr	r3, [r7, #20]
 8003c8c:	9300      	str	r3, [sp, #0]
 8003c8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c90:	2200      	movs	r2, #0
 8003c92:	2180      	movs	r1, #128	@ 0x80
 8003c94:	68f8      	ldr	r0, [r7, #12]
 8003c96:	f000 f927 	bl	8003ee8 <I2C_WaitOnFlagUntilTimeout>
 8003c9a:	4603      	mov	r3, r0
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d001      	beq.n	8003ca4 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8003ca0:	2301      	movs	r3, #1
 8003ca2:	e04d      	b.n	8003d40 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ca8:	b29b      	uxth	r3, r3
 8003caa:	2bff      	cmp	r3, #255	@ 0xff
 8003cac:	d90e      	bls.n	8003ccc <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = 1U;
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	2201      	movs	r2, #1
 8003cb2:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003cb8:	b2da      	uxtb	r2, r3
 8003cba:	8979      	ldrh	r1, [r7, #10]
 8003cbc:	2300      	movs	r3, #0
 8003cbe:	9300      	str	r3, [sp, #0]
 8003cc0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003cc4:	68f8      	ldr	r0, [r7, #12]
 8003cc6:	f000 fad3 	bl	8004270 <I2C_TransferConfig>
 8003cca:	e00f      	b.n	8003cec <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003cd0:	b29a      	uxth	r2, r3
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003cda:	b2da      	uxtb	r2, r3
 8003cdc:	8979      	ldrh	r1, [r7, #10]
 8003cde:	2300      	movs	r3, #0
 8003ce0:	9300      	str	r3, [sp, #0]
 8003ce2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003ce6:	68f8      	ldr	r0, [r7, #12]
 8003ce8:	f000 fac2 	bl	8004270 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003cf0:	b29b      	uxth	r3, r3
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d19a      	bne.n	8003c2c <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003cf6:	697a      	ldr	r2, [r7, #20]
 8003cf8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003cfa:	68f8      	ldr	r0, [r7, #12]
 8003cfc:	f000 f994 	bl	8004028 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003d00:	4603      	mov	r3, r0
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d001      	beq.n	8003d0a <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8003d06:	2301      	movs	r3, #1
 8003d08:	e01a      	b.n	8003d40 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	2220      	movs	r2, #32
 8003d10:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	6859      	ldr	r1, [r3, #4]
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	681a      	ldr	r2, [r3, #0]
 8003d1c:	4b0b      	ldr	r3, [pc, #44]	@ (8003d4c <HAL_I2C_Mem_Read+0x230>)
 8003d1e:	400b      	ands	r3, r1
 8003d20:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	2220      	movs	r2, #32
 8003d26:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	2200      	movs	r2, #0
 8003d2e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	2200      	movs	r2, #0
 8003d36:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003d3a:	2300      	movs	r3, #0
 8003d3c:	e000      	b.n	8003d40 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8003d3e:	2302      	movs	r3, #2
  }
}
 8003d40:	4618      	mov	r0, r3
 8003d42:	3718      	adds	r7, #24
 8003d44:	46bd      	mov	sp, r7
 8003d46:	bd80      	pop	{r7, pc}
 8003d48:	80002400 	.word	0x80002400
 8003d4c:	fe00e800 	.word	0xfe00e800

08003d50 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8003d50:	b580      	push	{r7, lr}
 8003d52:	b086      	sub	sp, #24
 8003d54:	af02      	add	r7, sp, #8
 8003d56:	60f8      	str	r0, [r7, #12]
 8003d58:	4608      	mov	r0, r1
 8003d5a:	4611      	mov	r1, r2
 8003d5c:	461a      	mov	r2, r3
 8003d5e:	4603      	mov	r3, r0
 8003d60:	817b      	strh	r3, [r7, #10]
 8003d62:	460b      	mov	r3, r1
 8003d64:	813b      	strh	r3, [r7, #8]
 8003d66:	4613      	mov	r3, r2
 8003d68:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8003d6a:	88fb      	ldrh	r3, [r7, #6]
 8003d6c:	b2da      	uxtb	r2, r3
 8003d6e:	8979      	ldrh	r1, [r7, #10]
 8003d70:	4b20      	ldr	r3, [pc, #128]	@ (8003df4 <I2C_RequestMemoryWrite+0xa4>)
 8003d72:	9300      	str	r3, [sp, #0]
 8003d74:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003d78:	68f8      	ldr	r0, [r7, #12]
 8003d7a:	f000 fa79 	bl	8004270 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003d7e:	69fa      	ldr	r2, [r7, #28]
 8003d80:	69b9      	ldr	r1, [r7, #24]
 8003d82:	68f8      	ldr	r0, [r7, #12]
 8003d84:	f000 f909 	bl	8003f9a <I2C_WaitOnTXISFlagUntilTimeout>
 8003d88:	4603      	mov	r3, r0
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d001      	beq.n	8003d92 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8003d8e:	2301      	movs	r3, #1
 8003d90:	e02c      	b.n	8003dec <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003d92:	88fb      	ldrh	r3, [r7, #6]
 8003d94:	2b01      	cmp	r3, #1
 8003d96:	d105      	bne.n	8003da4 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003d98:	893b      	ldrh	r3, [r7, #8]
 8003d9a:	b2da      	uxtb	r2, r3
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	629a      	str	r2, [r3, #40]	@ 0x28
 8003da2:	e015      	b.n	8003dd0 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003da4:	893b      	ldrh	r3, [r7, #8]
 8003da6:	0a1b      	lsrs	r3, r3, #8
 8003da8:	b29b      	uxth	r3, r3
 8003daa:	b2da      	uxtb	r2, r3
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003db2:	69fa      	ldr	r2, [r7, #28]
 8003db4:	69b9      	ldr	r1, [r7, #24]
 8003db6:	68f8      	ldr	r0, [r7, #12]
 8003db8:	f000 f8ef 	bl	8003f9a <I2C_WaitOnTXISFlagUntilTimeout>
 8003dbc:	4603      	mov	r3, r0
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d001      	beq.n	8003dc6 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8003dc2:	2301      	movs	r3, #1
 8003dc4:	e012      	b.n	8003dec <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003dc6:	893b      	ldrh	r3, [r7, #8]
 8003dc8:	b2da      	uxtb	r2, r3
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8003dd0:	69fb      	ldr	r3, [r7, #28]
 8003dd2:	9300      	str	r3, [sp, #0]
 8003dd4:	69bb      	ldr	r3, [r7, #24]
 8003dd6:	2200      	movs	r2, #0
 8003dd8:	2180      	movs	r1, #128	@ 0x80
 8003dda:	68f8      	ldr	r0, [r7, #12]
 8003ddc:	f000 f884 	bl	8003ee8 <I2C_WaitOnFlagUntilTimeout>
 8003de0:	4603      	mov	r3, r0
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d001      	beq.n	8003dea <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8003de6:	2301      	movs	r3, #1
 8003de8:	e000      	b.n	8003dec <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8003dea:	2300      	movs	r3, #0
}
 8003dec:	4618      	mov	r0, r3
 8003dee:	3710      	adds	r7, #16
 8003df0:	46bd      	mov	sp, r7
 8003df2:	bd80      	pop	{r7, pc}
 8003df4:	80002000 	.word	0x80002000

08003df8 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8003df8:	b580      	push	{r7, lr}
 8003dfa:	b086      	sub	sp, #24
 8003dfc:	af02      	add	r7, sp, #8
 8003dfe:	60f8      	str	r0, [r7, #12]
 8003e00:	4608      	mov	r0, r1
 8003e02:	4611      	mov	r1, r2
 8003e04:	461a      	mov	r2, r3
 8003e06:	4603      	mov	r3, r0
 8003e08:	817b      	strh	r3, [r7, #10]
 8003e0a:	460b      	mov	r3, r1
 8003e0c:	813b      	strh	r3, [r7, #8]
 8003e0e:	4613      	mov	r3, r2
 8003e10:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8003e12:	88fb      	ldrh	r3, [r7, #6]
 8003e14:	b2da      	uxtb	r2, r3
 8003e16:	8979      	ldrh	r1, [r7, #10]
 8003e18:	4b20      	ldr	r3, [pc, #128]	@ (8003e9c <I2C_RequestMemoryRead+0xa4>)
 8003e1a:	9300      	str	r3, [sp, #0]
 8003e1c:	2300      	movs	r3, #0
 8003e1e:	68f8      	ldr	r0, [r7, #12]
 8003e20:	f000 fa26 	bl	8004270 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003e24:	69fa      	ldr	r2, [r7, #28]
 8003e26:	69b9      	ldr	r1, [r7, #24]
 8003e28:	68f8      	ldr	r0, [r7, #12]
 8003e2a:	f000 f8b6 	bl	8003f9a <I2C_WaitOnTXISFlagUntilTimeout>
 8003e2e:	4603      	mov	r3, r0
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d001      	beq.n	8003e38 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8003e34:	2301      	movs	r3, #1
 8003e36:	e02c      	b.n	8003e92 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003e38:	88fb      	ldrh	r3, [r7, #6]
 8003e3a:	2b01      	cmp	r3, #1
 8003e3c:	d105      	bne.n	8003e4a <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003e3e:	893b      	ldrh	r3, [r7, #8]
 8003e40:	b2da      	uxtb	r2, r3
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	629a      	str	r2, [r3, #40]	@ 0x28
 8003e48:	e015      	b.n	8003e76 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003e4a:	893b      	ldrh	r3, [r7, #8]
 8003e4c:	0a1b      	lsrs	r3, r3, #8
 8003e4e:	b29b      	uxth	r3, r3
 8003e50:	b2da      	uxtb	r2, r3
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003e58:	69fa      	ldr	r2, [r7, #28]
 8003e5a:	69b9      	ldr	r1, [r7, #24]
 8003e5c:	68f8      	ldr	r0, [r7, #12]
 8003e5e:	f000 f89c 	bl	8003f9a <I2C_WaitOnTXISFlagUntilTimeout>
 8003e62:	4603      	mov	r3, r0
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d001      	beq.n	8003e6c <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8003e68:	2301      	movs	r3, #1
 8003e6a:	e012      	b.n	8003e92 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003e6c:	893b      	ldrh	r3, [r7, #8]
 8003e6e:	b2da      	uxtb	r2, r3
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8003e76:	69fb      	ldr	r3, [r7, #28]
 8003e78:	9300      	str	r3, [sp, #0]
 8003e7a:	69bb      	ldr	r3, [r7, #24]
 8003e7c:	2200      	movs	r2, #0
 8003e7e:	2140      	movs	r1, #64	@ 0x40
 8003e80:	68f8      	ldr	r0, [r7, #12]
 8003e82:	f000 f831 	bl	8003ee8 <I2C_WaitOnFlagUntilTimeout>
 8003e86:	4603      	mov	r3, r0
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d001      	beq.n	8003e90 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8003e8c:	2301      	movs	r3, #1
 8003e8e:	e000      	b.n	8003e92 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8003e90:	2300      	movs	r3, #0
}
 8003e92:	4618      	mov	r0, r3
 8003e94:	3710      	adds	r7, #16
 8003e96:	46bd      	mov	sp, r7
 8003e98:	bd80      	pop	{r7, pc}
 8003e9a:	bf00      	nop
 8003e9c:	80002000 	.word	0x80002000

08003ea0 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003ea0:	b480      	push	{r7}
 8003ea2:	b083      	sub	sp, #12
 8003ea4:	af00      	add	r7, sp, #0
 8003ea6:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	699b      	ldr	r3, [r3, #24]
 8003eae:	f003 0302 	and.w	r3, r3, #2
 8003eb2:	2b02      	cmp	r3, #2
 8003eb4:	d103      	bne.n	8003ebe <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	2200      	movs	r2, #0
 8003ebc:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	699b      	ldr	r3, [r3, #24]
 8003ec4:	f003 0301 	and.w	r3, r3, #1
 8003ec8:	2b01      	cmp	r3, #1
 8003eca:	d007      	beq.n	8003edc <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	699a      	ldr	r2, [r3, #24]
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	f042 0201 	orr.w	r2, r2, #1
 8003eda:	619a      	str	r2, [r3, #24]
  }
}
 8003edc:	bf00      	nop
 8003ede:	370c      	adds	r7, #12
 8003ee0:	46bd      	mov	sp, r7
 8003ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee6:	4770      	bx	lr

08003ee8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003ee8:	b580      	push	{r7, lr}
 8003eea:	b084      	sub	sp, #16
 8003eec:	af00      	add	r7, sp, #0
 8003eee:	60f8      	str	r0, [r7, #12]
 8003ef0:	60b9      	str	r1, [r7, #8]
 8003ef2:	603b      	str	r3, [r7, #0]
 8003ef4:	4613      	mov	r3, r2
 8003ef6:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003ef8:	e03b      	b.n	8003f72 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003efa:	69ba      	ldr	r2, [r7, #24]
 8003efc:	6839      	ldr	r1, [r7, #0]
 8003efe:	68f8      	ldr	r0, [r7, #12]
 8003f00:	f000 f8d6 	bl	80040b0 <I2C_IsErrorOccurred>
 8003f04:	4603      	mov	r3, r0
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d001      	beq.n	8003f0e <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8003f0a:	2301      	movs	r3, #1
 8003f0c:	e041      	b.n	8003f92 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003f0e:	683b      	ldr	r3, [r7, #0]
 8003f10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f14:	d02d      	beq.n	8003f72 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f16:	f7ff f807 	bl	8002f28 <HAL_GetTick>
 8003f1a:	4602      	mov	r2, r0
 8003f1c:	69bb      	ldr	r3, [r7, #24]
 8003f1e:	1ad3      	subs	r3, r2, r3
 8003f20:	683a      	ldr	r2, [r7, #0]
 8003f22:	429a      	cmp	r2, r3
 8003f24:	d302      	bcc.n	8003f2c <I2C_WaitOnFlagUntilTimeout+0x44>
 8003f26:	683b      	ldr	r3, [r7, #0]
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d122      	bne.n	8003f72 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	699a      	ldr	r2, [r3, #24]
 8003f32:	68bb      	ldr	r3, [r7, #8]
 8003f34:	4013      	ands	r3, r2
 8003f36:	68ba      	ldr	r2, [r7, #8]
 8003f38:	429a      	cmp	r2, r3
 8003f3a:	bf0c      	ite	eq
 8003f3c:	2301      	moveq	r3, #1
 8003f3e:	2300      	movne	r3, #0
 8003f40:	b2db      	uxtb	r3, r3
 8003f42:	461a      	mov	r2, r3
 8003f44:	79fb      	ldrb	r3, [r7, #7]
 8003f46:	429a      	cmp	r2, r3
 8003f48:	d113      	bne.n	8003f72 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f4e:	f043 0220 	orr.w	r2, r3, #32
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	2220      	movs	r2, #32
 8003f5a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	2200      	movs	r2, #0
 8003f62:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	2200      	movs	r2, #0
 8003f6a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8003f6e:	2301      	movs	r3, #1
 8003f70:	e00f      	b.n	8003f92 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	699a      	ldr	r2, [r3, #24]
 8003f78:	68bb      	ldr	r3, [r7, #8]
 8003f7a:	4013      	ands	r3, r2
 8003f7c:	68ba      	ldr	r2, [r7, #8]
 8003f7e:	429a      	cmp	r2, r3
 8003f80:	bf0c      	ite	eq
 8003f82:	2301      	moveq	r3, #1
 8003f84:	2300      	movne	r3, #0
 8003f86:	b2db      	uxtb	r3, r3
 8003f88:	461a      	mov	r2, r3
 8003f8a:	79fb      	ldrb	r3, [r7, #7]
 8003f8c:	429a      	cmp	r2, r3
 8003f8e:	d0b4      	beq.n	8003efa <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003f90:	2300      	movs	r3, #0
}
 8003f92:	4618      	mov	r0, r3
 8003f94:	3710      	adds	r7, #16
 8003f96:	46bd      	mov	sp, r7
 8003f98:	bd80      	pop	{r7, pc}

08003f9a <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003f9a:	b580      	push	{r7, lr}
 8003f9c:	b084      	sub	sp, #16
 8003f9e:	af00      	add	r7, sp, #0
 8003fa0:	60f8      	str	r0, [r7, #12]
 8003fa2:	60b9      	str	r1, [r7, #8]
 8003fa4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003fa6:	e033      	b.n	8004010 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003fa8:	687a      	ldr	r2, [r7, #4]
 8003faa:	68b9      	ldr	r1, [r7, #8]
 8003fac:	68f8      	ldr	r0, [r7, #12]
 8003fae:	f000 f87f 	bl	80040b0 <I2C_IsErrorOccurred>
 8003fb2:	4603      	mov	r3, r0
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d001      	beq.n	8003fbc <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003fb8:	2301      	movs	r3, #1
 8003fba:	e031      	b.n	8004020 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003fbc:	68bb      	ldr	r3, [r7, #8]
 8003fbe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fc2:	d025      	beq.n	8004010 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003fc4:	f7fe ffb0 	bl	8002f28 <HAL_GetTick>
 8003fc8:	4602      	mov	r2, r0
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	1ad3      	subs	r3, r2, r3
 8003fce:	68ba      	ldr	r2, [r7, #8]
 8003fd0:	429a      	cmp	r2, r3
 8003fd2:	d302      	bcc.n	8003fda <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8003fd4:	68bb      	ldr	r3, [r7, #8]
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d11a      	bne.n	8004010 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	699b      	ldr	r3, [r3, #24]
 8003fe0:	f003 0302 	and.w	r3, r3, #2
 8003fe4:	2b02      	cmp	r3, #2
 8003fe6:	d013      	beq.n	8004010 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003fec:	f043 0220 	orr.w	r2, r3, #32
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	2220      	movs	r2, #32
 8003ff8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	2200      	movs	r2, #0
 8004000:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	2200      	movs	r2, #0
 8004008:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800400c:	2301      	movs	r3, #1
 800400e:	e007      	b.n	8004020 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	699b      	ldr	r3, [r3, #24]
 8004016:	f003 0302 	and.w	r3, r3, #2
 800401a:	2b02      	cmp	r3, #2
 800401c:	d1c4      	bne.n	8003fa8 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800401e:	2300      	movs	r3, #0
}
 8004020:	4618      	mov	r0, r3
 8004022:	3710      	adds	r7, #16
 8004024:	46bd      	mov	sp, r7
 8004026:	bd80      	pop	{r7, pc}

08004028 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004028:	b580      	push	{r7, lr}
 800402a:	b084      	sub	sp, #16
 800402c:	af00      	add	r7, sp, #0
 800402e:	60f8      	str	r0, [r7, #12]
 8004030:	60b9      	str	r1, [r7, #8]
 8004032:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004034:	e02f      	b.n	8004096 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004036:	687a      	ldr	r2, [r7, #4]
 8004038:	68b9      	ldr	r1, [r7, #8]
 800403a:	68f8      	ldr	r0, [r7, #12]
 800403c:	f000 f838 	bl	80040b0 <I2C_IsErrorOccurred>
 8004040:	4603      	mov	r3, r0
 8004042:	2b00      	cmp	r3, #0
 8004044:	d001      	beq.n	800404a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004046:	2301      	movs	r3, #1
 8004048:	e02d      	b.n	80040a6 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800404a:	f7fe ff6d 	bl	8002f28 <HAL_GetTick>
 800404e:	4602      	mov	r2, r0
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	1ad3      	subs	r3, r2, r3
 8004054:	68ba      	ldr	r2, [r7, #8]
 8004056:	429a      	cmp	r2, r3
 8004058:	d302      	bcc.n	8004060 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800405a:	68bb      	ldr	r3, [r7, #8]
 800405c:	2b00      	cmp	r3, #0
 800405e:	d11a      	bne.n	8004096 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	699b      	ldr	r3, [r3, #24]
 8004066:	f003 0320 	and.w	r3, r3, #32
 800406a:	2b20      	cmp	r3, #32
 800406c:	d013      	beq.n	8004096 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004072:	f043 0220 	orr.w	r2, r3, #32
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	2220      	movs	r2, #32
 800407e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	2200      	movs	r2, #0
 8004086:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	2200      	movs	r2, #0
 800408e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8004092:	2301      	movs	r3, #1
 8004094:	e007      	b.n	80040a6 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	699b      	ldr	r3, [r3, #24]
 800409c:	f003 0320 	and.w	r3, r3, #32
 80040a0:	2b20      	cmp	r3, #32
 80040a2:	d1c8      	bne.n	8004036 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80040a4:	2300      	movs	r3, #0
}
 80040a6:	4618      	mov	r0, r3
 80040a8:	3710      	adds	r7, #16
 80040aa:	46bd      	mov	sp, r7
 80040ac:	bd80      	pop	{r7, pc}
	...

080040b0 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80040b0:	b580      	push	{r7, lr}
 80040b2:	b08a      	sub	sp, #40	@ 0x28
 80040b4:	af00      	add	r7, sp, #0
 80040b6:	60f8      	str	r0, [r7, #12]
 80040b8:	60b9      	str	r1, [r7, #8]
 80040ba:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80040bc:	2300      	movs	r3, #0
 80040be:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	699b      	ldr	r3, [r3, #24]
 80040c8:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80040ca:	2300      	movs	r3, #0
 80040cc:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80040d2:	69bb      	ldr	r3, [r7, #24]
 80040d4:	f003 0310 	and.w	r3, r3, #16
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d068      	beq.n	80041ae <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	2210      	movs	r2, #16
 80040e2:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80040e4:	e049      	b.n	800417a <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80040e6:	68bb      	ldr	r3, [r7, #8]
 80040e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040ec:	d045      	beq.n	800417a <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80040ee:	f7fe ff1b 	bl	8002f28 <HAL_GetTick>
 80040f2:	4602      	mov	r2, r0
 80040f4:	69fb      	ldr	r3, [r7, #28]
 80040f6:	1ad3      	subs	r3, r2, r3
 80040f8:	68ba      	ldr	r2, [r7, #8]
 80040fa:	429a      	cmp	r2, r3
 80040fc:	d302      	bcc.n	8004104 <I2C_IsErrorOccurred+0x54>
 80040fe:	68bb      	ldr	r3, [r7, #8]
 8004100:	2b00      	cmp	r3, #0
 8004102:	d13a      	bne.n	800417a <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	685b      	ldr	r3, [r3, #4]
 800410a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800410e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004116:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	699b      	ldr	r3, [r3, #24]
 800411e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004122:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004126:	d121      	bne.n	800416c <I2C_IsErrorOccurred+0xbc>
 8004128:	697b      	ldr	r3, [r7, #20]
 800412a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800412e:	d01d      	beq.n	800416c <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8004130:	7cfb      	ldrb	r3, [r7, #19]
 8004132:	2b20      	cmp	r3, #32
 8004134:	d01a      	beq.n	800416c <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	685a      	ldr	r2, [r3, #4]
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004144:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8004146:	f7fe feef 	bl	8002f28 <HAL_GetTick>
 800414a:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800414c:	e00e      	b.n	800416c <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800414e:	f7fe feeb 	bl	8002f28 <HAL_GetTick>
 8004152:	4602      	mov	r2, r0
 8004154:	69fb      	ldr	r3, [r7, #28]
 8004156:	1ad3      	subs	r3, r2, r3
 8004158:	2b19      	cmp	r3, #25
 800415a:	d907      	bls.n	800416c <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 800415c:	6a3b      	ldr	r3, [r7, #32]
 800415e:	f043 0320 	orr.w	r3, r3, #32
 8004162:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8004164:	2301      	movs	r3, #1
 8004166:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 800416a:	e006      	b.n	800417a <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	699b      	ldr	r3, [r3, #24]
 8004172:	f003 0320 	and.w	r3, r3, #32
 8004176:	2b20      	cmp	r3, #32
 8004178:	d1e9      	bne.n	800414e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	699b      	ldr	r3, [r3, #24]
 8004180:	f003 0320 	and.w	r3, r3, #32
 8004184:	2b20      	cmp	r3, #32
 8004186:	d003      	beq.n	8004190 <I2C_IsErrorOccurred+0xe0>
 8004188:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800418c:	2b00      	cmp	r3, #0
 800418e:	d0aa      	beq.n	80040e6 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8004190:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004194:	2b00      	cmp	r3, #0
 8004196:	d103      	bne.n	80041a0 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	2220      	movs	r2, #32
 800419e:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80041a0:	6a3b      	ldr	r3, [r7, #32]
 80041a2:	f043 0304 	orr.w	r3, r3, #4
 80041a6:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80041a8:	2301      	movs	r3, #1
 80041aa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	699b      	ldr	r3, [r3, #24]
 80041b4:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80041b6:	69bb      	ldr	r3, [r7, #24]
 80041b8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d00b      	beq.n	80041d8 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80041c0:	6a3b      	ldr	r3, [r7, #32]
 80041c2:	f043 0301 	orr.w	r3, r3, #1
 80041c6:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80041d0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80041d2:	2301      	movs	r3, #1
 80041d4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80041d8:	69bb      	ldr	r3, [r7, #24]
 80041da:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d00b      	beq.n	80041fa <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80041e2:	6a3b      	ldr	r3, [r7, #32]
 80041e4:	f043 0308 	orr.w	r3, r3, #8
 80041e8:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80041f2:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80041f4:	2301      	movs	r3, #1
 80041f6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80041fa:	69bb      	ldr	r3, [r7, #24]
 80041fc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004200:	2b00      	cmp	r3, #0
 8004202:	d00b      	beq.n	800421c <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8004204:	6a3b      	ldr	r3, [r7, #32]
 8004206:	f043 0302 	orr.w	r3, r3, #2
 800420a:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004214:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004216:	2301      	movs	r3, #1
 8004218:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 800421c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004220:	2b00      	cmp	r3, #0
 8004222:	d01c      	beq.n	800425e <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004224:	68f8      	ldr	r0, [r7, #12]
 8004226:	f7ff fe3b 	bl	8003ea0 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	6859      	ldr	r1, [r3, #4]
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	681a      	ldr	r2, [r3, #0]
 8004234:	4b0d      	ldr	r3, [pc, #52]	@ (800426c <I2C_IsErrorOccurred+0x1bc>)
 8004236:	400b      	ands	r3, r1
 8004238:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800423e:	6a3b      	ldr	r3, [r7, #32]
 8004240:	431a      	orrs	r2, r3
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	2220      	movs	r2, #32
 800424a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	2200      	movs	r2, #0
 8004252:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	2200      	movs	r2, #0
 800425a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 800425e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8004262:	4618      	mov	r0, r3
 8004264:	3728      	adds	r7, #40	@ 0x28
 8004266:	46bd      	mov	sp, r7
 8004268:	bd80      	pop	{r7, pc}
 800426a:	bf00      	nop
 800426c:	fe00e800 	.word	0xfe00e800

08004270 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8004270:	b480      	push	{r7}
 8004272:	b087      	sub	sp, #28
 8004274:	af00      	add	r7, sp, #0
 8004276:	60f8      	str	r0, [r7, #12]
 8004278:	607b      	str	r3, [r7, #4]
 800427a:	460b      	mov	r3, r1
 800427c:	817b      	strh	r3, [r7, #10]
 800427e:	4613      	mov	r3, r2
 8004280:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004282:	897b      	ldrh	r3, [r7, #10]
 8004284:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004288:	7a7b      	ldrb	r3, [r7, #9]
 800428a:	041b      	lsls	r3, r3, #16
 800428c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004290:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004296:	6a3b      	ldr	r3, [r7, #32]
 8004298:	4313      	orrs	r3, r2
 800429a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800429e:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	685a      	ldr	r2, [r3, #4]
 80042a6:	6a3b      	ldr	r3, [r7, #32]
 80042a8:	0d5b      	lsrs	r3, r3, #21
 80042aa:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 80042ae:	4b08      	ldr	r3, [pc, #32]	@ (80042d0 <I2C_TransferConfig+0x60>)
 80042b0:	430b      	orrs	r3, r1
 80042b2:	43db      	mvns	r3, r3
 80042b4:	ea02 0103 	and.w	r1, r2, r3
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	697a      	ldr	r2, [r7, #20]
 80042be:	430a      	orrs	r2, r1
 80042c0:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80042c2:	bf00      	nop
 80042c4:	371c      	adds	r7, #28
 80042c6:	46bd      	mov	sp, r7
 80042c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042cc:	4770      	bx	lr
 80042ce:	bf00      	nop
 80042d0:	03ff63ff 	.word	0x03ff63ff

080042d4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80042d4:	b480      	push	{r7}
 80042d6:	b083      	sub	sp, #12
 80042d8:	af00      	add	r7, sp, #0
 80042da:	6078      	str	r0, [r7, #4]
 80042dc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80042e4:	b2db      	uxtb	r3, r3
 80042e6:	2b20      	cmp	r3, #32
 80042e8:	d138      	bne.n	800435c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80042f0:	2b01      	cmp	r3, #1
 80042f2:	d101      	bne.n	80042f8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80042f4:	2302      	movs	r3, #2
 80042f6:	e032      	b.n	800435e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	2201      	movs	r2, #1
 80042fc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	2224      	movs	r2, #36	@ 0x24
 8004304:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	681a      	ldr	r2, [r3, #0]
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	f022 0201 	bic.w	r2, r2, #1
 8004316:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	681a      	ldr	r2, [r3, #0]
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8004326:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	6819      	ldr	r1, [r3, #0]
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	683a      	ldr	r2, [r7, #0]
 8004334:	430a      	orrs	r2, r1
 8004336:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	681a      	ldr	r2, [r3, #0]
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	f042 0201 	orr.w	r2, r2, #1
 8004346:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	2220      	movs	r2, #32
 800434c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	2200      	movs	r2, #0
 8004354:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004358:	2300      	movs	r3, #0
 800435a:	e000      	b.n	800435e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800435c:	2302      	movs	r3, #2
  }
}
 800435e:	4618      	mov	r0, r3
 8004360:	370c      	adds	r7, #12
 8004362:	46bd      	mov	sp, r7
 8004364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004368:	4770      	bx	lr

0800436a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800436a:	b480      	push	{r7}
 800436c:	b085      	sub	sp, #20
 800436e:	af00      	add	r7, sp, #0
 8004370:	6078      	str	r0, [r7, #4]
 8004372:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800437a:	b2db      	uxtb	r3, r3
 800437c:	2b20      	cmp	r3, #32
 800437e:	d139      	bne.n	80043f4 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004386:	2b01      	cmp	r3, #1
 8004388:	d101      	bne.n	800438e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800438a:	2302      	movs	r3, #2
 800438c:	e033      	b.n	80043f6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	2201      	movs	r2, #1
 8004392:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	2224      	movs	r2, #36	@ 0x24
 800439a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	681a      	ldr	r2, [r3, #0]
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	f022 0201 	bic.w	r2, r2, #1
 80043ac:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80043bc:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80043be:	683b      	ldr	r3, [r7, #0]
 80043c0:	021b      	lsls	r3, r3, #8
 80043c2:	68fa      	ldr	r2, [r7, #12]
 80043c4:	4313      	orrs	r3, r2
 80043c6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	68fa      	ldr	r2, [r7, #12]
 80043ce:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	681a      	ldr	r2, [r3, #0]
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	f042 0201 	orr.w	r2, r2, #1
 80043de:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	2220      	movs	r2, #32
 80043e4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	2200      	movs	r2, #0
 80043ec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80043f0:	2300      	movs	r3, #0
 80043f2:	e000      	b.n	80043f6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80043f4:	2302      	movs	r3, #2
  }
}
 80043f6:	4618      	mov	r0, r3
 80043f8:	3714      	adds	r7, #20
 80043fa:	46bd      	mov	sp, r7
 80043fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004400:	4770      	bx	lr
	...

08004404 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004404:	b480      	push	{r7}
 8004406:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8004408:	4b04      	ldr	r3, [pc, #16]	@ (800441c <HAL_PWREx_GetVoltageRange+0x18>)
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8004410:	4618      	mov	r0, r3
 8004412:	46bd      	mov	sp, r7
 8004414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004418:	4770      	bx	lr
 800441a:	bf00      	nop
 800441c:	40007000 	.word	0x40007000

08004420 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004420:	b480      	push	{r7}
 8004422:	b085      	sub	sp, #20
 8004424:	af00      	add	r7, sp, #0
 8004426:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800442e:	d130      	bne.n	8004492 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8004430:	4b23      	ldr	r3, [pc, #140]	@ (80044c0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004438:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800443c:	d038      	beq.n	80044b0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800443e:	4b20      	ldr	r3, [pc, #128]	@ (80044c0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004446:	4a1e      	ldr	r2, [pc, #120]	@ (80044c0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004448:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800444c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800444e:	4b1d      	ldr	r3, [pc, #116]	@ (80044c4 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	2232      	movs	r2, #50	@ 0x32
 8004454:	fb02 f303 	mul.w	r3, r2, r3
 8004458:	4a1b      	ldr	r2, [pc, #108]	@ (80044c8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800445a:	fba2 2303 	umull	r2, r3, r2, r3
 800445e:	0c9b      	lsrs	r3, r3, #18
 8004460:	3301      	adds	r3, #1
 8004462:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004464:	e002      	b.n	800446c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	3b01      	subs	r3, #1
 800446a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800446c:	4b14      	ldr	r3, [pc, #80]	@ (80044c0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800446e:	695b      	ldr	r3, [r3, #20]
 8004470:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004474:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004478:	d102      	bne.n	8004480 <HAL_PWREx_ControlVoltageScaling+0x60>
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	2b00      	cmp	r3, #0
 800447e:	d1f2      	bne.n	8004466 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004480:	4b0f      	ldr	r3, [pc, #60]	@ (80044c0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004482:	695b      	ldr	r3, [r3, #20]
 8004484:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004488:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800448c:	d110      	bne.n	80044b0 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800448e:	2303      	movs	r3, #3
 8004490:	e00f      	b.n	80044b2 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8004492:	4b0b      	ldr	r3, [pc, #44]	@ (80044c0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800449a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800449e:	d007      	beq.n	80044b0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80044a0:	4b07      	ldr	r3, [pc, #28]	@ (80044c0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80044a8:	4a05      	ldr	r2, [pc, #20]	@ (80044c0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80044aa:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80044ae:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80044b0:	2300      	movs	r3, #0
}
 80044b2:	4618      	mov	r0, r3
 80044b4:	3714      	adds	r7, #20
 80044b6:	46bd      	mov	sp, r7
 80044b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044bc:	4770      	bx	lr
 80044be:	bf00      	nop
 80044c0:	40007000 	.word	0x40007000
 80044c4:	20000a0c 	.word	0x20000a0c
 80044c8:	431bde83 	.word	0x431bde83

080044cc <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80044cc:	b580      	push	{r7, lr}
 80044ce:	b088      	sub	sp, #32
 80044d0:	af00      	add	r7, sp, #0
 80044d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d101      	bne.n	80044de <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80044da:	2301      	movs	r3, #1
 80044dc:	e3ca      	b.n	8004c74 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80044de:	4b97      	ldr	r3, [pc, #604]	@ (800473c <HAL_RCC_OscConfig+0x270>)
 80044e0:	689b      	ldr	r3, [r3, #8]
 80044e2:	f003 030c 	and.w	r3, r3, #12
 80044e6:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80044e8:	4b94      	ldr	r3, [pc, #592]	@ (800473c <HAL_RCC_OscConfig+0x270>)
 80044ea:	68db      	ldr	r3, [r3, #12]
 80044ec:	f003 0303 	and.w	r3, r3, #3
 80044f0:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	f003 0310 	and.w	r3, r3, #16
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	f000 80e4 	beq.w	80046c8 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004500:	69bb      	ldr	r3, [r7, #24]
 8004502:	2b00      	cmp	r3, #0
 8004504:	d007      	beq.n	8004516 <HAL_RCC_OscConfig+0x4a>
 8004506:	69bb      	ldr	r3, [r7, #24]
 8004508:	2b0c      	cmp	r3, #12
 800450a:	f040 808b 	bne.w	8004624 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800450e:	697b      	ldr	r3, [r7, #20]
 8004510:	2b01      	cmp	r3, #1
 8004512:	f040 8087 	bne.w	8004624 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004516:	4b89      	ldr	r3, [pc, #548]	@ (800473c <HAL_RCC_OscConfig+0x270>)
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	f003 0302 	and.w	r3, r3, #2
 800451e:	2b00      	cmp	r3, #0
 8004520:	d005      	beq.n	800452e <HAL_RCC_OscConfig+0x62>
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	699b      	ldr	r3, [r3, #24]
 8004526:	2b00      	cmp	r3, #0
 8004528:	d101      	bne.n	800452e <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800452a:	2301      	movs	r3, #1
 800452c:	e3a2      	b.n	8004c74 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	6a1a      	ldr	r2, [r3, #32]
 8004532:	4b82      	ldr	r3, [pc, #520]	@ (800473c <HAL_RCC_OscConfig+0x270>)
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	f003 0308 	and.w	r3, r3, #8
 800453a:	2b00      	cmp	r3, #0
 800453c:	d004      	beq.n	8004548 <HAL_RCC_OscConfig+0x7c>
 800453e:	4b7f      	ldr	r3, [pc, #508]	@ (800473c <HAL_RCC_OscConfig+0x270>)
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004546:	e005      	b.n	8004554 <HAL_RCC_OscConfig+0x88>
 8004548:	4b7c      	ldr	r3, [pc, #496]	@ (800473c <HAL_RCC_OscConfig+0x270>)
 800454a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800454e:	091b      	lsrs	r3, r3, #4
 8004550:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004554:	4293      	cmp	r3, r2
 8004556:	d223      	bcs.n	80045a0 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	6a1b      	ldr	r3, [r3, #32]
 800455c:	4618      	mov	r0, r3
 800455e:	f000 fd55 	bl	800500c <RCC_SetFlashLatencyFromMSIRange>
 8004562:	4603      	mov	r3, r0
 8004564:	2b00      	cmp	r3, #0
 8004566:	d001      	beq.n	800456c <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8004568:	2301      	movs	r3, #1
 800456a:	e383      	b.n	8004c74 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800456c:	4b73      	ldr	r3, [pc, #460]	@ (800473c <HAL_RCC_OscConfig+0x270>)
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	4a72      	ldr	r2, [pc, #456]	@ (800473c <HAL_RCC_OscConfig+0x270>)
 8004572:	f043 0308 	orr.w	r3, r3, #8
 8004576:	6013      	str	r3, [r2, #0]
 8004578:	4b70      	ldr	r3, [pc, #448]	@ (800473c <HAL_RCC_OscConfig+0x270>)
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	6a1b      	ldr	r3, [r3, #32]
 8004584:	496d      	ldr	r1, [pc, #436]	@ (800473c <HAL_RCC_OscConfig+0x270>)
 8004586:	4313      	orrs	r3, r2
 8004588:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800458a:	4b6c      	ldr	r3, [pc, #432]	@ (800473c <HAL_RCC_OscConfig+0x270>)
 800458c:	685b      	ldr	r3, [r3, #4]
 800458e:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	69db      	ldr	r3, [r3, #28]
 8004596:	021b      	lsls	r3, r3, #8
 8004598:	4968      	ldr	r1, [pc, #416]	@ (800473c <HAL_RCC_OscConfig+0x270>)
 800459a:	4313      	orrs	r3, r2
 800459c:	604b      	str	r3, [r1, #4]
 800459e:	e025      	b.n	80045ec <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80045a0:	4b66      	ldr	r3, [pc, #408]	@ (800473c <HAL_RCC_OscConfig+0x270>)
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	4a65      	ldr	r2, [pc, #404]	@ (800473c <HAL_RCC_OscConfig+0x270>)
 80045a6:	f043 0308 	orr.w	r3, r3, #8
 80045aa:	6013      	str	r3, [r2, #0]
 80045ac:	4b63      	ldr	r3, [pc, #396]	@ (800473c <HAL_RCC_OscConfig+0x270>)
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	6a1b      	ldr	r3, [r3, #32]
 80045b8:	4960      	ldr	r1, [pc, #384]	@ (800473c <HAL_RCC_OscConfig+0x270>)
 80045ba:	4313      	orrs	r3, r2
 80045bc:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80045be:	4b5f      	ldr	r3, [pc, #380]	@ (800473c <HAL_RCC_OscConfig+0x270>)
 80045c0:	685b      	ldr	r3, [r3, #4]
 80045c2:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	69db      	ldr	r3, [r3, #28]
 80045ca:	021b      	lsls	r3, r3, #8
 80045cc:	495b      	ldr	r1, [pc, #364]	@ (800473c <HAL_RCC_OscConfig+0x270>)
 80045ce:	4313      	orrs	r3, r2
 80045d0:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80045d2:	69bb      	ldr	r3, [r7, #24]
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d109      	bne.n	80045ec <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	6a1b      	ldr	r3, [r3, #32]
 80045dc:	4618      	mov	r0, r3
 80045de:	f000 fd15 	bl	800500c <RCC_SetFlashLatencyFromMSIRange>
 80045e2:	4603      	mov	r3, r0
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d001      	beq.n	80045ec <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80045e8:	2301      	movs	r3, #1
 80045ea:	e343      	b.n	8004c74 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80045ec:	f000 fc4a 	bl	8004e84 <HAL_RCC_GetSysClockFreq>
 80045f0:	4602      	mov	r2, r0
 80045f2:	4b52      	ldr	r3, [pc, #328]	@ (800473c <HAL_RCC_OscConfig+0x270>)
 80045f4:	689b      	ldr	r3, [r3, #8]
 80045f6:	091b      	lsrs	r3, r3, #4
 80045f8:	f003 030f 	and.w	r3, r3, #15
 80045fc:	4950      	ldr	r1, [pc, #320]	@ (8004740 <HAL_RCC_OscConfig+0x274>)
 80045fe:	5ccb      	ldrb	r3, [r1, r3]
 8004600:	f003 031f 	and.w	r3, r3, #31
 8004604:	fa22 f303 	lsr.w	r3, r2, r3
 8004608:	4a4e      	ldr	r2, [pc, #312]	@ (8004744 <HAL_RCC_OscConfig+0x278>)
 800460a:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800460c:	4b4e      	ldr	r3, [pc, #312]	@ (8004748 <HAL_RCC_OscConfig+0x27c>)
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	4618      	mov	r0, r3
 8004612:	f7fe fc39 	bl	8002e88 <HAL_InitTick>
 8004616:	4603      	mov	r3, r0
 8004618:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800461a:	7bfb      	ldrb	r3, [r7, #15]
 800461c:	2b00      	cmp	r3, #0
 800461e:	d052      	beq.n	80046c6 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8004620:	7bfb      	ldrb	r3, [r7, #15]
 8004622:	e327      	b.n	8004c74 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	699b      	ldr	r3, [r3, #24]
 8004628:	2b00      	cmp	r3, #0
 800462a:	d032      	beq.n	8004692 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800462c:	4b43      	ldr	r3, [pc, #268]	@ (800473c <HAL_RCC_OscConfig+0x270>)
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	4a42      	ldr	r2, [pc, #264]	@ (800473c <HAL_RCC_OscConfig+0x270>)
 8004632:	f043 0301 	orr.w	r3, r3, #1
 8004636:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004638:	f7fe fc76 	bl	8002f28 <HAL_GetTick>
 800463c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800463e:	e008      	b.n	8004652 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004640:	f7fe fc72 	bl	8002f28 <HAL_GetTick>
 8004644:	4602      	mov	r2, r0
 8004646:	693b      	ldr	r3, [r7, #16]
 8004648:	1ad3      	subs	r3, r2, r3
 800464a:	2b02      	cmp	r3, #2
 800464c:	d901      	bls.n	8004652 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800464e:	2303      	movs	r3, #3
 8004650:	e310      	b.n	8004c74 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004652:	4b3a      	ldr	r3, [pc, #232]	@ (800473c <HAL_RCC_OscConfig+0x270>)
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	f003 0302 	and.w	r3, r3, #2
 800465a:	2b00      	cmp	r3, #0
 800465c:	d0f0      	beq.n	8004640 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800465e:	4b37      	ldr	r3, [pc, #220]	@ (800473c <HAL_RCC_OscConfig+0x270>)
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	4a36      	ldr	r2, [pc, #216]	@ (800473c <HAL_RCC_OscConfig+0x270>)
 8004664:	f043 0308 	orr.w	r3, r3, #8
 8004668:	6013      	str	r3, [r2, #0]
 800466a:	4b34      	ldr	r3, [pc, #208]	@ (800473c <HAL_RCC_OscConfig+0x270>)
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	6a1b      	ldr	r3, [r3, #32]
 8004676:	4931      	ldr	r1, [pc, #196]	@ (800473c <HAL_RCC_OscConfig+0x270>)
 8004678:	4313      	orrs	r3, r2
 800467a:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800467c:	4b2f      	ldr	r3, [pc, #188]	@ (800473c <HAL_RCC_OscConfig+0x270>)
 800467e:	685b      	ldr	r3, [r3, #4]
 8004680:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	69db      	ldr	r3, [r3, #28]
 8004688:	021b      	lsls	r3, r3, #8
 800468a:	492c      	ldr	r1, [pc, #176]	@ (800473c <HAL_RCC_OscConfig+0x270>)
 800468c:	4313      	orrs	r3, r2
 800468e:	604b      	str	r3, [r1, #4]
 8004690:	e01a      	b.n	80046c8 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004692:	4b2a      	ldr	r3, [pc, #168]	@ (800473c <HAL_RCC_OscConfig+0x270>)
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	4a29      	ldr	r2, [pc, #164]	@ (800473c <HAL_RCC_OscConfig+0x270>)
 8004698:	f023 0301 	bic.w	r3, r3, #1
 800469c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800469e:	f7fe fc43 	bl	8002f28 <HAL_GetTick>
 80046a2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80046a4:	e008      	b.n	80046b8 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80046a6:	f7fe fc3f 	bl	8002f28 <HAL_GetTick>
 80046aa:	4602      	mov	r2, r0
 80046ac:	693b      	ldr	r3, [r7, #16]
 80046ae:	1ad3      	subs	r3, r2, r3
 80046b0:	2b02      	cmp	r3, #2
 80046b2:	d901      	bls.n	80046b8 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80046b4:	2303      	movs	r3, #3
 80046b6:	e2dd      	b.n	8004c74 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80046b8:	4b20      	ldr	r3, [pc, #128]	@ (800473c <HAL_RCC_OscConfig+0x270>)
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	f003 0302 	and.w	r3, r3, #2
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d1f0      	bne.n	80046a6 <HAL_RCC_OscConfig+0x1da>
 80046c4:	e000      	b.n	80046c8 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80046c6:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	f003 0301 	and.w	r3, r3, #1
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d074      	beq.n	80047be <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80046d4:	69bb      	ldr	r3, [r7, #24]
 80046d6:	2b08      	cmp	r3, #8
 80046d8:	d005      	beq.n	80046e6 <HAL_RCC_OscConfig+0x21a>
 80046da:	69bb      	ldr	r3, [r7, #24]
 80046dc:	2b0c      	cmp	r3, #12
 80046de:	d10e      	bne.n	80046fe <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80046e0:	697b      	ldr	r3, [r7, #20]
 80046e2:	2b03      	cmp	r3, #3
 80046e4:	d10b      	bne.n	80046fe <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80046e6:	4b15      	ldr	r3, [pc, #84]	@ (800473c <HAL_RCC_OscConfig+0x270>)
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d064      	beq.n	80047bc <HAL_RCC_OscConfig+0x2f0>
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	685b      	ldr	r3, [r3, #4]
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d160      	bne.n	80047bc <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80046fa:	2301      	movs	r3, #1
 80046fc:	e2ba      	b.n	8004c74 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	685b      	ldr	r3, [r3, #4]
 8004702:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004706:	d106      	bne.n	8004716 <HAL_RCC_OscConfig+0x24a>
 8004708:	4b0c      	ldr	r3, [pc, #48]	@ (800473c <HAL_RCC_OscConfig+0x270>)
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	4a0b      	ldr	r2, [pc, #44]	@ (800473c <HAL_RCC_OscConfig+0x270>)
 800470e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004712:	6013      	str	r3, [r2, #0]
 8004714:	e026      	b.n	8004764 <HAL_RCC_OscConfig+0x298>
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	685b      	ldr	r3, [r3, #4]
 800471a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800471e:	d115      	bne.n	800474c <HAL_RCC_OscConfig+0x280>
 8004720:	4b06      	ldr	r3, [pc, #24]	@ (800473c <HAL_RCC_OscConfig+0x270>)
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	4a05      	ldr	r2, [pc, #20]	@ (800473c <HAL_RCC_OscConfig+0x270>)
 8004726:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800472a:	6013      	str	r3, [r2, #0]
 800472c:	4b03      	ldr	r3, [pc, #12]	@ (800473c <HAL_RCC_OscConfig+0x270>)
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	4a02      	ldr	r2, [pc, #8]	@ (800473c <HAL_RCC_OscConfig+0x270>)
 8004732:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004736:	6013      	str	r3, [r2, #0]
 8004738:	e014      	b.n	8004764 <HAL_RCC_OscConfig+0x298>
 800473a:	bf00      	nop
 800473c:	40021000 	.word	0x40021000
 8004740:	0800b40c 	.word	0x0800b40c
 8004744:	20000a0c 	.word	0x20000a0c
 8004748:	20000a44 	.word	0x20000a44
 800474c:	4ba0      	ldr	r3, [pc, #640]	@ (80049d0 <HAL_RCC_OscConfig+0x504>)
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	4a9f      	ldr	r2, [pc, #636]	@ (80049d0 <HAL_RCC_OscConfig+0x504>)
 8004752:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004756:	6013      	str	r3, [r2, #0]
 8004758:	4b9d      	ldr	r3, [pc, #628]	@ (80049d0 <HAL_RCC_OscConfig+0x504>)
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	4a9c      	ldr	r2, [pc, #624]	@ (80049d0 <HAL_RCC_OscConfig+0x504>)
 800475e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004762:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	685b      	ldr	r3, [r3, #4]
 8004768:	2b00      	cmp	r3, #0
 800476a:	d013      	beq.n	8004794 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800476c:	f7fe fbdc 	bl	8002f28 <HAL_GetTick>
 8004770:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004772:	e008      	b.n	8004786 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004774:	f7fe fbd8 	bl	8002f28 <HAL_GetTick>
 8004778:	4602      	mov	r2, r0
 800477a:	693b      	ldr	r3, [r7, #16]
 800477c:	1ad3      	subs	r3, r2, r3
 800477e:	2b64      	cmp	r3, #100	@ 0x64
 8004780:	d901      	bls.n	8004786 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8004782:	2303      	movs	r3, #3
 8004784:	e276      	b.n	8004c74 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004786:	4b92      	ldr	r3, [pc, #584]	@ (80049d0 <HAL_RCC_OscConfig+0x504>)
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800478e:	2b00      	cmp	r3, #0
 8004790:	d0f0      	beq.n	8004774 <HAL_RCC_OscConfig+0x2a8>
 8004792:	e014      	b.n	80047be <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004794:	f7fe fbc8 	bl	8002f28 <HAL_GetTick>
 8004798:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800479a:	e008      	b.n	80047ae <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800479c:	f7fe fbc4 	bl	8002f28 <HAL_GetTick>
 80047a0:	4602      	mov	r2, r0
 80047a2:	693b      	ldr	r3, [r7, #16]
 80047a4:	1ad3      	subs	r3, r2, r3
 80047a6:	2b64      	cmp	r3, #100	@ 0x64
 80047a8:	d901      	bls.n	80047ae <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80047aa:	2303      	movs	r3, #3
 80047ac:	e262      	b.n	8004c74 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80047ae:	4b88      	ldr	r3, [pc, #544]	@ (80049d0 <HAL_RCC_OscConfig+0x504>)
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d1f0      	bne.n	800479c <HAL_RCC_OscConfig+0x2d0>
 80047ba:	e000      	b.n	80047be <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80047bc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	f003 0302 	and.w	r3, r3, #2
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d060      	beq.n	800488c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80047ca:	69bb      	ldr	r3, [r7, #24]
 80047cc:	2b04      	cmp	r3, #4
 80047ce:	d005      	beq.n	80047dc <HAL_RCC_OscConfig+0x310>
 80047d0:	69bb      	ldr	r3, [r7, #24]
 80047d2:	2b0c      	cmp	r3, #12
 80047d4:	d119      	bne.n	800480a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80047d6:	697b      	ldr	r3, [r7, #20]
 80047d8:	2b02      	cmp	r3, #2
 80047da:	d116      	bne.n	800480a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80047dc:	4b7c      	ldr	r3, [pc, #496]	@ (80049d0 <HAL_RCC_OscConfig+0x504>)
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d005      	beq.n	80047f4 <HAL_RCC_OscConfig+0x328>
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	68db      	ldr	r3, [r3, #12]
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d101      	bne.n	80047f4 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80047f0:	2301      	movs	r3, #1
 80047f2:	e23f      	b.n	8004c74 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80047f4:	4b76      	ldr	r3, [pc, #472]	@ (80049d0 <HAL_RCC_OscConfig+0x504>)
 80047f6:	685b      	ldr	r3, [r3, #4]
 80047f8:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	691b      	ldr	r3, [r3, #16]
 8004800:	061b      	lsls	r3, r3, #24
 8004802:	4973      	ldr	r1, [pc, #460]	@ (80049d0 <HAL_RCC_OscConfig+0x504>)
 8004804:	4313      	orrs	r3, r2
 8004806:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004808:	e040      	b.n	800488c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	68db      	ldr	r3, [r3, #12]
 800480e:	2b00      	cmp	r3, #0
 8004810:	d023      	beq.n	800485a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004812:	4b6f      	ldr	r3, [pc, #444]	@ (80049d0 <HAL_RCC_OscConfig+0x504>)
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	4a6e      	ldr	r2, [pc, #440]	@ (80049d0 <HAL_RCC_OscConfig+0x504>)
 8004818:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800481c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800481e:	f7fe fb83 	bl	8002f28 <HAL_GetTick>
 8004822:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004824:	e008      	b.n	8004838 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004826:	f7fe fb7f 	bl	8002f28 <HAL_GetTick>
 800482a:	4602      	mov	r2, r0
 800482c:	693b      	ldr	r3, [r7, #16]
 800482e:	1ad3      	subs	r3, r2, r3
 8004830:	2b02      	cmp	r3, #2
 8004832:	d901      	bls.n	8004838 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8004834:	2303      	movs	r3, #3
 8004836:	e21d      	b.n	8004c74 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004838:	4b65      	ldr	r3, [pc, #404]	@ (80049d0 <HAL_RCC_OscConfig+0x504>)
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004840:	2b00      	cmp	r3, #0
 8004842:	d0f0      	beq.n	8004826 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004844:	4b62      	ldr	r3, [pc, #392]	@ (80049d0 <HAL_RCC_OscConfig+0x504>)
 8004846:	685b      	ldr	r3, [r3, #4]
 8004848:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	691b      	ldr	r3, [r3, #16]
 8004850:	061b      	lsls	r3, r3, #24
 8004852:	495f      	ldr	r1, [pc, #380]	@ (80049d0 <HAL_RCC_OscConfig+0x504>)
 8004854:	4313      	orrs	r3, r2
 8004856:	604b      	str	r3, [r1, #4]
 8004858:	e018      	b.n	800488c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800485a:	4b5d      	ldr	r3, [pc, #372]	@ (80049d0 <HAL_RCC_OscConfig+0x504>)
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	4a5c      	ldr	r2, [pc, #368]	@ (80049d0 <HAL_RCC_OscConfig+0x504>)
 8004860:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004864:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004866:	f7fe fb5f 	bl	8002f28 <HAL_GetTick>
 800486a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800486c:	e008      	b.n	8004880 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800486e:	f7fe fb5b 	bl	8002f28 <HAL_GetTick>
 8004872:	4602      	mov	r2, r0
 8004874:	693b      	ldr	r3, [r7, #16]
 8004876:	1ad3      	subs	r3, r2, r3
 8004878:	2b02      	cmp	r3, #2
 800487a:	d901      	bls.n	8004880 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800487c:	2303      	movs	r3, #3
 800487e:	e1f9      	b.n	8004c74 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004880:	4b53      	ldr	r3, [pc, #332]	@ (80049d0 <HAL_RCC_OscConfig+0x504>)
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004888:	2b00      	cmp	r3, #0
 800488a:	d1f0      	bne.n	800486e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	f003 0308 	and.w	r3, r3, #8
 8004894:	2b00      	cmp	r3, #0
 8004896:	d03c      	beq.n	8004912 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	695b      	ldr	r3, [r3, #20]
 800489c:	2b00      	cmp	r3, #0
 800489e:	d01c      	beq.n	80048da <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80048a0:	4b4b      	ldr	r3, [pc, #300]	@ (80049d0 <HAL_RCC_OscConfig+0x504>)
 80048a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80048a6:	4a4a      	ldr	r2, [pc, #296]	@ (80049d0 <HAL_RCC_OscConfig+0x504>)
 80048a8:	f043 0301 	orr.w	r3, r3, #1
 80048ac:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80048b0:	f7fe fb3a 	bl	8002f28 <HAL_GetTick>
 80048b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80048b6:	e008      	b.n	80048ca <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80048b8:	f7fe fb36 	bl	8002f28 <HAL_GetTick>
 80048bc:	4602      	mov	r2, r0
 80048be:	693b      	ldr	r3, [r7, #16]
 80048c0:	1ad3      	subs	r3, r2, r3
 80048c2:	2b02      	cmp	r3, #2
 80048c4:	d901      	bls.n	80048ca <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80048c6:	2303      	movs	r3, #3
 80048c8:	e1d4      	b.n	8004c74 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80048ca:	4b41      	ldr	r3, [pc, #260]	@ (80049d0 <HAL_RCC_OscConfig+0x504>)
 80048cc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80048d0:	f003 0302 	and.w	r3, r3, #2
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d0ef      	beq.n	80048b8 <HAL_RCC_OscConfig+0x3ec>
 80048d8:	e01b      	b.n	8004912 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80048da:	4b3d      	ldr	r3, [pc, #244]	@ (80049d0 <HAL_RCC_OscConfig+0x504>)
 80048dc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80048e0:	4a3b      	ldr	r2, [pc, #236]	@ (80049d0 <HAL_RCC_OscConfig+0x504>)
 80048e2:	f023 0301 	bic.w	r3, r3, #1
 80048e6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80048ea:	f7fe fb1d 	bl	8002f28 <HAL_GetTick>
 80048ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80048f0:	e008      	b.n	8004904 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80048f2:	f7fe fb19 	bl	8002f28 <HAL_GetTick>
 80048f6:	4602      	mov	r2, r0
 80048f8:	693b      	ldr	r3, [r7, #16]
 80048fa:	1ad3      	subs	r3, r2, r3
 80048fc:	2b02      	cmp	r3, #2
 80048fe:	d901      	bls.n	8004904 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8004900:	2303      	movs	r3, #3
 8004902:	e1b7      	b.n	8004c74 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004904:	4b32      	ldr	r3, [pc, #200]	@ (80049d0 <HAL_RCC_OscConfig+0x504>)
 8004906:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800490a:	f003 0302 	and.w	r3, r3, #2
 800490e:	2b00      	cmp	r3, #0
 8004910:	d1ef      	bne.n	80048f2 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	f003 0304 	and.w	r3, r3, #4
 800491a:	2b00      	cmp	r3, #0
 800491c:	f000 80a6 	beq.w	8004a6c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004920:	2300      	movs	r3, #0
 8004922:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004924:	4b2a      	ldr	r3, [pc, #168]	@ (80049d0 <HAL_RCC_OscConfig+0x504>)
 8004926:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004928:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800492c:	2b00      	cmp	r3, #0
 800492e:	d10d      	bne.n	800494c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004930:	4b27      	ldr	r3, [pc, #156]	@ (80049d0 <HAL_RCC_OscConfig+0x504>)
 8004932:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004934:	4a26      	ldr	r2, [pc, #152]	@ (80049d0 <HAL_RCC_OscConfig+0x504>)
 8004936:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800493a:	6593      	str	r3, [r2, #88]	@ 0x58
 800493c:	4b24      	ldr	r3, [pc, #144]	@ (80049d0 <HAL_RCC_OscConfig+0x504>)
 800493e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004940:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004944:	60bb      	str	r3, [r7, #8]
 8004946:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004948:	2301      	movs	r3, #1
 800494a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800494c:	4b21      	ldr	r3, [pc, #132]	@ (80049d4 <HAL_RCC_OscConfig+0x508>)
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004954:	2b00      	cmp	r3, #0
 8004956:	d118      	bne.n	800498a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004958:	4b1e      	ldr	r3, [pc, #120]	@ (80049d4 <HAL_RCC_OscConfig+0x508>)
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	4a1d      	ldr	r2, [pc, #116]	@ (80049d4 <HAL_RCC_OscConfig+0x508>)
 800495e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004962:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004964:	f7fe fae0 	bl	8002f28 <HAL_GetTick>
 8004968:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800496a:	e008      	b.n	800497e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800496c:	f7fe fadc 	bl	8002f28 <HAL_GetTick>
 8004970:	4602      	mov	r2, r0
 8004972:	693b      	ldr	r3, [r7, #16]
 8004974:	1ad3      	subs	r3, r2, r3
 8004976:	2b02      	cmp	r3, #2
 8004978:	d901      	bls.n	800497e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800497a:	2303      	movs	r3, #3
 800497c:	e17a      	b.n	8004c74 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800497e:	4b15      	ldr	r3, [pc, #84]	@ (80049d4 <HAL_RCC_OscConfig+0x508>)
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004986:	2b00      	cmp	r3, #0
 8004988:	d0f0      	beq.n	800496c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	689b      	ldr	r3, [r3, #8]
 800498e:	2b01      	cmp	r3, #1
 8004990:	d108      	bne.n	80049a4 <HAL_RCC_OscConfig+0x4d8>
 8004992:	4b0f      	ldr	r3, [pc, #60]	@ (80049d0 <HAL_RCC_OscConfig+0x504>)
 8004994:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004998:	4a0d      	ldr	r2, [pc, #52]	@ (80049d0 <HAL_RCC_OscConfig+0x504>)
 800499a:	f043 0301 	orr.w	r3, r3, #1
 800499e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80049a2:	e029      	b.n	80049f8 <HAL_RCC_OscConfig+0x52c>
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	689b      	ldr	r3, [r3, #8]
 80049a8:	2b05      	cmp	r3, #5
 80049aa:	d115      	bne.n	80049d8 <HAL_RCC_OscConfig+0x50c>
 80049ac:	4b08      	ldr	r3, [pc, #32]	@ (80049d0 <HAL_RCC_OscConfig+0x504>)
 80049ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80049b2:	4a07      	ldr	r2, [pc, #28]	@ (80049d0 <HAL_RCC_OscConfig+0x504>)
 80049b4:	f043 0304 	orr.w	r3, r3, #4
 80049b8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80049bc:	4b04      	ldr	r3, [pc, #16]	@ (80049d0 <HAL_RCC_OscConfig+0x504>)
 80049be:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80049c2:	4a03      	ldr	r2, [pc, #12]	@ (80049d0 <HAL_RCC_OscConfig+0x504>)
 80049c4:	f043 0301 	orr.w	r3, r3, #1
 80049c8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80049cc:	e014      	b.n	80049f8 <HAL_RCC_OscConfig+0x52c>
 80049ce:	bf00      	nop
 80049d0:	40021000 	.word	0x40021000
 80049d4:	40007000 	.word	0x40007000
 80049d8:	4b9c      	ldr	r3, [pc, #624]	@ (8004c4c <HAL_RCC_OscConfig+0x780>)
 80049da:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80049de:	4a9b      	ldr	r2, [pc, #620]	@ (8004c4c <HAL_RCC_OscConfig+0x780>)
 80049e0:	f023 0301 	bic.w	r3, r3, #1
 80049e4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80049e8:	4b98      	ldr	r3, [pc, #608]	@ (8004c4c <HAL_RCC_OscConfig+0x780>)
 80049ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80049ee:	4a97      	ldr	r2, [pc, #604]	@ (8004c4c <HAL_RCC_OscConfig+0x780>)
 80049f0:	f023 0304 	bic.w	r3, r3, #4
 80049f4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	689b      	ldr	r3, [r3, #8]
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d016      	beq.n	8004a2e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a00:	f7fe fa92 	bl	8002f28 <HAL_GetTick>
 8004a04:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004a06:	e00a      	b.n	8004a1e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004a08:	f7fe fa8e 	bl	8002f28 <HAL_GetTick>
 8004a0c:	4602      	mov	r2, r0
 8004a0e:	693b      	ldr	r3, [r7, #16]
 8004a10:	1ad3      	subs	r3, r2, r3
 8004a12:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004a16:	4293      	cmp	r3, r2
 8004a18:	d901      	bls.n	8004a1e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8004a1a:	2303      	movs	r3, #3
 8004a1c:	e12a      	b.n	8004c74 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004a1e:	4b8b      	ldr	r3, [pc, #556]	@ (8004c4c <HAL_RCC_OscConfig+0x780>)
 8004a20:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004a24:	f003 0302 	and.w	r3, r3, #2
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d0ed      	beq.n	8004a08 <HAL_RCC_OscConfig+0x53c>
 8004a2c:	e015      	b.n	8004a5a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a2e:	f7fe fa7b 	bl	8002f28 <HAL_GetTick>
 8004a32:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004a34:	e00a      	b.n	8004a4c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004a36:	f7fe fa77 	bl	8002f28 <HAL_GetTick>
 8004a3a:	4602      	mov	r2, r0
 8004a3c:	693b      	ldr	r3, [r7, #16]
 8004a3e:	1ad3      	subs	r3, r2, r3
 8004a40:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004a44:	4293      	cmp	r3, r2
 8004a46:	d901      	bls.n	8004a4c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8004a48:	2303      	movs	r3, #3
 8004a4a:	e113      	b.n	8004c74 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004a4c:	4b7f      	ldr	r3, [pc, #508]	@ (8004c4c <HAL_RCC_OscConfig+0x780>)
 8004a4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004a52:	f003 0302 	and.w	r3, r3, #2
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d1ed      	bne.n	8004a36 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004a5a:	7ffb      	ldrb	r3, [r7, #31]
 8004a5c:	2b01      	cmp	r3, #1
 8004a5e:	d105      	bne.n	8004a6c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004a60:	4b7a      	ldr	r3, [pc, #488]	@ (8004c4c <HAL_RCC_OscConfig+0x780>)
 8004a62:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004a64:	4a79      	ldr	r2, [pc, #484]	@ (8004c4c <HAL_RCC_OscConfig+0x780>)
 8004a66:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004a6a:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	f000 80fe 	beq.w	8004c72 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a7a:	2b02      	cmp	r3, #2
 8004a7c:	f040 80d0 	bne.w	8004c20 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8004a80:	4b72      	ldr	r3, [pc, #456]	@ (8004c4c <HAL_RCC_OscConfig+0x780>)
 8004a82:	68db      	ldr	r3, [r3, #12]
 8004a84:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004a86:	697b      	ldr	r3, [r7, #20]
 8004a88:	f003 0203 	and.w	r2, r3, #3
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a90:	429a      	cmp	r2, r3
 8004a92:	d130      	bne.n	8004af6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004a94:	697b      	ldr	r3, [r7, #20]
 8004a96:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a9e:	3b01      	subs	r3, #1
 8004aa0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004aa2:	429a      	cmp	r2, r3
 8004aa4:	d127      	bne.n	8004af6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004aa6:	697b      	ldr	r3, [r7, #20]
 8004aa8:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004ab0:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004ab2:	429a      	cmp	r2, r3
 8004ab4:	d11f      	bne.n	8004af6 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8004ab6:	697b      	ldr	r3, [r7, #20]
 8004ab8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004abc:	687a      	ldr	r2, [r7, #4]
 8004abe:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8004ac0:	2a07      	cmp	r2, #7
 8004ac2:	bf14      	ite	ne
 8004ac4:	2201      	movne	r2, #1
 8004ac6:	2200      	moveq	r2, #0
 8004ac8:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004aca:	4293      	cmp	r3, r2
 8004acc:	d113      	bne.n	8004af6 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004ace:	697b      	ldr	r3, [r7, #20]
 8004ad0:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004ad8:	085b      	lsrs	r3, r3, #1
 8004ada:	3b01      	subs	r3, #1
 8004adc:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8004ade:	429a      	cmp	r2, r3
 8004ae0:	d109      	bne.n	8004af6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004ae2:	697b      	ldr	r3, [r7, #20]
 8004ae4:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004aec:	085b      	lsrs	r3, r3, #1
 8004aee:	3b01      	subs	r3, #1
 8004af0:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004af2:	429a      	cmp	r2, r3
 8004af4:	d06e      	beq.n	8004bd4 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004af6:	69bb      	ldr	r3, [r7, #24]
 8004af8:	2b0c      	cmp	r3, #12
 8004afa:	d069      	beq.n	8004bd0 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004afc:	4b53      	ldr	r3, [pc, #332]	@ (8004c4c <HAL_RCC_OscConfig+0x780>)
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d105      	bne.n	8004b14 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8004b08:	4b50      	ldr	r3, [pc, #320]	@ (8004c4c <HAL_RCC_OscConfig+0x780>)
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d001      	beq.n	8004b18 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8004b14:	2301      	movs	r3, #1
 8004b16:	e0ad      	b.n	8004c74 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8004b18:	4b4c      	ldr	r3, [pc, #304]	@ (8004c4c <HAL_RCC_OscConfig+0x780>)
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	4a4b      	ldr	r2, [pc, #300]	@ (8004c4c <HAL_RCC_OscConfig+0x780>)
 8004b1e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004b22:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004b24:	f7fe fa00 	bl	8002f28 <HAL_GetTick>
 8004b28:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004b2a:	e008      	b.n	8004b3e <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004b2c:	f7fe f9fc 	bl	8002f28 <HAL_GetTick>
 8004b30:	4602      	mov	r2, r0
 8004b32:	693b      	ldr	r3, [r7, #16]
 8004b34:	1ad3      	subs	r3, r2, r3
 8004b36:	2b02      	cmp	r3, #2
 8004b38:	d901      	bls.n	8004b3e <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8004b3a:	2303      	movs	r3, #3
 8004b3c:	e09a      	b.n	8004c74 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004b3e:	4b43      	ldr	r3, [pc, #268]	@ (8004c4c <HAL_RCC_OscConfig+0x780>)
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d1f0      	bne.n	8004b2c <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004b4a:	4b40      	ldr	r3, [pc, #256]	@ (8004c4c <HAL_RCC_OscConfig+0x780>)
 8004b4c:	68da      	ldr	r2, [r3, #12]
 8004b4e:	4b40      	ldr	r3, [pc, #256]	@ (8004c50 <HAL_RCC_OscConfig+0x784>)
 8004b50:	4013      	ands	r3, r2
 8004b52:	687a      	ldr	r2, [r7, #4]
 8004b54:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8004b56:	687a      	ldr	r2, [r7, #4]
 8004b58:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8004b5a:	3a01      	subs	r2, #1
 8004b5c:	0112      	lsls	r2, r2, #4
 8004b5e:	4311      	orrs	r1, r2
 8004b60:	687a      	ldr	r2, [r7, #4]
 8004b62:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8004b64:	0212      	lsls	r2, r2, #8
 8004b66:	4311      	orrs	r1, r2
 8004b68:	687a      	ldr	r2, [r7, #4]
 8004b6a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8004b6c:	0852      	lsrs	r2, r2, #1
 8004b6e:	3a01      	subs	r2, #1
 8004b70:	0552      	lsls	r2, r2, #21
 8004b72:	4311      	orrs	r1, r2
 8004b74:	687a      	ldr	r2, [r7, #4]
 8004b76:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8004b78:	0852      	lsrs	r2, r2, #1
 8004b7a:	3a01      	subs	r2, #1
 8004b7c:	0652      	lsls	r2, r2, #25
 8004b7e:	4311      	orrs	r1, r2
 8004b80:	687a      	ldr	r2, [r7, #4]
 8004b82:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8004b84:	0912      	lsrs	r2, r2, #4
 8004b86:	0452      	lsls	r2, r2, #17
 8004b88:	430a      	orrs	r2, r1
 8004b8a:	4930      	ldr	r1, [pc, #192]	@ (8004c4c <HAL_RCC_OscConfig+0x780>)
 8004b8c:	4313      	orrs	r3, r2
 8004b8e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004b90:	4b2e      	ldr	r3, [pc, #184]	@ (8004c4c <HAL_RCC_OscConfig+0x780>)
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	4a2d      	ldr	r2, [pc, #180]	@ (8004c4c <HAL_RCC_OscConfig+0x780>)
 8004b96:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004b9a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004b9c:	4b2b      	ldr	r3, [pc, #172]	@ (8004c4c <HAL_RCC_OscConfig+0x780>)
 8004b9e:	68db      	ldr	r3, [r3, #12]
 8004ba0:	4a2a      	ldr	r2, [pc, #168]	@ (8004c4c <HAL_RCC_OscConfig+0x780>)
 8004ba2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004ba6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004ba8:	f7fe f9be 	bl	8002f28 <HAL_GetTick>
 8004bac:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004bae:	e008      	b.n	8004bc2 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004bb0:	f7fe f9ba 	bl	8002f28 <HAL_GetTick>
 8004bb4:	4602      	mov	r2, r0
 8004bb6:	693b      	ldr	r3, [r7, #16]
 8004bb8:	1ad3      	subs	r3, r2, r3
 8004bba:	2b02      	cmp	r3, #2
 8004bbc:	d901      	bls.n	8004bc2 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8004bbe:	2303      	movs	r3, #3
 8004bc0:	e058      	b.n	8004c74 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004bc2:	4b22      	ldr	r3, [pc, #136]	@ (8004c4c <HAL_RCC_OscConfig+0x780>)
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d0f0      	beq.n	8004bb0 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004bce:	e050      	b.n	8004c72 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004bd0:	2301      	movs	r3, #1
 8004bd2:	e04f      	b.n	8004c74 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004bd4:	4b1d      	ldr	r3, [pc, #116]	@ (8004c4c <HAL_RCC_OscConfig+0x780>)
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d148      	bne.n	8004c72 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004be0:	4b1a      	ldr	r3, [pc, #104]	@ (8004c4c <HAL_RCC_OscConfig+0x780>)
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	4a19      	ldr	r2, [pc, #100]	@ (8004c4c <HAL_RCC_OscConfig+0x780>)
 8004be6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004bea:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004bec:	4b17      	ldr	r3, [pc, #92]	@ (8004c4c <HAL_RCC_OscConfig+0x780>)
 8004bee:	68db      	ldr	r3, [r3, #12]
 8004bf0:	4a16      	ldr	r2, [pc, #88]	@ (8004c4c <HAL_RCC_OscConfig+0x780>)
 8004bf2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004bf6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004bf8:	f7fe f996 	bl	8002f28 <HAL_GetTick>
 8004bfc:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004bfe:	e008      	b.n	8004c12 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004c00:	f7fe f992 	bl	8002f28 <HAL_GetTick>
 8004c04:	4602      	mov	r2, r0
 8004c06:	693b      	ldr	r3, [r7, #16]
 8004c08:	1ad3      	subs	r3, r2, r3
 8004c0a:	2b02      	cmp	r3, #2
 8004c0c:	d901      	bls.n	8004c12 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8004c0e:	2303      	movs	r3, #3
 8004c10:	e030      	b.n	8004c74 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004c12:	4b0e      	ldr	r3, [pc, #56]	@ (8004c4c <HAL_RCC_OscConfig+0x780>)
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d0f0      	beq.n	8004c00 <HAL_RCC_OscConfig+0x734>
 8004c1e:	e028      	b.n	8004c72 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004c20:	69bb      	ldr	r3, [r7, #24]
 8004c22:	2b0c      	cmp	r3, #12
 8004c24:	d023      	beq.n	8004c6e <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004c26:	4b09      	ldr	r3, [pc, #36]	@ (8004c4c <HAL_RCC_OscConfig+0x780>)
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	4a08      	ldr	r2, [pc, #32]	@ (8004c4c <HAL_RCC_OscConfig+0x780>)
 8004c2c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004c30:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c32:	f7fe f979 	bl	8002f28 <HAL_GetTick>
 8004c36:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004c38:	e00c      	b.n	8004c54 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004c3a:	f7fe f975 	bl	8002f28 <HAL_GetTick>
 8004c3e:	4602      	mov	r2, r0
 8004c40:	693b      	ldr	r3, [r7, #16]
 8004c42:	1ad3      	subs	r3, r2, r3
 8004c44:	2b02      	cmp	r3, #2
 8004c46:	d905      	bls.n	8004c54 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8004c48:	2303      	movs	r3, #3
 8004c4a:	e013      	b.n	8004c74 <HAL_RCC_OscConfig+0x7a8>
 8004c4c:	40021000 	.word	0x40021000
 8004c50:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004c54:	4b09      	ldr	r3, [pc, #36]	@ (8004c7c <HAL_RCC_OscConfig+0x7b0>)
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d1ec      	bne.n	8004c3a <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8004c60:	4b06      	ldr	r3, [pc, #24]	@ (8004c7c <HAL_RCC_OscConfig+0x7b0>)
 8004c62:	68da      	ldr	r2, [r3, #12]
 8004c64:	4905      	ldr	r1, [pc, #20]	@ (8004c7c <HAL_RCC_OscConfig+0x7b0>)
 8004c66:	4b06      	ldr	r3, [pc, #24]	@ (8004c80 <HAL_RCC_OscConfig+0x7b4>)
 8004c68:	4013      	ands	r3, r2
 8004c6a:	60cb      	str	r3, [r1, #12]
 8004c6c:	e001      	b.n	8004c72 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004c6e:	2301      	movs	r3, #1
 8004c70:	e000      	b.n	8004c74 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8004c72:	2300      	movs	r3, #0
}
 8004c74:	4618      	mov	r0, r3
 8004c76:	3720      	adds	r7, #32
 8004c78:	46bd      	mov	sp, r7
 8004c7a:	bd80      	pop	{r7, pc}
 8004c7c:	40021000 	.word	0x40021000
 8004c80:	feeefffc 	.word	0xfeeefffc

08004c84 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004c84:	b580      	push	{r7, lr}
 8004c86:	b084      	sub	sp, #16
 8004c88:	af00      	add	r7, sp, #0
 8004c8a:	6078      	str	r0, [r7, #4]
 8004c8c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d101      	bne.n	8004c98 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004c94:	2301      	movs	r3, #1
 8004c96:	e0e7      	b.n	8004e68 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004c98:	4b75      	ldr	r3, [pc, #468]	@ (8004e70 <HAL_RCC_ClockConfig+0x1ec>)
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	f003 0307 	and.w	r3, r3, #7
 8004ca0:	683a      	ldr	r2, [r7, #0]
 8004ca2:	429a      	cmp	r2, r3
 8004ca4:	d910      	bls.n	8004cc8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004ca6:	4b72      	ldr	r3, [pc, #456]	@ (8004e70 <HAL_RCC_ClockConfig+0x1ec>)
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	f023 0207 	bic.w	r2, r3, #7
 8004cae:	4970      	ldr	r1, [pc, #448]	@ (8004e70 <HAL_RCC_ClockConfig+0x1ec>)
 8004cb0:	683b      	ldr	r3, [r7, #0]
 8004cb2:	4313      	orrs	r3, r2
 8004cb4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004cb6:	4b6e      	ldr	r3, [pc, #440]	@ (8004e70 <HAL_RCC_ClockConfig+0x1ec>)
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	f003 0307 	and.w	r3, r3, #7
 8004cbe:	683a      	ldr	r2, [r7, #0]
 8004cc0:	429a      	cmp	r2, r3
 8004cc2:	d001      	beq.n	8004cc8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004cc4:	2301      	movs	r3, #1
 8004cc6:	e0cf      	b.n	8004e68 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	f003 0302 	and.w	r3, r3, #2
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d010      	beq.n	8004cf6 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	689a      	ldr	r2, [r3, #8]
 8004cd8:	4b66      	ldr	r3, [pc, #408]	@ (8004e74 <HAL_RCC_ClockConfig+0x1f0>)
 8004cda:	689b      	ldr	r3, [r3, #8]
 8004cdc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004ce0:	429a      	cmp	r2, r3
 8004ce2:	d908      	bls.n	8004cf6 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004ce4:	4b63      	ldr	r3, [pc, #396]	@ (8004e74 <HAL_RCC_ClockConfig+0x1f0>)
 8004ce6:	689b      	ldr	r3, [r3, #8]
 8004ce8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	689b      	ldr	r3, [r3, #8]
 8004cf0:	4960      	ldr	r1, [pc, #384]	@ (8004e74 <HAL_RCC_ClockConfig+0x1f0>)
 8004cf2:	4313      	orrs	r3, r2
 8004cf4:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	f003 0301 	and.w	r3, r3, #1
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d04c      	beq.n	8004d9c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	685b      	ldr	r3, [r3, #4]
 8004d06:	2b03      	cmp	r3, #3
 8004d08:	d107      	bne.n	8004d1a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004d0a:	4b5a      	ldr	r3, [pc, #360]	@ (8004e74 <HAL_RCC_ClockConfig+0x1f0>)
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d121      	bne.n	8004d5a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8004d16:	2301      	movs	r3, #1
 8004d18:	e0a6      	b.n	8004e68 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	685b      	ldr	r3, [r3, #4]
 8004d1e:	2b02      	cmp	r3, #2
 8004d20:	d107      	bne.n	8004d32 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004d22:	4b54      	ldr	r3, [pc, #336]	@ (8004e74 <HAL_RCC_ClockConfig+0x1f0>)
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d115      	bne.n	8004d5a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004d2e:	2301      	movs	r3, #1
 8004d30:	e09a      	b.n	8004e68 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	685b      	ldr	r3, [r3, #4]
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d107      	bne.n	8004d4a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004d3a:	4b4e      	ldr	r3, [pc, #312]	@ (8004e74 <HAL_RCC_ClockConfig+0x1f0>)
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	f003 0302 	and.w	r3, r3, #2
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d109      	bne.n	8004d5a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004d46:	2301      	movs	r3, #1
 8004d48:	e08e      	b.n	8004e68 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004d4a:	4b4a      	ldr	r3, [pc, #296]	@ (8004e74 <HAL_RCC_ClockConfig+0x1f0>)
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d101      	bne.n	8004d5a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004d56:	2301      	movs	r3, #1
 8004d58:	e086      	b.n	8004e68 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004d5a:	4b46      	ldr	r3, [pc, #280]	@ (8004e74 <HAL_RCC_ClockConfig+0x1f0>)
 8004d5c:	689b      	ldr	r3, [r3, #8]
 8004d5e:	f023 0203 	bic.w	r2, r3, #3
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	685b      	ldr	r3, [r3, #4]
 8004d66:	4943      	ldr	r1, [pc, #268]	@ (8004e74 <HAL_RCC_ClockConfig+0x1f0>)
 8004d68:	4313      	orrs	r3, r2
 8004d6a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004d6c:	f7fe f8dc 	bl	8002f28 <HAL_GetTick>
 8004d70:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004d72:	e00a      	b.n	8004d8a <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004d74:	f7fe f8d8 	bl	8002f28 <HAL_GetTick>
 8004d78:	4602      	mov	r2, r0
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	1ad3      	subs	r3, r2, r3
 8004d7e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004d82:	4293      	cmp	r3, r2
 8004d84:	d901      	bls.n	8004d8a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8004d86:	2303      	movs	r3, #3
 8004d88:	e06e      	b.n	8004e68 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004d8a:	4b3a      	ldr	r3, [pc, #232]	@ (8004e74 <HAL_RCC_ClockConfig+0x1f0>)
 8004d8c:	689b      	ldr	r3, [r3, #8]
 8004d8e:	f003 020c 	and.w	r2, r3, #12
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	685b      	ldr	r3, [r3, #4]
 8004d96:	009b      	lsls	r3, r3, #2
 8004d98:	429a      	cmp	r2, r3
 8004d9a:	d1eb      	bne.n	8004d74 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	f003 0302 	and.w	r3, r3, #2
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d010      	beq.n	8004dca <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	689a      	ldr	r2, [r3, #8]
 8004dac:	4b31      	ldr	r3, [pc, #196]	@ (8004e74 <HAL_RCC_ClockConfig+0x1f0>)
 8004dae:	689b      	ldr	r3, [r3, #8]
 8004db0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004db4:	429a      	cmp	r2, r3
 8004db6:	d208      	bcs.n	8004dca <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004db8:	4b2e      	ldr	r3, [pc, #184]	@ (8004e74 <HAL_RCC_ClockConfig+0x1f0>)
 8004dba:	689b      	ldr	r3, [r3, #8]
 8004dbc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	689b      	ldr	r3, [r3, #8]
 8004dc4:	492b      	ldr	r1, [pc, #172]	@ (8004e74 <HAL_RCC_ClockConfig+0x1f0>)
 8004dc6:	4313      	orrs	r3, r2
 8004dc8:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004dca:	4b29      	ldr	r3, [pc, #164]	@ (8004e70 <HAL_RCC_ClockConfig+0x1ec>)
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	f003 0307 	and.w	r3, r3, #7
 8004dd2:	683a      	ldr	r2, [r7, #0]
 8004dd4:	429a      	cmp	r2, r3
 8004dd6:	d210      	bcs.n	8004dfa <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004dd8:	4b25      	ldr	r3, [pc, #148]	@ (8004e70 <HAL_RCC_ClockConfig+0x1ec>)
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	f023 0207 	bic.w	r2, r3, #7
 8004de0:	4923      	ldr	r1, [pc, #140]	@ (8004e70 <HAL_RCC_ClockConfig+0x1ec>)
 8004de2:	683b      	ldr	r3, [r7, #0]
 8004de4:	4313      	orrs	r3, r2
 8004de6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004de8:	4b21      	ldr	r3, [pc, #132]	@ (8004e70 <HAL_RCC_ClockConfig+0x1ec>)
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	f003 0307 	and.w	r3, r3, #7
 8004df0:	683a      	ldr	r2, [r7, #0]
 8004df2:	429a      	cmp	r2, r3
 8004df4:	d001      	beq.n	8004dfa <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8004df6:	2301      	movs	r3, #1
 8004df8:	e036      	b.n	8004e68 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	f003 0304 	and.w	r3, r3, #4
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d008      	beq.n	8004e18 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004e06:	4b1b      	ldr	r3, [pc, #108]	@ (8004e74 <HAL_RCC_ClockConfig+0x1f0>)
 8004e08:	689b      	ldr	r3, [r3, #8]
 8004e0a:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	68db      	ldr	r3, [r3, #12]
 8004e12:	4918      	ldr	r1, [pc, #96]	@ (8004e74 <HAL_RCC_ClockConfig+0x1f0>)
 8004e14:	4313      	orrs	r3, r2
 8004e16:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	f003 0308 	and.w	r3, r3, #8
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d009      	beq.n	8004e38 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004e24:	4b13      	ldr	r3, [pc, #76]	@ (8004e74 <HAL_RCC_ClockConfig+0x1f0>)
 8004e26:	689b      	ldr	r3, [r3, #8]
 8004e28:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	691b      	ldr	r3, [r3, #16]
 8004e30:	00db      	lsls	r3, r3, #3
 8004e32:	4910      	ldr	r1, [pc, #64]	@ (8004e74 <HAL_RCC_ClockConfig+0x1f0>)
 8004e34:	4313      	orrs	r3, r2
 8004e36:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004e38:	f000 f824 	bl	8004e84 <HAL_RCC_GetSysClockFreq>
 8004e3c:	4602      	mov	r2, r0
 8004e3e:	4b0d      	ldr	r3, [pc, #52]	@ (8004e74 <HAL_RCC_ClockConfig+0x1f0>)
 8004e40:	689b      	ldr	r3, [r3, #8]
 8004e42:	091b      	lsrs	r3, r3, #4
 8004e44:	f003 030f 	and.w	r3, r3, #15
 8004e48:	490b      	ldr	r1, [pc, #44]	@ (8004e78 <HAL_RCC_ClockConfig+0x1f4>)
 8004e4a:	5ccb      	ldrb	r3, [r1, r3]
 8004e4c:	f003 031f 	and.w	r3, r3, #31
 8004e50:	fa22 f303 	lsr.w	r3, r2, r3
 8004e54:	4a09      	ldr	r2, [pc, #36]	@ (8004e7c <HAL_RCC_ClockConfig+0x1f8>)
 8004e56:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004e58:	4b09      	ldr	r3, [pc, #36]	@ (8004e80 <HAL_RCC_ClockConfig+0x1fc>)
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	4618      	mov	r0, r3
 8004e5e:	f7fe f813 	bl	8002e88 <HAL_InitTick>
 8004e62:	4603      	mov	r3, r0
 8004e64:	72fb      	strb	r3, [r7, #11]

  return status;
 8004e66:	7afb      	ldrb	r3, [r7, #11]
}
 8004e68:	4618      	mov	r0, r3
 8004e6a:	3710      	adds	r7, #16
 8004e6c:	46bd      	mov	sp, r7
 8004e6e:	bd80      	pop	{r7, pc}
 8004e70:	40022000 	.word	0x40022000
 8004e74:	40021000 	.word	0x40021000
 8004e78:	0800b40c 	.word	0x0800b40c
 8004e7c:	20000a0c 	.word	0x20000a0c
 8004e80:	20000a44 	.word	0x20000a44

08004e84 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004e84:	b480      	push	{r7}
 8004e86:	b089      	sub	sp, #36	@ 0x24
 8004e88:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004e8a:	2300      	movs	r3, #0
 8004e8c:	61fb      	str	r3, [r7, #28]
 8004e8e:	2300      	movs	r3, #0
 8004e90:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004e92:	4b3e      	ldr	r3, [pc, #248]	@ (8004f8c <HAL_RCC_GetSysClockFreq+0x108>)
 8004e94:	689b      	ldr	r3, [r3, #8]
 8004e96:	f003 030c 	and.w	r3, r3, #12
 8004e9a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004e9c:	4b3b      	ldr	r3, [pc, #236]	@ (8004f8c <HAL_RCC_GetSysClockFreq+0x108>)
 8004e9e:	68db      	ldr	r3, [r3, #12]
 8004ea0:	f003 0303 	and.w	r3, r3, #3
 8004ea4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004ea6:	693b      	ldr	r3, [r7, #16]
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d005      	beq.n	8004eb8 <HAL_RCC_GetSysClockFreq+0x34>
 8004eac:	693b      	ldr	r3, [r7, #16]
 8004eae:	2b0c      	cmp	r3, #12
 8004eb0:	d121      	bne.n	8004ef6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	2b01      	cmp	r3, #1
 8004eb6:	d11e      	bne.n	8004ef6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004eb8:	4b34      	ldr	r3, [pc, #208]	@ (8004f8c <HAL_RCC_GetSysClockFreq+0x108>)
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	f003 0308 	and.w	r3, r3, #8
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d107      	bne.n	8004ed4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004ec4:	4b31      	ldr	r3, [pc, #196]	@ (8004f8c <HAL_RCC_GetSysClockFreq+0x108>)
 8004ec6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004eca:	0a1b      	lsrs	r3, r3, #8
 8004ecc:	f003 030f 	and.w	r3, r3, #15
 8004ed0:	61fb      	str	r3, [r7, #28]
 8004ed2:	e005      	b.n	8004ee0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004ed4:	4b2d      	ldr	r3, [pc, #180]	@ (8004f8c <HAL_RCC_GetSysClockFreq+0x108>)
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	091b      	lsrs	r3, r3, #4
 8004eda:	f003 030f 	and.w	r3, r3, #15
 8004ede:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004ee0:	4a2b      	ldr	r2, [pc, #172]	@ (8004f90 <HAL_RCC_GetSysClockFreq+0x10c>)
 8004ee2:	69fb      	ldr	r3, [r7, #28]
 8004ee4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004ee8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004eea:	693b      	ldr	r3, [r7, #16]
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d10d      	bne.n	8004f0c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004ef0:	69fb      	ldr	r3, [r7, #28]
 8004ef2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004ef4:	e00a      	b.n	8004f0c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004ef6:	693b      	ldr	r3, [r7, #16]
 8004ef8:	2b04      	cmp	r3, #4
 8004efa:	d102      	bne.n	8004f02 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004efc:	4b25      	ldr	r3, [pc, #148]	@ (8004f94 <HAL_RCC_GetSysClockFreq+0x110>)
 8004efe:	61bb      	str	r3, [r7, #24]
 8004f00:	e004      	b.n	8004f0c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8004f02:	693b      	ldr	r3, [r7, #16]
 8004f04:	2b08      	cmp	r3, #8
 8004f06:	d101      	bne.n	8004f0c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004f08:	4b23      	ldr	r3, [pc, #140]	@ (8004f98 <HAL_RCC_GetSysClockFreq+0x114>)
 8004f0a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004f0c:	693b      	ldr	r3, [r7, #16]
 8004f0e:	2b0c      	cmp	r3, #12
 8004f10:	d134      	bne.n	8004f7c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004f12:	4b1e      	ldr	r3, [pc, #120]	@ (8004f8c <HAL_RCC_GetSysClockFreq+0x108>)
 8004f14:	68db      	ldr	r3, [r3, #12]
 8004f16:	f003 0303 	and.w	r3, r3, #3
 8004f1a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004f1c:	68bb      	ldr	r3, [r7, #8]
 8004f1e:	2b02      	cmp	r3, #2
 8004f20:	d003      	beq.n	8004f2a <HAL_RCC_GetSysClockFreq+0xa6>
 8004f22:	68bb      	ldr	r3, [r7, #8]
 8004f24:	2b03      	cmp	r3, #3
 8004f26:	d003      	beq.n	8004f30 <HAL_RCC_GetSysClockFreq+0xac>
 8004f28:	e005      	b.n	8004f36 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8004f2a:	4b1a      	ldr	r3, [pc, #104]	@ (8004f94 <HAL_RCC_GetSysClockFreq+0x110>)
 8004f2c:	617b      	str	r3, [r7, #20]
      break;
 8004f2e:	e005      	b.n	8004f3c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004f30:	4b19      	ldr	r3, [pc, #100]	@ (8004f98 <HAL_RCC_GetSysClockFreq+0x114>)
 8004f32:	617b      	str	r3, [r7, #20]
      break;
 8004f34:	e002      	b.n	8004f3c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004f36:	69fb      	ldr	r3, [r7, #28]
 8004f38:	617b      	str	r3, [r7, #20]
      break;
 8004f3a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004f3c:	4b13      	ldr	r3, [pc, #76]	@ (8004f8c <HAL_RCC_GetSysClockFreq+0x108>)
 8004f3e:	68db      	ldr	r3, [r3, #12]
 8004f40:	091b      	lsrs	r3, r3, #4
 8004f42:	f003 0307 	and.w	r3, r3, #7
 8004f46:	3301      	adds	r3, #1
 8004f48:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004f4a:	4b10      	ldr	r3, [pc, #64]	@ (8004f8c <HAL_RCC_GetSysClockFreq+0x108>)
 8004f4c:	68db      	ldr	r3, [r3, #12]
 8004f4e:	0a1b      	lsrs	r3, r3, #8
 8004f50:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004f54:	697a      	ldr	r2, [r7, #20]
 8004f56:	fb03 f202 	mul.w	r2, r3, r2
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f60:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004f62:	4b0a      	ldr	r3, [pc, #40]	@ (8004f8c <HAL_RCC_GetSysClockFreq+0x108>)
 8004f64:	68db      	ldr	r3, [r3, #12]
 8004f66:	0e5b      	lsrs	r3, r3, #25
 8004f68:	f003 0303 	and.w	r3, r3, #3
 8004f6c:	3301      	adds	r3, #1
 8004f6e:	005b      	lsls	r3, r3, #1
 8004f70:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004f72:	697a      	ldr	r2, [r7, #20]
 8004f74:	683b      	ldr	r3, [r7, #0]
 8004f76:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f7a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004f7c:	69bb      	ldr	r3, [r7, #24]
}
 8004f7e:	4618      	mov	r0, r3
 8004f80:	3724      	adds	r7, #36	@ 0x24
 8004f82:	46bd      	mov	sp, r7
 8004f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f88:	4770      	bx	lr
 8004f8a:	bf00      	nop
 8004f8c:	40021000 	.word	0x40021000
 8004f90:	0800b424 	.word	0x0800b424
 8004f94:	00f42400 	.word	0x00f42400
 8004f98:	007a1200 	.word	0x007a1200

08004f9c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004f9c:	b480      	push	{r7}
 8004f9e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004fa0:	4b03      	ldr	r3, [pc, #12]	@ (8004fb0 <HAL_RCC_GetHCLKFreq+0x14>)
 8004fa2:	681b      	ldr	r3, [r3, #0]
}
 8004fa4:	4618      	mov	r0, r3
 8004fa6:	46bd      	mov	sp, r7
 8004fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fac:	4770      	bx	lr
 8004fae:	bf00      	nop
 8004fb0:	20000a0c 	.word	0x20000a0c

08004fb4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004fb4:	b580      	push	{r7, lr}
 8004fb6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004fb8:	f7ff fff0 	bl	8004f9c <HAL_RCC_GetHCLKFreq>
 8004fbc:	4602      	mov	r2, r0
 8004fbe:	4b06      	ldr	r3, [pc, #24]	@ (8004fd8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004fc0:	689b      	ldr	r3, [r3, #8]
 8004fc2:	0a1b      	lsrs	r3, r3, #8
 8004fc4:	f003 0307 	and.w	r3, r3, #7
 8004fc8:	4904      	ldr	r1, [pc, #16]	@ (8004fdc <HAL_RCC_GetPCLK1Freq+0x28>)
 8004fca:	5ccb      	ldrb	r3, [r1, r3]
 8004fcc:	f003 031f 	and.w	r3, r3, #31
 8004fd0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004fd4:	4618      	mov	r0, r3
 8004fd6:	bd80      	pop	{r7, pc}
 8004fd8:	40021000 	.word	0x40021000
 8004fdc:	0800b41c 	.word	0x0800b41c

08004fe0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004fe0:	b580      	push	{r7, lr}
 8004fe2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004fe4:	f7ff ffda 	bl	8004f9c <HAL_RCC_GetHCLKFreq>
 8004fe8:	4602      	mov	r2, r0
 8004fea:	4b06      	ldr	r3, [pc, #24]	@ (8005004 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004fec:	689b      	ldr	r3, [r3, #8]
 8004fee:	0adb      	lsrs	r3, r3, #11
 8004ff0:	f003 0307 	and.w	r3, r3, #7
 8004ff4:	4904      	ldr	r1, [pc, #16]	@ (8005008 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004ff6:	5ccb      	ldrb	r3, [r1, r3]
 8004ff8:	f003 031f 	and.w	r3, r3, #31
 8004ffc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005000:	4618      	mov	r0, r3
 8005002:	bd80      	pop	{r7, pc}
 8005004:	40021000 	.word	0x40021000
 8005008:	0800b41c 	.word	0x0800b41c

0800500c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800500c:	b580      	push	{r7, lr}
 800500e:	b086      	sub	sp, #24
 8005010:	af00      	add	r7, sp, #0
 8005012:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8005014:	2300      	movs	r3, #0
 8005016:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8005018:	4b2a      	ldr	r3, [pc, #168]	@ (80050c4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800501a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800501c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005020:	2b00      	cmp	r3, #0
 8005022:	d003      	beq.n	800502c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8005024:	f7ff f9ee 	bl	8004404 <HAL_PWREx_GetVoltageRange>
 8005028:	6178      	str	r0, [r7, #20]
 800502a:	e014      	b.n	8005056 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800502c:	4b25      	ldr	r3, [pc, #148]	@ (80050c4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800502e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005030:	4a24      	ldr	r2, [pc, #144]	@ (80050c4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005032:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005036:	6593      	str	r3, [r2, #88]	@ 0x58
 8005038:	4b22      	ldr	r3, [pc, #136]	@ (80050c4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800503a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800503c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005040:	60fb      	str	r3, [r7, #12]
 8005042:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8005044:	f7ff f9de 	bl	8004404 <HAL_PWREx_GetVoltageRange>
 8005048:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800504a:	4b1e      	ldr	r3, [pc, #120]	@ (80050c4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800504c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800504e:	4a1d      	ldr	r2, [pc, #116]	@ (80050c4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005050:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005054:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005056:	697b      	ldr	r3, [r7, #20]
 8005058:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800505c:	d10b      	bne.n	8005076 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	2b80      	cmp	r3, #128	@ 0x80
 8005062:	d919      	bls.n	8005098 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	2ba0      	cmp	r3, #160	@ 0xa0
 8005068:	d902      	bls.n	8005070 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800506a:	2302      	movs	r3, #2
 800506c:	613b      	str	r3, [r7, #16]
 800506e:	e013      	b.n	8005098 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005070:	2301      	movs	r3, #1
 8005072:	613b      	str	r3, [r7, #16]
 8005074:	e010      	b.n	8005098 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	2b80      	cmp	r3, #128	@ 0x80
 800507a:	d902      	bls.n	8005082 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800507c:	2303      	movs	r3, #3
 800507e:	613b      	str	r3, [r7, #16]
 8005080:	e00a      	b.n	8005098 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	2b80      	cmp	r3, #128	@ 0x80
 8005086:	d102      	bne.n	800508e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005088:	2302      	movs	r3, #2
 800508a:	613b      	str	r3, [r7, #16]
 800508c:	e004      	b.n	8005098 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	2b70      	cmp	r3, #112	@ 0x70
 8005092:	d101      	bne.n	8005098 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005094:	2301      	movs	r3, #1
 8005096:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8005098:	4b0b      	ldr	r3, [pc, #44]	@ (80050c8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	f023 0207 	bic.w	r2, r3, #7
 80050a0:	4909      	ldr	r1, [pc, #36]	@ (80050c8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80050a2:	693b      	ldr	r3, [r7, #16]
 80050a4:	4313      	orrs	r3, r2
 80050a6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80050a8:	4b07      	ldr	r3, [pc, #28]	@ (80050c8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	f003 0307 	and.w	r3, r3, #7
 80050b0:	693a      	ldr	r2, [r7, #16]
 80050b2:	429a      	cmp	r2, r3
 80050b4:	d001      	beq.n	80050ba <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80050b6:	2301      	movs	r3, #1
 80050b8:	e000      	b.n	80050bc <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80050ba:	2300      	movs	r3, #0
}
 80050bc:	4618      	mov	r0, r3
 80050be:	3718      	adds	r7, #24
 80050c0:	46bd      	mov	sp, r7
 80050c2:	bd80      	pop	{r7, pc}
 80050c4:	40021000 	.word	0x40021000
 80050c8:	40022000 	.word	0x40022000

080050cc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80050cc:	b580      	push	{r7, lr}
 80050ce:	b086      	sub	sp, #24
 80050d0:	af00      	add	r7, sp, #0
 80050d2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80050d4:	2300      	movs	r3, #0
 80050d6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80050d8:	2300      	movs	r3, #0
 80050da:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d041      	beq.n	800516c <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80050ec:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80050f0:	d02a      	beq.n	8005148 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80050f2:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80050f6:	d824      	bhi.n	8005142 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80050f8:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80050fc:	d008      	beq.n	8005110 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80050fe:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005102:	d81e      	bhi.n	8005142 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8005104:	2b00      	cmp	r3, #0
 8005106:	d00a      	beq.n	800511e <HAL_RCCEx_PeriphCLKConfig+0x52>
 8005108:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800510c:	d010      	beq.n	8005130 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800510e:	e018      	b.n	8005142 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005110:	4b86      	ldr	r3, [pc, #536]	@ (800532c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005112:	68db      	ldr	r3, [r3, #12]
 8005114:	4a85      	ldr	r2, [pc, #532]	@ (800532c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005116:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800511a:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800511c:	e015      	b.n	800514a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	3304      	adds	r3, #4
 8005122:	2100      	movs	r1, #0
 8005124:	4618      	mov	r0, r3
 8005126:	f000 fabb 	bl	80056a0 <RCCEx_PLLSAI1_Config>
 800512a:	4603      	mov	r3, r0
 800512c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800512e:	e00c      	b.n	800514a <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	3320      	adds	r3, #32
 8005134:	2100      	movs	r1, #0
 8005136:	4618      	mov	r0, r3
 8005138:	f000 fba6 	bl	8005888 <RCCEx_PLLSAI2_Config>
 800513c:	4603      	mov	r3, r0
 800513e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005140:	e003      	b.n	800514a <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005142:	2301      	movs	r3, #1
 8005144:	74fb      	strb	r3, [r7, #19]
      break;
 8005146:	e000      	b.n	800514a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8005148:	bf00      	nop
    }

    if(ret == HAL_OK)
 800514a:	7cfb      	ldrb	r3, [r7, #19]
 800514c:	2b00      	cmp	r3, #0
 800514e:	d10b      	bne.n	8005168 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005150:	4b76      	ldr	r3, [pc, #472]	@ (800532c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005152:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005156:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800515e:	4973      	ldr	r1, [pc, #460]	@ (800532c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005160:	4313      	orrs	r3, r2
 8005162:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8005166:	e001      	b.n	800516c <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005168:	7cfb      	ldrb	r3, [r7, #19]
 800516a:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005174:	2b00      	cmp	r3, #0
 8005176:	d041      	beq.n	80051fc <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800517c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8005180:	d02a      	beq.n	80051d8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8005182:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8005186:	d824      	bhi.n	80051d2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8005188:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800518c:	d008      	beq.n	80051a0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800518e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005192:	d81e      	bhi.n	80051d2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8005194:	2b00      	cmp	r3, #0
 8005196:	d00a      	beq.n	80051ae <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8005198:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800519c:	d010      	beq.n	80051c0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800519e:	e018      	b.n	80051d2 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80051a0:	4b62      	ldr	r3, [pc, #392]	@ (800532c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80051a2:	68db      	ldr	r3, [r3, #12]
 80051a4:	4a61      	ldr	r2, [pc, #388]	@ (800532c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80051a6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80051aa:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80051ac:	e015      	b.n	80051da <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	3304      	adds	r3, #4
 80051b2:	2100      	movs	r1, #0
 80051b4:	4618      	mov	r0, r3
 80051b6:	f000 fa73 	bl	80056a0 <RCCEx_PLLSAI1_Config>
 80051ba:	4603      	mov	r3, r0
 80051bc:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80051be:	e00c      	b.n	80051da <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	3320      	adds	r3, #32
 80051c4:	2100      	movs	r1, #0
 80051c6:	4618      	mov	r0, r3
 80051c8:	f000 fb5e 	bl	8005888 <RCCEx_PLLSAI2_Config>
 80051cc:	4603      	mov	r3, r0
 80051ce:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80051d0:	e003      	b.n	80051da <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80051d2:	2301      	movs	r3, #1
 80051d4:	74fb      	strb	r3, [r7, #19]
      break;
 80051d6:	e000      	b.n	80051da <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80051d8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80051da:	7cfb      	ldrb	r3, [r7, #19]
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d10b      	bne.n	80051f8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80051e0:	4b52      	ldr	r3, [pc, #328]	@ (800532c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80051e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80051e6:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80051ee:	494f      	ldr	r1, [pc, #316]	@ (800532c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80051f0:	4313      	orrs	r3, r2
 80051f2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80051f6:	e001      	b.n	80051fc <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80051f8:	7cfb      	ldrb	r3, [r7, #19]
 80051fa:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005204:	2b00      	cmp	r3, #0
 8005206:	f000 80a0 	beq.w	800534a <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800520a:	2300      	movs	r3, #0
 800520c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800520e:	4b47      	ldr	r3, [pc, #284]	@ (800532c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005210:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005212:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005216:	2b00      	cmp	r3, #0
 8005218:	d101      	bne.n	800521e <HAL_RCCEx_PeriphCLKConfig+0x152>
 800521a:	2301      	movs	r3, #1
 800521c:	e000      	b.n	8005220 <HAL_RCCEx_PeriphCLKConfig+0x154>
 800521e:	2300      	movs	r3, #0
 8005220:	2b00      	cmp	r3, #0
 8005222:	d00d      	beq.n	8005240 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005224:	4b41      	ldr	r3, [pc, #260]	@ (800532c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005226:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005228:	4a40      	ldr	r2, [pc, #256]	@ (800532c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800522a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800522e:	6593      	str	r3, [r2, #88]	@ 0x58
 8005230:	4b3e      	ldr	r3, [pc, #248]	@ (800532c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005232:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005234:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005238:	60bb      	str	r3, [r7, #8]
 800523a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800523c:	2301      	movs	r3, #1
 800523e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005240:	4b3b      	ldr	r3, [pc, #236]	@ (8005330 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	4a3a      	ldr	r2, [pc, #232]	@ (8005330 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8005246:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800524a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800524c:	f7fd fe6c 	bl	8002f28 <HAL_GetTick>
 8005250:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005252:	e009      	b.n	8005268 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005254:	f7fd fe68 	bl	8002f28 <HAL_GetTick>
 8005258:	4602      	mov	r2, r0
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	1ad3      	subs	r3, r2, r3
 800525e:	2b02      	cmp	r3, #2
 8005260:	d902      	bls.n	8005268 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8005262:	2303      	movs	r3, #3
 8005264:	74fb      	strb	r3, [r7, #19]
        break;
 8005266:	e005      	b.n	8005274 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005268:	4b31      	ldr	r3, [pc, #196]	@ (8005330 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005270:	2b00      	cmp	r3, #0
 8005272:	d0ef      	beq.n	8005254 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8005274:	7cfb      	ldrb	r3, [r7, #19]
 8005276:	2b00      	cmp	r3, #0
 8005278:	d15c      	bne.n	8005334 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800527a:	4b2c      	ldr	r3, [pc, #176]	@ (800532c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800527c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005280:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005284:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005286:	697b      	ldr	r3, [r7, #20]
 8005288:	2b00      	cmp	r3, #0
 800528a:	d01f      	beq.n	80052cc <HAL_RCCEx_PeriphCLKConfig+0x200>
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005292:	697a      	ldr	r2, [r7, #20]
 8005294:	429a      	cmp	r2, r3
 8005296:	d019      	beq.n	80052cc <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005298:	4b24      	ldr	r3, [pc, #144]	@ (800532c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800529a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800529e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80052a2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80052a4:	4b21      	ldr	r3, [pc, #132]	@ (800532c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80052a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80052aa:	4a20      	ldr	r2, [pc, #128]	@ (800532c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80052ac:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80052b0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80052b4:	4b1d      	ldr	r3, [pc, #116]	@ (800532c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80052b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80052ba:	4a1c      	ldr	r2, [pc, #112]	@ (800532c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80052bc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80052c0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80052c4:	4a19      	ldr	r2, [pc, #100]	@ (800532c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80052c6:	697b      	ldr	r3, [r7, #20]
 80052c8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80052cc:	697b      	ldr	r3, [r7, #20]
 80052ce:	f003 0301 	and.w	r3, r3, #1
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d016      	beq.n	8005304 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80052d6:	f7fd fe27 	bl	8002f28 <HAL_GetTick>
 80052da:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80052dc:	e00b      	b.n	80052f6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80052de:	f7fd fe23 	bl	8002f28 <HAL_GetTick>
 80052e2:	4602      	mov	r2, r0
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	1ad3      	subs	r3, r2, r3
 80052e8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80052ec:	4293      	cmp	r3, r2
 80052ee:	d902      	bls.n	80052f6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80052f0:	2303      	movs	r3, #3
 80052f2:	74fb      	strb	r3, [r7, #19]
            break;
 80052f4:	e006      	b.n	8005304 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80052f6:	4b0d      	ldr	r3, [pc, #52]	@ (800532c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80052f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80052fc:	f003 0302 	and.w	r3, r3, #2
 8005300:	2b00      	cmp	r3, #0
 8005302:	d0ec      	beq.n	80052de <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8005304:	7cfb      	ldrb	r3, [r7, #19]
 8005306:	2b00      	cmp	r3, #0
 8005308:	d10c      	bne.n	8005324 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800530a:	4b08      	ldr	r3, [pc, #32]	@ (800532c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800530c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005310:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800531a:	4904      	ldr	r1, [pc, #16]	@ (800532c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800531c:	4313      	orrs	r3, r2
 800531e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8005322:	e009      	b.n	8005338 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005324:	7cfb      	ldrb	r3, [r7, #19]
 8005326:	74bb      	strb	r3, [r7, #18]
 8005328:	e006      	b.n	8005338 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800532a:	bf00      	nop
 800532c:	40021000 	.word	0x40021000
 8005330:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005334:	7cfb      	ldrb	r3, [r7, #19]
 8005336:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005338:	7c7b      	ldrb	r3, [r7, #17]
 800533a:	2b01      	cmp	r3, #1
 800533c:	d105      	bne.n	800534a <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800533e:	4b9e      	ldr	r3, [pc, #632]	@ (80055b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005340:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005342:	4a9d      	ldr	r2, [pc, #628]	@ (80055b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005344:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005348:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	f003 0301 	and.w	r3, r3, #1
 8005352:	2b00      	cmp	r3, #0
 8005354:	d00a      	beq.n	800536c <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005356:	4b98      	ldr	r3, [pc, #608]	@ (80055b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005358:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800535c:	f023 0203 	bic.w	r2, r3, #3
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005364:	4994      	ldr	r1, [pc, #592]	@ (80055b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005366:	4313      	orrs	r3, r2
 8005368:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	f003 0302 	and.w	r3, r3, #2
 8005374:	2b00      	cmp	r3, #0
 8005376:	d00a      	beq.n	800538e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005378:	4b8f      	ldr	r3, [pc, #572]	@ (80055b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800537a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800537e:	f023 020c 	bic.w	r2, r3, #12
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005386:	498c      	ldr	r1, [pc, #560]	@ (80055b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005388:	4313      	orrs	r3, r2
 800538a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	f003 0304 	and.w	r3, r3, #4
 8005396:	2b00      	cmp	r3, #0
 8005398:	d00a      	beq.n	80053b0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800539a:	4b87      	ldr	r3, [pc, #540]	@ (80055b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800539c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80053a0:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80053a8:	4983      	ldr	r1, [pc, #524]	@ (80055b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80053aa:	4313      	orrs	r3, r2
 80053ac:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	f003 0308 	and.w	r3, r3, #8
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d00a      	beq.n	80053d2 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80053bc:	4b7e      	ldr	r3, [pc, #504]	@ (80055b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80053be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80053c2:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80053ca:	497b      	ldr	r1, [pc, #492]	@ (80055b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80053cc:	4313      	orrs	r3, r2
 80053ce:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	f003 0310 	and.w	r3, r3, #16
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d00a      	beq.n	80053f4 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80053de:	4b76      	ldr	r3, [pc, #472]	@ (80055b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80053e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80053e4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80053ec:	4972      	ldr	r1, [pc, #456]	@ (80055b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80053ee:	4313      	orrs	r3, r2
 80053f0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	f003 0320 	and.w	r3, r3, #32
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d00a      	beq.n	8005416 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005400:	4b6d      	ldr	r3, [pc, #436]	@ (80055b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005402:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005406:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800540e:	496a      	ldr	r1, [pc, #424]	@ (80055b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005410:	4313      	orrs	r3, r2
 8005412:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800541e:	2b00      	cmp	r3, #0
 8005420:	d00a      	beq.n	8005438 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005422:	4b65      	ldr	r3, [pc, #404]	@ (80055b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005424:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005428:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005430:	4961      	ldr	r1, [pc, #388]	@ (80055b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005432:	4313      	orrs	r3, r2
 8005434:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005440:	2b00      	cmp	r3, #0
 8005442:	d00a      	beq.n	800545a <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005444:	4b5c      	ldr	r3, [pc, #368]	@ (80055b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005446:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800544a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005452:	4959      	ldr	r1, [pc, #356]	@ (80055b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005454:	4313      	orrs	r3, r2
 8005456:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005462:	2b00      	cmp	r3, #0
 8005464:	d00a      	beq.n	800547c <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005466:	4b54      	ldr	r3, [pc, #336]	@ (80055b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005468:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800546c:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005474:	4950      	ldr	r1, [pc, #320]	@ (80055b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005476:	4313      	orrs	r3, r2
 8005478:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005484:	2b00      	cmp	r3, #0
 8005486:	d00a      	beq.n	800549e <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005488:	4b4b      	ldr	r3, [pc, #300]	@ (80055b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800548a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800548e:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005496:	4948      	ldr	r1, [pc, #288]	@ (80055b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005498:	4313      	orrs	r3, r2
 800549a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d00a      	beq.n	80054c0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80054aa:	4b43      	ldr	r3, [pc, #268]	@ (80055b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80054ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80054b0:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80054b8:	493f      	ldr	r1, [pc, #252]	@ (80055b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80054ba:	4313      	orrs	r3, r2
 80054bc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d028      	beq.n	800551e <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80054cc:	4b3a      	ldr	r3, [pc, #232]	@ (80055b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80054ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80054d2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80054da:	4937      	ldr	r1, [pc, #220]	@ (80055b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80054dc:	4313      	orrs	r3, r2
 80054de:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80054e6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80054ea:	d106      	bne.n	80054fa <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80054ec:	4b32      	ldr	r3, [pc, #200]	@ (80055b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80054ee:	68db      	ldr	r3, [r3, #12]
 80054f0:	4a31      	ldr	r2, [pc, #196]	@ (80055b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80054f2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80054f6:	60d3      	str	r3, [r2, #12]
 80054f8:	e011      	b.n	800551e <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80054fe:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005502:	d10c      	bne.n	800551e <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	3304      	adds	r3, #4
 8005508:	2101      	movs	r1, #1
 800550a:	4618      	mov	r0, r3
 800550c:	f000 f8c8 	bl	80056a0 <RCCEx_PLLSAI1_Config>
 8005510:	4603      	mov	r3, r0
 8005512:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8005514:	7cfb      	ldrb	r3, [r7, #19]
 8005516:	2b00      	cmp	r3, #0
 8005518:	d001      	beq.n	800551e <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 800551a:	7cfb      	ldrb	r3, [r7, #19]
 800551c:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005526:	2b00      	cmp	r3, #0
 8005528:	d028      	beq.n	800557c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800552a:	4b23      	ldr	r3, [pc, #140]	@ (80055b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800552c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005530:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005538:	491f      	ldr	r1, [pc, #124]	@ (80055b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800553a:	4313      	orrs	r3, r2
 800553c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005544:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005548:	d106      	bne.n	8005558 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800554a:	4b1b      	ldr	r3, [pc, #108]	@ (80055b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800554c:	68db      	ldr	r3, [r3, #12]
 800554e:	4a1a      	ldr	r2, [pc, #104]	@ (80055b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005550:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005554:	60d3      	str	r3, [r2, #12]
 8005556:	e011      	b.n	800557c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800555c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005560:	d10c      	bne.n	800557c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	3304      	adds	r3, #4
 8005566:	2101      	movs	r1, #1
 8005568:	4618      	mov	r0, r3
 800556a:	f000 f899 	bl	80056a0 <RCCEx_PLLSAI1_Config>
 800556e:	4603      	mov	r3, r0
 8005570:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005572:	7cfb      	ldrb	r3, [r7, #19]
 8005574:	2b00      	cmp	r3, #0
 8005576:	d001      	beq.n	800557c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8005578:	7cfb      	ldrb	r3, [r7, #19]
 800557a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005584:	2b00      	cmp	r3, #0
 8005586:	d02b      	beq.n	80055e0 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005588:	4b0b      	ldr	r3, [pc, #44]	@ (80055b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800558a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800558e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005596:	4908      	ldr	r1, [pc, #32]	@ (80055b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005598:	4313      	orrs	r3, r2
 800559a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80055a2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80055a6:	d109      	bne.n	80055bc <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80055a8:	4b03      	ldr	r3, [pc, #12]	@ (80055b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80055aa:	68db      	ldr	r3, [r3, #12]
 80055ac:	4a02      	ldr	r2, [pc, #8]	@ (80055b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80055ae:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80055b2:	60d3      	str	r3, [r2, #12]
 80055b4:	e014      	b.n	80055e0 <HAL_RCCEx_PeriphCLKConfig+0x514>
 80055b6:	bf00      	nop
 80055b8:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80055c0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80055c4:	d10c      	bne.n	80055e0 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	3304      	adds	r3, #4
 80055ca:	2101      	movs	r1, #1
 80055cc:	4618      	mov	r0, r3
 80055ce:	f000 f867 	bl	80056a0 <RCCEx_PLLSAI1_Config>
 80055d2:	4603      	mov	r3, r0
 80055d4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80055d6:	7cfb      	ldrb	r3, [r7, #19]
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d001      	beq.n	80055e0 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80055dc:	7cfb      	ldrb	r3, [r7, #19]
 80055de:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d02f      	beq.n	800564c <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80055ec:	4b2b      	ldr	r3, [pc, #172]	@ (800569c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80055ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80055f2:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80055fa:	4928      	ldr	r1, [pc, #160]	@ (800569c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80055fc:	4313      	orrs	r3, r2
 80055fe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005606:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800560a:	d10d      	bne.n	8005628 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	3304      	adds	r3, #4
 8005610:	2102      	movs	r1, #2
 8005612:	4618      	mov	r0, r3
 8005614:	f000 f844 	bl	80056a0 <RCCEx_PLLSAI1_Config>
 8005618:	4603      	mov	r3, r0
 800561a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800561c:	7cfb      	ldrb	r3, [r7, #19]
 800561e:	2b00      	cmp	r3, #0
 8005620:	d014      	beq.n	800564c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8005622:	7cfb      	ldrb	r3, [r7, #19]
 8005624:	74bb      	strb	r3, [r7, #18]
 8005626:	e011      	b.n	800564c <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800562c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005630:	d10c      	bne.n	800564c <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	3320      	adds	r3, #32
 8005636:	2102      	movs	r1, #2
 8005638:	4618      	mov	r0, r3
 800563a:	f000 f925 	bl	8005888 <RCCEx_PLLSAI2_Config>
 800563e:	4603      	mov	r3, r0
 8005640:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005642:	7cfb      	ldrb	r3, [r7, #19]
 8005644:	2b00      	cmp	r3, #0
 8005646:	d001      	beq.n	800564c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8005648:	7cfb      	ldrb	r3, [r7, #19]
 800564a:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005654:	2b00      	cmp	r3, #0
 8005656:	d00a      	beq.n	800566e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005658:	4b10      	ldr	r3, [pc, #64]	@ (800569c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800565a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800565e:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005666:	490d      	ldr	r1, [pc, #52]	@ (800569c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005668:	4313      	orrs	r3, r2
 800566a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005676:	2b00      	cmp	r3, #0
 8005678:	d00b      	beq.n	8005692 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800567a:	4b08      	ldr	r3, [pc, #32]	@ (800569c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800567c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005680:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800568a:	4904      	ldr	r1, [pc, #16]	@ (800569c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800568c:	4313      	orrs	r3, r2
 800568e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8005692:	7cbb      	ldrb	r3, [r7, #18]
}
 8005694:	4618      	mov	r0, r3
 8005696:	3718      	adds	r7, #24
 8005698:	46bd      	mov	sp, r7
 800569a:	bd80      	pop	{r7, pc}
 800569c:	40021000 	.word	0x40021000

080056a0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80056a0:	b580      	push	{r7, lr}
 80056a2:	b084      	sub	sp, #16
 80056a4:	af00      	add	r7, sp, #0
 80056a6:	6078      	str	r0, [r7, #4]
 80056a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80056aa:	2300      	movs	r3, #0
 80056ac:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80056ae:	4b75      	ldr	r3, [pc, #468]	@ (8005884 <RCCEx_PLLSAI1_Config+0x1e4>)
 80056b0:	68db      	ldr	r3, [r3, #12]
 80056b2:	f003 0303 	and.w	r3, r3, #3
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d018      	beq.n	80056ec <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80056ba:	4b72      	ldr	r3, [pc, #456]	@ (8005884 <RCCEx_PLLSAI1_Config+0x1e4>)
 80056bc:	68db      	ldr	r3, [r3, #12]
 80056be:	f003 0203 	and.w	r2, r3, #3
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	429a      	cmp	r2, r3
 80056c8:	d10d      	bne.n	80056e6 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	681b      	ldr	r3, [r3, #0]
       ||
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d009      	beq.n	80056e6 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80056d2:	4b6c      	ldr	r3, [pc, #432]	@ (8005884 <RCCEx_PLLSAI1_Config+0x1e4>)
 80056d4:	68db      	ldr	r3, [r3, #12]
 80056d6:	091b      	lsrs	r3, r3, #4
 80056d8:	f003 0307 	and.w	r3, r3, #7
 80056dc:	1c5a      	adds	r2, r3, #1
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	685b      	ldr	r3, [r3, #4]
       ||
 80056e2:	429a      	cmp	r2, r3
 80056e4:	d047      	beq.n	8005776 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80056e6:	2301      	movs	r3, #1
 80056e8:	73fb      	strb	r3, [r7, #15]
 80056ea:	e044      	b.n	8005776 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	2b03      	cmp	r3, #3
 80056f2:	d018      	beq.n	8005726 <RCCEx_PLLSAI1_Config+0x86>
 80056f4:	2b03      	cmp	r3, #3
 80056f6:	d825      	bhi.n	8005744 <RCCEx_PLLSAI1_Config+0xa4>
 80056f8:	2b01      	cmp	r3, #1
 80056fa:	d002      	beq.n	8005702 <RCCEx_PLLSAI1_Config+0x62>
 80056fc:	2b02      	cmp	r3, #2
 80056fe:	d009      	beq.n	8005714 <RCCEx_PLLSAI1_Config+0x74>
 8005700:	e020      	b.n	8005744 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005702:	4b60      	ldr	r3, [pc, #384]	@ (8005884 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	f003 0302 	and.w	r3, r3, #2
 800570a:	2b00      	cmp	r3, #0
 800570c:	d11d      	bne.n	800574a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800570e:	2301      	movs	r3, #1
 8005710:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005712:	e01a      	b.n	800574a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005714:	4b5b      	ldr	r3, [pc, #364]	@ (8005884 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800571c:	2b00      	cmp	r3, #0
 800571e:	d116      	bne.n	800574e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8005720:	2301      	movs	r3, #1
 8005722:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005724:	e013      	b.n	800574e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005726:	4b57      	ldr	r3, [pc, #348]	@ (8005884 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800572e:	2b00      	cmp	r3, #0
 8005730:	d10f      	bne.n	8005752 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005732:	4b54      	ldr	r3, [pc, #336]	@ (8005884 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800573a:	2b00      	cmp	r3, #0
 800573c:	d109      	bne.n	8005752 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800573e:	2301      	movs	r3, #1
 8005740:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005742:	e006      	b.n	8005752 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8005744:	2301      	movs	r3, #1
 8005746:	73fb      	strb	r3, [r7, #15]
      break;
 8005748:	e004      	b.n	8005754 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800574a:	bf00      	nop
 800574c:	e002      	b.n	8005754 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800574e:	bf00      	nop
 8005750:	e000      	b.n	8005754 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005752:	bf00      	nop
    }

    if(status == HAL_OK)
 8005754:	7bfb      	ldrb	r3, [r7, #15]
 8005756:	2b00      	cmp	r3, #0
 8005758:	d10d      	bne.n	8005776 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800575a:	4b4a      	ldr	r3, [pc, #296]	@ (8005884 <RCCEx_PLLSAI1_Config+0x1e4>)
 800575c:	68db      	ldr	r3, [r3, #12]
 800575e:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	6819      	ldr	r1, [r3, #0]
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	685b      	ldr	r3, [r3, #4]
 800576a:	3b01      	subs	r3, #1
 800576c:	011b      	lsls	r3, r3, #4
 800576e:	430b      	orrs	r3, r1
 8005770:	4944      	ldr	r1, [pc, #272]	@ (8005884 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005772:	4313      	orrs	r3, r2
 8005774:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8005776:	7bfb      	ldrb	r3, [r7, #15]
 8005778:	2b00      	cmp	r3, #0
 800577a:	d17d      	bne.n	8005878 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800577c:	4b41      	ldr	r3, [pc, #260]	@ (8005884 <RCCEx_PLLSAI1_Config+0x1e4>)
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	4a40      	ldr	r2, [pc, #256]	@ (8005884 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005782:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8005786:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005788:	f7fd fbce 	bl	8002f28 <HAL_GetTick>
 800578c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800578e:	e009      	b.n	80057a4 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005790:	f7fd fbca 	bl	8002f28 <HAL_GetTick>
 8005794:	4602      	mov	r2, r0
 8005796:	68bb      	ldr	r3, [r7, #8]
 8005798:	1ad3      	subs	r3, r2, r3
 800579a:	2b02      	cmp	r3, #2
 800579c:	d902      	bls.n	80057a4 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800579e:	2303      	movs	r3, #3
 80057a0:	73fb      	strb	r3, [r7, #15]
        break;
 80057a2:	e005      	b.n	80057b0 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80057a4:	4b37      	ldr	r3, [pc, #220]	@ (8005884 <RCCEx_PLLSAI1_Config+0x1e4>)
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d1ef      	bne.n	8005790 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80057b0:	7bfb      	ldrb	r3, [r7, #15]
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d160      	bne.n	8005878 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80057b6:	683b      	ldr	r3, [r7, #0]
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d111      	bne.n	80057e0 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80057bc:	4b31      	ldr	r3, [pc, #196]	@ (8005884 <RCCEx_PLLSAI1_Config+0x1e4>)
 80057be:	691b      	ldr	r3, [r3, #16]
 80057c0:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 80057c4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80057c8:	687a      	ldr	r2, [r7, #4]
 80057ca:	6892      	ldr	r2, [r2, #8]
 80057cc:	0211      	lsls	r1, r2, #8
 80057ce:	687a      	ldr	r2, [r7, #4]
 80057d0:	68d2      	ldr	r2, [r2, #12]
 80057d2:	0912      	lsrs	r2, r2, #4
 80057d4:	0452      	lsls	r2, r2, #17
 80057d6:	430a      	orrs	r2, r1
 80057d8:	492a      	ldr	r1, [pc, #168]	@ (8005884 <RCCEx_PLLSAI1_Config+0x1e4>)
 80057da:	4313      	orrs	r3, r2
 80057dc:	610b      	str	r3, [r1, #16]
 80057de:	e027      	b.n	8005830 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80057e0:	683b      	ldr	r3, [r7, #0]
 80057e2:	2b01      	cmp	r3, #1
 80057e4:	d112      	bne.n	800580c <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80057e6:	4b27      	ldr	r3, [pc, #156]	@ (8005884 <RCCEx_PLLSAI1_Config+0x1e4>)
 80057e8:	691b      	ldr	r3, [r3, #16]
 80057ea:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 80057ee:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80057f2:	687a      	ldr	r2, [r7, #4]
 80057f4:	6892      	ldr	r2, [r2, #8]
 80057f6:	0211      	lsls	r1, r2, #8
 80057f8:	687a      	ldr	r2, [r7, #4]
 80057fa:	6912      	ldr	r2, [r2, #16]
 80057fc:	0852      	lsrs	r2, r2, #1
 80057fe:	3a01      	subs	r2, #1
 8005800:	0552      	lsls	r2, r2, #21
 8005802:	430a      	orrs	r2, r1
 8005804:	491f      	ldr	r1, [pc, #124]	@ (8005884 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005806:	4313      	orrs	r3, r2
 8005808:	610b      	str	r3, [r1, #16]
 800580a:	e011      	b.n	8005830 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800580c:	4b1d      	ldr	r3, [pc, #116]	@ (8005884 <RCCEx_PLLSAI1_Config+0x1e4>)
 800580e:	691b      	ldr	r3, [r3, #16]
 8005810:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8005814:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8005818:	687a      	ldr	r2, [r7, #4]
 800581a:	6892      	ldr	r2, [r2, #8]
 800581c:	0211      	lsls	r1, r2, #8
 800581e:	687a      	ldr	r2, [r7, #4]
 8005820:	6952      	ldr	r2, [r2, #20]
 8005822:	0852      	lsrs	r2, r2, #1
 8005824:	3a01      	subs	r2, #1
 8005826:	0652      	lsls	r2, r2, #25
 8005828:	430a      	orrs	r2, r1
 800582a:	4916      	ldr	r1, [pc, #88]	@ (8005884 <RCCEx_PLLSAI1_Config+0x1e4>)
 800582c:	4313      	orrs	r3, r2
 800582e:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8005830:	4b14      	ldr	r3, [pc, #80]	@ (8005884 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	4a13      	ldr	r2, [pc, #76]	@ (8005884 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005836:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800583a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800583c:	f7fd fb74 	bl	8002f28 <HAL_GetTick>
 8005840:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005842:	e009      	b.n	8005858 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005844:	f7fd fb70 	bl	8002f28 <HAL_GetTick>
 8005848:	4602      	mov	r2, r0
 800584a:	68bb      	ldr	r3, [r7, #8]
 800584c:	1ad3      	subs	r3, r2, r3
 800584e:	2b02      	cmp	r3, #2
 8005850:	d902      	bls.n	8005858 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8005852:	2303      	movs	r3, #3
 8005854:	73fb      	strb	r3, [r7, #15]
          break;
 8005856:	e005      	b.n	8005864 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005858:	4b0a      	ldr	r3, [pc, #40]	@ (8005884 <RCCEx_PLLSAI1_Config+0x1e4>)
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005860:	2b00      	cmp	r3, #0
 8005862:	d0ef      	beq.n	8005844 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8005864:	7bfb      	ldrb	r3, [r7, #15]
 8005866:	2b00      	cmp	r3, #0
 8005868:	d106      	bne.n	8005878 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800586a:	4b06      	ldr	r3, [pc, #24]	@ (8005884 <RCCEx_PLLSAI1_Config+0x1e4>)
 800586c:	691a      	ldr	r2, [r3, #16]
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	699b      	ldr	r3, [r3, #24]
 8005872:	4904      	ldr	r1, [pc, #16]	@ (8005884 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005874:	4313      	orrs	r3, r2
 8005876:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8005878:	7bfb      	ldrb	r3, [r7, #15]
}
 800587a:	4618      	mov	r0, r3
 800587c:	3710      	adds	r7, #16
 800587e:	46bd      	mov	sp, r7
 8005880:	bd80      	pop	{r7, pc}
 8005882:	bf00      	nop
 8005884:	40021000 	.word	0x40021000

08005888 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8005888:	b580      	push	{r7, lr}
 800588a:	b084      	sub	sp, #16
 800588c:	af00      	add	r7, sp, #0
 800588e:	6078      	str	r0, [r7, #4]
 8005890:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005892:	2300      	movs	r3, #0
 8005894:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005896:	4b6a      	ldr	r3, [pc, #424]	@ (8005a40 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005898:	68db      	ldr	r3, [r3, #12]
 800589a:	f003 0303 	and.w	r3, r3, #3
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d018      	beq.n	80058d4 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80058a2:	4b67      	ldr	r3, [pc, #412]	@ (8005a40 <RCCEx_PLLSAI2_Config+0x1b8>)
 80058a4:	68db      	ldr	r3, [r3, #12]
 80058a6:	f003 0203 	and.w	r2, r3, #3
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	429a      	cmp	r2, r3
 80058b0:	d10d      	bne.n	80058ce <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
       ||
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d009      	beq.n	80058ce <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80058ba:	4b61      	ldr	r3, [pc, #388]	@ (8005a40 <RCCEx_PLLSAI2_Config+0x1b8>)
 80058bc:	68db      	ldr	r3, [r3, #12]
 80058be:	091b      	lsrs	r3, r3, #4
 80058c0:	f003 0307 	and.w	r3, r3, #7
 80058c4:	1c5a      	adds	r2, r3, #1
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	685b      	ldr	r3, [r3, #4]
       ||
 80058ca:	429a      	cmp	r2, r3
 80058cc:	d047      	beq.n	800595e <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80058ce:	2301      	movs	r3, #1
 80058d0:	73fb      	strb	r3, [r7, #15]
 80058d2:	e044      	b.n	800595e <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	2b03      	cmp	r3, #3
 80058da:	d018      	beq.n	800590e <RCCEx_PLLSAI2_Config+0x86>
 80058dc:	2b03      	cmp	r3, #3
 80058de:	d825      	bhi.n	800592c <RCCEx_PLLSAI2_Config+0xa4>
 80058e0:	2b01      	cmp	r3, #1
 80058e2:	d002      	beq.n	80058ea <RCCEx_PLLSAI2_Config+0x62>
 80058e4:	2b02      	cmp	r3, #2
 80058e6:	d009      	beq.n	80058fc <RCCEx_PLLSAI2_Config+0x74>
 80058e8:	e020      	b.n	800592c <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80058ea:	4b55      	ldr	r3, [pc, #340]	@ (8005a40 <RCCEx_PLLSAI2_Config+0x1b8>)
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	f003 0302 	and.w	r3, r3, #2
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d11d      	bne.n	8005932 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80058f6:	2301      	movs	r3, #1
 80058f8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80058fa:	e01a      	b.n	8005932 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80058fc:	4b50      	ldr	r3, [pc, #320]	@ (8005a40 <RCCEx_PLLSAI2_Config+0x1b8>)
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005904:	2b00      	cmp	r3, #0
 8005906:	d116      	bne.n	8005936 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8005908:	2301      	movs	r3, #1
 800590a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800590c:	e013      	b.n	8005936 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800590e:	4b4c      	ldr	r3, [pc, #304]	@ (8005a40 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005916:	2b00      	cmp	r3, #0
 8005918:	d10f      	bne.n	800593a <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800591a:	4b49      	ldr	r3, [pc, #292]	@ (8005a40 <RCCEx_PLLSAI2_Config+0x1b8>)
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005922:	2b00      	cmp	r3, #0
 8005924:	d109      	bne.n	800593a <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8005926:	2301      	movs	r3, #1
 8005928:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800592a:	e006      	b.n	800593a <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 800592c:	2301      	movs	r3, #1
 800592e:	73fb      	strb	r3, [r7, #15]
      break;
 8005930:	e004      	b.n	800593c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005932:	bf00      	nop
 8005934:	e002      	b.n	800593c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005936:	bf00      	nop
 8005938:	e000      	b.n	800593c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800593a:	bf00      	nop
    }

    if(status == HAL_OK)
 800593c:	7bfb      	ldrb	r3, [r7, #15]
 800593e:	2b00      	cmp	r3, #0
 8005940:	d10d      	bne.n	800595e <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8005942:	4b3f      	ldr	r3, [pc, #252]	@ (8005a40 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005944:	68db      	ldr	r3, [r3, #12]
 8005946:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	6819      	ldr	r1, [r3, #0]
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	685b      	ldr	r3, [r3, #4]
 8005952:	3b01      	subs	r3, #1
 8005954:	011b      	lsls	r3, r3, #4
 8005956:	430b      	orrs	r3, r1
 8005958:	4939      	ldr	r1, [pc, #228]	@ (8005a40 <RCCEx_PLLSAI2_Config+0x1b8>)
 800595a:	4313      	orrs	r3, r2
 800595c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800595e:	7bfb      	ldrb	r3, [r7, #15]
 8005960:	2b00      	cmp	r3, #0
 8005962:	d167      	bne.n	8005a34 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8005964:	4b36      	ldr	r3, [pc, #216]	@ (8005a40 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	4a35      	ldr	r2, [pc, #212]	@ (8005a40 <RCCEx_PLLSAI2_Config+0x1b8>)
 800596a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800596e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005970:	f7fd fada 	bl	8002f28 <HAL_GetTick>
 8005974:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005976:	e009      	b.n	800598c <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005978:	f7fd fad6 	bl	8002f28 <HAL_GetTick>
 800597c:	4602      	mov	r2, r0
 800597e:	68bb      	ldr	r3, [r7, #8]
 8005980:	1ad3      	subs	r3, r2, r3
 8005982:	2b02      	cmp	r3, #2
 8005984:	d902      	bls.n	800598c <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8005986:	2303      	movs	r3, #3
 8005988:	73fb      	strb	r3, [r7, #15]
        break;
 800598a:	e005      	b.n	8005998 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800598c:	4b2c      	ldr	r3, [pc, #176]	@ (8005a40 <RCCEx_PLLSAI2_Config+0x1b8>)
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005994:	2b00      	cmp	r3, #0
 8005996:	d1ef      	bne.n	8005978 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005998:	7bfb      	ldrb	r3, [r7, #15]
 800599a:	2b00      	cmp	r3, #0
 800599c:	d14a      	bne.n	8005a34 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800599e:	683b      	ldr	r3, [r7, #0]
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d111      	bne.n	80059c8 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80059a4:	4b26      	ldr	r3, [pc, #152]	@ (8005a40 <RCCEx_PLLSAI2_Config+0x1b8>)
 80059a6:	695b      	ldr	r3, [r3, #20]
 80059a8:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 80059ac:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80059b0:	687a      	ldr	r2, [r7, #4]
 80059b2:	6892      	ldr	r2, [r2, #8]
 80059b4:	0211      	lsls	r1, r2, #8
 80059b6:	687a      	ldr	r2, [r7, #4]
 80059b8:	68d2      	ldr	r2, [r2, #12]
 80059ba:	0912      	lsrs	r2, r2, #4
 80059bc:	0452      	lsls	r2, r2, #17
 80059be:	430a      	orrs	r2, r1
 80059c0:	491f      	ldr	r1, [pc, #124]	@ (8005a40 <RCCEx_PLLSAI2_Config+0x1b8>)
 80059c2:	4313      	orrs	r3, r2
 80059c4:	614b      	str	r3, [r1, #20]
 80059c6:	e011      	b.n	80059ec <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80059c8:	4b1d      	ldr	r3, [pc, #116]	@ (8005a40 <RCCEx_PLLSAI2_Config+0x1b8>)
 80059ca:	695b      	ldr	r3, [r3, #20]
 80059cc:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 80059d0:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80059d4:	687a      	ldr	r2, [r7, #4]
 80059d6:	6892      	ldr	r2, [r2, #8]
 80059d8:	0211      	lsls	r1, r2, #8
 80059da:	687a      	ldr	r2, [r7, #4]
 80059dc:	6912      	ldr	r2, [r2, #16]
 80059de:	0852      	lsrs	r2, r2, #1
 80059e0:	3a01      	subs	r2, #1
 80059e2:	0652      	lsls	r2, r2, #25
 80059e4:	430a      	orrs	r2, r1
 80059e6:	4916      	ldr	r1, [pc, #88]	@ (8005a40 <RCCEx_PLLSAI2_Config+0x1b8>)
 80059e8:	4313      	orrs	r3, r2
 80059ea:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80059ec:	4b14      	ldr	r3, [pc, #80]	@ (8005a40 <RCCEx_PLLSAI2_Config+0x1b8>)
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	4a13      	ldr	r2, [pc, #76]	@ (8005a40 <RCCEx_PLLSAI2_Config+0x1b8>)
 80059f2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80059f6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80059f8:	f7fd fa96 	bl	8002f28 <HAL_GetTick>
 80059fc:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80059fe:	e009      	b.n	8005a14 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005a00:	f7fd fa92 	bl	8002f28 <HAL_GetTick>
 8005a04:	4602      	mov	r2, r0
 8005a06:	68bb      	ldr	r3, [r7, #8]
 8005a08:	1ad3      	subs	r3, r2, r3
 8005a0a:	2b02      	cmp	r3, #2
 8005a0c:	d902      	bls.n	8005a14 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8005a0e:	2303      	movs	r3, #3
 8005a10:	73fb      	strb	r3, [r7, #15]
          break;
 8005a12:	e005      	b.n	8005a20 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005a14:	4b0a      	ldr	r3, [pc, #40]	@ (8005a40 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d0ef      	beq.n	8005a00 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8005a20:	7bfb      	ldrb	r3, [r7, #15]
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d106      	bne.n	8005a34 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8005a26:	4b06      	ldr	r3, [pc, #24]	@ (8005a40 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005a28:	695a      	ldr	r2, [r3, #20]
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	695b      	ldr	r3, [r3, #20]
 8005a2e:	4904      	ldr	r1, [pc, #16]	@ (8005a40 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005a30:	4313      	orrs	r3, r2
 8005a32:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8005a34:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a36:	4618      	mov	r0, r3
 8005a38:	3710      	adds	r7, #16
 8005a3a:	46bd      	mov	sp, r7
 8005a3c:	bd80      	pop	{r7, pc}
 8005a3e:	bf00      	nop
 8005a40:	40021000 	.word	0x40021000

08005a44 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005a44:	b580      	push	{r7, lr}
 8005a46:	b084      	sub	sp, #16
 8005a48:	af00      	add	r7, sp, #0
 8005a4a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d101      	bne.n	8005a56 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005a52:	2301      	movs	r3, #1
 8005a54:	e095      	b.n	8005b82 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d108      	bne.n	8005a70 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	685b      	ldr	r3, [r3, #4]
 8005a62:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005a66:	d009      	beq.n	8005a7c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	2200      	movs	r2, #0
 8005a6c:	61da      	str	r2, [r3, #28]
 8005a6e:	e005      	b.n	8005a7c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	2200      	movs	r2, #0
 8005a74:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	2200      	movs	r2, #0
 8005a7a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	2200      	movs	r2, #0
 8005a80:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8005a88:	b2db      	uxtb	r3, r3
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d106      	bne.n	8005a9c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	2200      	movs	r2, #0
 8005a92:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005a96:	6878      	ldr	r0, [r7, #4]
 8005a98:	f7fc fed0 	bl	800283c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	2202      	movs	r2, #2
 8005aa0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	681a      	ldr	r2, [r3, #0]
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005ab2:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	68db      	ldr	r3, [r3, #12]
 8005ab8:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005abc:	d902      	bls.n	8005ac4 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005abe:	2300      	movs	r3, #0
 8005ac0:	60fb      	str	r3, [r7, #12]
 8005ac2:	e002      	b.n	8005aca <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005ac4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8005ac8:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	68db      	ldr	r3, [r3, #12]
 8005ace:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8005ad2:	d007      	beq.n	8005ae4 <HAL_SPI_Init+0xa0>
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	68db      	ldr	r3, [r3, #12]
 8005ad8:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005adc:	d002      	beq.n	8005ae4 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	2200      	movs	r2, #0
 8005ae2:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	685b      	ldr	r3, [r3, #4]
 8005ae8:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	689b      	ldr	r3, [r3, #8]
 8005af0:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8005af4:	431a      	orrs	r2, r3
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	691b      	ldr	r3, [r3, #16]
 8005afa:	f003 0302 	and.w	r3, r3, #2
 8005afe:	431a      	orrs	r2, r3
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	695b      	ldr	r3, [r3, #20]
 8005b04:	f003 0301 	and.w	r3, r3, #1
 8005b08:	431a      	orrs	r2, r3
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	699b      	ldr	r3, [r3, #24]
 8005b0e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005b12:	431a      	orrs	r2, r3
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	69db      	ldr	r3, [r3, #28]
 8005b18:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005b1c:	431a      	orrs	r2, r3
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	6a1b      	ldr	r3, [r3, #32]
 8005b22:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005b26:	ea42 0103 	orr.w	r1, r2, r3
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b2e:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	430a      	orrs	r2, r1
 8005b38:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	699b      	ldr	r3, [r3, #24]
 8005b3e:	0c1b      	lsrs	r3, r3, #16
 8005b40:	f003 0204 	and.w	r2, r3, #4
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b48:	f003 0310 	and.w	r3, r3, #16
 8005b4c:	431a      	orrs	r2, r3
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005b52:	f003 0308 	and.w	r3, r3, #8
 8005b56:	431a      	orrs	r2, r3
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	68db      	ldr	r3, [r3, #12]
 8005b5c:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8005b60:	ea42 0103 	orr.w	r1, r2, r3
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	430a      	orrs	r2, r1
 8005b70:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	2200      	movs	r2, #0
 8005b76:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	2201      	movs	r2, #1
 8005b7c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8005b80:	2300      	movs	r3, #0
}
 8005b82:	4618      	mov	r0, r3
 8005b84:	3710      	adds	r7, #16
 8005b86:	46bd      	mov	sp, r7
 8005b88:	bd80      	pop	{r7, pc}

08005b8a <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005b8a:	b580      	push	{r7, lr}
 8005b8c:	b082      	sub	sp, #8
 8005b8e:	af00      	add	r7, sp, #0
 8005b90:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d101      	bne.n	8005b9c <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005b98:	2301      	movs	r3, #1
 8005b9a:	e040      	b.n	8005c1e <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d106      	bne.n	8005bb2 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	2200      	movs	r2, #0
 8005ba8:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005bac:	6878      	ldr	r0, [r7, #4]
 8005bae:	f7fc fe87 	bl	80028c0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	2224      	movs	r2, #36	@ 0x24
 8005bb6:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	681a      	ldr	r2, [r3, #0]
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	f022 0201 	bic.w	r2, r2, #1
 8005bc6:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d002      	beq.n	8005bd6 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8005bd0:	6878      	ldr	r0, [r7, #4]
 8005bd2:	f000 fb69 	bl	80062a8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005bd6:	6878      	ldr	r0, [r7, #4]
 8005bd8:	f000 f8ae 	bl	8005d38 <UART_SetConfig>
 8005bdc:	4603      	mov	r3, r0
 8005bde:	2b01      	cmp	r3, #1
 8005be0:	d101      	bne.n	8005be6 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8005be2:	2301      	movs	r3, #1
 8005be4:	e01b      	b.n	8005c1e <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	685a      	ldr	r2, [r3, #4]
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005bf4:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	689a      	ldr	r2, [r3, #8]
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005c04:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	681a      	ldr	r2, [r3, #0]
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	f042 0201 	orr.w	r2, r2, #1
 8005c14:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005c16:	6878      	ldr	r0, [r7, #4]
 8005c18:	f000 fbe8 	bl	80063ec <UART_CheckIdleState>
 8005c1c:	4603      	mov	r3, r0
}
 8005c1e:	4618      	mov	r0, r3
 8005c20:	3708      	adds	r7, #8
 8005c22:	46bd      	mov	sp, r7
 8005c24:	bd80      	pop	{r7, pc}

08005c26 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005c26:	b580      	push	{r7, lr}
 8005c28:	b08a      	sub	sp, #40	@ 0x28
 8005c2a:	af02      	add	r7, sp, #8
 8005c2c:	60f8      	str	r0, [r7, #12]
 8005c2e:	60b9      	str	r1, [r7, #8]
 8005c30:	603b      	str	r3, [r7, #0]
 8005c32:	4613      	mov	r3, r2
 8005c34:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005c3a:	2b20      	cmp	r3, #32
 8005c3c:	d177      	bne.n	8005d2e <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8005c3e:	68bb      	ldr	r3, [r7, #8]
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d002      	beq.n	8005c4a <HAL_UART_Transmit+0x24>
 8005c44:	88fb      	ldrh	r3, [r7, #6]
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d101      	bne.n	8005c4e <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8005c4a:	2301      	movs	r3, #1
 8005c4c:	e070      	b.n	8005d30 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	2200      	movs	r2, #0
 8005c52:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	2221      	movs	r2, #33	@ 0x21
 8005c5a:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005c5c:	f7fd f964 	bl	8002f28 <HAL_GetTick>
 8005c60:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	88fa      	ldrh	r2, [r7, #6]
 8005c66:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	88fa      	ldrh	r2, [r7, #6]
 8005c6e:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	689b      	ldr	r3, [r3, #8]
 8005c76:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005c7a:	d108      	bne.n	8005c8e <HAL_UART_Transmit+0x68>
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	691b      	ldr	r3, [r3, #16]
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d104      	bne.n	8005c8e <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8005c84:	2300      	movs	r3, #0
 8005c86:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005c88:	68bb      	ldr	r3, [r7, #8]
 8005c8a:	61bb      	str	r3, [r7, #24]
 8005c8c:	e003      	b.n	8005c96 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8005c8e:	68bb      	ldr	r3, [r7, #8]
 8005c90:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005c92:	2300      	movs	r3, #0
 8005c94:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005c96:	e02f      	b.n	8005cf8 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005c98:	683b      	ldr	r3, [r7, #0]
 8005c9a:	9300      	str	r3, [sp, #0]
 8005c9c:	697b      	ldr	r3, [r7, #20]
 8005c9e:	2200      	movs	r2, #0
 8005ca0:	2180      	movs	r1, #128	@ 0x80
 8005ca2:	68f8      	ldr	r0, [r7, #12]
 8005ca4:	f000 fc4a 	bl	800653c <UART_WaitOnFlagUntilTimeout>
 8005ca8:	4603      	mov	r3, r0
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d004      	beq.n	8005cb8 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	2220      	movs	r2, #32
 8005cb2:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8005cb4:	2303      	movs	r3, #3
 8005cb6:	e03b      	b.n	8005d30 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8005cb8:	69fb      	ldr	r3, [r7, #28]
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d10b      	bne.n	8005cd6 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005cbe:	69bb      	ldr	r3, [r7, #24]
 8005cc0:	881a      	ldrh	r2, [r3, #0]
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005cca:	b292      	uxth	r2, r2
 8005ccc:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8005cce:	69bb      	ldr	r3, [r7, #24]
 8005cd0:	3302      	adds	r3, #2
 8005cd2:	61bb      	str	r3, [r7, #24]
 8005cd4:	e007      	b.n	8005ce6 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005cd6:	69fb      	ldr	r3, [r7, #28]
 8005cd8:	781a      	ldrb	r2, [r3, #0]
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8005ce0:	69fb      	ldr	r3, [r7, #28]
 8005ce2:	3301      	adds	r3, #1
 8005ce4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8005cec:	b29b      	uxth	r3, r3
 8005cee:	3b01      	subs	r3, #1
 8005cf0:	b29a      	uxth	r2, r3
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8005cfe:	b29b      	uxth	r3, r3
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d1c9      	bne.n	8005c98 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005d04:	683b      	ldr	r3, [r7, #0]
 8005d06:	9300      	str	r3, [sp, #0]
 8005d08:	697b      	ldr	r3, [r7, #20]
 8005d0a:	2200      	movs	r2, #0
 8005d0c:	2140      	movs	r1, #64	@ 0x40
 8005d0e:	68f8      	ldr	r0, [r7, #12]
 8005d10:	f000 fc14 	bl	800653c <UART_WaitOnFlagUntilTimeout>
 8005d14:	4603      	mov	r3, r0
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d004      	beq.n	8005d24 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	2220      	movs	r2, #32
 8005d1e:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8005d20:	2303      	movs	r3, #3
 8005d22:	e005      	b.n	8005d30 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	2220      	movs	r2, #32
 8005d28:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8005d2a:	2300      	movs	r3, #0
 8005d2c:	e000      	b.n	8005d30 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8005d2e:	2302      	movs	r3, #2
  }
}
 8005d30:	4618      	mov	r0, r3
 8005d32:	3720      	adds	r7, #32
 8005d34:	46bd      	mov	sp, r7
 8005d36:	bd80      	pop	{r7, pc}

08005d38 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005d38:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005d3c:	b08a      	sub	sp, #40	@ 0x28
 8005d3e:	af00      	add	r7, sp, #0
 8005d40:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005d42:	2300      	movs	r3, #0
 8005d44:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	689a      	ldr	r2, [r3, #8]
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	691b      	ldr	r3, [r3, #16]
 8005d50:	431a      	orrs	r2, r3
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	695b      	ldr	r3, [r3, #20]
 8005d56:	431a      	orrs	r2, r3
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	69db      	ldr	r3, [r3, #28]
 8005d5c:	4313      	orrs	r3, r2
 8005d5e:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	681a      	ldr	r2, [r3, #0]
 8005d66:	4ba4      	ldr	r3, [pc, #656]	@ (8005ff8 <UART_SetConfig+0x2c0>)
 8005d68:	4013      	ands	r3, r2
 8005d6a:	68fa      	ldr	r2, [r7, #12]
 8005d6c:	6812      	ldr	r2, [r2, #0]
 8005d6e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005d70:	430b      	orrs	r3, r1
 8005d72:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	685b      	ldr	r3, [r3, #4]
 8005d7a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	68da      	ldr	r2, [r3, #12]
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	430a      	orrs	r2, r1
 8005d88:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	699b      	ldr	r3, [r3, #24]
 8005d8e:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	4a99      	ldr	r2, [pc, #612]	@ (8005ffc <UART_SetConfig+0x2c4>)
 8005d96:	4293      	cmp	r3, r2
 8005d98:	d004      	beq.n	8005da4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	6a1b      	ldr	r3, [r3, #32]
 8005d9e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005da0:	4313      	orrs	r3, r2
 8005da2:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	689b      	ldr	r3, [r3, #8]
 8005daa:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005db4:	430a      	orrs	r2, r1
 8005db6:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	4a90      	ldr	r2, [pc, #576]	@ (8006000 <UART_SetConfig+0x2c8>)
 8005dbe:	4293      	cmp	r3, r2
 8005dc0:	d126      	bne.n	8005e10 <UART_SetConfig+0xd8>
 8005dc2:	4b90      	ldr	r3, [pc, #576]	@ (8006004 <UART_SetConfig+0x2cc>)
 8005dc4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005dc8:	f003 0303 	and.w	r3, r3, #3
 8005dcc:	2b03      	cmp	r3, #3
 8005dce:	d81b      	bhi.n	8005e08 <UART_SetConfig+0xd0>
 8005dd0:	a201      	add	r2, pc, #4	@ (adr r2, 8005dd8 <UART_SetConfig+0xa0>)
 8005dd2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005dd6:	bf00      	nop
 8005dd8:	08005de9 	.word	0x08005de9
 8005ddc:	08005df9 	.word	0x08005df9
 8005de0:	08005df1 	.word	0x08005df1
 8005de4:	08005e01 	.word	0x08005e01
 8005de8:	2301      	movs	r3, #1
 8005dea:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005dee:	e116      	b.n	800601e <UART_SetConfig+0x2e6>
 8005df0:	2302      	movs	r3, #2
 8005df2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005df6:	e112      	b.n	800601e <UART_SetConfig+0x2e6>
 8005df8:	2304      	movs	r3, #4
 8005dfa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005dfe:	e10e      	b.n	800601e <UART_SetConfig+0x2e6>
 8005e00:	2308      	movs	r3, #8
 8005e02:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005e06:	e10a      	b.n	800601e <UART_SetConfig+0x2e6>
 8005e08:	2310      	movs	r3, #16
 8005e0a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005e0e:	e106      	b.n	800601e <UART_SetConfig+0x2e6>
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	4a7c      	ldr	r2, [pc, #496]	@ (8006008 <UART_SetConfig+0x2d0>)
 8005e16:	4293      	cmp	r3, r2
 8005e18:	d138      	bne.n	8005e8c <UART_SetConfig+0x154>
 8005e1a:	4b7a      	ldr	r3, [pc, #488]	@ (8006004 <UART_SetConfig+0x2cc>)
 8005e1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005e20:	f003 030c 	and.w	r3, r3, #12
 8005e24:	2b0c      	cmp	r3, #12
 8005e26:	d82d      	bhi.n	8005e84 <UART_SetConfig+0x14c>
 8005e28:	a201      	add	r2, pc, #4	@ (adr r2, 8005e30 <UART_SetConfig+0xf8>)
 8005e2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e2e:	bf00      	nop
 8005e30:	08005e65 	.word	0x08005e65
 8005e34:	08005e85 	.word	0x08005e85
 8005e38:	08005e85 	.word	0x08005e85
 8005e3c:	08005e85 	.word	0x08005e85
 8005e40:	08005e75 	.word	0x08005e75
 8005e44:	08005e85 	.word	0x08005e85
 8005e48:	08005e85 	.word	0x08005e85
 8005e4c:	08005e85 	.word	0x08005e85
 8005e50:	08005e6d 	.word	0x08005e6d
 8005e54:	08005e85 	.word	0x08005e85
 8005e58:	08005e85 	.word	0x08005e85
 8005e5c:	08005e85 	.word	0x08005e85
 8005e60:	08005e7d 	.word	0x08005e7d
 8005e64:	2300      	movs	r3, #0
 8005e66:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005e6a:	e0d8      	b.n	800601e <UART_SetConfig+0x2e6>
 8005e6c:	2302      	movs	r3, #2
 8005e6e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005e72:	e0d4      	b.n	800601e <UART_SetConfig+0x2e6>
 8005e74:	2304      	movs	r3, #4
 8005e76:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005e7a:	e0d0      	b.n	800601e <UART_SetConfig+0x2e6>
 8005e7c:	2308      	movs	r3, #8
 8005e7e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005e82:	e0cc      	b.n	800601e <UART_SetConfig+0x2e6>
 8005e84:	2310      	movs	r3, #16
 8005e86:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005e8a:	e0c8      	b.n	800601e <UART_SetConfig+0x2e6>
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	4a5e      	ldr	r2, [pc, #376]	@ (800600c <UART_SetConfig+0x2d4>)
 8005e92:	4293      	cmp	r3, r2
 8005e94:	d125      	bne.n	8005ee2 <UART_SetConfig+0x1aa>
 8005e96:	4b5b      	ldr	r3, [pc, #364]	@ (8006004 <UART_SetConfig+0x2cc>)
 8005e98:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005e9c:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8005ea0:	2b30      	cmp	r3, #48	@ 0x30
 8005ea2:	d016      	beq.n	8005ed2 <UART_SetConfig+0x19a>
 8005ea4:	2b30      	cmp	r3, #48	@ 0x30
 8005ea6:	d818      	bhi.n	8005eda <UART_SetConfig+0x1a2>
 8005ea8:	2b20      	cmp	r3, #32
 8005eaa:	d00a      	beq.n	8005ec2 <UART_SetConfig+0x18a>
 8005eac:	2b20      	cmp	r3, #32
 8005eae:	d814      	bhi.n	8005eda <UART_SetConfig+0x1a2>
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d002      	beq.n	8005eba <UART_SetConfig+0x182>
 8005eb4:	2b10      	cmp	r3, #16
 8005eb6:	d008      	beq.n	8005eca <UART_SetConfig+0x192>
 8005eb8:	e00f      	b.n	8005eda <UART_SetConfig+0x1a2>
 8005eba:	2300      	movs	r3, #0
 8005ebc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005ec0:	e0ad      	b.n	800601e <UART_SetConfig+0x2e6>
 8005ec2:	2302      	movs	r3, #2
 8005ec4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005ec8:	e0a9      	b.n	800601e <UART_SetConfig+0x2e6>
 8005eca:	2304      	movs	r3, #4
 8005ecc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005ed0:	e0a5      	b.n	800601e <UART_SetConfig+0x2e6>
 8005ed2:	2308      	movs	r3, #8
 8005ed4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005ed8:	e0a1      	b.n	800601e <UART_SetConfig+0x2e6>
 8005eda:	2310      	movs	r3, #16
 8005edc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005ee0:	e09d      	b.n	800601e <UART_SetConfig+0x2e6>
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	4a4a      	ldr	r2, [pc, #296]	@ (8006010 <UART_SetConfig+0x2d8>)
 8005ee8:	4293      	cmp	r3, r2
 8005eea:	d125      	bne.n	8005f38 <UART_SetConfig+0x200>
 8005eec:	4b45      	ldr	r3, [pc, #276]	@ (8006004 <UART_SetConfig+0x2cc>)
 8005eee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005ef2:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8005ef6:	2bc0      	cmp	r3, #192	@ 0xc0
 8005ef8:	d016      	beq.n	8005f28 <UART_SetConfig+0x1f0>
 8005efa:	2bc0      	cmp	r3, #192	@ 0xc0
 8005efc:	d818      	bhi.n	8005f30 <UART_SetConfig+0x1f8>
 8005efe:	2b80      	cmp	r3, #128	@ 0x80
 8005f00:	d00a      	beq.n	8005f18 <UART_SetConfig+0x1e0>
 8005f02:	2b80      	cmp	r3, #128	@ 0x80
 8005f04:	d814      	bhi.n	8005f30 <UART_SetConfig+0x1f8>
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d002      	beq.n	8005f10 <UART_SetConfig+0x1d8>
 8005f0a:	2b40      	cmp	r3, #64	@ 0x40
 8005f0c:	d008      	beq.n	8005f20 <UART_SetConfig+0x1e8>
 8005f0e:	e00f      	b.n	8005f30 <UART_SetConfig+0x1f8>
 8005f10:	2300      	movs	r3, #0
 8005f12:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005f16:	e082      	b.n	800601e <UART_SetConfig+0x2e6>
 8005f18:	2302      	movs	r3, #2
 8005f1a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005f1e:	e07e      	b.n	800601e <UART_SetConfig+0x2e6>
 8005f20:	2304      	movs	r3, #4
 8005f22:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005f26:	e07a      	b.n	800601e <UART_SetConfig+0x2e6>
 8005f28:	2308      	movs	r3, #8
 8005f2a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005f2e:	e076      	b.n	800601e <UART_SetConfig+0x2e6>
 8005f30:	2310      	movs	r3, #16
 8005f32:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005f36:	e072      	b.n	800601e <UART_SetConfig+0x2e6>
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	4a35      	ldr	r2, [pc, #212]	@ (8006014 <UART_SetConfig+0x2dc>)
 8005f3e:	4293      	cmp	r3, r2
 8005f40:	d12a      	bne.n	8005f98 <UART_SetConfig+0x260>
 8005f42:	4b30      	ldr	r3, [pc, #192]	@ (8006004 <UART_SetConfig+0x2cc>)
 8005f44:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005f48:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005f4c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005f50:	d01a      	beq.n	8005f88 <UART_SetConfig+0x250>
 8005f52:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005f56:	d81b      	bhi.n	8005f90 <UART_SetConfig+0x258>
 8005f58:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005f5c:	d00c      	beq.n	8005f78 <UART_SetConfig+0x240>
 8005f5e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005f62:	d815      	bhi.n	8005f90 <UART_SetConfig+0x258>
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d003      	beq.n	8005f70 <UART_SetConfig+0x238>
 8005f68:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005f6c:	d008      	beq.n	8005f80 <UART_SetConfig+0x248>
 8005f6e:	e00f      	b.n	8005f90 <UART_SetConfig+0x258>
 8005f70:	2300      	movs	r3, #0
 8005f72:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005f76:	e052      	b.n	800601e <UART_SetConfig+0x2e6>
 8005f78:	2302      	movs	r3, #2
 8005f7a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005f7e:	e04e      	b.n	800601e <UART_SetConfig+0x2e6>
 8005f80:	2304      	movs	r3, #4
 8005f82:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005f86:	e04a      	b.n	800601e <UART_SetConfig+0x2e6>
 8005f88:	2308      	movs	r3, #8
 8005f8a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005f8e:	e046      	b.n	800601e <UART_SetConfig+0x2e6>
 8005f90:	2310      	movs	r3, #16
 8005f92:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005f96:	e042      	b.n	800601e <UART_SetConfig+0x2e6>
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	4a17      	ldr	r2, [pc, #92]	@ (8005ffc <UART_SetConfig+0x2c4>)
 8005f9e:	4293      	cmp	r3, r2
 8005fa0:	d13a      	bne.n	8006018 <UART_SetConfig+0x2e0>
 8005fa2:	4b18      	ldr	r3, [pc, #96]	@ (8006004 <UART_SetConfig+0x2cc>)
 8005fa4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005fa8:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8005fac:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005fb0:	d01a      	beq.n	8005fe8 <UART_SetConfig+0x2b0>
 8005fb2:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005fb6:	d81b      	bhi.n	8005ff0 <UART_SetConfig+0x2b8>
 8005fb8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005fbc:	d00c      	beq.n	8005fd8 <UART_SetConfig+0x2a0>
 8005fbe:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005fc2:	d815      	bhi.n	8005ff0 <UART_SetConfig+0x2b8>
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d003      	beq.n	8005fd0 <UART_SetConfig+0x298>
 8005fc8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005fcc:	d008      	beq.n	8005fe0 <UART_SetConfig+0x2a8>
 8005fce:	e00f      	b.n	8005ff0 <UART_SetConfig+0x2b8>
 8005fd0:	2300      	movs	r3, #0
 8005fd2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005fd6:	e022      	b.n	800601e <UART_SetConfig+0x2e6>
 8005fd8:	2302      	movs	r3, #2
 8005fda:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005fde:	e01e      	b.n	800601e <UART_SetConfig+0x2e6>
 8005fe0:	2304      	movs	r3, #4
 8005fe2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005fe6:	e01a      	b.n	800601e <UART_SetConfig+0x2e6>
 8005fe8:	2308      	movs	r3, #8
 8005fea:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005fee:	e016      	b.n	800601e <UART_SetConfig+0x2e6>
 8005ff0:	2310      	movs	r3, #16
 8005ff2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005ff6:	e012      	b.n	800601e <UART_SetConfig+0x2e6>
 8005ff8:	efff69f3 	.word	0xefff69f3
 8005ffc:	40008000 	.word	0x40008000
 8006000:	40013800 	.word	0x40013800
 8006004:	40021000 	.word	0x40021000
 8006008:	40004400 	.word	0x40004400
 800600c:	40004800 	.word	0x40004800
 8006010:	40004c00 	.word	0x40004c00
 8006014:	40005000 	.word	0x40005000
 8006018:	2310      	movs	r3, #16
 800601a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	4a9f      	ldr	r2, [pc, #636]	@ (80062a0 <UART_SetConfig+0x568>)
 8006024:	4293      	cmp	r3, r2
 8006026:	d17a      	bne.n	800611e <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006028:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800602c:	2b08      	cmp	r3, #8
 800602e:	d824      	bhi.n	800607a <UART_SetConfig+0x342>
 8006030:	a201      	add	r2, pc, #4	@ (adr r2, 8006038 <UART_SetConfig+0x300>)
 8006032:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006036:	bf00      	nop
 8006038:	0800605d 	.word	0x0800605d
 800603c:	0800607b 	.word	0x0800607b
 8006040:	08006065 	.word	0x08006065
 8006044:	0800607b 	.word	0x0800607b
 8006048:	0800606b 	.word	0x0800606b
 800604c:	0800607b 	.word	0x0800607b
 8006050:	0800607b 	.word	0x0800607b
 8006054:	0800607b 	.word	0x0800607b
 8006058:	08006073 	.word	0x08006073
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800605c:	f7fe ffaa 	bl	8004fb4 <HAL_RCC_GetPCLK1Freq>
 8006060:	61f8      	str	r0, [r7, #28]
        break;
 8006062:	e010      	b.n	8006086 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006064:	4b8f      	ldr	r3, [pc, #572]	@ (80062a4 <UART_SetConfig+0x56c>)
 8006066:	61fb      	str	r3, [r7, #28]
        break;
 8006068:	e00d      	b.n	8006086 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800606a:	f7fe ff0b 	bl	8004e84 <HAL_RCC_GetSysClockFreq>
 800606e:	61f8      	str	r0, [r7, #28]
        break;
 8006070:	e009      	b.n	8006086 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006072:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006076:	61fb      	str	r3, [r7, #28]
        break;
 8006078:	e005      	b.n	8006086 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 800607a:	2300      	movs	r3, #0
 800607c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800607e:	2301      	movs	r3, #1
 8006080:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8006084:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006086:	69fb      	ldr	r3, [r7, #28]
 8006088:	2b00      	cmp	r3, #0
 800608a:	f000 80fb 	beq.w	8006284 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	685a      	ldr	r2, [r3, #4]
 8006092:	4613      	mov	r3, r2
 8006094:	005b      	lsls	r3, r3, #1
 8006096:	4413      	add	r3, r2
 8006098:	69fa      	ldr	r2, [r7, #28]
 800609a:	429a      	cmp	r2, r3
 800609c:	d305      	bcc.n	80060aa <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	685b      	ldr	r3, [r3, #4]
 80060a2:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80060a4:	69fa      	ldr	r2, [r7, #28]
 80060a6:	429a      	cmp	r2, r3
 80060a8:	d903      	bls.n	80060b2 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 80060aa:	2301      	movs	r3, #1
 80060ac:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80060b0:	e0e8      	b.n	8006284 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80060b2:	69fb      	ldr	r3, [r7, #28]
 80060b4:	2200      	movs	r2, #0
 80060b6:	461c      	mov	r4, r3
 80060b8:	4615      	mov	r5, r2
 80060ba:	f04f 0200 	mov.w	r2, #0
 80060be:	f04f 0300 	mov.w	r3, #0
 80060c2:	022b      	lsls	r3, r5, #8
 80060c4:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80060c8:	0222      	lsls	r2, r4, #8
 80060ca:	68f9      	ldr	r1, [r7, #12]
 80060cc:	6849      	ldr	r1, [r1, #4]
 80060ce:	0849      	lsrs	r1, r1, #1
 80060d0:	2000      	movs	r0, #0
 80060d2:	4688      	mov	r8, r1
 80060d4:	4681      	mov	r9, r0
 80060d6:	eb12 0a08 	adds.w	sl, r2, r8
 80060da:	eb43 0b09 	adc.w	fp, r3, r9
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	685b      	ldr	r3, [r3, #4]
 80060e2:	2200      	movs	r2, #0
 80060e4:	603b      	str	r3, [r7, #0]
 80060e6:	607a      	str	r2, [r7, #4]
 80060e8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80060ec:	4650      	mov	r0, sl
 80060ee:	4659      	mov	r1, fp
 80060f0:	f7fa fdca 	bl	8000c88 <__aeabi_uldivmod>
 80060f4:	4602      	mov	r2, r0
 80060f6:	460b      	mov	r3, r1
 80060f8:	4613      	mov	r3, r2
 80060fa:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80060fc:	69bb      	ldr	r3, [r7, #24]
 80060fe:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006102:	d308      	bcc.n	8006116 <UART_SetConfig+0x3de>
 8006104:	69bb      	ldr	r3, [r7, #24]
 8006106:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800610a:	d204      	bcs.n	8006116 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	69ba      	ldr	r2, [r7, #24]
 8006112:	60da      	str	r2, [r3, #12]
 8006114:	e0b6      	b.n	8006284 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8006116:	2301      	movs	r3, #1
 8006118:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800611c:	e0b2      	b.n	8006284 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	69db      	ldr	r3, [r3, #28]
 8006122:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006126:	d15e      	bne.n	80061e6 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8006128:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800612c:	2b08      	cmp	r3, #8
 800612e:	d828      	bhi.n	8006182 <UART_SetConfig+0x44a>
 8006130:	a201      	add	r2, pc, #4	@ (adr r2, 8006138 <UART_SetConfig+0x400>)
 8006132:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006136:	bf00      	nop
 8006138:	0800615d 	.word	0x0800615d
 800613c:	08006165 	.word	0x08006165
 8006140:	0800616d 	.word	0x0800616d
 8006144:	08006183 	.word	0x08006183
 8006148:	08006173 	.word	0x08006173
 800614c:	08006183 	.word	0x08006183
 8006150:	08006183 	.word	0x08006183
 8006154:	08006183 	.word	0x08006183
 8006158:	0800617b 	.word	0x0800617b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800615c:	f7fe ff2a 	bl	8004fb4 <HAL_RCC_GetPCLK1Freq>
 8006160:	61f8      	str	r0, [r7, #28]
        break;
 8006162:	e014      	b.n	800618e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006164:	f7fe ff3c 	bl	8004fe0 <HAL_RCC_GetPCLK2Freq>
 8006168:	61f8      	str	r0, [r7, #28]
        break;
 800616a:	e010      	b.n	800618e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800616c:	4b4d      	ldr	r3, [pc, #308]	@ (80062a4 <UART_SetConfig+0x56c>)
 800616e:	61fb      	str	r3, [r7, #28]
        break;
 8006170:	e00d      	b.n	800618e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006172:	f7fe fe87 	bl	8004e84 <HAL_RCC_GetSysClockFreq>
 8006176:	61f8      	str	r0, [r7, #28]
        break;
 8006178:	e009      	b.n	800618e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800617a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800617e:	61fb      	str	r3, [r7, #28]
        break;
 8006180:	e005      	b.n	800618e <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8006182:	2300      	movs	r3, #0
 8006184:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006186:	2301      	movs	r3, #1
 8006188:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 800618c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800618e:	69fb      	ldr	r3, [r7, #28]
 8006190:	2b00      	cmp	r3, #0
 8006192:	d077      	beq.n	8006284 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006194:	69fb      	ldr	r3, [r7, #28]
 8006196:	005a      	lsls	r2, r3, #1
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	685b      	ldr	r3, [r3, #4]
 800619c:	085b      	lsrs	r3, r3, #1
 800619e:	441a      	add	r2, r3
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	685b      	ldr	r3, [r3, #4]
 80061a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80061a8:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80061aa:	69bb      	ldr	r3, [r7, #24]
 80061ac:	2b0f      	cmp	r3, #15
 80061ae:	d916      	bls.n	80061de <UART_SetConfig+0x4a6>
 80061b0:	69bb      	ldr	r3, [r7, #24]
 80061b2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80061b6:	d212      	bcs.n	80061de <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80061b8:	69bb      	ldr	r3, [r7, #24]
 80061ba:	b29b      	uxth	r3, r3
 80061bc:	f023 030f 	bic.w	r3, r3, #15
 80061c0:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80061c2:	69bb      	ldr	r3, [r7, #24]
 80061c4:	085b      	lsrs	r3, r3, #1
 80061c6:	b29b      	uxth	r3, r3
 80061c8:	f003 0307 	and.w	r3, r3, #7
 80061cc:	b29a      	uxth	r2, r3
 80061ce:	8afb      	ldrh	r3, [r7, #22]
 80061d0:	4313      	orrs	r3, r2
 80061d2:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	8afa      	ldrh	r2, [r7, #22]
 80061da:	60da      	str	r2, [r3, #12]
 80061dc:	e052      	b.n	8006284 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80061de:	2301      	movs	r3, #1
 80061e0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80061e4:	e04e      	b.n	8006284 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80061e6:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80061ea:	2b08      	cmp	r3, #8
 80061ec:	d827      	bhi.n	800623e <UART_SetConfig+0x506>
 80061ee:	a201      	add	r2, pc, #4	@ (adr r2, 80061f4 <UART_SetConfig+0x4bc>)
 80061f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061f4:	08006219 	.word	0x08006219
 80061f8:	08006221 	.word	0x08006221
 80061fc:	08006229 	.word	0x08006229
 8006200:	0800623f 	.word	0x0800623f
 8006204:	0800622f 	.word	0x0800622f
 8006208:	0800623f 	.word	0x0800623f
 800620c:	0800623f 	.word	0x0800623f
 8006210:	0800623f 	.word	0x0800623f
 8006214:	08006237 	.word	0x08006237
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006218:	f7fe fecc 	bl	8004fb4 <HAL_RCC_GetPCLK1Freq>
 800621c:	61f8      	str	r0, [r7, #28]
        break;
 800621e:	e014      	b.n	800624a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006220:	f7fe fede 	bl	8004fe0 <HAL_RCC_GetPCLK2Freq>
 8006224:	61f8      	str	r0, [r7, #28]
        break;
 8006226:	e010      	b.n	800624a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006228:	4b1e      	ldr	r3, [pc, #120]	@ (80062a4 <UART_SetConfig+0x56c>)
 800622a:	61fb      	str	r3, [r7, #28]
        break;
 800622c:	e00d      	b.n	800624a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800622e:	f7fe fe29 	bl	8004e84 <HAL_RCC_GetSysClockFreq>
 8006232:	61f8      	str	r0, [r7, #28]
        break;
 8006234:	e009      	b.n	800624a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006236:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800623a:	61fb      	str	r3, [r7, #28]
        break;
 800623c:	e005      	b.n	800624a <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 800623e:	2300      	movs	r3, #0
 8006240:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006242:	2301      	movs	r3, #1
 8006244:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8006248:	bf00      	nop
    }

    if (pclk != 0U)
 800624a:	69fb      	ldr	r3, [r7, #28]
 800624c:	2b00      	cmp	r3, #0
 800624e:	d019      	beq.n	8006284 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	685b      	ldr	r3, [r3, #4]
 8006254:	085a      	lsrs	r2, r3, #1
 8006256:	69fb      	ldr	r3, [r7, #28]
 8006258:	441a      	add	r2, r3
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	685b      	ldr	r3, [r3, #4]
 800625e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006262:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006264:	69bb      	ldr	r3, [r7, #24]
 8006266:	2b0f      	cmp	r3, #15
 8006268:	d909      	bls.n	800627e <UART_SetConfig+0x546>
 800626a:	69bb      	ldr	r3, [r7, #24]
 800626c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006270:	d205      	bcs.n	800627e <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006272:	69bb      	ldr	r3, [r7, #24]
 8006274:	b29a      	uxth	r2, r3
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	60da      	str	r2, [r3, #12]
 800627c:	e002      	b.n	8006284 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800627e:	2301      	movs	r3, #1
 8006280:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	2200      	movs	r2, #0
 8006288:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	2200      	movs	r2, #0
 800628e:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8006290:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8006294:	4618      	mov	r0, r3
 8006296:	3728      	adds	r7, #40	@ 0x28
 8006298:	46bd      	mov	sp, r7
 800629a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800629e:	bf00      	nop
 80062a0:	40008000 	.word	0x40008000
 80062a4:	00f42400 	.word	0x00f42400

080062a8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80062a8:	b480      	push	{r7}
 80062aa:	b083      	sub	sp, #12
 80062ac:	af00      	add	r7, sp, #0
 80062ae:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80062b4:	f003 0308 	and.w	r3, r3, #8
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d00a      	beq.n	80062d2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	685b      	ldr	r3, [r3, #4]
 80062c2:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	430a      	orrs	r2, r1
 80062d0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80062d6:	f003 0301 	and.w	r3, r3, #1
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d00a      	beq.n	80062f4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	685b      	ldr	r3, [r3, #4]
 80062e4:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	430a      	orrs	r2, r1
 80062f2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80062f8:	f003 0302 	and.w	r3, r3, #2
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d00a      	beq.n	8006316 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	685b      	ldr	r3, [r3, #4]
 8006306:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	430a      	orrs	r2, r1
 8006314:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800631a:	f003 0304 	and.w	r3, r3, #4
 800631e:	2b00      	cmp	r3, #0
 8006320:	d00a      	beq.n	8006338 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	685b      	ldr	r3, [r3, #4]
 8006328:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	430a      	orrs	r2, r1
 8006336:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800633c:	f003 0310 	and.w	r3, r3, #16
 8006340:	2b00      	cmp	r3, #0
 8006342:	d00a      	beq.n	800635a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	689b      	ldr	r3, [r3, #8]
 800634a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	430a      	orrs	r2, r1
 8006358:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800635e:	f003 0320 	and.w	r3, r3, #32
 8006362:	2b00      	cmp	r3, #0
 8006364:	d00a      	beq.n	800637c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	689b      	ldr	r3, [r3, #8]
 800636c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	430a      	orrs	r2, r1
 800637a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006380:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006384:	2b00      	cmp	r3, #0
 8006386:	d01a      	beq.n	80063be <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	685b      	ldr	r3, [r3, #4]
 800638e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	430a      	orrs	r2, r1
 800639c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80063a2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80063a6:	d10a      	bne.n	80063be <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	685b      	ldr	r3, [r3, #4]
 80063ae:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	430a      	orrs	r2, r1
 80063bc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80063c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d00a      	beq.n	80063e0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	685b      	ldr	r3, [r3, #4]
 80063d0:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	430a      	orrs	r2, r1
 80063de:	605a      	str	r2, [r3, #4]
  }
}
 80063e0:	bf00      	nop
 80063e2:	370c      	adds	r7, #12
 80063e4:	46bd      	mov	sp, r7
 80063e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ea:	4770      	bx	lr

080063ec <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80063ec:	b580      	push	{r7, lr}
 80063ee:	b098      	sub	sp, #96	@ 0x60
 80063f0:	af02      	add	r7, sp, #8
 80063f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	2200      	movs	r2, #0
 80063f8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80063fc:	f7fc fd94 	bl	8002f28 <HAL_GetTick>
 8006400:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	f003 0308 	and.w	r3, r3, #8
 800640c:	2b08      	cmp	r3, #8
 800640e:	d12e      	bne.n	800646e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006410:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006414:	9300      	str	r3, [sp, #0]
 8006416:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006418:	2200      	movs	r2, #0
 800641a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800641e:	6878      	ldr	r0, [r7, #4]
 8006420:	f000 f88c 	bl	800653c <UART_WaitOnFlagUntilTimeout>
 8006424:	4603      	mov	r3, r0
 8006426:	2b00      	cmp	r3, #0
 8006428:	d021      	beq.n	800646e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006430:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006432:	e853 3f00 	ldrex	r3, [r3]
 8006436:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006438:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800643a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800643e:	653b      	str	r3, [r7, #80]	@ 0x50
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	461a      	mov	r2, r3
 8006446:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006448:	647b      	str	r3, [r7, #68]	@ 0x44
 800644a:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800644c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800644e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006450:	e841 2300 	strex	r3, r2, [r1]
 8006454:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006456:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006458:	2b00      	cmp	r3, #0
 800645a:	d1e6      	bne.n	800642a <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	2220      	movs	r2, #32
 8006460:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	2200      	movs	r2, #0
 8006466:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800646a:	2303      	movs	r3, #3
 800646c:	e062      	b.n	8006534 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	f003 0304 	and.w	r3, r3, #4
 8006478:	2b04      	cmp	r3, #4
 800647a:	d149      	bne.n	8006510 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800647c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006480:	9300      	str	r3, [sp, #0]
 8006482:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006484:	2200      	movs	r2, #0
 8006486:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800648a:	6878      	ldr	r0, [r7, #4]
 800648c:	f000 f856 	bl	800653c <UART_WaitOnFlagUntilTimeout>
 8006490:	4603      	mov	r3, r0
 8006492:	2b00      	cmp	r3, #0
 8006494:	d03c      	beq.n	8006510 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800649c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800649e:	e853 3f00 	ldrex	r3, [r3]
 80064a2:	623b      	str	r3, [r7, #32]
   return(result);
 80064a4:	6a3b      	ldr	r3, [r7, #32]
 80064a6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80064aa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	461a      	mov	r2, r3
 80064b2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80064b4:	633b      	str	r3, [r7, #48]	@ 0x30
 80064b6:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064b8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80064ba:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80064bc:	e841 2300 	strex	r3, r2, [r1]
 80064c0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80064c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d1e6      	bne.n	8006496 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	3308      	adds	r3, #8
 80064ce:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064d0:	693b      	ldr	r3, [r7, #16]
 80064d2:	e853 3f00 	ldrex	r3, [r3]
 80064d6:	60fb      	str	r3, [r7, #12]
   return(result);
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	f023 0301 	bic.w	r3, r3, #1
 80064de:	64bb      	str	r3, [r7, #72]	@ 0x48
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	3308      	adds	r3, #8
 80064e6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80064e8:	61fa      	str	r2, [r7, #28]
 80064ea:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064ec:	69b9      	ldr	r1, [r7, #24]
 80064ee:	69fa      	ldr	r2, [r7, #28]
 80064f0:	e841 2300 	strex	r3, r2, [r1]
 80064f4:	617b      	str	r3, [r7, #20]
   return(result);
 80064f6:	697b      	ldr	r3, [r7, #20]
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d1e5      	bne.n	80064c8 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	2220      	movs	r2, #32
 8006500:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	2200      	movs	r2, #0
 8006508:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800650c:	2303      	movs	r3, #3
 800650e:	e011      	b.n	8006534 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	2220      	movs	r2, #32
 8006514:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	2220      	movs	r2, #32
 800651a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	2200      	movs	r2, #0
 8006522:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	2200      	movs	r2, #0
 8006528:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	2200      	movs	r2, #0
 800652e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8006532:	2300      	movs	r3, #0
}
 8006534:	4618      	mov	r0, r3
 8006536:	3758      	adds	r7, #88	@ 0x58
 8006538:	46bd      	mov	sp, r7
 800653a:	bd80      	pop	{r7, pc}

0800653c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800653c:	b580      	push	{r7, lr}
 800653e:	b084      	sub	sp, #16
 8006540:	af00      	add	r7, sp, #0
 8006542:	60f8      	str	r0, [r7, #12]
 8006544:	60b9      	str	r1, [r7, #8]
 8006546:	603b      	str	r3, [r7, #0]
 8006548:	4613      	mov	r3, r2
 800654a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800654c:	e04f      	b.n	80065ee <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800654e:	69bb      	ldr	r3, [r7, #24]
 8006550:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006554:	d04b      	beq.n	80065ee <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006556:	f7fc fce7 	bl	8002f28 <HAL_GetTick>
 800655a:	4602      	mov	r2, r0
 800655c:	683b      	ldr	r3, [r7, #0]
 800655e:	1ad3      	subs	r3, r2, r3
 8006560:	69ba      	ldr	r2, [r7, #24]
 8006562:	429a      	cmp	r2, r3
 8006564:	d302      	bcc.n	800656c <UART_WaitOnFlagUntilTimeout+0x30>
 8006566:	69bb      	ldr	r3, [r7, #24]
 8006568:	2b00      	cmp	r3, #0
 800656a:	d101      	bne.n	8006570 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800656c:	2303      	movs	r3, #3
 800656e:	e04e      	b.n	800660e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	f003 0304 	and.w	r3, r3, #4
 800657a:	2b00      	cmp	r3, #0
 800657c:	d037      	beq.n	80065ee <UART_WaitOnFlagUntilTimeout+0xb2>
 800657e:	68bb      	ldr	r3, [r7, #8]
 8006580:	2b80      	cmp	r3, #128	@ 0x80
 8006582:	d034      	beq.n	80065ee <UART_WaitOnFlagUntilTimeout+0xb2>
 8006584:	68bb      	ldr	r3, [r7, #8]
 8006586:	2b40      	cmp	r3, #64	@ 0x40
 8006588:	d031      	beq.n	80065ee <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	69db      	ldr	r3, [r3, #28]
 8006590:	f003 0308 	and.w	r3, r3, #8
 8006594:	2b08      	cmp	r3, #8
 8006596:	d110      	bne.n	80065ba <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	2208      	movs	r2, #8
 800659e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80065a0:	68f8      	ldr	r0, [r7, #12]
 80065a2:	f000 f838 	bl	8006616 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	2208      	movs	r2, #8
 80065aa:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	2200      	movs	r2, #0
 80065b2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 80065b6:	2301      	movs	r3, #1
 80065b8:	e029      	b.n	800660e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	69db      	ldr	r3, [r3, #28]
 80065c0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80065c4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80065c8:	d111      	bne.n	80065ee <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80065d2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80065d4:	68f8      	ldr	r0, [r7, #12]
 80065d6:	f000 f81e 	bl	8006616 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	2220      	movs	r2, #32
 80065de:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	2200      	movs	r2, #0
 80065e6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 80065ea:	2303      	movs	r3, #3
 80065ec:	e00f      	b.n	800660e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	69da      	ldr	r2, [r3, #28]
 80065f4:	68bb      	ldr	r3, [r7, #8]
 80065f6:	4013      	ands	r3, r2
 80065f8:	68ba      	ldr	r2, [r7, #8]
 80065fa:	429a      	cmp	r2, r3
 80065fc:	bf0c      	ite	eq
 80065fe:	2301      	moveq	r3, #1
 8006600:	2300      	movne	r3, #0
 8006602:	b2db      	uxtb	r3, r3
 8006604:	461a      	mov	r2, r3
 8006606:	79fb      	ldrb	r3, [r7, #7]
 8006608:	429a      	cmp	r2, r3
 800660a:	d0a0      	beq.n	800654e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800660c:	2300      	movs	r3, #0
}
 800660e:	4618      	mov	r0, r3
 8006610:	3710      	adds	r7, #16
 8006612:	46bd      	mov	sp, r7
 8006614:	bd80      	pop	{r7, pc}

08006616 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006616:	b480      	push	{r7}
 8006618:	b095      	sub	sp, #84	@ 0x54
 800661a:	af00      	add	r7, sp, #0
 800661c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006624:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006626:	e853 3f00 	ldrex	r3, [r3]
 800662a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800662c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800662e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006632:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	461a      	mov	r2, r3
 800663a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800663c:	643b      	str	r3, [r7, #64]	@ 0x40
 800663e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006640:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006642:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006644:	e841 2300 	strex	r3, r2, [r1]
 8006648:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800664a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800664c:	2b00      	cmp	r3, #0
 800664e:	d1e6      	bne.n	800661e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	3308      	adds	r3, #8
 8006656:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006658:	6a3b      	ldr	r3, [r7, #32]
 800665a:	e853 3f00 	ldrex	r3, [r3]
 800665e:	61fb      	str	r3, [r7, #28]
   return(result);
 8006660:	69fb      	ldr	r3, [r7, #28]
 8006662:	f023 0301 	bic.w	r3, r3, #1
 8006666:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	3308      	adds	r3, #8
 800666e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006670:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006672:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006674:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006676:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006678:	e841 2300 	strex	r3, r2, [r1]
 800667c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800667e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006680:	2b00      	cmp	r3, #0
 8006682:	d1e5      	bne.n	8006650 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006688:	2b01      	cmp	r3, #1
 800668a:	d118      	bne.n	80066be <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	e853 3f00 	ldrex	r3, [r3]
 8006698:	60bb      	str	r3, [r7, #8]
   return(result);
 800669a:	68bb      	ldr	r3, [r7, #8]
 800669c:	f023 0310 	bic.w	r3, r3, #16
 80066a0:	647b      	str	r3, [r7, #68]	@ 0x44
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	461a      	mov	r2, r3
 80066a8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80066aa:	61bb      	str	r3, [r7, #24]
 80066ac:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066ae:	6979      	ldr	r1, [r7, #20]
 80066b0:	69ba      	ldr	r2, [r7, #24]
 80066b2:	e841 2300 	strex	r3, r2, [r1]
 80066b6:	613b      	str	r3, [r7, #16]
   return(result);
 80066b8:	693b      	ldr	r3, [r7, #16]
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d1e6      	bne.n	800668c <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	2220      	movs	r2, #32
 80066c2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	2200      	movs	r2, #0
 80066ca:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	2200      	movs	r2, #0
 80066d0:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80066d2:	bf00      	nop
 80066d4:	3754      	adds	r7, #84	@ 0x54
 80066d6:	46bd      	mov	sp, r7
 80066d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066dc:	4770      	bx	lr

080066de <__cvt>:
 80066de:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80066e2:	ec57 6b10 	vmov	r6, r7, d0
 80066e6:	2f00      	cmp	r7, #0
 80066e8:	460c      	mov	r4, r1
 80066ea:	4619      	mov	r1, r3
 80066ec:	463b      	mov	r3, r7
 80066ee:	bfbb      	ittet	lt
 80066f0:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 80066f4:	461f      	movlt	r7, r3
 80066f6:	2300      	movge	r3, #0
 80066f8:	232d      	movlt	r3, #45	@ 0x2d
 80066fa:	700b      	strb	r3, [r1, #0]
 80066fc:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80066fe:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8006702:	4691      	mov	r9, r2
 8006704:	f023 0820 	bic.w	r8, r3, #32
 8006708:	bfbc      	itt	lt
 800670a:	4632      	movlt	r2, r6
 800670c:	4616      	movlt	r6, r2
 800670e:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8006712:	d005      	beq.n	8006720 <__cvt+0x42>
 8006714:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8006718:	d100      	bne.n	800671c <__cvt+0x3e>
 800671a:	3401      	adds	r4, #1
 800671c:	2102      	movs	r1, #2
 800671e:	e000      	b.n	8006722 <__cvt+0x44>
 8006720:	2103      	movs	r1, #3
 8006722:	ab03      	add	r3, sp, #12
 8006724:	9301      	str	r3, [sp, #4]
 8006726:	ab02      	add	r3, sp, #8
 8006728:	9300      	str	r3, [sp, #0]
 800672a:	ec47 6b10 	vmov	d0, r6, r7
 800672e:	4653      	mov	r3, sl
 8006730:	4622      	mov	r2, r4
 8006732:	f001 f961 	bl	80079f8 <_dtoa_r>
 8006736:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800673a:	4605      	mov	r5, r0
 800673c:	d119      	bne.n	8006772 <__cvt+0x94>
 800673e:	f019 0f01 	tst.w	r9, #1
 8006742:	d00e      	beq.n	8006762 <__cvt+0x84>
 8006744:	eb00 0904 	add.w	r9, r0, r4
 8006748:	2200      	movs	r2, #0
 800674a:	2300      	movs	r3, #0
 800674c:	4630      	mov	r0, r6
 800674e:	4639      	mov	r1, r7
 8006750:	f7fa f9ba 	bl	8000ac8 <__aeabi_dcmpeq>
 8006754:	b108      	cbz	r0, 800675a <__cvt+0x7c>
 8006756:	f8cd 900c 	str.w	r9, [sp, #12]
 800675a:	2230      	movs	r2, #48	@ 0x30
 800675c:	9b03      	ldr	r3, [sp, #12]
 800675e:	454b      	cmp	r3, r9
 8006760:	d31e      	bcc.n	80067a0 <__cvt+0xc2>
 8006762:	9b03      	ldr	r3, [sp, #12]
 8006764:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006766:	1b5b      	subs	r3, r3, r5
 8006768:	4628      	mov	r0, r5
 800676a:	6013      	str	r3, [r2, #0]
 800676c:	b004      	add	sp, #16
 800676e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006772:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8006776:	eb00 0904 	add.w	r9, r0, r4
 800677a:	d1e5      	bne.n	8006748 <__cvt+0x6a>
 800677c:	7803      	ldrb	r3, [r0, #0]
 800677e:	2b30      	cmp	r3, #48	@ 0x30
 8006780:	d10a      	bne.n	8006798 <__cvt+0xba>
 8006782:	2200      	movs	r2, #0
 8006784:	2300      	movs	r3, #0
 8006786:	4630      	mov	r0, r6
 8006788:	4639      	mov	r1, r7
 800678a:	f7fa f99d 	bl	8000ac8 <__aeabi_dcmpeq>
 800678e:	b918      	cbnz	r0, 8006798 <__cvt+0xba>
 8006790:	f1c4 0401 	rsb	r4, r4, #1
 8006794:	f8ca 4000 	str.w	r4, [sl]
 8006798:	f8da 3000 	ldr.w	r3, [sl]
 800679c:	4499      	add	r9, r3
 800679e:	e7d3      	b.n	8006748 <__cvt+0x6a>
 80067a0:	1c59      	adds	r1, r3, #1
 80067a2:	9103      	str	r1, [sp, #12]
 80067a4:	701a      	strb	r2, [r3, #0]
 80067a6:	e7d9      	b.n	800675c <__cvt+0x7e>

080067a8 <__exponent>:
 80067a8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80067aa:	2900      	cmp	r1, #0
 80067ac:	bfba      	itte	lt
 80067ae:	4249      	neglt	r1, r1
 80067b0:	232d      	movlt	r3, #45	@ 0x2d
 80067b2:	232b      	movge	r3, #43	@ 0x2b
 80067b4:	2909      	cmp	r1, #9
 80067b6:	7002      	strb	r2, [r0, #0]
 80067b8:	7043      	strb	r3, [r0, #1]
 80067ba:	dd29      	ble.n	8006810 <__exponent+0x68>
 80067bc:	f10d 0307 	add.w	r3, sp, #7
 80067c0:	461d      	mov	r5, r3
 80067c2:	270a      	movs	r7, #10
 80067c4:	461a      	mov	r2, r3
 80067c6:	fbb1 f6f7 	udiv	r6, r1, r7
 80067ca:	fb07 1416 	mls	r4, r7, r6, r1
 80067ce:	3430      	adds	r4, #48	@ 0x30
 80067d0:	f802 4c01 	strb.w	r4, [r2, #-1]
 80067d4:	460c      	mov	r4, r1
 80067d6:	2c63      	cmp	r4, #99	@ 0x63
 80067d8:	f103 33ff 	add.w	r3, r3, #4294967295
 80067dc:	4631      	mov	r1, r6
 80067de:	dcf1      	bgt.n	80067c4 <__exponent+0x1c>
 80067e0:	3130      	adds	r1, #48	@ 0x30
 80067e2:	1e94      	subs	r4, r2, #2
 80067e4:	f803 1c01 	strb.w	r1, [r3, #-1]
 80067e8:	1c41      	adds	r1, r0, #1
 80067ea:	4623      	mov	r3, r4
 80067ec:	42ab      	cmp	r3, r5
 80067ee:	d30a      	bcc.n	8006806 <__exponent+0x5e>
 80067f0:	f10d 0309 	add.w	r3, sp, #9
 80067f4:	1a9b      	subs	r3, r3, r2
 80067f6:	42ac      	cmp	r4, r5
 80067f8:	bf88      	it	hi
 80067fa:	2300      	movhi	r3, #0
 80067fc:	3302      	adds	r3, #2
 80067fe:	4403      	add	r3, r0
 8006800:	1a18      	subs	r0, r3, r0
 8006802:	b003      	add	sp, #12
 8006804:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006806:	f813 6b01 	ldrb.w	r6, [r3], #1
 800680a:	f801 6f01 	strb.w	r6, [r1, #1]!
 800680e:	e7ed      	b.n	80067ec <__exponent+0x44>
 8006810:	2330      	movs	r3, #48	@ 0x30
 8006812:	3130      	adds	r1, #48	@ 0x30
 8006814:	7083      	strb	r3, [r0, #2]
 8006816:	70c1      	strb	r1, [r0, #3]
 8006818:	1d03      	adds	r3, r0, #4
 800681a:	e7f1      	b.n	8006800 <__exponent+0x58>

0800681c <_printf_float>:
 800681c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006820:	b08d      	sub	sp, #52	@ 0x34
 8006822:	460c      	mov	r4, r1
 8006824:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8006828:	4616      	mov	r6, r2
 800682a:	461f      	mov	r7, r3
 800682c:	4605      	mov	r5, r0
 800682e:	f000 ffdb 	bl	80077e8 <_localeconv_r>
 8006832:	6803      	ldr	r3, [r0, #0]
 8006834:	9304      	str	r3, [sp, #16]
 8006836:	4618      	mov	r0, r3
 8006838:	f7f9 fd1a 	bl	8000270 <strlen>
 800683c:	2300      	movs	r3, #0
 800683e:	930a      	str	r3, [sp, #40]	@ 0x28
 8006840:	f8d8 3000 	ldr.w	r3, [r8]
 8006844:	9005      	str	r0, [sp, #20]
 8006846:	3307      	adds	r3, #7
 8006848:	f023 0307 	bic.w	r3, r3, #7
 800684c:	f103 0208 	add.w	r2, r3, #8
 8006850:	f894 a018 	ldrb.w	sl, [r4, #24]
 8006854:	f8d4 b000 	ldr.w	fp, [r4]
 8006858:	f8c8 2000 	str.w	r2, [r8]
 800685c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006860:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8006864:	9307      	str	r3, [sp, #28]
 8006866:	f8cd 8018 	str.w	r8, [sp, #24]
 800686a:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800686e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006872:	4b9c      	ldr	r3, [pc, #624]	@ (8006ae4 <_printf_float+0x2c8>)
 8006874:	f04f 32ff 	mov.w	r2, #4294967295
 8006878:	f7fa f958 	bl	8000b2c <__aeabi_dcmpun>
 800687c:	bb70      	cbnz	r0, 80068dc <_printf_float+0xc0>
 800687e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006882:	4b98      	ldr	r3, [pc, #608]	@ (8006ae4 <_printf_float+0x2c8>)
 8006884:	f04f 32ff 	mov.w	r2, #4294967295
 8006888:	f7fa f932 	bl	8000af0 <__aeabi_dcmple>
 800688c:	bb30      	cbnz	r0, 80068dc <_printf_float+0xc0>
 800688e:	2200      	movs	r2, #0
 8006890:	2300      	movs	r3, #0
 8006892:	4640      	mov	r0, r8
 8006894:	4649      	mov	r1, r9
 8006896:	f7fa f921 	bl	8000adc <__aeabi_dcmplt>
 800689a:	b110      	cbz	r0, 80068a2 <_printf_float+0x86>
 800689c:	232d      	movs	r3, #45	@ 0x2d
 800689e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80068a2:	4a91      	ldr	r2, [pc, #580]	@ (8006ae8 <_printf_float+0x2cc>)
 80068a4:	4b91      	ldr	r3, [pc, #580]	@ (8006aec <_printf_float+0x2d0>)
 80068a6:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80068aa:	bf8c      	ite	hi
 80068ac:	4690      	movhi	r8, r2
 80068ae:	4698      	movls	r8, r3
 80068b0:	2303      	movs	r3, #3
 80068b2:	6123      	str	r3, [r4, #16]
 80068b4:	f02b 0304 	bic.w	r3, fp, #4
 80068b8:	6023      	str	r3, [r4, #0]
 80068ba:	f04f 0900 	mov.w	r9, #0
 80068be:	9700      	str	r7, [sp, #0]
 80068c0:	4633      	mov	r3, r6
 80068c2:	aa0b      	add	r2, sp, #44	@ 0x2c
 80068c4:	4621      	mov	r1, r4
 80068c6:	4628      	mov	r0, r5
 80068c8:	f000 f9d2 	bl	8006c70 <_printf_common>
 80068cc:	3001      	adds	r0, #1
 80068ce:	f040 808d 	bne.w	80069ec <_printf_float+0x1d0>
 80068d2:	f04f 30ff 	mov.w	r0, #4294967295
 80068d6:	b00d      	add	sp, #52	@ 0x34
 80068d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80068dc:	4642      	mov	r2, r8
 80068de:	464b      	mov	r3, r9
 80068e0:	4640      	mov	r0, r8
 80068e2:	4649      	mov	r1, r9
 80068e4:	f7fa f922 	bl	8000b2c <__aeabi_dcmpun>
 80068e8:	b140      	cbz	r0, 80068fc <_printf_float+0xe0>
 80068ea:	464b      	mov	r3, r9
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	bfbc      	itt	lt
 80068f0:	232d      	movlt	r3, #45	@ 0x2d
 80068f2:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80068f6:	4a7e      	ldr	r2, [pc, #504]	@ (8006af0 <_printf_float+0x2d4>)
 80068f8:	4b7e      	ldr	r3, [pc, #504]	@ (8006af4 <_printf_float+0x2d8>)
 80068fa:	e7d4      	b.n	80068a6 <_printf_float+0x8a>
 80068fc:	6863      	ldr	r3, [r4, #4]
 80068fe:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8006902:	9206      	str	r2, [sp, #24]
 8006904:	1c5a      	adds	r2, r3, #1
 8006906:	d13b      	bne.n	8006980 <_printf_float+0x164>
 8006908:	2306      	movs	r3, #6
 800690a:	6063      	str	r3, [r4, #4]
 800690c:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8006910:	2300      	movs	r3, #0
 8006912:	6022      	str	r2, [r4, #0]
 8006914:	9303      	str	r3, [sp, #12]
 8006916:	ab0a      	add	r3, sp, #40	@ 0x28
 8006918:	e9cd a301 	strd	sl, r3, [sp, #4]
 800691c:	ab09      	add	r3, sp, #36	@ 0x24
 800691e:	9300      	str	r3, [sp, #0]
 8006920:	6861      	ldr	r1, [r4, #4]
 8006922:	ec49 8b10 	vmov	d0, r8, r9
 8006926:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800692a:	4628      	mov	r0, r5
 800692c:	f7ff fed7 	bl	80066de <__cvt>
 8006930:	9b06      	ldr	r3, [sp, #24]
 8006932:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8006934:	2b47      	cmp	r3, #71	@ 0x47
 8006936:	4680      	mov	r8, r0
 8006938:	d129      	bne.n	800698e <_printf_float+0x172>
 800693a:	1cc8      	adds	r0, r1, #3
 800693c:	db02      	blt.n	8006944 <_printf_float+0x128>
 800693e:	6863      	ldr	r3, [r4, #4]
 8006940:	4299      	cmp	r1, r3
 8006942:	dd41      	ble.n	80069c8 <_printf_float+0x1ac>
 8006944:	f1aa 0a02 	sub.w	sl, sl, #2
 8006948:	fa5f fa8a 	uxtb.w	sl, sl
 800694c:	3901      	subs	r1, #1
 800694e:	4652      	mov	r2, sl
 8006950:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8006954:	9109      	str	r1, [sp, #36]	@ 0x24
 8006956:	f7ff ff27 	bl	80067a8 <__exponent>
 800695a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800695c:	1813      	adds	r3, r2, r0
 800695e:	2a01      	cmp	r2, #1
 8006960:	4681      	mov	r9, r0
 8006962:	6123      	str	r3, [r4, #16]
 8006964:	dc02      	bgt.n	800696c <_printf_float+0x150>
 8006966:	6822      	ldr	r2, [r4, #0]
 8006968:	07d2      	lsls	r2, r2, #31
 800696a:	d501      	bpl.n	8006970 <_printf_float+0x154>
 800696c:	3301      	adds	r3, #1
 800696e:	6123      	str	r3, [r4, #16]
 8006970:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8006974:	2b00      	cmp	r3, #0
 8006976:	d0a2      	beq.n	80068be <_printf_float+0xa2>
 8006978:	232d      	movs	r3, #45	@ 0x2d
 800697a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800697e:	e79e      	b.n	80068be <_printf_float+0xa2>
 8006980:	9a06      	ldr	r2, [sp, #24]
 8006982:	2a47      	cmp	r2, #71	@ 0x47
 8006984:	d1c2      	bne.n	800690c <_printf_float+0xf0>
 8006986:	2b00      	cmp	r3, #0
 8006988:	d1c0      	bne.n	800690c <_printf_float+0xf0>
 800698a:	2301      	movs	r3, #1
 800698c:	e7bd      	b.n	800690a <_printf_float+0xee>
 800698e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8006992:	d9db      	bls.n	800694c <_printf_float+0x130>
 8006994:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8006998:	d118      	bne.n	80069cc <_printf_float+0x1b0>
 800699a:	2900      	cmp	r1, #0
 800699c:	6863      	ldr	r3, [r4, #4]
 800699e:	dd0b      	ble.n	80069b8 <_printf_float+0x19c>
 80069a0:	6121      	str	r1, [r4, #16]
 80069a2:	b913      	cbnz	r3, 80069aa <_printf_float+0x18e>
 80069a4:	6822      	ldr	r2, [r4, #0]
 80069a6:	07d0      	lsls	r0, r2, #31
 80069a8:	d502      	bpl.n	80069b0 <_printf_float+0x194>
 80069aa:	3301      	adds	r3, #1
 80069ac:	440b      	add	r3, r1
 80069ae:	6123      	str	r3, [r4, #16]
 80069b0:	65a1      	str	r1, [r4, #88]	@ 0x58
 80069b2:	f04f 0900 	mov.w	r9, #0
 80069b6:	e7db      	b.n	8006970 <_printf_float+0x154>
 80069b8:	b913      	cbnz	r3, 80069c0 <_printf_float+0x1a4>
 80069ba:	6822      	ldr	r2, [r4, #0]
 80069bc:	07d2      	lsls	r2, r2, #31
 80069be:	d501      	bpl.n	80069c4 <_printf_float+0x1a8>
 80069c0:	3302      	adds	r3, #2
 80069c2:	e7f4      	b.n	80069ae <_printf_float+0x192>
 80069c4:	2301      	movs	r3, #1
 80069c6:	e7f2      	b.n	80069ae <_printf_float+0x192>
 80069c8:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80069cc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80069ce:	4299      	cmp	r1, r3
 80069d0:	db05      	blt.n	80069de <_printf_float+0x1c2>
 80069d2:	6823      	ldr	r3, [r4, #0]
 80069d4:	6121      	str	r1, [r4, #16]
 80069d6:	07d8      	lsls	r0, r3, #31
 80069d8:	d5ea      	bpl.n	80069b0 <_printf_float+0x194>
 80069da:	1c4b      	adds	r3, r1, #1
 80069dc:	e7e7      	b.n	80069ae <_printf_float+0x192>
 80069de:	2900      	cmp	r1, #0
 80069e0:	bfd4      	ite	le
 80069e2:	f1c1 0202 	rsble	r2, r1, #2
 80069e6:	2201      	movgt	r2, #1
 80069e8:	4413      	add	r3, r2
 80069ea:	e7e0      	b.n	80069ae <_printf_float+0x192>
 80069ec:	6823      	ldr	r3, [r4, #0]
 80069ee:	055a      	lsls	r2, r3, #21
 80069f0:	d407      	bmi.n	8006a02 <_printf_float+0x1e6>
 80069f2:	6923      	ldr	r3, [r4, #16]
 80069f4:	4642      	mov	r2, r8
 80069f6:	4631      	mov	r1, r6
 80069f8:	4628      	mov	r0, r5
 80069fa:	47b8      	blx	r7
 80069fc:	3001      	adds	r0, #1
 80069fe:	d12b      	bne.n	8006a58 <_printf_float+0x23c>
 8006a00:	e767      	b.n	80068d2 <_printf_float+0xb6>
 8006a02:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8006a06:	f240 80dd 	bls.w	8006bc4 <_printf_float+0x3a8>
 8006a0a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8006a0e:	2200      	movs	r2, #0
 8006a10:	2300      	movs	r3, #0
 8006a12:	f7fa f859 	bl	8000ac8 <__aeabi_dcmpeq>
 8006a16:	2800      	cmp	r0, #0
 8006a18:	d033      	beq.n	8006a82 <_printf_float+0x266>
 8006a1a:	4a37      	ldr	r2, [pc, #220]	@ (8006af8 <_printf_float+0x2dc>)
 8006a1c:	2301      	movs	r3, #1
 8006a1e:	4631      	mov	r1, r6
 8006a20:	4628      	mov	r0, r5
 8006a22:	47b8      	blx	r7
 8006a24:	3001      	adds	r0, #1
 8006a26:	f43f af54 	beq.w	80068d2 <_printf_float+0xb6>
 8006a2a:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8006a2e:	4543      	cmp	r3, r8
 8006a30:	db02      	blt.n	8006a38 <_printf_float+0x21c>
 8006a32:	6823      	ldr	r3, [r4, #0]
 8006a34:	07d8      	lsls	r0, r3, #31
 8006a36:	d50f      	bpl.n	8006a58 <_printf_float+0x23c>
 8006a38:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006a3c:	4631      	mov	r1, r6
 8006a3e:	4628      	mov	r0, r5
 8006a40:	47b8      	blx	r7
 8006a42:	3001      	adds	r0, #1
 8006a44:	f43f af45 	beq.w	80068d2 <_printf_float+0xb6>
 8006a48:	f04f 0900 	mov.w	r9, #0
 8006a4c:	f108 38ff 	add.w	r8, r8, #4294967295
 8006a50:	f104 0a1a 	add.w	sl, r4, #26
 8006a54:	45c8      	cmp	r8, r9
 8006a56:	dc09      	bgt.n	8006a6c <_printf_float+0x250>
 8006a58:	6823      	ldr	r3, [r4, #0]
 8006a5a:	079b      	lsls	r3, r3, #30
 8006a5c:	f100 8103 	bmi.w	8006c66 <_printf_float+0x44a>
 8006a60:	68e0      	ldr	r0, [r4, #12]
 8006a62:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006a64:	4298      	cmp	r0, r3
 8006a66:	bfb8      	it	lt
 8006a68:	4618      	movlt	r0, r3
 8006a6a:	e734      	b.n	80068d6 <_printf_float+0xba>
 8006a6c:	2301      	movs	r3, #1
 8006a6e:	4652      	mov	r2, sl
 8006a70:	4631      	mov	r1, r6
 8006a72:	4628      	mov	r0, r5
 8006a74:	47b8      	blx	r7
 8006a76:	3001      	adds	r0, #1
 8006a78:	f43f af2b 	beq.w	80068d2 <_printf_float+0xb6>
 8006a7c:	f109 0901 	add.w	r9, r9, #1
 8006a80:	e7e8      	b.n	8006a54 <_printf_float+0x238>
 8006a82:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	dc39      	bgt.n	8006afc <_printf_float+0x2e0>
 8006a88:	4a1b      	ldr	r2, [pc, #108]	@ (8006af8 <_printf_float+0x2dc>)
 8006a8a:	2301      	movs	r3, #1
 8006a8c:	4631      	mov	r1, r6
 8006a8e:	4628      	mov	r0, r5
 8006a90:	47b8      	blx	r7
 8006a92:	3001      	adds	r0, #1
 8006a94:	f43f af1d 	beq.w	80068d2 <_printf_float+0xb6>
 8006a98:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8006a9c:	ea59 0303 	orrs.w	r3, r9, r3
 8006aa0:	d102      	bne.n	8006aa8 <_printf_float+0x28c>
 8006aa2:	6823      	ldr	r3, [r4, #0]
 8006aa4:	07d9      	lsls	r1, r3, #31
 8006aa6:	d5d7      	bpl.n	8006a58 <_printf_float+0x23c>
 8006aa8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006aac:	4631      	mov	r1, r6
 8006aae:	4628      	mov	r0, r5
 8006ab0:	47b8      	blx	r7
 8006ab2:	3001      	adds	r0, #1
 8006ab4:	f43f af0d 	beq.w	80068d2 <_printf_float+0xb6>
 8006ab8:	f04f 0a00 	mov.w	sl, #0
 8006abc:	f104 0b1a 	add.w	fp, r4, #26
 8006ac0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006ac2:	425b      	negs	r3, r3
 8006ac4:	4553      	cmp	r3, sl
 8006ac6:	dc01      	bgt.n	8006acc <_printf_float+0x2b0>
 8006ac8:	464b      	mov	r3, r9
 8006aca:	e793      	b.n	80069f4 <_printf_float+0x1d8>
 8006acc:	2301      	movs	r3, #1
 8006ace:	465a      	mov	r2, fp
 8006ad0:	4631      	mov	r1, r6
 8006ad2:	4628      	mov	r0, r5
 8006ad4:	47b8      	blx	r7
 8006ad6:	3001      	adds	r0, #1
 8006ad8:	f43f aefb 	beq.w	80068d2 <_printf_float+0xb6>
 8006adc:	f10a 0a01 	add.w	sl, sl, #1
 8006ae0:	e7ee      	b.n	8006ac0 <_printf_float+0x2a4>
 8006ae2:	bf00      	nop
 8006ae4:	7fefffff 	.word	0x7fefffff
 8006ae8:	0800b458 	.word	0x0800b458
 8006aec:	0800b454 	.word	0x0800b454
 8006af0:	0800b460 	.word	0x0800b460
 8006af4:	0800b45c 	.word	0x0800b45c
 8006af8:	0800b464 	.word	0x0800b464
 8006afc:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006afe:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8006b02:	4553      	cmp	r3, sl
 8006b04:	bfa8      	it	ge
 8006b06:	4653      	movge	r3, sl
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	4699      	mov	r9, r3
 8006b0c:	dc36      	bgt.n	8006b7c <_printf_float+0x360>
 8006b0e:	f04f 0b00 	mov.w	fp, #0
 8006b12:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006b16:	f104 021a 	add.w	r2, r4, #26
 8006b1a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006b1c:	9306      	str	r3, [sp, #24]
 8006b1e:	eba3 0309 	sub.w	r3, r3, r9
 8006b22:	455b      	cmp	r3, fp
 8006b24:	dc31      	bgt.n	8006b8a <_printf_float+0x36e>
 8006b26:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006b28:	459a      	cmp	sl, r3
 8006b2a:	dc3a      	bgt.n	8006ba2 <_printf_float+0x386>
 8006b2c:	6823      	ldr	r3, [r4, #0]
 8006b2e:	07da      	lsls	r2, r3, #31
 8006b30:	d437      	bmi.n	8006ba2 <_printf_float+0x386>
 8006b32:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006b34:	ebaa 0903 	sub.w	r9, sl, r3
 8006b38:	9b06      	ldr	r3, [sp, #24]
 8006b3a:	ebaa 0303 	sub.w	r3, sl, r3
 8006b3e:	4599      	cmp	r9, r3
 8006b40:	bfa8      	it	ge
 8006b42:	4699      	movge	r9, r3
 8006b44:	f1b9 0f00 	cmp.w	r9, #0
 8006b48:	dc33      	bgt.n	8006bb2 <_printf_float+0x396>
 8006b4a:	f04f 0800 	mov.w	r8, #0
 8006b4e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006b52:	f104 0b1a 	add.w	fp, r4, #26
 8006b56:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006b58:	ebaa 0303 	sub.w	r3, sl, r3
 8006b5c:	eba3 0309 	sub.w	r3, r3, r9
 8006b60:	4543      	cmp	r3, r8
 8006b62:	f77f af79 	ble.w	8006a58 <_printf_float+0x23c>
 8006b66:	2301      	movs	r3, #1
 8006b68:	465a      	mov	r2, fp
 8006b6a:	4631      	mov	r1, r6
 8006b6c:	4628      	mov	r0, r5
 8006b6e:	47b8      	blx	r7
 8006b70:	3001      	adds	r0, #1
 8006b72:	f43f aeae 	beq.w	80068d2 <_printf_float+0xb6>
 8006b76:	f108 0801 	add.w	r8, r8, #1
 8006b7a:	e7ec      	b.n	8006b56 <_printf_float+0x33a>
 8006b7c:	4642      	mov	r2, r8
 8006b7e:	4631      	mov	r1, r6
 8006b80:	4628      	mov	r0, r5
 8006b82:	47b8      	blx	r7
 8006b84:	3001      	adds	r0, #1
 8006b86:	d1c2      	bne.n	8006b0e <_printf_float+0x2f2>
 8006b88:	e6a3      	b.n	80068d2 <_printf_float+0xb6>
 8006b8a:	2301      	movs	r3, #1
 8006b8c:	4631      	mov	r1, r6
 8006b8e:	4628      	mov	r0, r5
 8006b90:	9206      	str	r2, [sp, #24]
 8006b92:	47b8      	blx	r7
 8006b94:	3001      	adds	r0, #1
 8006b96:	f43f ae9c 	beq.w	80068d2 <_printf_float+0xb6>
 8006b9a:	9a06      	ldr	r2, [sp, #24]
 8006b9c:	f10b 0b01 	add.w	fp, fp, #1
 8006ba0:	e7bb      	b.n	8006b1a <_printf_float+0x2fe>
 8006ba2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006ba6:	4631      	mov	r1, r6
 8006ba8:	4628      	mov	r0, r5
 8006baa:	47b8      	blx	r7
 8006bac:	3001      	adds	r0, #1
 8006bae:	d1c0      	bne.n	8006b32 <_printf_float+0x316>
 8006bb0:	e68f      	b.n	80068d2 <_printf_float+0xb6>
 8006bb2:	9a06      	ldr	r2, [sp, #24]
 8006bb4:	464b      	mov	r3, r9
 8006bb6:	4442      	add	r2, r8
 8006bb8:	4631      	mov	r1, r6
 8006bba:	4628      	mov	r0, r5
 8006bbc:	47b8      	blx	r7
 8006bbe:	3001      	adds	r0, #1
 8006bc0:	d1c3      	bne.n	8006b4a <_printf_float+0x32e>
 8006bc2:	e686      	b.n	80068d2 <_printf_float+0xb6>
 8006bc4:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8006bc8:	f1ba 0f01 	cmp.w	sl, #1
 8006bcc:	dc01      	bgt.n	8006bd2 <_printf_float+0x3b6>
 8006bce:	07db      	lsls	r3, r3, #31
 8006bd0:	d536      	bpl.n	8006c40 <_printf_float+0x424>
 8006bd2:	2301      	movs	r3, #1
 8006bd4:	4642      	mov	r2, r8
 8006bd6:	4631      	mov	r1, r6
 8006bd8:	4628      	mov	r0, r5
 8006bda:	47b8      	blx	r7
 8006bdc:	3001      	adds	r0, #1
 8006bde:	f43f ae78 	beq.w	80068d2 <_printf_float+0xb6>
 8006be2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006be6:	4631      	mov	r1, r6
 8006be8:	4628      	mov	r0, r5
 8006bea:	47b8      	blx	r7
 8006bec:	3001      	adds	r0, #1
 8006bee:	f43f ae70 	beq.w	80068d2 <_printf_float+0xb6>
 8006bf2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8006bf6:	2200      	movs	r2, #0
 8006bf8:	2300      	movs	r3, #0
 8006bfa:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006bfe:	f7f9 ff63 	bl	8000ac8 <__aeabi_dcmpeq>
 8006c02:	b9c0      	cbnz	r0, 8006c36 <_printf_float+0x41a>
 8006c04:	4653      	mov	r3, sl
 8006c06:	f108 0201 	add.w	r2, r8, #1
 8006c0a:	4631      	mov	r1, r6
 8006c0c:	4628      	mov	r0, r5
 8006c0e:	47b8      	blx	r7
 8006c10:	3001      	adds	r0, #1
 8006c12:	d10c      	bne.n	8006c2e <_printf_float+0x412>
 8006c14:	e65d      	b.n	80068d2 <_printf_float+0xb6>
 8006c16:	2301      	movs	r3, #1
 8006c18:	465a      	mov	r2, fp
 8006c1a:	4631      	mov	r1, r6
 8006c1c:	4628      	mov	r0, r5
 8006c1e:	47b8      	blx	r7
 8006c20:	3001      	adds	r0, #1
 8006c22:	f43f ae56 	beq.w	80068d2 <_printf_float+0xb6>
 8006c26:	f108 0801 	add.w	r8, r8, #1
 8006c2a:	45d0      	cmp	r8, sl
 8006c2c:	dbf3      	blt.n	8006c16 <_printf_float+0x3fa>
 8006c2e:	464b      	mov	r3, r9
 8006c30:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8006c34:	e6df      	b.n	80069f6 <_printf_float+0x1da>
 8006c36:	f04f 0800 	mov.w	r8, #0
 8006c3a:	f104 0b1a 	add.w	fp, r4, #26
 8006c3e:	e7f4      	b.n	8006c2a <_printf_float+0x40e>
 8006c40:	2301      	movs	r3, #1
 8006c42:	4642      	mov	r2, r8
 8006c44:	e7e1      	b.n	8006c0a <_printf_float+0x3ee>
 8006c46:	2301      	movs	r3, #1
 8006c48:	464a      	mov	r2, r9
 8006c4a:	4631      	mov	r1, r6
 8006c4c:	4628      	mov	r0, r5
 8006c4e:	47b8      	blx	r7
 8006c50:	3001      	adds	r0, #1
 8006c52:	f43f ae3e 	beq.w	80068d2 <_printf_float+0xb6>
 8006c56:	f108 0801 	add.w	r8, r8, #1
 8006c5a:	68e3      	ldr	r3, [r4, #12]
 8006c5c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8006c5e:	1a5b      	subs	r3, r3, r1
 8006c60:	4543      	cmp	r3, r8
 8006c62:	dcf0      	bgt.n	8006c46 <_printf_float+0x42a>
 8006c64:	e6fc      	b.n	8006a60 <_printf_float+0x244>
 8006c66:	f04f 0800 	mov.w	r8, #0
 8006c6a:	f104 0919 	add.w	r9, r4, #25
 8006c6e:	e7f4      	b.n	8006c5a <_printf_float+0x43e>

08006c70 <_printf_common>:
 8006c70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006c74:	4616      	mov	r6, r2
 8006c76:	4698      	mov	r8, r3
 8006c78:	688a      	ldr	r2, [r1, #8]
 8006c7a:	690b      	ldr	r3, [r1, #16]
 8006c7c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006c80:	4293      	cmp	r3, r2
 8006c82:	bfb8      	it	lt
 8006c84:	4613      	movlt	r3, r2
 8006c86:	6033      	str	r3, [r6, #0]
 8006c88:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006c8c:	4607      	mov	r7, r0
 8006c8e:	460c      	mov	r4, r1
 8006c90:	b10a      	cbz	r2, 8006c96 <_printf_common+0x26>
 8006c92:	3301      	adds	r3, #1
 8006c94:	6033      	str	r3, [r6, #0]
 8006c96:	6823      	ldr	r3, [r4, #0]
 8006c98:	0699      	lsls	r1, r3, #26
 8006c9a:	bf42      	ittt	mi
 8006c9c:	6833      	ldrmi	r3, [r6, #0]
 8006c9e:	3302      	addmi	r3, #2
 8006ca0:	6033      	strmi	r3, [r6, #0]
 8006ca2:	6825      	ldr	r5, [r4, #0]
 8006ca4:	f015 0506 	ands.w	r5, r5, #6
 8006ca8:	d106      	bne.n	8006cb8 <_printf_common+0x48>
 8006caa:	f104 0a19 	add.w	sl, r4, #25
 8006cae:	68e3      	ldr	r3, [r4, #12]
 8006cb0:	6832      	ldr	r2, [r6, #0]
 8006cb2:	1a9b      	subs	r3, r3, r2
 8006cb4:	42ab      	cmp	r3, r5
 8006cb6:	dc26      	bgt.n	8006d06 <_printf_common+0x96>
 8006cb8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006cbc:	6822      	ldr	r2, [r4, #0]
 8006cbe:	3b00      	subs	r3, #0
 8006cc0:	bf18      	it	ne
 8006cc2:	2301      	movne	r3, #1
 8006cc4:	0692      	lsls	r2, r2, #26
 8006cc6:	d42b      	bmi.n	8006d20 <_printf_common+0xb0>
 8006cc8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006ccc:	4641      	mov	r1, r8
 8006cce:	4638      	mov	r0, r7
 8006cd0:	47c8      	blx	r9
 8006cd2:	3001      	adds	r0, #1
 8006cd4:	d01e      	beq.n	8006d14 <_printf_common+0xa4>
 8006cd6:	6823      	ldr	r3, [r4, #0]
 8006cd8:	6922      	ldr	r2, [r4, #16]
 8006cda:	f003 0306 	and.w	r3, r3, #6
 8006cde:	2b04      	cmp	r3, #4
 8006ce0:	bf02      	ittt	eq
 8006ce2:	68e5      	ldreq	r5, [r4, #12]
 8006ce4:	6833      	ldreq	r3, [r6, #0]
 8006ce6:	1aed      	subeq	r5, r5, r3
 8006ce8:	68a3      	ldr	r3, [r4, #8]
 8006cea:	bf0c      	ite	eq
 8006cec:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006cf0:	2500      	movne	r5, #0
 8006cf2:	4293      	cmp	r3, r2
 8006cf4:	bfc4      	itt	gt
 8006cf6:	1a9b      	subgt	r3, r3, r2
 8006cf8:	18ed      	addgt	r5, r5, r3
 8006cfa:	2600      	movs	r6, #0
 8006cfc:	341a      	adds	r4, #26
 8006cfe:	42b5      	cmp	r5, r6
 8006d00:	d11a      	bne.n	8006d38 <_printf_common+0xc8>
 8006d02:	2000      	movs	r0, #0
 8006d04:	e008      	b.n	8006d18 <_printf_common+0xa8>
 8006d06:	2301      	movs	r3, #1
 8006d08:	4652      	mov	r2, sl
 8006d0a:	4641      	mov	r1, r8
 8006d0c:	4638      	mov	r0, r7
 8006d0e:	47c8      	blx	r9
 8006d10:	3001      	adds	r0, #1
 8006d12:	d103      	bne.n	8006d1c <_printf_common+0xac>
 8006d14:	f04f 30ff 	mov.w	r0, #4294967295
 8006d18:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006d1c:	3501      	adds	r5, #1
 8006d1e:	e7c6      	b.n	8006cae <_printf_common+0x3e>
 8006d20:	18e1      	adds	r1, r4, r3
 8006d22:	1c5a      	adds	r2, r3, #1
 8006d24:	2030      	movs	r0, #48	@ 0x30
 8006d26:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8006d2a:	4422      	add	r2, r4
 8006d2c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006d30:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006d34:	3302      	adds	r3, #2
 8006d36:	e7c7      	b.n	8006cc8 <_printf_common+0x58>
 8006d38:	2301      	movs	r3, #1
 8006d3a:	4622      	mov	r2, r4
 8006d3c:	4641      	mov	r1, r8
 8006d3e:	4638      	mov	r0, r7
 8006d40:	47c8      	blx	r9
 8006d42:	3001      	adds	r0, #1
 8006d44:	d0e6      	beq.n	8006d14 <_printf_common+0xa4>
 8006d46:	3601      	adds	r6, #1
 8006d48:	e7d9      	b.n	8006cfe <_printf_common+0x8e>
	...

08006d4c <_printf_i>:
 8006d4c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006d50:	7e0f      	ldrb	r7, [r1, #24]
 8006d52:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006d54:	2f78      	cmp	r7, #120	@ 0x78
 8006d56:	4691      	mov	r9, r2
 8006d58:	4680      	mov	r8, r0
 8006d5a:	460c      	mov	r4, r1
 8006d5c:	469a      	mov	sl, r3
 8006d5e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8006d62:	d807      	bhi.n	8006d74 <_printf_i+0x28>
 8006d64:	2f62      	cmp	r7, #98	@ 0x62
 8006d66:	d80a      	bhi.n	8006d7e <_printf_i+0x32>
 8006d68:	2f00      	cmp	r7, #0
 8006d6a:	f000 80d1 	beq.w	8006f10 <_printf_i+0x1c4>
 8006d6e:	2f58      	cmp	r7, #88	@ 0x58
 8006d70:	f000 80b8 	beq.w	8006ee4 <_printf_i+0x198>
 8006d74:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006d78:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006d7c:	e03a      	b.n	8006df4 <_printf_i+0xa8>
 8006d7e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8006d82:	2b15      	cmp	r3, #21
 8006d84:	d8f6      	bhi.n	8006d74 <_printf_i+0x28>
 8006d86:	a101      	add	r1, pc, #4	@ (adr r1, 8006d8c <_printf_i+0x40>)
 8006d88:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006d8c:	08006de5 	.word	0x08006de5
 8006d90:	08006df9 	.word	0x08006df9
 8006d94:	08006d75 	.word	0x08006d75
 8006d98:	08006d75 	.word	0x08006d75
 8006d9c:	08006d75 	.word	0x08006d75
 8006da0:	08006d75 	.word	0x08006d75
 8006da4:	08006df9 	.word	0x08006df9
 8006da8:	08006d75 	.word	0x08006d75
 8006dac:	08006d75 	.word	0x08006d75
 8006db0:	08006d75 	.word	0x08006d75
 8006db4:	08006d75 	.word	0x08006d75
 8006db8:	08006ef7 	.word	0x08006ef7
 8006dbc:	08006e23 	.word	0x08006e23
 8006dc0:	08006eb1 	.word	0x08006eb1
 8006dc4:	08006d75 	.word	0x08006d75
 8006dc8:	08006d75 	.word	0x08006d75
 8006dcc:	08006f19 	.word	0x08006f19
 8006dd0:	08006d75 	.word	0x08006d75
 8006dd4:	08006e23 	.word	0x08006e23
 8006dd8:	08006d75 	.word	0x08006d75
 8006ddc:	08006d75 	.word	0x08006d75
 8006de0:	08006eb9 	.word	0x08006eb9
 8006de4:	6833      	ldr	r3, [r6, #0]
 8006de6:	1d1a      	adds	r2, r3, #4
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	6032      	str	r2, [r6, #0]
 8006dec:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006df0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006df4:	2301      	movs	r3, #1
 8006df6:	e09c      	b.n	8006f32 <_printf_i+0x1e6>
 8006df8:	6833      	ldr	r3, [r6, #0]
 8006dfa:	6820      	ldr	r0, [r4, #0]
 8006dfc:	1d19      	adds	r1, r3, #4
 8006dfe:	6031      	str	r1, [r6, #0]
 8006e00:	0606      	lsls	r6, r0, #24
 8006e02:	d501      	bpl.n	8006e08 <_printf_i+0xbc>
 8006e04:	681d      	ldr	r5, [r3, #0]
 8006e06:	e003      	b.n	8006e10 <_printf_i+0xc4>
 8006e08:	0645      	lsls	r5, r0, #25
 8006e0a:	d5fb      	bpl.n	8006e04 <_printf_i+0xb8>
 8006e0c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006e10:	2d00      	cmp	r5, #0
 8006e12:	da03      	bge.n	8006e1c <_printf_i+0xd0>
 8006e14:	232d      	movs	r3, #45	@ 0x2d
 8006e16:	426d      	negs	r5, r5
 8006e18:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006e1c:	4858      	ldr	r0, [pc, #352]	@ (8006f80 <_printf_i+0x234>)
 8006e1e:	230a      	movs	r3, #10
 8006e20:	e011      	b.n	8006e46 <_printf_i+0xfa>
 8006e22:	6821      	ldr	r1, [r4, #0]
 8006e24:	6833      	ldr	r3, [r6, #0]
 8006e26:	0608      	lsls	r0, r1, #24
 8006e28:	f853 5b04 	ldr.w	r5, [r3], #4
 8006e2c:	d402      	bmi.n	8006e34 <_printf_i+0xe8>
 8006e2e:	0649      	lsls	r1, r1, #25
 8006e30:	bf48      	it	mi
 8006e32:	b2ad      	uxthmi	r5, r5
 8006e34:	2f6f      	cmp	r7, #111	@ 0x6f
 8006e36:	4852      	ldr	r0, [pc, #328]	@ (8006f80 <_printf_i+0x234>)
 8006e38:	6033      	str	r3, [r6, #0]
 8006e3a:	bf14      	ite	ne
 8006e3c:	230a      	movne	r3, #10
 8006e3e:	2308      	moveq	r3, #8
 8006e40:	2100      	movs	r1, #0
 8006e42:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8006e46:	6866      	ldr	r6, [r4, #4]
 8006e48:	60a6      	str	r6, [r4, #8]
 8006e4a:	2e00      	cmp	r6, #0
 8006e4c:	db05      	blt.n	8006e5a <_printf_i+0x10e>
 8006e4e:	6821      	ldr	r1, [r4, #0]
 8006e50:	432e      	orrs	r6, r5
 8006e52:	f021 0104 	bic.w	r1, r1, #4
 8006e56:	6021      	str	r1, [r4, #0]
 8006e58:	d04b      	beq.n	8006ef2 <_printf_i+0x1a6>
 8006e5a:	4616      	mov	r6, r2
 8006e5c:	fbb5 f1f3 	udiv	r1, r5, r3
 8006e60:	fb03 5711 	mls	r7, r3, r1, r5
 8006e64:	5dc7      	ldrb	r7, [r0, r7]
 8006e66:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006e6a:	462f      	mov	r7, r5
 8006e6c:	42bb      	cmp	r3, r7
 8006e6e:	460d      	mov	r5, r1
 8006e70:	d9f4      	bls.n	8006e5c <_printf_i+0x110>
 8006e72:	2b08      	cmp	r3, #8
 8006e74:	d10b      	bne.n	8006e8e <_printf_i+0x142>
 8006e76:	6823      	ldr	r3, [r4, #0]
 8006e78:	07df      	lsls	r7, r3, #31
 8006e7a:	d508      	bpl.n	8006e8e <_printf_i+0x142>
 8006e7c:	6923      	ldr	r3, [r4, #16]
 8006e7e:	6861      	ldr	r1, [r4, #4]
 8006e80:	4299      	cmp	r1, r3
 8006e82:	bfde      	ittt	le
 8006e84:	2330      	movle	r3, #48	@ 0x30
 8006e86:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006e8a:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006e8e:	1b92      	subs	r2, r2, r6
 8006e90:	6122      	str	r2, [r4, #16]
 8006e92:	f8cd a000 	str.w	sl, [sp]
 8006e96:	464b      	mov	r3, r9
 8006e98:	aa03      	add	r2, sp, #12
 8006e9a:	4621      	mov	r1, r4
 8006e9c:	4640      	mov	r0, r8
 8006e9e:	f7ff fee7 	bl	8006c70 <_printf_common>
 8006ea2:	3001      	adds	r0, #1
 8006ea4:	d14a      	bne.n	8006f3c <_printf_i+0x1f0>
 8006ea6:	f04f 30ff 	mov.w	r0, #4294967295
 8006eaa:	b004      	add	sp, #16
 8006eac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006eb0:	6823      	ldr	r3, [r4, #0]
 8006eb2:	f043 0320 	orr.w	r3, r3, #32
 8006eb6:	6023      	str	r3, [r4, #0]
 8006eb8:	4832      	ldr	r0, [pc, #200]	@ (8006f84 <_printf_i+0x238>)
 8006eba:	2778      	movs	r7, #120	@ 0x78
 8006ebc:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006ec0:	6823      	ldr	r3, [r4, #0]
 8006ec2:	6831      	ldr	r1, [r6, #0]
 8006ec4:	061f      	lsls	r7, r3, #24
 8006ec6:	f851 5b04 	ldr.w	r5, [r1], #4
 8006eca:	d402      	bmi.n	8006ed2 <_printf_i+0x186>
 8006ecc:	065f      	lsls	r7, r3, #25
 8006ece:	bf48      	it	mi
 8006ed0:	b2ad      	uxthmi	r5, r5
 8006ed2:	6031      	str	r1, [r6, #0]
 8006ed4:	07d9      	lsls	r1, r3, #31
 8006ed6:	bf44      	itt	mi
 8006ed8:	f043 0320 	orrmi.w	r3, r3, #32
 8006edc:	6023      	strmi	r3, [r4, #0]
 8006ede:	b11d      	cbz	r5, 8006ee8 <_printf_i+0x19c>
 8006ee0:	2310      	movs	r3, #16
 8006ee2:	e7ad      	b.n	8006e40 <_printf_i+0xf4>
 8006ee4:	4826      	ldr	r0, [pc, #152]	@ (8006f80 <_printf_i+0x234>)
 8006ee6:	e7e9      	b.n	8006ebc <_printf_i+0x170>
 8006ee8:	6823      	ldr	r3, [r4, #0]
 8006eea:	f023 0320 	bic.w	r3, r3, #32
 8006eee:	6023      	str	r3, [r4, #0]
 8006ef0:	e7f6      	b.n	8006ee0 <_printf_i+0x194>
 8006ef2:	4616      	mov	r6, r2
 8006ef4:	e7bd      	b.n	8006e72 <_printf_i+0x126>
 8006ef6:	6833      	ldr	r3, [r6, #0]
 8006ef8:	6825      	ldr	r5, [r4, #0]
 8006efa:	6961      	ldr	r1, [r4, #20]
 8006efc:	1d18      	adds	r0, r3, #4
 8006efe:	6030      	str	r0, [r6, #0]
 8006f00:	062e      	lsls	r6, r5, #24
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	d501      	bpl.n	8006f0a <_printf_i+0x1be>
 8006f06:	6019      	str	r1, [r3, #0]
 8006f08:	e002      	b.n	8006f10 <_printf_i+0x1c4>
 8006f0a:	0668      	lsls	r0, r5, #25
 8006f0c:	d5fb      	bpl.n	8006f06 <_printf_i+0x1ba>
 8006f0e:	8019      	strh	r1, [r3, #0]
 8006f10:	2300      	movs	r3, #0
 8006f12:	6123      	str	r3, [r4, #16]
 8006f14:	4616      	mov	r6, r2
 8006f16:	e7bc      	b.n	8006e92 <_printf_i+0x146>
 8006f18:	6833      	ldr	r3, [r6, #0]
 8006f1a:	1d1a      	adds	r2, r3, #4
 8006f1c:	6032      	str	r2, [r6, #0]
 8006f1e:	681e      	ldr	r6, [r3, #0]
 8006f20:	6862      	ldr	r2, [r4, #4]
 8006f22:	2100      	movs	r1, #0
 8006f24:	4630      	mov	r0, r6
 8006f26:	f7f9 f953 	bl	80001d0 <memchr>
 8006f2a:	b108      	cbz	r0, 8006f30 <_printf_i+0x1e4>
 8006f2c:	1b80      	subs	r0, r0, r6
 8006f2e:	6060      	str	r0, [r4, #4]
 8006f30:	6863      	ldr	r3, [r4, #4]
 8006f32:	6123      	str	r3, [r4, #16]
 8006f34:	2300      	movs	r3, #0
 8006f36:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006f3a:	e7aa      	b.n	8006e92 <_printf_i+0x146>
 8006f3c:	6923      	ldr	r3, [r4, #16]
 8006f3e:	4632      	mov	r2, r6
 8006f40:	4649      	mov	r1, r9
 8006f42:	4640      	mov	r0, r8
 8006f44:	47d0      	blx	sl
 8006f46:	3001      	adds	r0, #1
 8006f48:	d0ad      	beq.n	8006ea6 <_printf_i+0x15a>
 8006f4a:	6823      	ldr	r3, [r4, #0]
 8006f4c:	079b      	lsls	r3, r3, #30
 8006f4e:	d413      	bmi.n	8006f78 <_printf_i+0x22c>
 8006f50:	68e0      	ldr	r0, [r4, #12]
 8006f52:	9b03      	ldr	r3, [sp, #12]
 8006f54:	4298      	cmp	r0, r3
 8006f56:	bfb8      	it	lt
 8006f58:	4618      	movlt	r0, r3
 8006f5a:	e7a6      	b.n	8006eaa <_printf_i+0x15e>
 8006f5c:	2301      	movs	r3, #1
 8006f5e:	4632      	mov	r2, r6
 8006f60:	4649      	mov	r1, r9
 8006f62:	4640      	mov	r0, r8
 8006f64:	47d0      	blx	sl
 8006f66:	3001      	adds	r0, #1
 8006f68:	d09d      	beq.n	8006ea6 <_printf_i+0x15a>
 8006f6a:	3501      	adds	r5, #1
 8006f6c:	68e3      	ldr	r3, [r4, #12]
 8006f6e:	9903      	ldr	r1, [sp, #12]
 8006f70:	1a5b      	subs	r3, r3, r1
 8006f72:	42ab      	cmp	r3, r5
 8006f74:	dcf2      	bgt.n	8006f5c <_printf_i+0x210>
 8006f76:	e7eb      	b.n	8006f50 <_printf_i+0x204>
 8006f78:	2500      	movs	r5, #0
 8006f7a:	f104 0619 	add.w	r6, r4, #25
 8006f7e:	e7f5      	b.n	8006f6c <_printf_i+0x220>
 8006f80:	0800b466 	.word	0x0800b466
 8006f84:	0800b477 	.word	0x0800b477

08006f88 <_scanf_float>:
 8006f88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f8c:	b087      	sub	sp, #28
 8006f8e:	4691      	mov	r9, r2
 8006f90:	9303      	str	r3, [sp, #12]
 8006f92:	688b      	ldr	r3, [r1, #8]
 8006f94:	1e5a      	subs	r2, r3, #1
 8006f96:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8006f9a:	bf81      	itttt	hi
 8006f9c:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8006fa0:	eb03 0b05 	addhi.w	fp, r3, r5
 8006fa4:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8006fa8:	608b      	strhi	r3, [r1, #8]
 8006faa:	680b      	ldr	r3, [r1, #0]
 8006fac:	460a      	mov	r2, r1
 8006fae:	f04f 0500 	mov.w	r5, #0
 8006fb2:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 8006fb6:	f842 3b1c 	str.w	r3, [r2], #28
 8006fba:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8006fbe:	4680      	mov	r8, r0
 8006fc0:	460c      	mov	r4, r1
 8006fc2:	bf98      	it	ls
 8006fc4:	f04f 0b00 	movls.w	fp, #0
 8006fc8:	9201      	str	r2, [sp, #4]
 8006fca:	4616      	mov	r6, r2
 8006fcc:	46aa      	mov	sl, r5
 8006fce:	462f      	mov	r7, r5
 8006fd0:	9502      	str	r5, [sp, #8]
 8006fd2:	68a2      	ldr	r2, [r4, #8]
 8006fd4:	b15a      	cbz	r2, 8006fee <_scanf_float+0x66>
 8006fd6:	f8d9 3000 	ldr.w	r3, [r9]
 8006fda:	781b      	ldrb	r3, [r3, #0]
 8006fdc:	2b4e      	cmp	r3, #78	@ 0x4e
 8006fde:	d863      	bhi.n	80070a8 <_scanf_float+0x120>
 8006fe0:	2b40      	cmp	r3, #64	@ 0x40
 8006fe2:	d83b      	bhi.n	800705c <_scanf_float+0xd4>
 8006fe4:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8006fe8:	b2c8      	uxtb	r0, r1
 8006fea:	280e      	cmp	r0, #14
 8006fec:	d939      	bls.n	8007062 <_scanf_float+0xda>
 8006fee:	b11f      	cbz	r7, 8006ff8 <_scanf_float+0x70>
 8006ff0:	6823      	ldr	r3, [r4, #0]
 8006ff2:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006ff6:	6023      	str	r3, [r4, #0]
 8006ff8:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006ffc:	f1ba 0f01 	cmp.w	sl, #1
 8007000:	f200 8114 	bhi.w	800722c <_scanf_float+0x2a4>
 8007004:	9b01      	ldr	r3, [sp, #4]
 8007006:	429e      	cmp	r6, r3
 8007008:	f200 8105 	bhi.w	8007216 <_scanf_float+0x28e>
 800700c:	2001      	movs	r0, #1
 800700e:	b007      	add	sp, #28
 8007010:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007014:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8007018:	2a0d      	cmp	r2, #13
 800701a:	d8e8      	bhi.n	8006fee <_scanf_float+0x66>
 800701c:	a101      	add	r1, pc, #4	@ (adr r1, 8007024 <_scanf_float+0x9c>)
 800701e:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8007022:	bf00      	nop
 8007024:	0800716d 	.word	0x0800716d
 8007028:	08006fef 	.word	0x08006fef
 800702c:	08006fef 	.word	0x08006fef
 8007030:	08006fef 	.word	0x08006fef
 8007034:	080071c9 	.word	0x080071c9
 8007038:	080071a3 	.word	0x080071a3
 800703c:	08006fef 	.word	0x08006fef
 8007040:	08006fef 	.word	0x08006fef
 8007044:	0800717b 	.word	0x0800717b
 8007048:	08006fef 	.word	0x08006fef
 800704c:	08006fef 	.word	0x08006fef
 8007050:	08006fef 	.word	0x08006fef
 8007054:	08006fef 	.word	0x08006fef
 8007058:	08007137 	.word	0x08007137
 800705c:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8007060:	e7da      	b.n	8007018 <_scanf_float+0x90>
 8007062:	290e      	cmp	r1, #14
 8007064:	d8c3      	bhi.n	8006fee <_scanf_float+0x66>
 8007066:	a001      	add	r0, pc, #4	@ (adr r0, 800706c <_scanf_float+0xe4>)
 8007068:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800706c:	08007127 	.word	0x08007127
 8007070:	08006fef 	.word	0x08006fef
 8007074:	08007127 	.word	0x08007127
 8007078:	080071b7 	.word	0x080071b7
 800707c:	08006fef 	.word	0x08006fef
 8007080:	080070c9 	.word	0x080070c9
 8007084:	0800710d 	.word	0x0800710d
 8007088:	0800710d 	.word	0x0800710d
 800708c:	0800710d 	.word	0x0800710d
 8007090:	0800710d 	.word	0x0800710d
 8007094:	0800710d 	.word	0x0800710d
 8007098:	0800710d 	.word	0x0800710d
 800709c:	0800710d 	.word	0x0800710d
 80070a0:	0800710d 	.word	0x0800710d
 80070a4:	0800710d 	.word	0x0800710d
 80070a8:	2b6e      	cmp	r3, #110	@ 0x6e
 80070aa:	d809      	bhi.n	80070c0 <_scanf_float+0x138>
 80070ac:	2b60      	cmp	r3, #96	@ 0x60
 80070ae:	d8b1      	bhi.n	8007014 <_scanf_float+0x8c>
 80070b0:	2b54      	cmp	r3, #84	@ 0x54
 80070b2:	d07b      	beq.n	80071ac <_scanf_float+0x224>
 80070b4:	2b59      	cmp	r3, #89	@ 0x59
 80070b6:	d19a      	bne.n	8006fee <_scanf_float+0x66>
 80070b8:	2d07      	cmp	r5, #7
 80070ba:	d198      	bne.n	8006fee <_scanf_float+0x66>
 80070bc:	2508      	movs	r5, #8
 80070be:	e02f      	b.n	8007120 <_scanf_float+0x198>
 80070c0:	2b74      	cmp	r3, #116	@ 0x74
 80070c2:	d073      	beq.n	80071ac <_scanf_float+0x224>
 80070c4:	2b79      	cmp	r3, #121	@ 0x79
 80070c6:	e7f6      	b.n	80070b6 <_scanf_float+0x12e>
 80070c8:	6821      	ldr	r1, [r4, #0]
 80070ca:	05c8      	lsls	r0, r1, #23
 80070cc:	d51e      	bpl.n	800710c <_scanf_float+0x184>
 80070ce:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 80070d2:	6021      	str	r1, [r4, #0]
 80070d4:	3701      	adds	r7, #1
 80070d6:	f1bb 0f00 	cmp.w	fp, #0
 80070da:	d003      	beq.n	80070e4 <_scanf_float+0x15c>
 80070dc:	3201      	adds	r2, #1
 80070de:	f10b 3bff 	add.w	fp, fp, #4294967295
 80070e2:	60a2      	str	r2, [r4, #8]
 80070e4:	68a3      	ldr	r3, [r4, #8]
 80070e6:	3b01      	subs	r3, #1
 80070e8:	60a3      	str	r3, [r4, #8]
 80070ea:	6923      	ldr	r3, [r4, #16]
 80070ec:	3301      	adds	r3, #1
 80070ee:	6123      	str	r3, [r4, #16]
 80070f0:	f8d9 3004 	ldr.w	r3, [r9, #4]
 80070f4:	3b01      	subs	r3, #1
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	f8c9 3004 	str.w	r3, [r9, #4]
 80070fc:	f340 8082 	ble.w	8007204 <_scanf_float+0x27c>
 8007100:	f8d9 3000 	ldr.w	r3, [r9]
 8007104:	3301      	adds	r3, #1
 8007106:	f8c9 3000 	str.w	r3, [r9]
 800710a:	e762      	b.n	8006fd2 <_scanf_float+0x4a>
 800710c:	eb1a 0105 	adds.w	r1, sl, r5
 8007110:	f47f af6d 	bne.w	8006fee <_scanf_float+0x66>
 8007114:	6822      	ldr	r2, [r4, #0]
 8007116:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 800711a:	6022      	str	r2, [r4, #0]
 800711c:	460d      	mov	r5, r1
 800711e:	468a      	mov	sl, r1
 8007120:	f806 3b01 	strb.w	r3, [r6], #1
 8007124:	e7de      	b.n	80070e4 <_scanf_float+0x15c>
 8007126:	6822      	ldr	r2, [r4, #0]
 8007128:	0610      	lsls	r0, r2, #24
 800712a:	f57f af60 	bpl.w	8006fee <_scanf_float+0x66>
 800712e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8007132:	6022      	str	r2, [r4, #0]
 8007134:	e7f4      	b.n	8007120 <_scanf_float+0x198>
 8007136:	f1ba 0f00 	cmp.w	sl, #0
 800713a:	d10c      	bne.n	8007156 <_scanf_float+0x1ce>
 800713c:	b977      	cbnz	r7, 800715c <_scanf_float+0x1d4>
 800713e:	6822      	ldr	r2, [r4, #0]
 8007140:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8007144:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8007148:	d108      	bne.n	800715c <_scanf_float+0x1d4>
 800714a:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800714e:	6022      	str	r2, [r4, #0]
 8007150:	f04f 0a01 	mov.w	sl, #1
 8007154:	e7e4      	b.n	8007120 <_scanf_float+0x198>
 8007156:	f1ba 0f02 	cmp.w	sl, #2
 800715a:	d050      	beq.n	80071fe <_scanf_float+0x276>
 800715c:	2d01      	cmp	r5, #1
 800715e:	d002      	beq.n	8007166 <_scanf_float+0x1de>
 8007160:	2d04      	cmp	r5, #4
 8007162:	f47f af44 	bne.w	8006fee <_scanf_float+0x66>
 8007166:	3501      	adds	r5, #1
 8007168:	b2ed      	uxtb	r5, r5
 800716a:	e7d9      	b.n	8007120 <_scanf_float+0x198>
 800716c:	f1ba 0f01 	cmp.w	sl, #1
 8007170:	f47f af3d 	bne.w	8006fee <_scanf_float+0x66>
 8007174:	f04f 0a02 	mov.w	sl, #2
 8007178:	e7d2      	b.n	8007120 <_scanf_float+0x198>
 800717a:	b975      	cbnz	r5, 800719a <_scanf_float+0x212>
 800717c:	2f00      	cmp	r7, #0
 800717e:	f47f af37 	bne.w	8006ff0 <_scanf_float+0x68>
 8007182:	6822      	ldr	r2, [r4, #0]
 8007184:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8007188:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800718c:	f040 8103 	bne.w	8007396 <_scanf_float+0x40e>
 8007190:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8007194:	6022      	str	r2, [r4, #0]
 8007196:	2501      	movs	r5, #1
 8007198:	e7c2      	b.n	8007120 <_scanf_float+0x198>
 800719a:	2d03      	cmp	r5, #3
 800719c:	d0e3      	beq.n	8007166 <_scanf_float+0x1de>
 800719e:	2d05      	cmp	r5, #5
 80071a0:	e7df      	b.n	8007162 <_scanf_float+0x1da>
 80071a2:	2d02      	cmp	r5, #2
 80071a4:	f47f af23 	bne.w	8006fee <_scanf_float+0x66>
 80071a8:	2503      	movs	r5, #3
 80071aa:	e7b9      	b.n	8007120 <_scanf_float+0x198>
 80071ac:	2d06      	cmp	r5, #6
 80071ae:	f47f af1e 	bne.w	8006fee <_scanf_float+0x66>
 80071b2:	2507      	movs	r5, #7
 80071b4:	e7b4      	b.n	8007120 <_scanf_float+0x198>
 80071b6:	6822      	ldr	r2, [r4, #0]
 80071b8:	0591      	lsls	r1, r2, #22
 80071ba:	f57f af18 	bpl.w	8006fee <_scanf_float+0x66>
 80071be:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 80071c2:	6022      	str	r2, [r4, #0]
 80071c4:	9702      	str	r7, [sp, #8]
 80071c6:	e7ab      	b.n	8007120 <_scanf_float+0x198>
 80071c8:	6822      	ldr	r2, [r4, #0]
 80071ca:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 80071ce:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 80071d2:	d005      	beq.n	80071e0 <_scanf_float+0x258>
 80071d4:	0550      	lsls	r0, r2, #21
 80071d6:	f57f af0a 	bpl.w	8006fee <_scanf_float+0x66>
 80071da:	2f00      	cmp	r7, #0
 80071dc:	f000 80db 	beq.w	8007396 <_scanf_float+0x40e>
 80071e0:	0591      	lsls	r1, r2, #22
 80071e2:	bf58      	it	pl
 80071e4:	9902      	ldrpl	r1, [sp, #8]
 80071e6:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80071ea:	bf58      	it	pl
 80071ec:	1a79      	subpl	r1, r7, r1
 80071ee:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 80071f2:	bf58      	it	pl
 80071f4:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 80071f8:	6022      	str	r2, [r4, #0]
 80071fa:	2700      	movs	r7, #0
 80071fc:	e790      	b.n	8007120 <_scanf_float+0x198>
 80071fe:	f04f 0a03 	mov.w	sl, #3
 8007202:	e78d      	b.n	8007120 <_scanf_float+0x198>
 8007204:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8007208:	4649      	mov	r1, r9
 800720a:	4640      	mov	r0, r8
 800720c:	4798      	blx	r3
 800720e:	2800      	cmp	r0, #0
 8007210:	f43f aedf 	beq.w	8006fd2 <_scanf_float+0x4a>
 8007214:	e6eb      	b.n	8006fee <_scanf_float+0x66>
 8007216:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800721a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800721e:	464a      	mov	r2, r9
 8007220:	4640      	mov	r0, r8
 8007222:	4798      	blx	r3
 8007224:	6923      	ldr	r3, [r4, #16]
 8007226:	3b01      	subs	r3, #1
 8007228:	6123      	str	r3, [r4, #16]
 800722a:	e6eb      	b.n	8007004 <_scanf_float+0x7c>
 800722c:	1e6b      	subs	r3, r5, #1
 800722e:	2b06      	cmp	r3, #6
 8007230:	d824      	bhi.n	800727c <_scanf_float+0x2f4>
 8007232:	2d02      	cmp	r5, #2
 8007234:	d836      	bhi.n	80072a4 <_scanf_float+0x31c>
 8007236:	9b01      	ldr	r3, [sp, #4]
 8007238:	429e      	cmp	r6, r3
 800723a:	f67f aee7 	bls.w	800700c <_scanf_float+0x84>
 800723e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8007242:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007246:	464a      	mov	r2, r9
 8007248:	4640      	mov	r0, r8
 800724a:	4798      	blx	r3
 800724c:	6923      	ldr	r3, [r4, #16]
 800724e:	3b01      	subs	r3, #1
 8007250:	6123      	str	r3, [r4, #16]
 8007252:	e7f0      	b.n	8007236 <_scanf_float+0x2ae>
 8007254:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8007258:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 800725c:	464a      	mov	r2, r9
 800725e:	4640      	mov	r0, r8
 8007260:	4798      	blx	r3
 8007262:	6923      	ldr	r3, [r4, #16]
 8007264:	3b01      	subs	r3, #1
 8007266:	6123      	str	r3, [r4, #16]
 8007268:	f10a 3aff 	add.w	sl, sl, #4294967295
 800726c:	fa5f fa8a 	uxtb.w	sl, sl
 8007270:	f1ba 0f02 	cmp.w	sl, #2
 8007274:	d1ee      	bne.n	8007254 <_scanf_float+0x2cc>
 8007276:	3d03      	subs	r5, #3
 8007278:	b2ed      	uxtb	r5, r5
 800727a:	1b76      	subs	r6, r6, r5
 800727c:	6823      	ldr	r3, [r4, #0]
 800727e:	05da      	lsls	r2, r3, #23
 8007280:	d530      	bpl.n	80072e4 <_scanf_float+0x35c>
 8007282:	055b      	lsls	r3, r3, #21
 8007284:	d511      	bpl.n	80072aa <_scanf_float+0x322>
 8007286:	9b01      	ldr	r3, [sp, #4]
 8007288:	429e      	cmp	r6, r3
 800728a:	f67f aebf 	bls.w	800700c <_scanf_float+0x84>
 800728e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8007292:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007296:	464a      	mov	r2, r9
 8007298:	4640      	mov	r0, r8
 800729a:	4798      	blx	r3
 800729c:	6923      	ldr	r3, [r4, #16]
 800729e:	3b01      	subs	r3, #1
 80072a0:	6123      	str	r3, [r4, #16]
 80072a2:	e7f0      	b.n	8007286 <_scanf_float+0x2fe>
 80072a4:	46aa      	mov	sl, r5
 80072a6:	46b3      	mov	fp, r6
 80072a8:	e7de      	b.n	8007268 <_scanf_float+0x2e0>
 80072aa:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80072ae:	6923      	ldr	r3, [r4, #16]
 80072b0:	2965      	cmp	r1, #101	@ 0x65
 80072b2:	f103 33ff 	add.w	r3, r3, #4294967295
 80072b6:	f106 35ff 	add.w	r5, r6, #4294967295
 80072ba:	6123      	str	r3, [r4, #16]
 80072bc:	d00c      	beq.n	80072d8 <_scanf_float+0x350>
 80072be:	2945      	cmp	r1, #69	@ 0x45
 80072c0:	d00a      	beq.n	80072d8 <_scanf_float+0x350>
 80072c2:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80072c6:	464a      	mov	r2, r9
 80072c8:	4640      	mov	r0, r8
 80072ca:	4798      	blx	r3
 80072cc:	6923      	ldr	r3, [r4, #16]
 80072ce:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 80072d2:	3b01      	subs	r3, #1
 80072d4:	1eb5      	subs	r5, r6, #2
 80072d6:	6123      	str	r3, [r4, #16]
 80072d8:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80072dc:	464a      	mov	r2, r9
 80072de:	4640      	mov	r0, r8
 80072e0:	4798      	blx	r3
 80072e2:	462e      	mov	r6, r5
 80072e4:	6822      	ldr	r2, [r4, #0]
 80072e6:	f012 0210 	ands.w	r2, r2, #16
 80072ea:	d001      	beq.n	80072f0 <_scanf_float+0x368>
 80072ec:	2000      	movs	r0, #0
 80072ee:	e68e      	b.n	800700e <_scanf_float+0x86>
 80072f0:	7032      	strb	r2, [r6, #0]
 80072f2:	6823      	ldr	r3, [r4, #0]
 80072f4:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80072f8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80072fc:	d125      	bne.n	800734a <_scanf_float+0x3c2>
 80072fe:	9b02      	ldr	r3, [sp, #8]
 8007300:	429f      	cmp	r7, r3
 8007302:	d00a      	beq.n	800731a <_scanf_float+0x392>
 8007304:	1bda      	subs	r2, r3, r7
 8007306:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 800730a:	429e      	cmp	r6, r3
 800730c:	bf28      	it	cs
 800730e:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8007312:	4922      	ldr	r1, [pc, #136]	@ (800739c <_scanf_float+0x414>)
 8007314:	4630      	mov	r0, r6
 8007316:	f000 f965 	bl	80075e4 <siprintf>
 800731a:	9901      	ldr	r1, [sp, #4]
 800731c:	2200      	movs	r2, #0
 800731e:	4640      	mov	r0, r8
 8007320:	f002 fce6 	bl	8009cf0 <_strtod_r>
 8007324:	9b03      	ldr	r3, [sp, #12]
 8007326:	6821      	ldr	r1, [r4, #0]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	f011 0f02 	tst.w	r1, #2
 800732e:	ec57 6b10 	vmov	r6, r7, d0
 8007332:	f103 0204 	add.w	r2, r3, #4
 8007336:	d015      	beq.n	8007364 <_scanf_float+0x3dc>
 8007338:	9903      	ldr	r1, [sp, #12]
 800733a:	600a      	str	r2, [r1, #0]
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	e9c3 6700 	strd	r6, r7, [r3]
 8007342:	68e3      	ldr	r3, [r4, #12]
 8007344:	3301      	adds	r3, #1
 8007346:	60e3      	str	r3, [r4, #12]
 8007348:	e7d0      	b.n	80072ec <_scanf_float+0x364>
 800734a:	9b04      	ldr	r3, [sp, #16]
 800734c:	2b00      	cmp	r3, #0
 800734e:	d0e4      	beq.n	800731a <_scanf_float+0x392>
 8007350:	9905      	ldr	r1, [sp, #20]
 8007352:	230a      	movs	r3, #10
 8007354:	3101      	adds	r1, #1
 8007356:	4640      	mov	r0, r8
 8007358:	f002 fd4a 	bl	8009df0 <_strtol_r>
 800735c:	9b04      	ldr	r3, [sp, #16]
 800735e:	9e05      	ldr	r6, [sp, #20]
 8007360:	1ac2      	subs	r2, r0, r3
 8007362:	e7d0      	b.n	8007306 <_scanf_float+0x37e>
 8007364:	f011 0f04 	tst.w	r1, #4
 8007368:	9903      	ldr	r1, [sp, #12]
 800736a:	600a      	str	r2, [r1, #0]
 800736c:	d1e6      	bne.n	800733c <_scanf_float+0x3b4>
 800736e:	681d      	ldr	r5, [r3, #0]
 8007370:	4632      	mov	r2, r6
 8007372:	463b      	mov	r3, r7
 8007374:	4630      	mov	r0, r6
 8007376:	4639      	mov	r1, r7
 8007378:	f7f9 fbd8 	bl	8000b2c <__aeabi_dcmpun>
 800737c:	b128      	cbz	r0, 800738a <_scanf_float+0x402>
 800737e:	4808      	ldr	r0, [pc, #32]	@ (80073a0 <_scanf_float+0x418>)
 8007380:	f000 faaa 	bl	80078d8 <nanf>
 8007384:	ed85 0a00 	vstr	s0, [r5]
 8007388:	e7db      	b.n	8007342 <_scanf_float+0x3ba>
 800738a:	4630      	mov	r0, r6
 800738c:	4639      	mov	r1, r7
 800738e:	f7f9 fc2b 	bl	8000be8 <__aeabi_d2f>
 8007392:	6028      	str	r0, [r5, #0]
 8007394:	e7d5      	b.n	8007342 <_scanf_float+0x3ba>
 8007396:	2700      	movs	r7, #0
 8007398:	e62e      	b.n	8006ff8 <_scanf_float+0x70>
 800739a:	bf00      	nop
 800739c:	0800b488 	.word	0x0800b488
 80073a0:	0800b5c9 	.word	0x0800b5c9

080073a4 <std>:
 80073a4:	2300      	movs	r3, #0
 80073a6:	b510      	push	{r4, lr}
 80073a8:	4604      	mov	r4, r0
 80073aa:	e9c0 3300 	strd	r3, r3, [r0]
 80073ae:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80073b2:	6083      	str	r3, [r0, #8]
 80073b4:	8181      	strh	r1, [r0, #12]
 80073b6:	6643      	str	r3, [r0, #100]	@ 0x64
 80073b8:	81c2      	strh	r2, [r0, #14]
 80073ba:	6183      	str	r3, [r0, #24]
 80073bc:	4619      	mov	r1, r3
 80073be:	2208      	movs	r2, #8
 80073c0:	305c      	adds	r0, #92	@ 0x5c
 80073c2:	f000 fa09 	bl	80077d8 <memset>
 80073c6:	4b0d      	ldr	r3, [pc, #52]	@ (80073fc <std+0x58>)
 80073c8:	6263      	str	r3, [r4, #36]	@ 0x24
 80073ca:	4b0d      	ldr	r3, [pc, #52]	@ (8007400 <std+0x5c>)
 80073cc:	62a3      	str	r3, [r4, #40]	@ 0x28
 80073ce:	4b0d      	ldr	r3, [pc, #52]	@ (8007404 <std+0x60>)
 80073d0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80073d2:	4b0d      	ldr	r3, [pc, #52]	@ (8007408 <std+0x64>)
 80073d4:	6323      	str	r3, [r4, #48]	@ 0x30
 80073d6:	4b0d      	ldr	r3, [pc, #52]	@ (800740c <std+0x68>)
 80073d8:	6224      	str	r4, [r4, #32]
 80073da:	429c      	cmp	r4, r3
 80073dc:	d006      	beq.n	80073ec <std+0x48>
 80073de:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80073e2:	4294      	cmp	r4, r2
 80073e4:	d002      	beq.n	80073ec <std+0x48>
 80073e6:	33d0      	adds	r3, #208	@ 0xd0
 80073e8:	429c      	cmp	r4, r3
 80073ea:	d105      	bne.n	80073f8 <std+0x54>
 80073ec:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80073f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80073f4:	f000 ba6c 	b.w	80078d0 <__retarget_lock_init_recursive>
 80073f8:	bd10      	pop	{r4, pc}
 80073fa:	bf00      	nop
 80073fc:	08007629 	.word	0x08007629
 8007400:	0800764b 	.word	0x0800764b
 8007404:	08007683 	.word	0x08007683
 8007408:	080076a7 	.word	0x080076a7
 800740c:	200014cc 	.word	0x200014cc

08007410 <stdio_exit_handler>:
 8007410:	4a02      	ldr	r2, [pc, #8]	@ (800741c <stdio_exit_handler+0xc>)
 8007412:	4903      	ldr	r1, [pc, #12]	@ (8007420 <stdio_exit_handler+0x10>)
 8007414:	4803      	ldr	r0, [pc, #12]	@ (8007424 <stdio_exit_handler+0x14>)
 8007416:	f000 b869 	b.w	80074ec <_fwalk_sglue>
 800741a:	bf00      	nop
 800741c:	20000a4c 	.word	0x20000a4c
 8007420:	0800a1ad 	.word	0x0800a1ad
 8007424:	20000a5c 	.word	0x20000a5c

08007428 <cleanup_stdio>:
 8007428:	6841      	ldr	r1, [r0, #4]
 800742a:	4b0c      	ldr	r3, [pc, #48]	@ (800745c <cleanup_stdio+0x34>)
 800742c:	4299      	cmp	r1, r3
 800742e:	b510      	push	{r4, lr}
 8007430:	4604      	mov	r4, r0
 8007432:	d001      	beq.n	8007438 <cleanup_stdio+0x10>
 8007434:	f002 feba 	bl	800a1ac <_fflush_r>
 8007438:	68a1      	ldr	r1, [r4, #8]
 800743a:	4b09      	ldr	r3, [pc, #36]	@ (8007460 <cleanup_stdio+0x38>)
 800743c:	4299      	cmp	r1, r3
 800743e:	d002      	beq.n	8007446 <cleanup_stdio+0x1e>
 8007440:	4620      	mov	r0, r4
 8007442:	f002 feb3 	bl	800a1ac <_fflush_r>
 8007446:	68e1      	ldr	r1, [r4, #12]
 8007448:	4b06      	ldr	r3, [pc, #24]	@ (8007464 <cleanup_stdio+0x3c>)
 800744a:	4299      	cmp	r1, r3
 800744c:	d004      	beq.n	8007458 <cleanup_stdio+0x30>
 800744e:	4620      	mov	r0, r4
 8007450:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007454:	f002 beaa 	b.w	800a1ac <_fflush_r>
 8007458:	bd10      	pop	{r4, pc}
 800745a:	bf00      	nop
 800745c:	200014cc 	.word	0x200014cc
 8007460:	20001534 	.word	0x20001534
 8007464:	2000159c 	.word	0x2000159c

08007468 <global_stdio_init.part.0>:
 8007468:	b510      	push	{r4, lr}
 800746a:	4b0b      	ldr	r3, [pc, #44]	@ (8007498 <global_stdio_init.part.0+0x30>)
 800746c:	4c0b      	ldr	r4, [pc, #44]	@ (800749c <global_stdio_init.part.0+0x34>)
 800746e:	4a0c      	ldr	r2, [pc, #48]	@ (80074a0 <global_stdio_init.part.0+0x38>)
 8007470:	601a      	str	r2, [r3, #0]
 8007472:	4620      	mov	r0, r4
 8007474:	2200      	movs	r2, #0
 8007476:	2104      	movs	r1, #4
 8007478:	f7ff ff94 	bl	80073a4 <std>
 800747c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8007480:	2201      	movs	r2, #1
 8007482:	2109      	movs	r1, #9
 8007484:	f7ff ff8e 	bl	80073a4 <std>
 8007488:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800748c:	2202      	movs	r2, #2
 800748e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007492:	2112      	movs	r1, #18
 8007494:	f7ff bf86 	b.w	80073a4 <std>
 8007498:	20001604 	.word	0x20001604
 800749c:	200014cc 	.word	0x200014cc
 80074a0:	08007411 	.word	0x08007411

080074a4 <__sfp_lock_acquire>:
 80074a4:	4801      	ldr	r0, [pc, #4]	@ (80074ac <__sfp_lock_acquire+0x8>)
 80074a6:	f000 ba14 	b.w	80078d2 <__retarget_lock_acquire_recursive>
 80074aa:	bf00      	nop
 80074ac:	2000160d 	.word	0x2000160d

080074b0 <__sfp_lock_release>:
 80074b0:	4801      	ldr	r0, [pc, #4]	@ (80074b8 <__sfp_lock_release+0x8>)
 80074b2:	f000 ba0f 	b.w	80078d4 <__retarget_lock_release_recursive>
 80074b6:	bf00      	nop
 80074b8:	2000160d 	.word	0x2000160d

080074bc <__sinit>:
 80074bc:	b510      	push	{r4, lr}
 80074be:	4604      	mov	r4, r0
 80074c0:	f7ff fff0 	bl	80074a4 <__sfp_lock_acquire>
 80074c4:	6a23      	ldr	r3, [r4, #32]
 80074c6:	b11b      	cbz	r3, 80074d0 <__sinit+0x14>
 80074c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80074cc:	f7ff bff0 	b.w	80074b0 <__sfp_lock_release>
 80074d0:	4b04      	ldr	r3, [pc, #16]	@ (80074e4 <__sinit+0x28>)
 80074d2:	6223      	str	r3, [r4, #32]
 80074d4:	4b04      	ldr	r3, [pc, #16]	@ (80074e8 <__sinit+0x2c>)
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	2b00      	cmp	r3, #0
 80074da:	d1f5      	bne.n	80074c8 <__sinit+0xc>
 80074dc:	f7ff ffc4 	bl	8007468 <global_stdio_init.part.0>
 80074e0:	e7f2      	b.n	80074c8 <__sinit+0xc>
 80074e2:	bf00      	nop
 80074e4:	08007429 	.word	0x08007429
 80074e8:	20001604 	.word	0x20001604

080074ec <_fwalk_sglue>:
 80074ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80074f0:	4607      	mov	r7, r0
 80074f2:	4688      	mov	r8, r1
 80074f4:	4614      	mov	r4, r2
 80074f6:	2600      	movs	r6, #0
 80074f8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80074fc:	f1b9 0901 	subs.w	r9, r9, #1
 8007500:	d505      	bpl.n	800750e <_fwalk_sglue+0x22>
 8007502:	6824      	ldr	r4, [r4, #0]
 8007504:	2c00      	cmp	r4, #0
 8007506:	d1f7      	bne.n	80074f8 <_fwalk_sglue+0xc>
 8007508:	4630      	mov	r0, r6
 800750a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800750e:	89ab      	ldrh	r3, [r5, #12]
 8007510:	2b01      	cmp	r3, #1
 8007512:	d907      	bls.n	8007524 <_fwalk_sglue+0x38>
 8007514:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007518:	3301      	adds	r3, #1
 800751a:	d003      	beq.n	8007524 <_fwalk_sglue+0x38>
 800751c:	4629      	mov	r1, r5
 800751e:	4638      	mov	r0, r7
 8007520:	47c0      	blx	r8
 8007522:	4306      	orrs	r6, r0
 8007524:	3568      	adds	r5, #104	@ 0x68
 8007526:	e7e9      	b.n	80074fc <_fwalk_sglue+0x10>

08007528 <_puts_r>:
 8007528:	6a03      	ldr	r3, [r0, #32]
 800752a:	b570      	push	{r4, r5, r6, lr}
 800752c:	6884      	ldr	r4, [r0, #8]
 800752e:	4605      	mov	r5, r0
 8007530:	460e      	mov	r6, r1
 8007532:	b90b      	cbnz	r3, 8007538 <_puts_r+0x10>
 8007534:	f7ff ffc2 	bl	80074bc <__sinit>
 8007538:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800753a:	07db      	lsls	r3, r3, #31
 800753c:	d405      	bmi.n	800754a <_puts_r+0x22>
 800753e:	89a3      	ldrh	r3, [r4, #12]
 8007540:	0598      	lsls	r0, r3, #22
 8007542:	d402      	bmi.n	800754a <_puts_r+0x22>
 8007544:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007546:	f000 f9c4 	bl	80078d2 <__retarget_lock_acquire_recursive>
 800754a:	89a3      	ldrh	r3, [r4, #12]
 800754c:	0719      	lsls	r1, r3, #28
 800754e:	d502      	bpl.n	8007556 <_puts_r+0x2e>
 8007550:	6923      	ldr	r3, [r4, #16]
 8007552:	2b00      	cmp	r3, #0
 8007554:	d135      	bne.n	80075c2 <_puts_r+0x9a>
 8007556:	4621      	mov	r1, r4
 8007558:	4628      	mov	r0, r5
 800755a:	f000 f8e7 	bl	800772c <__swsetup_r>
 800755e:	b380      	cbz	r0, 80075c2 <_puts_r+0x9a>
 8007560:	f04f 35ff 	mov.w	r5, #4294967295
 8007564:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007566:	07da      	lsls	r2, r3, #31
 8007568:	d405      	bmi.n	8007576 <_puts_r+0x4e>
 800756a:	89a3      	ldrh	r3, [r4, #12]
 800756c:	059b      	lsls	r3, r3, #22
 800756e:	d402      	bmi.n	8007576 <_puts_r+0x4e>
 8007570:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007572:	f000 f9af 	bl	80078d4 <__retarget_lock_release_recursive>
 8007576:	4628      	mov	r0, r5
 8007578:	bd70      	pop	{r4, r5, r6, pc}
 800757a:	2b00      	cmp	r3, #0
 800757c:	da04      	bge.n	8007588 <_puts_r+0x60>
 800757e:	69a2      	ldr	r2, [r4, #24]
 8007580:	429a      	cmp	r2, r3
 8007582:	dc17      	bgt.n	80075b4 <_puts_r+0x8c>
 8007584:	290a      	cmp	r1, #10
 8007586:	d015      	beq.n	80075b4 <_puts_r+0x8c>
 8007588:	6823      	ldr	r3, [r4, #0]
 800758a:	1c5a      	adds	r2, r3, #1
 800758c:	6022      	str	r2, [r4, #0]
 800758e:	7019      	strb	r1, [r3, #0]
 8007590:	68a3      	ldr	r3, [r4, #8]
 8007592:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8007596:	3b01      	subs	r3, #1
 8007598:	60a3      	str	r3, [r4, #8]
 800759a:	2900      	cmp	r1, #0
 800759c:	d1ed      	bne.n	800757a <_puts_r+0x52>
 800759e:	2b00      	cmp	r3, #0
 80075a0:	da11      	bge.n	80075c6 <_puts_r+0x9e>
 80075a2:	4622      	mov	r2, r4
 80075a4:	210a      	movs	r1, #10
 80075a6:	4628      	mov	r0, r5
 80075a8:	f000 f881 	bl	80076ae <__swbuf_r>
 80075ac:	3001      	adds	r0, #1
 80075ae:	d0d7      	beq.n	8007560 <_puts_r+0x38>
 80075b0:	250a      	movs	r5, #10
 80075b2:	e7d7      	b.n	8007564 <_puts_r+0x3c>
 80075b4:	4622      	mov	r2, r4
 80075b6:	4628      	mov	r0, r5
 80075b8:	f000 f879 	bl	80076ae <__swbuf_r>
 80075bc:	3001      	adds	r0, #1
 80075be:	d1e7      	bne.n	8007590 <_puts_r+0x68>
 80075c0:	e7ce      	b.n	8007560 <_puts_r+0x38>
 80075c2:	3e01      	subs	r6, #1
 80075c4:	e7e4      	b.n	8007590 <_puts_r+0x68>
 80075c6:	6823      	ldr	r3, [r4, #0]
 80075c8:	1c5a      	adds	r2, r3, #1
 80075ca:	6022      	str	r2, [r4, #0]
 80075cc:	220a      	movs	r2, #10
 80075ce:	701a      	strb	r2, [r3, #0]
 80075d0:	e7ee      	b.n	80075b0 <_puts_r+0x88>
	...

080075d4 <puts>:
 80075d4:	4b02      	ldr	r3, [pc, #8]	@ (80075e0 <puts+0xc>)
 80075d6:	4601      	mov	r1, r0
 80075d8:	6818      	ldr	r0, [r3, #0]
 80075da:	f7ff bfa5 	b.w	8007528 <_puts_r>
 80075de:	bf00      	nop
 80075e0:	20000a58 	.word	0x20000a58

080075e4 <siprintf>:
 80075e4:	b40e      	push	{r1, r2, r3}
 80075e6:	b510      	push	{r4, lr}
 80075e8:	b09d      	sub	sp, #116	@ 0x74
 80075ea:	ab1f      	add	r3, sp, #124	@ 0x7c
 80075ec:	9002      	str	r0, [sp, #8]
 80075ee:	9006      	str	r0, [sp, #24]
 80075f0:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80075f4:	480a      	ldr	r0, [pc, #40]	@ (8007620 <siprintf+0x3c>)
 80075f6:	9107      	str	r1, [sp, #28]
 80075f8:	9104      	str	r1, [sp, #16]
 80075fa:	490a      	ldr	r1, [pc, #40]	@ (8007624 <siprintf+0x40>)
 80075fc:	f853 2b04 	ldr.w	r2, [r3], #4
 8007600:	9105      	str	r1, [sp, #20]
 8007602:	2400      	movs	r4, #0
 8007604:	a902      	add	r1, sp, #8
 8007606:	6800      	ldr	r0, [r0, #0]
 8007608:	9301      	str	r3, [sp, #4]
 800760a:	941b      	str	r4, [sp, #108]	@ 0x6c
 800760c:	f002 fc4e 	bl	8009eac <_svfiprintf_r>
 8007610:	9b02      	ldr	r3, [sp, #8]
 8007612:	701c      	strb	r4, [r3, #0]
 8007614:	b01d      	add	sp, #116	@ 0x74
 8007616:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800761a:	b003      	add	sp, #12
 800761c:	4770      	bx	lr
 800761e:	bf00      	nop
 8007620:	20000a58 	.word	0x20000a58
 8007624:	ffff0208 	.word	0xffff0208

08007628 <__sread>:
 8007628:	b510      	push	{r4, lr}
 800762a:	460c      	mov	r4, r1
 800762c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007630:	f000 f900 	bl	8007834 <_read_r>
 8007634:	2800      	cmp	r0, #0
 8007636:	bfab      	itete	ge
 8007638:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800763a:	89a3      	ldrhlt	r3, [r4, #12]
 800763c:	181b      	addge	r3, r3, r0
 800763e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8007642:	bfac      	ite	ge
 8007644:	6563      	strge	r3, [r4, #84]	@ 0x54
 8007646:	81a3      	strhlt	r3, [r4, #12]
 8007648:	bd10      	pop	{r4, pc}

0800764a <__swrite>:
 800764a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800764e:	461f      	mov	r7, r3
 8007650:	898b      	ldrh	r3, [r1, #12]
 8007652:	05db      	lsls	r3, r3, #23
 8007654:	4605      	mov	r5, r0
 8007656:	460c      	mov	r4, r1
 8007658:	4616      	mov	r6, r2
 800765a:	d505      	bpl.n	8007668 <__swrite+0x1e>
 800765c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007660:	2302      	movs	r3, #2
 8007662:	2200      	movs	r2, #0
 8007664:	f000 f8d4 	bl	8007810 <_lseek_r>
 8007668:	89a3      	ldrh	r3, [r4, #12]
 800766a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800766e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007672:	81a3      	strh	r3, [r4, #12]
 8007674:	4632      	mov	r2, r6
 8007676:	463b      	mov	r3, r7
 8007678:	4628      	mov	r0, r5
 800767a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800767e:	f000 b8eb 	b.w	8007858 <_write_r>

08007682 <__sseek>:
 8007682:	b510      	push	{r4, lr}
 8007684:	460c      	mov	r4, r1
 8007686:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800768a:	f000 f8c1 	bl	8007810 <_lseek_r>
 800768e:	1c43      	adds	r3, r0, #1
 8007690:	89a3      	ldrh	r3, [r4, #12]
 8007692:	bf15      	itete	ne
 8007694:	6560      	strne	r0, [r4, #84]	@ 0x54
 8007696:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800769a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800769e:	81a3      	strheq	r3, [r4, #12]
 80076a0:	bf18      	it	ne
 80076a2:	81a3      	strhne	r3, [r4, #12]
 80076a4:	bd10      	pop	{r4, pc}

080076a6 <__sclose>:
 80076a6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80076aa:	f000 b8a1 	b.w	80077f0 <_close_r>

080076ae <__swbuf_r>:
 80076ae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80076b0:	460e      	mov	r6, r1
 80076b2:	4614      	mov	r4, r2
 80076b4:	4605      	mov	r5, r0
 80076b6:	b118      	cbz	r0, 80076c0 <__swbuf_r+0x12>
 80076b8:	6a03      	ldr	r3, [r0, #32]
 80076ba:	b90b      	cbnz	r3, 80076c0 <__swbuf_r+0x12>
 80076bc:	f7ff fefe 	bl	80074bc <__sinit>
 80076c0:	69a3      	ldr	r3, [r4, #24]
 80076c2:	60a3      	str	r3, [r4, #8]
 80076c4:	89a3      	ldrh	r3, [r4, #12]
 80076c6:	071a      	lsls	r2, r3, #28
 80076c8:	d501      	bpl.n	80076ce <__swbuf_r+0x20>
 80076ca:	6923      	ldr	r3, [r4, #16]
 80076cc:	b943      	cbnz	r3, 80076e0 <__swbuf_r+0x32>
 80076ce:	4621      	mov	r1, r4
 80076d0:	4628      	mov	r0, r5
 80076d2:	f000 f82b 	bl	800772c <__swsetup_r>
 80076d6:	b118      	cbz	r0, 80076e0 <__swbuf_r+0x32>
 80076d8:	f04f 37ff 	mov.w	r7, #4294967295
 80076dc:	4638      	mov	r0, r7
 80076de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80076e0:	6823      	ldr	r3, [r4, #0]
 80076e2:	6922      	ldr	r2, [r4, #16]
 80076e4:	1a98      	subs	r0, r3, r2
 80076e6:	6963      	ldr	r3, [r4, #20]
 80076e8:	b2f6      	uxtb	r6, r6
 80076ea:	4283      	cmp	r3, r0
 80076ec:	4637      	mov	r7, r6
 80076ee:	dc05      	bgt.n	80076fc <__swbuf_r+0x4e>
 80076f0:	4621      	mov	r1, r4
 80076f2:	4628      	mov	r0, r5
 80076f4:	f002 fd5a 	bl	800a1ac <_fflush_r>
 80076f8:	2800      	cmp	r0, #0
 80076fa:	d1ed      	bne.n	80076d8 <__swbuf_r+0x2a>
 80076fc:	68a3      	ldr	r3, [r4, #8]
 80076fe:	3b01      	subs	r3, #1
 8007700:	60a3      	str	r3, [r4, #8]
 8007702:	6823      	ldr	r3, [r4, #0]
 8007704:	1c5a      	adds	r2, r3, #1
 8007706:	6022      	str	r2, [r4, #0]
 8007708:	701e      	strb	r6, [r3, #0]
 800770a:	6962      	ldr	r2, [r4, #20]
 800770c:	1c43      	adds	r3, r0, #1
 800770e:	429a      	cmp	r2, r3
 8007710:	d004      	beq.n	800771c <__swbuf_r+0x6e>
 8007712:	89a3      	ldrh	r3, [r4, #12]
 8007714:	07db      	lsls	r3, r3, #31
 8007716:	d5e1      	bpl.n	80076dc <__swbuf_r+0x2e>
 8007718:	2e0a      	cmp	r6, #10
 800771a:	d1df      	bne.n	80076dc <__swbuf_r+0x2e>
 800771c:	4621      	mov	r1, r4
 800771e:	4628      	mov	r0, r5
 8007720:	f002 fd44 	bl	800a1ac <_fflush_r>
 8007724:	2800      	cmp	r0, #0
 8007726:	d0d9      	beq.n	80076dc <__swbuf_r+0x2e>
 8007728:	e7d6      	b.n	80076d8 <__swbuf_r+0x2a>
	...

0800772c <__swsetup_r>:
 800772c:	b538      	push	{r3, r4, r5, lr}
 800772e:	4b29      	ldr	r3, [pc, #164]	@ (80077d4 <__swsetup_r+0xa8>)
 8007730:	4605      	mov	r5, r0
 8007732:	6818      	ldr	r0, [r3, #0]
 8007734:	460c      	mov	r4, r1
 8007736:	b118      	cbz	r0, 8007740 <__swsetup_r+0x14>
 8007738:	6a03      	ldr	r3, [r0, #32]
 800773a:	b90b      	cbnz	r3, 8007740 <__swsetup_r+0x14>
 800773c:	f7ff febe 	bl	80074bc <__sinit>
 8007740:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007744:	0719      	lsls	r1, r3, #28
 8007746:	d422      	bmi.n	800778e <__swsetup_r+0x62>
 8007748:	06da      	lsls	r2, r3, #27
 800774a:	d407      	bmi.n	800775c <__swsetup_r+0x30>
 800774c:	2209      	movs	r2, #9
 800774e:	602a      	str	r2, [r5, #0]
 8007750:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007754:	81a3      	strh	r3, [r4, #12]
 8007756:	f04f 30ff 	mov.w	r0, #4294967295
 800775a:	e033      	b.n	80077c4 <__swsetup_r+0x98>
 800775c:	0758      	lsls	r0, r3, #29
 800775e:	d512      	bpl.n	8007786 <__swsetup_r+0x5a>
 8007760:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007762:	b141      	cbz	r1, 8007776 <__swsetup_r+0x4a>
 8007764:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007768:	4299      	cmp	r1, r3
 800776a:	d002      	beq.n	8007772 <__swsetup_r+0x46>
 800776c:	4628      	mov	r0, r5
 800776e:	f000 ff13 	bl	8008598 <_free_r>
 8007772:	2300      	movs	r3, #0
 8007774:	6363      	str	r3, [r4, #52]	@ 0x34
 8007776:	89a3      	ldrh	r3, [r4, #12]
 8007778:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800777c:	81a3      	strh	r3, [r4, #12]
 800777e:	2300      	movs	r3, #0
 8007780:	6063      	str	r3, [r4, #4]
 8007782:	6923      	ldr	r3, [r4, #16]
 8007784:	6023      	str	r3, [r4, #0]
 8007786:	89a3      	ldrh	r3, [r4, #12]
 8007788:	f043 0308 	orr.w	r3, r3, #8
 800778c:	81a3      	strh	r3, [r4, #12]
 800778e:	6923      	ldr	r3, [r4, #16]
 8007790:	b94b      	cbnz	r3, 80077a6 <__swsetup_r+0x7a>
 8007792:	89a3      	ldrh	r3, [r4, #12]
 8007794:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8007798:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800779c:	d003      	beq.n	80077a6 <__swsetup_r+0x7a>
 800779e:	4621      	mov	r1, r4
 80077a0:	4628      	mov	r0, r5
 80077a2:	f002 fd51 	bl	800a248 <__smakebuf_r>
 80077a6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80077aa:	f013 0201 	ands.w	r2, r3, #1
 80077ae:	d00a      	beq.n	80077c6 <__swsetup_r+0x9a>
 80077b0:	2200      	movs	r2, #0
 80077b2:	60a2      	str	r2, [r4, #8]
 80077b4:	6962      	ldr	r2, [r4, #20]
 80077b6:	4252      	negs	r2, r2
 80077b8:	61a2      	str	r2, [r4, #24]
 80077ba:	6922      	ldr	r2, [r4, #16]
 80077bc:	b942      	cbnz	r2, 80077d0 <__swsetup_r+0xa4>
 80077be:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80077c2:	d1c5      	bne.n	8007750 <__swsetup_r+0x24>
 80077c4:	bd38      	pop	{r3, r4, r5, pc}
 80077c6:	0799      	lsls	r1, r3, #30
 80077c8:	bf58      	it	pl
 80077ca:	6962      	ldrpl	r2, [r4, #20]
 80077cc:	60a2      	str	r2, [r4, #8]
 80077ce:	e7f4      	b.n	80077ba <__swsetup_r+0x8e>
 80077d0:	2000      	movs	r0, #0
 80077d2:	e7f7      	b.n	80077c4 <__swsetup_r+0x98>
 80077d4:	20000a58 	.word	0x20000a58

080077d8 <memset>:
 80077d8:	4402      	add	r2, r0
 80077da:	4603      	mov	r3, r0
 80077dc:	4293      	cmp	r3, r2
 80077de:	d100      	bne.n	80077e2 <memset+0xa>
 80077e0:	4770      	bx	lr
 80077e2:	f803 1b01 	strb.w	r1, [r3], #1
 80077e6:	e7f9      	b.n	80077dc <memset+0x4>

080077e8 <_localeconv_r>:
 80077e8:	4800      	ldr	r0, [pc, #0]	@ (80077ec <_localeconv_r+0x4>)
 80077ea:	4770      	bx	lr
 80077ec:	20000b98 	.word	0x20000b98

080077f0 <_close_r>:
 80077f0:	b538      	push	{r3, r4, r5, lr}
 80077f2:	4d06      	ldr	r5, [pc, #24]	@ (800780c <_close_r+0x1c>)
 80077f4:	2300      	movs	r3, #0
 80077f6:	4604      	mov	r4, r0
 80077f8:	4608      	mov	r0, r1
 80077fa:	602b      	str	r3, [r5, #0]
 80077fc:	f7fb f972 	bl	8002ae4 <_close>
 8007800:	1c43      	adds	r3, r0, #1
 8007802:	d102      	bne.n	800780a <_close_r+0x1a>
 8007804:	682b      	ldr	r3, [r5, #0]
 8007806:	b103      	cbz	r3, 800780a <_close_r+0x1a>
 8007808:	6023      	str	r3, [r4, #0]
 800780a:	bd38      	pop	{r3, r4, r5, pc}
 800780c:	20001608 	.word	0x20001608

08007810 <_lseek_r>:
 8007810:	b538      	push	{r3, r4, r5, lr}
 8007812:	4d07      	ldr	r5, [pc, #28]	@ (8007830 <_lseek_r+0x20>)
 8007814:	4604      	mov	r4, r0
 8007816:	4608      	mov	r0, r1
 8007818:	4611      	mov	r1, r2
 800781a:	2200      	movs	r2, #0
 800781c:	602a      	str	r2, [r5, #0]
 800781e:	461a      	mov	r2, r3
 8007820:	f7fb f987 	bl	8002b32 <_lseek>
 8007824:	1c43      	adds	r3, r0, #1
 8007826:	d102      	bne.n	800782e <_lseek_r+0x1e>
 8007828:	682b      	ldr	r3, [r5, #0]
 800782a:	b103      	cbz	r3, 800782e <_lseek_r+0x1e>
 800782c:	6023      	str	r3, [r4, #0]
 800782e:	bd38      	pop	{r3, r4, r5, pc}
 8007830:	20001608 	.word	0x20001608

08007834 <_read_r>:
 8007834:	b538      	push	{r3, r4, r5, lr}
 8007836:	4d07      	ldr	r5, [pc, #28]	@ (8007854 <_read_r+0x20>)
 8007838:	4604      	mov	r4, r0
 800783a:	4608      	mov	r0, r1
 800783c:	4611      	mov	r1, r2
 800783e:	2200      	movs	r2, #0
 8007840:	602a      	str	r2, [r5, #0]
 8007842:	461a      	mov	r2, r3
 8007844:	f7fb f915 	bl	8002a72 <_read>
 8007848:	1c43      	adds	r3, r0, #1
 800784a:	d102      	bne.n	8007852 <_read_r+0x1e>
 800784c:	682b      	ldr	r3, [r5, #0]
 800784e:	b103      	cbz	r3, 8007852 <_read_r+0x1e>
 8007850:	6023      	str	r3, [r4, #0]
 8007852:	bd38      	pop	{r3, r4, r5, pc}
 8007854:	20001608 	.word	0x20001608

08007858 <_write_r>:
 8007858:	b538      	push	{r3, r4, r5, lr}
 800785a:	4d07      	ldr	r5, [pc, #28]	@ (8007878 <_write_r+0x20>)
 800785c:	4604      	mov	r4, r0
 800785e:	4608      	mov	r0, r1
 8007860:	4611      	mov	r1, r2
 8007862:	2200      	movs	r2, #0
 8007864:	602a      	str	r2, [r5, #0]
 8007866:	461a      	mov	r2, r3
 8007868:	f7fb f920 	bl	8002aac <_write>
 800786c:	1c43      	adds	r3, r0, #1
 800786e:	d102      	bne.n	8007876 <_write_r+0x1e>
 8007870:	682b      	ldr	r3, [r5, #0]
 8007872:	b103      	cbz	r3, 8007876 <_write_r+0x1e>
 8007874:	6023      	str	r3, [r4, #0]
 8007876:	bd38      	pop	{r3, r4, r5, pc}
 8007878:	20001608 	.word	0x20001608

0800787c <__errno>:
 800787c:	4b01      	ldr	r3, [pc, #4]	@ (8007884 <__errno+0x8>)
 800787e:	6818      	ldr	r0, [r3, #0]
 8007880:	4770      	bx	lr
 8007882:	bf00      	nop
 8007884:	20000a58 	.word	0x20000a58

08007888 <__libc_init_array>:
 8007888:	b570      	push	{r4, r5, r6, lr}
 800788a:	4d0d      	ldr	r5, [pc, #52]	@ (80078c0 <__libc_init_array+0x38>)
 800788c:	4c0d      	ldr	r4, [pc, #52]	@ (80078c4 <__libc_init_array+0x3c>)
 800788e:	1b64      	subs	r4, r4, r5
 8007890:	10a4      	asrs	r4, r4, #2
 8007892:	2600      	movs	r6, #0
 8007894:	42a6      	cmp	r6, r4
 8007896:	d109      	bne.n	80078ac <__libc_init_array+0x24>
 8007898:	4d0b      	ldr	r5, [pc, #44]	@ (80078c8 <__libc_init_array+0x40>)
 800789a:	4c0c      	ldr	r4, [pc, #48]	@ (80078cc <__libc_init_array+0x44>)
 800789c:	f003 fd66 	bl	800b36c <_init>
 80078a0:	1b64      	subs	r4, r4, r5
 80078a2:	10a4      	asrs	r4, r4, #2
 80078a4:	2600      	movs	r6, #0
 80078a6:	42a6      	cmp	r6, r4
 80078a8:	d105      	bne.n	80078b6 <__libc_init_array+0x2e>
 80078aa:	bd70      	pop	{r4, r5, r6, pc}
 80078ac:	f855 3b04 	ldr.w	r3, [r5], #4
 80078b0:	4798      	blx	r3
 80078b2:	3601      	adds	r6, #1
 80078b4:	e7ee      	b.n	8007894 <__libc_init_array+0xc>
 80078b6:	f855 3b04 	ldr.w	r3, [r5], #4
 80078ba:	4798      	blx	r3
 80078bc:	3601      	adds	r6, #1
 80078be:	e7f2      	b.n	80078a6 <__libc_init_array+0x1e>
 80078c0:	0800b884 	.word	0x0800b884
 80078c4:	0800b884 	.word	0x0800b884
 80078c8:	0800b884 	.word	0x0800b884
 80078cc:	0800b888 	.word	0x0800b888

080078d0 <__retarget_lock_init_recursive>:
 80078d0:	4770      	bx	lr

080078d2 <__retarget_lock_acquire_recursive>:
 80078d2:	4770      	bx	lr

080078d4 <__retarget_lock_release_recursive>:
 80078d4:	4770      	bx	lr
	...

080078d8 <nanf>:
 80078d8:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 80078e0 <nanf+0x8>
 80078dc:	4770      	bx	lr
 80078de:	bf00      	nop
 80078e0:	7fc00000 	.word	0x7fc00000

080078e4 <quorem>:
 80078e4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80078e8:	6903      	ldr	r3, [r0, #16]
 80078ea:	690c      	ldr	r4, [r1, #16]
 80078ec:	42a3      	cmp	r3, r4
 80078ee:	4607      	mov	r7, r0
 80078f0:	db7e      	blt.n	80079f0 <quorem+0x10c>
 80078f2:	3c01      	subs	r4, #1
 80078f4:	f101 0814 	add.w	r8, r1, #20
 80078f8:	00a3      	lsls	r3, r4, #2
 80078fa:	f100 0514 	add.w	r5, r0, #20
 80078fe:	9300      	str	r3, [sp, #0]
 8007900:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007904:	9301      	str	r3, [sp, #4]
 8007906:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800790a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800790e:	3301      	adds	r3, #1
 8007910:	429a      	cmp	r2, r3
 8007912:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007916:	fbb2 f6f3 	udiv	r6, r2, r3
 800791a:	d32e      	bcc.n	800797a <quorem+0x96>
 800791c:	f04f 0a00 	mov.w	sl, #0
 8007920:	46c4      	mov	ip, r8
 8007922:	46ae      	mov	lr, r5
 8007924:	46d3      	mov	fp, sl
 8007926:	f85c 3b04 	ldr.w	r3, [ip], #4
 800792a:	b298      	uxth	r0, r3
 800792c:	fb06 a000 	mla	r0, r6, r0, sl
 8007930:	0c02      	lsrs	r2, r0, #16
 8007932:	0c1b      	lsrs	r3, r3, #16
 8007934:	fb06 2303 	mla	r3, r6, r3, r2
 8007938:	f8de 2000 	ldr.w	r2, [lr]
 800793c:	b280      	uxth	r0, r0
 800793e:	b292      	uxth	r2, r2
 8007940:	1a12      	subs	r2, r2, r0
 8007942:	445a      	add	r2, fp
 8007944:	f8de 0000 	ldr.w	r0, [lr]
 8007948:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800794c:	b29b      	uxth	r3, r3
 800794e:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8007952:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8007956:	b292      	uxth	r2, r2
 8007958:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800795c:	45e1      	cmp	r9, ip
 800795e:	f84e 2b04 	str.w	r2, [lr], #4
 8007962:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8007966:	d2de      	bcs.n	8007926 <quorem+0x42>
 8007968:	9b00      	ldr	r3, [sp, #0]
 800796a:	58eb      	ldr	r3, [r5, r3]
 800796c:	b92b      	cbnz	r3, 800797a <quorem+0x96>
 800796e:	9b01      	ldr	r3, [sp, #4]
 8007970:	3b04      	subs	r3, #4
 8007972:	429d      	cmp	r5, r3
 8007974:	461a      	mov	r2, r3
 8007976:	d32f      	bcc.n	80079d8 <quorem+0xf4>
 8007978:	613c      	str	r4, [r7, #16]
 800797a:	4638      	mov	r0, r7
 800797c:	f001 f9c8 	bl	8008d10 <__mcmp>
 8007980:	2800      	cmp	r0, #0
 8007982:	db25      	blt.n	80079d0 <quorem+0xec>
 8007984:	4629      	mov	r1, r5
 8007986:	2000      	movs	r0, #0
 8007988:	f858 2b04 	ldr.w	r2, [r8], #4
 800798c:	f8d1 c000 	ldr.w	ip, [r1]
 8007990:	fa1f fe82 	uxth.w	lr, r2
 8007994:	fa1f f38c 	uxth.w	r3, ip
 8007998:	eba3 030e 	sub.w	r3, r3, lr
 800799c:	4403      	add	r3, r0
 800799e:	0c12      	lsrs	r2, r2, #16
 80079a0:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80079a4:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80079a8:	b29b      	uxth	r3, r3
 80079aa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80079ae:	45c1      	cmp	r9, r8
 80079b0:	f841 3b04 	str.w	r3, [r1], #4
 80079b4:	ea4f 4022 	mov.w	r0, r2, asr #16
 80079b8:	d2e6      	bcs.n	8007988 <quorem+0xa4>
 80079ba:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80079be:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80079c2:	b922      	cbnz	r2, 80079ce <quorem+0xea>
 80079c4:	3b04      	subs	r3, #4
 80079c6:	429d      	cmp	r5, r3
 80079c8:	461a      	mov	r2, r3
 80079ca:	d30b      	bcc.n	80079e4 <quorem+0x100>
 80079cc:	613c      	str	r4, [r7, #16]
 80079ce:	3601      	adds	r6, #1
 80079d0:	4630      	mov	r0, r6
 80079d2:	b003      	add	sp, #12
 80079d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80079d8:	6812      	ldr	r2, [r2, #0]
 80079da:	3b04      	subs	r3, #4
 80079dc:	2a00      	cmp	r2, #0
 80079de:	d1cb      	bne.n	8007978 <quorem+0x94>
 80079e0:	3c01      	subs	r4, #1
 80079e2:	e7c6      	b.n	8007972 <quorem+0x8e>
 80079e4:	6812      	ldr	r2, [r2, #0]
 80079e6:	3b04      	subs	r3, #4
 80079e8:	2a00      	cmp	r2, #0
 80079ea:	d1ef      	bne.n	80079cc <quorem+0xe8>
 80079ec:	3c01      	subs	r4, #1
 80079ee:	e7ea      	b.n	80079c6 <quorem+0xe2>
 80079f0:	2000      	movs	r0, #0
 80079f2:	e7ee      	b.n	80079d2 <quorem+0xee>
 80079f4:	0000      	movs	r0, r0
	...

080079f8 <_dtoa_r>:
 80079f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80079fc:	69c7      	ldr	r7, [r0, #28]
 80079fe:	b097      	sub	sp, #92	@ 0x5c
 8007a00:	ed8d 0b04 	vstr	d0, [sp, #16]
 8007a04:	ec55 4b10 	vmov	r4, r5, d0
 8007a08:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 8007a0a:	9107      	str	r1, [sp, #28]
 8007a0c:	4681      	mov	r9, r0
 8007a0e:	920c      	str	r2, [sp, #48]	@ 0x30
 8007a10:	9311      	str	r3, [sp, #68]	@ 0x44
 8007a12:	b97f      	cbnz	r7, 8007a34 <_dtoa_r+0x3c>
 8007a14:	2010      	movs	r0, #16
 8007a16:	f000 fe09 	bl	800862c <malloc>
 8007a1a:	4602      	mov	r2, r0
 8007a1c:	f8c9 001c 	str.w	r0, [r9, #28]
 8007a20:	b920      	cbnz	r0, 8007a2c <_dtoa_r+0x34>
 8007a22:	4ba9      	ldr	r3, [pc, #676]	@ (8007cc8 <_dtoa_r+0x2d0>)
 8007a24:	21ef      	movs	r1, #239	@ 0xef
 8007a26:	48a9      	ldr	r0, [pc, #676]	@ (8007ccc <_dtoa_r+0x2d4>)
 8007a28:	f002 fcbe 	bl	800a3a8 <__assert_func>
 8007a2c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8007a30:	6007      	str	r7, [r0, #0]
 8007a32:	60c7      	str	r7, [r0, #12]
 8007a34:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8007a38:	6819      	ldr	r1, [r3, #0]
 8007a3a:	b159      	cbz	r1, 8007a54 <_dtoa_r+0x5c>
 8007a3c:	685a      	ldr	r2, [r3, #4]
 8007a3e:	604a      	str	r2, [r1, #4]
 8007a40:	2301      	movs	r3, #1
 8007a42:	4093      	lsls	r3, r2
 8007a44:	608b      	str	r3, [r1, #8]
 8007a46:	4648      	mov	r0, r9
 8007a48:	f000 fee6 	bl	8008818 <_Bfree>
 8007a4c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8007a50:	2200      	movs	r2, #0
 8007a52:	601a      	str	r2, [r3, #0]
 8007a54:	1e2b      	subs	r3, r5, #0
 8007a56:	bfb9      	ittee	lt
 8007a58:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8007a5c:	9305      	strlt	r3, [sp, #20]
 8007a5e:	2300      	movge	r3, #0
 8007a60:	6033      	strge	r3, [r6, #0]
 8007a62:	9f05      	ldr	r7, [sp, #20]
 8007a64:	4b9a      	ldr	r3, [pc, #616]	@ (8007cd0 <_dtoa_r+0x2d8>)
 8007a66:	bfbc      	itt	lt
 8007a68:	2201      	movlt	r2, #1
 8007a6a:	6032      	strlt	r2, [r6, #0]
 8007a6c:	43bb      	bics	r3, r7
 8007a6e:	d112      	bne.n	8007a96 <_dtoa_r+0x9e>
 8007a70:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8007a72:	f242 730f 	movw	r3, #9999	@ 0x270f
 8007a76:	6013      	str	r3, [r2, #0]
 8007a78:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8007a7c:	4323      	orrs	r3, r4
 8007a7e:	f000 855a 	beq.w	8008536 <_dtoa_r+0xb3e>
 8007a82:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8007a84:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 8007ce4 <_dtoa_r+0x2ec>
 8007a88:	2b00      	cmp	r3, #0
 8007a8a:	f000 855c 	beq.w	8008546 <_dtoa_r+0xb4e>
 8007a8e:	f10a 0303 	add.w	r3, sl, #3
 8007a92:	f000 bd56 	b.w	8008542 <_dtoa_r+0xb4a>
 8007a96:	ed9d 7b04 	vldr	d7, [sp, #16]
 8007a9a:	2200      	movs	r2, #0
 8007a9c:	ec51 0b17 	vmov	r0, r1, d7
 8007aa0:	2300      	movs	r3, #0
 8007aa2:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 8007aa6:	f7f9 f80f 	bl	8000ac8 <__aeabi_dcmpeq>
 8007aaa:	4680      	mov	r8, r0
 8007aac:	b158      	cbz	r0, 8007ac6 <_dtoa_r+0xce>
 8007aae:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8007ab0:	2301      	movs	r3, #1
 8007ab2:	6013      	str	r3, [r2, #0]
 8007ab4:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8007ab6:	b113      	cbz	r3, 8007abe <_dtoa_r+0xc6>
 8007ab8:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8007aba:	4b86      	ldr	r3, [pc, #536]	@ (8007cd4 <_dtoa_r+0x2dc>)
 8007abc:	6013      	str	r3, [r2, #0]
 8007abe:	f8df a228 	ldr.w	sl, [pc, #552]	@ 8007ce8 <_dtoa_r+0x2f0>
 8007ac2:	f000 bd40 	b.w	8008546 <_dtoa_r+0xb4e>
 8007ac6:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 8007aca:	aa14      	add	r2, sp, #80	@ 0x50
 8007acc:	a915      	add	r1, sp, #84	@ 0x54
 8007ace:	4648      	mov	r0, r9
 8007ad0:	f001 fa3e 	bl	8008f50 <__d2b>
 8007ad4:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8007ad8:	9002      	str	r0, [sp, #8]
 8007ada:	2e00      	cmp	r6, #0
 8007adc:	d078      	beq.n	8007bd0 <_dtoa_r+0x1d8>
 8007ade:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007ae0:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 8007ae4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007ae8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8007aec:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8007af0:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8007af4:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8007af8:	4619      	mov	r1, r3
 8007afa:	2200      	movs	r2, #0
 8007afc:	4b76      	ldr	r3, [pc, #472]	@ (8007cd8 <_dtoa_r+0x2e0>)
 8007afe:	f7f8 fbc3 	bl	8000288 <__aeabi_dsub>
 8007b02:	a36b      	add	r3, pc, #428	@ (adr r3, 8007cb0 <_dtoa_r+0x2b8>)
 8007b04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b08:	f7f8 fd76 	bl	80005f8 <__aeabi_dmul>
 8007b0c:	a36a      	add	r3, pc, #424	@ (adr r3, 8007cb8 <_dtoa_r+0x2c0>)
 8007b0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b12:	f7f8 fbbb 	bl	800028c <__adddf3>
 8007b16:	4604      	mov	r4, r0
 8007b18:	4630      	mov	r0, r6
 8007b1a:	460d      	mov	r5, r1
 8007b1c:	f7f8 fd02 	bl	8000524 <__aeabi_i2d>
 8007b20:	a367      	add	r3, pc, #412	@ (adr r3, 8007cc0 <_dtoa_r+0x2c8>)
 8007b22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b26:	f7f8 fd67 	bl	80005f8 <__aeabi_dmul>
 8007b2a:	4602      	mov	r2, r0
 8007b2c:	460b      	mov	r3, r1
 8007b2e:	4620      	mov	r0, r4
 8007b30:	4629      	mov	r1, r5
 8007b32:	f7f8 fbab 	bl	800028c <__adddf3>
 8007b36:	4604      	mov	r4, r0
 8007b38:	460d      	mov	r5, r1
 8007b3a:	f7f9 f80d 	bl	8000b58 <__aeabi_d2iz>
 8007b3e:	2200      	movs	r2, #0
 8007b40:	4607      	mov	r7, r0
 8007b42:	2300      	movs	r3, #0
 8007b44:	4620      	mov	r0, r4
 8007b46:	4629      	mov	r1, r5
 8007b48:	f7f8 ffc8 	bl	8000adc <__aeabi_dcmplt>
 8007b4c:	b140      	cbz	r0, 8007b60 <_dtoa_r+0x168>
 8007b4e:	4638      	mov	r0, r7
 8007b50:	f7f8 fce8 	bl	8000524 <__aeabi_i2d>
 8007b54:	4622      	mov	r2, r4
 8007b56:	462b      	mov	r3, r5
 8007b58:	f7f8 ffb6 	bl	8000ac8 <__aeabi_dcmpeq>
 8007b5c:	b900      	cbnz	r0, 8007b60 <_dtoa_r+0x168>
 8007b5e:	3f01      	subs	r7, #1
 8007b60:	2f16      	cmp	r7, #22
 8007b62:	d852      	bhi.n	8007c0a <_dtoa_r+0x212>
 8007b64:	4b5d      	ldr	r3, [pc, #372]	@ (8007cdc <_dtoa_r+0x2e4>)
 8007b66:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8007b6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b6e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8007b72:	f7f8 ffb3 	bl	8000adc <__aeabi_dcmplt>
 8007b76:	2800      	cmp	r0, #0
 8007b78:	d049      	beq.n	8007c0e <_dtoa_r+0x216>
 8007b7a:	3f01      	subs	r7, #1
 8007b7c:	2300      	movs	r3, #0
 8007b7e:	9310      	str	r3, [sp, #64]	@ 0x40
 8007b80:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8007b82:	1b9b      	subs	r3, r3, r6
 8007b84:	1e5a      	subs	r2, r3, #1
 8007b86:	bf45      	ittet	mi
 8007b88:	f1c3 0301 	rsbmi	r3, r3, #1
 8007b8c:	9300      	strmi	r3, [sp, #0]
 8007b8e:	2300      	movpl	r3, #0
 8007b90:	2300      	movmi	r3, #0
 8007b92:	9206      	str	r2, [sp, #24]
 8007b94:	bf54      	ite	pl
 8007b96:	9300      	strpl	r3, [sp, #0]
 8007b98:	9306      	strmi	r3, [sp, #24]
 8007b9a:	2f00      	cmp	r7, #0
 8007b9c:	db39      	blt.n	8007c12 <_dtoa_r+0x21a>
 8007b9e:	9b06      	ldr	r3, [sp, #24]
 8007ba0:	970d      	str	r7, [sp, #52]	@ 0x34
 8007ba2:	443b      	add	r3, r7
 8007ba4:	9306      	str	r3, [sp, #24]
 8007ba6:	2300      	movs	r3, #0
 8007ba8:	9308      	str	r3, [sp, #32]
 8007baa:	9b07      	ldr	r3, [sp, #28]
 8007bac:	2b09      	cmp	r3, #9
 8007bae:	d863      	bhi.n	8007c78 <_dtoa_r+0x280>
 8007bb0:	2b05      	cmp	r3, #5
 8007bb2:	bfc4      	itt	gt
 8007bb4:	3b04      	subgt	r3, #4
 8007bb6:	9307      	strgt	r3, [sp, #28]
 8007bb8:	9b07      	ldr	r3, [sp, #28]
 8007bba:	f1a3 0302 	sub.w	r3, r3, #2
 8007bbe:	bfcc      	ite	gt
 8007bc0:	2400      	movgt	r4, #0
 8007bc2:	2401      	movle	r4, #1
 8007bc4:	2b03      	cmp	r3, #3
 8007bc6:	d863      	bhi.n	8007c90 <_dtoa_r+0x298>
 8007bc8:	e8df f003 	tbb	[pc, r3]
 8007bcc:	2b375452 	.word	0x2b375452
 8007bd0:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8007bd4:	441e      	add	r6, r3
 8007bd6:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8007bda:	2b20      	cmp	r3, #32
 8007bdc:	bfc1      	itttt	gt
 8007bde:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8007be2:	409f      	lslgt	r7, r3
 8007be4:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8007be8:	fa24 f303 	lsrgt.w	r3, r4, r3
 8007bec:	bfd6      	itet	le
 8007bee:	f1c3 0320 	rsble	r3, r3, #32
 8007bf2:	ea47 0003 	orrgt.w	r0, r7, r3
 8007bf6:	fa04 f003 	lslle.w	r0, r4, r3
 8007bfa:	f7f8 fc83 	bl	8000504 <__aeabi_ui2d>
 8007bfe:	2201      	movs	r2, #1
 8007c00:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8007c04:	3e01      	subs	r6, #1
 8007c06:	9212      	str	r2, [sp, #72]	@ 0x48
 8007c08:	e776      	b.n	8007af8 <_dtoa_r+0x100>
 8007c0a:	2301      	movs	r3, #1
 8007c0c:	e7b7      	b.n	8007b7e <_dtoa_r+0x186>
 8007c0e:	9010      	str	r0, [sp, #64]	@ 0x40
 8007c10:	e7b6      	b.n	8007b80 <_dtoa_r+0x188>
 8007c12:	9b00      	ldr	r3, [sp, #0]
 8007c14:	1bdb      	subs	r3, r3, r7
 8007c16:	9300      	str	r3, [sp, #0]
 8007c18:	427b      	negs	r3, r7
 8007c1a:	9308      	str	r3, [sp, #32]
 8007c1c:	2300      	movs	r3, #0
 8007c1e:	930d      	str	r3, [sp, #52]	@ 0x34
 8007c20:	e7c3      	b.n	8007baa <_dtoa_r+0x1b2>
 8007c22:	2301      	movs	r3, #1
 8007c24:	9309      	str	r3, [sp, #36]	@ 0x24
 8007c26:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8007c28:	eb07 0b03 	add.w	fp, r7, r3
 8007c2c:	f10b 0301 	add.w	r3, fp, #1
 8007c30:	2b01      	cmp	r3, #1
 8007c32:	9303      	str	r3, [sp, #12]
 8007c34:	bfb8      	it	lt
 8007c36:	2301      	movlt	r3, #1
 8007c38:	e006      	b.n	8007c48 <_dtoa_r+0x250>
 8007c3a:	2301      	movs	r3, #1
 8007c3c:	9309      	str	r3, [sp, #36]	@ 0x24
 8007c3e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8007c40:	2b00      	cmp	r3, #0
 8007c42:	dd28      	ble.n	8007c96 <_dtoa_r+0x29e>
 8007c44:	469b      	mov	fp, r3
 8007c46:	9303      	str	r3, [sp, #12]
 8007c48:	f8d9 001c 	ldr.w	r0, [r9, #28]
 8007c4c:	2100      	movs	r1, #0
 8007c4e:	2204      	movs	r2, #4
 8007c50:	f102 0514 	add.w	r5, r2, #20
 8007c54:	429d      	cmp	r5, r3
 8007c56:	d926      	bls.n	8007ca6 <_dtoa_r+0x2ae>
 8007c58:	6041      	str	r1, [r0, #4]
 8007c5a:	4648      	mov	r0, r9
 8007c5c:	f000 fd9c 	bl	8008798 <_Balloc>
 8007c60:	4682      	mov	sl, r0
 8007c62:	2800      	cmp	r0, #0
 8007c64:	d142      	bne.n	8007cec <_dtoa_r+0x2f4>
 8007c66:	4b1e      	ldr	r3, [pc, #120]	@ (8007ce0 <_dtoa_r+0x2e8>)
 8007c68:	4602      	mov	r2, r0
 8007c6a:	f240 11af 	movw	r1, #431	@ 0x1af
 8007c6e:	e6da      	b.n	8007a26 <_dtoa_r+0x2e>
 8007c70:	2300      	movs	r3, #0
 8007c72:	e7e3      	b.n	8007c3c <_dtoa_r+0x244>
 8007c74:	2300      	movs	r3, #0
 8007c76:	e7d5      	b.n	8007c24 <_dtoa_r+0x22c>
 8007c78:	2401      	movs	r4, #1
 8007c7a:	2300      	movs	r3, #0
 8007c7c:	9307      	str	r3, [sp, #28]
 8007c7e:	9409      	str	r4, [sp, #36]	@ 0x24
 8007c80:	f04f 3bff 	mov.w	fp, #4294967295
 8007c84:	2200      	movs	r2, #0
 8007c86:	f8cd b00c 	str.w	fp, [sp, #12]
 8007c8a:	2312      	movs	r3, #18
 8007c8c:	920c      	str	r2, [sp, #48]	@ 0x30
 8007c8e:	e7db      	b.n	8007c48 <_dtoa_r+0x250>
 8007c90:	2301      	movs	r3, #1
 8007c92:	9309      	str	r3, [sp, #36]	@ 0x24
 8007c94:	e7f4      	b.n	8007c80 <_dtoa_r+0x288>
 8007c96:	f04f 0b01 	mov.w	fp, #1
 8007c9a:	f8cd b00c 	str.w	fp, [sp, #12]
 8007c9e:	465b      	mov	r3, fp
 8007ca0:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 8007ca4:	e7d0      	b.n	8007c48 <_dtoa_r+0x250>
 8007ca6:	3101      	adds	r1, #1
 8007ca8:	0052      	lsls	r2, r2, #1
 8007caa:	e7d1      	b.n	8007c50 <_dtoa_r+0x258>
 8007cac:	f3af 8000 	nop.w
 8007cb0:	636f4361 	.word	0x636f4361
 8007cb4:	3fd287a7 	.word	0x3fd287a7
 8007cb8:	8b60c8b3 	.word	0x8b60c8b3
 8007cbc:	3fc68a28 	.word	0x3fc68a28
 8007cc0:	509f79fb 	.word	0x509f79fb
 8007cc4:	3fd34413 	.word	0x3fd34413
 8007cc8:	0800b49a 	.word	0x0800b49a
 8007ccc:	0800b4b1 	.word	0x0800b4b1
 8007cd0:	7ff00000 	.word	0x7ff00000
 8007cd4:	0800b465 	.word	0x0800b465
 8007cd8:	3ff80000 	.word	0x3ff80000
 8007cdc:	0800b660 	.word	0x0800b660
 8007ce0:	0800b509 	.word	0x0800b509
 8007ce4:	0800b496 	.word	0x0800b496
 8007ce8:	0800b464 	.word	0x0800b464
 8007cec:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8007cf0:	6018      	str	r0, [r3, #0]
 8007cf2:	9b03      	ldr	r3, [sp, #12]
 8007cf4:	2b0e      	cmp	r3, #14
 8007cf6:	f200 80a1 	bhi.w	8007e3c <_dtoa_r+0x444>
 8007cfa:	2c00      	cmp	r4, #0
 8007cfc:	f000 809e 	beq.w	8007e3c <_dtoa_r+0x444>
 8007d00:	2f00      	cmp	r7, #0
 8007d02:	dd33      	ble.n	8007d6c <_dtoa_r+0x374>
 8007d04:	4b9c      	ldr	r3, [pc, #624]	@ (8007f78 <_dtoa_r+0x580>)
 8007d06:	f007 020f 	and.w	r2, r7, #15
 8007d0a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007d0e:	ed93 7b00 	vldr	d7, [r3]
 8007d12:	05f8      	lsls	r0, r7, #23
 8007d14:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 8007d18:	ea4f 1427 	mov.w	r4, r7, asr #4
 8007d1c:	d516      	bpl.n	8007d4c <_dtoa_r+0x354>
 8007d1e:	4b97      	ldr	r3, [pc, #604]	@ (8007f7c <_dtoa_r+0x584>)
 8007d20:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8007d24:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007d28:	f7f8 fd90 	bl	800084c <__aeabi_ddiv>
 8007d2c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007d30:	f004 040f 	and.w	r4, r4, #15
 8007d34:	2603      	movs	r6, #3
 8007d36:	4d91      	ldr	r5, [pc, #580]	@ (8007f7c <_dtoa_r+0x584>)
 8007d38:	b954      	cbnz	r4, 8007d50 <_dtoa_r+0x358>
 8007d3a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8007d3e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007d42:	f7f8 fd83 	bl	800084c <__aeabi_ddiv>
 8007d46:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007d4a:	e028      	b.n	8007d9e <_dtoa_r+0x3a6>
 8007d4c:	2602      	movs	r6, #2
 8007d4e:	e7f2      	b.n	8007d36 <_dtoa_r+0x33e>
 8007d50:	07e1      	lsls	r1, r4, #31
 8007d52:	d508      	bpl.n	8007d66 <_dtoa_r+0x36e>
 8007d54:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8007d58:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007d5c:	f7f8 fc4c 	bl	80005f8 <__aeabi_dmul>
 8007d60:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8007d64:	3601      	adds	r6, #1
 8007d66:	1064      	asrs	r4, r4, #1
 8007d68:	3508      	adds	r5, #8
 8007d6a:	e7e5      	b.n	8007d38 <_dtoa_r+0x340>
 8007d6c:	f000 80af 	beq.w	8007ece <_dtoa_r+0x4d6>
 8007d70:	427c      	negs	r4, r7
 8007d72:	4b81      	ldr	r3, [pc, #516]	@ (8007f78 <_dtoa_r+0x580>)
 8007d74:	4d81      	ldr	r5, [pc, #516]	@ (8007f7c <_dtoa_r+0x584>)
 8007d76:	f004 020f 	and.w	r2, r4, #15
 8007d7a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007d7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d82:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8007d86:	f7f8 fc37 	bl	80005f8 <__aeabi_dmul>
 8007d8a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007d8e:	1124      	asrs	r4, r4, #4
 8007d90:	2300      	movs	r3, #0
 8007d92:	2602      	movs	r6, #2
 8007d94:	2c00      	cmp	r4, #0
 8007d96:	f040 808f 	bne.w	8007eb8 <_dtoa_r+0x4c0>
 8007d9a:	2b00      	cmp	r3, #0
 8007d9c:	d1d3      	bne.n	8007d46 <_dtoa_r+0x34e>
 8007d9e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8007da0:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8007da4:	2b00      	cmp	r3, #0
 8007da6:	f000 8094 	beq.w	8007ed2 <_dtoa_r+0x4da>
 8007daa:	4b75      	ldr	r3, [pc, #468]	@ (8007f80 <_dtoa_r+0x588>)
 8007dac:	2200      	movs	r2, #0
 8007dae:	4620      	mov	r0, r4
 8007db0:	4629      	mov	r1, r5
 8007db2:	f7f8 fe93 	bl	8000adc <__aeabi_dcmplt>
 8007db6:	2800      	cmp	r0, #0
 8007db8:	f000 808b 	beq.w	8007ed2 <_dtoa_r+0x4da>
 8007dbc:	9b03      	ldr	r3, [sp, #12]
 8007dbe:	2b00      	cmp	r3, #0
 8007dc0:	f000 8087 	beq.w	8007ed2 <_dtoa_r+0x4da>
 8007dc4:	f1bb 0f00 	cmp.w	fp, #0
 8007dc8:	dd34      	ble.n	8007e34 <_dtoa_r+0x43c>
 8007dca:	4620      	mov	r0, r4
 8007dcc:	4b6d      	ldr	r3, [pc, #436]	@ (8007f84 <_dtoa_r+0x58c>)
 8007dce:	2200      	movs	r2, #0
 8007dd0:	4629      	mov	r1, r5
 8007dd2:	f7f8 fc11 	bl	80005f8 <__aeabi_dmul>
 8007dd6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007dda:	f107 38ff 	add.w	r8, r7, #4294967295
 8007dde:	3601      	adds	r6, #1
 8007de0:	465c      	mov	r4, fp
 8007de2:	4630      	mov	r0, r6
 8007de4:	f7f8 fb9e 	bl	8000524 <__aeabi_i2d>
 8007de8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007dec:	f7f8 fc04 	bl	80005f8 <__aeabi_dmul>
 8007df0:	4b65      	ldr	r3, [pc, #404]	@ (8007f88 <_dtoa_r+0x590>)
 8007df2:	2200      	movs	r2, #0
 8007df4:	f7f8 fa4a 	bl	800028c <__adddf3>
 8007df8:	4605      	mov	r5, r0
 8007dfa:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8007dfe:	2c00      	cmp	r4, #0
 8007e00:	d16a      	bne.n	8007ed8 <_dtoa_r+0x4e0>
 8007e02:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007e06:	4b61      	ldr	r3, [pc, #388]	@ (8007f8c <_dtoa_r+0x594>)
 8007e08:	2200      	movs	r2, #0
 8007e0a:	f7f8 fa3d 	bl	8000288 <__aeabi_dsub>
 8007e0e:	4602      	mov	r2, r0
 8007e10:	460b      	mov	r3, r1
 8007e12:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8007e16:	462a      	mov	r2, r5
 8007e18:	4633      	mov	r3, r6
 8007e1a:	f7f8 fe7d 	bl	8000b18 <__aeabi_dcmpgt>
 8007e1e:	2800      	cmp	r0, #0
 8007e20:	f040 8298 	bne.w	8008354 <_dtoa_r+0x95c>
 8007e24:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007e28:	462a      	mov	r2, r5
 8007e2a:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8007e2e:	f7f8 fe55 	bl	8000adc <__aeabi_dcmplt>
 8007e32:	bb38      	cbnz	r0, 8007e84 <_dtoa_r+0x48c>
 8007e34:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 8007e38:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8007e3c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	f2c0 8157 	blt.w	80080f2 <_dtoa_r+0x6fa>
 8007e44:	2f0e      	cmp	r7, #14
 8007e46:	f300 8154 	bgt.w	80080f2 <_dtoa_r+0x6fa>
 8007e4a:	4b4b      	ldr	r3, [pc, #300]	@ (8007f78 <_dtoa_r+0x580>)
 8007e4c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8007e50:	ed93 7b00 	vldr	d7, [r3]
 8007e54:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8007e56:	2b00      	cmp	r3, #0
 8007e58:	ed8d 7b00 	vstr	d7, [sp]
 8007e5c:	f280 80e5 	bge.w	800802a <_dtoa_r+0x632>
 8007e60:	9b03      	ldr	r3, [sp, #12]
 8007e62:	2b00      	cmp	r3, #0
 8007e64:	f300 80e1 	bgt.w	800802a <_dtoa_r+0x632>
 8007e68:	d10c      	bne.n	8007e84 <_dtoa_r+0x48c>
 8007e6a:	4b48      	ldr	r3, [pc, #288]	@ (8007f8c <_dtoa_r+0x594>)
 8007e6c:	2200      	movs	r2, #0
 8007e6e:	ec51 0b17 	vmov	r0, r1, d7
 8007e72:	f7f8 fbc1 	bl	80005f8 <__aeabi_dmul>
 8007e76:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007e7a:	f7f8 fe43 	bl	8000b04 <__aeabi_dcmpge>
 8007e7e:	2800      	cmp	r0, #0
 8007e80:	f000 8266 	beq.w	8008350 <_dtoa_r+0x958>
 8007e84:	2400      	movs	r4, #0
 8007e86:	4625      	mov	r5, r4
 8007e88:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8007e8a:	4656      	mov	r6, sl
 8007e8c:	ea6f 0803 	mvn.w	r8, r3
 8007e90:	2700      	movs	r7, #0
 8007e92:	4621      	mov	r1, r4
 8007e94:	4648      	mov	r0, r9
 8007e96:	f000 fcbf 	bl	8008818 <_Bfree>
 8007e9a:	2d00      	cmp	r5, #0
 8007e9c:	f000 80bd 	beq.w	800801a <_dtoa_r+0x622>
 8007ea0:	b12f      	cbz	r7, 8007eae <_dtoa_r+0x4b6>
 8007ea2:	42af      	cmp	r7, r5
 8007ea4:	d003      	beq.n	8007eae <_dtoa_r+0x4b6>
 8007ea6:	4639      	mov	r1, r7
 8007ea8:	4648      	mov	r0, r9
 8007eaa:	f000 fcb5 	bl	8008818 <_Bfree>
 8007eae:	4629      	mov	r1, r5
 8007eb0:	4648      	mov	r0, r9
 8007eb2:	f000 fcb1 	bl	8008818 <_Bfree>
 8007eb6:	e0b0      	b.n	800801a <_dtoa_r+0x622>
 8007eb8:	07e2      	lsls	r2, r4, #31
 8007eba:	d505      	bpl.n	8007ec8 <_dtoa_r+0x4d0>
 8007ebc:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007ec0:	f7f8 fb9a 	bl	80005f8 <__aeabi_dmul>
 8007ec4:	3601      	adds	r6, #1
 8007ec6:	2301      	movs	r3, #1
 8007ec8:	1064      	asrs	r4, r4, #1
 8007eca:	3508      	adds	r5, #8
 8007ecc:	e762      	b.n	8007d94 <_dtoa_r+0x39c>
 8007ece:	2602      	movs	r6, #2
 8007ed0:	e765      	b.n	8007d9e <_dtoa_r+0x3a6>
 8007ed2:	9c03      	ldr	r4, [sp, #12]
 8007ed4:	46b8      	mov	r8, r7
 8007ed6:	e784      	b.n	8007de2 <_dtoa_r+0x3ea>
 8007ed8:	4b27      	ldr	r3, [pc, #156]	@ (8007f78 <_dtoa_r+0x580>)
 8007eda:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8007edc:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007ee0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007ee4:	4454      	add	r4, sl
 8007ee6:	2900      	cmp	r1, #0
 8007ee8:	d054      	beq.n	8007f94 <_dtoa_r+0x59c>
 8007eea:	4929      	ldr	r1, [pc, #164]	@ (8007f90 <_dtoa_r+0x598>)
 8007eec:	2000      	movs	r0, #0
 8007eee:	f7f8 fcad 	bl	800084c <__aeabi_ddiv>
 8007ef2:	4633      	mov	r3, r6
 8007ef4:	462a      	mov	r2, r5
 8007ef6:	f7f8 f9c7 	bl	8000288 <__aeabi_dsub>
 8007efa:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8007efe:	4656      	mov	r6, sl
 8007f00:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007f04:	f7f8 fe28 	bl	8000b58 <__aeabi_d2iz>
 8007f08:	4605      	mov	r5, r0
 8007f0a:	f7f8 fb0b 	bl	8000524 <__aeabi_i2d>
 8007f0e:	4602      	mov	r2, r0
 8007f10:	460b      	mov	r3, r1
 8007f12:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007f16:	f7f8 f9b7 	bl	8000288 <__aeabi_dsub>
 8007f1a:	3530      	adds	r5, #48	@ 0x30
 8007f1c:	4602      	mov	r2, r0
 8007f1e:	460b      	mov	r3, r1
 8007f20:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8007f24:	f806 5b01 	strb.w	r5, [r6], #1
 8007f28:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8007f2c:	f7f8 fdd6 	bl	8000adc <__aeabi_dcmplt>
 8007f30:	2800      	cmp	r0, #0
 8007f32:	d172      	bne.n	800801a <_dtoa_r+0x622>
 8007f34:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007f38:	4911      	ldr	r1, [pc, #68]	@ (8007f80 <_dtoa_r+0x588>)
 8007f3a:	2000      	movs	r0, #0
 8007f3c:	f7f8 f9a4 	bl	8000288 <__aeabi_dsub>
 8007f40:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8007f44:	f7f8 fdca 	bl	8000adc <__aeabi_dcmplt>
 8007f48:	2800      	cmp	r0, #0
 8007f4a:	f040 80b4 	bne.w	80080b6 <_dtoa_r+0x6be>
 8007f4e:	42a6      	cmp	r6, r4
 8007f50:	f43f af70 	beq.w	8007e34 <_dtoa_r+0x43c>
 8007f54:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8007f58:	4b0a      	ldr	r3, [pc, #40]	@ (8007f84 <_dtoa_r+0x58c>)
 8007f5a:	2200      	movs	r2, #0
 8007f5c:	f7f8 fb4c 	bl	80005f8 <__aeabi_dmul>
 8007f60:	4b08      	ldr	r3, [pc, #32]	@ (8007f84 <_dtoa_r+0x58c>)
 8007f62:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8007f66:	2200      	movs	r2, #0
 8007f68:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007f6c:	f7f8 fb44 	bl	80005f8 <__aeabi_dmul>
 8007f70:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007f74:	e7c4      	b.n	8007f00 <_dtoa_r+0x508>
 8007f76:	bf00      	nop
 8007f78:	0800b660 	.word	0x0800b660
 8007f7c:	0800b638 	.word	0x0800b638
 8007f80:	3ff00000 	.word	0x3ff00000
 8007f84:	40240000 	.word	0x40240000
 8007f88:	401c0000 	.word	0x401c0000
 8007f8c:	40140000 	.word	0x40140000
 8007f90:	3fe00000 	.word	0x3fe00000
 8007f94:	4631      	mov	r1, r6
 8007f96:	4628      	mov	r0, r5
 8007f98:	f7f8 fb2e 	bl	80005f8 <__aeabi_dmul>
 8007f9c:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8007fa0:	9413      	str	r4, [sp, #76]	@ 0x4c
 8007fa2:	4656      	mov	r6, sl
 8007fa4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007fa8:	f7f8 fdd6 	bl	8000b58 <__aeabi_d2iz>
 8007fac:	4605      	mov	r5, r0
 8007fae:	f7f8 fab9 	bl	8000524 <__aeabi_i2d>
 8007fb2:	4602      	mov	r2, r0
 8007fb4:	460b      	mov	r3, r1
 8007fb6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007fba:	f7f8 f965 	bl	8000288 <__aeabi_dsub>
 8007fbe:	3530      	adds	r5, #48	@ 0x30
 8007fc0:	f806 5b01 	strb.w	r5, [r6], #1
 8007fc4:	4602      	mov	r2, r0
 8007fc6:	460b      	mov	r3, r1
 8007fc8:	42a6      	cmp	r6, r4
 8007fca:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8007fce:	f04f 0200 	mov.w	r2, #0
 8007fd2:	d124      	bne.n	800801e <_dtoa_r+0x626>
 8007fd4:	4baf      	ldr	r3, [pc, #700]	@ (8008294 <_dtoa_r+0x89c>)
 8007fd6:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8007fda:	f7f8 f957 	bl	800028c <__adddf3>
 8007fde:	4602      	mov	r2, r0
 8007fe0:	460b      	mov	r3, r1
 8007fe2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007fe6:	f7f8 fd97 	bl	8000b18 <__aeabi_dcmpgt>
 8007fea:	2800      	cmp	r0, #0
 8007fec:	d163      	bne.n	80080b6 <_dtoa_r+0x6be>
 8007fee:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8007ff2:	49a8      	ldr	r1, [pc, #672]	@ (8008294 <_dtoa_r+0x89c>)
 8007ff4:	2000      	movs	r0, #0
 8007ff6:	f7f8 f947 	bl	8000288 <__aeabi_dsub>
 8007ffa:	4602      	mov	r2, r0
 8007ffc:	460b      	mov	r3, r1
 8007ffe:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008002:	f7f8 fd6b 	bl	8000adc <__aeabi_dcmplt>
 8008006:	2800      	cmp	r0, #0
 8008008:	f43f af14 	beq.w	8007e34 <_dtoa_r+0x43c>
 800800c:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800800e:	1e73      	subs	r3, r6, #1
 8008010:	9313      	str	r3, [sp, #76]	@ 0x4c
 8008012:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8008016:	2b30      	cmp	r3, #48	@ 0x30
 8008018:	d0f8      	beq.n	800800c <_dtoa_r+0x614>
 800801a:	4647      	mov	r7, r8
 800801c:	e03b      	b.n	8008096 <_dtoa_r+0x69e>
 800801e:	4b9e      	ldr	r3, [pc, #632]	@ (8008298 <_dtoa_r+0x8a0>)
 8008020:	f7f8 faea 	bl	80005f8 <__aeabi_dmul>
 8008024:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008028:	e7bc      	b.n	8007fa4 <_dtoa_r+0x5ac>
 800802a:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800802e:	4656      	mov	r6, sl
 8008030:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008034:	4620      	mov	r0, r4
 8008036:	4629      	mov	r1, r5
 8008038:	f7f8 fc08 	bl	800084c <__aeabi_ddiv>
 800803c:	f7f8 fd8c 	bl	8000b58 <__aeabi_d2iz>
 8008040:	4680      	mov	r8, r0
 8008042:	f7f8 fa6f 	bl	8000524 <__aeabi_i2d>
 8008046:	e9dd 2300 	ldrd	r2, r3, [sp]
 800804a:	f7f8 fad5 	bl	80005f8 <__aeabi_dmul>
 800804e:	4602      	mov	r2, r0
 8008050:	460b      	mov	r3, r1
 8008052:	4620      	mov	r0, r4
 8008054:	4629      	mov	r1, r5
 8008056:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800805a:	f7f8 f915 	bl	8000288 <__aeabi_dsub>
 800805e:	f806 4b01 	strb.w	r4, [r6], #1
 8008062:	9d03      	ldr	r5, [sp, #12]
 8008064:	eba6 040a 	sub.w	r4, r6, sl
 8008068:	42a5      	cmp	r5, r4
 800806a:	4602      	mov	r2, r0
 800806c:	460b      	mov	r3, r1
 800806e:	d133      	bne.n	80080d8 <_dtoa_r+0x6e0>
 8008070:	f7f8 f90c 	bl	800028c <__adddf3>
 8008074:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008078:	4604      	mov	r4, r0
 800807a:	460d      	mov	r5, r1
 800807c:	f7f8 fd4c 	bl	8000b18 <__aeabi_dcmpgt>
 8008080:	b9c0      	cbnz	r0, 80080b4 <_dtoa_r+0x6bc>
 8008082:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008086:	4620      	mov	r0, r4
 8008088:	4629      	mov	r1, r5
 800808a:	f7f8 fd1d 	bl	8000ac8 <__aeabi_dcmpeq>
 800808e:	b110      	cbz	r0, 8008096 <_dtoa_r+0x69e>
 8008090:	f018 0f01 	tst.w	r8, #1
 8008094:	d10e      	bne.n	80080b4 <_dtoa_r+0x6bc>
 8008096:	9902      	ldr	r1, [sp, #8]
 8008098:	4648      	mov	r0, r9
 800809a:	f000 fbbd 	bl	8008818 <_Bfree>
 800809e:	2300      	movs	r3, #0
 80080a0:	7033      	strb	r3, [r6, #0]
 80080a2:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80080a4:	3701      	adds	r7, #1
 80080a6:	601f      	str	r7, [r3, #0]
 80080a8:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80080aa:	2b00      	cmp	r3, #0
 80080ac:	f000 824b 	beq.w	8008546 <_dtoa_r+0xb4e>
 80080b0:	601e      	str	r6, [r3, #0]
 80080b2:	e248      	b.n	8008546 <_dtoa_r+0xb4e>
 80080b4:	46b8      	mov	r8, r7
 80080b6:	4633      	mov	r3, r6
 80080b8:	461e      	mov	r6, r3
 80080ba:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80080be:	2a39      	cmp	r2, #57	@ 0x39
 80080c0:	d106      	bne.n	80080d0 <_dtoa_r+0x6d8>
 80080c2:	459a      	cmp	sl, r3
 80080c4:	d1f8      	bne.n	80080b8 <_dtoa_r+0x6c0>
 80080c6:	2230      	movs	r2, #48	@ 0x30
 80080c8:	f108 0801 	add.w	r8, r8, #1
 80080cc:	f88a 2000 	strb.w	r2, [sl]
 80080d0:	781a      	ldrb	r2, [r3, #0]
 80080d2:	3201      	adds	r2, #1
 80080d4:	701a      	strb	r2, [r3, #0]
 80080d6:	e7a0      	b.n	800801a <_dtoa_r+0x622>
 80080d8:	4b6f      	ldr	r3, [pc, #444]	@ (8008298 <_dtoa_r+0x8a0>)
 80080da:	2200      	movs	r2, #0
 80080dc:	f7f8 fa8c 	bl	80005f8 <__aeabi_dmul>
 80080e0:	2200      	movs	r2, #0
 80080e2:	2300      	movs	r3, #0
 80080e4:	4604      	mov	r4, r0
 80080e6:	460d      	mov	r5, r1
 80080e8:	f7f8 fcee 	bl	8000ac8 <__aeabi_dcmpeq>
 80080ec:	2800      	cmp	r0, #0
 80080ee:	d09f      	beq.n	8008030 <_dtoa_r+0x638>
 80080f0:	e7d1      	b.n	8008096 <_dtoa_r+0x69e>
 80080f2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80080f4:	2a00      	cmp	r2, #0
 80080f6:	f000 80ea 	beq.w	80082ce <_dtoa_r+0x8d6>
 80080fa:	9a07      	ldr	r2, [sp, #28]
 80080fc:	2a01      	cmp	r2, #1
 80080fe:	f300 80cd 	bgt.w	800829c <_dtoa_r+0x8a4>
 8008102:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8008104:	2a00      	cmp	r2, #0
 8008106:	f000 80c1 	beq.w	800828c <_dtoa_r+0x894>
 800810a:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800810e:	9c08      	ldr	r4, [sp, #32]
 8008110:	9e00      	ldr	r6, [sp, #0]
 8008112:	9a00      	ldr	r2, [sp, #0]
 8008114:	441a      	add	r2, r3
 8008116:	9200      	str	r2, [sp, #0]
 8008118:	9a06      	ldr	r2, [sp, #24]
 800811a:	2101      	movs	r1, #1
 800811c:	441a      	add	r2, r3
 800811e:	4648      	mov	r0, r9
 8008120:	9206      	str	r2, [sp, #24]
 8008122:	f000 fc77 	bl	8008a14 <__i2b>
 8008126:	4605      	mov	r5, r0
 8008128:	b166      	cbz	r6, 8008144 <_dtoa_r+0x74c>
 800812a:	9b06      	ldr	r3, [sp, #24]
 800812c:	2b00      	cmp	r3, #0
 800812e:	dd09      	ble.n	8008144 <_dtoa_r+0x74c>
 8008130:	42b3      	cmp	r3, r6
 8008132:	9a00      	ldr	r2, [sp, #0]
 8008134:	bfa8      	it	ge
 8008136:	4633      	movge	r3, r6
 8008138:	1ad2      	subs	r2, r2, r3
 800813a:	9200      	str	r2, [sp, #0]
 800813c:	9a06      	ldr	r2, [sp, #24]
 800813e:	1af6      	subs	r6, r6, r3
 8008140:	1ad3      	subs	r3, r2, r3
 8008142:	9306      	str	r3, [sp, #24]
 8008144:	9b08      	ldr	r3, [sp, #32]
 8008146:	b30b      	cbz	r3, 800818c <_dtoa_r+0x794>
 8008148:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800814a:	2b00      	cmp	r3, #0
 800814c:	f000 80c6 	beq.w	80082dc <_dtoa_r+0x8e4>
 8008150:	2c00      	cmp	r4, #0
 8008152:	f000 80c0 	beq.w	80082d6 <_dtoa_r+0x8de>
 8008156:	4629      	mov	r1, r5
 8008158:	4622      	mov	r2, r4
 800815a:	4648      	mov	r0, r9
 800815c:	f000 fd12 	bl	8008b84 <__pow5mult>
 8008160:	9a02      	ldr	r2, [sp, #8]
 8008162:	4601      	mov	r1, r0
 8008164:	4605      	mov	r5, r0
 8008166:	4648      	mov	r0, r9
 8008168:	f000 fc6a 	bl	8008a40 <__multiply>
 800816c:	9902      	ldr	r1, [sp, #8]
 800816e:	4680      	mov	r8, r0
 8008170:	4648      	mov	r0, r9
 8008172:	f000 fb51 	bl	8008818 <_Bfree>
 8008176:	9b08      	ldr	r3, [sp, #32]
 8008178:	1b1b      	subs	r3, r3, r4
 800817a:	9308      	str	r3, [sp, #32]
 800817c:	f000 80b1 	beq.w	80082e2 <_dtoa_r+0x8ea>
 8008180:	9a08      	ldr	r2, [sp, #32]
 8008182:	4641      	mov	r1, r8
 8008184:	4648      	mov	r0, r9
 8008186:	f000 fcfd 	bl	8008b84 <__pow5mult>
 800818a:	9002      	str	r0, [sp, #8]
 800818c:	2101      	movs	r1, #1
 800818e:	4648      	mov	r0, r9
 8008190:	f000 fc40 	bl	8008a14 <__i2b>
 8008194:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008196:	4604      	mov	r4, r0
 8008198:	2b00      	cmp	r3, #0
 800819a:	f000 81d8 	beq.w	800854e <_dtoa_r+0xb56>
 800819e:	461a      	mov	r2, r3
 80081a0:	4601      	mov	r1, r0
 80081a2:	4648      	mov	r0, r9
 80081a4:	f000 fcee 	bl	8008b84 <__pow5mult>
 80081a8:	9b07      	ldr	r3, [sp, #28]
 80081aa:	2b01      	cmp	r3, #1
 80081ac:	4604      	mov	r4, r0
 80081ae:	f300 809f 	bgt.w	80082f0 <_dtoa_r+0x8f8>
 80081b2:	9b04      	ldr	r3, [sp, #16]
 80081b4:	2b00      	cmp	r3, #0
 80081b6:	f040 8097 	bne.w	80082e8 <_dtoa_r+0x8f0>
 80081ba:	9b05      	ldr	r3, [sp, #20]
 80081bc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80081c0:	2b00      	cmp	r3, #0
 80081c2:	f040 8093 	bne.w	80082ec <_dtoa_r+0x8f4>
 80081c6:	9b05      	ldr	r3, [sp, #20]
 80081c8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80081cc:	0d1b      	lsrs	r3, r3, #20
 80081ce:	051b      	lsls	r3, r3, #20
 80081d0:	b133      	cbz	r3, 80081e0 <_dtoa_r+0x7e8>
 80081d2:	9b00      	ldr	r3, [sp, #0]
 80081d4:	3301      	adds	r3, #1
 80081d6:	9300      	str	r3, [sp, #0]
 80081d8:	9b06      	ldr	r3, [sp, #24]
 80081da:	3301      	adds	r3, #1
 80081dc:	9306      	str	r3, [sp, #24]
 80081de:	2301      	movs	r3, #1
 80081e0:	9308      	str	r3, [sp, #32]
 80081e2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80081e4:	2b00      	cmp	r3, #0
 80081e6:	f000 81b8 	beq.w	800855a <_dtoa_r+0xb62>
 80081ea:	6923      	ldr	r3, [r4, #16]
 80081ec:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80081f0:	6918      	ldr	r0, [r3, #16]
 80081f2:	f000 fbc3 	bl	800897c <__hi0bits>
 80081f6:	f1c0 0020 	rsb	r0, r0, #32
 80081fa:	9b06      	ldr	r3, [sp, #24]
 80081fc:	4418      	add	r0, r3
 80081fe:	f010 001f 	ands.w	r0, r0, #31
 8008202:	f000 8082 	beq.w	800830a <_dtoa_r+0x912>
 8008206:	f1c0 0320 	rsb	r3, r0, #32
 800820a:	2b04      	cmp	r3, #4
 800820c:	dd73      	ble.n	80082f6 <_dtoa_r+0x8fe>
 800820e:	9b00      	ldr	r3, [sp, #0]
 8008210:	f1c0 001c 	rsb	r0, r0, #28
 8008214:	4403      	add	r3, r0
 8008216:	9300      	str	r3, [sp, #0]
 8008218:	9b06      	ldr	r3, [sp, #24]
 800821a:	4403      	add	r3, r0
 800821c:	4406      	add	r6, r0
 800821e:	9306      	str	r3, [sp, #24]
 8008220:	9b00      	ldr	r3, [sp, #0]
 8008222:	2b00      	cmp	r3, #0
 8008224:	dd05      	ble.n	8008232 <_dtoa_r+0x83a>
 8008226:	9902      	ldr	r1, [sp, #8]
 8008228:	461a      	mov	r2, r3
 800822a:	4648      	mov	r0, r9
 800822c:	f000 fd04 	bl	8008c38 <__lshift>
 8008230:	9002      	str	r0, [sp, #8]
 8008232:	9b06      	ldr	r3, [sp, #24]
 8008234:	2b00      	cmp	r3, #0
 8008236:	dd05      	ble.n	8008244 <_dtoa_r+0x84c>
 8008238:	4621      	mov	r1, r4
 800823a:	461a      	mov	r2, r3
 800823c:	4648      	mov	r0, r9
 800823e:	f000 fcfb 	bl	8008c38 <__lshift>
 8008242:	4604      	mov	r4, r0
 8008244:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8008246:	2b00      	cmp	r3, #0
 8008248:	d061      	beq.n	800830e <_dtoa_r+0x916>
 800824a:	9802      	ldr	r0, [sp, #8]
 800824c:	4621      	mov	r1, r4
 800824e:	f000 fd5f 	bl	8008d10 <__mcmp>
 8008252:	2800      	cmp	r0, #0
 8008254:	da5b      	bge.n	800830e <_dtoa_r+0x916>
 8008256:	2300      	movs	r3, #0
 8008258:	9902      	ldr	r1, [sp, #8]
 800825a:	220a      	movs	r2, #10
 800825c:	4648      	mov	r0, r9
 800825e:	f000 fafd 	bl	800885c <__multadd>
 8008262:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008264:	9002      	str	r0, [sp, #8]
 8008266:	f107 38ff 	add.w	r8, r7, #4294967295
 800826a:	2b00      	cmp	r3, #0
 800826c:	f000 8177 	beq.w	800855e <_dtoa_r+0xb66>
 8008270:	4629      	mov	r1, r5
 8008272:	2300      	movs	r3, #0
 8008274:	220a      	movs	r2, #10
 8008276:	4648      	mov	r0, r9
 8008278:	f000 faf0 	bl	800885c <__multadd>
 800827c:	f1bb 0f00 	cmp.w	fp, #0
 8008280:	4605      	mov	r5, r0
 8008282:	dc6f      	bgt.n	8008364 <_dtoa_r+0x96c>
 8008284:	9b07      	ldr	r3, [sp, #28]
 8008286:	2b02      	cmp	r3, #2
 8008288:	dc49      	bgt.n	800831e <_dtoa_r+0x926>
 800828a:	e06b      	b.n	8008364 <_dtoa_r+0x96c>
 800828c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800828e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8008292:	e73c      	b.n	800810e <_dtoa_r+0x716>
 8008294:	3fe00000 	.word	0x3fe00000
 8008298:	40240000 	.word	0x40240000
 800829c:	9b03      	ldr	r3, [sp, #12]
 800829e:	1e5c      	subs	r4, r3, #1
 80082a0:	9b08      	ldr	r3, [sp, #32]
 80082a2:	42a3      	cmp	r3, r4
 80082a4:	db09      	blt.n	80082ba <_dtoa_r+0x8c2>
 80082a6:	1b1c      	subs	r4, r3, r4
 80082a8:	9b03      	ldr	r3, [sp, #12]
 80082aa:	2b00      	cmp	r3, #0
 80082ac:	f6bf af30 	bge.w	8008110 <_dtoa_r+0x718>
 80082b0:	9b00      	ldr	r3, [sp, #0]
 80082b2:	9a03      	ldr	r2, [sp, #12]
 80082b4:	1a9e      	subs	r6, r3, r2
 80082b6:	2300      	movs	r3, #0
 80082b8:	e72b      	b.n	8008112 <_dtoa_r+0x71a>
 80082ba:	9b08      	ldr	r3, [sp, #32]
 80082bc:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80082be:	9408      	str	r4, [sp, #32]
 80082c0:	1ae3      	subs	r3, r4, r3
 80082c2:	441a      	add	r2, r3
 80082c4:	9e00      	ldr	r6, [sp, #0]
 80082c6:	9b03      	ldr	r3, [sp, #12]
 80082c8:	920d      	str	r2, [sp, #52]	@ 0x34
 80082ca:	2400      	movs	r4, #0
 80082cc:	e721      	b.n	8008112 <_dtoa_r+0x71a>
 80082ce:	9c08      	ldr	r4, [sp, #32]
 80082d0:	9e00      	ldr	r6, [sp, #0]
 80082d2:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 80082d4:	e728      	b.n	8008128 <_dtoa_r+0x730>
 80082d6:	f8dd 8008 	ldr.w	r8, [sp, #8]
 80082da:	e751      	b.n	8008180 <_dtoa_r+0x788>
 80082dc:	9a08      	ldr	r2, [sp, #32]
 80082de:	9902      	ldr	r1, [sp, #8]
 80082e0:	e750      	b.n	8008184 <_dtoa_r+0x78c>
 80082e2:	f8cd 8008 	str.w	r8, [sp, #8]
 80082e6:	e751      	b.n	800818c <_dtoa_r+0x794>
 80082e8:	2300      	movs	r3, #0
 80082ea:	e779      	b.n	80081e0 <_dtoa_r+0x7e8>
 80082ec:	9b04      	ldr	r3, [sp, #16]
 80082ee:	e777      	b.n	80081e0 <_dtoa_r+0x7e8>
 80082f0:	2300      	movs	r3, #0
 80082f2:	9308      	str	r3, [sp, #32]
 80082f4:	e779      	b.n	80081ea <_dtoa_r+0x7f2>
 80082f6:	d093      	beq.n	8008220 <_dtoa_r+0x828>
 80082f8:	9a00      	ldr	r2, [sp, #0]
 80082fa:	331c      	adds	r3, #28
 80082fc:	441a      	add	r2, r3
 80082fe:	9200      	str	r2, [sp, #0]
 8008300:	9a06      	ldr	r2, [sp, #24]
 8008302:	441a      	add	r2, r3
 8008304:	441e      	add	r6, r3
 8008306:	9206      	str	r2, [sp, #24]
 8008308:	e78a      	b.n	8008220 <_dtoa_r+0x828>
 800830a:	4603      	mov	r3, r0
 800830c:	e7f4      	b.n	80082f8 <_dtoa_r+0x900>
 800830e:	9b03      	ldr	r3, [sp, #12]
 8008310:	2b00      	cmp	r3, #0
 8008312:	46b8      	mov	r8, r7
 8008314:	dc20      	bgt.n	8008358 <_dtoa_r+0x960>
 8008316:	469b      	mov	fp, r3
 8008318:	9b07      	ldr	r3, [sp, #28]
 800831a:	2b02      	cmp	r3, #2
 800831c:	dd1e      	ble.n	800835c <_dtoa_r+0x964>
 800831e:	f1bb 0f00 	cmp.w	fp, #0
 8008322:	f47f adb1 	bne.w	8007e88 <_dtoa_r+0x490>
 8008326:	4621      	mov	r1, r4
 8008328:	465b      	mov	r3, fp
 800832a:	2205      	movs	r2, #5
 800832c:	4648      	mov	r0, r9
 800832e:	f000 fa95 	bl	800885c <__multadd>
 8008332:	4601      	mov	r1, r0
 8008334:	4604      	mov	r4, r0
 8008336:	9802      	ldr	r0, [sp, #8]
 8008338:	f000 fcea 	bl	8008d10 <__mcmp>
 800833c:	2800      	cmp	r0, #0
 800833e:	f77f ada3 	ble.w	8007e88 <_dtoa_r+0x490>
 8008342:	4656      	mov	r6, sl
 8008344:	2331      	movs	r3, #49	@ 0x31
 8008346:	f806 3b01 	strb.w	r3, [r6], #1
 800834a:	f108 0801 	add.w	r8, r8, #1
 800834e:	e59f      	b.n	8007e90 <_dtoa_r+0x498>
 8008350:	9c03      	ldr	r4, [sp, #12]
 8008352:	46b8      	mov	r8, r7
 8008354:	4625      	mov	r5, r4
 8008356:	e7f4      	b.n	8008342 <_dtoa_r+0x94a>
 8008358:	f8dd b00c 	ldr.w	fp, [sp, #12]
 800835c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800835e:	2b00      	cmp	r3, #0
 8008360:	f000 8101 	beq.w	8008566 <_dtoa_r+0xb6e>
 8008364:	2e00      	cmp	r6, #0
 8008366:	dd05      	ble.n	8008374 <_dtoa_r+0x97c>
 8008368:	4629      	mov	r1, r5
 800836a:	4632      	mov	r2, r6
 800836c:	4648      	mov	r0, r9
 800836e:	f000 fc63 	bl	8008c38 <__lshift>
 8008372:	4605      	mov	r5, r0
 8008374:	9b08      	ldr	r3, [sp, #32]
 8008376:	2b00      	cmp	r3, #0
 8008378:	d05c      	beq.n	8008434 <_dtoa_r+0xa3c>
 800837a:	6869      	ldr	r1, [r5, #4]
 800837c:	4648      	mov	r0, r9
 800837e:	f000 fa0b 	bl	8008798 <_Balloc>
 8008382:	4606      	mov	r6, r0
 8008384:	b928      	cbnz	r0, 8008392 <_dtoa_r+0x99a>
 8008386:	4b82      	ldr	r3, [pc, #520]	@ (8008590 <_dtoa_r+0xb98>)
 8008388:	4602      	mov	r2, r0
 800838a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800838e:	f7ff bb4a 	b.w	8007a26 <_dtoa_r+0x2e>
 8008392:	692a      	ldr	r2, [r5, #16]
 8008394:	3202      	adds	r2, #2
 8008396:	0092      	lsls	r2, r2, #2
 8008398:	f105 010c 	add.w	r1, r5, #12
 800839c:	300c      	adds	r0, #12
 800839e:	f001 ffed 	bl	800a37c <memcpy>
 80083a2:	2201      	movs	r2, #1
 80083a4:	4631      	mov	r1, r6
 80083a6:	4648      	mov	r0, r9
 80083a8:	f000 fc46 	bl	8008c38 <__lshift>
 80083ac:	f10a 0301 	add.w	r3, sl, #1
 80083b0:	9300      	str	r3, [sp, #0]
 80083b2:	eb0a 030b 	add.w	r3, sl, fp
 80083b6:	9308      	str	r3, [sp, #32]
 80083b8:	9b04      	ldr	r3, [sp, #16]
 80083ba:	f003 0301 	and.w	r3, r3, #1
 80083be:	462f      	mov	r7, r5
 80083c0:	9306      	str	r3, [sp, #24]
 80083c2:	4605      	mov	r5, r0
 80083c4:	9b00      	ldr	r3, [sp, #0]
 80083c6:	9802      	ldr	r0, [sp, #8]
 80083c8:	4621      	mov	r1, r4
 80083ca:	f103 3bff 	add.w	fp, r3, #4294967295
 80083ce:	f7ff fa89 	bl	80078e4 <quorem>
 80083d2:	4603      	mov	r3, r0
 80083d4:	3330      	adds	r3, #48	@ 0x30
 80083d6:	9003      	str	r0, [sp, #12]
 80083d8:	4639      	mov	r1, r7
 80083da:	9802      	ldr	r0, [sp, #8]
 80083dc:	9309      	str	r3, [sp, #36]	@ 0x24
 80083de:	f000 fc97 	bl	8008d10 <__mcmp>
 80083e2:	462a      	mov	r2, r5
 80083e4:	9004      	str	r0, [sp, #16]
 80083e6:	4621      	mov	r1, r4
 80083e8:	4648      	mov	r0, r9
 80083ea:	f000 fcad 	bl	8008d48 <__mdiff>
 80083ee:	68c2      	ldr	r2, [r0, #12]
 80083f0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80083f2:	4606      	mov	r6, r0
 80083f4:	bb02      	cbnz	r2, 8008438 <_dtoa_r+0xa40>
 80083f6:	4601      	mov	r1, r0
 80083f8:	9802      	ldr	r0, [sp, #8]
 80083fa:	f000 fc89 	bl	8008d10 <__mcmp>
 80083fe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008400:	4602      	mov	r2, r0
 8008402:	4631      	mov	r1, r6
 8008404:	4648      	mov	r0, r9
 8008406:	920c      	str	r2, [sp, #48]	@ 0x30
 8008408:	9309      	str	r3, [sp, #36]	@ 0x24
 800840a:	f000 fa05 	bl	8008818 <_Bfree>
 800840e:	9b07      	ldr	r3, [sp, #28]
 8008410:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8008412:	9e00      	ldr	r6, [sp, #0]
 8008414:	ea42 0103 	orr.w	r1, r2, r3
 8008418:	9b06      	ldr	r3, [sp, #24]
 800841a:	4319      	orrs	r1, r3
 800841c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800841e:	d10d      	bne.n	800843c <_dtoa_r+0xa44>
 8008420:	2b39      	cmp	r3, #57	@ 0x39
 8008422:	d027      	beq.n	8008474 <_dtoa_r+0xa7c>
 8008424:	9a04      	ldr	r2, [sp, #16]
 8008426:	2a00      	cmp	r2, #0
 8008428:	dd01      	ble.n	800842e <_dtoa_r+0xa36>
 800842a:	9b03      	ldr	r3, [sp, #12]
 800842c:	3331      	adds	r3, #49	@ 0x31
 800842e:	f88b 3000 	strb.w	r3, [fp]
 8008432:	e52e      	b.n	8007e92 <_dtoa_r+0x49a>
 8008434:	4628      	mov	r0, r5
 8008436:	e7b9      	b.n	80083ac <_dtoa_r+0x9b4>
 8008438:	2201      	movs	r2, #1
 800843a:	e7e2      	b.n	8008402 <_dtoa_r+0xa0a>
 800843c:	9904      	ldr	r1, [sp, #16]
 800843e:	2900      	cmp	r1, #0
 8008440:	db04      	blt.n	800844c <_dtoa_r+0xa54>
 8008442:	9807      	ldr	r0, [sp, #28]
 8008444:	4301      	orrs	r1, r0
 8008446:	9806      	ldr	r0, [sp, #24]
 8008448:	4301      	orrs	r1, r0
 800844a:	d120      	bne.n	800848e <_dtoa_r+0xa96>
 800844c:	2a00      	cmp	r2, #0
 800844e:	ddee      	ble.n	800842e <_dtoa_r+0xa36>
 8008450:	9902      	ldr	r1, [sp, #8]
 8008452:	9300      	str	r3, [sp, #0]
 8008454:	2201      	movs	r2, #1
 8008456:	4648      	mov	r0, r9
 8008458:	f000 fbee 	bl	8008c38 <__lshift>
 800845c:	4621      	mov	r1, r4
 800845e:	9002      	str	r0, [sp, #8]
 8008460:	f000 fc56 	bl	8008d10 <__mcmp>
 8008464:	2800      	cmp	r0, #0
 8008466:	9b00      	ldr	r3, [sp, #0]
 8008468:	dc02      	bgt.n	8008470 <_dtoa_r+0xa78>
 800846a:	d1e0      	bne.n	800842e <_dtoa_r+0xa36>
 800846c:	07da      	lsls	r2, r3, #31
 800846e:	d5de      	bpl.n	800842e <_dtoa_r+0xa36>
 8008470:	2b39      	cmp	r3, #57	@ 0x39
 8008472:	d1da      	bne.n	800842a <_dtoa_r+0xa32>
 8008474:	2339      	movs	r3, #57	@ 0x39
 8008476:	f88b 3000 	strb.w	r3, [fp]
 800847a:	4633      	mov	r3, r6
 800847c:	461e      	mov	r6, r3
 800847e:	3b01      	subs	r3, #1
 8008480:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8008484:	2a39      	cmp	r2, #57	@ 0x39
 8008486:	d04e      	beq.n	8008526 <_dtoa_r+0xb2e>
 8008488:	3201      	adds	r2, #1
 800848a:	701a      	strb	r2, [r3, #0]
 800848c:	e501      	b.n	8007e92 <_dtoa_r+0x49a>
 800848e:	2a00      	cmp	r2, #0
 8008490:	dd03      	ble.n	800849a <_dtoa_r+0xaa2>
 8008492:	2b39      	cmp	r3, #57	@ 0x39
 8008494:	d0ee      	beq.n	8008474 <_dtoa_r+0xa7c>
 8008496:	3301      	adds	r3, #1
 8008498:	e7c9      	b.n	800842e <_dtoa_r+0xa36>
 800849a:	9a00      	ldr	r2, [sp, #0]
 800849c:	9908      	ldr	r1, [sp, #32]
 800849e:	f802 3c01 	strb.w	r3, [r2, #-1]
 80084a2:	428a      	cmp	r2, r1
 80084a4:	d028      	beq.n	80084f8 <_dtoa_r+0xb00>
 80084a6:	9902      	ldr	r1, [sp, #8]
 80084a8:	2300      	movs	r3, #0
 80084aa:	220a      	movs	r2, #10
 80084ac:	4648      	mov	r0, r9
 80084ae:	f000 f9d5 	bl	800885c <__multadd>
 80084b2:	42af      	cmp	r7, r5
 80084b4:	9002      	str	r0, [sp, #8]
 80084b6:	f04f 0300 	mov.w	r3, #0
 80084ba:	f04f 020a 	mov.w	r2, #10
 80084be:	4639      	mov	r1, r7
 80084c0:	4648      	mov	r0, r9
 80084c2:	d107      	bne.n	80084d4 <_dtoa_r+0xadc>
 80084c4:	f000 f9ca 	bl	800885c <__multadd>
 80084c8:	4607      	mov	r7, r0
 80084ca:	4605      	mov	r5, r0
 80084cc:	9b00      	ldr	r3, [sp, #0]
 80084ce:	3301      	adds	r3, #1
 80084d0:	9300      	str	r3, [sp, #0]
 80084d2:	e777      	b.n	80083c4 <_dtoa_r+0x9cc>
 80084d4:	f000 f9c2 	bl	800885c <__multadd>
 80084d8:	4629      	mov	r1, r5
 80084da:	4607      	mov	r7, r0
 80084dc:	2300      	movs	r3, #0
 80084de:	220a      	movs	r2, #10
 80084e0:	4648      	mov	r0, r9
 80084e2:	f000 f9bb 	bl	800885c <__multadd>
 80084e6:	4605      	mov	r5, r0
 80084e8:	e7f0      	b.n	80084cc <_dtoa_r+0xad4>
 80084ea:	f1bb 0f00 	cmp.w	fp, #0
 80084ee:	bfcc      	ite	gt
 80084f0:	465e      	movgt	r6, fp
 80084f2:	2601      	movle	r6, #1
 80084f4:	4456      	add	r6, sl
 80084f6:	2700      	movs	r7, #0
 80084f8:	9902      	ldr	r1, [sp, #8]
 80084fa:	9300      	str	r3, [sp, #0]
 80084fc:	2201      	movs	r2, #1
 80084fe:	4648      	mov	r0, r9
 8008500:	f000 fb9a 	bl	8008c38 <__lshift>
 8008504:	4621      	mov	r1, r4
 8008506:	9002      	str	r0, [sp, #8]
 8008508:	f000 fc02 	bl	8008d10 <__mcmp>
 800850c:	2800      	cmp	r0, #0
 800850e:	dcb4      	bgt.n	800847a <_dtoa_r+0xa82>
 8008510:	d102      	bne.n	8008518 <_dtoa_r+0xb20>
 8008512:	9b00      	ldr	r3, [sp, #0]
 8008514:	07db      	lsls	r3, r3, #31
 8008516:	d4b0      	bmi.n	800847a <_dtoa_r+0xa82>
 8008518:	4633      	mov	r3, r6
 800851a:	461e      	mov	r6, r3
 800851c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008520:	2a30      	cmp	r2, #48	@ 0x30
 8008522:	d0fa      	beq.n	800851a <_dtoa_r+0xb22>
 8008524:	e4b5      	b.n	8007e92 <_dtoa_r+0x49a>
 8008526:	459a      	cmp	sl, r3
 8008528:	d1a8      	bne.n	800847c <_dtoa_r+0xa84>
 800852a:	2331      	movs	r3, #49	@ 0x31
 800852c:	f108 0801 	add.w	r8, r8, #1
 8008530:	f88a 3000 	strb.w	r3, [sl]
 8008534:	e4ad      	b.n	8007e92 <_dtoa_r+0x49a>
 8008536:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8008538:	f8df a058 	ldr.w	sl, [pc, #88]	@ 8008594 <_dtoa_r+0xb9c>
 800853c:	b11b      	cbz	r3, 8008546 <_dtoa_r+0xb4e>
 800853e:	f10a 0308 	add.w	r3, sl, #8
 8008542:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8008544:	6013      	str	r3, [r2, #0]
 8008546:	4650      	mov	r0, sl
 8008548:	b017      	add	sp, #92	@ 0x5c
 800854a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800854e:	9b07      	ldr	r3, [sp, #28]
 8008550:	2b01      	cmp	r3, #1
 8008552:	f77f ae2e 	ble.w	80081b2 <_dtoa_r+0x7ba>
 8008556:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008558:	9308      	str	r3, [sp, #32]
 800855a:	2001      	movs	r0, #1
 800855c:	e64d      	b.n	80081fa <_dtoa_r+0x802>
 800855e:	f1bb 0f00 	cmp.w	fp, #0
 8008562:	f77f aed9 	ble.w	8008318 <_dtoa_r+0x920>
 8008566:	4656      	mov	r6, sl
 8008568:	9802      	ldr	r0, [sp, #8]
 800856a:	4621      	mov	r1, r4
 800856c:	f7ff f9ba 	bl	80078e4 <quorem>
 8008570:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 8008574:	f806 3b01 	strb.w	r3, [r6], #1
 8008578:	eba6 020a 	sub.w	r2, r6, sl
 800857c:	4593      	cmp	fp, r2
 800857e:	ddb4      	ble.n	80084ea <_dtoa_r+0xaf2>
 8008580:	9902      	ldr	r1, [sp, #8]
 8008582:	2300      	movs	r3, #0
 8008584:	220a      	movs	r2, #10
 8008586:	4648      	mov	r0, r9
 8008588:	f000 f968 	bl	800885c <__multadd>
 800858c:	9002      	str	r0, [sp, #8]
 800858e:	e7eb      	b.n	8008568 <_dtoa_r+0xb70>
 8008590:	0800b509 	.word	0x0800b509
 8008594:	0800b48d 	.word	0x0800b48d

08008598 <_free_r>:
 8008598:	b538      	push	{r3, r4, r5, lr}
 800859a:	4605      	mov	r5, r0
 800859c:	2900      	cmp	r1, #0
 800859e:	d041      	beq.n	8008624 <_free_r+0x8c>
 80085a0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80085a4:	1f0c      	subs	r4, r1, #4
 80085a6:	2b00      	cmp	r3, #0
 80085a8:	bfb8      	it	lt
 80085aa:	18e4      	addlt	r4, r4, r3
 80085ac:	f000 f8e8 	bl	8008780 <__malloc_lock>
 80085b0:	4a1d      	ldr	r2, [pc, #116]	@ (8008628 <_free_r+0x90>)
 80085b2:	6813      	ldr	r3, [r2, #0]
 80085b4:	b933      	cbnz	r3, 80085c4 <_free_r+0x2c>
 80085b6:	6063      	str	r3, [r4, #4]
 80085b8:	6014      	str	r4, [r2, #0]
 80085ba:	4628      	mov	r0, r5
 80085bc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80085c0:	f000 b8e4 	b.w	800878c <__malloc_unlock>
 80085c4:	42a3      	cmp	r3, r4
 80085c6:	d908      	bls.n	80085da <_free_r+0x42>
 80085c8:	6820      	ldr	r0, [r4, #0]
 80085ca:	1821      	adds	r1, r4, r0
 80085cc:	428b      	cmp	r3, r1
 80085ce:	bf01      	itttt	eq
 80085d0:	6819      	ldreq	r1, [r3, #0]
 80085d2:	685b      	ldreq	r3, [r3, #4]
 80085d4:	1809      	addeq	r1, r1, r0
 80085d6:	6021      	streq	r1, [r4, #0]
 80085d8:	e7ed      	b.n	80085b6 <_free_r+0x1e>
 80085da:	461a      	mov	r2, r3
 80085dc:	685b      	ldr	r3, [r3, #4]
 80085de:	b10b      	cbz	r3, 80085e4 <_free_r+0x4c>
 80085e0:	42a3      	cmp	r3, r4
 80085e2:	d9fa      	bls.n	80085da <_free_r+0x42>
 80085e4:	6811      	ldr	r1, [r2, #0]
 80085e6:	1850      	adds	r0, r2, r1
 80085e8:	42a0      	cmp	r0, r4
 80085ea:	d10b      	bne.n	8008604 <_free_r+0x6c>
 80085ec:	6820      	ldr	r0, [r4, #0]
 80085ee:	4401      	add	r1, r0
 80085f0:	1850      	adds	r0, r2, r1
 80085f2:	4283      	cmp	r3, r0
 80085f4:	6011      	str	r1, [r2, #0]
 80085f6:	d1e0      	bne.n	80085ba <_free_r+0x22>
 80085f8:	6818      	ldr	r0, [r3, #0]
 80085fa:	685b      	ldr	r3, [r3, #4]
 80085fc:	6053      	str	r3, [r2, #4]
 80085fe:	4408      	add	r0, r1
 8008600:	6010      	str	r0, [r2, #0]
 8008602:	e7da      	b.n	80085ba <_free_r+0x22>
 8008604:	d902      	bls.n	800860c <_free_r+0x74>
 8008606:	230c      	movs	r3, #12
 8008608:	602b      	str	r3, [r5, #0]
 800860a:	e7d6      	b.n	80085ba <_free_r+0x22>
 800860c:	6820      	ldr	r0, [r4, #0]
 800860e:	1821      	adds	r1, r4, r0
 8008610:	428b      	cmp	r3, r1
 8008612:	bf04      	itt	eq
 8008614:	6819      	ldreq	r1, [r3, #0]
 8008616:	685b      	ldreq	r3, [r3, #4]
 8008618:	6063      	str	r3, [r4, #4]
 800861a:	bf04      	itt	eq
 800861c:	1809      	addeq	r1, r1, r0
 800861e:	6021      	streq	r1, [r4, #0]
 8008620:	6054      	str	r4, [r2, #4]
 8008622:	e7ca      	b.n	80085ba <_free_r+0x22>
 8008624:	bd38      	pop	{r3, r4, r5, pc}
 8008626:	bf00      	nop
 8008628:	20001614 	.word	0x20001614

0800862c <malloc>:
 800862c:	4b02      	ldr	r3, [pc, #8]	@ (8008638 <malloc+0xc>)
 800862e:	4601      	mov	r1, r0
 8008630:	6818      	ldr	r0, [r3, #0]
 8008632:	f000 b825 	b.w	8008680 <_malloc_r>
 8008636:	bf00      	nop
 8008638:	20000a58 	.word	0x20000a58

0800863c <sbrk_aligned>:
 800863c:	b570      	push	{r4, r5, r6, lr}
 800863e:	4e0f      	ldr	r6, [pc, #60]	@ (800867c <sbrk_aligned+0x40>)
 8008640:	460c      	mov	r4, r1
 8008642:	6831      	ldr	r1, [r6, #0]
 8008644:	4605      	mov	r5, r0
 8008646:	b911      	cbnz	r1, 800864e <sbrk_aligned+0x12>
 8008648:	f001 fe88 	bl	800a35c <_sbrk_r>
 800864c:	6030      	str	r0, [r6, #0]
 800864e:	4621      	mov	r1, r4
 8008650:	4628      	mov	r0, r5
 8008652:	f001 fe83 	bl	800a35c <_sbrk_r>
 8008656:	1c43      	adds	r3, r0, #1
 8008658:	d103      	bne.n	8008662 <sbrk_aligned+0x26>
 800865a:	f04f 34ff 	mov.w	r4, #4294967295
 800865e:	4620      	mov	r0, r4
 8008660:	bd70      	pop	{r4, r5, r6, pc}
 8008662:	1cc4      	adds	r4, r0, #3
 8008664:	f024 0403 	bic.w	r4, r4, #3
 8008668:	42a0      	cmp	r0, r4
 800866a:	d0f8      	beq.n	800865e <sbrk_aligned+0x22>
 800866c:	1a21      	subs	r1, r4, r0
 800866e:	4628      	mov	r0, r5
 8008670:	f001 fe74 	bl	800a35c <_sbrk_r>
 8008674:	3001      	adds	r0, #1
 8008676:	d1f2      	bne.n	800865e <sbrk_aligned+0x22>
 8008678:	e7ef      	b.n	800865a <sbrk_aligned+0x1e>
 800867a:	bf00      	nop
 800867c:	20001610 	.word	0x20001610

08008680 <_malloc_r>:
 8008680:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008684:	1ccd      	adds	r5, r1, #3
 8008686:	f025 0503 	bic.w	r5, r5, #3
 800868a:	3508      	adds	r5, #8
 800868c:	2d0c      	cmp	r5, #12
 800868e:	bf38      	it	cc
 8008690:	250c      	movcc	r5, #12
 8008692:	2d00      	cmp	r5, #0
 8008694:	4606      	mov	r6, r0
 8008696:	db01      	blt.n	800869c <_malloc_r+0x1c>
 8008698:	42a9      	cmp	r1, r5
 800869a:	d904      	bls.n	80086a6 <_malloc_r+0x26>
 800869c:	230c      	movs	r3, #12
 800869e:	6033      	str	r3, [r6, #0]
 80086a0:	2000      	movs	r0, #0
 80086a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80086a6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800877c <_malloc_r+0xfc>
 80086aa:	f000 f869 	bl	8008780 <__malloc_lock>
 80086ae:	f8d8 3000 	ldr.w	r3, [r8]
 80086b2:	461c      	mov	r4, r3
 80086b4:	bb44      	cbnz	r4, 8008708 <_malloc_r+0x88>
 80086b6:	4629      	mov	r1, r5
 80086b8:	4630      	mov	r0, r6
 80086ba:	f7ff ffbf 	bl	800863c <sbrk_aligned>
 80086be:	1c43      	adds	r3, r0, #1
 80086c0:	4604      	mov	r4, r0
 80086c2:	d158      	bne.n	8008776 <_malloc_r+0xf6>
 80086c4:	f8d8 4000 	ldr.w	r4, [r8]
 80086c8:	4627      	mov	r7, r4
 80086ca:	2f00      	cmp	r7, #0
 80086cc:	d143      	bne.n	8008756 <_malloc_r+0xd6>
 80086ce:	2c00      	cmp	r4, #0
 80086d0:	d04b      	beq.n	800876a <_malloc_r+0xea>
 80086d2:	6823      	ldr	r3, [r4, #0]
 80086d4:	4639      	mov	r1, r7
 80086d6:	4630      	mov	r0, r6
 80086d8:	eb04 0903 	add.w	r9, r4, r3
 80086dc:	f001 fe3e 	bl	800a35c <_sbrk_r>
 80086e0:	4581      	cmp	r9, r0
 80086e2:	d142      	bne.n	800876a <_malloc_r+0xea>
 80086e4:	6821      	ldr	r1, [r4, #0]
 80086e6:	1a6d      	subs	r5, r5, r1
 80086e8:	4629      	mov	r1, r5
 80086ea:	4630      	mov	r0, r6
 80086ec:	f7ff ffa6 	bl	800863c <sbrk_aligned>
 80086f0:	3001      	adds	r0, #1
 80086f2:	d03a      	beq.n	800876a <_malloc_r+0xea>
 80086f4:	6823      	ldr	r3, [r4, #0]
 80086f6:	442b      	add	r3, r5
 80086f8:	6023      	str	r3, [r4, #0]
 80086fa:	f8d8 3000 	ldr.w	r3, [r8]
 80086fe:	685a      	ldr	r2, [r3, #4]
 8008700:	bb62      	cbnz	r2, 800875c <_malloc_r+0xdc>
 8008702:	f8c8 7000 	str.w	r7, [r8]
 8008706:	e00f      	b.n	8008728 <_malloc_r+0xa8>
 8008708:	6822      	ldr	r2, [r4, #0]
 800870a:	1b52      	subs	r2, r2, r5
 800870c:	d420      	bmi.n	8008750 <_malloc_r+0xd0>
 800870e:	2a0b      	cmp	r2, #11
 8008710:	d917      	bls.n	8008742 <_malloc_r+0xc2>
 8008712:	1961      	adds	r1, r4, r5
 8008714:	42a3      	cmp	r3, r4
 8008716:	6025      	str	r5, [r4, #0]
 8008718:	bf18      	it	ne
 800871a:	6059      	strne	r1, [r3, #4]
 800871c:	6863      	ldr	r3, [r4, #4]
 800871e:	bf08      	it	eq
 8008720:	f8c8 1000 	streq.w	r1, [r8]
 8008724:	5162      	str	r2, [r4, r5]
 8008726:	604b      	str	r3, [r1, #4]
 8008728:	4630      	mov	r0, r6
 800872a:	f000 f82f 	bl	800878c <__malloc_unlock>
 800872e:	f104 000b 	add.w	r0, r4, #11
 8008732:	1d23      	adds	r3, r4, #4
 8008734:	f020 0007 	bic.w	r0, r0, #7
 8008738:	1ac2      	subs	r2, r0, r3
 800873a:	bf1c      	itt	ne
 800873c:	1a1b      	subne	r3, r3, r0
 800873e:	50a3      	strne	r3, [r4, r2]
 8008740:	e7af      	b.n	80086a2 <_malloc_r+0x22>
 8008742:	6862      	ldr	r2, [r4, #4]
 8008744:	42a3      	cmp	r3, r4
 8008746:	bf0c      	ite	eq
 8008748:	f8c8 2000 	streq.w	r2, [r8]
 800874c:	605a      	strne	r2, [r3, #4]
 800874e:	e7eb      	b.n	8008728 <_malloc_r+0xa8>
 8008750:	4623      	mov	r3, r4
 8008752:	6864      	ldr	r4, [r4, #4]
 8008754:	e7ae      	b.n	80086b4 <_malloc_r+0x34>
 8008756:	463c      	mov	r4, r7
 8008758:	687f      	ldr	r7, [r7, #4]
 800875a:	e7b6      	b.n	80086ca <_malloc_r+0x4a>
 800875c:	461a      	mov	r2, r3
 800875e:	685b      	ldr	r3, [r3, #4]
 8008760:	42a3      	cmp	r3, r4
 8008762:	d1fb      	bne.n	800875c <_malloc_r+0xdc>
 8008764:	2300      	movs	r3, #0
 8008766:	6053      	str	r3, [r2, #4]
 8008768:	e7de      	b.n	8008728 <_malloc_r+0xa8>
 800876a:	230c      	movs	r3, #12
 800876c:	6033      	str	r3, [r6, #0]
 800876e:	4630      	mov	r0, r6
 8008770:	f000 f80c 	bl	800878c <__malloc_unlock>
 8008774:	e794      	b.n	80086a0 <_malloc_r+0x20>
 8008776:	6005      	str	r5, [r0, #0]
 8008778:	e7d6      	b.n	8008728 <_malloc_r+0xa8>
 800877a:	bf00      	nop
 800877c:	20001614 	.word	0x20001614

08008780 <__malloc_lock>:
 8008780:	4801      	ldr	r0, [pc, #4]	@ (8008788 <__malloc_lock+0x8>)
 8008782:	f7ff b8a6 	b.w	80078d2 <__retarget_lock_acquire_recursive>
 8008786:	bf00      	nop
 8008788:	2000160c 	.word	0x2000160c

0800878c <__malloc_unlock>:
 800878c:	4801      	ldr	r0, [pc, #4]	@ (8008794 <__malloc_unlock+0x8>)
 800878e:	f7ff b8a1 	b.w	80078d4 <__retarget_lock_release_recursive>
 8008792:	bf00      	nop
 8008794:	2000160c 	.word	0x2000160c

08008798 <_Balloc>:
 8008798:	b570      	push	{r4, r5, r6, lr}
 800879a:	69c6      	ldr	r6, [r0, #28]
 800879c:	4604      	mov	r4, r0
 800879e:	460d      	mov	r5, r1
 80087a0:	b976      	cbnz	r6, 80087c0 <_Balloc+0x28>
 80087a2:	2010      	movs	r0, #16
 80087a4:	f7ff ff42 	bl	800862c <malloc>
 80087a8:	4602      	mov	r2, r0
 80087aa:	61e0      	str	r0, [r4, #28]
 80087ac:	b920      	cbnz	r0, 80087b8 <_Balloc+0x20>
 80087ae:	4b18      	ldr	r3, [pc, #96]	@ (8008810 <_Balloc+0x78>)
 80087b0:	4818      	ldr	r0, [pc, #96]	@ (8008814 <_Balloc+0x7c>)
 80087b2:	216b      	movs	r1, #107	@ 0x6b
 80087b4:	f001 fdf8 	bl	800a3a8 <__assert_func>
 80087b8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80087bc:	6006      	str	r6, [r0, #0]
 80087be:	60c6      	str	r6, [r0, #12]
 80087c0:	69e6      	ldr	r6, [r4, #28]
 80087c2:	68f3      	ldr	r3, [r6, #12]
 80087c4:	b183      	cbz	r3, 80087e8 <_Balloc+0x50>
 80087c6:	69e3      	ldr	r3, [r4, #28]
 80087c8:	68db      	ldr	r3, [r3, #12]
 80087ca:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80087ce:	b9b8      	cbnz	r0, 8008800 <_Balloc+0x68>
 80087d0:	2101      	movs	r1, #1
 80087d2:	fa01 f605 	lsl.w	r6, r1, r5
 80087d6:	1d72      	adds	r2, r6, #5
 80087d8:	0092      	lsls	r2, r2, #2
 80087da:	4620      	mov	r0, r4
 80087dc:	f001 fe02 	bl	800a3e4 <_calloc_r>
 80087e0:	b160      	cbz	r0, 80087fc <_Balloc+0x64>
 80087e2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80087e6:	e00e      	b.n	8008806 <_Balloc+0x6e>
 80087e8:	2221      	movs	r2, #33	@ 0x21
 80087ea:	2104      	movs	r1, #4
 80087ec:	4620      	mov	r0, r4
 80087ee:	f001 fdf9 	bl	800a3e4 <_calloc_r>
 80087f2:	69e3      	ldr	r3, [r4, #28]
 80087f4:	60f0      	str	r0, [r6, #12]
 80087f6:	68db      	ldr	r3, [r3, #12]
 80087f8:	2b00      	cmp	r3, #0
 80087fa:	d1e4      	bne.n	80087c6 <_Balloc+0x2e>
 80087fc:	2000      	movs	r0, #0
 80087fe:	bd70      	pop	{r4, r5, r6, pc}
 8008800:	6802      	ldr	r2, [r0, #0]
 8008802:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008806:	2300      	movs	r3, #0
 8008808:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800880c:	e7f7      	b.n	80087fe <_Balloc+0x66>
 800880e:	bf00      	nop
 8008810:	0800b49a 	.word	0x0800b49a
 8008814:	0800b51a 	.word	0x0800b51a

08008818 <_Bfree>:
 8008818:	b570      	push	{r4, r5, r6, lr}
 800881a:	69c6      	ldr	r6, [r0, #28]
 800881c:	4605      	mov	r5, r0
 800881e:	460c      	mov	r4, r1
 8008820:	b976      	cbnz	r6, 8008840 <_Bfree+0x28>
 8008822:	2010      	movs	r0, #16
 8008824:	f7ff ff02 	bl	800862c <malloc>
 8008828:	4602      	mov	r2, r0
 800882a:	61e8      	str	r0, [r5, #28]
 800882c:	b920      	cbnz	r0, 8008838 <_Bfree+0x20>
 800882e:	4b09      	ldr	r3, [pc, #36]	@ (8008854 <_Bfree+0x3c>)
 8008830:	4809      	ldr	r0, [pc, #36]	@ (8008858 <_Bfree+0x40>)
 8008832:	218f      	movs	r1, #143	@ 0x8f
 8008834:	f001 fdb8 	bl	800a3a8 <__assert_func>
 8008838:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800883c:	6006      	str	r6, [r0, #0]
 800883e:	60c6      	str	r6, [r0, #12]
 8008840:	b13c      	cbz	r4, 8008852 <_Bfree+0x3a>
 8008842:	69eb      	ldr	r3, [r5, #28]
 8008844:	6862      	ldr	r2, [r4, #4]
 8008846:	68db      	ldr	r3, [r3, #12]
 8008848:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800884c:	6021      	str	r1, [r4, #0]
 800884e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008852:	bd70      	pop	{r4, r5, r6, pc}
 8008854:	0800b49a 	.word	0x0800b49a
 8008858:	0800b51a 	.word	0x0800b51a

0800885c <__multadd>:
 800885c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008860:	690d      	ldr	r5, [r1, #16]
 8008862:	4607      	mov	r7, r0
 8008864:	460c      	mov	r4, r1
 8008866:	461e      	mov	r6, r3
 8008868:	f101 0c14 	add.w	ip, r1, #20
 800886c:	2000      	movs	r0, #0
 800886e:	f8dc 3000 	ldr.w	r3, [ip]
 8008872:	b299      	uxth	r1, r3
 8008874:	fb02 6101 	mla	r1, r2, r1, r6
 8008878:	0c1e      	lsrs	r6, r3, #16
 800887a:	0c0b      	lsrs	r3, r1, #16
 800887c:	fb02 3306 	mla	r3, r2, r6, r3
 8008880:	b289      	uxth	r1, r1
 8008882:	3001      	adds	r0, #1
 8008884:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008888:	4285      	cmp	r5, r0
 800888a:	f84c 1b04 	str.w	r1, [ip], #4
 800888e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8008892:	dcec      	bgt.n	800886e <__multadd+0x12>
 8008894:	b30e      	cbz	r6, 80088da <__multadd+0x7e>
 8008896:	68a3      	ldr	r3, [r4, #8]
 8008898:	42ab      	cmp	r3, r5
 800889a:	dc19      	bgt.n	80088d0 <__multadd+0x74>
 800889c:	6861      	ldr	r1, [r4, #4]
 800889e:	4638      	mov	r0, r7
 80088a0:	3101      	adds	r1, #1
 80088a2:	f7ff ff79 	bl	8008798 <_Balloc>
 80088a6:	4680      	mov	r8, r0
 80088a8:	b928      	cbnz	r0, 80088b6 <__multadd+0x5a>
 80088aa:	4602      	mov	r2, r0
 80088ac:	4b0c      	ldr	r3, [pc, #48]	@ (80088e0 <__multadd+0x84>)
 80088ae:	480d      	ldr	r0, [pc, #52]	@ (80088e4 <__multadd+0x88>)
 80088b0:	21ba      	movs	r1, #186	@ 0xba
 80088b2:	f001 fd79 	bl	800a3a8 <__assert_func>
 80088b6:	6922      	ldr	r2, [r4, #16]
 80088b8:	3202      	adds	r2, #2
 80088ba:	f104 010c 	add.w	r1, r4, #12
 80088be:	0092      	lsls	r2, r2, #2
 80088c0:	300c      	adds	r0, #12
 80088c2:	f001 fd5b 	bl	800a37c <memcpy>
 80088c6:	4621      	mov	r1, r4
 80088c8:	4638      	mov	r0, r7
 80088ca:	f7ff ffa5 	bl	8008818 <_Bfree>
 80088ce:	4644      	mov	r4, r8
 80088d0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80088d4:	3501      	adds	r5, #1
 80088d6:	615e      	str	r6, [r3, #20]
 80088d8:	6125      	str	r5, [r4, #16]
 80088da:	4620      	mov	r0, r4
 80088dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80088e0:	0800b509 	.word	0x0800b509
 80088e4:	0800b51a 	.word	0x0800b51a

080088e8 <__s2b>:
 80088e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80088ec:	460c      	mov	r4, r1
 80088ee:	4615      	mov	r5, r2
 80088f0:	461f      	mov	r7, r3
 80088f2:	2209      	movs	r2, #9
 80088f4:	3308      	adds	r3, #8
 80088f6:	4606      	mov	r6, r0
 80088f8:	fb93 f3f2 	sdiv	r3, r3, r2
 80088fc:	2100      	movs	r1, #0
 80088fe:	2201      	movs	r2, #1
 8008900:	429a      	cmp	r2, r3
 8008902:	db09      	blt.n	8008918 <__s2b+0x30>
 8008904:	4630      	mov	r0, r6
 8008906:	f7ff ff47 	bl	8008798 <_Balloc>
 800890a:	b940      	cbnz	r0, 800891e <__s2b+0x36>
 800890c:	4602      	mov	r2, r0
 800890e:	4b19      	ldr	r3, [pc, #100]	@ (8008974 <__s2b+0x8c>)
 8008910:	4819      	ldr	r0, [pc, #100]	@ (8008978 <__s2b+0x90>)
 8008912:	21d3      	movs	r1, #211	@ 0xd3
 8008914:	f001 fd48 	bl	800a3a8 <__assert_func>
 8008918:	0052      	lsls	r2, r2, #1
 800891a:	3101      	adds	r1, #1
 800891c:	e7f0      	b.n	8008900 <__s2b+0x18>
 800891e:	9b08      	ldr	r3, [sp, #32]
 8008920:	6143      	str	r3, [r0, #20]
 8008922:	2d09      	cmp	r5, #9
 8008924:	f04f 0301 	mov.w	r3, #1
 8008928:	6103      	str	r3, [r0, #16]
 800892a:	dd16      	ble.n	800895a <__s2b+0x72>
 800892c:	f104 0909 	add.w	r9, r4, #9
 8008930:	46c8      	mov	r8, r9
 8008932:	442c      	add	r4, r5
 8008934:	f818 3b01 	ldrb.w	r3, [r8], #1
 8008938:	4601      	mov	r1, r0
 800893a:	3b30      	subs	r3, #48	@ 0x30
 800893c:	220a      	movs	r2, #10
 800893e:	4630      	mov	r0, r6
 8008940:	f7ff ff8c 	bl	800885c <__multadd>
 8008944:	45a0      	cmp	r8, r4
 8008946:	d1f5      	bne.n	8008934 <__s2b+0x4c>
 8008948:	f1a5 0408 	sub.w	r4, r5, #8
 800894c:	444c      	add	r4, r9
 800894e:	1b2d      	subs	r5, r5, r4
 8008950:	1963      	adds	r3, r4, r5
 8008952:	42bb      	cmp	r3, r7
 8008954:	db04      	blt.n	8008960 <__s2b+0x78>
 8008956:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800895a:	340a      	adds	r4, #10
 800895c:	2509      	movs	r5, #9
 800895e:	e7f6      	b.n	800894e <__s2b+0x66>
 8008960:	f814 3b01 	ldrb.w	r3, [r4], #1
 8008964:	4601      	mov	r1, r0
 8008966:	3b30      	subs	r3, #48	@ 0x30
 8008968:	220a      	movs	r2, #10
 800896a:	4630      	mov	r0, r6
 800896c:	f7ff ff76 	bl	800885c <__multadd>
 8008970:	e7ee      	b.n	8008950 <__s2b+0x68>
 8008972:	bf00      	nop
 8008974:	0800b509 	.word	0x0800b509
 8008978:	0800b51a 	.word	0x0800b51a

0800897c <__hi0bits>:
 800897c:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8008980:	4603      	mov	r3, r0
 8008982:	bf36      	itet	cc
 8008984:	0403      	lslcc	r3, r0, #16
 8008986:	2000      	movcs	r0, #0
 8008988:	2010      	movcc	r0, #16
 800898a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800898e:	bf3c      	itt	cc
 8008990:	021b      	lslcc	r3, r3, #8
 8008992:	3008      	addcc	r0, #8
 8008994:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008998:	bf3c      	itt	cc
 800899a:	011b      	lslcc	r3, r3, #4
 800899c:	3004      	addcc	r0, #4
 800899e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80089a2:	bf3c      	itt	cc
 80089a4:	009b      	lslcc	r3, r3, #2
 80089a6:	3002      	addcc	r0, #2
 80089a8:	2b00      	cmp	r3, #0
 80089aa:	db05      	blt.n	80089b8 <__hi0bits+0x3c>
 80089ac:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 80089b0:	f100 0001 	add.w	r0, r0, #1
 80089b4:	bf08      	it	eq
 80089b6:	2020      	moveq	r0, #32
 80089b8:	4770      	bx	lr

080089ba <__lo0bits>:
 80089ba:	6803      	ldr	r3, [r0, #0]
 80089bc:	4602      	mov	r2, r0
 80089be:	f013 0007 	ands.w	r0, r3, #7
 80089c2:	d00b      	beq.n	80089dc <__lo0bits+0x22>
 80089c4:	07d9      	lsls	r1, r3, #31
 80089c6:	d421      	bmi.n	8008a0c <__lo0bits+0x52>
 80089c8:	0798      	lsls	r0, r3, #30
 80089ca:	bf49      	itett	mi
 80089cc:	085b      	lsrmi	r3, r3, #1
 80089ce:	089b      	lsrpl	r3, r3, #2
 80089d0:	2001      	movmi	r0, #1
 80089d2:	6013      	strmi	r3, [r2, #0]
 80089d4:	bf5c      	itt	pl
 80089d6:	6013      	strpl	r3, [r2, #0]
 80089d8:	2002      	movpl	r0, #2
 80089da:	4770      	bx	lr
 80089dc:	b299      	uxth	r1, r3
 80089de:	b909      	cbnz	r1, 80089e4 <__lo0bits+0x2a>
 80089e0:	0c1b      	lsrs	r3, r3, #16
 80089e2:	2010      	movs	r0, #16
 80089e4:	b2d9      	uxtb	r1, r3
 80089e6:	b909      	cbnz	r1, 80089ec <__lo0bits+0x32>
 80089e8:	3008      	adds	r0, #8
 80089ea:	0a1b      	lsrs	r3, r3, #8
 80089ec:	0719      	lsls	r1, r3, #28
 80089ee:	bf04      	itt	eq
 80089f0:	091b      	lsreq	r3, r3, #4
 80089f2:	3004      	addeq	r0, #4
 80089f4:	0799      	lsls	r1, r3, #30
 80089f6:	bf04      	itt	eq
 80089f8:	089b      	lsreq	r3, r3, #2
 80089fa:	3002      	addeq	r0, #2
 80089fc:	07d9      	lsls	r1, r3, #31
 80089fe:	d403      	bmi.n	8008a08 <__lo0bits+0x4e>
 8008a00:	085b      	lsrs	r3, r3, #1
 8008a02:	f100 0001 	add.w	r0, r0, #1
 8008a06:	d003      	beq.n	8008a10 <__lo0bits+0x56>
 8008a08:	6013      	str	r3, [r2, #0]
 8008a0a:	4770      	bx	lr
 8008a0c:	2000      	movs	r0, #0
 8008a0e:	4770      	bx	lr
 8008a10:	2020      	movs	r0, #32
 8008a12:	4770      	bx	lr

08008a14 <__i2b>:
 8008a14:	b510      	push	{r4, lr}
 8008a16:	460c      	mov	r4, r1
 8008a18:	2101      	movs	r1, #1
 8008a1a:	f7ff febd 	bl	8008798 <_Balloc>
 8008a1e:	4602      	mov	r2, r0
 8008a20:	b928      	cbnz	r0, 8008a2e <__i2b+0x1a>
 8008a22:	4b05      	ldr	r3, [pc, #20]	@ (8008a38 <__i2b+0x24>)
 8008a24:	4805      	ldr	r0, [pc, #20]	@ (8008a3c <__i2b+0x28>)
 8008a26:	f240 1145 	movw	r1, #325	@ 0x145
 8008a2a:	f001 fcbd 	bl	800a3a8 <__assert_func>
 8008a2e:	2301      	movs	r3, #1
 8008a30:	6144      	str	r4, [r0, #20]
 8008a32:	6103      	str	r3, [r0, #16]
 8008a34:	bd10      	pop	{r4, pc}
 8008a36:	bf00      	nop
 8008a38:	0800b509 	.word	0x0800b509
 8008a3c:	0800b51a 	.word	0x0800b51a

08008a40 <__multiply>:
 8008a40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a44:	4617      	mov	r7, r2
 8008a46:	690a      	ldr	r2, [r1, #16]
 8008a48:	693b      	ldr	r3, [r7, #16]
 8008a4a:	429a      	cmp	r2, r3
 8008a4c:	bfa8      	it	ge
 8008a4e:	463b      	movge	r3, r7
 8008a50:	4689      	mov	r9, r1
 8008a52:	bfa4      	itt	ge
 8008a54:	460f      	movge	r7, r1
 8008a56:	4699      	movge	r9, r3
 8008a58:	693d      	ldr	r5, [r7, #16]
 8008a5a:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8008a5e:	68bb      	ldr	r3, [r7, #8]
 8008a60:	6879      	ldr	r1, [r7, #4]
 8008a62:	eb05 060a 	add.w	r6, r5, sl
 8008a66:	42b3      	cmp	r3, r6
 8008a68:	b085      	sub	sp, #20
 8008a6a:	bfb8      	it	lt
 8008a6c:	3101      	addlt	r1, #1
 8008a6e:	f7ff fe93 	bl	8008798 <_Balloc>
 8008a72:	b930      	cbnz	r0, 8008a82 <__multiply+0x42>
 8008a74:	4602      	mov	r2, r0
 8008a76:	4b41      	ldr	r3, [pc, #260]	@ (8008b7c <__multiply+0x13c>)
 8008a78:	4841      	ldr	r0, [pc, #260]	@ (8008b80 <__multiply+0x140>)
 8008a7a:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8008a7e:	f001 fc93 	bl	800a3a8 <__assert_func>
 8008a82:	f100 0414 	add.w	r4, r0, #20
 8008a86:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 8008a8a:	4623      	mov	r3, r4
 8008a8c:	2200      	movs	r2, #0
 8008a8e:	4573      	cmp	r3, lr
 8008a90:	d320      	bcc.n	8008ad4 <__multiply+0x94>
 8008a92:	f107 0814 	add.w	r8, r7, #20
 8008a96:	f109 0114 	add.w	r1, r9, #20
 8008a9a:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 8008a9e:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 8008aa2:	9302      	str	r3, [sp, #8]
 8008aa4:	1beb      	subs	r3, r5, r7
 8008aa6:	3b15      	subs	r3, #21
 8008aa8:	f023 0303 	bic.w	r3, r3, #3
 8008aac:	3304      	adds	r3, #4
 8008aae:	3715      	adds	r7, #21
 8008ab0:	42bd      	cmp	r5, r7
 8008ab2:	bf38      	it	cc
 8008ab4:	2304      	movcc	r3, #4
 8008ab6:	9301      	str	r3, [sp, #4]
 8008ab8:	9b02      	ldr	r3, [sp, #8]
 8008aba:	9103      	str	r1, [sp, #12]
 8008abc:	428b      	cmp	r3, r1
 8008abe:	d80c      	bhi.n	8008ada <__multiply+0x9a>
 8008ac0:	2e00      	cmp	r6, #0
 8008ac2:	dd03      	ble.n	8008acc <__multiply+0x8c>
 8008ac4:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8008ac8:	2b00      	cmp	r3, #0
 8008aca:	d055      	beq.n	8008b78 <__multiply+0x138>
 8008acc:	6106      	str	r6, [r0, #16]
 8008ace:	b005      	add	sp, #20
 8008ad0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008ad4:	f843 2b04 	str.w	r2, [r3], #4
 8008ad8:	e7d9      	b.n	8008a8e <__multiply+0x4e>
 8008ada:	f8b1 a000 	ldrh.w	sl, [r1]
 8008ade:	f1ba 0f00 	cmp.w	sl, #0
 8008ae2:	d01f      	beq.n	8008b24 <__multiply+0xe4>
 8008ae4:	46c4      	mov	ip, r8
 8008ae6:	46a1      	mov	r9, r4
 8008ae8:	2700      	movs	r7, #0
 8008aea:	f85c 2b04 	ldr.w	r2, [ip], #4
 8008aee:	f8d9 3000 	ldr.w	r3, [r9]
 8008af2:	fa1f fb82 	uxth.w	fp, r2
 8008af6:	b29b      	uxth	r3, r3
 8008af8:	fb0a 330b 	mla	r3, sl, fp, r3
 8008afc:	443b      	add	r3, r7
 8008afe:	f8d9 7000 	ldr.w	r7, [r9]
 8008b02:	0c12      	lsrs	r2, r2, #16
 8008b04:	0c3f      	lsrs	r7, r7, #16
 8008b06:	fb0a 7202 	mla	r2, sl, r2, r7
 8008b0a:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 8008b0e:	b29b      	uxth	r3, r3
 8008b10:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008b14:	4565      	cmp	r5, ip
 8008b16:	f849 3b04 	str.w	r3, [r9], #4
 8008b1a:	ea4f 4712 	mov.w	r7, r2, lsr #16
 8008b1e:	d8e4      	bhi.n	8008aea <__multiply+0xaa>
 8008b20:	9b01      	ldr	r3, [sp, #4]
 8008b22:	50e7      	str	r7, [r4, r3]
 8008b24:	9b03      	ldr	r3, [sp, #12]
 8008b26:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8008b2a:	3104      	adds	r1, #4
 8008b2c:	f1b9 0f00 	cmp.w	r9, #0
 8008b30:	d020      	beq.n	8008b74 <__multiply+0x134>
 8008b32:	6823      	ldr	r3, [r4, #0]
 8008b34:	4647      	mov	r7, r8
 8008b36:	46a4      	mov	ip, r4
 8008b38:	f04f 0a00 	mov.w	sl, #0
 8008b3c:	f8b7 b000 	ldrh.w	fp, [r7]
 8008b40:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 8008b44:	fb09 220b 	mla	r2, r9, fp, r2
 8008b48:	4452      	add	r2, sl
 8008b4a:	b29b      	uxth	r3, r3
 8008b4c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008b50:	f84c 3b04 	str.w	r3, [ip], #4
 8008b54:	f857 3b04 	ldr.w	r3, [r7], #4
 8008b58:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008b5c:	f8bc 3000 	ldrh.w	r3, [ip]
 8008b60:	fb09 330a 	mla	r3, r9, sl, r3
 8008b64:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8008b68:	42bd      	cmp	r5, r7
 8008b6a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008b6e:	d8e5      	bhi.n	8008b3c <__multiply+0xfc>
 8008b70:	9a01      	ldr	r2, [sp, #4]
 8008b72:	50a3      	str	r3, [r4, r2]
 8008b74:	3404      	adds	r4, #4
 8008b76:	e79f      	b.n	8008ab8 <__multiply+0x78>
 8008b78:	3e01      	subs	r6, #1
 8008b7a:	e7a1      	b.n	8008ac0 <__multiply+0x80>
 8008b7c:	0800b509 	.word	0x0800b509
 8008b80:	0800b51a 	.word	0x0800b51a

08008b84 <__pow5mult>:
 8008b84:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008b88:	4615      	mov	r5, r2
 8008b8a:	f012 0203 	ands.w	r2, r2, #3
 8008b8e:	4607      	mov	r7, r0
 8008b90:	460e      	mov	r6, r1
 8008b92:	d007      	beq.n	8008ba4 <__pow5mult+0x20>
 8008b94:	4c25      	ldr	r4, [pc, #148]	@ (8008c2c <__pow5mult+0xa8>)
 8008b96:	3a01      	subs	r2, #1
 8008b98:	2300      	movs	r3, #0
 8008b9a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008b9e:	f7ff fe5d 	bl	800885c <__multadd>
 8008ba2:	4606      	mov	r6, r0
 8008ba4:	10ad      	asrs	r5, r5, #2
 8008ba6:	d03d      	beq.n	8008c24 <__pow5mult+0xa0>
 8008ba8:	69fc      	ldr	r4, [r7, #28]
 8008baa:	b97c      	cbnz	r4, 8008bcc <__pow5mult+0x48>
 8008bac:	2010      	movs	r0, #16
 8008bae:	f7ff fd3d 	bl	800862c <malloc>
 8008bb2:	4602      	mov	r2, r0
 8008bb4:	61f8      	str	r0, [r7, #28]
 8008bb6:	b928      	cbnz	r0, 8008bc4 <__pow5mult+0x40>
 8008bb8:	4b1d      	ldr	r3, [pc, #116]	@ (8008c30 <__pow5mult+0xac>)
 8008bba:	481e      	ldr	r0, [pc, #120]	@ (8008c34 <__pow5mult+0xb0>)
 8008bbc:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8008bc0:	f001 fbf2 	bl	800a3a8 <__assert_func>
 8008bc4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008bc8:	6004      	str	r4, [r0, #0]
 8008bca:	60c4      	str	r4, [r0, #12]
 8008bcc:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8008bd0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008bd4:	b94c      	cbnz	r4, 8008bea <__pow5mult+0x66>
 8008bd6:	f240 2171 	movw	r1, #625	@ 0x271
 8008bda:	4638      	mov	r0, r7
 8008bdc:	f7ff ff1a 	bl	8008a14 <__i2b>
 8008be0:	2300      	movs	r3, #0
 8008be2:	f8c8 0008 	str.w	r0, [r8, #8]
 8008be6:	4604      	mov	r4, r0
 8008be8:	6003      	str	r3, [r0, #0]
 8008bea:	f04f 0900 	mov.w	r9, #0
 8008bee:	07eb      	lsls	r3, r5, #31
 8008bf0:	d50a      	bpl.n	8008c08 <__pow5mult+0x84>
 8008bf2:	4631      	mov	r1, r6
 8008bf4:	4622      	mov	r2, r4
 8008bf6:	4638      	mov	r0, r7
 8008bf8:	f7ff ff22 	bl	8008a40 <__multiply>
 8008bfc:	4631      	mov	r1, r6
 8008bfe:	4680      	mov	r8, r0
 8008c00:	4638      	mov	r0, r7
 8008c02:	f7ff fe09 	bl	8008818 <_Bfree>
 8008c06:	4646      	mov	r6, r8
 8008c08:	106d      	asrs	r5, r5, #1
 8008c0a:	d00b      	beq.n	8008c24 <__pow5mult+0xa0>
 8008c0c:	6820      	ldr	r0, [r4, #0]
 8008c0e:	b938      	cbnz	r0, 8008c20 <__pow5mult+0x9c>
 8008c10:	4622      	mov	r2, r4
 8008c12:	4621      	mov	r1, r4
 8008c14:	4638      	mov	r0, r7
 8008c16:	f7ff ff13 	bl	8008a40 <__multiply>
 8008c1a:	6020      	str	r0, [r4, #0]
 8008c1c:	f8c0 9000 	str.w	r9, [r0]
 8008c20:	4604      	mov	r4, r0
 8008c22:	e7e4      	b.n	8008bee <__pow5mult+0x6a>
 8008c24:	4630      	mov	r0, r6
 8008c26:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008c2a:	bf00      	nop
 8008c2c:	0800b62c 	.word	0x0800b62c
 8008c30:	0800b49a 	.word	0x0800b49a
 8008c34:	0800b51a 	.word	0x0800b51a

08008c38 <__lshift>:
 8008c38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008c3c:	460c      	mov	r4, r1
 8008c3e:	6849      	ldr	r1, [r1, #4]
 8008c40:	6923      	ldr	r3, [r4, #16]
 8008c42:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008c46:	68a3      	ldr	r3, [r4, #8]
 8008c48:	4607      	mov	r7, r0
 8008c4a:	4691      	mov	r9, r2
 8008c4c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008c50:	f108 0601 	add.w	r6, r8, #1
 8008c54:	42b3      	cmp	r3, r6
 8008c56:	db0b      	blt.n	8008c70 <__lshift+0x38>
 8008c58:	4638      	mov	r0, r7
 8008c5a:	f7ff fd9d 	bl	8008798 <_Balloc>
 8008c5e:	4605      	mov	r5, r0
 8008c60:	b948      	cbnz	r0, 8008c76 <__lshift+0x3e>
 8008c62:	4602      	mov	r2, r0
 8008c64:	4b28      	ldr	r3, [pc, #160]	@ (8008d08 <__lshift+0xd0>)
 8008c66:	4829      	ldr	r0, [pc, #164]	@ (8008d0c <__lshift+0xd4>)
 8008c68:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8008c6c:	f001 fb9c 	bl	800a3a8 <__assert_func>
 8008c70:	3101      	adds	r1, #1
 8008c72:	005b      	lsls	r3, r3, #1
 8008c74:	e7ee      	b.n	8008c54 <__lshift+0x1c>
 8008c76:	2300      	movs	r3, #0
 8008c78:	f100 0114 	add.w	r1, r0, #20
 8008c7c:	f100 0210 	add.w	r2, r0, #16
 8008c80:	4618      	mov	r0, r3
 8008c82:	4553      	cmp	r3, sl
 8008c84:	db33      	blt.n	8008cee <__lshift+0xb6>
 8008c86:	6920      	ldr	r0, [r4, #16]
 8008c88:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008c8c:	f104 0314 	add.w	r3, r4, #20
 8008c90:	f019 091f 	ands.w	r9, r9, #31
 8008c94:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008c98:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008c9c:	d02b      	beq.n	8008cf6 <__lshift+0xbe>
 8008c9e:	f1c9 0e20 	rsb	lr, r9, #32
 8008ca2:	468a      	mov	sl, r1
 8008ca4:	2200      	movs	r2, #0
 8008ca6:	6818      	ldr	r0, [r3, #0]
 8008ca8:	fa00 f009 	lsl.w	r0, r0, r9
 8008cac:	4310      	orrs	r0, r2
 8008cae:	f84a 0b04 	str.w	r0, [sl], #4
 8008cb2:	f853 2b04 	ldr.w	r2, [r3], #4
 8008cb6:	459c      	cmp	ip, r3
 8008cb8:	fa22 f20e 	lsr.w	r2, r2, lr
 8008cbc:	d8f3      	bhi.n	8008ca6 <__lshift+0x6e>
 8008cbe:	ebac 0304 	sub.w	r3, ip, r4
 8008cc2:	3b15      	subs	r3, #21
 8008cc4:	f023 0303 	bic.w	r3, r3, #3
 8008cc8:	3304      	adds	r3, #4
 8008cca:	f104 0015 	add.w	r0, r4, #21
 8008cce:	4560      	cmp	r0, ip
 8008cd0:	bf88      	it	hi
 8008cd2:	2304      	movhi	r3, #4
 8008cd4:	50ca      	str	r2, [r1, r3]
 8008cd6:	b10a      	cbz	r2, 8008cdc <__lshift+0xa4>
 8008cd8:	f108 0602 	add.w	r6, r8, #2
 8008cdc:	3e01      	subs	r6, #1
 8008cde:	4638      	mov	r0, r7
 8008ce0:	612e      	str	r6, [r5, #16]
 8008ce2:	4621      	mov	r1, r4
 8008ce4:	f7ff fd98 	bl	8008818 <_Bfree>
 8008ce8:	4628      	mov	r0, r5
 8008cea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008cee:	f842 0f04 	str.w	r0, [r2, #4]!
 8008cf2:	3301      	adds	r3, #1
 8008cf4:	e7c5      	b.n	8008c82 <__lshift+0x4a>
 8008cf6:	3904      	subs	r1, #4
 8008cf8:	f853 2b04 	ldr.w	r2, [r3], #4
 8008cfc:	f841 2f04 	str.w	r2, [r1, #4]!
 8008d00:	459c      	cmp	ip, r3
 8008d02:	d8f9      	bhi.n	8008cf8 <__lshift+0xc0>
 8008d04:	e7ea      	b.n	8008cdc <__lshift+0xa4>
 8008d06:	bf00      	nop
 8008d08:	0800b509 	.word	0x0800b509
 8008d0c:	0800b51a 	.word	0x0800b51a

08008d10 <__mcmp>:
 8008d10:	690a      	ldr	r2, [r1, #16]
 8008d12:	4603      	mov	r3, r0
 8008d14:	6900      	ldr	r0, [r0, #16]
 8008d16:	1a80      	subs	r0, r0, r2
 8008d18:	b530      	push	{r4, r5, lr}
 8008d1a:	d10e      	bne.n	8008d3a <__mcmp+0x2a>
 8008d1c:	3314      	adds	r3, #20
 8008d1e:	3114      	adds	r1, #20
 8008d20:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8008d24:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8008d28:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8008d2c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8008d30:	4295      	cmp	r5, r2
 8008d32:	d003      	beq.n	8008d3c <__mcmp+0x2c>
 8008d34:	d205      	bcs.n	8008d42 <__mcmp+0x32>
 8008d36:	f04f 30ff 	mov.w	r0, #4294967295
 8008d3a:	bd30      	pop	{r4, r5, pc}
 8008d3c:	42a3      	cmp	r3, r4
 8008d3e:	d3f3      	bcc.n	8008d28 <__mcmp+0x18>
 8008d40:	e7fb      	b.n	8008d3a <__mcmp+0x2a>
 8008d42:	2001      	movs	r0, #1
 8008d44:	e7f9      	b.n	8008d3a <__mcmp+0x2a>
	...

08008d48 <__mdiff>:
 8008d48:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d4c:	4689      	mov	r9, r1
 8008d4e:	4606      	mov	r6, r0
 8008d50:	4611      	mov	r1, r2
 8008d52:	4648      	mov	r0, r9
 8008d54:	4614      	mov	r4, r2
 8008d56:	f7ff ffdb 	bl	8008d10 <__mcmp>
 8008d5a:	1e05      	subs	r5, r0, #0
 8008d5c:	d112      	bne.n	8008d84 <__mdiff+0x3c>
 8008d5e:	4629      	mov	r1, r5
 8008d60:	4630      	mov	r0, r6
 8008d62:	f7ff fd19 	bl	8008798 <_Balloc>
 8008d66:	4602      	mov	r2, r0
 8008d68:	b928      	cbnz	r0, 8008d76 <__mdiff+0x2e>
 8008d6a:	4b3f      	ldr	r3, [pc, #252]	@ (8008e68 <__mdiff+0x120>)
 8008d6c:	f240 2137 	movw	r1, #567	@ 0x237
 8008d70:	483e      	ldr	r0, [pc, #248]	@ (8008e6c <__mdiff+0x124>)
 8008d72:	f001 fb19 	bl	800a3a8 <__assert_func>
 8008d76:	2301      	movs	r3, #1
 8008d78:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008d7c:	4610      	mov	r0, r2
 8008d7e:	b003      	add	sp, #12
 8008d80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008d84:	bfbc      	itt	lt
 8008d86:	464b      	movlt	r3, r9
 8008d88:	46a1      	movlt	r9, r4
 8008d8a:	4630      	mov	r0, r6
 8008d8c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8008d90:	bfba      	itte	lt
 8008d92:	461c      	movlt	r4, r3
 8008d94:	2501      	movlt	r5, #1
 8008d96:	2500      	movge	r5, #0
 8008d98:	f7ff fcfe 	bl	8008798 <_Balloc>
 8008d9c:	4602      	mov	r2, r0
 8008d9e:	b918      	cbnz	r0, 8008da8 <__mdiff+0x60>
 8008da0:	4b31      	ldr	r3, [pc, #196]	@ (8008e68 <__mdiff+0x120>)
 8008da2:	f240 2145 	movw	r1, #581	@ 0x245
 8008da6:	e7e3      	b.n	8008d70 <__mdiff+0x28>
 8008da8:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8008dac:	6926      	ldr	r6, [r4, #16]
 8008dae:	60c5      	str	r5, [r0, #12]
 8008db0:	f109 0310 	add.w	r3, r9, #16
 8008db4:	f109 0514 	add.w	r5, r9, #20
 8008db8:	f104 0e14 	add.w	lr, r4, #20
 8008dbc:	f100 0b14 	add.w	fp, r0, #20
 8008dc0:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8008dc4:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8008dc8:	9301      	str	r3, [sp, #4]
 8008dca:	46d9      	mov	r9, fp
 8008dcc:	f04f 0c00 	mov.w	ip, #0
 8008dd0:	9b01      	ldr	r3, [sp, #4]
 8008dd2:	f85e 0b04 	ldr.w	r0, [lr], #4
 8008dd6:	f853 af04 	ldr.w	sl, [r3, #4]!
 8008dda:	9301      	str	r3, [sp, #4]
 8008ddc:	fa1f f38a 	uxth.w	r3, sl
 8008de0:	4619      	mov	r1, r3
 8008de2:	b283      	uxth	r3, r0
 8008de4:	1acb      	subs	r3, r1, r3
 8008de6:	0c00      	lsrs	r0, r0, #16
 8008de8:	4463      	add	r3, ip
 8008dea:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8008dee:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8008df2:	b29b      	uxth	r3, r3
 8008df4:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8008df8:	4576      	cmp	r6, lr
 8008dfa:	f849 3b04 	str.w	r3, [r9], #4
 8008dfe:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008e02:	d8e5      	bhi.n	8008dd0 <__mdiff+0x88>
 8008e04:	1b33      	subs	r3, r6, r4
 8008e06:	3b15      	subs	r3, #21
 8008e08:	f023 0303 	bic.w	r3, r3, #3
 8008e0c:	3415      	adds	r4, #21
 8008e0e:	3304      	adds	r3, #4
 8008e10:	42a6      	cmp	r6, r4
 8008e12:	bf38      	it	cc
 8008e14:	2304      	movcc	r3, #4
 8008e16:	441d      	add	r5, r3
 8008e18:	445b      	add	r3, fp
 8008e1a:	461e      	mov	r6, r3
 8008e1c:	462c      	mov	r4, r5
 8008e1e:	4544      	cmp	r4, r8
 8008e20:	d30e      	bcc.n	8008e40 <__mdiff+0xf8>
 8008e22:	f108 0103 	add.w	r1, r8, #3
 8008e26:	1b49      	subs	r1, r1, r5
 8008e28:	f021 0103 	bic.w	r1, r1, #3
 8008e2c:	3d03      	subs	r5, #3
 8008e2e:	45a8      	cmp	r8, r5
 8008e30:	bf38      	it	cc
 8008e32:	2100      	movcc	r1, #0
 8008e34:	440b      	add	r3, r1
 8008e36:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008e3a:	b191      	cbz	r1, 8008e62 <__mdiff+0x11a>
 8008e3c:	6117      	str	r7, [r2, #16]
 8008e3e:	e79d      	b.n	8008d7c <__mdiff+0x34>
 8008e40:	f854 1b04 	ldr.w	r1, [r4], #4
 8008e44:	46e6      	mov	lr, ip
 8008e46:	0c08      	lsrs	r0, r1, #16
 8008e48:	fa1c fc81 	uxtah	ip, ip, r1
 8008e4c:	4471      	add	r1, lr
 8008e4e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8008e52:	b289      	uxth	r1, r1
 8008e54:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8008e58:	f846 1b04 	str.w	r1, [r6], #4
 8008e5c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008e60:	e7dd      	b.n	8008e1e <__mdiff+0xd6>
 8008e62:	3f01      	subs	r7, #1
 8008e64:	e7e7      	b.n	8008e36 <__mdiff+0xee>
 8008e66:	bf00      	nop
 8008e68:	0800b509 	.word	0x0800b509
 8008e6c:	0800b51a 	.word	0x0800b51a

08008e70 <__ulp>:
 8008e70:	b082      	sub	sp, #8
 8008e72:	ed8d 0b00 	vstr	d0, [sp]
 8008e76:	9a01      	ldr	r2, [sp, #4]
 8008e78:	4b0f      	ldr	r3, [pc, #60]	@ (8008eb8 <__ulp+0x48>)
 8008e7a:	4013      	ands	r3, r2
 8008e7c:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8008e80:	2b00      	cmp	r3, #0
 8008e82:	dc08      	bgt.n	8008e96 <__ulp+0x26>
 8008e84:	425b      	negs	r3, r3
 8008e86:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8008e8a:	ea4f 5223 	mov.w	r2, r3, asr #20
 8008e8e:	da04      	bge.n	8008e9a <__ulp+0x2a>
 8008e90:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8008e94:	4113      	asrs	r3, r2
 8008e96:	2200      	movs	r2, #0
 8008e98:	e008      	b.n	8008eac <__ulp+0x3c>
 8008e9a:	f1a2 0314 	sub.w	r3, r2, #20
 8008e9e:	2b1e      	cmp	r3, #30
 8008ea0:	bfda      	itte	le
 8008ea2:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8008ea6:	40da      	lsrle	r2, r3
 8008ea8:	2201      	movgt	r2, #1
 8008eaa:	2300      	movs	r3, #0
 8008eac:	4619      	mov	r1, r3
 8008eae:	4610      	mov	r0, r2
 8008eb0:	ec41 0b10 	vmov	d0, r0, r1
 8008eb4:	b002      	add	sp, #8
 8008eb6:	4770      	bx	lr
 8008eb8:	7ff00000 	.word	0x7ff00000

08008ebc <__b2d>:
 8008ebc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008ec0:	6906      	ldr	r6, [r0, #16]
 8008ec2:	f100 0814 	add.w	r8, r0, #20
 8008ec6:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8008eca:	1f37      	subs	r7, r6, #4
 8008ecc:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8008ed0:	4610      	mov	r0, r2
 8008ed2:	f7ff fd53 	bl	800897c <__hi0bits>
 8008ed6:	f1c0 0320 	rsb	r3, r0, #32
 8008eda:	280a      	cmp	r0, #10
 8008edc:	600b      	str	r3, [r1, #0]
 8008ede:	491b      	ldr	r1, [pc, #108]	@ (8008f4c <__b2d+0x90>)
 8008ee0:	dc15      	bgt.n	8008f0e <__b2d+0x52>
 8008ee2:	f1c0 0c0b 	rsb	ip, r0, #11
 8008ee6:	fa22 f30c 	lsr.w	r3, r2, ip
 8008eea:	45b8      	cmp	r8, r7
 8008eec:	ea43 0501 	orr.w	r5, r3, r1
 8008ef0:	bf34      	ite	cc
 8008ef2:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8008ef6:	2300      	movcs	r3, #0
 8008ef8:	3015      	adds	r0, #21
 8008efa:	fa02 f000 	lsl.w	r0, r2, r0
 8008efe:	fa23 f30c 	lsr.w	r3, r3, ip
 8008f02:	4303      	orrs	r3, r0
 8008f04:	461c      	mov	r4, r3
 8008f06:	ec45 4b10 	vmov	d0, r4, r5
 8008f0a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008f0e:	45b8      	cmp	r8, r7
 8008f10:	bf3a      	itte	cc
 8008f12:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8008f16:	f1a6 0708 	subcc.w	r7, r6, #8
 8008f1a:	2300      	movcs	r3, #0
 8008f1c:	380b      	subs	r0, #11
 8008f1e:	d012      	beq.n	8008f46 <__b2d+0x8a>
 8008f20:	f1c0 0120 	rsb	r1, r0, #32
 8008f24:	fa23 f401 	lsr.w	r4, r3, r1
 8008f28:	4082      	lsls	r2, r0
 8008f2a:	4322      	orrs	r2, r4
 8008f2c:	4547      	cmp	r7, r8
 8008f2e:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 8008f32:	bf8c      	ite	hi
 8008f34:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8008f38:	2200      	movls	r2, #0
 8008f3a:	4083      	lsls	r3, r0
 8008f3c:	40ca      	lsrs	r2, r1
 8008f3e:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8008f42:	4313      	orrs	r3, r2
 8008f44:	e7de      	b.n	8008f04 <__b2d+0x48>
 8008f46:	ea42 0501 	orr.w	r5, r2, r1
 8008f4a:	e7db      	b.n	8008f04 <__b2d+0x48>
 8008f4c:	3ff00000 	.word	0x3ff00000

08008f50 <__d2b>:
 8008f50:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008f54:	460f      	mov	r7, r1
 8008f56:	2101      	movs	r1, #1
 8008f58:	ec59 8b10 	vmov	r8, r9, d0
 8008f5c:	4616      	mov	r6, r2
 8008f5e:	f7ff fc1b 	bl	8008798 <_Balloc>
 8008f62:	4604      	mov	r4, r0
 8008f64:	b930      	cbnz	r0, 8008f74 <__d2b+0x24>
 8008f66:	4602      	mov	r2, r0
 8008f68:	4b23      	ldr	r3, [pc, #140]	@ (8008ff8 <__d2b+0xa8>)
 8008f6a:	4824      	ldr	r0, [pc, #144]	@ (8008ffc <__d2b+0xac>)
 8008f6c:	f240 310f 	movw	r1, #783	@ 0x30f
 8008f70:	f001 fa1a 	bl	800a3a8 <__assert_func>
 8008f74:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8008f78:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008f7c:	b10d      	cbz	r5, 8008f82 <__d2b+0x32>
 8008f7e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008f82:	9301      	str	r3, [sp, #4]
 8008f84:	f1b8 0300 	subs.w	r3, r8, #0
 8008f88:	d023      	beq.n	8008fd2 <__d2b+0x82>
 8008f8a:	4668      	mov	r0, sp
 8008f8c:	9300      	str	r3, [sp, #0]
 8008f8e:	f7ff fd14 	bl	80089ba <__lo0bits>
 8008f92:	e9dd 1200 	ldrd	r1, r2, [sp]
 8008f96:	b1d0      	cbz	r0, 8008fce <__d2b+0x7e>
 8008f98:	f1c0 0320 	rsb	r3, r0, #32
 8008f9c:	fa02 f303 	lsl.w	r3, r2, r3
 8008fa0:	430b      	orrs	r3, r1
 8008fa2:	40c2      	lsrs	r2, r0
 8008fa4:	6163      	str	r3, [r4, #20]
 8008fa6:	9201      	str	r2, [sp, #4]
 8008fa8:	9b01      	ldr	r3, [sp, #4]
 8008faa:	61a3      	str	r3, [r4, #24]
 8008fac:	2b00      	cmp	r3, #0
 8008fae:	bf0c      	ite	eq
 8008fb0:	2201      	moveq	r2, #1
 8008fb2:	2202      	movne	r2, #2
 8008fb4:	6122      	str	r2, [r4, #16]
 8008fb6:	b1a5      	cbz	r5, 8008fe2 <__d2b+0x92>
 8008fb8:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8008fbc:	4405      	add	r5, r0
 8008fbe:	603d      	str	r5, [r7, #0]
 8008fc0:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8008fc4:	6030      	str	r0, [r6, #0]
 8008fc6:	4620      	mov	r0, r4
 8008fc8:	b003      	add	sp, #12
 8008fca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008fce:	6161      	str	r1, [r4, #20]
 8008fd0:	e7ea      	b.n	8008fa8 <__d2b+0x58>
 8008fd2:	a801      	add	r0, sp, #4
 8008fd4:	f7ff fcf1 	bl	80089ba <__lo0bits>
 8008fd8:	9b01      	ldr	r3, [sp, #4]
 8008fda:	6163      	str	r3, [r4, #20]
 8008fdc:	3020      	adds	r0, #32
 8008fde:	2201      	movs	r2, #1
 8008fe0:	e7e8      	b.n	8008fb4 <__d2b+0x64>
 8008fe2:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008fe6:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8008fea:	6038      	str	r0, [r7, #0]
 8008fec:	6918      	ldr	r0, [r3, #16]
 8008fee:	f7ff fcc5 	bl	800897c <__hi0bits>
 8008ff2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8008ff6:	e7e5      	b.n	8008fc4 <__d2b+0x74>
 8008ff8:	0800b509 	.word	0x0800b509
 8008ffc:	0800b51a 	.word	0x0800b51a

08009000 <__ratio>:
 8009000:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009004:	b085      	sub	sp, #20
 8009006:	e9cd 1000 	strd	r1, r0, [sp]
 800900a:	a902      	add	r1, sp, #8
 800900c:	f7ff ff56 	bl	8008ebc <__b2d>
 8009010:	9800      	ldr	r0, [sp, #0]
 8009012:	a903      	add	r1, sp, #12
 8009014:	ec55 4b10 	vmov	r4, r5, d0
 8009018:	f7ff ff50 	bl	8008ebc <__b2d>
 800901c:	9b01      	ldr	r3, [sp, #4]
 800901e:	6919      	ldr	r1, [r3, #16]
 8009020:	9b00      	ldr	r3, [sp, #0]
 8009022:	691b      	ldr	r3, [r3, #16]
 8009024:	1ac9      	subs	r1, r1, r3
 8009026:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800902a:	1a9b      	subs	r3, r3, r2
 800902c:	ec5b ab10 	vmov	sl, fp, d0
 8009030:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8009034:	2b00      	cmp	r3, #0
 8009036:	bfce      	itee	gt
 8009038:	462a      	movgt	r2, r5
 800903a:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800903e:	465a      	movle	r2, fp
 8009040:	462f      	mov	r7, r5
 8009042:	46d9      	mov	r9, fp
 8009044:	bfcc      	ite	gt
 8009046:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800904a:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800904e:	464b      	mov	r3, r9
 8009050:	4652      	mov	r2, sl
 8009052:	4620      	mov	r0, r4
 8009054:	4639      	mov	r1, r7
 8009056:	f7f7 fbf9 	bl	800084c <__aeabi_ddiv>
 800905a:	ec41 0b10 	vmov	d0, r0, r1
 800905e:	b005      	add	sp, #20
 8009060:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009064 <__copybits>:
 8009064:	3901      	subs	r1, #1
 8009066:	b570      	push	{r4, r5, r6, lr}
 8009068:	1149      	asrs	r1, r1, #5
 800906a:	6914      	ldr	r4, [r2, #16]
 800906c:	3101      	adds	r1, #1
 800906e:	f102 0314 	add.w	r3, r2, #20
 8009072:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8009076:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800907a:	1f05      	subs	r5, r0, #4
 800907c:	42a3      	cmp	r3, r4
 800907e:	d30c      	bcc.n	800909a <__copybits+0x36>
 8009080:	1aa3      	subs	r3, r4, r2
 8009082:	3b11      	subs	r3, #17
 8009084:	f023 0303 	bic.w	r3, r3, #3
 8009088:	3211      	adds	r2, #17
 800908a:	42a2      	cmp	r2, r4
 800908c:	bf88      	it	hi
 800908e:	2300      	movhi	r3, #0
 8009090:	4418      	add	r0, r3
 8009092:	2300      	movs	r3, #0
 8009094:	4288      	cmp	r0, r1
 8009096:	d305      	bcc.n	80090a4 <__copybits+0x40>
 8009098:	bd70      	pop	{r4, r5, r6, pc}
 800909a:	f853 6b04 	ldr.w	r6, [r3], #4
 800909e:	f845 6f04 	str.w	r6, [r5, #4]!
 80090a2:	e7eb      	b.n	800907c <__copybits+0x18>
 80090a4:	f840 3b04 	str.w	r3, [r0], #4
 80090a8:	e7f4      	b.n	8009094 <__copybits+0x30>

080090aa <__any_on>:
 80090aa:	f100 0214 	add.w	r2, r0, #20
 80090ae:	6900      	ldr	r0, [r0, #16]
 80090b0:	114b      	asrs	r3, r1, #5
 80090b2:	4298      	cmp	r0, r3
 80090b4:	b510      	push	{r4, lr}
 80090b6:	db11      	blt.n	80090dc <__any_on+0x32>
 80090b8:	dd0a      	ble.n	80090d0 <__any_on+0x26>
 80090ba:	f011 011f 	ands.w	r1, r1, #31
 80090be:	d007      	beq.n	80090d0 <__any_on+0x26>
 80090c0:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80090c4:	fa24 f001 	lsr.w	r0, r4, r1
 80090c8:	fa00 f101 	lsl.w	r1, r0, r1
 80090cc:	428c      	cmp	r4, r1
 80090ce:	d10b      	bne.n	80090e8 <__any_on+0x3e>
 80090d0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80090d4:	4293      	cmp	r3, r2
 80090d6:	d803      	bhi.n	80090e0 <__any_on+0x36>
 80090d8:	2000      	movs	r0, #0
 80090da:	bd10      	pop	{r4, pc}
 80090dc:	4603      	mov	r3, r0
 80090de:	e7f7      	b.n	80090d0 <__any_on+0x26>
 80090e0:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80090e4:	2900      	cmp	r1, #0
 80090e6:	d0f5      	beq.n	80090d4 <__any_on+0x2a>
 80090e8:	2001      	movs	r0, #1
 80090ea:	e7f6      	b.n	80090da <__any_on+0x30>

080090ec <sulp>:
 80090ec:	b570      	push	{r4, r5, r6, lr}
 80090ee:	4604      	mov	r4, r0
 80090f0:	460d      	mov	r5, r1
 80090f2:	ec45 4b10 	vmov	d0, r4, r5
 80090f6:	4616      	mov	r6, r2
 80090f8:	f7ff feba 	bl	8008e70 <__ulp>
 80090fc:	ec51 0b10 	vmov	r0, r1, d0
 8009100:	b17e      	cbz	r6, 8009122 <sulp+0x36>
 8009102:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8009106:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800910a:	2b00      	cmp	r3, #0
 800910c:	dd09      	ble.n	8009122 <sulp+0x36>
 800910e:	051b      	lsls	r3, r3, #20
 8009110:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8009114:	2400      	movs	r4, #0
 8009116:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800911a:	4622      	mov	r2, r4
 800911c:	462b      	mov	r3, r5
 800911e:	f7f7 fa6b 	bl	80005f8 <__aeabi_dmul>
 8009122:	ec41 0b10 	vmov	d0, r0, r1
 8009126:	bd70      	pop	{r4, r5, r6, pc}

08009128 <_strtod_l>:
 8009128:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800912c:	b09f      	sub	sp, #124	@ 0x7c
 800912e:	460c      	mov	r4, r1
 8009130:	9217      	str	r2, [sp, #92]	@ 0x5c
 8009132:	2200      	movs	r2, #0
 8009134:	921a      	str	r2, [sp, #104]	@ 0x68
 8009136:	9005      	str	r0, [sp, #20]
 8009138:	f04f 0a00 	mov.w	sl, #0
 800913c:	f04f 0b00 	mov.w	fp, #0
 8009140:	460a      	mov	r2, r1
 8009142:	9219      	str	r2, [sp, #100]	@ 0x64
 8009144:	7811      	ldrb	r1, [r2, #0]
 8009146:	292b      	cmp	r1, #43	@ 0x2b
 8009148:	d04a      	beq.n	80091e0 <_strtod_l+0xb8>
 800914a:	d838      	bhi.n	80091be <_strtod_l+0x96>
 800914c:	290d      	cmp	r1, #13
 800914e:	d832      	bhi.n	80091b6 <_strtod_l+0x8e>
 8009150:	2908      	cmp	r1, #8
 8009152:	d832      	bhi.n	80091ba <_strtod_l+0x92>
 8009154:	2900      	cmp	r1, #0
 8009156:	d03b      	beq.n	80091d0 <_strtod_l+0xa8>
 8009158:	2200      	movs	r2, #0
 800915a:	920e      	str	r2, [sp, #56]	@ 0x38
 800915c:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800915e:	782a      	ldrb	r2, [r5, #0]
 8009160:	2a30      	cmp	r2, #48	@ 0x30
 8009162:	f040 80b2 	bne.w	80092ca <_strtod_l+0x1a2>
 8009166:	786a      	ldrb	r2, [r5, #1]
 8009168:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800916c:	2a58      	cmp	r2, #88	@ 0x58
 800916e:	d16e      	bne.n	800924e <_strtod_l+0x126>
 8009170:	9302      	str	r3, [sp, #8]
 8009172:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009174:	9301      	str	r3, [sp, #4]
 8009176:	ab1a      	add	r3, sp, #104	@ 0x68
 8009178:	9300      	str	r3, [sp, #0]
 800917a:	4a8f      	ldr	r2, [pc, #572]	@ (80093b8 <_strtod_l+0x290>)
 800917c:	9805      	ldr	r0, [sp, #20]
 800917e:	ab1b      	add	r3, sp, #108	@ 0x6c
 8009180:	a919      	add	r1, sp, #100	@ 0x64
 8009182:	f001 f9ab 	bl	800a4dc <__gethex>
 8009186:	f010 060f 	ands.w	r6, r0, #15
 800918a:	4604      	mov	r4, r0
 800918c:	d005      	beq.n	800919a <_strtod_l+0x72>
 800918e:	2e06      	cmp	r6, #6
 8009190:	d128      	bne.n	80091e4 <_strtod_l+0xbc>
 8009192:	3501      	adds	r5, #1
 8009194:	2300      	movs	r3, #0
 8009196:	9519      	str	r5, [sp, #100]	@ 0x64
 8009198:	930e      	str	r3, [sp, #56]	@ 0x38
 800919a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800919c:	2b00      	cmp	r3, #0
 800919e:	f040 858e 	bne.w	8009cbe <_strtod_l+0xb96>
 80091a2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80091a4:	b1cb      	cbz	r3, 80091da <_strtod_l+0xb2>
 80091a6:	4652      	mov	r2, sl
 80091a8:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 80091ac:	ec43 2b10 	vmov	d0, r2, r3
 80091b0:	b01f      	add	sp, #124	@ 0x7c
 80091b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80091b6:	2920      	cmp	r1, #32
 80091b8:	d1ce      	bne.n	8009158 <_strtod_l+0x30>
 80091ba:	3201      	adds	r2, #1
 80091bc:	e7c1      	b.n	8009142 <_strtod_l+0x1a>
 80091be:	292d      	cmp	r1, #45	@ 0x2d
 80091c0:	d1ca      	bne.n	8009158 <_strtod_l+0x30>
 80091c2:	2101      	movs	r1, #1
 80091c4:	910e      	str	r1, [sp, #56]	@ 0x38
 80091c6:	1c51      	adds	r1, r2, #1
 80091c8:	9119      	str	r1, [sp, #100]	@ 0x64
 80091ca:	7852      	ldrb	r2, [r2, #1]
 80091cc:	2a00      	cmp	r2, #0
 80091ce:	d1c5      	bne.n	800915c <_strtod_l+0x34>
 80091d0:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80091d2:	9419      	str	r4, [sp, #100]	@ 0x64
 80091d4:	2b00      	cmp	r3, #0
 80091d6:	f040 8570 	bne.w	8009cba <_strtod_l+0xb92>
 80091da:	4652      	mov	r2, sl
 80091dc:	465b      	mov	r3, fp
 80091de:	e7e5      	b.n	80091ac <_strtod_l+0x84>
 80091e0:	2100      	movs	r1, #0
 80091e2:	e7ef      	b.n	80091c4 <_strtod_l+0x9c>
 80091e4:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 80091e6:	b13a      	cbz	r2, 80091f8 <_strtod_l+0xd0>
 80091e8:	2135      	movs	r1, #53	@ 0x35
 80091ea:	a81c      	add	r0, sp, #112	@ 0x70
 80091ec:	f7ff ff3a 	bl	8009064 <__copybits>
 80091f0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80091f2:	9805      	ldr	r0, [sp, #20]
 80091f4:	f7ff fb10 	bl	8008818 <_Bfree>
 80091f8:	3e01      	subs	r6, #1
 80091fa:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 80091fc:	2e04      	cmp	r6, #4
 80091fe:	d806      	bhi.n	800920e <_strtod_l+0xe6>
 8009200:	e8df f006 	tbb	[pc, r6]
 8009204:	201d0314 	.word	0x201d0314
 8009208:	14          	.byte	0x14
 8009209:	00          	.byte	0x00
 800920a:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800920e:	05e1      	lsls	r1, r4, #23
 8009210:	bf48      	it	mi
 8009212:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8009216:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800921a:	0d1b      	lsrs	r3, r3, #20
 800921c:	051b      	lsls	r3, r3, #20
 800921e:	2b00      	cmp	r3, #0
 8009220:	d1bb      	bne.n	800919a <_strtod_l+0x72>
 8009222:	f7fe fb2b 	bl	800787c <__errno>
 8009226:	2322      	movs	r3, #34	@ 0x22
 8009228:	6003      	str	r3, [r0, #0]
 800922a:	e7b6      	b.n	800919a <_strtod_l+0x72>
 800922c:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8009230:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8009234:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8009238:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800923c:	e7e7      	b.n	800920e <_strtod_l+0xe6>
 800923e:	f8df b180 	ldr.w	fp, [pc, #384]	@ 80093c0 <_strtod_l+0x298>
 8009242:	e7e4      	b.n	800920e <_strtod_l+0xe6>
 8009244:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8009248:	f04f 3aff 	mov.w	sl, #4294967295
 800924c:	e7df      	b.n	800920e <_strtod_l+0xe6>
 800924e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009250:	1c5a      	adds	r2, r3, #1
 8009252:	9219      	str	r2, [sp, #100]	@ 0x64
 8009254:	785b      	ldrb	r3, [r3, #1]
 8009256:	2b30      	cmp	r3, #48	@ 0x30
 8009258:	d0f9      	beq.n	800924e <_strtod_l+0x126>
 800925a:	2b00      	cmp	r3, #0
 800925c:	d09d      	beq.n	800919a <_strtod_l+0x72>
 800925e:	2301      	movs	r3, #1
 8009260:	2700      	movs	r7, #0
 8009262:	9308      	str	r3, [sp, #32]
 8009264:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009266:	930c      	str	r3, [sp, #48]	@ 0x30
 8009268:	970b      	str	r7, [sp, #44]	@ 0x2c
 800926a:	46b9      	mov	r9, r7
 800926c:	220a      	movs	r2, #10
 800926e:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8009270:	7805      	ldrb	r5, [r0, #0]
 8009272:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8009276:	b2d9      	uxtb	r1, r3
 8009278:	2909      	cmp	r1, #9
 800927a:	d928      	bls.n	80092ce <_strtod_l+0x1a6>
 800927c:	494f      	ldr	r1, [pc, #316]	@ (80093bc <_strtod_l+0x294>)
 800927e:	2201      	movs	r2, #1
 8009280:	f001 f838 	bl	800a2f4 <strncmp>
 8009284:	2800      	cmp	r0, #0
 8009286:	d032      	beq.n	80092ee <_strtod_l+0x1c6>
 8009288:	2000      	movs	r0, #0
 800928a:	462a      	mov	r2, r5
 800928c:	900a      	str	r0, [sp, #40]	@ 0x28
 800928e:	464d      	mov	r5, r9
 8009290:	4603      	mov	r3, r0
 8009292:	2a65      	cmp	r2, #101	@ 0x65
 8009294:	d001      	beq.n	800929a <_strtod_l+0x172>
 8009296:	2a45      	cmp	r2, #69	@ 0x45
 8009298:	d114      	bne.n	80092c4 <_strtod_l+0x19c>
 800929a:	b91d      	cbnz	r5, 80092a4 <_strtod_l+0x17c>
 800929c:	9a08      	ldr	r2, [sp, #32]
 800929e:	4302      	orrs	r2, r0
 80092a0:	d096      	beq.n	80091d0 <_strtod_l+0xa8>
 80092a2:	2500      	movs	r5, #0
 80092a4:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 80092a6:	1c62      	adds	r2, r4, #1
 80092a8:	9219      	str	r2, [sp, #100]	@ 0x64
 80092aa:	7862      	ldrb	r2, [r4, #1]
 80092ac:	2a2b      	cmp	r2, #43	@ 0x2b
 80092ae:	d07a      	beq.n	80093a6 <_strtod_l+0x27e>
 80092b0:	2a2d      	cmp	r2, #45	@ 0x2d
 80092b2:	d07e      	beq.n	80093b2 <_strtod_l+0x28a>
 80092b4:	f04f 0c00 	mov.w	ip, #0
 80092b8:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 80092bc:	2909      	cmp	r1, #9
 80092be:	f240 8085 	bls.w	80093cc <_strtod_l+0x2a4>
 80092c2:	9419      	str	r4, [sp, #100]	@ 0x64
 80092c4:	f04f 0800 	mov.w	r8, #0
 80092c8:	e0a5      	b.n	8009416 <_strtod_l+0x2ee>
 80092ca:	2300      	movs	r3, #0
 80092cc:	e7c8      	b.n	8009260 <_strtod_l+0x138>
 80092ce:	f1b9 0f08 	cmp.w	r9, #8
 80092d2:	bfd8      	it	le
 80092d4:	990b      	ldrle	r1, [sp, #44]	@ 0x2c
 80092d6:	f100 0001 	add.w	r0, r0, #1
 80092da:	bfda      	itte	le
 80092dc:	fb02 3301 	mlale	r3, r2, r1, r3
 80092e0:	930b      	strle	r3, [sp, #44]	@ 0x2c
 80092e2:	fb02 3707 	mlagt	r7, r2, r7, r3
 80092e6:	f109 0901 	add.w	r9, r9, #1
 80092ea:	9019      	str	r0, [sp, #100]	@ 0x64
 80092ec:	e7bf      	b.n	800926e <_strtod_l+0x146>
 80092ee:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80092f0:	1c5a      	adds	r2, r3, #1
 80092f2:	9219      	str	r2, [sp, #100]	@ 0x64
 80092f4:	785a      	ldrb	r2, [r3, #1]
 80092f6:	f1b9 0f00 	cmp.w	r9, #0
 80092fa:	d03b      	beq.n	8009374 <_strtod_l+0x24c>
 80092fc:	900a      	str	r0, [sp, #40]	@ 0x28
 80092fe:	464d      	mov	r5, r9
 8009300:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8009304:	2b09      	cmp	r3, #9
 8009306:	d912      	bls.n	800932e <_strtod_l+0x206>
 8009308:	2301      	movs	r3, #1
 800930a:	e7c2      	b.n	8009292 <_strtod_l+0x16a>
 800930c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800930e:	1c5a      	adds	r2, r3, #1
 8009310:	9219      	str	r2, [sp, #100]	@ 0x64
 8009312:	785a      	ldrb	r2, [r3, #1]
 8009314:	3001      	adds	r0, #1
 8009316:	2a30      	cmp	r2, #48	@ 0x30
 8009318:	d0f8      	beq.n	800930c <_strtod_l+0x1e4>
 800931a:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800931e:	2b08      	cmp	r3, #8
 8009320:	f200 84d2 	bhi.w	8009cc8 <_strtod_l+0xba0>
 8009324:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009326:	900a      	str	r0, [sp, #40]	@ 0x28
 8009328:	2000      	movs	r0, #0
 800932a:	930c      	str	r3, [sp, #48]	@ 0x30
 800932c:	4605      	mov	r5, r0
 800932e:	3a30      	subs	r2, #48	@ 0x30
 8009330:	f100 0301 	add.w	r3, r0, #1
 8009334:	d018      	beq.n	8009368 <_strtod_l+0x240>
 8009336:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8009338:	4419      	add	r1, r3
 800933a:	910a      	str	r1, [sp, #40]	@ 0x28
 800933c:	462e      	mov	r6, r5
 800933e:	f04f 0e0a 	mov.w	lr, #10
 8009342:	1c71      	adds	r1, r6, #1
 8009344:	eba1 0c05 	sub.w	ip, r1, r5
 8009348:	4563      	cmp	r3, ip
 800934a:	dc15      	bgt.n	8009378 <_strtod_l+0x250>
 800934c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 8009350:	182b      	adds	r3, r5, r0
 8009352:	2b08      	cmp	r3, #8
 8009354:	f105 0501 	add.w	r5, r5, #1
 8009358:	4405      	add	r5, r0
 800935a:	dc1a      	bgt.n	8009392 <_strtod_l+0x26a>
 800935c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800935e:	230a      	movs	r3, #10
 8009360:	fb03 2301 	mla	r3, r3, r1, r2
 8009364:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009366:	2300      	movs	r3, #0
 8009368:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800936a:	1c51      	adds	r1, r2, #1
 800936c:	9119      	str	r1, [sp, #100]	@ 0x64
 800936e:	7852      	ldrb	r2, [r2, #1]
 8009370:	4618      	mov	r0, r3
 8009372:	e7c5      	b.n	8009300 <_strtod_l+0x1d8>
 8009374:	4648      	mov	r0, r9
 8009376:	e7ce      	b.n	8009316 <_strtod_l+0x1ee>
 8009378:	2e08      	cmp	r6, #8
 800937a:	dc05      	bgt.n	8009388 <_strtod_l+0x260>
 800937c:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800937e:	fb0e f606 	mul.w	r6, lr, r6
 8009382:	960b      	str	r6, [sp, #44]	@ 0x2c
 8009384:	460e      	mov	r6, r1
 8009386:	e7dc      	b.n	8009342 <_strtod_l+0x21a>
 8009388:	2910      	cmp	r1, #16
 800938a:	bfd8      	it	le
 800938c:	fb0e f707 	mulle.w	r7, lr, r7
 8009390:	e7f8      	b.n	8009384 <_strtod_l+0x25c>
 8009392:	2b0f      	cmp	r3, #15
 8009394:	bfdc      	itt	le
 8009396:	230a      	movle	r3, #10
 8009398:	fb03 2707 	mlale	r7, r3, r7, r2
 800939c:	e7e3      	b.n	8009366 <_strtod_l+0x23e>
 800939e:	2300      	movs	r3, #0
 80093a0:	930a      	str	r3, [sp, #40]	@ 0x28
 80093a2:	2301      	movs	r3, #1
 80093a4:	e77a      	b.n	800929c <_strtod_l+0x174>
 80093a6:	f04f 0c00 	mov.w	ip, #0
 80093aa:	1ca2      	adds	r2, r4, #2
 80093ac:	9219      	str	r2, [sp, #100]	@ 0x64
 80093ae:	78a2      	ldrb	r2, [r4, #2]
 80093b0:	e782      	b.n	80092b8 <_strtod_l+0x190>
 80093b2:	f04f 0c01 	mov.w	ip, #1
 80093b6:	e7f8      	b.n	80093aa <_strtod_l+0x282>
 80093b8:	0800b73c 	.word	0x0800b73c
 80093bc:	0800b573 	.word	0x0800b573
 80093c0:	7ff00000 	.word	0x7ff00000
 80093c4:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80093c6:	1c51      	adds	r1, r2, #1
 80093c8:	9119      	str	r1, [sp, #100]	@ 0x64
 80093ca:	7852      	ldrb	r2, [r2, #1]
 80093cc:	2a30      	cmp	r2, #48	@ 0x30
 80093ce:	d0f9      	beq.n	80093c4 <_strtod_l+0x29c>
 80093d0:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 80093d4:	2908      	cmp	r1, #8
 80093d6:	f63f af75 	bhi.w	80092c4 <_strtod_l+0x19c>
 80093da:	3a30      	subs	r2, #48	@ 0x30
 80093dc:	9209      	str	r2, [sp, #36]	@ 0x24
 80093de:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80093e0:	920f      	str	r2, [sp, #60]	@ 0x3c
 80093e2:	f04f 080a 	mov.w	r8, #10
 80093e6:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80093e8:	1c56      	adds	r6, r2, #1
 80093ea:	9619      	str	r6, [sp, #100]	@ 0x64
 80093ec:	7852      	ldrb	r2, [r2, #1]
 80093ee:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 80093f2:	f1be 0f09 	cmp.w	lr, #9
 80093f6:	d939      	bls.n	800946c <_strtod_l+0x344>
 80093f8:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 80093fa:	1a76      	subs	r6, r6, r1
 80093fc:	2e08      	cmp	r6, #8
 80093fe:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 8009402:	dc03      	bgt.n	800940c <_strtod_l+0x2e4>
 8009404:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8009406:	4588      	cmp	r8, r1
 8009408:	bfa8      	it	ge
 800940a:	4688      	movge	r8, r1
 800940c:	f1bc 0f00 	cmp.w	ip, #0
 8009410:	d001      	beq.n	8009416 <_strtod_l+0x2ee>
 8009412:	f1c8 0800 	rsb	r8, r8, #0
 8009416:	2d00      	cmp	r5, #0
 8009418:	d14e      	bne.n	80094b8 <_strtod_l+0x390>
 800941a:	9908      	ldr	r1, [sp, #32]
 800941c:	4308      	orrs	r0, r1
 800941e:	f47f aebc 	bne.w	800919a <_strtod_l+0x72>
 8009422:	2b00      	cmp	r3, #0
 8009424:	f47f aed4 	bne.w	80091d0 <_strtod_l+0xa8>
 8009428:	2a69      	cmp	r2, #105	@ 0x69
 800942a:	d028      	beq.n	800947e <_strtod_l+0x356>
 800942c:	dc25      	bgt.n	800947a <_strtod_l+0x352>
 800942e:	2a49      	cmp	r2, #73	@ 0x49
 8009430:	d025      	beq.n	800947e <_strtod_l+0x356>
 8009432:	2a4e      	cmp	r2, #78	@ 0x4e
 8009434:	f47f aecc 	bne.w	80091d0 <_strtod_l+0xa8>
 8009438:	499a      	ldr	r1, [pc, #616]	@ (80096a4 <_strtod_l+0x57c>)
 800943a:	a819      	add	r0, sp, #100	@ 0x64
 800943c:	f001 fa70 	bl	800a920 <__match>
 8009440:	2800      	cmp	r0, #0
 8009442:	f43f aec5 	beq.w	80091d0 <_strtod_l+0xa8>
 8009446:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009448:	781b      	ldrb	r3, [r3, #0]
 800944a:	2b28      	cmp	r3, #40	@ 0x28
 800944c:	d12e      	bne.n	80094ac <_strtod_l+0x384>
 800944e:	4996      	ldr	r1, [pc, #600]	@ (80096a8 <_strtod_l+0x580>)
 8009450:	aa1c      	add	r2, sp, #112	@ 0x70
 8009452:	a819      	add	r0, sp, #100	@ 0x64
 8009454:	f001 fa78 	bl	800a948 <__hexnan>
 8009458:	2805      	cmp	r0, #5
 800945a:	d127      	bne.n	80094ac <_strtod_l+0x384>
 800945c:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800945e:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 8009462:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8009466:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800946a:	e696      	b.n	800919a <_strtod_l+0x72>
 800946c:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800946e:	fb08 2101 	mla	r1, r8, r1, r2
 8009472:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8009476:	9209      	str	r2, [sp, #36]	@ 0x24
 8009478:	e7b5      	b.n	80093e6 <_strtod_l+0x2be>
 800947a:	2a6e      	cmp	r2, #110	@ 0x6e
 800947c:	e7da      	b.n	8009434 <_strtod_l+0x30c>
 800947e:	498b      	ldr	r1, [pc, #556]	@ (80096ac <_strtod_l+0x584>)
 8009480:	a819      	add	r0, sp, #100	@ 0x64
 8009482:	f001 fa4d 	bl	800a920 <__match>
 8009486:	2800      	cmp	r0, #0
 8009488:	f43f aea2 	beq.w	80091d0 <_strtod_l+0xa8>
 800948c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800948e:	4988      	ldr	r1, [pc, #544]	@ (80096b0 <_strtod_l+0x588>)
 8009490:	3b01      	subs	r3, #1
 8009492:	a819      	add	r0, sp, #100	@ 0x64
 8009494:	9319      	str	r3, [sp, #100]	@ 0x64
 8009496:	f001 fa43 	bl	800a920 <__match>
 800949a:	b910      	cbnz	r0, 80094a2 <_strtod_l+0x37a>
 800949c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800949e:	3301      	adds	r3, #1
 80094a0:	9319      	str	r3, [sp, #100]	@ 0x64
 80094a2:	f8df b21c 	ldr.w	fp, [pc, #540]	@ 80096c0 <_strtod_l+0x598>
 80094a6:	f04f 0a00 	mov.w	sl, #0
 80094aa:	e676      	b.n	800919a <_strtod_l+0x72>
 80094ac:	4881      	ldr	r0, [pc, #516]	@ (80096b4 <_strtod_l+0x58c>)
 80094ae:	f000 ff73 	bl	800a398 <nan>
 80094b2:	ec5b ab10 	vmov	sl, fp, d0
 80094b6:	e670      	b.n	800919a <_strtod_l+0x72>
 80094b8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80094ba:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 80094bc:	eba8 0303 	sub.w	r3, r8, r3
 80094c0:	f1b9 0f00 	cmp.w	r9, #0
 80094c4:	bf08      	it	eq
 80094c6:	46a9      	moveq	r9, r5
 80094c8:	2d10      	cmp	r5, #16
 80094ca:	9309      	str	r3, [sp, #36]	@ 0x24
 80094cc:	462c      	mov	r4, r5
 80094ce:	bfa8      	it	ge
 80094d0:	2410      	movge	r4, #16
 80094d2:	f7f7 f817 	bl	8000504 <__aeabi_ui2d>
 80094d6:	2d09      	cmp	r5, #9
 80094d8:	4682      	mov	sl, r0
 80094da:	468b      	mov	fp, r1
 80094dc:	dc13      	bgt.n	8009506 <_strtod_l+0x3de>
 80094de:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80094e0:	2b00      	cmp	r3, #0
 80094e2:	f43f ae5a 	beq.w	800919a <_strtod_l+0x72>
 80094e6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80094e8:	dd78      	ble.n	80095dc <_strtod_l+0x4b4>
 80094ea:	2b16      	cmp	r3, #22
 80094ec:	dc5f      	bgt.n	80095ae <_strtod_l+0x486>
 80094ee:	4972      	ldr	r1, [pc, #456]	@ (80096b8 <_strtod_l+0x590>)
 80094f0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80094f4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80094f8:	4652      	mov	r2, sl
 80094fa:	465b      	mov	r3, fp
 80094fc:	f7f7 f87c 	bl	80005f8 <__aeabi_dmul>
 8009500:	4682      	mov	sl, r0
 8009502:	468b      	mov	fp, r1
 8009504:	e649      	b.n	800919a <_strtod_l+0x72>
 8009506:	4b6c      	ldr	r3, [pc, #432]	@ (80096b8 <_strtod_l+0x590>)
 8009508:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800950c:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8009510:	f7f7 f872 	bl	80005f8 <__aeabi_dmul>
 8009514:	4682      	mov	sl, r0
 8009516:	4638      	mov	r0, r7
 8009518:	468b      	mov	fp, r1
 800951a:	f7f6 fff3 	bl	8000504 <__aeabi_ui2d>
 800951e:	4602      	mov	r2, r0
 8009520:	460b      	mov	r3, r1
 8009522:	4650      	mov	r0, sl
 8009524:	4659      	mov	r1, fp
 8009526:	f7f6 feb1 	bl	800028c <__adddf3>
 800952a:	2d0f      	cmp	r5, #15
 800952c:	4682      	mov	sl, r0
 800952e:	468b      	mov	fp, r1
 8009530:	ddd5      	ble.n	80094de <_strtod_l+0x3b6>
 8009532:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009534:	1b2c      	subs	r4, r5, r4
 8009536:	441c      	add	r4, r3
 8009538:	2c00      	cmp	r4, #0
 800953a:	f340 8093 	ble.w	8009664 <_strtod_l+0x53c>
 800953e:	f014 030f 	ands.w	r3, r4, #15
 8009542:	d00a      	beq.n	800955a <_strtod_l+0x432>
 8009544:	495c      	ldr	r1, [pc, #368]	@ (80096b8 <_strtod_l+0x590>)
 8009546:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800954a:	4652      	mov	r2, sl
 800954c:	465b      	mov	r3, fp
 800954e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009552:	f7f7 f851 	bl	80005f8 <__aeabi_dmul>
 8009556:	4682      	mov	sl, r0
 8009558:	468b      	mov	fp, r1
 800955a:	f034 040f 	bics.w	r4, r4, #15
 800955e:	d073      	beq.n	8009648 <_strtod_l+0x520>
 8009560:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 8009564:	dd49      	ble.n	80095fa <_strtod_l+0x4d2>
 8009566:	2400      	movs	r4, #0
 8009568:	46a0      	mov	r8, r4
 800956a:	940b      	str	r4, [sp, #44]	@ 0x2c
 800956c:	46a1      	mov	r9, r4
 800956e:	9a05      	ldr	r2, [sp, #20]
 8009570:	f8df b14c 	ldr.w	fp, [pc, #332]	@ 80096c0 <_strtod_l+0x598>
 8009574:	2322      	movs	r3, #34	@ 0x22
 8009576:	6013      	str	r3, [r2, #0]
 8009578:	f04f 0a00 	mov.w	sl, #0
 800957c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800957e:	2b00      	cmp	r3, #0
 8009580:	f43f ae0b 	beq.w	800919a <_strtod_l+0x72>
 8009584:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009586:	9805      	ldr	r0, [sp, #20]
 8009588:	f7ff f946 	bl	8008818 <_Bfree>
 800958c:	9805      	ldr	r0, [sp, #20]
 800958e:	4649      	mov	r1, r9
 8009590:	f7ff f942 	bl	8008818 <_Bfree>
 8009594:	9805      	ldr	r0, [sp, #20]
 8009596:	4641      	mov	r1, r8
 8009598:	f7ff f93e 	bl	8008818 <_Bfree>
 800959c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800959e:	9805      	ldr	r0, [sp, #20]
 80095a0:	f7ff f93a 	bl	8008818 <_Bfree>
 80095a4:	9805      	ldr	r0, [sp, #20]
 80095a6:	4621      	mov	r1, r4
 80095a8:	f7ff f936 	bl	8008818 <_Bfree>
 80095ac:	e5f5      	b.n	800919a <_strtod_l+0x72>
 80095ae:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80095b0:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 80095b4:	4293      	cmp	r3, r2
 80095b6:	dbbc      	blt.n	8009532 <_strtod_l+0x40a>
 80095b8:	4c3f      	ldr	r4, [pc, #252]	@ (80096b8 <_strtod_l+0x590>)
 80095ba:	f1c5 050f 	rsb	r5, r5, #15
 80095be:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 80095c2:	4652      	mov	r2, sl
 80095c4:	465b      	mov	r3, fp
 80095c6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80095ca:	f7f7 f815 	bl	80005f8 <__aeabi_dmul>
 80095ce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80095d0:	1b5d      	subs	r5, r3, r5
 80095d2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 80095d6:	e9d4 2300 	ldrd	r2, r3, [r4]
 80095da:	e78f      	b.n	80094fc <_strtod_l+0x3d4>
 80095dc:	3316      	adds	r3, #22
 80095de:	dba8      	blt.n	8009532 <_strtod_l+0x40a>
 80095e0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80095e2:	eba3 0808 	sub.w	r8, r3, r8
 80095e6:	4b34      	ldr	r3, [pc, #208]	@ (80096b8 <_strtod_l+0x590>)
 80095e8:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 80095ec:	e9d8 2300 	ldrd	r2, r3, [r8]
 80095f0:	4650      	mov	r0, sl
 80095f2:	4659      	mov	r1, fp
 80095f4:	f7f7 f92a 	bl	800084c <__aeabi_ddiv>
 80095f8:	e782      	b.n	8009500 <_strtod_l+0x3d8>
 80095fa:	2300      	movs	r3, #0
 80095fc:	4f2f      	ldr	r7, [pc, #188]	@ (80096bc <_strtod_l+0x594>)
 80095fe:	1124      	asrs	r4, r4, #4
 8009600:	4650      	mov	r0, sl
 8009602:	4659      	mov	r1, fp
 8009604:	461e      	mov	r6, r3
 8009606:	2c01      	cmp	r4, #1
 8009608:	dc21      	bgt.n	800964e <_strtod_l+0x526>
 800960a:	b10b      	cbz	r3, 8009610 <_strtod_l+0x4e8>
 800960c:	4682      	mov	sl, r0
 800960e:	468b      	mov	fp, r1
 8009610:	492a      	ldr	r1, [pc, #168]	@ (80096bc <_strtod_l+0x594>)
 8009612:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8009616:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800961a:	4652      	mov	r2, sl
 800961c:	465b      	mov	r3, fp
 800961e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009622:	f7f6 ffe9 	bl	80005f8 <__aeabi_dmul>
 8009626:	4b26      	ldr	r3, [pc, #152]	@ (80096c0 <_strtod_l+0x598>)
 8009628:	460a      	mov	r2, r1
 800962a:	400b      	ands	r3, r1
 800962c:	4925      	ldr	r1, [pc, #148]	@ (80096c4 <_strtod_l+0x59c>)
 800962e:	428b      	cmp	r3, r1
 8009630:	4682      	mov	sl, r0
 8009632:	d898      	bhi.n	8009566 <_strtod_l+0x43e>
 8009634:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8009638:	428b      	cmp	r3, r1
 800963a:	bf86      	itte	hi
 800963c:	f8df b088 	ldrhi.w	fp, [pc, #136]	@ 80096c8 <_strtod_l+0x5a0>
 8009640:	f04f 3aff 	movhi.w	sl, #4294967295
 8009644:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8009648:	2300      	movs	r3, #0
 800964a:	9308      	str	r3, [sp, #32]
 800964c:	e076      	b.n	800973c <_strtod_l+0x614>
 800964e:	07e2      	lsls	r2, r4, #31
 8009650:	d504      	bpl.n	800965c <_strtod_l+0x534>
 8009652:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009656:	f7f6 ffcf 	bl	80005f8 <__aeabi_dmul>
 800965a:	2301      	movs	r3, #1
 800965c:	3601      	adds	r6, #1
 800965e:	1064      	asrs	r4, r4, #1
 8009660:	3708      	adds	r7, #8
 8009662:	e7d0      	b.n	8009606 <_strtod_l+0x4de>
 8009664:	d0f0      	beq.n	8009648 <_strtod_l+0x520>
 8009666:	4264      	negs	r4, r4
 8009668:	f014 020f 	ands.w	r2, r4, #15
 800966c:	d00a      	beq.n	8009684 <_strtod_l+0x55c>
 800966e:	4b12      	ldr	r3, [pc, #72]	@ (80096b8 <_strtod_l+0x590>)
 8009670:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009674:	4650      	mov	r0, sl
 8009676:	4659      	mov	r1, fp
 8009678:	e9d3 2300 	ldrd	r2, r3, [r3]
 800967c:	f7f7 f8e6 	bl	800084c <__aeabi_ddiv>
 8009680:	4682      	mov	sl, r0
 8009682:	468b      	mov	fp, r1
 8009684:	1124      	asrs	r4, r4, #4
 8009686:	d0df      	beq.n	8009648 <_strtod_l+0x520>
 8009688:	2c1f      	cmp	r4, #31
 800968a:	dd1f      	ble.n	80096cc <_strtod_l+0x5a4>
 800968c:	2400      	movs	r4, #0
 800968e:	46a0      	mov	r8, r4
 8009690:	940b      	str	r4, [sp, #44]	@ 0x2c
 8009692:	46a1      	mov	r9, r4
 8009694:	9a05      	ldr	r2, [sp, #20]
 8009696:	2322      	movs	r3, #34	@ 0x22
 8009698:	f04f 0a00 	mov.w	sl, #0
 800969c:	f04f 0b00 	mov.w	fp, #0
 80096a0:	6013      	str	r3, [r2, #0]
 80096a2:	e76b      	b.n	800957c <_strtod_l+0x454>
 80096a4:	0800b461 	.word	0x0800b461
 80096a8:	0800b728 	.word	0x0800b728
 80096ac:	0800b459 	.word	0x0800b459
 80096b0:	0800b490 	.word	0x0800b490
 80096b4:	0800b5c9 	.word	0x0800b5c9
 80096b8:	0800b660 	.word	0x0800b660
 80096bc:	0800b638 	.word	0x0800b638
 80096c0:	7ff00000 	.word	0x7ff00000
 80096c4:	7ca00000 	.word	0x7ca00000
 80096c8:	7fefffff 	.word	0x7fefffff
 80096cc:	f014 0310 	ands.w	r3, r4, #16
 80096d0:	bf18      	it	ne
 80096d2:	236a      	movne	r3, #106	@ 0x6a
 80096d4:	4ea9      	ldr	r6, [pc, #676]	@ (800997c <_strtod_l+0x854>)
 80096d6:	9308      	str	r3, [sp, #32]
 80096d8:	4650      	mov	r0, sl
 80096da:	4659      	mov	r1, fp
 80096dc:	2300      	movs	r3, #0
 80096de:	07e7      	lsls	r7, r4, #31
 80096e0:	d504      	bpl.n	80096ec <_strtod_l+0x5c4>
 80096e2:	e9d6 2300 	ldrd	r2, r3, [r6]
 80096e6:	f7f6 ff87 	bl	80005f8 <__aeabi_dmul>
 80096ea:	2301      	movs	r3, #1
 80096ec:	1064      	asrs	r4, r4, #1
 80096ee:	f106 0608 	add.w	r6, r6, #8
 80096f2:	d1f4      	bne.n	80096de <_strtod_l+0x5b6>
 80096f4:	b10b      	cbz	r3, 80096fa <_strtod_l+0x5d2>
 80096f6:	4682      	mov	sl, r0
 80096f8:	468b      	mov	fp, r1
 80096fa:	9b08      	ldr	r3, [sp, #32]
 80096fc:	b1b3      	cbz	r3, 800972c <_strtod_l+0x604>
 80096fe:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8009702:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 8009706:	2b00      	cmp	r3, #0
 8009708:	4659      	mov	r1, fp
 800970a:	dd0f      	ble.n	800972c <_strtod_l+0x604>
 800970c:	2b1f      	cmp	r3, #31
 800970e:	dd56      	ble.n	80097be <_strtod_l+0x696>
 8009710:	2b34      	cmp	r3, #52	@ 0x34
 8009712:	bfde      	ittt	le
 8009714:	f04f 33ff 	movle.w	r3, #4294967295
 8009718:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800971c:	4093      	lslle	r3, r2
 800971e:	f04f 0a00 	mov.w	sl, #0
 8009722:	bfcc      	ite	gt
 8009724:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8009728:	ea03 0b01 	andle.w	fp, r3, r1
 800972c:	2200      	movs	r2, #0
 800972e:	2300      	movs	r3, #0
 8009730:	4650      	mov	r0, sl
 8009732:	4659      	mov	r1, fp
 8009734:	f7f7 f9c8 	bl	8000ac8 <__aeabi_dcmpeq>
 8009738:	2800      	cmp	r0, #0
 800973a:	d1a7      	bne.n	800968c <_strtod_l+0x564>
 800973c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800973e:	9300      	str	r3, [sp, #0]
 8009740:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8009742:	9805      	ldr	r0, [sp, #20]
 8009744:	462b      	mov	r3, r5
 8009746:	464a      	mov	r2, r9
 8009748:	f7ff f8ce 	bl	80088e8 <__s2b>
 800974c:	900b      	str	r0, [sp, #44]	@ 0x2c
 800974e:	2800      	cmp	r0, #0
 8009750:	f43f af09 	beq.w	8009566 <_strtod_l+0x43e>
 8009754:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009756:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009758:	2a00      	cmp	r2, #0
 800975a:	eba3 0308 	sub.w	r3, r3, r8
 800975e:	bfa8      	it	ge
 8009760:	2300      	movge	r3, #0
 8009762:	9312      	str	r3, [sp, #72]	@ 0x48
 8009764:	2400      	movs	r4, #0
 8009766:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800976a:	9316      	str	r3, [sp, #88]	@ 0x58
 800976c:	46a0      	mov	r8, r4
 800976e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009770:	9805      	ldr	r0, [sp, #20]
 8009772:	6859      	ldr	r1, [r3, #4]
 8009774:	f7ff f810 	bl	8008798 <_Balloc>
 8009778:	4681      	mov	r9, r0
 800977a:	2800      	cmp	r0, #0
 800977c:	f43f aef7 	beq.w	800956e <_strtod_l+0x446>
 8009780:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009782:	691a      	ldr	r2, [r3, #16]
 8009784:	3202      	adds	r2, #2
 8009786:	f103 010c 	add.w	r1, r3, #12
 800978a:	0092      	lsls	r2, r2, #2
 800978c:	300c      	adds	r0, #12
 800978e:	f000 fdf5 	bl	800a37c <memcpy>
 8009792:	ec4b ab10 	vmov	d0, sl, fp
 8009796:	9805      	ldr	r0, [sp, #20]
 8009798:	aa1c      	add	r2, sp, #112	@ 0x70
 800979a:	a91b      	add	r1, sp, #108	@ 0x6c
 800979c:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 80097a0:	f7ff fbd6 	bl	8008f50 <__d2b>
 80097a4:	901a      	str	r0, [sp, #104]	@ 0x68
 80097a6:	2800      	cmp	r0, #0
 80097a8:	f43f aee1 	beq.w	800956e <_strtod_l+0x446>
 80097ac:	9805      	ldr	r0, [sp, #20]
 80097ae:	2101      	movs	r1, #1
 80097b0:	f7ff f930 	bl	8008a14 <__i2b>
 80097b4:	4680      	mov	r8, r0
 80097b6:	b948      	cbnz	r0, 80097cc <_strtod_l+0x6a4>
 80097b8:	f04f 0800 	mov.w	r8, #0
 80097bc:	e6d7      	b.n	800956e <_strtod_l+0x446>
 80097be:	f04f 32ff 	mov.w	r2, #4294967295
 80097c2:	fa02 f303 	lsl.w	r3, r2, r3
 80097c6:	ea03 0a0a 	and.w	sl, r3, sl
 80097ca:	e7af      	b.n	800972c <_strtod_l+0x604>
 80097cc:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 80097ce:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 80097d0:	2d00      	cmp	r5, #0
 80097d2:	bfab      	itete	ge
 80097d4:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 80097d6:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 80097d8:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 80097da:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 80097dc:	bfac      	ite	ge
 80097de:	18ef      	addge	r7, r5, r3
 80097e0:	1b5e      	sublt	r6, r3, r5
 80097e2:	9b08      	ldr	r3, [sp, #32]
 80097e4:	1aed      	subs	r5, r5, r3
 80097e6:	4415      	add	r5, r2
 80097e8:	4b65      	ldr	r3, [pc, #404]	@ (8009980 <_strtod_l+0x858>)
 80097ea:	3d01      	subs	r5, #1
 80097ec:	429d      	cmp	r5, r3
 80097ee:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 80097f2:	da50      	bge.n	8009896 <_strtod_l+0x76e>
 80097f4:	1b5b      	subs	r3, r3, r5
 80097f6:	2b1f      	cmp	r3, #31
 80097f8:	eba2 0203 	sub.w	r2, r2, r3
 80097fc:	f04f 0101 	mov.w	r1, #1
 8009800:	dc3d      	bgt.n	800987e <_strtod_l+0x756>
 8009802:	fa01 f303 	lsl.w	r3, r1, r3
 8009806:	9313      	str	r3, [sp, #76]	@ 0x4c
 8009808:	2300      	movs	r3, #0
 800980a:	9310      	str	r3, [sp, #64]	@ 0x40
 800980c:	18bd      	adds	r5, r7, r2
 800980e:	9b08      	ldr	r3, [sp, #32]
 8009810:	42af      	cmp	r7, r5
 8009812:	4416      	add	r6, r2
 8009814:	441e      	add	r6, r3
 8009816:	463b      	mov	r3, r7
 8009818:	bfa8      	it	ge
 800981a:	462b      	movge	r3, r5
 800981c:	42b3      	cmp	r3, r6
 800981e:	bfa8      	it	ge
 8009820:	4633      	movge	r3, r6
 8009822:	2b00      	cmp	r3, #0
 8009824:	bfc2      	ittt	gt
 8009826:	1aed      	subgt	r5, r5, r3
 8009828:	1af6      	subgt	r6, r6, r3
 800982a:	1aff      	subgt	r7, r7, r3
 800982c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800982e:	2b00      	cmp	r3, #0
 8009830:	dd16      	ble.n	8009860 <_strtod_l+0x738>
 8009832:	4641      	mov	r1, r8
 8009834:	9805      	ldr	r0, [sp, #20]
 8009836:	461a      	mov	r2, r3
 8009838:	f7ff f9a4 	bl	8008b84 <__pow5mult>
 800983c:	4680      	mov	r8, r0
 800983e:	2800      	cmp	r0, #0
 8009840:	d0ba      	beq.n	80097b8 <_strtod_l+0x690>
 8009842:	4601      	mov	r1, r0
 8009844:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8009846:	9805      	ldr	r0, [sp, #20]
 8009848:	f7ff f8fa 	bl	8008a40 <__multiply>
 800984c:	900a      	str	r0, [sp, #40]	@ 0x28
 800984e:	2800      	cmp	r0, #0
 8009850:	f43f ae8d 	beq.w	800956e <_strtod_l+0x446>
 8009854:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009856:	9805      	ldr	r0, [sp, #20]
 8009858:	f7fe ffde 	bl	8008818 <_Bfree>
 800985c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800985e:	931a      	str	r3, [sp, #104]	@ 0x68
 8009860:	2d00      	cmp	r5, #0
 8009862:	dc1d      	bgt.n	80098a0 <_strtod_l+0x778>
 8009864:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009866:	2b00      	cmp	r3, #0
 8009868:	dd23      	ble.n	80098b2 <_strtod_l+0x78a>
 800986a:	4649      	mov	r1, r9
 800986c:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800986e:	9805      	ldr	r0, [sp, #20]
 8009870:	f7ff f988 	bl	8008b84 <__pow5mult>
 8009874:	4681      	mov	r9, r0
 8009876:	b9e0      	cbnz	r0, 80098b2 <_strtod_l+0x78a>
 8009878:	f04f 0900 	mov.w	r9, #0
 800987c:	e677      	b.n	800956e <_strtod_l+0x446>
 800987e:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8009882:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 8009886:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800988a:	35e2      	adds	r5, #226	@ 0xe2
 800988c:	fa01 f305 	lsl.w	r3, r1, r5
 8009890:	9310      	str	r3, [sp, #64]	@ 0x40
 8009892:	9113      	str	r1, [sp, #76]	@ 0x4c
 8009894:	e7ba      	b.n	800980c <_strtod_l+0x6e4>
 8009896:	2300      	movs	r3, #0
 8009898:	9310      	str	r3, [sp, #64]	@ 0x40
 800989a:	2301      	movs	r3, #1
 800989c:	9313      	str	r3, [sp, #76]	@ 0x4c
 800989e:	e7b5      	b.n	800980c <_strtod_l+0x6e4>
 80098a0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80098a2:	9805      	ldr	r0, [sp, #20]
 80098a4:	462a      	mov	r2, r5
 80098a6:	f7ff f9c7 	bl	8008c38 <__lshift>
 80098aa:	901a      	str	r0, [sp, #104]	@ 0x68
 80098ac:	2800      	cmp	r0, #0
 80098ae:	d1d9      	bne.n	8009864 <_strtod_l+0x73c>
 80098b0:	e65d      	b.n	800956e <_strtod_l+0x446>
 80098b2:	2e00      	cmp	r6, #0
 80098b4:	dd07      	ble.n	80098c6 <_strtod_l+0x79e>
 80098b6:	4649      	mov	r1, r9
 80098b8:	9805      	ldr	r0, [sp, #20]
 80098ba:	4632      	mov	r2, r6
 80098bc:	f7ff f9bc 	bl	8008c38 <__lshift>
 80098c0:	4681      	mov	r9, r0
 80098c2:	2800      	cmp	r0, #0
 80098c4:	d0d8      	beq.n	8009878 <_strtod_l+0x750>
 80098c6:	2f00      	cmp	r7, #0
 80098c8:	dd08      	ble.n	80098dc <_strtod_l+0x7b4>
 80098ca:	4641      	mov	r1, r8
 80098cc:	9805      	ldr	r0, [sp, #20]
 80098ce:	463a      	mov	r2, r7
 80098d0:	f7ff f9b2 	bl	8008c38 <__lshift>
 80098d4:	4680      	mov	r8, r0
 80098d6:	2800      	cmp	r0, #0
 80098d8:	f43f ae49 	beq.w	800956e <_strtod_l+0x446>
 80098dc:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80098de:	9805      	ldr	r0, [sp, #20]
 80098e0:	464a      	mov	r2, r9
 80098e2:	f7ff fa31 	bl	8008d48 <__mdiff>
 80098e6:	4604      	mov	r4, r0
 80098e8:	2800      	cmp	r0, #0
 80098ea:	f43f ae40 	beq.w	800956e <_strtod_l+0x446>
 80098ee:	68c3      	ldr	r3, [r0, #12]
 80098f0:	930f      	str	r3, [sp, #60]	@ 0x3c
 80098f2:	2300      	movs	r3, #0
 80098f4:	60c3      	str	r3, [r0, #12]
 80098f6:	4641      	mov	r1, r8
 80098f8:	f7ff fa0a 	bl	8008d10 <__mcmp>
 80098fc:	2800      	cmp	r0, #0
 80098fe:	da45      	bge.n	800998c <_strtod_l+0x864>
 8009900:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009902:	ea53 030a 	orrs.w	r3, r3, sl
 8009906:	d16b      	bne.n	80099e0 <_strtod_l+0x8b8>
 8009908:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800990c:	2b00      	cmp	r3, #0
 800990e:	d167      	bne.n	80099e0 <_strtod_l+0x8b8>
 8009910:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8009914:	0d1b      	lsrs	r3, r3, #20
 8009916:	051b      	lsls	r3, r3, #20
 8009918:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800991c:	d960      	bls.n	80099e0 <_strtod_l+0x8b8>
 800991e:	6963      	ldr	r3, [r4, #20]
 8009920:	b913      	cbnz	r3, 8009928 <_strtod_l+0x800>
 8009922:	6923      	ldr	r3, [r4, #16]
 8009924:	2b01      	cmp	r3, #1
 8009926:	dd5b      	ble.n	80099e0 <_strtod_l+0x8b8>
 8009928:	4621      	mov	r1, r4
 800992a:	2201      	movs	r2, #1
 800992c:	9805      	ldr	r0, [sp, #20]
 800992e:	f7ff f983 	bl	8008c38 <__lshift>
 8009932:	4641      	mov	r1, r8
 8009934:	4604      	mov	r4, r0
 8009936:	f7ff f9eb 	bl	8008d10 <__mcmp>
 800993a:	2800      	cmp	r0, #0
 800993c:	dd50      	ble.n	80099e0 <_strtod_l+0x8b8>
 800993e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8009942:	9a08      	ldr	r2, [sp, #32]
 8009944:	0d1b      	lsrs	r3, r3, #20
 8009946:	051b      	lsls	r3, r3, #20
 8009948:	2a00      	cmp	r2, #0
 800994a:	d06a      	beq.n	8009a22 <_strtod_l+0x8fa>
 800994c:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8009950:	d867      	bhi.n	8009a22 <_strtod_l+0x8fa>
 8009952:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8009956:	f67f ae9d 	bls.w	8009694 <_strtod_l+0x56c>
 800995a:	4b0a      	ldr	r3, [pc, #40]	@ (8009984 <_strtod_l+0x85c>)
 800995c:	4650      	mov	r0, sl
 800995e:	4659      	mov	r1, fp
 8009960:	2200      	movs	r2, #0
 8009962:	f7f6 fe49 	bl	80005f8 <__aeabi_dmul>
 8009966:	4b08      	ldr	r3, [pc, #32]	@ (8009988 <_strtod_l+0x860>)
 8009968:	400b      	ands	r3, r1
 800996a:	4682      	mov	sl, r0
 800996c:	468b      	mov	fp, r1
 800996e:	2b00      	cmp	r3, #0
 8009970:	f47f ae08 	bne.w	8009584 <_strtod_l+0x45c>
 8009974:	9a05      	ldr	r2, [sp, #20]
 8009976:	2322      	movs	r3, #34	@ 0x22
 8009978:	6013      	str	r3, [r2, #0]
 800997a:	e603      	b.n	8009584 <_strtod_l+0x45c>
 800997c:	0800b750 	.word	0x0800b750
 8009980:	fffffc02 	.word	0xfffffc02
 8009984:	39500000 	.word	0x39500000
 8009988:	7ff00000 	.word	0x7ff00000
 800998c:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 8009990:	d165      	bne.n	8009a5e <_strtod_l+0x936>
 8009992:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8009994:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009998:	b35a      	cbz	r2, 80099f2 <_strtod_l+0x8ca>
 800999a:	4a9f      	ldr	r2, [pc, #636]	@ (8009c18 <_strtod_l+0xaf0>)
 800999c:	4293      	cmp	r3, r2
 800999e:	d12b      	bne.n	80099f8 <_strtod_l+0x8d0>
 80099a0:	9b08      	ldr	r3, [sp, #32]
 80099a2:	4651      	mov	r1, sl
 80099a4:	b303      	cbz	r3, 80099e8 <_strtod_l+0x8c0>
 80099a6:	4b9d      	ldr	r3, [pc, #628]	@ (8009c1c <_strtod_l+0xaf4>)
 80099a8:	465a      	mov	r2, fp
 80099aa:	4013      	ands	r3, r2
 80099ac:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 80099b0:	f04f 32ff 	mov.w	r2, #4294967295
 80099b4:	d81b      	bhi.n	80099ee <_strtod_l+0x8c6>
 80099b6:	0d1b      	lsrs	r3, r3, #20
 80099b8:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 80099bc:	fa02 f303 	lsl.w	r3, r2, r3
 80099c0:	4299      	cmp	r1, r3
 80099c2:	d119      	bne.n	80099f8 <_strtod_l+0x8d0>
 80099c4:	4b96      	ldr	r3, [pc, #600]	@ (8009c20 <_strtod_l+0xaf8>)
 80099c6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80099c8:	429a      	cmp	r2, r3
 80099ca:	d102      	bne.n	80099d2 <_strtod_l+0x8aa>
 80099cc:	3101      	adds	r1, #1
 80099ce:	f43f adce 	beq.w	800956e <_strtod_l+0x446>
 80099d2:	4b92      	ldr	r3, [pc, #584]	@ (8009c1c <_strtod_l+0xaf4>)
 80099d4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80099d6:	401a      	ands	r2, r3
 80099d8:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 80099dc:	f04f 0a00 	mov.w	sl, #0
 80099e0:	9b08      	ldr	r3, [sp, #32]
 80099e2:	2b00      	cmp	r3, #0
 80099e4:	d1b9      	bne.n	800995a <_strtod_l+0x832>
 80099e6:	e5cd      	b.n	8009584 <_strtod_l+0x45c>
 80099e8:	f04f 33ff 	mov.w	r3, #4294967295
 80099ec:	e7e8      	b.n	80099c0 <_strtod_l+0x898>
 80099ee:	4613      	mov	r3, r2
 80099f0:	e7e6      	b.n	80099c0 <_strtod_l+0x898>
 80099f2:	ea53 030a 	orrs.w	r3, r3, sl
 80099f6:	d0a2      	beq.n	800993e <_strtod_l+0x816>
 80099f8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80099fa:	b1db      	cbz	r3, 8009a34 <_strtod_l+0x90c>
 80099fc:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80099fe:	4213      	tst	r3, r2
 8009a00:	d0ee      	beq.n	80099e0 <_strtod_l+0x8b8>
 8009a02:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009a04:	9a08      	ldr	r2, [sp, #32]
 8009a06:	4650      	mov	r0, sl
 8009a08:	4659      	mov	r1, fp
 8009a0a:	b1bb      	cbz	r3, 8009a3c <_strtod_l+0x914>
 8009a0c:	f7ff fb6e 	bl	80090ec <sulp>
 8009a10:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009a14:	ec53 2b10 	vmov	r2, r3, d0
 8009a18:	f7f6 fc38 	bl	800028c <__adddf3>
 8009a1c:	4682      	mov	sl, r0
 8009a1e:	468b      	mov	fp, r1
 8009a20:	e7de      	b.n	80099e0 <_strtod_l+0x8b8>
 8009a22:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8009a26:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8009a2a:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8009a2e:	f04f 3aff 	mov.w	sl, #4294967295
 8009a32:	e7d5      	b.n	80099e0 <_strtod_l+0x8b8>
 8009a34:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8009a36:	ea13 0f0a 	tst.w	r3, sl
 8009a3a:	e7e1      	b.n	8009a00 <_strtod_l+0x8d8>
 8009a3c:	f7ff fb56 	bl	80090ec <sulp>
 8009a40:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009a44:	ec53 2b10 	vmov	r2, r3, d0
 8009a48:	f7f6 fc1e 	bl	8000288 <__aeabi_dsub>
 8009a4c:	2200      	movs	r2, #0
 8009a4e:	2300      	movs	r3, #0
 8009a50:	4682      	mov	sl, r0
 8009a52:	468b      	mov	fp, r1
 8009a54:	f7f7 f838 	bl	8000ac8 <__aeabi_dcmpeq>
 8009a58:	2800      	cmp	r0, #0
 8009a5a:	d0c1      	beq.n	80099e0 <_strtod_l+0x8b8>
 8009a5c:	e61a      	b.n	8009694 <_strtod_l+0x56c>
 8009a5e:	4641      	mov	r1, r8
 8009a60:	4620      	mov	r0, r4
 8009a62:	f7ff facd 	bl	8009000 <__ratio>
 8009a66:	ec57 6b10 	vmov	r6, r7, d0
 8009a6a:	2200      	movs	r2, #0
 8009a6c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8009a70:	4630      	mov	r0, r6
 8009a72:	4639      	mov	r1, r7
 8009a74:	f7f7 f83c 	bl	8000af0 <__aeabi_dcmple>
 8009a78:	2800      	cmp	r0, #0
 8009a7a:	d06f      	beq.n	8009b5c <_strtod_l+0xa34>
 8009a7c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009a7e:	2b00      	cmp	r3, #0
 8009a80:	d17a      	bne.n	8009b78 <_strtod_l+0xa50>
 8009a82:	f1ba 0f00 	cmp.w	sl, #0
 8009a86:	d158      	bne.n	8009b3a <_strtod_l+0xa12>
 8009a88:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009a8a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009a8e:	2b00      	cmp	r3, #0
 8009a90:	d15a      	bne.n	8009b48 <_strtod_l+0xa20>
 8009a92:	4b64      	ldr	r3, [pc, #400]	@ (8009c24 <_strtod_l+0xafc>)
 8009a94:	2200      	movs	r2, #0
 8009a96:	4630      	mov	r0, r6
 8009a98:	4639      	mov	r1, r7
 8009a9a:	f7f7 f81f 	bl	8000adc <__aeabi_dcmplt>
 8009a9e:	2800      	cmp	r0, #0
 8009aa0:	d159      	bne.n	8009b56 <_strtod_l+0xa2e>
 8009aa2:	4630      	mov	r0, r6
 8009aa4:	4639      	mov	r1, r7
 8009aa6:	4b60      	ldr	r3, [pc, #384]	@ (8009c28 <_strtod_l+0xb00>)
 8009aa8:	2200      	movs	r2, #0
 8009aaa:	f7f6 fda5 	bl	80005f8 <__aeabi_dmul>
 8009aae:	4606      	mov	r6, r0
 8009ab0:	460f      	mov	r7, r1
 8009ab2:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 8009ab6:	9606      	str	r6, [sp, #24]
 8009ab8:	9307      	str	r3, [sp, #28]
 8009aba:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009abe:	4d57      	ldr	r5, [pc, #348]	@ (8009c1c <_strtod_l+0xaf4>)
 8009ac0:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8009ac4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009ac6:	401d      	ands	r5, r3
 8009ac8:	4b58      	ldr	r3, [pc, #352]	@ (8009c2c <_strtod_l+0xb04>)
 8009aca:	429d      	cmp	r5, r3
 8009acc:	f040 80b2 	bne.w	8009c34 <_strtod_l+0xb0c>
 8009ad0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009ad2:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 8009ad6:	ec4b ab10 	vmov	d0, sl, fp
 8009ada:	f7ff f9c9 	bl	8008e70 <__ulp>
 8009ade:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009ae2:	ec51 0b10 	vmov	r0, r1, d0
 8009ae6:	f7f6 fd87 	bl	80005f8 <__aeabi_dmul>
 8009aea:	4652      	mov	r2, sl
 8009aec:	465b      	mov	r3, fp
 8009aee:	f7f6 fbcd 	bl	800028c <__adddf3>
 8009af2:	460b      	mov	r3, r1
 8009af4:	4949      	ldr	r1, [pc, #292]	@ (8009c1c <_strtod_l+0xaf4>)
 8009af6:	4a4e      	ldr	r2, [pc, #312]	@ (8009c30 <_strtod_l+0xb08>)
 8009af8:	4019      	ands	r1, r3
 8009afa:	4291      	cmp	r1, r2
 8009afc:	4682      	mov	sl, r0
 8009afe:	d942      	bls.n	8009b86 <_strtod_l+0xa5e>
 8009b00:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8009b02:	4b47      	ldr	r3, [pc, #284]	@ (8009c20 <_strtod_l+0xaf8>)
 8009b04:	429a      	cmp	r2, r3
 8009b06:	d103      	bne.n	8009b10 <_strtod_l+0x9e8>
 8009b08:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009b0a:	3301      	adds	r3, #1
 8009b0c:	f43f ad2f 	beq.w	800956e <_strtod_l+0x446>
 8009b10:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 8009c20 <_strtod_l+0xaf8>
 8009b14:	f04f 3aff 	mov.w	sl, #4294967295
 8009b18:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009b1a:	9805      	ldr	r0, [sp, #20]
 8009b1c:	f7fe fe7c 	bl	8008818 <_Bfree>
 8009b20:	9805      	ldr	r0, [sp, #20]
 8009b22:	4649      	mov	r1, r9
 8009b24:	f7fe fe78 	bl	8008818 <_Bfree>
 8009b28:	9805      	ldr	r0, [sp, #20]
 8009b2a:	4641      	mov	r1, r8
 8009b2c:	f7fe fe74 	bl	8008818 <_Bfree>
 8009b30:	9805      	ldr	r0, [sp, #20]
 8009b32:	4621      	mov	r1, r4
 8009b34:	f7fe fe70 	bl	8008818 <_Bfree>
 8009b38:	e619      	b.n	800976e <_strtod_l+0x646>
 8009b3a:	f1ba 0f01 	cmp.w	sl, #1
 8009b3e:	d103      	bne.n	8009b48 <_strtod_l+0xa20>
 8009b40:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009b42:	2b00      	cmp	r3, #0
 8009b44:	f43f ada6 	beq.w	8009694 <_strtod_l+0x56c>
 8009b48:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 8009bf8 <_strtod_l+0xad0>
 8009b4c:	4f35      	ldr	r7, [pc, #212]	@ (8009c24 <_strtod_l+0xafc>)
 8009b4e:	ed8d 7b06 	vstr	d7, [sp, #24]
 8009b52:	2600      	movs	r6, #0
 8009b54:	e7b1      	b.n	8009aba <_strtod_l+0x992>
 8009b56:	4f34      	ldr	r7, [pc, #208]	@ (8009c28 <_strtod_l+0xb00>)
 8009b58:	2600      	movs	r6, #0
 8009b5a:	e7aa      	b.n	8009ab2 <_strtod_l+0x98a>
 8009b5c:	4b32      	ldr	r3, [pc, #200]	@ (8009c28 <_strtod_l+0xb00>)
 8009b5e:	4630      	mov	r0, r6
 8009b60:	4639      	mov	r1, r7
 8009b62:	2200      	movs	r2, #0
 8009b64:	f7f6 fd48 	bl	80005f8 <__aeabi_dmul>
 8009b68:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009b6a:	4606      	mov	r6, r0
 8009b6c:	460f      	mov	r7, r1
 8009b6e:	2b00      	cmp	r3, #0
 8009b70:	d09f      	beq.n	8009ab2 <_strtod_l+0x98a>
 8009b72:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8009b76:	e7a0      	b.n	8009aba <_strtod_l+0x992>
 8009b78:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8009c00 <_strtod_l+0xad8>
 8009b7c:	ed8d 7b06 	vstr	d7, [sp, #24]
 8009b80:	ec57 6b17 	vmov	r6, r7, d7
 8009b84:	e799      	b.n	8009aba <_strtod_l+0x992>
 8009b86:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8009b8a:	9b08      	ldr	r3, [sp, #32]
 8009b8c:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 8009b90:	2b00      	cmp	r3, #0
 8009b92:	d1c1      	bne.n	8009b18 <_strtod_l+0x9f0>
 8009b94:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8009b98:	0d1b      	lsrs	r3, r3, #20
 8009b9a:	051b      	lsls	r3, r3, #20
 8009b9c:	429d      	cmp	r5, r3
 8009b9e:	d1bb      	bne.n	8009b18 <_strtod_l+0x9f0>
 8009ba0:	4630      	mov	r0, r6
 8009ba2:	4639      	mov	r1, r7
 8009ba4:	f7f7 f888 	bl	8000cb8 <__aeabi_d2lz>
 8009ba8:	f7f6 fcf8 	bl	800059c <__aeabi_l2d>
 8009bac:	4602      	mov	r2, r0
 8009bae:	460b      	mov	r3, r1
 8009bb0:	4630      	mov	r0, r6
 8009bb2:	4639      	mov	r1, r7
 8009bb4:	f7f6 fb68 	bl	8000288 <__aeabi_dsub>
 8009bb8:	460b      	mov	r3, r1
 8009bba:	4602      	mov	r2, r0
 8009bbc:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8009bc0:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8009bc4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009bc6:	ea46 060a 	orr.w	r6, r6, sl
 8009bca:	431e      	orrs	r6, r3
 8009bcc:	d06f      	beq.n	8009cae <_strtod_l+0xb86>
 8009bce:	a30e      	add	r3, pc, #56	@ (adr r3, 8009c08 <_strtod_l+0xae0>)
 8009bd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009bd4:	f7f6 ff82 	bl	8000adc <__aeabi_dcmplt>
 8009bd8:	2800      	cmp	r0, #0
 8009bda:	f47f acd3 	bne.w	8009584 <_strtod_l+0x45c>
 8009bde:	a30c      	add	r3, pc, #48	@ (adr r3, 8009c10 <_strtod_l+0xae8>)
 8009be0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009be4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009be8:	f7f6 ff96 	bl	8000b18 <__aeabi_dcmpgt>
 8009bec:	2800      	cmp	r0, #0
 8009bee:	d093      	beq.n	8009b18 <_strtod_l+0x9f0>
 8009bf0:	e4c8      	b.n	8009584 <_strtod_l+0x45c>
 8009bf2:	bf00      	nop
 8009bf4:	f3af 8000 	nop.w
 8009bf8:	00000000 	.word	0x00000000
 8009bfc:	bff00000 	.word	0xbff00000
 8009c00:	00000000 	.word	0x00000000
 8009c04:	3ff00000 	.word	0x3ff00000
 8009c08:	94a03595 	.word	0x94a03595
 8009c0c:	3fdfffff 	.word	0x3fdfffff
 8009c10:	35afe535 	.word	0x35afe535
 8009c14:	3fe00000 	.word	0x3fe00000
 8009c18:	000fffff 	.word	0x000fffff
 8009c1c:	7ff00000 	.word	0x7ff00000
 8009c20:	7fefffff 	.word	0x7fefffff
 8009c24:	3ff00000 	.word	0x3ff00000
 8009c28:	3fe00000 	.word	0x3fe00000
 8009c2c:	7fe00000 	.word	0x7fe00000
 8009c30:	7c9fffff 	.word	0x7c9fffff
 8009c34:	9b08      	ldr	r3, [sp, #32]
 8009c36:	b323      	cbz	r3, 8009c82 <_strtod_l+0xb5a>
 8009c38:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 8009c3c:	d821      	bhi.n	8009c82 <_strtod_l+0xb5a>
 8009c3e:	a328      	add	r3, pc, #160	@ (adr r3, 8009ce0 <_strtod_l+0xbb8>)
 8009c40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c44:	4630      	mov	r0, r6
 8009c46:	4639      	mov	r1, r7
 8009c48:	f7f6 ff52 	bl	8000af0 <__aeabi_dcmple>
 8009c4c:	b1a0      	cbz	r0, 8009c78 <_strtod_l+0xb50>
 8009c4e:	4639      	mov	r1, r7
 8009c50:	4630      	mov	r0, r6
 8009c52:	f7f6 ffa9 	bl	8000ba8 <__aeabi_d2uiz>
 8009c56:	2801      	cmp	r0, #1
 8009c58:	bf38      	it	cc
 8009c5a:	2001      	movcc	r0, #1
 8009c5c:	f7f6 fc52 	bl	8000504 <__aeabi_ui2d>
 8009c60:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009c62:	4606      	mov	r6, r0
 8009c64:	460f      	mov	r7, r1
 8009c66:	b9fb      	cbnz	r3, 8009ca8 <_strtod_l+0xb80>
 8009c68:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8009c6c:	9014      	str	r0, [sp, #80]	@ 0x50
 8009c6e:	9315      	str	r3, [sp, #84]	@ 0x54
 8009c70:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 8009c74:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8009c78:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8009c7a:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 8009c7e:	1b5b      	subs	r3, r3, r5
 8009c80:	9311      	str	r3, [sp, #68]	@ 0x44
 8009c82:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8009c86:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 8009c8a:	f7ff f8f1 	bl	8008e70 <__ulp>
 8009c8e:	4650      	mov	r0, sl
 8009c90:	ec53 2b10 	vmov	r2, r3, d0
 8009c94:	4659      	mov	r1, fp
 8009c96:	f7f6 fcaf 	bl	80005f8 <__aeabi_dmul>
 8009c9a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8009c9e:	f7f6 faf5 	bl	800028c <__adddf3>
 8009ca2:	4682      	mov	sl, r0
 8009ca4:	468b      	mov	fp, r1
 8009ca6:	e770      	b.n	8009b8a <_strtod_l+0xa62>
 8009ca8:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 8009cac:	e7e0      	b.n	8009c70 <_strtod_l+0xb48>
 8009cae:	a30e      	add	r3, pc, #56	@ (adr r3, 8009ce8 <_strtod_l+0xbc0>)
 8009cb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cb4:	f7f6 ff12 	bl	8000adc <__aeabi_dcmplt>
 8009cb8:	e798      	b.n	8009bec <_strtod_l+0xac4>
 8009cba:	2300      	movs	r3, #0
 8009cbc:	930e      	str	r3, [sp, #56]	@ 0x38
 8009cbe:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8009cc0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009cc2:	6013      	str	r3, [r2, #0]
 8009cc4:	f7ff ba6d 	b.w	80091a2 <_strtod_l+0x7a>
 8009cc8:	2a65      	cmp	r2, #101	@ 0x65
 8009cca:	f43f ab68 	beq.w	800939e <_strtod_l+0x276>
 8009cce:	2a45      	cmp	r2, #69	@ 0x45
 8009cd0:	f43f ab65 	beq.w	800939e <_strtod_l+0x276>
 8009cd4:	2301      	movs	r3, #1
 8009cd6:	f7ff bba0 	b.w	800941a <_strtod_l+0x2f2>
 8009cda:	bf00      	nop
 8009cdc:	f3af 8000 	nop.w
 8009ce0:	ffc00000 	.word	0xffc00000
 8009ce4:	41dfffff 	.word	0x41dfffff
 8009ce8:	94a03595 	.word	0x94a03595
 8009cec:	3fcfffff 	.word	0x3fcfffff

08009cf0 <_strtod_r>:
 8009cf0:	4b01      	ldr	r3, [pc, #4]	@ (8009cf8 <_strtod_r+0x8>)
 8009cf2:	f7ff ba19 	b.w	8009128 <_strtod_l>
 8009cf6:	bf00      	nop
 8009cf8:	20000aa8 	.word	0x20000aa8

08009cfc <_strtol_l.isra.0>:
 8009cfc:	2b24      	cmp	r3, #36	@ 0x24
 8009cfe:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009d02:	4686      	mov	lr, r0
 8009d04:	4690      	mov	r8, r2
 8009d06:	d801      	bhi.n	8009d0c <_strtol_l.isra.0+0x10>
 8009d08:	2b01      	cmp	r3, #1
 8009d0a:	d106      	bne.n	8009d1a <_strtol_l.isra.0+0x1e>
 8009d0c:	f7fd fdb6 	bl	800787c <__errno>
 8009d10:	2316      	movs	r3, #22
 8009d12:	6003      	str	r3, [r0, #0]
 8009d14:	2000      	movs	r0, #0
 8009d16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009d1a:	4834      	ldr	r0, [pc, #208]	@ (8009dec <_strtol_l.isra.0+0xf0>)
 8009d1c:	460d      	mov	r5, r1
 8009d1e:	462a      	mov	r2, r5
 8009d20:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009d24:	5d06      	ldrb	r6, [r0, r4]
 8009d26:	f016 0608 	ands.w	r6, r6, #8
 8009d2a:	d1f8      	bne.n	8009d1e <_strtol_l.isra.0+0x22>
 8009d2c:	2c2d      	cmp	r4, #45	@ 0x2d
 8009d2e:	d110      	bne.n	8009d52 <_strtol_l.isra.0+0x56>
 8009d30:	782c      	ldrb	r4, [r5, #0]
 8009d32:	2601      	movs	r6, #1
 8009d34:	1c95      	adds	r5, r2, #2
 8009d36:	f033 0210 	bics.w	r2, r3, #16
 8009d3a:	d115      	bne.n	8009d68 <_strtol_l.isra.0+0x6c>
 8009d3c:	2c30      	cmp	r4, #48	@ 0x30
 8009d3e:	d10d      	bne.n	8009d5c <_strtol_l.isra.0+0x60>
 8009d40:	782a      	ldrb	r2, [r5, #0]
 8009d42:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8009d46:	2a58      	cmp	r2, #88	@ 0x58
 8009d48:	d108      	bne.n	8009d5c <_strtol_l.isra.0+0x60>
 8009d4a:	786c      	ldrb	r4, [r5, #1]
 8009d4c:	3502      	adds	r5, #2
 8009d4e:	2310      	movs	r3, #16
 8009d50:	e00a      	b.n	8009d68 <_strtol_l.isra.0+0x6c>
 8009d52:	2c2b      	cmp	r4, #43	@ 0x2b
 8009d54:	bf04      	itt	eq
 8009d56:	782c      	ldrbeq	r4, [r5, #0]
 8009d58:	1c95      	addeq	r5, r2, #2
 8009d5a:	e7ec      	b.n	8009d36 <_strtol_l.isra.0+0x3a>
 8009d5c:	2b00      	cmp	r3, #0
 8009d5e:	d1f6      	bne.n	8009d4e <_strtol_l.isra.0+0x52>
 8009d60:	2c30      	cmp	r4, #48	@ 0x30
 8009d62:	bf14      	ite	ne
 8009d64:	230a      	movne	r3, #10
 8009d66:	2308      	moveq	r3, #8
 8009d68:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8009d6c:	f10c 3cff 	add.w	ip, ip, #4294967295
 8009d70:	2200      	movs	r2, #0
 8009d72:	fbbc f9f3 	udiv	r9, ip, r3
 8009d76:	4610      	mov	r0, r2
 8009d78:	fb03 ca19 	mls	sl, r3, r9, ip
 8009d7c:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8009d80:	2f09      	cmp	r7, #9
 8009d82:	d80f      	bhi.n	8009da4 <_strtol_l.isra.0+0xa8>
 8009d84:	463c      	mov	r4, r7
 8009d86:	42a3      	cmp	r3, r4
 8009d88:	dd1b      	ble.n	8009dc2 <_strtol_l.isra.0+0xc6>
 8009d8a:	1c57      	adds	r7, r2, #1
 8009d8c:	d007      	beq.n	8009d9e <_strtol_l.isra.0+0xa2>
 8009d8e:	4581      	cmp	r9, r0
 8009d90:	d314      	bcc.n	8009dbc <_strtol_l.isra.0+0xc0>
 8009d92:	d101      	bne.n	8009d98 <_strtol_l.isra.0+0x9c>
 8009d94:	45a2      	cmp	sl, r4
 8009d96:	db11      	blt.n	8009dbc <_strtol_l.isra.0+0xc0>
 8009d98:	fb00 4003 	mla	r0, r0, r3, r4
 8009d9c:	2201      	movs	r2, #1
 8009d9e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009da2:	e7eb      	b.n	8009d7c <_strtol_l.isra.0+0x80>
 8009da4:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8009da8:	2f19      	cmp	r7, #25
 8009daa:	d801      	bhi.n	8009db0 <_strtol_l.isra.0+0xb4>
 8009dac:	3c37      	subs	r4, #55	@ 0x37
 8009dae:	e7ea      	b.n	8009d86 <_strtol_l.isra.0+0x8a>
 8009db0:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8009db4:	2f19      	cmp	r7, #25
 8009db6:	d804      	bhi.n	8009dc2 <_strtol_l.isra.0+0xc6>
 8009db8:	3c57      	subs	r4, #87	@ 0x57
 8009dba:	e7e4      	b.n	8009d86 <_strtol_l.isra.0+0x8a>
 8009dbc:	f04f 32ff 	mov.w	r2, #4294967295
 8009dc0:	e7ed      	b.n	8009d9e <_strtol_l.isra.0+0xa2>
 8009dc2:	1c53      	adds	r3, r2, #1
 8009dc4:	d108      	bne.n	8009dd8 <_strtol_l.isra.0+0xdc>
 8009dc6:	2322      	movs	r3, #34	@ 0x22
 8009dc8:	f8ce 3000 	str.w	r3, [lr]
 8009dcc:	4660      	mov	r0, ip
 8009dce:	f1b8 0f00 	cmp.w	r8, #0
 8009dd2:	d0a0      	beq.n	8009d16 <_strtol_l.isra.0+0x1a>
 8009dd4:	1e69      	subs	r1, r5, #1
 8009dd6:	e006      	b.n	8009de6 <_strtol_l.isra.0+0xea>
 8009dd8:	b106      	cbz	r6, 8009ddc <_strtol_l.isra.0+0xe0>
 8009dda:	4240      	negs	r0, r0
 8009ddc:	f1b8 0f00 	cmp.w	r8, #0
 8009de0:	d099      	beq.n	8009d16 <_strtol_l.isra.0+0x1a>
 8009de2:	2a00      	cmp	r2, #0
 8009de4:	d1f6      	bne.n	8009dd4 <_strtol_l.isra.0+0xd8>
 8009de6:	f8c8 1000 	str.w	r1, [r8]
 8009dea:	e794      	b.n	8009d16 <_strtol_l.isra.0+0x1a>
 8009dec:	0800b779 	.word	0x0800b779

08009df0 <_strtol_r>:
 8009df0:	f7ff bf84 	b.w	8009cfc <_strtol_l.isra.0>

08009df4 <__ssputs_r>:
 8009df4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009df8:	688e      	ldr	r6, [r1, #8]
 8009dfa:	461f      	mov	r7, r3
 8009dfc:	42be      	cmp	r6, r7
 8009dfe:	680b      	ldr	r3, [r1, #0]
 8009e00:	4682      	mov	sl, r0
 8009e02:	460c      	mov	r4, r1
 8009e04:	4690      	mov	r8, r2
 8009e06:	d82d      	bhi.n	8009e64 <__ssputs_r+0x70>
 8009e08:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009e0c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8009e10:	d026      	beq.n	8009e60 <__ssputs_r+0x6c>
 8009e12:	6965      	ldr	r5, [r4, #20]
 8009e14:	6909      	ldr	r1, [r1, #16]
 8009e16:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009e1a:	eba3 0901 	sub.w	r9, r3, r1
 8009e1e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009e22:	1c7b      	adds	r3, r7, #1
 8009e24:	444b      	add	r3, r9
 8009e26:	106d      	asrs	r5, r5, #1
 8009e28:	429d      	cmp	r5, r3
 8009e2a:	bf38      	it	cc
 8009e2c:	461d      	movcc	r5, r3
 8009e2e:	0553      	lsls	r3, r2, #21
 8009e30:	d527      	bpl.n	8009e82 <__ssputs_r+0x8e>
 8009e32:	4629      	mov	r1, r5
 8009e34:	f7fe fc24 	bl	8008680 <_malloc_r>
 8009e38:	4606      	mov	r6, r0
 8009e3a:	b360      	cbz	r0, 8009e96 <__ssputs_r+0xa2>
 8009e3c:	6921      	ldr	r1, [r4, #16]
 8009e3e:	464a      	mov	r2, r9
 8009e40:	f000 fa9c 	bl	800a37c <memcpy>
 8009e44:	89a3      	ldrh	r3, [r4, #12]
 8009e46:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8009e4a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009e4e:	81a3      	strh	r3, [r4, #12]
 8009e50:	6126      	str	r6, [r4, #16]
 8009e52:	6165      	str	r5, [r4, #20]
 8009e54:	444e      	add	r6, r9
 8009e56:	eba5 0509 	sub.w	r5, r5, r9
 8009e5a:	6026      	str	r6, [r4, #0]
 8009e5c:	60a5      	str	r5, [r4, #8]
 8009e5e:	463e      	mov	r6, r7
 8009e60:	42be      	cmp	r6, r7
 8009e62:	d900      	bls.n	8009e66 <__ssputs_r+0x72>
 8009e64:	463e      	mov	r6, r7
 8009e66:	6820      	ldr	r0, [r4, #0]
 8009e68:	4632      	mov	r2, r6
 8009e6a:	4641      	mov	r1, r8
 8009e6c:	f000 fa28 	bl	800a2c0 <memmove>
 8009e70:	68a3      	ldr	r3, [r4, #8]
 8009e72:	1b9b      	subs	r3, r3, r6
 8009e74:	60a3      	str	r3, [r4, #8]
 8009e76:	6823      	ldr	r3, [r4, #0]
 8009e78:	4433      	add	r3, r6
 8009e7a:	6023      	str	r3, [r4, #0]
 8009e7c:	2000      	movs	r0, #0
 8009e7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009e82:	462a      	mov	r2, r5
 8009e84:	f000 fe0d 	bl	800aaa2 <_realloc_r>
 8009e88:	4606      	mov	r6, r0
 8009e8a:	2800      	cmp	r0, #0
 8009e8c:	d1e0      	bne.n	8009e50 <__ssputs_r+0x5c>
 8009e8e:	6921      	ldr	r1, [r4, #16]
 8009e90:	4650      	mov	r0, sl
 8009e92:	f7fe fb81 	bl	8008598 <_free_r>
 8009e96:	230c      	movs	r3, #12
 8009e98:	f8ca 3000 	str.w	r3, [sl]
 8009e9c:	89a3      	ldrh	r3, [r4, #12]
 8009e9e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009ea2:	81a3      	strh	r3, [r4, #12]
 8009ea4:	f04f 30ff 	mov.w	r0, #4294967295
 8009ea8:	e7e9      	b.n	8009e7e <__ssputs_r+0x8a>
	...

08009eac <_svfiprintf_r>:
 8009eac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009eb0:	4698      	mov	r8, r3
 8009eb2:	898b      	ldrh	r3, [r1, #12]
 8009eb4:	061b      	lsls	r3, r3, #24
 8009eb6:	b09d      	sub	sp, #116	@ 0x74
 8009eb8:	4607      	mov	r7, r0
 8009eba:	460d      	mov	r5, r1
 8009ebc:	4614      	mov	r4, r2
 8009ebe:	d510      	bpl.n	8009ee2 <_svfiprintf_r+0x36>
 8009ec0:	690b      	ldr	r3, [r1, #16]
 8009ec2:	b973      	cbnz	r3, 8009ee2 <_svfiprintf_r+0x36>
 8009ec4:	2140      	movs	r1, #64	@ 0x40
 8009ec6:	f7fe fbdb 	bl	8008680 <_malloc_r>
 8009eca:	6028      	str	r0, [r5, #0]
 8009ecc:	6128      	str	r0, [r5, #16]
 8009ece:	b930      	cbnz	r0, 8009ede <_svfiprintf_r+0x32>
 8009ed0:	230c      	movs	r3, #12
 8009ed2:	603b      	str	r3, [r7, #0]
 8009ed4:	f04f 30ff 	mov.w	r0, #4294967295
 8009ed8:	b01d      	add	sp, #116	@ 0x74
 8009eda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009ede:	2340      	movs	r3, #64	@ 0x40
 8009ee0:	616b      	str	r3, [r5, #20]
 8009ee2:	2300      	movs	r3, #0
 8009ee4:	9309      	str	r3, [sp, #36]	@ 0x24
 8009ee6:	2320      	movs	r3, #32
 8009ee8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009eec:	f8cd 800c 	str.w	r8, [sp, #12]
 8009ef0:	2330      	movs	r3, #48	@ 0x30
 8009ef2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800a090 <_svfiprintf_r+0x1e4>
 8009ef6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009efa:	f04f 0901 	mov.w	r9, #1
 8009efe:	4623      	mov	r3, r4
 8009f00:	469a      	mov	sl, r3
 8009f02:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009f06:	b10a      	cbz	r2, 8009f0c <_svfiprintf_r+0x60>
 8009f08:	2a25      	cmp	r2, #37	@ 0x25
 8009f0a:	d1f9      	bne.n	8009f00 <_svfiprintf_r+0x54>
 8009f0c:	ebba 0b04 	subs.w	fp, sl, r4
 8009f10:	d00b      	beq.n	8009f2a <_svfiprintf_r+0x7e>
 8009f12:	465b      	mov	r3, fp
 8009f14:	4622      	mov	r2, r4
 8009f16:	4629      	mov	r1, r5
 8009f18:	4638      	mov	r0, r7
 8009f1a:	f7ff ff6b 	bl	8009df4 <__ssputs_r>
 8009f1e:	3001      	adds	r0, #1
 8009f20:	f000 80a7 	beq.w	800a072 <_svfiprintf_r+0x1c6>
 8009f24:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009f26:	445a      	add	r2, fp
 8009f28:	9209      	str	r2, [sp, #36]	@ 0x24
 8009f2a:	f89a 3000 	ldrb.w	r3, [sl]
 8009f2e:	2b00      	cmp	r3, #0
 8009f30:	f000 809f 	beq.w	800a072 <_svfiprintf_r+0x1c6>
 8009f34:	2300      	movs	r3, #0
 8009f36:	f04f 32ff 	mov.w	r2, #4294967295
 8009f3a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009f3e:	f10a 0a01 	add.w	sl, sl, #1
 8009f42:	9304      	str	r3, [sp, #16]
 8009f44:	9307      	str	r3, [sp, #28]
 8009f46:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009f4a:	931a      	str	r3, [sp, #104]	@ 0x68
 8009f4c:	4654      	mov	r4, sl
 8009f4e:	2205      	movs	r2, #5
 8009f50:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009f54:	484e      	ldr	r0, [pc, #312]	@ (800a090 <_svfiprintf_r+0x1e4>)
 8009f56:	f7f6 f93b 	bl	80001d0 <memchr>
 8009f5a:	9a04      	ldr	r2, [sp, #16]
 8009f5c:	b9d8      	cbnz	r0, 8009f96 <_svfiprintf_r+0xea>
 8009f5e:	06d0      	lsls	r0, r2, #27
 8009f60:	bf44      	itt	mi
 8009f62:	2320      	movmi	r3, #32
 8009f64:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009f68:	0711      	lsls	r1, r2, #28
 8009f6a:	bf44      	itt	mi
 8009f6c:	232b      	movmi	r3, #43	@ 0x2b
 8009f6e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009f72:	f89a 3000 	ldrb.w	r3, [sl]
 8009f76:	2b2a      	cmp	r3, #42	@ 0x2a
 8009f78:	d015      	beq.n	8009fa6 <_svfiprintf_r+0xfa>
 8009f7a:	9a07      	ldr	r2, [sp, #28]
 8009f7c:	4654      	mov	r4, sl
 8009f7e:	2000      	movs	r0, #0
 8009f80:	f04f 0c0a 	mov.w	ip, #10
 8009f84:	4621      	mov	r1, r4
 8009f86:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009f8a:	3b30      	subs	r3, #48	@ 0x30
 8009f8c:	2b09      	cmp	r3, #9
 8009f8e:	d94b      	bls.n	800a028 <_svfiprintf_r+0x17c>
 8009f90:	b1b0      	cbz	r0, 8009fc0 <_svfiprintf_r+0x114>
 8009f92:	9207      	str	r2, [sp, #28]
 8009f94:	e014      	b.n	8009fc0 <_svfiprintf_r+0x114>
 8009f96:	eba0 0308 	sub.w	r3, r0, r8
 8009f9a:	fa09 f303 	lsl.w	r3, r9, r3
 8009f9e:	4313      	orrs	r3, r2
 8009fa0:	9304      	str	r3, [sp, #16]
 8009fa2:	46a2      	mov	sl, r4
 8009fa4:	e7d2      	b.n	8009f4c <_svfiprintf_r+0xa0>
 8009fa6:	9b03      	ldr	r3, [sp, #12]
 8009fa8:	1d19      	adds	r1, r3, #4
 8009faa:	681b      	ldr	r3, [r3, #0]
 8009fac:	9103      	str	r1, [sp, #12]
 8009fae:	2b00      	cmp	r3, #0
 8009fb0:	bfbb      	ittet	lt
 8009fb2:	425b      	neglt	r3, r3
 8009fb4:	f042 0202 	orrlt.w	r2, r2, #2
 8009fb8:	9307      	strge	r3, [sp, #28]
 8009fba:	9307      	strlt	r3, [sp, #28]
 8009fbc:	bfb8      	it	lt
 8009fbe:	9204      	strlt	r2, [sp, #16]
 8009fc0:	7823      	ldrb	r3, [r4, #0]
 8009fc2:	2b2e      	cmp	r3, #46	@ 0x2e
 8009fc4:	d10a      	bne.n	8009fdc <_svfiprintf_r+0x130>
 8009fc6:	7863      	ldrb	r3, [r4, #1]
 8009fc8:	2b2a      	cmp	r3, #42	@ 0x2a
 8009fca:	d132      	bne.n	800a032 <_svfiprintf_r+0x186>
 8009fcc:	9b03      	ldr	r3, [sp, #12]
 8009fce:	1d1a      	adds	r2, r3, #4
 8009fd0:	681b      	ldr	r3, [r3, #0]
 8009fd2:	9203      	str	r2, [sp, #12]
 8009fd4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009fd8:	3402      	adds	r4, #2
 8009fda:	9305      	str	r3, [sp, #20]
 8009fdc:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800a0a0 <_svfiprintf_r+0x1f4>
 8009fe0:	7821      	ldrb	r1, [r4, #0]
 8009fe2:	2203      	movs	r2, #3
 8009fe4:	4650      	mov	r0, sl
 8009fe6:	f7f6 f8f3 	bl	80001d0 <memchr>
 8009fea:	b138      	cbz	r0, 8009ffc <_svfiprintf_r+0x150>
 8009fec:	9b04      	ldr	r3, [sp, #16]
 8009fee:	eba0 000a 	sub.w	r0, r0, sl
 8009ff2:	2240      	movs	r2, #64	@ 0x40
 8009ff4:	4082      	lsls	r2, r0
 8009ff6:	4313      	orrs	r3, r2
 8009ff8:	3401      	adds	r4, #1
 8009ffa:	9304      	str	r3, [sp, #16]
 8009ffc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a000:	4824      	ldr	r0, [pc, #144]	@ (800a094 <_svfiprintf_r+0x1e8>)
 800a002:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800a006:	2206      	movs	r2, #6
 800a008:	f7f6 f8e2 	bl	80001d0 <memchr>
 800a00c:	2800      	cmp	r0, #0
 800a00e:	d036      	beq.n	800a07e <_svfiprintf_r+0x1d2>
 800a010:	4b21      	ldr	r3, [pc, #132]	@ (800a098 <_svfiprintf_r+0x1ec>)
 800a012:	bb1b      	cbnz	r3, 800a05c <_svfiprintf_r+0x1b0>
 800a014:	9b03      	ldr	r3, [sp, #12]
 800a016:	3307      	adds	r3, #7
 800a018:	f023 0307 	bic.w	r3, r3, #7
 800a01c:	3308      	adds	r3, #8
 800a01e:	9303      	str	r3, [sp, #12]
 800a020:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a022:	4433      	add	r3, r6
 800a024:	9309      	str	r3, [sp, #36]	@ 0x24
 800a026:	e76a      	b.n	8009efe <_svfiprintf_r+0x52>
 800a028:	fb0c 3202 	mla	r2, ip, r2, r3
 800a02c:	460c      	mov	r4, r1
 800a02e:	2001      	movs	r0, #1
 800a030:	e7a8      	b.n	8009f84 <_svfiprintf_r+0xd8>
 800a032:	2300      	movs	r3, #0
 800a034:	3401      	adds	r4, #1
 800a036:	9305      	str	r3, [sp, #20]
 800a038:	4619      	mov	r1, r3
 800a03a:	f04f 0c0a 	mov.w	ip, #10
 800a03e:	4620      	mov	r0, r4
 800a040:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a044:	3a30      	subs	r2, #48	@ 0x30
 800a046:	2a09      	cmp	r2, #9
 800a048:	d903      	bls.n	800a052 <_svfiprintf_r+0x1a6>
 800a04a:	2b00      	cmp	r3, #0
 800a04c:	d0c6      	beq.n	8009fdc <_svfiprintf_r+0x130>
 800a04e:	9105      	str	r1, [sp, #20]
 800a050:	e7c4      	b.n	8009fdc <_svfiprintf_r+0x130>
 800a052:	fb0c 2101 	mla	r1, ip, r1, r2
 800a056:	4604      	mov	r4, r0
 800a058:	2301      	movs	r3, #1
 800a05a:	e7f0      	b.n	800a03e <_svfiprintf_r+0x192>
 800a05c:	ab03      	add	r3, sp, #12
 800a05e:	9300      	str	r3, [sp, #0]
 800a060:	462a      	mov	r2, r5
 800a062:	4b0e      	ldr	r3, [pc, #56]	@ (800a09c <_svfiprintf_r+0x1f0>)
 800a064:	a904      	add	r1, sp, #16
 800a066:	4638      	mov	r0, r7
 800a068:	f7fc fbd8 	bl	800681c <_printf_float>
 800a06c:	1c42      	adds	r2, r0, #1
 800a06e:	4606      	mov	r6, r0
 800a070:	d1d6      	bne.n	800a020 <_svfiprintf_r+0x174>
 800a072:	89ab      	ldrh	r3, [r5, #12]
 800a074:	065b      	lsls	r3, r3, #25
 800a076:	f53f af2d 	bmi.w	8009ed4 <_svfiprintf_r+0x28>
 800a07a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a07c:	e72c      	b.n	8009ed8 <_svfiprintf_r+0x2c>
 800a07e:	ab03      	add	r3, sp, #12
 800a080:	9300      	str	r3, [sp, #0]
 800a082:	462a      	mov	r2, r5
 800a084:	4b05      	ldr	r3, [pc, #20]	@ (800a09c <_svfiprintf_r+0x1f0>)
 800a086:	a904      	add	r1, sp, #16
 800a088:	4638      	mov	r0, r7
 800a08a:	f7fc fe5f 	bl	8006d4c <_printf_i>
 800a08e:	e7ed      	b.n	800a06c <_svfiprintf_r+0x1c0>
 800a090:	0800b575 	.word	0x0800b575
 800a094:	0800b57f 	.word	0x0800b57f
 800a098:	0800681d 	.word	0x0800681d
 800a09c:	08009df5 	.word	0x08009df5
 800a0a0:	0800b57b 	.word	0x0800b57b

0800a0a4 <__sflush_r>:
 800a0a4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a0a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a0ac:	0716      	lsls	r6, r2, #28
 800a0ae:	4605      	mov	r5, r0
 800a0b0:	460c      	mov	r4, r1
 800a0b2:	d454      	bmi.n	800a15e <__sflush_r+0xba>
 800a0b4:	684b      	ldr	r3, [r1, #4]
 800a0b6:	2b00      	cmp	r3, #0
 800a0b8:	dc02      	bgt.n	800a0c0 <__sflush_r+0x1c>
 800a0ba:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800a0bc:	2b00      	cmp	r3, #0
 800a0be:	dd48      	ble.n	800a152 <__sflush_r+0xae>
 800a0c0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a0c2:	2e00      	cmp	r6, #0
 800a0c4:	d045      	beq.n	800a152 <__sflush_r+0xae>
 800a0c6:	2300      	movs	r3, #0
 800a0c8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800a0cc:	682f      	ldr	r7, [r5, #0]
 800a0ce:	6a21      	ldr	r1, [r4, #32]
 800a0d0:	602b      	str	r3, [r5, #0]
 800a0d2:	d030      	beq.n	800a136 <__sflush_r+0x92>
 800a0d4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800a0d6:	89a3      	ldrh	r3, [r4, #12]
 800a0d8:	0759      	lsls	r1, r3, #29
 800a0da:	d505      	bpl.n	800a0e8 <__sflush_r+0x44>
 800a0dc:	6863      	ldr	r3, [r4, #4]
 800a0de:	1ad2      	subs	r2, r2, r3
 800a0e0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800a0e2:	b10b      	cbz	r3, 800a0e8 <__sflush_r+0x44>
 800a0e4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800a0e6:	1ad2      	subs	r2, r2, r3
 800a0e8:	2300      	movs	r3, #0
 800a0ea:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a0ec:	6a21      	ldr	r1, [r4, #32]
 800a0ee:	4628      	mov	r0, r5
 800a0f0:	47b0      	blx	r6
 800a0f2:	1c43      	adds	r3, r0, #1
 800a0f4:	89a3      	ldrh	r3, [r4, #12]
 800a0f6:	d106      	bne.n	800a106 <__sflush_r+0x62>
 800a0f8:	6829      	ldr	r1, [r5, #0]
 800a0fa:	291d      	cmp	r1, #29
 800a0fc:	d82b      	bhi.n	800a156 <__sflush_r+0xb2>
 800a0fe:	4a2a      	ldr	r2, [pc, #168]	@ (800a1a8 <__sflush_r+0x104>)
 800a100:	40ca      	lsrs	r2, r1
 800a102:	07d6      	lsls	r6, r2, #31
 800a104:	d527      	bpl.n	800a156 <__sflush_r+0xb2>
 800a106:	2200      	movs	r2, #0
 800a108:	6062      	str	r2, [r4, #4]
 800a10a:	04d9      	lsls	r1, r3, #19
 800a10c:	6922      	ldr	r2, [r4, #16]
 800a10e:	6022      	str	r2, [r4, #0]
 800a110:	d504      	bpl.n	800a11c <__sflush_r+0x78>
 800a112:	1c42      	adds	r2, r0, #1
 800a114:	d101      	bne.n	800a11a <__sflush_r+0x76>
 800a116:	682b      	ldr	r3, [r5, #0]
 800a118:	b903      	cbnz	r3, 800a11c <__sflush_r+0x78>
 800a11a:	6560      	str	r0, [r4, #84]	@ 0x54
 800a11c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a11e:	602f      	str	r7, [r5, #0]
 800a120:	b1b9      	cbz	r1, 800a152 <__sflush_r+0xae>
 800a122:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a126:	4299      	cmp	r1, r3
 800a128:	d002      	beq.n	800a130 <__sflush_r+0x8c>
 800a12a:	4628      	mov	r0, r5
 800a12c:	f7fe fa34 	bl	8008598 <_free_r>
 800a130:	2300      	movs	r3, #0
 800a132:	6363      	str	r3, [r4, #52]	@ 0x34
 800a134:	e00d      	b.n	800a152 <__sflush_r+0xae>
 800a136:	2301      	movs	r3, #1
 800a138:	4628      	mov	r0, r5
 800a13a:	47b0      	blx	r6
 800a13c:	4602      	mov	r2, r0
 800a13e:	1c50      	adds	r0, r2, #1
 800a140:	d1c9      	bne.n	800a0d6 <__sflush_r+0x32>
 800a142:	682b      	ldr	r3, [r5, #0]
 800a144:	2b00      	cmp	r3, #0
 800a146:	d0c6      	beq.n	800a0d6 <__sflush_r+0x32>
 800a148:	2b1d      	cmp	r3, #29
 800a14a:	d001      	beq.n	800a150 <__sflush_r+0xac>
 800a14c:	2b16      	cmp	r3, #22
 800a14e:	d11e      	bne.n	800a18e <__sflush_r+0xea>
 800a150:	602f      	str	r7, [r5, #0]
 800a152:	2000      	movs	r0, #0
 800a154:	e022      	b.n	800a19c <__sflush_r+0xf8>
 800a156:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a15a:	b21b      	sxth	r3, r3
 800a15c:	e01b      	b.n	800a196 <__sflush_r+0xf2>
 800a15e:	690f      	ldr	r7, [r1, #16]
 800a160:	2f00      	cmp	r7, #0
 800a162:	d0f6      	beq.n	800a152 <__sflush_r+0xae>
 800a164:	0793      	lsls	r3, r2, #30
 800a166:	680e      	ldr	r6, [r1, #0]
 800a168:	bf08      	it	eq
 800a16a:	694b      	ldreq	r3, [r1, #20]
 800a16c:	600f      	str	r7, [r1, #0]
 800a16e:	bf18      	it	ne
 800a170:	2300      	movne	r3, #0
 800a172:	eba6 0807 	sub.w	r8, r6, r7
 800a176:	608b      	str	r3, [r1, #8]
 800a178:	f1b8 0f00 	cmp.w	r8, #0
 800a17c:	dde9      	ble.n	800a152 <__sflush_r+0xae>
 800a17e:	6a21      	ldr	r1, [r4, #32]
 800a180:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800a182:	4643      	mov	r3, r8
 800a184:	463a      	mov	r2, r7
 800a186:	4628      	mov	r0, r5
 800a188:	47b0      	blx	r6
 800a18a:	2800      	cmp	r0, #0
 800a18c:	dc08      	bgt.n	800a1a0 <__sflush_r+0xfc>
 800a18e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a192:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a196:	81a3      	strh	r3, [r4, #12]
 800a198:	f04f 30ff 	mov.w	r0, #4294967295
 800a19c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a1a0:	4407      	add	r7, r0
 800a1a2:	eba8 0800 	sub.w	r8, r8, r0
 800a1a6:	e7e7      	b.n	800a178 <__sflush_r+0xd4>
 800a1a8:	20400001 	.word	0x20400001

0800a1ac <_fflush_r>:
 800a1ac:	b538      	push	{r3, r4, r5, lr}
 800a1ae:	690b      	ldr	r3, [r1, #16]
 800a1b0:	4605      	mov	r5, r0
 800a1b2:	460c      	mov	r4, r1
 800a1b4:	b913      	cbnz	r3, 800a1bc <_fflush_r+0x10>
 800a1b6:	2500      	movs	r5, #0
 800a1b8:	4628      	mov	r0, r5
 800a1ba:	bd38      	pop	{r3, r4, r5, pc}
 800a1bc:	b118      	cbz	r0, 800a1c6 <_fflush_r+0x1a>
 800a1be:	6a03      	ldr	r3, [r0, #32]
 800a1c0:	b90b      	cbnz	r3, 800a1c6 <_fflush_r+0x1a>
 800a1c2:	f7fd f97b 	bl	80074bc <__sinit>
 800a1c6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a1ca:	2b00      	cmp	r3, #0
 800a1cc:	d0f3      	beq.n	800a1b6 <_fflush_r+0xa>
 800a1ce:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800a1d0:	07d0      	lsls	r0, r2, #31
 800a1d2:	d404      	bmi.n	800a1de <_fflush_r+0x32>
 800a1d4:	0599      	lsls	r1, r3, #22
 800a1d6:	d402      	bmi.n	800a1de <_fflush_r+0x32>
 800a1d8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a1da:	f7fd fb7a 	bl	80078d2 <__retarget_lock_acquire_recursive>
 800a1de:	4628      	mov	r0, r5
 800a1e0:	4621      	mov	r1, r4
 800a1e2:	f7ff ff5f 	bl	800a0a4 <__sflush_r>
 800a1e6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a1e8:	07da      	lsls	r2, r3, #31
 800a1ea:	4605      	mov	r5, r0
 800a1ec:	d4e4      	bmi.n	800a1b8 <_fflush_r+0xc>
 800a1ee:	89a3      	ldrh	r3, [r4, #12]
 800a1f0:	059b      	lsls	r3, r3, #22
 800a1f2:	d4e1      	bmi.n	800a1b8 <_fflush_r+0xc>
 800a1f4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a1f6:	f7fd fb6d 	bl	80078d4 <__retarget_lock_release_recursive>
 800a1fa:	e7dd      	b.n	800a1b8 <_fflush_r+0xc>

0800a1fc <__swhatbuf_r>:
 800a1fc:	b570      	push	{r4, r5, r6, lr}
 800a1fe:	460c      	mov	r4, r1
 800a200:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a204:	2900      	cmp	r1, #0
 800a206:	b096      	sub	sp, #88	@ 0x58
 800a208:	4615      	mov	r5, r2
 800a20a:	461e      	mov	r6, r3
 800a20c:	da0d      	bge.n	800a22a <__swhatbuf_r+0x2e>
 800a20e:	89a3      	ldrh	r3, [r4, #12]
 800a210:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800a214:	f04f 0100 	mov.w	r1, #0
 800a218:	bf14      	ite	ne
 800a21a:	2340      	movne	r3, #64	@ 0x40
 800a21c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800a220:	2000      	movs	r0, #0
 800a222:	6031      	str	r1, [r6, #0]
 800a224:	602b      	str	r3, [r5, #0]
 800a226:	b016      	add	sp, #88	@ 0x58
 800a228:	bd70      	pop	{r4, r5, r6, pc}
 800a22a:	466a      	mov	r2, sp
 800a22c:	f000 f874 	bl	800a318 <_fstat_r>
 800a230:	2800      	cmp	r0, #0
 800a232:	dbec      	blt.n	800a20e <__swhatbuf_r+0x12>
 800a234:	9901      	ldr	r1, [sp, #4]
 800a236:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800a23a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800a23e:	4259      	negs	r1, r3
 800a240:	4159      	adcs	r1, r3
 800a242:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a246:	e7eb      	b.n	800a220 <__swhatbuf_r+0x24>

0800a248 <__smakebuf_r>:
 800a248:	898b      	ldrh	r3, [r1, #12]
 800a24a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a24c:	079d      	lsls	r5, r3, #30
 800a24e:	4606      	mov	r6, r0
 800a250:	460c      	mov	r4, r1
 800a252:	d507      	bpl.n	800a264 <__smakebuf_r+0x1c>
 800a254:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800a258:	6023      	str	r3, [r4, #0]
 800a25a:	6123      	str	r3, [r4, #16]
 800a25c:	2301      	movs	r3, #1
 800a25e:	6163      	str	r3, [r4, #20]
 800a260:	b003      	add	sp, #12
 800a262:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a264:	ab01      	add	r3, sp, #4
 800a266:	466a      	mov	r2, sp
 800a268:	f7ff ffc8 	bl	800a1fc <__swhatbuf_r>
 800a26c:	9f00      	ldr	r7, [sp, #0]
 800a26e:	4605      	mov	r5, r0
 800a270:	4639      	mov	r1, r7
 800a272:	4630      	mov	r0, r6
 800a274:	f7fe fa04 	bl	8008680 <_malloc_r>
 800a278:	b948      	cbnz	r0, 800a28e <__smakebuf_r+0x46>
 800a27a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a27e:	059a      	lsls	r2, r3, #22
 800a280:	d4ee      	bmi.n	800a260 <__smakebuf_r+0x18>
 800a282:	f023 0303 	bic.w	r3, r3, #3
 800a286:	f043 0302 	orr.w	r3, r3, #2
 800a28a:	81a3      	strh	r3, [r4, #12]
 800a28c:	e7e2      	b.n	800a254 <__smakebuf_r+0xc>
 800a28e:	89a3      	ldrh	r3, [r4, #12]
 800a290:	6020      	str	r0, [r4, #0]
 800a292:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a296:	81a3      	strh	r3, [r4, #12]
 800a298:	9b01      	ldr	r3, [sp, #4]
 800a29a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800a29e:	b15b      	cbz	r3, 800a2b8 <__smakebuf_r+0x70>
 800a2a0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a2a4:	4630      	mov	r0, r6
 800a2a6:	f000 f849 	bl	800a33c <_isatty_r>
 800a2aa:	b128      	cbz	r0, 800a2b8 <__smakebuf_r+0x70>
 800a2ac:	89a3      	ldrh	r3, [r4, #12]
 800a2ae:	f023 0303 	bic.w	r3, r3, #3
 800a2b2:	f043 0301 	orr.w	r3, r3, #1
 800a2b6:	81a3      	strh	r3, [r4, #12]
 800a2b8:	89a3      	ldrh	r3, [r4, #12]
 800a2ba:	431d      	orrs	r5, r3
 800a2bc:	81a5      	strh	r5, [r4, #12]
 800a2be:	e7cf      	b.n	800a260 <__smakebuf_r+0x18>

0800a2c0 <memmove>:
 800a2c0:	4288      	cmp	r0, r1
 800a2c2:	b510      	push	{r4, lr}
 800a2c4:	eb01 0402 	add.w	r4, r1, r2
 800a2c8:	d902      	bls.n	800a2d0 <memmove+0x10>
 800a2ca:	4284      	cmp	r4, r0
 800a2cc:	4623      	mov	r3, r4
 800a2ce:	d807      	bhi.n	800a2e0 <memmove+0x20>
 800a2d0:	1e43      	subs	r3, r0, #1
 800a2d2:	42a1      	cmp	r1, r4
 800a2d4:	d008      	beq.n	800a2e8 <memmove+0x28>
 800a2d6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a2da:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a2de:	e7f8      	b.n	800a2d2 <memmove+0x12>
 800a2e0:	4402      	add	r2, r0
 800a2e2:	4601      	mov	r1, r0
 800a2e4:	428a      	cmp	r2, r1
 800a2e6:	d100      	bne.n	800a2ea <memmove+0x2a>
 800a2e8:	bd10      	pop	{r4, pc}
 800a2ea:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a2ee:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a2f2:	e7f7      	b.n	800a2e4 <memmove+0x24>

0800a2f4 <strncmp>:
 800a2f4:	b510      	push	{r4, lr}
 800a2f6:	b16a      	cbz	r2, 800a314 <strncmp+0x20>
 800a2f8:	3901      	subs	r1, #1
 800a2fa:	1884      	adds	r4, r0, r2
 800a2fc:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a300:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800a304:	429a      	cmp	r2, r3
 800a306:	d103      	bne.n	800a310 <strncmp+0x1c>
 800a308:	42a0      	cmp	r0, r4
 800a30a:	d001      	beq.n	800a310 <strncmp+0x1c>
 800a30c:	2a00      	cmp	r2, #0
 800a30e:	d1f5      	bne.n	800a2fc <strncmp+0x8>
 800a310:	1ad0      	subs	r0, r2, r3
 800a312:	bd10      	pop	{r4, pc}
 800a314:	4610      	mov	r0, r2
 800a316:	e7fc      	b.n	800a312 <strncmp+0x1e>

0800a318 <_fstat_r>:
 800a318:	b538      	push	{r3, r4, r5, lr}
 800a31a:	4d07      	ldr	r5, [pc, #28]	@ (800a338 <_fstat_r+0x20>)
 800a31c:	2300      	movs	r3, #0
 800a31e:	4604      	mov	r4, r0
 800a320:	4608      	mov	r0, r1
 800a322:	4611      	mov	r1, r2
 800a324:	602b      	str	r3, [r5, #0]
 800a326:	f7f8 fbe9 	bl	8002afc <_fstat>
 800a32a:	1c43      	adds	r3, r0, #1
 800a32c:	d102      	bne.n	800a334 <_fstat_r+0x1c>
 800a32e:	682b      	ldr	r3, [r5, #0]
 800a330:	b103      	cbz	r3, 800a334 <_fstat_r+0x1c>
 800a332:	6023      	str	r3, [r4, #0]
 800a334:	bd38      	pop	{r3, r4, r5, pc}
 800a336:	bf00      	nop
 800a338:	20001608 	.word	0x20001608

0800a33c <_isatty_r>:
 800a33c:	b538      	push	{r3, r4, r5, lr}
 800a33e:	4d06      	ldr	r5, [pc, #24]	@ (800a358 <_isatty_r+0x1c>)
 800a340:	2300      	movs	r3, #0
 800a342:	4604      	mov	r4, r0
 800a344:	4608      	mov	r0, r1
 800a346:	602b      	str	r3, [r5, #0]
 800a348:	f7f8 fbe8 	bl	8002b1c <_isatty>
 800a34c:	1c43      	adds	r3, r0, #1
 800a34e:	d102      	bne.n	800a356 <_isatty_r+0x1a>
 800a350:	682b      	ldr	r3, [r5, #0]
 800a352:	b103      	cbz	r3, 800a356 <_isatty_r+0x1a>
 800a354:	6023      	str	r3, [r4, #0]
 800a356:	bd38      	pop	{r3, r4, r5, pc}
 800a358:	20001608 	.word	0x20001608

0800a35c <_sbrk_r>:
 800a35c:	b538      	push	{r3, r4, r5, lr}
 800a35e:	4d06      	ldr	r5, [pc, #24]	@ (800a378 <_sbrk_r+0x1c>)
 800a360:	2300      	movs	r3, #0
 800a362:	4604      	mov	r4, r0
 800a364:	4608      	mov	r0, r1
 800a366:	602b      	str	r3, [r5, #0]
 800a368:	f7f8 fbf0 	bl	8002b4c <_sbrk>
 800a36c:	1c43      	adds	r3, r0, #1
 800a36e:	d102      	bne.n	800a376 <_sbrk_r+0x1a>
 800a370:	682b      	ldr	r3, [r5, #0]
 800a372:	b103      	cbz	r3, 800a376 <_sbrk_r+0x1a>
 800a374:	6023      	str	r3, [r4, #0]
 800a376:	bd38      	pop	{r3, r4, r5, pc}
 800a378:	20001608 	.word	0x20001608

0800a37c <memcpy>:
 800a37c:	440a      	add	r2, r1
 800a37e:	4291      	cmp	r1, r2
 800a380:	f100 33ff 	add.w	r3, r0, #4294967295
 800a384:	d100      	bne.n	800a388 <memcpy+0xc>
 800a386:	4770      	bx	lr
 800a388:	b510      	push	{r4, lr}
 800a38a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a38e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a392:	4291      	cmp	r1, r2
 800a394:	d1f9      	bne.n	800a38a <memcpy+0xe>
 800a396:	bd10      	pop	{r4, pc}

0800a398 <nan>:
 800a398:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800a3a0 <nan+0x8>
 800a39c:	4770      	bx	lr
 800a39e:	bf00      	nop
 800a3a0:	00000000 	.word	0x00000000
 800a3a4:	7ff80000 	.word	0x7ff80000

0800a3a8 <__assert_func>:
 800a3a8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a3aa:	4614      	mov	r4, r2
 800a3ac:	461a      	mov	r2, r3
 800a3ae:	4b09      	ldr	r3, [pc, #36]	@ (800a3d4 <__assert_func+0x2c>)
 800a3b0:	681b      	ldr	r3, [r3, #0]
 800a3b2:	4605      	mov	r5, r0
 800a3b4:	68d8      	ldr	r0, [r3, #12]
 800a3b6:	b14c      	cbz	r4, 800a3cc <__assert_func+0x24>
 800a3b8:	4b07      	ldr	r3, [pc, #28]	@ (800a3d8 <__assert_func+0x30>)
 800a3ba:	9100      	str	r1, [sp, #0]
 800a3bc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a3c0:	4906      	ldr	r1, [pc, #24]	@ (800a3dc <__assert_func+0x34>)
 800a3c2:	462b      	mov	r3, r5
 800a3c4:	f000 fba8 	bl	800ab18 <fiprintf>
 800a3c8:	f000 fbb8 	bl	800ab3c <abort>
 800a3cc:	4b04      	ldr	r3, [pc, #16]	@ (800a3e0 <__assert_func+0x38>)
 800a3ce:	461c      	mov	r4, r3
 800a3d0:	e7f3      	b.n	800a3ba <__assert_func+0x12>
 800a3d2:	bf00      	nop
 800a3d4:	20000a58 	.word	0x20000a58
 800a3d8:	0800b58e 	.word	0x0800b58e
 800a3dc:	0800b59b 	.word	0x0800b59b
 800a3e0:	0800b5c9 	.word	0x0800b5c9

0800a3e4 <_calloc_r>:
 800a3e4:	b570      	push	{r4, r5, r6, lr}
 800a3e6:	fba1 5402 	umull	r5, r4, r1, r2
 800a3ea:	b934      	cbnz	r4, 800a3fa <_calloc_r+0x16>
 800a3ec:	4629      	mov	r1, r5
 800a3ee:	f7fe f947 	bl	8008680 <_malloc_r>
 800a3f2:	4606      	mov	r6, r0
 800a3f4:	b928      	cbnz	r0, 800a402 <_calloc_r+0x1e>
 800a3f6:	4630      	mov	r0, r6
 800a3f8:	bd70      	pop	{r4, r5, r6, pc}
 800a3fa:	220c      	movs	r2, #12
 800a3fc:	6002      	str	r2, [r0, #0]
 800a3fe:	2600      	movs	r6, #0
 800a400:	e7f9      	b.n	800a3f6 <_calloc_r+0x12>
 800a402:	462a      	mov	r2, r5
 800a404:	4621      	mov	r1, r4
 800a406:	f7fd f9e7 	bl	80077d8 <memset>
 800a40a:	e7f4      	b.n	800a3f6 <_calloc_r+0x12>

0800a40c <rshift>:
 800a40c:	6903      	ldr	r3, [r0, #16]
 800a40e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800a412:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a416:	ea4f 1261 	mov.w	r2, r1, asr #5
 800a41a:	f100 0414 	add.w	r4, r0, #20
 800a41e:	dd45      	ble.n	800a4ac <rshift+0xa0>
 800a420:	f011 011f 	ands.w	r1, r1, #31
 800a424:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800a428:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800a42c:	d10c      	bne.n	800a448 <rshift+0x3c>
 800a42e:	f100 0710 	add.w	r7, r0, #16
 800a432:	4629      	mov	r1, r5
 800a434:	42b1      	cmp	r1, r6
 800a436:	d334      	bcc.n	800a4a2 <rshift+0x96>
 800a438:	1a9b      	subs	r3, r3, r2
 800a43a:	009b      	lsls	r3, r3, #2
 800a43c:	1eea      	subs	r2, r5, #3
 800a43e:	4296      	cmp	r6, r2
 800a440:	bf38      	it	cc
 800a442:	2300      	movcc	r3, #0
 800a444:	4423      	add	r3, r4
 800a446:	e015      	b.n	800a474 <rshift+0x68>
 800a448:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800a44c:	f1c1 0820 	rsb	r8, r1, #32
 800a450:	40cf      	lsrs	r7, r1
 800a452:	f105 0e04 	add.w	lr, r5, #4
 800a456:	46a1      	mov	r9, r4
 800a458:	4576      	cmp	r6, lr
 800a45a:	46f4      	mov	ip, lr
 800a45c:	d815      	bhi.n	800a48a <rshift+0x7e>
 800a45e:	1a9a      	subs	r2, r3, r2
 800a460:	0092      	lsls	r2, r2, #2
 800a462:	3a04      	subs	r2, #4
 800a464:	3501      	adds	r5, #1
 800a466:	42ae      	cmp	r6, r5
 800a468:	bf38      	it	cc
 800a46a:	2200      	movcc	r2, #0
 800a46c:	18a3      	adds	r3, r4, r2
 800a46e:	50a7      	str	r7, [r4, r2]
 800a470:	b107      	cbz	r7, 800a474 <rshift+0x68>
 800a472:	3304      	adds	r3, #4
 800a474:	1b1a      	subs	r2, r3, r4
 800a476:	42a3      	cmp	r3, r4
 800a478:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800a47c:	bf08      	it	eq
 800a47e:	2300      	moveq	r3, #0
 800a480:	6102      	str	r2, [r0, #16]
 800a482:	bf08      	it	eq
 800a484:	6143      	streq	r3, [r0, #20]
 800a486:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a48a:	f8dc c000 	ldr.w	ip, [ip]
 800a48e:	fa0c fc08 	lsl.w	ip, ip, r8
 800a492:	ea4c 0707 	orr.w	r7, ip, r7
 800a496:	f849 7b04 	str.w	r7, [r9], #4
 800a49a:	f85e 7b04 	ldr.w	r7, [lr], #4
 800a49e:	40cf      	lsrs	r7, r1
 800a4a0:	e7da      	b.n	800a458 <rshift+0x4c>
 800a4a2:	f851 cb04 	ldr.w	ip, [r1], #4
 800a4a6:	f847 cf04 	str.w	ip, [r7, #4]!
 800a4aa:	e7c3      	b.n	800a434 <rshift+0x28>
 800a4ac:	4623      	mov	r3, r4
 800a4ae:	e7e1      	b.n	800a474 <rshift+0x68>

0800a4b0 <__hexdig_fun>:
 800a4b0:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800a4b4:	2b09      	cmp	r3, #9
 800a4b6:	d802      	bhi.n	800a4be <__hexdig_fun+0xe>
 800a4b8:	3820      	subs	r0, #32
 800a4ba:	b2c0      	uxtb	r0, r0
 800a4bc:	4770      	bx	lr
 800a4be:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800a4c2:	2b05      	cmp	r3, #5
 800a4c4:	d801      	bhi.n	800a4ca <__hexdig_fun+0x1a>
 800a4c6:	3847      	subs	r0, #71	@ 0x47
 800a4c8:	e7f7      	b.n	800a4ba <__hexdig_fun+0xa>
 800a4ca:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800a4ce:	2b05      	cmp	r3, #5
 800a4d0:	d801      	bhi.n	800a4d6 <__hexdig_fun+0x26>
 800a4d2:	3827      	subs	r0, #39	@ 0x27
 800a4d4:	e7f1      	b.n	800a4ba <__hexdig_fun+0xa>
 800a4d6:	2000      	movs	r0, #0
 800a4d8:	4770      	bx	lr
	...

0800a4dc <__gethex>:
 800a4dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a4e0:	b085      	sub	sp, #20
 800a4e2:	468a      	mov	sl, r1
 800a4e4:	9302      	str	r3, [sp, #8]
 800a4e6:	680b      	ldr	r3, [r1, #0]
 800a4e8:	9001      	str	r0, [sp, #4]
 800a4ea:	4690      	mov	r8, r2
 800a4ec:	1c9c      	adds	r4, r3, #2
 800a4ee:	46a1      	mov	r9, r4
 800a4f0:	f814 0b01 	ldrb.w	r0, [r4], #1
 800a4f4:	2830      	cmp	r0, #48	@ 0x30
 800a4f6:	d0fa      	beq.n	800a4ee <__gethex+0x12>
 800a4f8:	eba9 0303 	sub.w	r3, r9, r3
 800a4fc:	f1a3 0b02 	sub.w	fp, r3, #2
 800a500:	f7ff ffd6 	bl	800a4b0 <__hexdig_fun>
 800a504:	4605      	mov	r5, r0
 800a506:	2800      	cmp	r0, #0
 800a508:	d168      	bne.n	800a5dc <__gethex+0x100>
 800a50a:	49a0      	ldr	r1, [pc, #640]	@ (800a78c <__gethex+0x2b0>)
 800a50c:	2201      	movs	r2, #1
 800a50e:	4648      	mov	r0, r9
 800a510:	f7ff fef0 	bl	800a2f4 <strncmp>
 800a514:	4607      	mov	r7, r0
 800a516:	2800      	cmp	r0, #0
 800a518:	d167      	bne.n	800a5ea <__gethex+0x10e>
 800a51a:	f899 0001 	ldrb.w	r0, [r9, #1]
 800a51e:	4626      	mov	r6, r4
 800a520:	f7ff ffc6 	bl	800a4b0 <__hexdig_fun>
 800a524:	2800      	cmp	r0, #0
 800a526:	d062      	beq.n	800a5ee <__gethex+0x112>
 800a528:	4623      	mov	r3, r4
 800a52a:	7818      	ldrb	r0, [r3, #0]
 800a52c:	2830      	cmp	r0, #48	@ 0x30
 800a52e:	4699      	mov	r9, r3
 800a530:	f103 0301 	add.w	r3, r3, #1
 800a534:	d0f9      	beq.n	800a52a <__gethex+0x4e>
 800a536:	f7ff ffbb 	bl	800a4b0 <__hexdig_fun>
 800a53a:	fab0 f580 	clz	r5, r0
 800a53e:	096d      	lsrs	r5, r5, #5
 800a540:	f04f 0b01 	mov.w	fp, #1
 800a544:	464a      	mov	r2, r9
 800a546:	4616      	mov	r6, r2
 800a548:	3201      	adds	r2, #1
 800a54a:	7830      	ldrb	r0, [r6, #0]
 800a54c:	f7ff ffb0 	bl	800a4b0 <__hexdig_fun>
 800a550:	2800      	cmp	r0, #0
 800a552:	d1f8      	bne.n	800a546 <__gethex+0x6a>
 800a554:	498d      	ldr	r1, [pc, #564]	@ (800a78c <__gethex+0x2b0>)
 800a556:	2201      	movs	r2, #1
 800a558:	4630      	mov	r0, r6
 800a55a:	f7ff fecb 	bl	800a2f4 <strncmp>
 800a55e:	2800      	cmp	r0, #0
 800a560:	d13f      	bne.n	800a5e2 <__gethex+0x106>
 800a562:	b944      	cbnz	r4, 800a576 <__gethex+0x9a>
 800a564:	1c74      	adds	r4, r6, #1
 800a566:	4622      	mov	r2, r4
 800a568:	4616      	mov	r6, r2
 800a56a:	3201      	adds	r2, #1
 800a56c:	7830      	ldrb	r0, [r6, #0]
 800a56e:	f7ff ff9f 	bl	800a4b0 <__hexdig_fun>
 800a572:	2800      	cmp	r0, #0
 800a574:	d1f8      	bne.n	800a568 <__gethex+0x8c>
 800a576:	1ba4      	subs	r4, r4, r6
 800a578:	00a7      	lsls	r7, r4, #2
 800a57a:	7833      	ldrb	r3, [r6, #0]
 800a57c:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800a580:	2b50      	cmp	r3, #80	@ 0x50
 800a582:	d13e      	bne.n	800a602 <__gethex+0x126>
 800a584:	7873      	ldrb	r3, [r6, #1]
 800a586:	2b2b      	cmp	r3, #43	@ 0x2b
 800a588:	d033      	beq.n	800a5f2 <__gethex+0x116>
 800a58a:	2b2d      	cmp	r3, #45	@ 0x2d
 800a58c:	d034      	beq.n	800a5f8 <__gethex+0x11c>
 800a58e:	1c71      	adds	r1, r6, #1
 800a590:	2400      	movs	r4, #0
 800a592:	7808      	ldrb	r0, [r1, #0]
 800a594:	f7ff ff8c 	bl	800a4b0 <__hexdig_fun>
 800a598:	1e43      	subs	r3, r0, #1
 800a59a:	b2db      	uxtb	r3, r3
 800a59c:	2b18      	cmp	r3, #24
 800a59e:	d830      	bhi.n	800a602 <__gethex+0x126>
 800a5a0:	f1a0 0210 	sub.w	r2, r0, #16
 800a5a4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800a5a8:	f7ff ff82 	bl	800a4b0 <__hexdig_fun>
 800a5ac:	f100 3cff 	add.w	ip, r0, #4294967295
 800a5b0:	fa5f fc8c 	uxtb.w	ip, ip
 800a5b4:	f1bc 0f18 	cmp.w	ip, #24
 800a5b8:	f04f 030a 	mov.w	r3, #10
 800a5bc:	d91e      	bls.n	800a5fc <__gethex+0x120>
 800a5be:	b104      	cbz	r4, 800a5c2 <__gethex+0xe6>
 800a5c0:	4252      	negs	r2, r2
 800a5c2:	4417      	add	r7, r2
 800a5c4:	f8ca 1000 	str.w	r1, [sl]
 800a5c8:	b1ed      	cbz	r5, 800a606 <__gethex+0x12a>
 800a5ca:	f1bb 0f00 	cmp.w	fp, #0
 800a5ce:	bf0c      	ite	eq
 800a5d0:	2506      	moveq	r5, #6
 800a5d2:	2500      	movne	r5, #0
 800a5d4:	4628      	mov	r0, r5
 800a5d6:	b005      	add	sp, #20
 800a5d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a5dc:	2500      	movs	r5, #0
 800a5de:	462c      	mov	r4, r5
 800a5e0:	e7b0      	b.n	800a544 <__gethex+0x68>
 800a5e2:	2c00      	cmp	r4, #0
 800a5e4:	d1c7      	bne.n	800a576 <__gethex+0x9a>
 800a5e6:	4627      	mov	r7, r4
 800a5e8:	e7c7      	b.n	800a57a <__gethex+0x9e>
 800a5ea:	464e      	mov	r6, r9
 800a5ec:	462f      	mov	r7, r5
 800a5ee:	2501      	movs	r5, #1
 800a5f0:	e7c3      	b.n	800a57a <__gethex+0x9e>
 800a5f2:	2400      	movs	r4, #0
 800a5f4:	1cb1      	adds	r1, r6, #2
 800a5f6:	e7cc      	b.n	800a592 <__gethex+0xb6>
 800a5f8:	2401      	movs	r4, #1
 800a5fa:	e7fb      	b.n	800a5f4 <__gethex+0x118>
 800a5fc:	fb03 0002 	mla	r0, r3, r2, r0
 800a600:	e7ce      	b.n	800a5a0 <__gethex+0xc4>
 800a602:	4631      	mov	r1, r6
 800a604:	e7de      	b.n	800a5c4 <__gethex+0xe8>
 800a606:	eba6 0309 	sub.w	r3, r6, r9
 800a60a:	3b01      	subs	r3, #1
 800a60c:	4629      	mov	r1, r5
 800a60e:	2b07      	cmp	r3, #7
 800a610:	dc0a      	bgt.n	800a628 <__gethex+0x14c>
 800a612:	9801      	ldr	r0, [sp, #4]
 800a614:	f7fe f8c0 	bl	8008798 <_Balloc>
 800a618:	4604      	mov	r4, r0
 800a61a:	b940      	cbnz	r0, 800a62e <__gethex+0x152>
 800a61c:	4b5c      	ldr	r3, [pc, #368]	@ (800a790 <__gethex+0x2b4>)
 800a61e:	4602      	mov	r2, r0
 800a620:	21e4      	movs	r1, #228	@ 0xe4
 800a622:	485c      	ldr	r0, [pc, #368]	@ (800a794 <__gethex+0x2b8>)
 800a624:	f7ff fec0 	bl	800a3a8 <__assert_func>
 800a628:	3101      	adds	r1, #1
 800a62a:	105b      	asrs	r3, r3, #1
 800a62c:	e7ef      	b.n	800a60e <__gethex+0x132>
 800a62e:	f100 0a14 	add.w	sl, r0, #20
 800a632:	2300      	movs	r3, #0
 800a634:	4655      	mov	r5, sl
 800a636:	469b      	mov	fp, r3
 800a638:	45b1      	cmp	r9, r6
 800a63a:	d337      	bcc.n	800a6ac <__gethex+0x1d0>
 800a63c:	f845 bb04 	str.w	fp, [r5], #4
 800a640:	eba5 050a 	sub.w	r5, r5, sl
 800a644:	10ad      	asrs	r5, r5, #2
 800a646:	6125      	str	r5, [r4, #16]
 800a648:	4658      	mov	r0, fp
 800a64a:	f7fe f997 	bl	800897c <__hi0bits>
 800a64e:	016d      	lsls	r5, r5, #5
 800a650:	f8d8 6000 	ldr.w	r6, [r8]
 800a654:	1a2d      	subs	r5, r5, r0
 800a656:	42b5      	cmp	r5, r6
 800a658:	dd54      	ble.n	800a704 <__gethex+0x228>
 800a65a:	1bad      	subs	r5, r5, r6
 800a65c:	4629      	mov	r1, r5
 800a65e:	4620      	mov	r0, r4
 800a660:	f7fe fd23 	bl	80090aa <__any_on>
 800a664:	4681      	mov	r9, r0
 800a666:	b178      	cbz	r0, 800a688 <__gethex+0x1ac>
 800a668:	1e6b      	subs	r3, r5, #1
 800a66a:	1159      	asrs	r1, r3, #5
 800a66c:	f003 021f 	and.w	r2, r3, #31
 800a670:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800a674:	f04f 0901 	mov.w	r9, #1
 800a678:	fa09 f202 	lsl.w	r2, r9, r2
 800a67c:	420a      	tst	r2, r1
 800a67e:	d003      	beq.n	800a688 <__gethex+0x1ac>
 800a680:	454b      	cmp	r3, r9
 800a682:	dc36      	bgt.n	800a6f2 <__gethex+0x216>
 800a684:	f04f 0902 	mov.w	r9, #2
 800a688:	4629      	mov	r1, r5
 800a68a:	4620      	mov	r0, r4
 800a68c:	f7ff febe 	bl	800a40c <rshift>
 800a690:	442f      	add	r7, r5
 800a692:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a696:	42bb      	cmp	r3, r7
 800a698:	da42      	bge.n	800a720 <__gethex+0x244>
 800a69a:	9801      	ldr	r0, [sp, #4]
 800a69c:	4621      	mov	r1, r4
 800a69e:	f7fe f8bb 	bl	8008818 <_Bfree>
 800a6a2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a6a4:	2300      	movs	r3, #0
 800a6a6:	6013      	str	r3, [r2, #0]
 800a6a8:	25a3      	movs	r5, #163	@ 0xa3
 800a6aa:	e793      	b.n	800a5d4 <__gethex+0xf8>
 800a6ac:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800a6b0:	2a2e      	cmp	r2, #46	@ 0x2e
 800a6b2:	d012      	beq.n	800a6da <__gethex+0x1fe>
 800a6b4:	2b20      	cmp	r3, #32
 800a6b6:	d104      	bne.n	800a6c2 <__gethex+0x1e6>
 800a6b8:	f845 bb04 	str.w	fp, [r5], #4
 800a6bc:	f04f 0b00 	mov.w	fp, #0
 800a6c0:	465b      	mov	r3, fp
 800a6c2:	7830      	ldrb	r0, [r6, #0]
 800a6c4:	9303      	str	r3, [sp, #12]
 800a6c6:	f7ff fef3 	bl	800a4b0 <__hexdig_fun>
 800a6ca:	9b03      	ldr	r3, [sp, #12]
 800a6cc:	f000 000f 	and.w	r0, r0, #15
 800a6d0:	4098      	lsls	r0, r3
 800a6d2:	ea4b 0b00 	orr.w	fp, fp, r0
 800a6d6:	3304      	adds	r3, #4
 800a6d8:	e7ae      	b.n	800a638 <__gethex+0x15c>
 800a6da:	45b1      	cmp	r9, r6
 800a6dc:	d8ea      	bhi.n	800a6b4 <__gethex+0x1d8>
 800a6de:	492b      	ldr	r1, [pc, #172]	@ (800a78c <__gethex+0x2b0>)
 800a6e0:	9303      	str	r3, [sp, #12]
 800a6e2:	2201      	movs	r2, #1
 800a6e4:	4630      	mov	r0, r6
 800a6e6:	f7ff fe05 	bl	800a2f4 <strncmp>
 800a6ea:	9b03      	ldr	r3, [sp, #12]
 800a6ec:	2800      	cmp	r0, #0
 800a6ee:	d1e1      	bne.n	800a6b4 <__gethex+0x1d8>
 800a6f0:	e7a2      	b.n	800a638 <__gethex+0x15c>
 800a6f2:	1ea9      	subs	r1, r5, #2
 800a6f4:	4620      	mov	r0, r4
 800a6f6:	f7fe fcd8 	bl	80090aa <__any_on>
 800a6fa:	2800      	cmp	r0, #0
 800a6fc:	d0c2      	beq.n	800a684 <__gethex+0x1a8>
 800a6fe:	f04f 0903 	mov.w	r9, #3
 800a702:	e7c1      	b.n	800a688 <__gethex+0x1ac>
 800a704:	da09      	bge.n	800a71a <__gethex+0x23e>
 800a706:	1b75      	subs	r5, r6, r5
 800a708:	4621      	mov	r1, r4
 800a70a:	9801      	ldr	r0, [sp, #4]
 800a70c:	462a      	mov	r2, r5
 800a70e:	f7fe fa93 	bl	8008c38 <__lshift>
 800a712:	1b7f      	subs	r7, r7, r5
 800a714:	4604      	mov	r4, r0
 800a716:	f100 0a14 	add.w	sl, r0, #20
 800a71a:	f04f 0900 	mov.w	r9, #0
 800a71e:	e7b8      	b.n	800a692 <__gethex+0x1b6>
 800a720:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800a724:	42bd      	cmp	r5, r7
 800a726:	dd6f      	ble.n	800a808 <__gethex+0x32c>
 800a728:	1bed      	subs	r5, r5, r7
 800a72a:	42ae      	cmp	r6, r5
 800a72c:	dc34      	bgt.n	800a798 <__gethex+0x2bc>
 800a72e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800a732:	2b02      	cmp	r3, #2
 800a734:	d022      	beq.n	800a77c <__gethex+0x2a0>
 800a736:	2b03      	cmp	r3, #3
 800a738:	d024      	beq.n	800a784 <__gethex+0x2a8>
 800a73a:	2b01      	cmp	r3, #1
 800a73c:	d115      	bne.n	800a76a <__gethex+0x28e>
 800a73e:	42ae      	cmp	r6, r5
 800a740:	d113      	bne.n	800a76a <__gethex+0x28e>
 800a742:	2e01      	cmp	r6, #1
 800a744:	d10b      	bne.n	800a75e <__gethex+0x282>
 800a746:	9a02      	ldr	r2, [sp, #8]
 800a748:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800a74c:	6013      	str	r3, [r2, #0]
 800a74e:	2301      	movs	r3, #1
 800a750:	6123      	str	r3, [r4, #16]
 800a752:	f8ca 3000 	str.w	r3, [sl]
 800a756:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a758:	2562      	movs	r5, #98	@ 0x62
 800a75a:	601c      	str	r4, [r3, #0]
 800a75c:	e73a      	b.n	800a5d4 <__gethex+0xf8>
 800a75e:	1e71      	subs	r1, r6, #1
 800a760:	4620      	mov	r0, r4
 800a762:	f7fe fca2 	bl	80090aa <__any_on>
 800a766:	2800      	cmp	r0, #0
 800a768:	d1ed      	bne.n	800a746 <__gethex+0x26a>
 800a76a:	9801      	ldr	r0, [sp, #4]
 800a76c:	4621      	mov	r1, r4
 800a76e:	f7fe f853 	bl	8008818 <_Bfree>
 800a772:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a774:	2300      	movs	r3, #0
 800a776:	6013      	str	r3, [r2, #0]
 800a778:	2550      	movs	r5, #80	@ 0x50
 800a77a:	e72b      	b.n	800a5d4 <__gethex+0xf8>
 800a77c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a77e:	2b00      	cmp	r3, #0
 800a780:	d1f3      	bne.n	800a76a <__gethex+0x28e>
 800a782:	e7e0      	b.n	800a746 <__gethex+0x26a>
 800a784:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a786:	2b00      	cmp	r3, #0
 800a788:	d1dd      	bne.n	800a746 <__gethex+0x26a>
 800a78a:	e7ee      	b.n	800a76a <__gethex+0x28e>
 800a78c:	0800b573 	.word	0x0800b573
 800a790:	0800b509 	.word	0x0800b509
 800a794:	0800b5ca 	.word	0x0800b5ca
 800a798:	1e6f      	subs	r7, r5, #1
 800a79a:	f1b9 0f00 	cmp.w	r9, #0
 800a79e:	d130      	bne.n	800a802 <__gethex+0x326>
 800a7a0:	b127      	cbz	r7, 800a7ac <__gethex+0x2d0>
 800a7a2:	4639      	mov	r1, r7
 800a7a4:	4620      	mov	r0, r4
 800a7a6:	f7fe fc80 	bl	80090aa <__any_on>
 800a7aa:	4681      	mov	r9, r0
 800a7ac:	117a      	asrs	r2, r7, #5
 800a7ae:	2301      	movs	r3, #1
 800a7b0:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800a7b4:	f007 071f 	and.w	r7, r7, #31
 800a7b8:	40bb      	lsls	r3, r7
 800a7ba:	4213      	tst	r3, r2
 800a7bc:	4629      	mov	r1, r5
 800a7be:	4620      	mov	r0, r4
 800a7c0:	bf18      	it	ne
 800a7c2:	f049 0902 	orrne.w	r9, r9, #2
 800a7c6:	f7ff fe21 	bl	800a40c <rshift>
 800a7ca:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800a7ce:	1b76      	subs	r6, r6, r5
 800a7d0:	2502      	movs	r5, #2
 800a7d2:	f1b9 0f00 	cmp.w	r9, #0
 800a7d6:	d047      	beq.n	800a868 <__gethex+0x38c>
 800a7d8:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800a7dc:	2b02      	cmp	r3, #2
 800a7de:	d015      	beq.n	800a80c <__gethex+0x330>
 800a7e0:	2b03      	cmp	r3, #3
 800a7e2:	d017      	beq.n	800a814 <__gethex+0x338>
 800a7e4:	2b01      	cmp	r3, #1
 800a7e6:	d109      	bne.n	800a7fc <__gethex+0x320>
 800a7e8:	f019 0f02 	tst.w	r9, #2
 800a7ec:	d006      	beq.n	800a7fc <__gethex+0x320>
 800a7ee:	f8da 3000 	ldr.w	r3, [sl]
 800a7f2:	ea49 0903 	orr.w	r9, r9, r3
 800a7f6:	f019 0f01 	tst.w	r9, #1
 800a7fa:	d10e      	bne.n	800a81a <__gethex+0x33e>
 800a7fc:	f045 0510 	orr.w	r5, r5, #16
 800a800:	e032      	b.n	800a868 <__gethex+0x38c>
 800a802:	f04f 0901 	mov.w	r9, #1
 800a806:	e7d1      	b.n	800a7ac <__gethex+0x2d0>
 800a808:	2501      	movs	r5, #1
 800a80a:	e7e2      	b.n	800a7d2 <__gethex+0x2f6>
 800a80c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a80e:	f1c3 0301 	rsb	r3, r3, #1
 800a812:	930f      	str	r3, [sp, #60]	@ 0x3c
 800a814:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a816:	2b00      	cmp	r3, #0
 800a818:	d0f0      	beq.n	800a7fc <__gethex+0x320>
 800a81a:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800a81e:	f104 0314 	add.w	r3, r4, #20
 800a822:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800a826:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800a82a:	f04f 0c00 	mov.w	ip, #0
 800a82e:	4618      	mov	r0, r3
 800a830:	f853 2b04 	ldr.w	r2, [r3], #4
 800a834:	f1b2 3fff 	cmp.w	r2, #4294967295
 800a838:	d01b      	beq.n	800a872 <__gethex+0x396>
 800a83a:	3201      	adds	r2, #1
 800a83c:	6002      	str	r2, [r0, #0]
 800a83e:	2d02      	cmp	r5, #2
 800a840:	f104 0314 	add.w	r3, r4, #20
 800a844:	d13c      	bne.n	800a8c0 <__gethex+0x3e4>
 800a846:	f8d8 2000 	ldr.w	r2, [r8]
 800a84a:	3a01      	subs	r2, #1
 800a84c:	42b2      	cmp	r2, r6
 800a84e:	d109      	bne.n	800a864 <__gethex+0x388>
 800a850:	1171      	asrs	r1, r6, #5
 800a852:	2201      	movs	r2, #1
 800a854:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800a858:	f006 061f 	and.w	r6, r6, #31
 800a85c:	fa02 f606 	lsl.w	r6, r2, r6
 800a860:	421e      	tst	r6, r3
 800a862:	d13a      	bne.n	800a8da <__gethex+0x3fe>
 800a864:	f045 0520 	orr.w	r5, r5, #32
 800a868:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a86a:	601c      	str	r4, [r3, #0]
 800a86c:	9b02      	ldr	r3, [sp, #8]
 800a86e:	601f      	str	r7, [r3, #0]
 800a870:	e6b0      	b.n	800a5d4 <__gethex+0xf8>
 800a872:	4299      	cmp	r1, r3
 800a874:	f843 cc04 	str.w	ip, [r3, #-4]
 800a878:	d8d9      	bhi.n	800a82e <__gethex+0x352>
 800a87a:	68a3      	ldr	r3, [r4, #8]
 800a87c:	459b      	cmp	fp, r3
 800a87e:	db17      	blt.n	800a8b0 <__gethex+0x3d4>
 800a880:	6861      	ldr	r1, [r4, #4]
 800a882:	9801      	ldr	r0, [sp, #4]
 800a884:	3101      	adds	r1, #1
 800a886:	f7fd ff87 	bl	8008798 <_Balloc>
 800a88a:	4681      	mov	r9, r0
 800a88c:	b918      	cbnz	r0, 800a896 <__gethex+0x3ba>
 800a88e:	4b1a      	ldr	r3, [pc, #104]	@ (800a8f8 <__gethex+0x41c>)
 800a890:	4602      	mov	r2, r0
 800a892:	2184      	movs	r1, #132	@ 0x84
 800a894:	e6c5      	b.n	800a622 <__gethex+0x146>
 800a896:	6922      	ldr	r2, [r4, #16]
 800a898:	3202      	adds	r2, #2
 800a89a:	f104 010c 	add.w	r1, r4, #12
 800a89e:	0092      	lsls	r2, r2, #2
 800a8a0:	300c      	adds	r0, #12
 800a8a2:	f7ff fd6b 	bl	800a37c <memcpy>
 800a8a6:	4621      	mov	r1, r4
 800a8a8:	9801      	ldr	r0, [sp, #4]
 800a8aa:	f7fd ffb5 	bl	8008818 <_Bfree>
 800a8ae:	464c      	mov	r4, r9
 800a8b0:	6923      	ldr	r3, [r4, #16]
 800a8b2:	1c5a      	adds	r2, r3, #1
 800a8b4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800a8b8:	6122      	str	r2, [r4, #16]
 800a8ba:	2201      	movs	r2, #1
 800a8bc:	615a      	str	r2, [r3, #20]
 800a8be:	e7be      	b.n	800a83e <__gethex+0x362>
 800a8c0:	6922      	ldr	r2, [r4, #16]
 800a8c2:	455a      	cmp	r2, fp
 800a8c4:	dd0b      	ble.n	800a8de <__gethex+0x402>
 800a8c6:	2101      	movs	r1, #1
 800a8c8:	4620      	mov	r0, r4
 800a8ca:	f7ff fd9f 	bl	800a40c <rshift>
 800a8ce:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a8d2:	3701      	adds	r7, #1
 800a8d4:	42bb      	cmp	r3, r7
 800a8d6:	f6ff aee0 	blt.w	800a69a <__gethex+0x1be>
 800a8da:	2501      	movs	r5, #1
 800a8dc:	e7c2      	b.n	800a864 <__gethex+0x388>
 800a8de:	f016 061f 	ands.w	r6, r6, #31
 800a8e2:	d0fa      	beq.n	800a8da <__gethex+0x3fe>
 800a8e4:	4453      	add	r3, sl
 800a8e6:	f1c6 0620 	rsb	r6, r6, #32
 800a8ea:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800a8ee:	f7fe f845 	bl	800897c <__hi0bits>
 800a8f2:	42b0      	cmp	r0, r6
 800a8f4:	dbe7      	blt.n	800a8c6 <__gethex+0x3ea>
 800a8f6:	e7f0      	b.n	800a8da <__gethex+0x3fe>
 800a8f8:	0800b509 	.word	0x0800b509

0800a8fc <L_shift>:
 800a8fc:	f1c2 0208 	rsb	r2, r2, #8
 800a900:	0092      	lsls	r2, r2, #2
 800a902:	b570      	push	{r4, r5, r6, lr}
 800a904:	f1c2 0620 	rsb	r6, r2, #32
 800a908:	6843      	ldr	r3, [r0, #4]
 800a90a:	6804      	ldr	r4, [r0, #0]
 800a90c:	fa03 f506 	lsl.w	r5, r3, r6
 800a910:	432c      	orrs	r4, r5
 800a912:	40d3      	lsrs	r3, r2
 800a914:	6004      	str	r4, [r0, #0]
 800a916:	f840 3f04 	str.w	r3, [r0, #4]!
 800a91a:	4288      	cmp	r0, r1
 800a91c:	d3f4      	bcc.n	800a908 <L_shift+0xc>
 800a91e:	bd70      	pop	{r4, r5, r6, pc}

0800a920 <__match>:
 800a920:	b530      	push	{r4, r5, lr}
 800a922:	6803      	ldr	r3, [r0, #0]
 800a924:	3301      	adds	r3, #1
 800a926:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a92a:	b914      	cbnz	r4, 800a932 <__match+0x12>
 800a92c:	6003      	str	r3, [r0, #0]
 800a92e:	2001      	movs	r0, #1
 800a930:	bd30      	pop	{r4, r5, pc}
 800a932:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a936:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800a93a:	2d19      	cmp	r5, #25
 800a93c:	bf98      	it	ls
 800a93e:	3220      	addls	r2, #32
 800a940:	42a2      	cmp	r2, r4
 800a942:	d0f0      	beq.n	800a926 <__match+0x6>
 800a944:	2000      	movs	r0, #0
 800a946:	e7f3      	b.n	800a930 <__match+0x10>

0800a948 <__hexnan>:
 800a948:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a94c:	680b      	ldr	r3, [r1, #0]
 800a94e:	6801      	ldr	r1, [r0, #0]
 800a950:	115e      	asrs	r6, r3, #5
 800a952:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800a956:	f013 031f 	ands.w	r3, r3, #31
 800a95a:	b087      	sub	sp, #28
 800a95c:	bf18      	it	ne
 800a95e:	3604      	addne	r6, #4
 800a960:	2500      	movs	r5, #0
 800a962:	1f37      	subs	r7, r6, #4
 800a964:	4682      	mov	sl, r0
 800a966:	4690      	mov	r8, r2
 800a968:	9301      	str	r3, [sp, #4]
 800a96a:	f846 5c04 	str.w	r5, [r6, #-4]
 800a96e:	46b9      	mov	r9, r7
 800a970:	463c      	mov	r4, r7
 800a972:	9502      	str	r5, [sp, #8]
 800a974:	46ab      	mov	fp, r5
 800a976:	784a      	ldrb	r2, [r1, #1]
 800a978:	1c4b      	adds	r3, r1, #1
 800a97a:	9303      	str	r3, [sp, #12]
 800a97c:	b342      	cbz	r2, 800a9d0 <__hexnan+0x88>
 800a97e:	4610      	mov	r0, r2
 800a980:	9105      	str	r1, [sp, #20]
 800a982:	9204      	str	r2, [sp, #16]
 800a984:	f7ff fd94 	bl	800a4b0 <__hexdig_fun>
 800a988:	2800      	cmp	r0, #0
 800a98a:	d151      	bne.n	800aa30 <__hexnan+0xe8>
 800a98c:	9a04      	ldr	r2, [sp, #16]
 800a98e:	9905      	ldr	r1, [sp, #20]
 800a990:	2a20      	cmp	r2, #32
 800a992:	d818      	bhi.n	800a9c6 <__hexnan+0x7e>
 800a994:	9b02      	ldr	r3, [sp, #8]
 800a996:	459b      	cmp	fp, r3
 800a998:	dd13      	ble.n	800a9c2 <__hexnan+0x7a>
 800a99a:	454c      	cmp	r4, r9
 800a99c:	d206      	bcs.n	800a9ac <__hexnan+0x64>
 800a99e:	2d07      	cmp	r5, #7
 800a9a0:	dc04      	bgt.n	800a9ac <__hexnan+0x64>
 800a9a2:	462a      	mov	r2, r5
 800a9a4:	4649      	mov	r1, r9
 800a9a6:	4620      	mov	r0, r4
 800a9a8:	f7ff ffa8 	bl	800a8fc <L_shift>
 800a9ac:	4544      	cmp	r4, r8
 800a9ae:	d952      	bls.n	800aa56 <__hexnan+0x10e>
 800a9b0:	2300      	movs	r3, #0
 800a9b2:	f1a4 0904 	sub.w	r9, r4, #4
 800a9b6:	f844 3c04 	str.w	r3, [r4, #-4]
 800a9ba:	f8cd b008 	str.w	fp, [sp, #8]
 800a9be:	464c      	mov	r4, r9
 800a9c0:	461d      	mov	r5, r3
 800a9c2:	9903      	ldr	r1, [sp, #12]
 800a9c4:	e7d7      	b.n	800a976 <__hexnan+0x2e>
 800a9c6:	2a29      	cmp	r2, #41	@ 0x29
 800a9c8:	d157      	bne.n	800aa7a <__hexnan+0x132>
 800a9ca:	3102      	adds	r1, #2
 800a9cc:	f8ca 1000 	str.w	r1, [sl]
 800a9d0:	f1bb 0f00 	cmp.w	fp, #0
 800a9d4:	d051      	beq.n	800aa7a <__hexnan+0x132>
 800a9d6:	454c      	cmp	r4, r9
 800a9d8:	d206      	bcs.n	800a9e8 <__hexnan+0xa0>
 800a9da:	2d07      	cmp	r5, #7
 800a9dc:	dc04      	bgt.n	800a9e8 <__hexnan+0xa0>
 800a9de:	462a      	mov	r2, r5
 800a9e0:	4649      	mov	r1, r9
 800a9e2:	4620      	mov	r0, r4
 800a9e4:	f7ff ff8a 	bl	800a8fc <L_shift>
 800a9e8:	4544      	cmp	r4, r8
 800a9ea:	d936      	bls.n	800aa5a <__hexnan+0x112>
 800a9ec:	f1a8 0204 	sub.w	r2, r8, #4
 800a9f0:	4623      	mov	r3, r4
 800a9f2:	f853 1b04 	ldr.w	r1, [r3], #4
 800a9f6:	f842 1f04 	str.w	r1, [r2, #4]!
 800a9fa:	429f      	cmp	r7, r3
 800a9fc:	d2f9      	bcs.n	800a9f2 <__hexnan+0xaa>
 800a9fe:	1b3b      	subs	r3, r7, r4
 800aa00:	f023 0303 	bic.w	r3, r3, #3
 800aa04:	3304      	adds	r3, #4
 800aa06:	3401      	adds	r4, #1
 800aa08:	3e03      	subs	r6, #3
 800aa0a:	42b4      	cmp	r4, r6
 800aa0c:	bf88      	it	hi
 800aa0e:	2304      	movhi	r3, #4
 800aa10:	4443      	add	r3, r8
 800aa12:	2200      	movs	r2, #0
 800aa14:	f843 2b04 	str.w	r2, [r3], #4
 800aa18:	429f      	cmp	r7, r3
 800aa1a:	d2fb      	bcs.n	800aa14 <__hexnan+0xcc>
 800aa1c:	683b      	ldr	r3, [r7, #0]
 800aa1e:	b91b      	cbnz	r3, 800aa28 <__hexnan+0xe0>
 800aa20:	4547      	cmp	r7, r8
 800aa22:	d128      	bne.n	800aa76 <__hexnan+0x12e>
 800aa24:	2301      	movs	r3, #1
 800aa26:	603b      	str	r3, [r7, #0]
 800aa28:	2005      	movs	r0, #5
 800aa2a:	b007      	add	sp, #28
 800aa2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aa30:	3501      	adds	r5, #1
 800aa32:	2d08      	cmp	r5, #8
 800aa34:	f10b 0b01 	add.w	fp, fp, #1
 800aa38:	dd06      	ble.n	800aa48 <__hexnan+0x100>
 800aa3a:	4544      	cmp	r4, r8
 800aa3c:	d9c1      	bls.n	800a9c2 <__hexnan+0x7a>
 800aa3e:	2300      	movs	r3, #0
 800aa40:	f844 3c04 	str.w	r3, [r4, #-4]
 800aa44:	2501      	movs	r5, #1
 800aa46:	3c04      	subs	r4, #4
 800aa48:	6822      	ldr	r2, [r4, #0]
 800aa4a:	f000 000f 	and.w	r0, r0, #15
 800aa4e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800aa52:	6020      	str	r0, [r4, #0]
 800aa54:	e7b5      	b.n	800a9c2 <__hexnan+0x7a>
 800aa56:	2508      	movs	r5, #8
 800aa58:	e7b3      	b.n	800a9c2 <__hexnan+0x7a>
 800aa5a:	9b01      	ldr	r3, [sp, #4]
 800aa5c:	2b00      	cmp	r3, #0
 800aa5e:	d0dd      	beq.n	800aa1c <__hexnan+0xd4>
 800aa60:	f1c3 0320 	rsb	r3, r3, #32
 800aa64:	f04f 32ff 	mov.w	r2, #4294967295
 800aa68:	40da      	lsrs	r2, r3
 800aa6a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800aa6e:	4013      	ands	r3, r2
 800aa70:	f846 3c04 	str.w	r3, [r6, #-4]
 800aa74:	e7d2      	b.n	800aa1c <__hexnan+0xd4>
 800aa76:	3f04      	subs	r7, #4
 800aa78:	e7d0      	b.n	800aa1c <__hexnan+0xd4>
 800aa7a:	2004      	movs	r0, #4
 800aa7c:	e7d5      	b.n	800aa2a <__hexnan+0xe2>

0800aa7e <__ascii_mbtowc>:
 800aa7e:	b082      	sub	sp, #8
 800aa80:	b901      	cbnz	r1, 800aa84 <__ascii_mbtowc+0x6>
 800aa82:	a901      	add	r1, sp, #4
 800aa84:	b142      	cbz	r2, 800aa98 <__ascii_mbtowc+0x1a>
 800aa86:	b14b      	cbz	r3, 800aa9c <__ascii_mbtowc+0x1e>
 800aa88:	7813      	ldrb	r3, [r2, #0]
 800aa8a:	600b      	str	r3, [r1, #0]
 800aa8c:	7812      	ldrb	r2, [r2, #0]
 800aa8e:	1e10      	subs	r0, r2, #0
 800aa90:	bf18      	it	ne
 800aa92:	2001      	movne	r0, #1
 800aa94:	b002      	add	sp, #8
 800aa96:	4770      	bx	lr
 800aa98:	4610      	mov	r0, r2
 800aa9a:	e7fb      	b.n	800aa94 <__ascii_mbtowc+0x16>
 800aa9c:	f06f 0001 	mvn.w	r0, #1
 800aaa0:	e7f8      	b.n	800aa94 <__ascii_mbtowc+0x16>

0800aaa2 <_realloc_r>:
 800aaa2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aaa6:	4607      	mov	r7, r0
 800aaa8:	4614      	mov	r4, r2
 800aaaa:	460d      	mov	r5, r1
 800aaac:	b921      	cbnz	r1, 800aab8 <_realloc_r+0x16>
 800aaae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800aab2:	4611      	mov	r1, r2
 800aab4:	f7fd bde4 	b.w	8008680 <_malloc_r>
 800aab8:	b92a      	cbnz	r2, 800aac6 <_realloc_r+0x24>
 800aaba:	f7fd fd6d 	bl	8008598 <_free_r>
 800aabe:	4625      	mov	r5, r4
 800aac0:	4628      	mov	r0, r5
 800aac2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aac6:	f000 f840 	bl	800ab4a <_malloc_usable_size_r>
 800aaca:	4284      	cmp	r4, r0
 800aacc:	4606      	mov	r6, r0
 800aace:	d802      	bhi.n	800aad6 <_realloc_r+0x34>
 800aad0:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800aad4:	d8f4      	bhi.n	800aac0 <_realloc_r+0x1e>
 800aad6:	4621      	mov	r1, r4
 800aad8:	4638      	mov	r0, r7
 800aada:	f7fd fdd1 	bl	8008680 <_malloc_r>
 800aade:	4680      	mov	r8, r0
 800aae0:	b908      	cbnz	r0, 800aae6 <_realloc_r+0x44>
 800aae2:	4645      	mov	r5, r8
 800aae4:	e7ec      	b.n	800aac0 <_realloc_r+0x1e>
 800aae6:	42b4      	cmp	r4, r6
 800aae8:	4622      	mov	r2, r4
 800aaea:	4629      	mov	r1, r5
 800aaec:	bf28      	it	cs
 800aaee:	4632      	movcs	r2, r6
 800aaf0:	f7ff fc44 	bl	800a37c <memcpy>
 800aaf4:	4629      	mov	r1, r5
 800aaf6:	4638      	mov	r0, r7
 800aaf8:	f7fd fd4e 	bl	8008598 <_free_r>
 800aafc:	e7f1      	b.n	800aae2 <_realloc_r+0x40>

0800aafe <__ascii_wctomb>:
 800aafe:	4603      	mov	r3, r0
 800ab00:	4608      	mov	r0, r1
 800ab02:	b141      	cbz	r1, 800ab16 <__ascii_wctomb+0x18>
 800ab04:	2aff      	cmp	r2, #255	@ 0xff
 800ab06:	d904      	bls.n	800ab12 <__ascii_wctomb+0x14>
 800ab08:	228a      	movs	r2, #138	@ 0x8a
 800ab0a:	601a      	str	r2, [r3, #0]
 800ab0c:	f04f 30ff 	mov.w	r0, #4294967295
 800ab10:	4770      	bx	lr
 800ab12:	700a      	strb	r2, [r1, #0]
 800ab14:	2001      	movs	r0, #1
 800ab16:	4770      	bx	lr

0800ab18 <fiprintf>:
 800ab18:	b40e      	push	{r1, r2, r3}
 800ab1a:	b503      	push	{r0, r1, lr}
 800ab1c:	4601      	mov	r1, r0
 800ab1e:	ab03      	add	r3, sp, #12
 800ab20:	4805      	ldr	r0, [pc, #20]	@ (800ab38 <fiprintf+0x20>)
 800ab22:	f853 2b04 	ldr.w	r2, [r3], #4
 800ab26:	6800      	ldr	r0, [r0, #0]
 800ab28:	9301      	str	r3, [sp, #4]
 800ab2a:	f000 f83f 	bl	800abac <_vfiprintf_r>
 800ab2e:	b002      	add	sp, #8
 800ab30:	f85d eb04 	ldr.w	lr, [sp], #4
 800ab34:	b003      	add	sp, #12
 800ab36:	4770      	bx	lr
 800ab38:	20000a58 	.word	0x20000a58

0800ab3c <abort>:
 800ab3c:	b508      	push	{r3, lr}
 800ab3e:	2006      	movs	r0, #6
 800ab40:	f000 f974 	bl	800ae2c <raise>
 800ab44:	2001      	movs	r0, #1
 800ab46:	f7f7 ff89 	bl	8002a5c <_exit>

0800ab4a <_malloc_usable_size_r>:
 800ab4a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ab4e:	1f18      	subs	r0, r3, #4
 800ab50:	2b00      	cmp	r3, #0
 800ab52:	bfbc      	itt	lt
 800ab54:	580b      	ldrlt	r3, [r1, r0]
 800ab56:	18c0      	addlt	r0, r0, r3
 800ab58:	4770      	bx	lr

0800ab5a <__sfputc_r>:
 800ab5a:	6893      	ldr	r3, [r2, #8]
 800ab5c:	3b01      	subs	r3, #1
 800ab5e:	2b00      	cmp	r3, #0
 800ab60:	b410      	push	{r4}
 800ab62:	6093      	str	r3, [r2, #8]
 800ab64:	da08      	bge.n	800ab78 <__sfputc_r+0x1e>
 800ab66:	6994      	ldr	r4, [r2, #24]
 800ab68:	42a3      	cmp	r3, r4
 800ab6a:	db01      	blt.n	800ab70 <__sfputc_r+0x16>
 800ab6c:	290a      	cmp	r1, #10
 800ab6e:	d103      	bne.n	800ab78 <__sfputc_r+0x1e>
 800ab70:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ab74:	f7fc bd9b 	b.w	80076ae <__swbuf_r>
 800ab78:	6813      	ldr	r3, [r2, #0]
 800ab7a:	1c58      	adds	r0, r3, #1
 800ab7c:	6010      	str	r0, [r2, #0]
 800ab7e:	7019      	strb	r1, [r3, #0]
 800ab80:	4608      	mov	r0, r1
 800ab82:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ab86:	4770      	bx	lr

0800ab88 <__sfputs_r>:
 800ab88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ab8a:	4606      	mov	r6, r0
 800ab8c:	460f      	mov	r7, r1
 800ab8e:	4614      	mov	r4, r2
 800ab90:	18d5      	adds	r5, r2, r3
 800ab92:	42ac      	cmp	r4, r5
 800ab94:	d101      	bne.n	800ab9a <__sfputs_r+0x12>
 800ab96:	2000      	movs	r0, #0
 800ab98:	e007      	b.n	800abaa <__sfputs_r+0x22>
 800ab9a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ab9e:	463a      	mov	r2, r7
 800aba0:	4630      	mov	r0, r6
 800aba2:	f7ff ffda 	bl	800ab5a <__sfputc_r>
 800aba6:	1c43      	adds	r3, r0, #1
 800aba8:	d1f3      	bne.n	800ab92 <__sfputs_r+0xa>
 800abaa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800abac <_vfiprintf_r>:
 800abac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800abb0:	460d      	mov	r5, r1
 800abb2:	b09d      	sub	sp, #116	@ 0x74
 800abb4:	4614      	mov	r4, r2
 800abb6:	4698      	mov	r8, r3
 800abb8:	4606      	mov	r6, r0
 800abba:	b118      	cbz	r0, 800abc4 <_vfiprintf_r+0x18>
 800abbc:	6a03      	ldr	r3, [r0, #32]
 800abbe:	b90b      	cbnz	r3, 800abc4 <_vfiprintf_r+0x18>
 800abc0:	f7fc fc7c 	bl	80074bc <__sinit>
 800abc4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800abc6:	07d9      	lsls	r1, r3, #31
 800abc8:	d405      	bmi.n	800abd6 <_vfiprintf_r+0x2a>
 800abca:	89ab      	ldrh	r3, [r5, #12]
 800abcc:	059a      	lsls	r2, r3, #22
 800abce:	d402      	bmi.n	800abd6 <_vfiprintf_r+0x2a>
 800abd0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800abd2:	f7fc fe7e 	bl	80078d2 <__retarget_lock_acquire_recursive>
 800abd6:	89ab      	ldrh	r3, [r5, #12]
 800abd8:	071b      	lsls	r3, r3, #28
 800abda:	d501      	bpl.n	800abe0 <_vfiprintf_r+0x34>
 800abdc:	692b      	ldr	r3, [r5, #16]
 800abde:	b99b      	cbnz	r3, 800ac08 <_vfiprintf_r+0x5c>
 800abe0:	4629      	mov	r1, r5
 800abe2:	4630      	mov	r0, r6
 800abe4:	f7fc fda2 	bl	800772c <__swsetup_r>
 800abe8:	b170      	cbz	r0, 800ac08 <_vfiprintf_r+0x5c>
 800abea:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800abec:	07dc      	lsls	r4, r3, #31
 800abee:	d504      	bpl.n	800abfa <_vfiprintf_r+0x4e>
 800abf0:	f04f 30ff 	mov.w	r0, #4294967295
 800abf4:	b01d      	add	sp, #116	@ 0x74
 800abf6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800abfa:	89ab      	ldrh	r3, [r5, #12]
 800abfc:	0598      	lsls	r0, r3, #22
 800abfe:	d4f7      	bmi.n	800abf0 <_vfiprintf_r+0x44>
 800ac00:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ac02:	f7fc fe67 	bl	80078d4 <__retarget_lock_release_recursive>
 800ac06:	e7f3      	b.n	800abf0 <_vfiprintf_r+0x44>
 800ac08:	2300      	movs	r3, #0
 800ac0a:	9309      	str	r3, [sp, #36]	@ 0x24
 800ac0c:	2320      	movs	r3, #32
 800ac0e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800ac12:	f8cd 800c 	str.w	r8, [sp, #12]
 800ac16:	2330      	movs	r3, #48	@ 0x30
 800ac18:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800adc8 <_vfiprintf_r+0x21c>
 800ac1c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800ac20:	f04f 0901 	mov.w	r9, #1
 800ac24:	4623      	mov	r3, r4
 800ac26:	469a      	mov	sl, r3
 800ac28:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ac2c:	b10a      	cbz	r2, 800ac32 <_vfiprintf_r+0x86>
 800ac2e:	2a25      	cmp	r2, #37	@ 0x25
 800ac30:	d1f9      	bne.n	800ac26 <_vfiprintf_r+0x7a>
 800ac32:	ebba 0b04 	subs.w	fp, sl, r4
 800ac36:	d00b      	beq.n	800ac50 <_vfiprintf_r+0xa4>
 800ac38:	465b      	mov	r3, fp
 800ac3a:	4622      	mov	r2, r4
 800ac3c:	4629      	mov	r1, r5
 800ac3e:	4630      	mov	r0, r6
 800ac40:	f7ff ffa2 	bl	800ab88 <__sfputs_r>
 800ac44:	3001      	adds	r0, #1
 800ac46:	f000 80a7 	beq.w	800ad98 <_vfiprintf_r+0x1ec>
 800ac4a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ac4c:	445a      	add	r2, fp
 800ac4e:	9209      	str	r2, [sp, #36]	@ 0x24
 800ac50:	f89a 3000 	ldrb.w	r3, [sl]
 800ac54:	2b00      	cmp	r3, #0
 800ac56:	f000 809f 	beq.w	800ad98 <_vfiprintf_r+0x1ec>
 800ac5a:	2300      	movs	r3, #0
 800ac5c:	f04f 32ff 	mov.w	r2, #4294967295
 800ac60:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ac64:	f10a 0a01 	add.w	sl, sl, #1
 800ac68:	9304      	str	r3, [sp, #16]
 800ac6a:	9307      	str	r3, [sp, #28]
 800ac6c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800ac70:	931a      	str	r3, [sp, #104]	@ 0x68
 800ac72:	4654      	mov	r4, sl
 800ac74:	2205      	movs	r2, #5
 800ac76:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ac7a:	4853      	ldr	r0, [pc, #332]	@ (800adc8 <_vfiprintf_r+0x21c>)
 800ac7c:	f7f5 faa8 	bl	80001d0 <memchr>
 800ac80:	9a04      	ldr	r2, [sp, #16]
 800ac82:	b9d8      	cbnz	r0, 800acbc <_vfiprintf_r+0x110>
 800ac84:	06d1      	lsls	r1, r2, #27
 800ac86:	bf44      	itt	mi
 800ac88:	2320      	movmi	r3, #32
 800ac8a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ac8e:	0713      	lsls	r3, r2, #28
 800ac90:	bf44      	itt	mi
 800ac92:	232b      	movmi	r3, #43	@ 0x2b
 800ac94:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ac98:	f89a 3000 	ldrb.w	r3, [sl]
 800ac9c:	2b2a      	cmp	r3, #42	@ 0x2a
 800ac9e:	d015      	beq.n	800accc <_vfiprintf_r+0x120>
 800aca0:	9a07      	ldr	r2, [sp, #28]
 800aca2:	4654      	mov	r4, sl
 800aca4:	2000      	movs	r0, #0
 800aca6:	f04f 0c0a 	mov.w	ip, #10
 800acaa:	4621      	mov	r1, r4
 800acac:	f811 3b01 	ldrb.w	r3, [r1], #1
 800acb0:	3b30      	subs	r3, #48	@ 0x30
 800acb2:	2b09      	cmp	r3, #9
 800acb4:	d94b      	bls.n	800ad4e <_vfiprintf_r+0x1a2>
 800acb6:	b1b0      	cbz	r0, 800ace6 <_vfiprintf_r+0x13a>
 800acb8:	9207      	str	r2, [sp, #28]
 800acba:	e014      	b.n	800ace6 <_vfiprintf_r+0x13a>
 800acbc:	eba0 0308 	sub.w	r3, r0, r8
 800acc0:	fa09 f303 	lsl.w	r3, r9, r3
 800acc4:	4313      	orrs	r3, r2
 800acc6:	9304      	str	r3, [sp, #16]
 800acc8:	46a2      	mov	sl, r4
 800acca:	e7d2      	b.n	800ac72 <_vfiprintf_r+0xc6>
 800accc:	9b03      	ldr	r3, [sp, #12]
 800acce:	1d19      	adds	r1, r3, #4
 800acd0:	681b      	ldr	r3, [r3, #0]
 800acd2:	9103      	str	r1, [sp, #12]
 800acd4:	2b00      	cmp	r3, #0
 800acd6:	bfbb      	ittet	lt
 800acd8:	425b      	neglt	r3, r3
 800acda:	f042 0202 	orrlt.w	r2, r2, #2
 800acde:	9307      	strge	r3, [sp, #28]
 800ace0:	9307      	strlt	r3, [sp, #28]
 800ace2:	bfb8      	it	lt
 800ace4:	9204      	strlt	r2, [sp, #16]
 800ace6:	7823      	ldrb	r3, [r4, #0]
 800ace8:	2b2e      	cmp	r3, #46	@ 0x2e
 800acea:	d10a      	bne.n	800ad02 <_vfiprintf_r+0x156>
 800acec:	7863      	ldrb	r3, [r4, #1]
 800acee:	2b2a      	cmp	r3, #42	@ 0x2a
 800acf0:	d132      	bne.n	800ad58 <_vfiprintf_r+0x1ac>
 800acf2:	9b03      	ldr	r3, [sp, #12]
 800acf4:	1d1a      	adds	r2, r3, #4
 800acf6:	681b      	ldr	r3, [r3, #0]
 800acf8:	9203      	str	r2, [sp, #12]
 800acfa:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800acfe:	3402      	adds	r4, #2
 800ad00:	9305      	str	r3, [sp, #20]
 800ad02:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800add8 <_vfiprintf_r+0x22c>
 800ad06:	7821      	ldrb	r1, [r4, #0]
 800ad08:	2203      	movs	r2, #3
 800ad0a:	4650      	mov	r0, sl
 800ad0c:	f7f5 fa60 	bl	80001d0 <memchr>
 800ad10:	b138      	cbz	r0, 800ad22 <_vfiprintf_r+0x176>
 800ad12:	9b04      	ldr	r3, [sp, #16]
 800ad14:	eba0 000a 	sub.w	r0, r0, sl
 800ad18:	2240      	movs	r2, #64	@ 0x40
 800ad1a:	4082      	lsls	r2, r0
 800ad1c:	4313      	orrs	r3, r2
 800ad1e:	3401      	adds	r4, #1
 800ad20:	9304      	str	r3, [sp, #16]
 800ad22:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ad26:	4829      	ldr	r0, [pc, #164]	@ (800adcc <_vfiprintf_r+0x220>)
 800ad28:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800ad2c:	2206      	movs	r2, #6
 800ad2e:	f7f5 fa4f 	bl	80001d0 <memchr>
 800ad32:	2800      	cmp	r0, #0
 800ad34:	d03f      	beq.n	800adb6 <_vfiprintf_r+0x20a>
 800ad36:	4b26      	ldr	r3, [pc, #152]	@ (800add0 <_vfiprintf_r+0x224>)
 800ad38:	bb1b      	cbnz	r3, 800ad82 <_vfiprintf_r+0x1d6>
 800ad3a:	9b03      	ldr	r3, [sp, #12]
 800ad3c:	3307      	adds	r3, #7
 800ad3e:	f023 0307 	bic.w	r3, r3, #7
 800ad42:	3308      	adds	r3, #8
 800ad44:	9303      	str	r3, [sp, #12]
 800ad46:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ad48:	443b      	add	r3, r7
 800ad4a:	9309      	str	r3, [sp, #36]	@ 0x24
 800ad4c:	e76a      	b.n	800ac24 <_vfiprintf_r+0x78>
 800ad4e:	fb0c 3202 	mla	r2, ip, r2, r3
 800ad52:	460c      	mov	r4, r1
 800ad54:	2001      	movs	r0, #1
 800ad56:	e7a8      	b.n	800acaa <_vfiprintf_r+0xfe>
 800ad58:	2300      	movs	r3, #0
 800ad5a:	3401      	adds	r4, #1
 800ad5c:	9305      	str	r3, [sp, #20]
 800ad5e:	4619      	mov	r1, r3
 800ad60:	f04f 0c0a 	mov.w	ip, #10
 800ad64:	4620      	mov	r0, r4
 800ad66:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ad6a:	3a30      	subs	r2, #48	@ 0x30
 800ad6c:	2a09      	cmp	r2, #9
 800ad6e:	d903      	bls.n	800ad78 <_vfiprintf_r+0x1cc>
 800ad70:	2b00      	cmp	r3, #0
 800ad72:	d0c6      	beq.n	800ad02 <_vfiprintf_r+0x156>
 800ad74:	9105      	str	r1, [sp, #20]
 800ad76:	e7c4      	b.n	800ad02 <_vfiprintf_r+0x156>
 800ad78:	fb0c 2101 	mla	r1, ip, r1, r2
 800ad7c:	4604      	mov	r4, r0
 800ad7e:	2301      	movs	r3, #1
 800ad80:	e7f0      	b.n	800ad64 <_vfiprintf_r+0x1b8>
 800ad82:	ab03      	add	r3, sp, #12
 800ad84:	9300      	str	r3, [sp, #0]
 800ad86:	462a      	mov	r2, r5
 800ad88:	4b12      	ldr	r3, [pc, #72]	@ (800add4 <_vfiprintf_r+0x228>)
 800ad8a:	a904      	add	r1, sp, #16
 800ad8c:	4630      	mov	r0, r6
 800ad8e:	f7fb fd45 	bl	800681c <_printf_float>
 800ad92:	4607      	mov	r7, r0
 800ad94:	1c78      	adds	r0, r7, #1
 800ad96:	d1d6      	bne.n	800ad46 <_vfiprintf_r+0x19a>
 800ad98:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ad9a:	07d9      	lsls	r1, r3, #31
 800ad9c:	d405      	bmi.n	800adaa <_vfiprintf_r+0x1fe>
 800ad9e:	89ab      	ldrh	r3, [r5, #12]
 800ada0:	059a      	lsls	r2, r3, #22
 800ada2:	d402      	bmi.n	800adaa <_vfiprintf_r+0x1fe>
 800ada4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ada6:	f7fc fd95 	bl	80078d4 <__retarget_lock_release_recursive>
 800adaa:	89ab      	ldrh	r3, [r5, #12]
 800adac:	065b      	lsls	r3, r3, #25
 800adae:	f53f af1f 	bmi.w	800abf0 <_vfiprintf_r+0x44>
 800adb2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800adb4:	e71e      	b.n	800abf4 <_vfiprintf_r+0x48>
 800adb6:	ab03      	add	r3, sp, #12
 800adb8:	9300      	str	r3, [sp, #0]
 800adba:	462a      	mov	r2, r5
 800adbc:	4b05      	ldr	r3, [pc, #20]	@ (800add4 <_vfiprintf_r+0x228>)
 800adbe:	a904      	add	r1, sp, #16
 800adc0:	4630      	mov	r0, r6
 800adc2:	f7fb ffc3 	bl	8006d4c <_printf_i>
 800adc6:	e7e4      	b.n	800ad92 <_vfiprintf_r+0x1e6>
 800adc8:	0800b575 	.word	0x0800b575
 800adcc:	0800b57f 	.word	0x0800b57f
 800add0:	0800681d 	.word	0x0800681d
 800add4:	0800ab89 	.word	0x0800ab89
 800add8:	0800b57b 	.word	0x0800b57b

0800addc <_raise_r>:
 800addc:	291f      	cmp	r1, #31
 800adde:	b538      	push	{r3, r4, r5, lr}
 800ade0:	4605      	mov	r5, r0
 800ade2:	460c      	mov	r4, r1
 800ade4:	d904      	bls.n	800adf0 <_raise_r+0x14>
 800ade6:	2316      	movs	r3, #22
 800ade8:	6003      	str	r3, [r0, #0]
 800adea:	f04f 30ff 	mov.w	r0, #4294967295
 800adee:	bd38      	pop	{r3, r4, r5, pc}
 800adf0:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800adf2:	b112      	cbz	r2, 800adfa <_raise_r+0x1e>
 800adf4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800adf8:	b94b      	cbnz	r3, 800ae0e <_raise_r+0x32>
 800adfa:	4628      	mov	r0, r5
 800adfc:	f000 f830 	bl	800ae60 <_getpid_r>
 800ae00:	4622      	mov	r2, r4
 800ae02:	4601      	mov	r1, r0
 800ae04:	4628      	mov	r0, r5
 800ae06:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ae0a:	f000 b817 	b.w	800ae3c <_kill_r>
 800ae0e:	2b01      	cmp	r3, #1
 800ae10:	d00a      	beq.n	800ae28 <_raise_r+0x4c>
 800ae12:	1c59      	adds	r1, r3, #1
 800ae14:	d103      	bne.n	800ae1e <_raise_r+0x42>
 800ae16:	2316      	movs	r3, #22
 800ae18:	6003      	str	r3, [r0, #0]
 800ae1a:	2001      	movs	r0, #1
 800ae1c:	e7e7      	b.n	800adee <_raise_r+0x12>
 800ae1e:	2100      	movs	r1, #0
 800ae20:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800ae24:	4620      	mov	r0, r4
 800ae26:	4798      	blx	r3
 800ae28:	2000      	movs	r0, #0
 800ae2a:	e7e0      	b.n	800adee <_raise_r+0x12>

0800ae2c <raise>:
 800ae2c:	4b02      	ldr	r3, [pc, #8]	@ (800ae38 <raise+0xc>)
 800ae2e:	4601      	mov	r1, r0
 800ae30:	6818      	ldr	r0, [r3, #0]
 800ae32:	f7ff bfd3 	b.w	800addc <_raise_r>
 800ae36:	bf00      	nop
 800ae38:	20000a58 	.word	0x20000a58

0800ae3c <_kill_r>:
 800ae3c:	b538      	push	{r3, r4, r5, lr}
 800ae3e:	4d07      	ldr	r5, [pc, #28]	@ (800ae5c <_kill_r+0x20>)
 800ae40:	2300      	movs	r3, #0
 800ae42:	4604      	mov	r4, r0
 800ae44:	4608      	mov	r0, r1
 800ae46:	4611      	mov	r1, r2
 800ae48:	602b      	str	r3, [r5, #0]
 800ae4a:	f7f7 fdf7 	bl	8002a3c <_kill>
 800ae4e:	1c43      	adds	r3, r0, #1
 800ae50:	d102      	bne.n	800ae58 <_kill_r+0x1c>
 800ae52:	682b      	ldr	r3, [r5, #0]
 800ae54:	b103      	cbz	r3, 800ae58 <_kill_r+0x1c>
 800ae56:	6023      	str	r3, [r4, #0]
 800ae58:	bd38      	pop	{r3, r4, r5, pc}
 800ae5a:	bf00      	nop
 800ae5c:	20001608 	.word	0x20001608

0800ae60 <_getpid_r>:
 800ae60:	f7f7 bde4 	b.w	8002a2c <_getpid>
 800ae64:	0000      	movs	r0, r0
	...

0800ae68 <log10>:
 800ae68:	b538      	push	{r3, r4, r5, lr}
 800ae6a:	ed2d 8b02 	vpush	{d8}
 800ae6e:	ec55 4b10 	vmov	r4, r5, d0
 800ae72:	f000 f839 	bl	800aee8 <__ieee754_log10>
 800ae76:	4622      	mov	r2, r4
 800ae78:	462b      	mov	r3, r5
 800ae7a:	4620      	mov	r0, r4
 800ae7c:	4629      	mov	r1, r5
 800ae7e:	eeb0 8a40 	vmov.f32	s16, s0
 800ae82:	eef0 8a60 	vmov.f32	s17, s1
 800ae86:	f7f5 fe51 	bl	8000b2c <__aeabi_dcmpun>
 800ae8a:	b998      	cbnz	r0, 800aeb4 <log10+0x4c>
 800ae8c:	2200      	movs	r2, #0
 800ae8e:	2300      	movs	r3, #0
 800ae90:	4620      	mov	r0, r4
 800ae92:	4629      	mov	r1, r5
 800ae94:	f7f5 fe2c 	bl	8000af0 <__aeabi_dcmple>
 800ae98:	b160      	cbz	r0, 800aeb4 <log10+0x4c>
 800ae9a:	2200      	movs	r2, #0
 800ae9c:	2300      	movs	r3, #0
 800ae9e:	4620      	mov	r0, r4
 800aea0:	4629      	mov	r1, r5
 800aea2:	f7f5 fe11 	bl	8000ac8 <__aeabi_dcmpeq>
 800aea6:	b160      	cbz	r0, 800aec2 <log10+0x5a>
 800aea8:	f7fc fce8 	bl	800787c <__errno>
 800aeac:	ed9f 8b0a 	vldr	d8, [pc, #40]	@ 800aed8 <log10+0x70>
 800aeb0:	2322      	movs	r3, #34	@ 0x22
 800aeb2:	6003      	str	r3, [r0, #0]
 800aeb4:	eeb0 0a48 	vmov.f32	s0, s16
 800aeb8:	eef0 0a68 	vmov.f32	s1, s17
 800aebc:	ecbd 8b02 	vpop	{d8}
 800aec0:	bd38      	pop	{r3, r4, r5, pc}
 800aec2:	f7fc fcdb 	bl	800787c <__errno>
 800aec6:	ecbd 8b02 	vpop	{d8}
 800aeca:	2321      	movs	r3, #33	@ 0x21
 800aecc:	6003      	str	r3, [r0, #0]
 800aece:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800aed2:	4803      	ldr	r0, [pc, #12]	@ (800aee0 <log10+0x78>)
 800aed4:	f7ff ba60 	b.w	800a398 <nan>
 800aed8:	00000000 	.word	0x00000000
 800aedc:	fff00000 	.word	0xfff00000
 800aee0:	0800b5c9 	.word	0x0800b5c9
 800aee4:	00000000 	.word	0x00000000

0800aee8 <__ieee754_log10>:
 800aee8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800aeec:	ec55 4b10 	vmov	r4, r5, d0
 800aef0:	f5b5 1f80 	cmp.w	r5, #1048576	@ 0x100000
 800aef4:	ed2d 8b02 	vpush	{d8}
 800aef8:	462b      	mov	r3, r5
 800aefa:	da2e      	bge.n	800af5a <__ieee754_log10+0x72>
 800aefc:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 800af00:	4322      	orrs	r2, r4
 800af02:	d10b      	bne.n	800af1c <__ieee754_log10+0x34>
 800af04:	493a      	ldr	r1, [pc, #232]	@ (800aff0 <__ieee754_log10+0x108>)
 800af06:	2200      	movs	r2, #0
 800af08:	2300      	movs	r3, #0
 800af0a:	2000      	movs	r0, #0
 800af0c:	f7f5 fc9e 	bl	800084c <__aeabi_ddiv>
 800af10:	ecbd 8b02 	vpop	{d8}
 800af14:	ec41 0b10 	vmov	d0, r0, r1
 800af18:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800af1c:	2d00      	cmp	r5, #0
 800af1e:	da07      	bge.n	800af30 <__ieee754_log10+0x48>
 800af20:	4622      	mov	r2, r4
 800af22:	4620      	mov	r0, r4
 800af24:	4629      	mov	r1, r5
 800af26:	f7f5 f9af 	bl	8000288 <__aeabi_dsub>
 800af2a:	2200      	movs	r2, #0
 800af2c:	2300      	movs	r3, #0
 800af2e:	e7ed      	b.n	800af0c <__ieee754_log10+0x24>
 800af30:	4b30      	ldr	r3, [pc, #192]	@ (800aff4 <__ieee754_log10+0x10c>)
 800af32:	2200      	movs	r2, #0
 800af34:	4620      	mov	r0, r4
 800af36:	4629      	mov	r1, r5
 800af38:	f7f5 fb5e 	bl	80005f8 <__aeabi_dmul>
 800af3c:	f06f 0235 	mvn.w	r2, #53	@ 0x35
 800af40:	4604      	mov	r4, r0
 800af42:	460d      	mov	r5, r1
 800af44:	460b      	mov	r3, r1
 800af46:	492c      	ldr	r1, [pc, #176]	@ (800aff8 <__ieee754_log10+0x110>)
 800af48:	428b      	cmp	r3, r1
 800af4a:	dd08      	ble.n	800af5e <__ieee754_log10+0x76>
 800af4c:	4622      	mov	r2, r4
 800af4e:	462b      	mov	r3, r5
 800af50:	4620      	mov	r0, r4
 800af52:	4629      	mov	r1, r5
 800af54:	f7f5 f99a 	bl	800028c <__adddf3>
 800af58:	e7da      	b.n	800af10 <__ieee754_log10+0x28>
 800af5a:	2200      	movs	r2, #0
 800af5c:	e7f3      	b.n	800af46 <__ieee754_log10+0x5e>
 800af5e:	1518      	asrs	r0, r3, #20
 800af60:	f2a0 30ff 	subw	r0, r0, #1023	@ 0x3ff
 800af64:	4410      	add	r0, r2
 800af66:	ea4f 79d0 	mov.w	r9, r0, lsr #31
 800af6a:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 800af6e:	f3c3 0813 	ubfx	r8, r3, #0, #20
 800af72:	f7f5 fad7 	bl	8000524 <__aeabi_i2d>
 800af76:	f5c9 737f 	rsb	r3, r9, #1020	@ 0x3fc
 800af7a:	3303      	adds	r3, #3
 800af7c:	ea48 5503 	orr.w	r5, r8, r3, lsl #20
 800af80:	a315      	add	r3, pc, #84	@ (adr r3, 800afd8 <__ieee754_log10+0xf0>)
 800af82:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af86:	ec45 4b18 	vmov	d8, r4, r5
 800af8a:	4606      	mov	r6, r0
 800af8c:	460f      	mov	r7, r1
 800af8e:	f7f5 fb33 	bl	80005f8 <__aeabi_dmul>
 800af92:	eeb0 0a48 	vmov.f32	s0, s16
 800af96:	eef0 0a68 	vmov.f32	s1, s17
 800af9a:	4604      	mov	r4, r0
 800af9c:	460d      	mov	r5, r1
 800af9e:	f000 f82f 	bl	800b000 <__ieee754_log>
 800afa2:	a30f      	add	r3, pc, #60	@ (adr r3, 800afe0 <__ieee754_log10+0xf8>)
 800afa4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800afa8:	ec51 0b10 	vmov	r0, r1, d0
 800afac:	f7f5 fb24 	bl	80005f8 <__aeabi_dmul>
 800afb0:	4622      	mov	r2, r4
 800afb2:	462b      	mov	r3, r5
 800afb4:	f7f5 f96a 	bl	800028c <__adddf3>
 800afb8:	a30b      	add	r3, pc, #44	@ (adr r3, 800afe8 <__ieee754_log10+0x100>)
 800afba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800afbe:	4604      	mov	r4, r0
 800afc0:	460d      	mov	r5, r1
 800afc2:	4630      	mov	r0, r6
 800afc4:	4639      	mov	r1, r7
 800afc6:	f7f5 fb17 	bl	80005f8 <__aeabi_dmul>
 800afca:	4602      	mov	r2, r0
 800afcc:	460b      	mov	r3, r1
 800afce:	4620      	mov	r0, r4
 800afd0:	4629      	mov	r1, r5
 800afd2:	e7bf      	b.n	800af54 <__ieee754_log10+0x6c>
 800afd4:	f3af 8000 	nop.w
 800afd8:	11f12b36 	.word	0x11f12b36
 800afdc:	3d59fef3 	.word	0x3d59fef3
 800afe0:	1526e50e 	.word	0x1526e50e
 800afe4:	3fdbcb7b 	.word	0x3fdbcb7b
 800afe8:	509f6000 	.word	0x509f6000
 800afec:	3fd34413 	.word	0x3fd34413
 800aff0:	c3500000 	.word	0xc3500000
 800aff4:	43500000 	.word	0x43500000
 800aff8:	7fefffff 	.word	0x7fefffff
 800affc:	00000000 	.word	0x00000000

0800b000 <__ieee754_log>:
 800b000:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b004:	ec51 0b10 	vmov	r0, r1, d0
 800b008:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800b00c:	b087      	sub	sp, #28
 800b00e:	460d      	mov	r5, r1
 800b010:	da26      	bge.n	800b060 <__ieee754_log+0x60>
 800b012:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800b016:	4303      	orrs	r3, r0
 800b018:	4602      	mov	r2, r0
 800b01a:	d10a      	bne.n	800b032 <__ieee754_log+0x32>
 800b01c:	49ce      	ldr	r1, [pc, #824]	@ (800b358 <__ieee754_log+0x358>)
 800b01e:	2200      	movs	r2, #0
 800b020:	2300      	movs	r3, #0
 800b022:	2000      	movs	r0, #0
 800b024:	f7f5 fc12 	bl	800084c <__aeabi_ddiv>
 800b028:	ec41 0b10 	vmov	d0, r0, r1
 800b02c:	b007      	add	sp, #28
 800b02e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b032:	2900      	cmp	r1, #0
 800b034:	da05      	bge.n	800b042 <__ieee754_log+0x42>
 800b036:	460b      	mov	r3, r1
 800b038:	f7f5 f926 	bl	8000288 <__aeabi_dsub>
 800b03c:	2200      	movs	r2, #0
 800b03e:	2300      	movs	r3, #0
 800b040:	e7f0      	b.n	800b024 <__ieee754_log+0x24>
 800b042:	4bc6      	ldr	r3, [pc, #792]	@ (800b35c <__ieee754_log+0x35c>)
 800b044:	2200      	movs	r2, #0
 800b046:	f7f5 fad7 	bl	80005f8 <__aeabi_dmul>
 800b04a:	f06f 0335 	mvn.w	r3, #53	@ 0x35
 800b04e:	460d      	mov	r5, r1
 800b050:	4ac3      	ldr	r2, [pc, #780]	@ (800b360 <__ieee754_log+0x360>)
 800b052:	4295      	cmp	r5, r2
 800b054:	dd06      	ble.n	800b064 <__ieee754_log+0x64>
 800b056:	4602      	mov	r2, r0
 800b058:	460b      	mov	r3, r1
 800b05a:	f7f5 f917 	bl	800028c <__adddf3>
 800b05e:	e7e3      	b.n	800b028 <__ieee754_log+0x28>
 800b060:	2300      	movs	r3, #0
 800b062:	e7f5      	b.n	800b050 <__ieee754_log+0x50>
 800b064:	152c      	asrs	r4, r5, #20
 800b066:	f2a4 34ff 	subw	r4, r4, #1023	@ 0x3ff
 800b06a:	f3c5 0513 	ubfx	r5, r5, #0, #20
 800b06e:	441c      	add	r4, r3
 800b070:	f505 2315 	add.w	r3, r5, #610304	@ 0x95000
 800b074:	f603 7364 	addw	r3, r3, #3940	@ 0xf64
 800b078:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800b07c:	f083 527f 	eor.w	r2, r3, #1069547520	@ 0x3fc00000
 800b080:	f482 1240 	eor.w	r2, r2, #3145728	@ 0x300000
 800b084:	ea42 0105 	orr.w	r1, r2, r5
 800b088:	eb04 5413 	add.w	r4, r4, r3, lsr #20
 800b08c:	2200      	movs	r2, #0
 800b08e:	4bb5      	ldr	r3, [pc, #724]	@ (800b364 <__ieee754_log+0x364>)
 800b090:	f7f5 f8fa 	bl	8000288 <__aeabi_dsub>
 800b094:	1cab      	adds	r3, r5, #2
 800b096:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b09a:	2b02      	cmp	r3, #2
 800b09c:	4682      	mov	sl, r0
 800b09e:	468b      	mov	fp, r1
 800b0a0:	f04f 0200 	mov.w	r2, #0
 800b0a4:	dc53      	bgt.n	800b14e <__ieee754_log+0x14e>
 800b0a6:	2300      	movs	r3, #0
 800b0a8:	f7f5 fd0e 	bl	8000ac8 <__aeabi_dcmpeq>
 800b0ac:	b1d0      	cbz	r0, 800b0e4 <__ieee754_log+0xe4>
 800b0ae:	2c00      	cmp	r4, #0
 800b0b0:	f000 8120 	beq.w	800b2f4 <__ieee754_log+0x2f4>
 800b0b4:	4620      	mov	r0, r4
 800b0b6:	f7f5 fa35 	bl	8000524 <__aeabi_i2d>
 800b0ba:	a391      	add	r3, pc, #580	@ (adr r3, 800b300 <__ieee754_log+0x300>)
 800b0bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0c0:	4606      	mov	r6, r0
 800b0c2:	460f      	mov	r7, r1
 800b0c4:	f7f5 fa98 	bl	80005f8 <__aeabi_dmul>
 800b0c8:	a38f      	add	r3, pc, #572	@ (adr r3, 800b308 <__ieee754_log+0x308>)
 800b0ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0ce:	4604      	mov	r4, r0
 800b0d0:	460d      	mov	r5, r1
 800b0d2:	4630      	mov	r0, r6
 800b0d4:	4639      	mov	r1, r7
 800b0d6:	f7f5 fa8f 	bl	80005f8 <__aeabi_dmul>
 800b0da:	4602      	mov	r2, r0
 800b0dc:	460b      	mov	r3, r1
 800b0de:	4620      	mov	r0, r4
 800b0e0:	4629      	mov	r1, r5
 800b0e2:	e7ba      	b.n	800b05a <__ieee754_log+0x5a>
 800b0e4:	a38a      	add	r3, pc, #552	@ (adr r3, 800b310 <__ieee754_log+0x310>)
 800b0e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0ea:	4650      	mov	r0, sl
 800b0ec:	4659      	mov	r1, fp
 800b0ee:	f7f5 fa83 	bl	80005f8 <__aeabi_dmul>
 800b0f2:	4602      	mov	r2, r0
 800b0f4:	460b      	mov	r3, r1
 800b0f6:	2000      	movs	r0, #0
 800b0f8:	499b      	ldr	r1, [pc, #620]	@ (800b368 <__ieee754_log+0x368>)
 800b0fa:	f7f5 f8c5 	bl	8000288 <__aeabi_dsub>
 800b0fe:	4652      	mov	r2, sl
 800b100:	4606      	mov	r6, r0
 800b102:	460f      	mov	r7, r1
 800b104:	465b      	mov	r3, fp
 800b106:	4650      	mov	r0, sl
 800b108:	4659      	mov	r1, fp
 800b10a:	f7f5 fa75 	bl	80005f8 <__aeabi_dmul>
 800b10e:	4602      	mov	r2, r0
 800b110:	460b      	mov	r3, r1
 800b112:	4630      	mov	r0, r6
 800b114:	4639      	mov	r1, r7
 800b116:	f7f5 fa6f 	bl	80005f8 <__aeabi_dmul>
 800b11a:	4606      	mov	r6, r0
 800b11c:	460f      	mov	r7, r1
 800b11e:	b914      	cbnz	r4, 800b126 <__ieee754_log+0x126>
 800b120:	4632      	mov	r2, r6
 800b122:	463b      	mov	r3, r7
 800b124:	e0a0      	b.n	800b268 <__ieee754_log+0x268>
 800b126:	4620      	mov	r0, r4
 800b128:	f7f5 f9fc 	bl	8000524 <__aeabi_i2d>
 800b12c:	a374      	add	r3, pc, #464	@ (adr r3, 800b300 <__ieee754_log+0x300>)
 800b12e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b132:	4680      	mov	r8, r0
 800b134:	4689      	mov	r9, r1
 800b136:	f7f5 fa5f 	bl	80005f8 <__aeabi_dmul>
 800b13a:	a373      	add	r3, pc, #460	@ (adr r3, 800b308 <__ieee754_log+0x308>)
 800b13c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b140:	4604      	mov	r4, r0
 800b142:	460d      	mov	r5, r1
 800b144:	4640      	mov	r0, r8
 800b146:	4649      	mov	r1, r9
 800b148:	f7f5 fa56 	bl	80005f8 <__aeabi_dmul>
 800b14c:	e0a5      	b.n	800b29a <__ieee754_log+0x29a>
 800b14e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800b152:	f7f5 f89b 	bl	800028c <__adddf3>
 800b156:	4602      	mov	r2, r0
 800b158:	460b      	mov	r3, r1
 800b15a:	4650      	mov	r0, sl
 800b15c:	4659      	mov	r1, fp
 800b15e:	f7f5 fb75 	bl	800084c <__aeabi_ddiv>
 800b162:	e9cd 0100 	strd	r0, r1, [sp]
 800b166:	4620      	mov	r0, r4
 800b168:	f7f5 f9dc 	bl	8000524 <__aeabi_i2d>
 800b16c:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b170:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b174:	4610      	mov	r0, r2
 800b176:	4619      	mov	r1, r3
 800b178:	f7f5 fa3e 	bl	80005f8 <__aeabi_dmul>
 800b17c:	4602      	mov	r2, r0
 800b17e:	460b      	mov	r3, r1
 800b180:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800b184:	f7f5 fa38 	bl	80005f8 <__aeabi_dmul>
 800b188:	a363      	add	r3, pc, #396	@ (adr r3, 800b318 <__ieee754_log+0x318>)
 800b18a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b18e:	4680      	mov	r8, r0
 800b190:	4689      	mov	r9, r1
 800b192:	f7f5 fa31 	bl	80005f8 <__aeabi_dmul>
 800b196:	a362      	add	r3, pc, #392	@ (adr r3, 800b320 <__ieee754_log+0x320>)
 800b198:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b19c:	f7f5 f876 	bl	800028c <__adddf3>
 800b1a0:	4642      	mov	r2, r8
 800b1a2:	464b      	mov	r3, r9
 800b1a4:	f7f5 fa28 	bl	80005f8 <__aeabi_dmul>
 800b1a8:	a35f      	add	r3, pc, #380	@ (adr r3, 800b328 <__ieee754_log+0x328>)
 800b1aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1ae:	f7f5 f86d 	bl	800028c <__adddf3>
 800b1b2:	4642      	mov	r2, r8
 800b1b4:	464b      	mov	r3, r9
 800b1b6:	f7f5 fa1f 	bl	80005f8 <__aeabi_dmul>
 800b1ba:	a35d      	add	r3, pc, #372	@ (adr r3, 800b330 <__ieee754_log+0x330>)
 800b1bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1c0:	f7f5 f864 	bl	800028c <__adddf3>
 800b1c4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b1c8:	f7f5 fa16 	bl	80005f8 <__aeabi_dmul>
 800b1cc:	a35a      	add	r3, pc, #360	@ (adr r3, 800b338 <__ieee754_log+0x338>)
 800b1ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1d2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b1d6:	4640      	mov	r0, r8
 800b1d8:	4649      	mov	r1, r9
 800b1da:	f7f5 fa0d 	bl	80005f8 <__aeabi_dmul>
 800b1de:	a358      	add	r3, pc, #352	@ (adr r3, 800b340 <__ieee754_log+0x340>)
 800b1e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1e4:	f7f5 f852 	bl	800028c <__adddf3>
 800b1e8:	4642      	mov	r2, r8
 800b1ea:	464b      	mov	r3, r9
 800b1ec:	f7f5 fa04 	bl	80005f8 <__aeabi_dmul>
 800b1f0:	a355      	add	r3, pc, #340	@ (adr r3, 800b348 <__ieee754_log+0x348>)
 800b1f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1f6:	f7f5 f849 	bl	800028c <__adddf3>
 800b1fa:	4642      	mov	r2, r8
 800b1fc:	464b      	mov	r3, r9
 800b1fe:	f7f5 f9fb 	bl	80005f8 <__aeabi_dmul>
 800b202:	f5a5 26c2 	sub.w	r6, r5, #397312	@ 0x61000
 800b206:	4602      	mov	r2, r0
 800b208:	460b      	mov	r3, r1
 800b20a:	f5c5 25d7 	rsb	r5, r5, #440320	@ 0x6b800
 800b20e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b212:	f7f5 f83b 	bl	800028c <__adddf3>
 800b216:	f2a6 467a 	subw	r6, r6, #1146	@ 0x47a
 800b21a:	3551      	adds	r5, #81	@ 0x51
 800b21c:	4335      	orrs	r5, r6
 800b21e:	2d00      	cmp	r5, #0
 800b220:	4680      	mov	r8, r0
 800b222:	4689      	mov	r9, r1
 800b224:	dd48      	ble.n	800b2b8 <__ieee754_log+0x2b8>
 800b226:	4b50      	ldr	r3, [pc, #320]	@ (800b368 <__ieee754_log+0x368>)
 800b228:	2200      	movs	r2, #0
 800b22a:	4650      	mov	r0, sl
 800b22c:	4659      	mov	r1, fp
 800b22e:	f7f5 f9e3 	bl	80005f8 <__aeabi_dmul>
 800b232:	4652      	mov	r2, sl
 800b234:	465b      	mov	r3, fp
 800b236:	f7f5 f9df 	bl	80005f8 <__aeabi_dmul>
 800b23a:	4602      	mov	r2, r0
 800b23c:	460b      	mov	r3, r1
 800b23e:	4606      	mov	r6, r0
 800b240:	460f      	mov	r7, r1
 800b242:	4640      	mov	r0, r8
 800b244:	4649      	mov	r1, r9
 800b246:	f7f5 f821 	bl	800028c <__adddf3>
 800b24a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b24e:	f7f5 f9d3 	bl	80005f8 <__aeabi_dmul>
 800b252:	4680      	mov	r8, r0
 800b254:	4689      	mov	r9, r1
 800b256:	b964      	cbnz	r4, 800b272 <__ieee754_log+0x272>
 800b258:	4602      	mov	r2, r0
 800b25a:	460b      	mov	r3, r1
 800b25c:	4630      	mov	r0, r6
 800b25e:	4639      	mov	r1, r7
 800b260:	f7f5 f812 	bl	8000288 <__aeabi_dsub>
 800b264:	4602      	mov	r2, r0
 800b266:	460b      	mov	r3, r1
 800b268:	4650      	mov	r0, sl
 800b26a:	4659      	mov	r1, fp
 800b26c:	f7f5 f80c 	bl	8000288 <__aeabi_dsub>
 800b270:	e6da      	b.n	800b028 <__ieee754_log+0x28>
 800b272:	a323      	add	r3, pc, #140	@ (adr r3, 800b300 <__ieee754_log+0x300>)
 800b274:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b278:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b27c:	f7f5 f9bc 	bl	80005f8 <__aeabi_dmul>
 800b280:	a321      	add	r3, pc, #132	@ (adr r3, 800b308 <__ieee754_log+0x308>)
 800b282:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b286:	4604      	mov	r4, r0
 800b288:	460d      	mov	r5, r1
 800b28a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b28e:	f7f5 f9b3 	bl	80005f8 <__aeabi_dmul>
 800b292:	4642      	mov	r2, r8
 800b294:	464b      	mov	r3, r9
 800b296:	f7f4 fff9 	bl	800028c <__adddf3>
 800b29a:	4602      	mov	r2, r0
 800b29c:	460b      	mov	r3, r1
 800b29e:	4630      	mov	r0, r6
 800b2a0:	4639      	mov	r1, r7
 800b2a2:	f7f4 fff1 	bl	8000288 <__aeabi_dsub>
 800b2a6:	4652      	mov	r2, sl
 800b2a8:	465b      	mov	r3, fp
 800b2aa:	f7f4 ffed 	bl	8000288 <__aeabi_dsub>
 800b2ae:	4602      	mov	r2, r0
 800b2b0:	460b      	mov	r3, r1
 800b2b2:	4620      	mov	r0, r4
 800b2b4:	4629      	mov	r1, r5
 800b2b6:	e7d9      	b.n	800b26c <__ieee754_log+0x26c>
 800b2b8:	4602      	mov	r2, r0
 800b2ba:	460b      	mov	r3, r1
 800b2bc:	4650      	mov	r0, sl
 800b2be:	4659      	mov	r1, fp
 800b2c0:	f7f4 ffe2 	bl	8000288 <__aeabi_dsub>
 800b2c4:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b2c8:	f7f5 f996 	bl	80005f8 <__aeabi_dmul>
 800b2cc:	4606      	mov	r6, r0
 800b2ce:	460f      	mov	r7, r1
 800b2d0:	2c00      	cmp	r4, #0
 800b2d2:	f43f af25 	beq.w	800b120 <__ieee754_log+0x120>
 800b2d6:	a30a      	add	r3, pc, #40	@ (adr r3, 800b300 <__ieee754_log+0x300>)
 800b2d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2dc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b2e0:	f7f5 f98a 	bl	80005f8 <__aeabi_dmul>
 800b2e4:	a308      	add	r3, pc, #32	@ (adr r3, 800b308 <__ieee754_log+0x308>)
 800b2e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2ea:	4604      	mov	r4, r0
 800b2ec:	460d      	mov	r5, r1
 800b2ee:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b2f2:	e729      	b.n	800b148 <__ieee754_log+0x148>
 800b2f4:	ed9f 0b16 	vldr	d0, [pc, #88]	@ 800b350 <__ieee754_log+0x350>
 800b2f8:	e698      	b.n	800b02c <__ieee754_log+0x2c>
 800b2fa:	bf00      	nop
 800b2fc:	f3af 8000 	nop.w
 800b300:	fee00000 	.word	0xfee00000
 800b304:	3fe62e42 	.word	0x3fe62e42
 800b308:	35793c76 	.word	0x35793c76
 800b30c:	3dea39ef 	.word	0x3dea39ef
 800b310:	55555555 	.word	0x55555555
 800b314:	3fd55555 	.word	0x3fd55555
 800b318:	df3e5244 	.word	0xdf3e5244
 800b31c:	3fc2f112 	.word	0x3fc2f112
 800b320:	96cb03de 	.word	0x96cb03de
 800b324:	3fc74664 	.word	0x3fc74664
 800b328:	94229359 	.word	0x94229359
 800b32c:	3fd24924 	.word	0x3fd24924
 800b330:	55555593 	.word	0x55555593
 800b334:	3fe55555 	.word	0x3fe55555
 800b338:	d078c69f 	.word	0xd078c69f
 800b33c:	3fc39a09 	.word	0x3fc39a09
 800b340:	1d8e78af 	.word	0x1d8e78af
 800b344:	3fcc71c5 	.word	0x3fcc71c5
 800b348:	9997fa04 	.word	0x9997fa04
 800b34c:	3fd99999 	.word	0x3fd99999
	...
 800b358:	c3500000 	.word	0xc3500000
 800b35c:	43500000 	.word	0x43500000
 800b360:	7fefffff 	.word	0x7fefffff
 800b364:	3ff00000 	.word	0x3ff00000
 800b368:	3fe00000 	.word	0x3fe00000

0800b36c <_init>:
 800b36c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b36e:	bf00      	nop
 800b370:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b372:	bc08      	pop	{r3}
 800b374:	469e      	mov	lr, r3
 800b376:	4770      	bx	lr

0800b378 <_fini>:
 800b378:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b37a:	bf00      	nop
 800b37c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b37e:	bc08      	pop	{r3}
 800b380:	469e      	mov	lr, r3
 800b382:	4770      	bx	lr
