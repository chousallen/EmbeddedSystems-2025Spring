
week7_DSP.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004e34  08000188  08000188  00001188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c0  08004fbc  08004fbc  00005fbc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800507c  0800507c  00007a68  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800507c  0800507c  0000607c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005084  08005084  00007a68  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005084  08005084  00006084  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005088  08005088  00006088  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000a68  20000000  0800508c  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000007d4  20000a68  08005af4  00007a68  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000123c  08005af4  0000823c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00007a68  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000aea9  00000000  00000000  00007a98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001a92  00000000  00000000  00012941  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000968  00000000  00000000  000143d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  00025e35  00000000  00000000  00014d40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0000bada  00000000  00000000  0003ab75  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    000e82ce  00000000  00000000  0004664f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000043  00000000  00000000  0012e91d  2**0
                  CONTENTS, READONLY
 19 .debug_rnglists 00000723  00000000  00000000  0012e960  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000029cc  00000000  00000000  0012f084  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005a  00000000  00000000  00131a50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000a68 	.word	0x20000a68
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08004fa4 	.word	0x08004fa4

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000a6c 	.word	0x20000a6c
 80001c4:	08004fa4 	.word	0x08004fa4

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	@ 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	3c01      	subs	r4, #1
 8000304:	bf28      	it	cs
 8000306:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800030a:	d2e9      	bcs.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__gedf2>:
 8000964:	f04f 3cff 	mov.w	ip, #4294967295
 8000968:	e006      	b.n	8000978 <__cmpdf2+0x4>
 800096a:	bf00      	nop

0800096c <__ledf2>:
 800096c:	f04f 0c01 	mov.w	ip, #1
 8000970:	e002      	b.n	8000978 <__cmpdf2+0x4>
 8000972:	bf00      	nop

08000974 <__cmpdf2>:
 8000974:	f04f 0c01 	mov.w	ip, #1
 8000978:	f84d cd04 	str.w	ip, [sp, #-4]!
 800097c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000980:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800098e:	d01b      	beq.n	80009c8 <__cmpdf2+0x54>
 8000990:	b001      	add	sp, #4
 8000992:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000996:	bf0c      	ite	eq
 8000998:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800099c:	ea91 0f03 	teqne	r1, r3
 80009a0:	bf02      	ittt	eq
 80009a2:	ea90 0f02 	teqeq	r0, r2
 80009a6:	2000      	moveq	r0, #0
 80009a8:	4770      	bxeq	lr
 80009aa:	f110 0f00 	cmn.w	r0, #0
 80009ae:	ea91 0f03 	teq	r1, r3
 80009b2:	bf58      	it	pl
 80009b4:	4299      	cmppl	r1, r3
 80009b6:	bf08      	it	eq
 80009b8:	4290      	cmpeq	r0, r2
 80009ba:	bf2c      	ite	cs
 80009bc:	17d8      	asrcs	r0, r3, #31
 80009be:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009c2:	f040 0001 	orr.w	r0, r0, #1
 80009c6:	4770      	bx	lr
 80009c8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009cc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d0:	d102      	bne.n	80009d8 <__cmpdf2+0x64>
 80009d2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009d6:	d107      	bne.n	80009e8 <__cmpdf2+0x74>
 80009d8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d1d6      	bne.n	8000990 <__cmpdf2+0x1c>
 80009e2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009e6:	d0d3      	beq.n	8000990 <__cmpdf2+0x1c>
 80009e8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop

080009f0 <__aeabi_cdrcmple>:
 80009f0:	4684      	mov	ip, r0
 80009f2:	4610      	mov	r0, r2
 80009f4:	4662      	mov	r2, ip
 80009f6:	468c      	mov	ip, r1
 80009f8:	4619      	mov	r1, r3
 80009fa:	4663      	mov	r3, ip
 80009fc:	e000      	b.n	8000a00 <__aeabi_cdcmpeq>
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdcmpeq>:
 8000a00:	b501      	push	{r0, lr}
 8000a02:	f7ff ffb7 	bl	8000974 <__cmpdf2>
 8000a06:	2800      	cmp	r0, #0
 8000a08:	bf48      	it	mi
 8000a0a:	f110 0f00 	cmnmi.w	r0, #0
 8000a0e:	bd01      	pop	{r0, pc}

08000a10 <__aeabi_dcmpeq>:
 8000a10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a14:	f7ff fff4 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a18:	bf0c      	ite	eq
 8000a1a:	2001      	moveq	r0, #1
 8000a1c:	2000      	movne	r0, #0
 8000a1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a22:	bf00      	nop

08000a24 <__aeabi_dcmplt>:
 8000a24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a28:	f7ff ffea 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a2c:	bf34      	ite	cc
 8000a2e:	2001      	movcc	r0, #1
 8000a30:	2000      	movcs	r0, #0
 8000a32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a36:	bf00      	nop

08000a38 <__aeabi_dcmple>:
 8000a38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a3c:	f7ff ffe0 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a40:	bf94      	ite	ls
 8000a42:	2001      	movls	r0, #1
 8000a44:	2000      	movhi	r0, #0
 8000a46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4a:	bf00      	nop

08000a4c <__aeabi_dcmpge>:
 8000a4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a50:	f7ff ffce 	bl	80009f0 <__aeabi_cdrcmple>
 8000a54:	bf94      	ite	ls
 8000a56:	2001      	movls	r0, #1
 8000a58:	2000      	movhi	r0, #0
 8000a5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5e:	bf00      	nop

08000a60 <__aeabi_dcmpgt>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff ffc4 	bl	80009f0 <__aeabi_cdrcmple>
 8000a68:	bf34      	ite	cc
 8000a6a:	2001      	movcc	r0, #1
 8000a6c:	2000      	movcs	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmpun>:
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	d102      	bne.n	8000a84 <__aeabi_dcmpun+0x10>
 8000a7e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a82:	d10a      	bne.n	8000a9a <__aeabi_dcmpun+0x26>
 8000a84:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	d102      	bne.n	8000a94 <__aeabi_dcmpun+0x20>
 8000a8e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a92:	d102      	bne.n	8000a9a <__aeabi_dcmpun+0x26>
 8000a94:	f04f 0000 	mov.w	r0, #0
 8000a98:	4770      	bx	lr
 8000a9a:	f04f 0001 	mov.w	r0, #1
 8000a9e:	4770      	bx	lr

08000aa0 <__aeabi_d2f>:
 8000aa0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000aa4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000aa8:	bf24      	itt	cs
 8000aaa:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000aae:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000ab2:	d90d      	bls.n	8000ad0 <__aeabi_d2f+0x30>
 8000ab4:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000ab8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000abc:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ac0:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000ac4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ac8:	bf08      	it	eq
 8000aca:	f020 0001 	biceq.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000ad4:	d121      	bne.n	8000b1a <__aeabi_d2f+0x7a>
 8000ad6:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000ada:	bfbc      	itt	lt
 8000adc:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000ae0:	4770      	bxlt	lr
 8000ae2:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000ae6:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000aea:	f1c2 0218 	rsb	r2, r2, #24
 8000aee:	f1c2 0c20 	rsb	ip, r2, #32
 8000af2:	fa10 f30c 	lsls.w	r3, r0, ip
 8000af6:	fa20 f002 	lsr.w	r0, r0, r2
 8000afa:	bf18      	it	ne
 8000afc:	f040 0001 	orrne.w	r0, r0, #1
 8000b00:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b04:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b08:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b0c:	ea40 000c 	orr.w	r0, r0, ip
 8000b10:	fa23 f302 	lsr.w	r3, r3, r2
 8000b14:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b18:	e7cc      	b.n	8000ab4 <__aeabi_d2f+0x14>
 8000b1a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b1e:	d107      	bne.n	8000b30 <__aeabi_d2f+0x90>
 8000b20:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b24:	bf1e      	ittt	ne
 8000b26:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b2a:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b2e:	4770      	bxne	lr
 8000b30:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b34:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b38:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b3c:	4770      	bx	lr
 8000b3e:	bf00      	nop

08000b40 <__aeabi_uldivmod>:
 8000b40:	b953      	cbnz	r3, 8000b58 <__aeabi_uldivmod+0x18>
 8000b42:	b94a      	cbnz	r2, 8000b58 <__aeabi_uldivmod+0x18>
 8000b44:	2900      	cmp	r1, #0
 8000b46:	bf08      	it	eq
 8000b48:	2800      	cmpeq	r0, #0
 8000b4a:	bf1c      	itt	ne
 8000b4c:	f04f 31ff 	movne.w	r1, #4294967295
 8000b50:	f04f 30ff 	movne.w	r0, #4294967295
 8000b54:	f000 b988 	b.w	8000e68 <__aeabi_idiv0>
 8000b58:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b5c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b60:	f000 f806 	bl	8000b70 <__udivmoddi4>
 8000b64:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b68:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b6c:	b004      	add	sp, #16
 8000b6e:	4770      	bx	lr

08000b70 <__udivmoddi4>:
 8000b70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b74:	9d08      	ldr	r5, [sp, #32]
 8000b76:	468e      	mov	lr, r1
 8000b78:	4604      	mov	r4, r0
 8000b7a:	4688      	mov	r8, r1
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	d14a      	bne.n	8000c16 <__udivmoddi4+0xa6>
 8000b80:	428a      	cmp	r2, r1
 8000b82:	4617      	mov	r7, r2
 8000b84:	d962      	bls.n	8000c4c <__udivmoddi4+0xdc>
 8000b86:	fab2 f682 	clz	r6, r2
 8000b8a:	b14e      	cbz	r6, 8000ba0 <__udivmoddi4+0x30>
 8000b8c:	f1c6 0320 	rsb	r3, r6, #32
 8000b90:	fa01 f806 	lsl.w	r8, r1, r6
 8000b94:	fa20 f303 	lsr.w	r3, r0, r3
 8000b98:	40b7      	lsls	r7, r6
 8000b9a:	ea43 0808 	orr.w	r8, r3, r8
 8000b9e:	40b4      	lsls	r4, r6
 8000ba0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ba4:	fa1f fc87 	uxth.w	ip, r7
 8000ba8:	fbb8 f1fe 	udiv	r1, r8, lr
 8000bac:	0c23      	lsrs	r3, r4, #16
 8000bae:	fb0e 8811 	mls	r8, lr, r1, r8
 8000bb2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000bb6:	fb01 f20c 	mul.w	r2, r1, ip
 8000bba:	429a      	cmp	r2, r3
 8000bbc:	d909      	bls.n	8000bd2 <__udivmoddi4+0x62>
 8000bbe:	18fb      	adds	r3, r7, r3
 8000bc0:	f101 30ff 	add.w	r0, r1, #4294967295
 8000bc4:	f080 80ea 	bcs.w	8000d9c <__udivmoddi4+0x22c>
 8000bc8:	429a      	cmp	r2, r3
 8000bca:	f240 80e7 	bls.w	8000d9c <__udivmoddi4+0x22c>
 8000bce:	3902      	subs	r1, #2
 8000bd0:	443b      	add	r3, r7
 8000bd2:	1a9a      	subs	r2, r3, r2
 8000bd4:	b2a3      	uxth	r3, r4
 8000bd6:	fbb2 f0fe 	udiv	r0, r2, lr
 8000bda:	fb0e 2210 	mls	r2, lr, r0, r2
 8000bde:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000be2:	fb00 fc0c 	mul.w	ip, r0, ip
 8000be6:	459c      	cmp	ip, r3
 8000be8:	d909      	bls.n	8000bfe <__udivmoddi4+0x8e>
 8000bea:	18fb      	adds	r3, r7, r3
 8000bec:	f100 32ff 	add.w	r2, r0, #4294967295
 8000bf0:	f080 80d6 	bcs.w	8000da0 <__udivmoddi4+0x230>
 8000bf4:	459c      	cmp	ip, r3
 8000bf6:	f240 80d3 	bls.w	8000da0 <__udivmoddi4+0x230>
 8000bfa:	443b      	add	r3, r7
 8000bfc:	3802      	subs	r0, #2
 8000bfe:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c02:	eba3 030c 	sub.w	r3, r3, ip
 8000c06:	2100      	movs	r1, #0
 8000c08:	b11d      	cbz	r5, 8000c12 <__udivmoddi4+0xa2>
 8000c0a:	40f3      	lsrs	r3, r6
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	e9c5 3200 	strd	r3, r2, [r5]
 8000c12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c16:	428b      	cmp	r3, r1
 8000c18:	d905      	bls.n	8000c26 <__udivmoddi4+0xb6>
 8000c1a:	b10d      	cbz	r5, 8000c20 <__udivmoddi4+0xb0>
 8000c1c:	e9c5 0100 	strd	r0, r1, [r5]
 8000c20:	2100      	movs	r1, #0
 8000c22:	4608      	mov	r0, r1
 8000c24:	e7f5      	b.n	8000c12 <__udivmoddi4+0xa2>
 8000c26:	fab3 f183 	clz	r1, r3
 8000c2a:	2900      	cmp	r1, #0
 8000c2c:	d146      	bne.n	8000cbc <__udivmoddi4+0x14c>
 8000c2e:	4573      	cmp	r3, lr
 8000c30:	d302      	bcc.n	8000c38 <__udivmoddi4+0xc8>
 8000c32:	4282      	cmp	r2, r0
 8000c34:	f200 8105 	bhi.w	8000e42 <__udivmoddi4+0x2d2>
 8000c38:	1a84      	subs	r4, r0, r2
 8000c3a:	eb6e 0203 	sbc.w	r2, lr, r3
 8000c3e:	2001      	movs	r0, #1
 8000c40:	4690      	mov	r8, r2
 8000c42:	2d00      	cmp	r5, #0
 8000c44:	d0e5      	beq.n	8000c12 <__udivmoddi4+0xa2>
 8000c46:	e9c5 4800 	strd	r4, r8, [r5]
 8000c4a:	e7e2      	b.n	8000c12 <__udivmoddi4+0xa2>
 8000c4c:	2a00      	cmp	r2, #0
 8000c4e:	f000 8090 	beq.w	8000d72 <__udivmoddi4+0x202>
 8000c52:	fab2 f682 	clz	r6, r2
 8000c56:	2e00      	cmp	r6, #0
 8000c58:	f040 80a4 	bne.w	8000da4 <__udivmoddi4+0x234>
 8000c5c:	1a8a      	subs	r2, r1, r2
 8000c5e:	0c03      	lsrs	r3, r0, #16
 8000c60:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c64:	b280      	uxth	r0, r0
 8000c66:	b2bc      	uxth	r4, r7
 8000c68:	2101      	movs	r1, #1
 8000c6a:	fbb2 fcfe 	udiv	ip, r2, lr
 8000c6e:	fb0e 221c 	mls	r2, lr, ip, r2
 8000c72:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000c76:	fb04 f20c 	mul.w	r2, r4, ip
 8000c7a:	429a      	cmp	r2, r3
 8000c7c:	d907      	bls.n	8000c8e <__udivmoddi4+0x11e>
 8000c7e:	18fb      	adds	r3, r7, r3
 8000c80:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000c84:	d202      	bcs.n	8000c8c <__udivmoddi4+0x11c>
 8000c86:	429a      	cmp	r2, r3
 8000c88:	f200 80e0 	bhi.w	8000e4c <__udivmoddi4+0x2dc>
 8000c8c:	46c4      	mov	ip, r8
 8000c8e:	1a9b      	subs	r3, r3, r2
 8000c90:	fbb3 f2fe 	udiv	r2, r3, lr
 8000c94:	fb0e 3312 	mls	r3, lr, r2, r3
 8000c98:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000c9c:	fb02 f404 	mul.w	r4, r2, r4
 8000ca0:	429c      	cmp	r4, r3
 8000ca2:	d907      	bls.n	8000cb4 <__udivmoddi4+0x144>
 8000ca4:	18fb      	adds	r3, r7, r3
 8000ca6:	f102 30ff 	add.w	r0, r2, #4294967295
 8000caa:	d202      	bcs.n	8000cb2 <__udivmoddi4+0x142>
 8000cac:	429c      	cmp	r4, r3
 8000cae:	f200 80ca 	bhi.w	8000e46 <__udivmoddi4+0x2d6>
 8000cb2:	4602      	mov	r2, r0
 8000cb4:	1b1b      	subs	r3, r3, r4
 8000cb6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000cba:	e7a5      	b.n	8000c08 <__udivmoddi4+0x98>
 8000cbc:	f1c1 0620 	rsb	r6, r1, #32
 8000cc0:	408b      	lsls	r3, r1
 8000cc2:	fa22 f706 	lsr.w	r7, r2, r6
 8000cc6:	431f      	orrs	r7, r3
 8000cc8:	fa0e f401 	lsl.w	r4, lr, r1
 8000ccc:	fa20 f306 	lsr.w	r3, r0, r6
 8000cd0:	fa2e fe06 	lsr.w	lr, lr, r6
 8000cd4:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000cd8:	4323      	orrs	r3, r4
 8000cda:	fa00 f801 	lsl.w	r8, r0, r1
 8000cde:	fa1f fc87 	uxth.w	ip, r7
 8000ce2:	fbbe f0f9 	udiv	r0, lr, r9
 8000ce6:	0c1c      	lsrs	r4, r3, #16
 8000ce8:	fb09 ee10 	mls	lr, r9, r0, lr
 8000cec:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000cf0:	fb00 fe0c 	mul.w	lr, r0, ip
 8000cf4:	45a6      	cmp	lr, r4
 8000cf6:	fa02 f201 	lsl.w	r2, r2, r1
 8000cfa:	d909      	bls.n	8000d10 <__udivmoddi4+0x1a0>
 8000cfc:	193c      	adds	r4, r7, r4
 8000cfe:	f100 3aff 	add.w	sl, r0, #4294967295
 8000d02:	f080 809c 	bcs.w	8000e3e <__udivmoddi4+0x2ce>
 8000d06:	45a6      	cmp	lr, r4
 8000d08:	f240 8099 	bls.w	8000e3e <__udivmoddi4+0x2ce>
 8000d0c:	3802      	subs	r0, #2
 8000d0e:	443c      	add	r4, r7
 8000d10:	eba4 040e 	sub.w	r4, r4, lr
 8000d14:	fa1f fe83 	uxth.w	lr, r3
 8000d18:	fbb4 f3f9 	udiv	r3, r4, r9
 8000d1c:	fb09 4413 	mls	r4, r9, r3, r4
 8000d20:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000d24:	fb03 fc0c 	mul.w	ip, r3, ip
 8000d28:	45a4      	cmp	ip, r4
 8000d2a:	d908      	bls.n	8000d3e <__udivmoddi4+0x1ce>
 8000d2c:	193c      	adds	r4, r7, r4
 8000d2e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000d32:	f080 8082 	bcs.w	8000e3a <__udivmoddi4+0x2ca>
 8000d36:	45a4      	cmp	ip, r4
 8000d38:	d97f      	bls.n	8000e3a <__udivmoddi4+0x2ca>
 8000d3a:	3b02      	subs	r3, #2
 8000d3c:	443c      	add	r4, r7
 8000d3e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000d42:	eba4 040c 	sub.w	r4, r4, ip
 8000d46:	fba0 ec02 	umull	lr, ip, r0, r2
 8000d4a:	4564      	cmp	r4, ip
 8000d4c:	4673      	mov	r3, lr
 8000d4e:	46e1      	mov	r9, ip
 8000d50:	d362      	bcc.n	8000e18 <__udivmoddi4+0x2a8>
 8000d52:	d05f      	beq.n	8000e14 <__udivmoddi4+0x2a4>
 8000d54:	b15d      	cbz	r5, 8000d6e <__udivmoddi4+0x1fe>
 8000d56:	ebb8 0203 	subs.w	r2, r8, r3
 8000d5a:	eb64 0409 	sbc.w	r4, r4, r9
 8000d5e:	fa04 f606 	lsl.w	r6, r4, r6
 8000d62:	fa22 f301 	lsr.w	r3, r2, r1
 8000d66:	431e      	orrs	r6, r3
 8000d68:	40cc      	lsrs	r4, r1
 8000d6a:	e9c5 6400 	strd	r6, r4, [r5]
 8000d6e:	2100      	movs	r1, #0
 8000d70:	e74f      	b.n	8000c12 <__udivmoddi4+0xa2>
 8000d72:	fbb1 fcf2 	udiv	ip, r1, r2
 8000d76:	0c01      	lsrs	r1, r0, #16
 8000d78:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000d7c:	b280      	uxth	r0, r0
 8000d7e:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000d82:	463b      	mov	r3, r7
 8000d84:	4638      	mov	r0, r7
 8000d86:	463c      	mov	r4, r7
 8000d88:	46b8      	mov	r8, r7
 8000d8a:	46be      	mov	lr, r7
 8000d8c:	2620      	movs	r6, #32
 8000d8e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000d92:	eba2 0208 	sub.w	r2, r2, r8
 8000d96:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000d9a:	e766      	b.n	8000c6a <__udivmoddi4+0xfa>
 8000d9c:	4601      	mov	r1, r0
 8000d9e:	e718      	b.n	8000bd2 <__udivmoddi4+0x62>
 8000da0:	4610      	mov	r0, r2
 8000da2:	e72c      	b.n	8000bfe <__udivmoddi4+0x8e>
 8000da4:	f1c6 0220 	rsb	r2, r6, #32
 8000da8:	fa2e f302 	lsr.w	r3, lr, r2
 8000dac:	40b7      	lsls	r7, r6
 8000dae:	40b1      	lsls	r1, r6
 8000db0:	fa20 f202 	lsr.w	r2, r0, r2
 8000db4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000db8:	430a      	orrs	r2, r1
 8000dba:	fbb3 f8fe 	udiv	r8, r3, lr
 8000dbe:	b2bc      	uxth	r4, r7
 8000dc0:	fb0e 3318 	mls	r3, lr, r8, r3
 8000dc4:	0c11      	lsrs	r1, r2, #16
 8000dc6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000dca:	fb08 f904 	mul.w	r9, r8, r4
 8000dce:	40b0      	lsls	r0, r6
 8000dd0:	4589      	cmp	r9, r1
 8000dd2:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000dd6:	b280      	uxth	r0, r0
 8000dd8:	d93e      	bls.n	8000e58 <__udivmoddi4+0x2e8>
 8000dda:	1879      	adds	r1, r7, r1
 8000ddc:	f108 3cff 	add.w	ip, r8, #4294967295
 8000de0:	d201      	bcs.n	8000de6 <__udivmoddi4+0x276>
 8000de2:	4589      	cmp	r9, r1
 8000de4:	d81f      	bhi.n	8000e26 <__udivmoddi4+0x2b6>
 8000de6:	eba1 0109 	sub.w	r1, r1, r9
 8000dea:	fbb1 f9fe 	udiv	r9, r1, lr
 8000dee:	fb09 f804 	mul.w	r8, r9, r4
 8000df2:	fb0e 1119 	mls	r1, lr, r9, r1
 8000df6:	b292      	uxth	r2, r2
 8000df8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000dfc:	4542      	cmp	r2, r8
 8000dfe:	d229      	bcs.n	8000e54 <__udivmoddi4+0x2e4>
 8000e00:	18ba      	adds	r2, r7, r2
 8000e02:	f109 31ff 	add.w	r1, r9, #4294967295
 8000e06:	d2c4      	bcs.n	8000d92 <__udivmoddi4+0x222>
 8000e08:	4542      	cmp	r2, r8
 8000e0a:	d2c2      	bcs.n	8000d92 <__udivmoddi4+0x222>
 8000e0c:	f1a9 0102 	sub.w	r1, r9, #2
 8000e10:	443a      	add	r2, r7
 8000e12:	e7be      	b.n	8000d92 <__udivmoddi4+0x222>
 8000e14:	45f0      	cmp	r8, lr
 8000e16:	d29d      	bcs.n	8000d54 <__udivmoddi4+0x1e4>
 8000e18:	ebbe 0302 	subs.w	r3, lr, r2
 8000e1c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000e20:	3801      	subs	r0, #1
 8000e22:	46e1      	mov	r9, ip
 8000e24:	e796      	b.n	8000d54 <__udivmoddi4+0x1e4>
 8000e26:	eba7 0909 	sub.w	r9, r7, r9
 8000e2a:	4449      	add	r1, r9
 8000e2c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000e30:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e34:	fb09 f804 	mul.w	r8, r9, r4
 8000e38:	e7db      	b.n	8000df2 <__udivmoddi4+0x282>
 8000e3a:	4673      	mov	r3, lr
 8000e3c:	e77f      	b.n	8000d3e <__udivmoddi4+0x1ce>
 8000e3e:	4650      	mov	r0, sl
 8000e40:	e766      	b.n	8000d10 <__udivmoddi4+0x1a0>
 8000e42:	4608      	mov	r0, r1
 8000e44:	e6fd      	b.n	8000c42 <__udivmoddi4+0xd2>
 8000e46:	443b      	add	r3, r7
 8000e48:	3a02      	subs	r2, #2
 8000e4a:	e733      	b.n	8000cb4 <__udivmoddi4+0x144>
 8000e4c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e50:	443b      	add	r3, r7
 8000e52:	e71c      	b.n	8000c8e <__udivmoddi4+0x11e>
 8000e54:	4649      	mov	r1, r9
 8000e56:	e79c      	b.n	8000d92 <__udivmoddi4+0x222>
 8000e58:	eba1 0109 	sub.w	r1, r1, r9
 8000e5c:	46c4      	mov	ip, r8
 8000e5e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e62:	fb09 f804 	mul.w	r8, r9, r4
 8000e66:	e7c4      	b.n	8000df2 <__udivmoddi4+0x282>

08000e68 <__aeabi_idiv0>:
 8000e68:	4770      	bx	lr
 8000e6a:	bf00      	nop

08000e6c <arm_fir_init_f32>:
		arm_fir_instance_f32 * S,
        uint16_t numTaps,
  const float32_t * pCoeffs,
        float32_t * pState,
        uint32_t blockSize)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	b084      	sub	sp, #16
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	60f8      	str	r0, [r7, #12]
 8000e74:	607a      	str	r2, [r7, #4]
 8000e76:	603b      	str	r3, [r7, #0]
 8000e78:	460b      	mov	r3, r1
 8000e7a:	817b      	strh	r3, [r7, #10]
  /* Assign filter taps */
  S->numTaps = numTaps;
 8000e7c:	68fb      	ldr	r3, [r7, #12]
 8000e7e:	897a      	ldrh	r2, [r7, #10]
 8000e80:	801a      	strh	r2, [r3, #0]

  /* Assign coefficient pointer */
  S->pCoeffs = pCoeffs;
 8000e82:	68fb      	ldr	r3, [r7, #12]
 8000e84:	687a      	ldr	r2, [r7, #4]
 8000e86:	609a      	str	r2, [r3, #8]

  /* Clear state buffer and the size of state buffer is (blockSize + numTaps - 1) */
  memset(pState, 0, (numTaps + (blockSize - 1u)) * sizeof(float32_t));
 8000e88:	897a      	ldrh	r2, [r7, #10]
 8000e8a:	69bb      	ldr	r3, [r7, #24]
 8000e8c:	4413      	add	r3, r2
 8000e8e:	3b01      	subs	r3, #1
 8000e90:	009b      	lsls	r3, r3, #2
 8000e92:	461a      	mov	r2, r3
 8000e94:	2100      	movs	r1, #0
 8000e96:	6838      	ldr	r0, [r7, #0]
 8000e98:	f003 fdc7 	bl	8004a2a <memset>

  /* Assign state pointer */
  S->pState = pState;
 8000e9c:	68fb      	ldr	r3, [r7, #12]
 8000e9e:	683a      	ldr	r2, [r7, #0]
 8000ea0:	605a      	str	r2, [r3, #4]

}
 8000ea2:	bf00      	nop
 8000ea4:	3710      	adds	r7, #16
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	bd80      	pop	{r7, pc}

08000eaa <arm_fir_f32>:
void arm_fir_f32(
		  const arm_fir_instance_f32 * S,
		  const float32_t * pSrc,
		        float32_t * pDst,
		        uint32_t blockSize)
{
 8000eaa:	b480      	push	{r7}
 8000eac:	b09f      	sub	sp, #124	@ 0x7c
 8000eae:	af00      	add	r7, sp, #0
 8000eb0:	60f8      	str	r0, [r7, #12]
 8000eb2:	60b9      	str	r1, [r7, #8]
 8000eb4:	607a      	str	r2, [r7, #4]
 8000eb6:	603b      	str	r3, [r7, #0]
   float32_t *pState = S->pState;                 /* State pointer */
 8000eb8:	68fb      	ldr	r3, [r7, #12]
 8000eba:	685b      	ldr	r3, [r3, #4]
 8000ebc:	677b      	str	r3, [r7, #116]	@ 0x74
   float32_t *pCoeffs = S->pCoeffs;               /* Coefficient pointer */
 8000ebe:	68fb      	ldr	r3, [r7, #12]
 8000ec0:	689b      	ldr	r3, [r3, #8]
 8000ec2:	61fb      	str	r3, [r7, #28]
   float32_t *pStateCurnt;                        /* Points to the current sample of the state */
   float32_t *px, *pb;                            /* Temporary pointers for state and coefficient buffers */
   float32_t acc0, acc1, acc2, acc3, acc4, acc5, acc6, acc7;     /* Accumulators */
   float32_t x0, x1, x2, x3, x4, x5, x6, x7, c0;  /* Temporary variables to hold state and coefficient values */
   uint32_t numTaps = S->numTaps;                 /* Number of filter coefficients in the filter */
 8000ec4:	68fb      	ldr	r3, [r7, #12]
 8000ec6:	881b      	ldrh	r3, [r3, #0]
 8000ec8:	61bb      	str	r3, [r7, #24]
   uint32_t i, tapCnt, blkCnt;                    /* Loop counters */

   /* S->pState points to state array which contains previous frame (numTaps - 1) samples */
   /* pStateCurnt points to the location where the new input data should be written */
   pStateCurnt = &(S->pState[(numTaps - 1u)]);
 8000eca:	68fb      	ldr	r3, [r7, #12]
 8000ecc:	685a      	ldr	r2, [r3, #4]
 8000ece:	69bb      	ldr	r3, [r7, #24]
 8000ed0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8000ed4:	3b01      	subs	r3, #1
 8000ed6:	009b      	lsls	r3, r3, #2
 8000ed8:	4413      	add	r3, r2
 8000eda:	673b      	str	r3, [r7, #112]	@ 0x70
    *    acc0 =  b[numTaps-1] * x[n-numTaps-1] + b[numTaps-2] * x[n-numTaps-2] + b[numTaps-3] * x[n-numTaps-3] +...+ b[0] * x[0]
    *    acc1 =  b[numTaps-1] * x[n-numTaps] +   b[numTaps-2] * x[n-numTaps-1] + b[numTaps-3] * x[n-numTaps-2] +...+ b[0] * x[1]
    *    acc2 =  b[numTaps-1] * x[n-numTaps+1] + b[numTaps-2] * x[n-numTaps] +   b[numTaps-3] * x[n-numTaps-1] +...+ b[0] * x[2]
    *    acc3 =  b[numTaps-1] * x[n-numTaps+2] + b[numTaps-2] * x[n-numTaps+1] + b[numTaps-3] * x[n-numTaps]   +...+ b[0] * x[3]
    */
   blkCnt = blockSize >> 3;
 8000edc:	683b      	ldr	r3, [r7, #0]
 8000ede:	08db      	lsrs	r3, r3, #3
 8000ee0:	623b      	str	r3, [r7, #32]

   /* First part of the processing with loop unrolling.  Compute 8 outputs at a time.
   ** a second loop below computes the remaining 1 to 7 samples. */
   while(blkCnt > 0u)
 8000ee2:	f000 bc8b 	b.w	80017fc <arm_fir_f32+0x952>
   {
      /* Copy four new input samples into the state buffer */
      *pStateCurnt++ = *pSrc++;
 8000ee6:	68ba      	ldr	r2, [r7, #8]
 8000ee8:	1d13      	adds	r3, r2, #4
 8000eea:	60bb      	str	r3, [r7, #8]
 8000eec:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8000eee:	1d19      	adds	r1, r3, #4
 8000ef0:	6739      	str	r1, [r7, #112]	@ 0x70
 8000ef2:	6812      	ldr	r2, [r2, #0]
 8000ef4:	601a      	str	r2, [r3, #0]
      *pStateCurnt++ = *pSrc++;
 8000ef6:	68ba      	ldr	r2, [r7, #8]
 8000ef8:	1d13      	adds	r3, r2, #4
 8000efa:	60bb      	str	r3, [r7, #8]
 8000efc:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8000efe:	1d19      	adds	r1, r3, #4
 8000f00:	6739      	str	r1, [r7, #112]	@ 0x70
 8000f02:	6812      	ldr	r2, [r2, #0]
 8000f04:	601a      	str	r2, [r3, #0]
      *pStateCurnt++ = *pSrc++;
 8000f06:	68ba      	ldr	r2, [r7, #8]
 8000f08:	1d13      	adds	r3, r2, #4
 8000f0a:	60bb      	str	r3, [r7, #8]
 8000f0c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8000f0e:	1d19      	adds	r1, r3, #4
 8000f10:	6739      	str	r1, [r7, #112]	@ 0x70
 8000f12:	6812      	ldr	r2, [r2, #0]
 8000f14:	601a      	str	r2, [r3, #0]
      *pStateCurnt++ = *pSrc++;
 8000f16:	68ba      	ldr	r2, [r7, #8]
 8000f18:	1d13      	adds	r3, r2, #4
 8000f1a:	60bb      	str	r3, [r7, #8]
 8000f1c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8000f1e:	1d19      	adds	r1, r3, #4
 8000f20:	6739      	str	r1, [r7, #112]	@ 0x70
 8000f22:	6812      	ldr	r2, [r2, #0]
 8000f24:	601a      	str	r2, [r3, #0]

      /* Set all accumulators to zero */
      acc0 = 0.0f;
 8000f26:	f04f 0300 	mov.w	r3, #0
 8000f2a:	667b      	str	r3, [r7, #100]	@ 0x64
      acc1 = 0.0f;
 8000f2c:	f04f 0300 	mov.w	r3, #0
 8000f30:	663b      	str	r3, [r7, #96]	@ 0x60
      acc2 = 0.0f;
 8000f32:	f04f 0300 	mov.w	r3, #0
 8000f36:	65fb      	str	r3, [r7, #92]	@ 0x5c
      acc3 = 0.0f;
 8000f38:	f04f 0300 	mov.w	r3, #0
 8000f3c:	65bb      	str	r3, [r7, #88]	@ 0x58
      acc4 = 0.0f;
 8000f3e:	f04f 0300 	mov.w	r3, #0
 8000f42:	657b      	str	r3, [r7, #84]	@ 0x54
      acc5 = 0.0f;
 8000f44:	f04f 0300 	mov.w	r3, #0
 8000f48:	653b      	str	r3, [r7, #80]	@ 0x50
      acc6 = 0.0f;
 8000f4a:	f04f 0300 	mov.w	r3, #0
 8000f4e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      acc7 = 0.0f;
 8000f50:	f04f 0300 	mov.w	r3, #0
 8000f54:	64bb      	str	r3, [r7, #72]	@ 0x48

      /* Initialize state pointer */
      px = pState;
 8000f56:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8000f58:	66fb      	str	r3, [r7, #108]	@ 0x6c

      /* Initialize coeff pointer */
      pb = (pCoeffs);
 8000f5a:	69fb      	ldr	r3, [r7, #28]
 8000f5c:	66bb      	str	r3, [r7, #104]	@ 0x68

      /* This is separated from the others to avoid
       * a call to __aeabi_memmove which would be slower
       */
      *pStateCurnt++ = *pSrc++;
 8000f5e:	68ba      	ldr	r2, [r7, #8]
 8000f60:	1d13      	adds	r3, r2, #4
 8000f62:	60bb      	str	r3, [r7, #8]
 8000f64:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8000f66:	1d19      	adds	r1, r3, #4
 8000f68:	6739      	str	r1, [r7, #112]	@ 0x70
 8000f6a:	6812      	ldr	r2, [r2, #0]
 8000f6c:	601a      	str	r2, [r3, #0]
      *pStateCurnt++ = *pSrc++;
 8000f6e:	68ba      	ldr	r2, [r7, #8]
 8000f70:	1d13      	adds	r3, r2, #4
 8000f72:	60bb      	str	r3, [r7, #8]
 8000f74:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8000f76:	1d19      	adds	r1, r3, #4
 8000f78:	6739      	str	r1, [r7, #112]	@ 0x70
 8000f7a:	6812      	ldr	r2, [r2, #0]
 8000f7c:	601a      	str	r2, [r3, #0]
      *pStateCurnt++ = *pSrc++;
 8000f7e:	68ba      	ldr	r2, [r7, #8]
 8000f80:	1d13      	adds	r3, r2, #4
 8000f82:	60bb      	str	r3, [r7, #8]
 8000f84:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8000f86:	1d19      	adds	r1, r3, #4
 8000f88:	6739      	str	r1, [r7, #112]	@ 0x70
 8000f8a:	6812      	ldr	r2, [r2, #0]
 8000f8c:	601a      	str	r2, [r3, #0]
      *pStateCurnt++ = *pSrc++;
 8000f8e:	68ba      	ldr	r2, [r7, #8]
 8000f90:	1d13      	adds	r3, r2, #4
 8000f92:	60bb      	str	r3, [r7, #8]
 8000f94:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8000f96:	1d19      	adds	r1, r3, #4
 8000f98:	6739      	str	r1, [r7, #112]	@ 0x70
 8000f9a:	6812      	ldr	r2, [r2, #0]
 8000f9c:	601a      	str	r2, [r3, #0]

      /* Read the first seven samples from the state buffer:  x[n-numTaps], x[n-numTaps-1], x[n-numTaps-2] */
      x0 = *px++;
 8000f9e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8000fa0:	1d1a      	adds	r2, r3, #4
 8000fa2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	647b      	str	r3, [r7, #68]	@ 0x44
      x1 = *px++;
 8000fa8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8000faa:	1d1a      	adds	r2, r3, #4
 8000fac:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	643b      	str	r3, [r7, #64]	@ 0x40
      x2 = *px++;
 8000fb2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8000fb4:	1d1a      	adds	r2, r3, #4
 8000fb6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	63fb      	str	r3, [r7, #60]	@ 0x3c
      x3 = *px++;
 8000fbc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8000fbe:	1d1a      	adds	r2, r3, #4
 8000fc0:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	63bb      	str	r3, [r7, #56]	@ 0x38
      x4 = *px++;
 8000fc6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8000fc8:	1d1a      	adds	r2, r3, #4
 8000fca:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	637b      	str	r3, [r7, #52]	@ 0x34
      x5 = *px++;
 8000fd0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8000fd2:	1d1a      	adds	r2, r3, #4
 8000fd4:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	633b      	str	r3, [r7, #48]	@ 0x30
      x6 = *px++;
 8000fda:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8000fdc:	1d1a      	adds	r2, r3, #4
 8000fde:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	62fb      	str	r3, [r7, #44]	@ 0x2c

      /* Loop unrolling.  Process 8 taps at a time. */
      tapCnt = numTaps >> 3u;
 8000fe4:	69bb      	ldr	r3, [r7, #24]
 8000fe6:	08db      	lsrs	r3, r3, #3
 8000fe8:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Loop over the number of taps.  Unroll by a factor of 8.
       ** Repeat until we've computed numTaps-8 coefficients. */
      while(tapCnt > 0u)
 8000fea:	e352      	b.n	8001692 <arm_fir_f32+0x7e8>
      {
         /* Read the b[numTaps-1] coefficient */
         c0 = *(pb++);
 8000fec:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8000fee:	1d1a      	adds	r2, r3, #4
 8000ff0:	66ba      	str	r2, [r7, #104]	@ 0x68
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	617b      	str	r3, [r7, #20]

         /* Read x[n-numTaps-3] sample */
         x7 = *(px++);
 8000ff6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8000ff8:	1d1a      	adds	r2, r3, #4
 8000ffa:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	613b      	str	r3, [r7, #16]

         /* acc0 +=  b[numTaps-1] * x[n-numTaps] */
         acc0 += x0 * c0;
 8001000:	ed97 7a11 	vldr	s14, [r7, #68]	@ 0x44
 8001004:	edd7 7a05 	vldr	s15, [r7, #20]
 8001008:	ee67 7a27 	vmul.f32	s15, s14, s15
 800100c:	ed97 7a19 	vldr	s14, [r7, #100]	@ 0x64
 8001010:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001014:	edc7 7a19 	vstr	s15, [r7, #100]	@ 0x64

         /* acc1 +=  b[numTaps-1] * x[n-numTaps-1] */
         acc1 += x1 * c0;
 8001018:	ed97 7a10 	vldr	s14, [r7, #64]	@ 0x40
 800101c:	edd7 7a05 	vldr	s15, [r7, #20]
 8001020:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001024:	ed97 7a18 	vldr	s14, [r7, #96]	@ 0x60
 8001028:	ee77 7a27 	vadd.f32	s15, s14, s15
 800102c:	edc7 7a18 	vstr	s15, [r7, #96]	@ 0x60

         /* acc2 +=  b[numTaps-1] * x[n-numTaps-2] */
         acc2 += x2 * c0;
 8001030:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 8001034:	edd7 7a05 	vldr	s15, [r7, #20]
 8001038:	ee67 7a27 	vmul.f32	s15, s14, s15
 800103c:	ed97 7a17 	vldr	s14, [r7, #92]	@ 0x5c
 8001040:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001044:	edc7 7a17 	vstr	s15, [r7, #92]	@ 0x5c

         /* acc3 +=  b[numTaps-1] * x[n-numTaps-3] */
         acc3 += x3 * c0;
 8001048:	ed97 7a0e 	vldr	s14, [r7, #56]	@ 0x38
 800104c:	edd7 7a05 	vldr	s15, [r7, #20]
 8001050:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001054:	ed97 7a16 	vldr	s14, [r7, #88]	@ 0x58
 8001058:	ee77 7a27 	vadd.f32	s15, s14, s15
 800105c:	edc7 7a16 	vstr	s15, [r7, #88]	@ 0x58

         /* acc4 +=  b[numTaps-1] * x[n-numTaps-4] */
         acc4 += x4 * c0;
 8001060:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 8001064:	edd7 7a05 	vldr	s15, [r7, #20]
 8001068:	ee67 7a27 	vmul.f32	s15, s14, s15
 800106c:	ed97 7a15 	vldr	s14, [r7, #84]	@ 0x54
 8001070:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001074:	edc7 7a15 	vstr	s15, [r7, #84]	@ 0x54

         /* acc1 +=  b[numTaps-1] * x[n-numTaps-5] */
         acc5 += x5 * c0;
 8001078:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 800107c:	edd7 7a05 	vldr	s15, [r7, #20]
 8001080:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001084:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 8001088:	ee77 7a27 	vadd.f32	s15, s14, s15
 800108c:	edc7 7a14 	vstr	s15, [r7, #80]	@ 0x50

         /* acc2 +=  b[numTaps-1] * x[n-numTaps-6] */
         acc6 += x6 * c0;
 8001090:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 8001094:	edd7 7a05 	vldr	s15, [r7, #20]
 8001098:	ee67 7a27 	vmul.f32	s15, s14, s15
 800109c:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 80010a0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80010a4:	edc7 7a13 	vstr	s15, [r7, #76]	@ 0x4c

         /* acc3 +=  b[numTaps-1] * x[n-numTaps-7] */
         acc7 += x7 * c0;
 80010a8:	ed97 7a04 	vldr	s14, [r7, #16]
 80010ac:	edd7 7a05 	vldr	s15, [r7, #20]
 80010b0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80010b4:	ed97 7a12 	vldr	s14, [r7, #72]	@ 0x48
 80010b8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80010bc:	edc7 7a12 	vstr	s15, [r7, #72]	@ 0x48

         /* Read the b[numTaps-2] coefficient */
         c0 = *(pb++);
 80010c0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80010c2:	1d1a      	adds	r2, r3, #4
 80010c4:	66ba      	str	r2, [r7, #104]	@ 0x68
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	617b      	str	r3, [r7, #20]

         /* Read x[n-numTaps-4] sample */
         x0 = *(px++);
 80010ca:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80010cc:	1d1a      	adds	r2, r3, #4
 80010ce:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	647b      	str	r3, [r7, #68]	@ 0x44

         /* Perform the multiply-accumulate */
         acc0 += x1 * c0;
 80010d4:	ed97 7a10 	vldr	s14, [r7, #64]	@ 0x40
 80010d8:	edd7 7a05 	vldr	s15, [r7, #20]
 80010dc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80010e0:	ed97 7a19 	vldr	s14, [r7, #100]	@ 0x64
 80010e4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80010e8:	edc7 7a19 	vstr	s15, [r7, #100]	@ 0x64
         acc1 += x2 * c0;
 80010ec:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 80010f0:	edd7 7a05 	vldr	s15, [r7, #20]
 80010f4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80010f8:	ed97 7a18 	vldr	s14, [r7, #96]	@ 0x60
 80010fc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001100:	edc7 7a18 	vstr	s15, [r7, #96]	@ 0x60
         acc2 += x3 * c0;
 8001104:	ed97 7a0e 	vldr	s14, [r7, #56]	@ 0x38
 8001108:	edd7 7a05 	vldr	s15, [r7, #20]
 800110c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001110:	ed97 7a17 	vldr	s14, [r7, #92]	@ 0x5c
 8001114:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001118:	edc7 7a17 	vstr	s15, [r7, #92]	@ 0x5c
         acc3 += x4 * c0;
 800111c:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 8001120:	edd7 7a05 	vldr	s15, [r7, #20]
 8001124:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001128:	ed97 7a16 	vldr	s14, [r7, #88]	@ 0x58
 800112c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001130:	edc7 7a16 	vstr	s15, [r7, #88]	@ 0x58
         acc4 += x5 * c0;
 8001134:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 8001138:	edd7 7a05 	vldr	s15, [r7, #20]
 800113c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001140:	ed97 7a15 	vldr	s14, [r7, #84]	@ 0x54
 8001144:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001148:	edc7 7a15 	vstr	s15, [r7, #84]	@ 0x54
         acc5 += x6 * c0;
 800114c:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 8001150:	edd7 7a05 	vldr	s15, [r7, #20]
 8001154:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001158:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 800115c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001160:	edc7 7a14 	vstr	s15, [r7, #80]	@ 0x50
         acc6 += x7 * c0;
 8001164:	ed97 7a04 	vldr	s14, [r7, #16]
 8001168:	edd7 7a05 	vldr	s15, [r7, #20]
 800116c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001170:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 8001174:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001178:	edc7 7a13 	vstr	s15, [r7, #76]	@ 0x4c
         acc7 += x0 * c0;
 800117c:	ed97 7a11 	vldr	s14, [r7, #68]	@ 0x44
 8001180:	edd7 7a05 	vldr	s15, [r7, #20]
 8001184:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001188:	ed97 7a12 	vldr	s14, [r7, #72]	@ 0x48
 800118c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001190:	edc7 7a12 	vstr	s15, [r7, #72]	@ 0x48

         /* Read the b[numTaps-3] coefficient */
         c0 = *(pb++);
 8001194:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001196:	1d1a      	adds	r2, r3, #4
 8001198:	66ba      	str	r2, [r7, #104]	@ 0x68
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	617b      	str	r3, [r7, #20]

         /* Read x[n-numTaps-5] sample */
         x1 = *(px++);
 800119e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80011a0:	1d1a      	adds	r2, r3, #4
 80011a2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	643b      	str	r3, [r7, #64]	@ 0x40

         /* Perform the multiply-accumulates */
         acc0 += x2 * c0;
 80011a8:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 80011ac:	edd7 7a05 	vldr	s15, [r7, #20]
 80011b0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80011b4:	ed97 7a19 	vldr	s14, [r7, #100]	@ 0x64
 80011b8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80011bc:	edc7 7a19 	vstr	s15, [r7, #100]	@ 0x64
         acc1 += x3 * c0;
 80011c0:	ed97 7a0e 	vldr	s14, [r7, #56]	@ 0x38
 80011c4:	edd7 7a05 	vldr	s15, [r7, #20]
 80011c8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80011cc:	ed97 7a18 	vldr	s14, [r7, #96]	@ 0x60
 80011d0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80011d4:	edc7 7a18 	vstr	s15, [r7, #96]	@ 0x60
         acc2 += x4 * c0;
 80011d8:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 80011dc:	edd7 7a05 	vldr	s15, [r7, #20]
 80011e0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80011e4:	ed97 7a17 	vldr	s14, [r7, #92]	@ 0x5c
 80011e8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80011ec:	edc7 7a17 	vstr	s15, [r7, #92]	@ 0x5c
         acc3 += x5 * c0;
 80011f0:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 80011f4:	edd7 7a05 	vldr	s15, [r7, #20]
 80011f8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80011fc:	ed97 7a16 	vldr	s14, [r7, #88]	@ 0x58
 8001200:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001204:	edc7 7a16 	vstr	s15, [r7, #88]	@ 0x58
         acc4 += x6 * c0;
 8001208:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 800120c:	edd7 7a05 	vldr	s15, [r7, #20]
 8001210:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001214:	ed97 7a15 	vldr	s14, [r7, #84]	@ 0x54
 8001218:	ee77 7a27 	vadd.f32	s15, s14, s15
 800121c:	edc7 7a15 	vstr	s15, [r7, #84]	@ 0x54
         acc5 += x7 * c0;
 8001220:	ed97 7a04 	vldr	s14, [r7, #16]
 8001224:	edd7 7a05 	vldr	s15, [r7, #20]
 8001228:	ee67 7a27 	vmul.f32	s15, s14, s15
 800122c:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 8001230:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001234:	edc7 7a14 	vstr	s15, [r7, #80]	@ 0x50
         acc6 += x0 * c0;
 8001238:	ed97 7a11 	vldr	s14, [r7, #68]	@ 0x44
 800123c:	edd7 7a05 	vldr	s15, [r7, #20]
 8001240:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001244:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 8001248:	ee77 7a27 	vadd.f32	s15, s14, s15
 800124c:	edc7 7a13 	vstr	s15, [r7, #76]	@ 0x4c
         acc7 += x1 * c0;
 8001250:	ed97 7a10 	vldr	s14, [r7, #64]	@ 0x40
 8001254:	edd7 7a05 	vldr	s15, [r7, #20]
 8001258:	ee67 7a27 	vmul.f32	s15, s14, s15
 800125c:	ed97 7a12 	vldr	s14, [r7, #72]	@ 0x48
 8001260:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001264:	edc7 7a12 	vstr	s15, [r7, #72]	@ 0x48

         /* Read the b[numTaps-4] coefficient */
         c0 = *(pb++);
 8001268:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800126a:	1d1a      	adds	r2, r3, #4
 800126c:	66ba      	str	r2, [r7, #104]	@ 0x68
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	617b      	str	r3, [r7, #20]

         /* Read x[n-numTaps-6] sample */
         x2 = *(px++);
 8001272:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001274:	1d1a      	adds	r2, r3, #4
 8001276:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	63fb      	str	r3, [r7, #60]	@ 0x3c

         /* Perform the multiply-accumulates */
         acc0 += x3 * c0;
 800127c:	ed97 7a0e 	vldr	s14, [r7, #56]	@ 0x38
 8001280:	edd7 7a05 	vldr	s15, [r7, #20]
 8001284:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001288:	ed97 7a19 	vldr	s14, [r7, #100]	@ 0x64
 800128c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001290:	edc7 7a19 	vstr	s15, [r7, #100]	@ 0x64
         acc1 += x4 * c0;
 8001294:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 8001298:	edd7 7a05 	vldr	s15, [r7, #20]
 800129c:	ee67 7a27 	vmul.f32	s15, s14, s15
 80012a0:	ed97 7a18 	vldr	s14, [r7, #96]	@ 0x60
 80012a4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80012a8:	edc7 7a18 	vstr	s15, [r7, #96]	@ 0x60
         acc2 += x5 * c0;
 80012ac:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 80012b0:	edd7 7a05 	vldr	s15, [r7, #20]
 80012b4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80012b8:	ed97 7a17 	vldr	s14, [r7, #92]	@ 0x5c
 80012bc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80012c0:	edc7 7a17 	vstr	s15, [r7, #92]	@ 0x5c
         acc3 += x6 * c0;
 80012c4:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 80012c8:	edd7 7a05 	vldr	s15, [r7, #20]
 80012cc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80012d0:	ed97 7a16 	vldr	s14, [r7, #88]	@ 0x58
 80012d4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80012d8:	edc7 7a16 	vstr	s15, [r7, #88]	@ 0x58
         acc4 += x7 * c0;
 80012dc:	ed97 7a04 	vldr	s14, [r7, #16]
 80012e0:	edd7 7a05 	vldr	s15, [r7, #20]
 80012e4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80012e8:	ed97 7a15 	vldr	s14, [r7, #84]	@ 0x54
 80012ec:	ee77 7a27 	vadd.f32	s15, s14, s15
 80012f0:	edc7 7a15 	vstr	s15, [r7, #84]	@ 0x54
         acc5 += x0 * c0;
 80012f4:	ed97 7a11 	vldr	s14, [r7, #68]	@ 0x44
 80012f8:	edd7 7a05 	vldr	s15, [r7, #20]
 80012fc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001300:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 8001304:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001308:	edc7 7a14 	vstr	s15, [r7, #80]	@ 0x50
         acc6 += x1 * c0;
 800130c:	ed97 7a10 	vldr	s14, [r7, #64]	@ 0x40
 8001310:	edd7 7a05 	vldr	s15, [r7, #20]
 8001314:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001318:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 800131c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001320:	edc7 7a13 	vstr	s15, [r7, #76]	@ 0x4c
         acc7 += x2 * c0;
 8001324:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 8001328:	edd7 7a05 	vldr	s15, [r7, #20]
 800132c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001330:	ed97 7a12 	vldr	s14, [r7, #72]	@ 0x48
 8001334:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001338:	edc7 7a12 	vstr	s15, [r7, #72]	@ 0x48

         /* Read the b[numTaps-4] coefficient */
         c0 = *(pb++);
 800133c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800133e:	1d1a      	adds	r2, r3, #4
 8001340:	66ba      	str	r2, [r7, #104]	@ 0x68
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	617b      	str	r3, [r7, #20]

         /* Read x[n-numTaps-6] sample */
         x3 = *(px++);
 8001346:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001348:	1d1a      	adds	r2, r3, #4
 800134a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	63bb      	str	r3, [r7, #56]	@ 0x38
         /* Perform the multiply-accumulates */
         acc0 += x4 * c0;
 8001350:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 8001354:	edd7 7a05 	vldr	s15, [r7, #20]
 8001358:	ee67 7a27 	vmul.f32	s15, s14, s15
 800135c:	ed97 7a19 	vldr	s14, [r7, #100]	@ 0x64
 8001360:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001364:	edc7 7a19 	vstr	s15, [r7, #100]	@ 0x64
         acc1 += x5 * c0;
 8001368:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 800136c:	edd7 7a05 	vldr	s15, [r7, #20]
 8001370:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001374:	ed97 7a18 	vldr	s14, [r7, #96]	@ 0x60
 8001378:	ee77 7a27 	vadd.f32	s15, s14, s15
 800137c:	edc7 7a18 	vstr	s15, [r7, #96]	@ 0x60
         acc2 += x6 * c0;
 8001380:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 8001384:	edd7 7a05 	vldr	s15, [r7, #20]
 8001388:	ee67 7a27 	vmul.f32	s15, s14, s15
 800138c:	ed97 7a17 	vldr	s14, [r7, #92]	@ 0x5c
 8001390:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001394:	edc7 7a17 	vstr	s15, [r7, #92]	@ 0x5c
         acc3 += x7 * c0;
 8001398:	ed97 7a04 	vldr	s14, [r7, #16]
 800139c:	edd7 7a05 	vldr	s15, [r7, #20]
 80013a0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80013a4:	ed97 7a16 	vldr	s14, [r7, #88]	@ 0x58
 80013a8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80013ac:	edc7 7a16 	vstr	s15, [r7, #88]	@ 0x58
         acc4 += x0 * c0;
 80013b0:	ed97 7a11 	vldr	s14, [r7, #68]	@ 0x44
 80013b4:	edd7 7a05 	vldr	s15, [r7, #20]
 80013b8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80013bc:	ed97 7a15 	vldr	s14, [r7, #84]	@ 0x54
 80013c0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80013c4:	edc7 7a15 	vstr	s15, [r7, #84]	@ 0x54
         acc5 += x1 * c0;
 80013c8:	ed97 7a10 	vldr	s14, [r7, #64]	@ 0x40
 80013cc:	edd7 7a05 	vldr	s15, [r7, #20]
 80013d0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80013d4:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 80013d8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80013dc:	edc7 7a14 	vstr	s15, [r7, #80]	@ 0x50
         acc6 += x2 * c0;
 80013e0:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 80013e4:	edd7 7a05 	vldr	s15, [r7, #20]
 80013e8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80013ec:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 80013f0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80013f4:	edc7 7a13 	vstr	s15, [r7, #76]	@ 0x4c
         acc7 += x3 * c0;
 80013f8:	ed97 7a0e 	vldr	s14, [r7, #56]	@ 0x38
 80013fc:	edd7 7a05 	vldr	s15, [r7, #20]
 8001400:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001404:	ed97 7a12 	vldr	s14, [r7, #72]	@ 0x48
 8001408:	ee77 7a27 	vadd.f32	s15, s14, s15
 800140c:	edc7 7a12 	vstr	s15, [r7, #72]	@ 0x48

         /* Read the b[numTaps-4] coefficient */
         c0 = *(pb++);
 8001410:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001412:	1d1a      	adds	r2, r3, #4
 8001414:	66ba      	str	r2, [r7, #104]	@ 0x68
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	617b      	str	r3, [r7, #20]

         /* Read x[n-numTaps-6] sample */
         x4 = *(px++);
 800141a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800141c:	1d1a      	adds	r2, r3, #4
 800141e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	637b      	str	r3, [r7, #52]	@ 0x34

         /* Perform the multiply-accumulates */
         acc0 += x5 * c0;
 8001424:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 8001428:	edd7 7a05 	vldr	s15, [r7, #20]
 800142c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001430:	ed97 7a19 	vldr	s14, [r7, #100]	@ 0x64
 8001434:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001438:	edc7 7a19 	vstr	s15, [r7, #100]	@ 0x64
         acc1 += x6 * c0;
 800143c:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 8001440:	edd7 7a05 	vldr	s15, [r7, #20]
 8001444:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001448:	ed97 7a18 	vldr	s14, [r7, #96]	@ 0x60
 800144c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001450:	edc7 7a18 	vstr	s15, [r7, #96]	@ 0x60
         acc2 += x7 * c0;
 8001454:	ed97 7a04 	vldr	s14, [r7, #16]
 8001458:	edd7 7a05 	vldr	s15, [r7, #20]
 800145c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001460:	ed97 7a17 	vldr	s14, [r7, #92]	@ 0x5c
 8001464:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001468:	edc7 7a17 	vstr	s15, [r7, #92]	@ 0x5c
         acc3 += x0 * c0;
 800146c:	ed97 7a11 	vldr	s14, [r7, #68]	@ 0x44
 8001470:	edd7 7a05 	vldr	s15, [r7, #20]
 8001474:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001478:	ed97 7a16 	vldr	s14, [r7, #88]	@ 0x58
 800147c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001480:	edc7 7a16 	vstr	s15, [r7, #88]	@ 0x58
         acc4 += x1 * c0;
 8001484:	ed97 7a10 	vldr	s14, [r7, #64]	@ 0x40
 8001488:	edd7 7a05 	vldr	s15, [r7, #20]
 800148c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001490:	ed97 7a15 	vldr	s14, [r7, #84]	@ 0x54
 8001494:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001498:	edc7 7a15 	vstr	s15, [r7, #84]	@ 0x54
         acc5 += x2 * c0;
 800149c:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 80014a0:	edd7 7a05 	vldr	s15, [r7, #20]
 80014a4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80014a8:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 80014ac:	ee77 7a27 	vadd.f32	s15, s14, s15
 80014b0:	edc7 7a14 	vstr	s15, [r7, #80]	@ 0x50
         acc6 += x3 * c0;
 80014b4:	ed97 7a0e 	vldr	s14, [r7, #56]	@ 0x38
 80014b8:	edd7 7a05 	vldr	s15, [r7, #20]
 80014bc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80014c0:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 80014c4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80014c8:	edc7 7a13 	vstr	s15, [r7, #76]	@ 0x4c
         acc7 += x4 * c0;
 80014cc:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 80014d0:	edd7 7a05 	vldr	s15, [r7, #20]
 80014d4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80014d8:	ed97 7a12 	vldr	s14, [r7, #72]	@ 0x48
 80014dc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80014e0:	edc7 7a12 	vstr	s15, [r7, #72]	@ 0x48

         /* Read the b[numTaps-4] coefficient */
         c0 = *(pb++);
 80014e4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80014e6:	1d1a      	adds	r2, r3, #4
 80014e8:	66ba      	str	r2, [r7, #104]	@ 0x68
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	617b      	str	r3, [r7, #20]

         /* Read x[n-numTaps-6] sample */
         x5 = *(px++);
 80014ee:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80014f0:	1d1a      	adds	r2, r3, #4
 80014f2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	633b      	str	r3, [r7, #48]	@ 0x30

         /* Perform the multiply-accumulates */
         acc0 += x6 * c0;
 80014f8:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 80014fc:	edd7 7a05 	vldr	s15, [r7, #20]
 8001500:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001504:	ed97 7a19 	vldr	s14, [r7, #100]	@ 0x64
 8001508:	ee77 7a27 	vadd.f32	s15, s14, s15
 800150c:	edc7 7a19 	vstr	s15, [r7, #100]	@ 0x64
         acc1 += x7 * c0;
 8001510:	ed97 7a04 	vldr	s14, [r7, #16]
 8001514:	edd7 7a05 	vldr	s15, [r7, #20]
 8001518:	ee67 7a27 	vmul.f32	s15, s14, s15
 800151c:	ed97 7a18 	vldr	s14, [r7, #96]	@ 0x60
 8001520:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001524:	edc7 7a18 	vstr	s15, [r7, #96]	@ 0x60
         acc2 += x0 * c0;
 8001528:	ed97 7a11 	vldr	s14, [r7, #68]	@ 0x44
 800152c:	edd7 7a05 	vldr	s15, [r7, #20]
 8001530:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001534:	ed97 7a17 	vldr	s14, [r7, #92]	@ 0x5c
 8001538:	ee77 7a27 	vadd.f32	s15, s14, s15
 800153c:	edc7 7a17 	vstr	s15, [r7, #92]	@ 0x5c
         acc3 += x1 * c0;
 8001540:	ed97 7a10 	vldr	s14, [r7, #64]	@ 0x40
 8001544:	edd7 7a05 	vldr	s15, [r7, #20]
 8001548:	ee67 7a27 	vmul.f32	s15, s14, s15
 800154c:	ed97 7a16 	vldr	s14, [r7, #88]	@ 0x58
 8001550:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001554:	edc7 7a16 	vstr	s15, [r7, #88]	@ 0x58
         acc4 += x2 * c0;
 8001558:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 800155c:	edd7 7a05 	vldr	s15, [r7, #20]
 8001560:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001564:	ed97 7a15 	vldr	s14, [r7, #84]	@ 0x54
 8001568:	ee77 7a27 	vadd.f32	s15, s14, s15
 800156c:	edc7 7a15 	vstr	s15, [r7, #84]	@ 0x54
         acc5 += x3 * c0;
 8001570:	ed97 7a0e 	vldr	s14, [r7, #56]	@ 0x38
 8001574:	edd7 7a05 	vldr	s15, [r7, #20]
 8001578:	ee67 7a27 	vmul.f32	s15, s14, s15
 800157c:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 8001580:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001584:	edc7 7a14 	vstr	s15, [r7, #80]	@ 0x50
         acc6 += x4 * c0;
 8001588:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 800158c:	edd7 7a05 	vldr	s15, [r7, #20]
 8001590:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001594:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 8001598:	ee77 7a27 	vadd.f32	s15, s14, s15
 800159c:	edc7 7a13 	vstr	s15, [r7, #76]	@ 0x4c
         acc7 += x5 * c0;
 80015a0:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 80015a4:	edd7 7a05 	vldr	s15, [r7, #20]
 80015a8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80015ac:	ed97 7a12 	vldr	s14, [r7, #72]	@ 0x48
 80015b0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80015b4:	edc7 7a12 	vstr	s15, [r7, #72]	@ 0x48

         /* Read the b[numTaps-4] coefficient */
         c0 = *(pb++);
 80015b8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80015ba:	1d1a      	adds	r2, r3, #4
 80015bc:	66ba      	str	r2, [r7, #104]	@ 0x68
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	617b      	str	r3, [r7, #20]

         /* Read x[n-numTaps-6] sample */
         x6 = *(px++);
 80015c2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80015c4:	1d1a      	adds	r2, r3, #4
 80015c6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	62fb      	str	r3, [r7, #44]	@ 0x2c

         /* Perform the multiply-accumulates */
         acc0 += x7 * c0;
 80015cc:	ed97 7a04 	vldr	s14, [r7, #16]
 80015d0:	edd7 7a05 	vldr	s15, [r7, #20]
 80015d4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80015d8:	ed97 7a19 	vldr	s14, [r7, #100]	@ 0x64
 80015dc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80015e0:	edc7 7a19 	vstr	s15, [r7, #100]	@ 0x64
         acc1 += x0 * c0;
 80015e4:	ed97 7a11 	vldr	s14, [r7, #68]	@ 0x44
 80015e8:	edd7 7a05 	vldr	s15, [r7, #20]
 80015ec:	ee67 7a27 	vmul.f32	s15, s14, s15
 80015f0:	ed97 7a18 	vldr	s14, [r7, #96]	@ 0x60
 80015f4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80015f8:	edc7 7a18 	vstr	s15, [r7, #96]	@ 0x60
         acc2 += x1 * c0;
 80015fc:	ed97 7a10 	vldr	s14, [r7, #64]	@ 0x40
 8001600:	edd7 7a05 	vldr	s15, [r7, #20]
 8001604:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001608:	ed97 7a17 	vldr	s14, [r7, #92]	@ 0x5c
 800160c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001610:	edc7 7a17 	vstr	s15, [r7, #92]	@ 0x5c
         acc3 += x2 * c0;
 8001614:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 8001618:	edd7 7a05 	vldr	s15, [r7, #20]
 800161c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001620:	ed97 7a16 	vldr	s14, [r7, #88]	@ 0x58
 8001624:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001628:	edc7 7a16 	vstr	s15, [r7, #88]	@ 0x58
         acc4 += x3 * c0;
 800162c:	ed97 7a0e 	vldr	s14, [r7, #56]	@ 0x38
 8001630:	edd7 7a05 	vldr	s15, [r7, #20]
 8001634:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001638:	ed97 7a15 	vldr	s14, [r7, #84]	@ 0x54
 800163c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001640:	edc7 7a15 	vstr	s15, [r7, #84]	@ 0x54
         acc5 += x4 * c0;
 8001644:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 8001648:	edd7 7a05 	vldr	s15, [r7, #20]
 800164c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001650:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 8001654:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001658:	edc7 7a14 	vstr	s15, [r7, #80]	@ 0x50
         acc6 += x5 * c0;
 800165c:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 8001660:	edd7 7a05 	vldr	s15, [r7, #20]
 8001664:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001668:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 800166c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001670:	edc7 7a13 	vstr	s15, [r7, #76]	@ 0x4c
         acc7 += x6 * c0;
 8001674:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 8001678:	edd7 7a05 	vldr	s15, [r7, #20]
 800167c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001680:	ed97 7a12 	vldr	s14, [r7, #72]	@ 0x48
 8001684:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001688:	edc7 7a12 	vstr	s15, [r7, #72]	@ 0x48

         tapCnt--;
 800168c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800168e:	3b01      	subs	r3, #1
 8001690:	627b      	str	r3, [r7, #36]	@ 0x24
      while(tapCnt > 0u)
 8001692:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001694:	2b00      	cmp	r3, #0
 8001696:	f47f aca9 	bne.w	8000fec <arm_fir_f32+0x142>
      }

      /* If the filter length is not a multiple of 8, compute the remaining filter taps */
      tapCnt = numTaps % 0x8u;
 800169a:	69bb      	ldr	r3, [r7, #24]
 800169c:	f003 0307 	and.w	r3, r3, #7
 80016a0:	627b      	str	r3, [r7, #36]	@ 0x24

      while(tapCnt > 0u)
 80016a2:	e07a      	b.n	800179a <arm_fir_f32+0x8f0>
      {
         /* Read coefficients */
         c0 = *(pb++);
 80016a4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80016a6:	1d1a      	adds	r2, r3, #4
 80016a8:	66ba      	str	r2, [r7, #104]	@ 0x68
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	617b      	str	r3, [r7, #20]

         /* Fetch 1 state variable */
         x7 = *(px++);
 80016ae:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80016b0:	1d1a      	adds	r2, r3, #4
 80016b2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	613b      	str	r3, [r7, #16]

         /* Perform the multiply-accumulates */
         acc0 += x0 * c0;
 80016b8:	ed97 7a11 	vldr	s14, [r7, #68]	@ 0x44
 80016bc:	edd7 7a05 	vldr	s15, [r7, #20]
 80016c0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80016c4:	ed97 7a19 	vldr	s14, [r7, #100]	@ 0x64
 80016c8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80016cc:	edc7 7a19 	vstr	s15, [r7, #100]	@ 0x64
         acc1 += x1 * c0;
 80016d0:	ed97 7a10 	vldr	s14, [r7, #64]	@ 0x40
 80016d4:	edd7 7a05 	vldr	s15, [r7, #20]
 80016d8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80016dc:	ed97 7a18 	vldr	s14, [r7, #96]	@ 0x60
 80016e0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80016e4:	edc7 7a18 	vstr	s15, [r7, #96]	@ 0x60
         acc2 += x2 * c0;
 80016e8:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 80016ec:	edd7 7a05 	vldr	s15, [r7, #20]
 80016f0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80016f4:	ed97 7a17 	vldr	s14, [r7, #92]	@ 0x5c
 80016f8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80016fc:	edc7 7a17 	vstr	s15, [r7, #92]	@ 0x5c
         acc3 += x3 * c0;
 8001700:	ed97 7a0e 	vldr	s14, [r7, #56]	@ 0x38
 8001704:	edd7 7a05 	vldr	s15, [r7, #20]
 8001708:	ee67 7a27 	vmul.f32	s15, s14, s15
 800170c:	ed97 7a16 	vldr	s14, [r7, #88]	@ 0x58
 8001710:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001714:	edc7 7a16 	vstr	s15, [r7, #88]	@ 0x58
         acc4 += x4 * c0;
 8001718:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 800171c:	edd7 7a05 	vldr	s15, [r7, #20]
 8001720:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001724:	ed97 7a15 	vldr	s14, [r7, #84]	@ 0x54
 8001728:	ee77 7a27 	vadd.f32	s15, s14, s15
 800172c:	edc7 7a15 	vstr	s15, [r7, #84]	@ 0x54
         acc5 += x5 * c0;
 8001730:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 8001734:	edd7 7a05 	vldr	s15, [r7, #20]
 8001738:	ee67 7a27 	vmul.f32	s15, s14, s15
 800173c:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 8001740:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001744:	edc7 7a14 	vstr	s15, [r7, #80]	@ 0x50
         acc6 += x6 * c0;
 8001748:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 800174c:	edd7 7a05 	vldr	s15, [r7, #20]
 8001750:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001754:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 8001758:	ee77 7a27 	vadd.f32	s15, s14, s15
 800175c:	edc7 7a13 	vstr	s15, [r7, #76]	@ 0x4c
         acc7 += x7 * c0;
 8001760:	ed97 7a04 	vldr	s14, [r7, #16]
 8001764:	edd7 7a05 	vldr	s15, [r7, #20]
 8001768:	ee67 7a27 	vmul.f32	s15, s14, s15
 800176c:	ed97 7a12 	vldr	s14, [r7, #72]	@ 0x48
 8001770:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001774:	edc7 7a12 	vstr	s15, [r7, #72]	@ 0x48

         /* Reuse the present sample states for next sample */
         x0 = x1;
 8001778:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800177a:	647b      	str	r3, [r7, #68]	@ 0x44
         x1 = x2;
 800177c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800177e:	643b      	str	r3, [r7, #64]	@ 0x40
         x2 = x3;
 8001780:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001782:	63fb      	str	r3, [r7, #60]	@ 0x3c
         x3 = x4;
 8001784:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001786:	63bb      	str	r3, [r7, #56]	@ 0x38
         x4 = x5;
 8001788:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800178a:	637b      	str	r3, [r7, #52]	@ 0x34
         x5 = x6;
 800178c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800178e:	633b      	str	r3, [r7, #48]	@ 0x30
         x6 = x7;
 8001790:	693b      	ldr	r3, [r7, #16]
 8001792:	62fb      	str	r3, [r7, #44]	@ 0x2c

         /* Decrement the loop counter */
         tapCnt--;
 8001794:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001796:	3b01      	subs	r3, #1
 8001798:	627b      	str	r3, [r7, #36]	@ 0x24
      while(tapCnt > 0u)
 800179a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800179c:	2b00      	cmp	r3, #0
 800179e:	d181      	bne.n	80016a4 <arm_fir_f32+0x7fa>
      }

      /* Advance the state pointer by 8 to process the next group of 8 samples */
      pState = pState + 8;
 80017a0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80017a2:	3320      	adds	r3, #32
 80017a4:	677b      	str	r3, [r7, #116]	@ 0x74

      /* The results in the 8 accumulators, store in the destination buffer. */
      *pDst++ = acc0;
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	1d1a      	adds	r2, r3, #4
 80017aa:	607a      	str	r2, [r7, #4]
 80017ac:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80017ae:	601a      	str	r2, [r3, #0]
      *pDst++ = acc1;
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	1d1a      	adds	r2, r3, #4
 80017b4:	607a      	str	r2, [r7, #4]
 80017b6:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80017b8:	601a      	str	r2, [r3, #0]
      *pDst++ = acc2;
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	1d1a      	adds	r2, r3, #4
 80017be:	607a      	str	r2, [r7, #4]
 80017c0:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80017c2:	601a      	str	r2, [r3, #0]
      *pDst++ = acc3;
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	1d1a      	adds	r2, r3, #4
 80017c8:	607a      	str	r2, [r7, #4]
 80017ca:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80017cc:	601a      	str	r2, [r3, #0]
      *pDst++ = acc4;
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	1d1a      	adds	r2, r3, #4
 80017d2:	607a      	str	r2, [r7, #4]
 80017d4:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80017d6:	601a      	str	r2, [r3, #0]
      *pDst++ = acc5;
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	1d1a      	adds	r2, r3, #4
 80017dc:	607a      	str	r2, [r7, #4]
 80017de:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80017e0:	601a      	str	r2, [r3, #0]
      *pDst++ = acc6;
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	1d1a      	adds	r2, r3, #4
 80017e6:	607a      	str	r2, [r7, #4]
 80017e8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80017ea:	601a      	str	r2, [r3, #0]
      *pDst++ = acc7;
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	1d1a      	adds	r2, r3, #4
 80017f0:	607a      	str	r2, [r7, #4]
 80017f2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80017f4:	601a      	str	r2, [r3, #0]

      blkCnt--;
 80017f6:	6a3b      	ldr	r3, [r7, #32]
 80017f8:	3b01      	subs	r3, #1
 80017fa:	623b      	str	r3, [r7, #32]
   while(blkCnt > 0u)
 80017fc:	6a3b      	ldr	r3, [r7, #32]
 80017fe:	2b00      	cmp	r3, #0
 8001800:	f47f ab71 	bne.w	8000ee6 <arm_fir_f32+0x3c>
   }

   /* If the blockSize is not a multiple of 8, compute any remaining output samples here.
   ** No loop unrolling is used. */
   blkCnt = blockSize % 0x8u;
 8001804:	683b      	ldr	r3, [r7, #0]
 8001806:	f003 0307 	and.w	r3, r3, #7
 800180a:	623b      	str	r3, [r7, #32]

   while(blkCnt > 0u)
 800180c:	e033      	b.n	8001876 <arm_fir_f32+0x9cc>
   {
      /* Copy one sample at a time into state buffer */
      *pStateCurnt++ = *pSrc++;
 800180e:	68ba      	ldr	r2, [r7, #8]
 8001810:	1d13      	adds	r3, r2, #4
 8001812:	60bb      	str	r3, [r7, #8]
 8001814:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001816:	1d19      	adds	r1, r3, #4
 8001818:	6739      	str	r1, [r7, #112]	@ 0x70
 800181a:	6812      	ldr	r2, [r2, #0]
 800181c:	601a      	str	r2, [r3, #0]

      /* Set the accumulator to zero */
      acc0 = 0.0f;
 800181e:	f04f 0300 	mov.w	r3, #0
 8001822:	667b      	str	r3, [r7, #100]	@ 0x64

      /* Initialize state pointer */
      px = pState;
 8001824:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001826:	66fb      	str	r3, [r7, #108]	@ 0x6c

      /* Initialize Coefficient pointer */
      pb = (pCoeffs);
 8001828:	69fb      	ldr	r3, [r7, #28]
 800182a:	66bb      	str	r3, [r7, #104]	@ 0x68

      i = numTaps;
 800182c:	69bb      	ldr	r3, [r7, #24]
 800182e:	62bb      	str	r3, [r7, #40]	@ 0x28

      /* Perform the multiply-accumulates */
      do
      {
         acc0 += *px++ * *pb++;
 8001830:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001832:	1d1a      	adds	r2, r3, #4
 8001834:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8001836:	ed93 7a00 	vldr	s14, [r3]
 800183a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800183c:	1d1a      	adds	r2, r3, #4
 800183e:	66ba      	str	r2, [r7, #104]	@ 0x68
 8001840:	edd3 7a00 	vldr	s15, [r3]
 8001844:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001848:	ed97 7a19 	vldr	s14, [r7, #100]	@ 0x64
 800184c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001850:	edc7 7a19 	vstr	s15, [r7, #100]	@ 0x64
         i--;
 8001854:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001856:	3b01      	subs	r3, #1
 8001858:	62bb      	str	r3, [r7, #40]	@ 0x28

      } while(i > 0u);
 800185a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800185c:	2b00      	cmp	r3, #0
 800185e:	d1e7      	bne.n	8001830 <arm_fir_f32+0x986>

      /* The result is store in the destination buffer. */
      *pDst++ = acc0;
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	1d1a      	adds	r2, r3, #4
 8001864:	607a      	str	r2, [r7, #4]
 8001866:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8001868:	601a      	str	r2, [r3, #0]

      /* Advance state pointer by 1 for the next sample */
      pState = pState + 1;
 800186a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800186c:	3304      	adds	r3, #4
 800186e:	677b      	str	r3, [r7, #116]	@ 0x74

      blkCnt--;
 8001870:	6a3b      	ldr	r3, [r7, #32]
 8001872:	3b01      	subs	r3, #1
 8001874:	623b      	str	r3, [r7, #32]
   while(blkCnt > 0u)
 8001876:	6a3b      	ldr	r3, [r7, #32]
 8001878:	2b00      	cmp	r3, #0
 800187a:	d1c8      	bne.n	800180e <arm_fir_f32+0x964>
   /* Processing is complete.
   ** Now copy the last numTaps - 1 samples to the start of the state buffer.
   ** This prepares the state buffer for the next function call. */

   /* Points to the start of the state buffer */
   pStateCurnt = S->pState;
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	685b      	ldr	r3, [r3, #4]
 8001880:	673b      	str	r3, [r7, #112]	@ 0x70

   tapCnt = (numTaps - 1u) >> 2u;
 8001882:	69bb      	ldr	r3, [r7, #24]
 8001884:	3b01      	subs	r3, #1
 8001886:	089b      	lsrs	r3, r3, #2
 8001888:	627b      	str	r3, [r7, #36]	@ 0x24

   /* copy data */
   while(tapCnt > 0u)
 800188a:	e022      	b.n	80018d2 <arm_fir_f32+0xa28>
   {
      *pStateCurnt++ = *pState++;
 800188c:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 800188e:	1d13      	adds	r3, r2, #4
 8001890:	677b      	str	r3, [r7, #116]	@ 0x74
 8001892:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001894:	1d19      	adds	r1, r3, #4
 8001896:	6739      	str	r1, [r7, #112]	@ 0x70
 8001898:	6812      	ldr	r2, [r2, #0]
 800189a:	601a      	str	r2, [r3, #0]
      *pStateCurnt++ = *pState++;
 800189c:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 800189e:	1d13      	adds	r3, r2, #4
 80018a0:	677b      	str	r3, [r7, #116]	@ 0x74
 80018a2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80018a4:	1d19      	adds	r1, r3, #4
 80018a6:	6739      	str	r1, [r7, #112]	@ 0x70
 80018a8:	6812      	ldr	r2, [r2, #0]
 80018aa:	601a      	str	r2, [r3, #0]
      *pStateCurnt++ = *pState++;
 80018ac:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 80018ae:	1d13      	adds	r3, r2, #4
 80018b0:	677b      	str	r3, [r7, #116]	@ 0x74
 80018b2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80018b4:	1d19      	adds	r1, r3, #4
 80018b6:	6739      	str	r1, [r7, #112]	@ 0x70
 80018b8:	6812      	ldr	r2, [r2, #0]
 80018ba:	601a      	str	r2, [r3, #0]
      *pStateCurnt++ = *pState++;
 80018bc:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 80018be:	1d13      	adds	r3, r2, #4
 80018c0:	677b      	str	r3, [r7, #116]	@ 0x74
 80018c2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80018c4:	1d19      	adds	r1, r3, #4
 80018c6:	6739      	str	r1, [r7, #112]	@ 0x70
 80018c8:	6812      	ldr	r2, [r2, #0]
 80018ca:	601a      	str	r2, [r3, #0]

      /* Decrement the loop counter */
      tapCnt--;
 80018cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018ce:	3b01      	subs	r3, #1
 80018d0:	627b      	str	r3, [r7, #36]	@ 0x24
   while(tapCnt > 0u)
 80018d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d1d9      	bne.n	800188c <arm_fir_f32+0x9e2>
   }

   /* Calculate remaining number of copies */
   tapCnt = (numTaps - 1u) % 0x4u;
 80018d8:	69bb      	ldr	r3, [r7, #24]
 80018da:	3b01      	subs	r3, #1
 80018dc:	f003 0303 	and.w	r3, r3, #3
 80018e0:	627b      	str	r3, [r7, #36]	@ 0x24

   /* Copy the remaining q31_t data */
   while(tapCnt > 0u)
 80018e2:	e00a      	b.n	80018fa <arm_fir_f32+0xa50>
   {
      *pStateCurnt++ = *pState++;
 80018e4:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 80018e6:	1d13      	adds	r3, r2, #4
 80018e8:	677b      	str	r3, [r7, #116]	@ 0x74
 80018ea:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80018ec:	1d19      	adds	r1, r3, #4
 80018ee:	6739      	str	r1, [r7, #112]	@ 0x70
 80018f0:	6812      	ldr	r2, [r2, #0]
 80018f2:	601a      	str	r2, [r3, #0]

      /* Decrement the loop counter */
      tapCnt--;
 80018f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018f6:	3b01      	subs	r3, #1
 80018f8:	627b      	str	r3, [r7, #36]	@ 0x24
   while(tapCnt > 0u)
 80018fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d1f1      	bne.n	80018e4 <arm_fir_f32+0xa3a>
   }
}
 8001900:	bf00      	nop
 8001902:	bf00      	nop
 8001904:	377c      	adds	r7, #124	@ 0x7c
 8001906:	46bd      	mov	sp, r7
 8001908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190c:	4770      	bx	lr
	...

08001910 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	b08a      	sub	sp, #40	@ 0x28
 8001914:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001916:	f000 fcda 	bl	80022ce <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800191a:	f000 f86d 	bl	80019f8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800191e:	f000 f8ed 	bl	8001afc <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8001922:	f000 f8bb 	bl	8001a9c <MX_USART1_UART_Init>
  arm_fir_instance_f32 S;
  arm_status status;
  float32_t  *inputF32, *outputF32;

  /* Initialize input and output buffer pointers */
  inputF32 = &testInput_f32_1kHz_15kHz[0];
 8001926:	4b2a      	ldr	r3, [pc, #168]	@ (80019d0 <main+0xc0>)
 8001928:	617b      	str	r3, [r7, #20]
  outputF32 = &testOutput[0];
 800192a:	4b2a      	ldr	r3, [pc, #168]	@ (80019d4 <main+0xc4>)
 800192c:	613b      	str	r3, [r7, #16]

  /* Call FIR init function to initialize the instance structure. */
  arm_fir_init_f32(&S, NUM_TAPS, (float32_t *)&firCoeffs32[0], &firStateF32[0], blockSize);
 800192e:	4b2a      	ldr	r3, [pc, #168]	@ (80019d8 <main+0xc8>)
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	1d38      	adds	r0, r7, #4
 8001934:	9300      	str	r3, [sp, #0]
 8001936:	4b29      	ldr	r3, [pc, #164]	@ (80019dc <main+0xcc>)
 8001938:	4a29      	ldr	r2, [pc, #164]	@ (80019e0 <main+0xd0>)
 800193a:	211d      	movs	r1, #29
 800193c:	f7ff fa96 	bl	8000e6c <arm_fir_init_f32>

    /* ----------------------------------------------------------------------
    ** Call the FIR process function for every blockSize samples
    ** ------------------------------------------------------------------- */

  for(i=0; i < numBlocks; i++)
 8001940:	2300      	movs	r3, #0
 8001942:	61fb      	str	r3, [r7, #28]
 8001944:	e017      	b.n	8001976 <main+0x66>
  {
    arm_fir_f32(&S, inputF32 + (i * blockSize), outputF32 + (i * blockSize), blockSize);
 8001946:	4b24      	ldr	r3, [pc, #144]	@ (80019d8 <main+0xc8>)
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	69fa      	ldr	r2, [r7, #28]
 800194c:	fb02 f303 	mul.w	r3, r2, r3
 8001950:	009b      	lsls	r3, r3, #2
 8001952:	697a      	ldr	r2, [r7, #20]
 8001954:	18d1      	adds	r1, r2, r3
 8001956:	4b20      	ldr	r3, [pc, #128]	@ (80019d8 <main+0xc8>)
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	69fa      	ldr	r2, [r7, #28]
 800195c:	fb02 f303 	mul.w	r3, r2, r3
 8001960:	009b      	lsls	r3, r3, #2
 8001962:	693a      	ldr	r2, [r7, #16]
 8001964:	441a      	add	r2, r3
 8001966:	4b1c      	ldr	r3, [pc, #112]	@ (80019d8 <main+0xc8>)
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	1d38      	adds	r0, r7, #4
 800196c:	f7ff fa9d 	bl	8000eaa <arm_fir_f32>
  for(i=0; i < numBlocks; i++)
 8001970:	69fb      	ldr	r3, [r7, #28]
 8001972:	3301      	adds	r3, #1
 8001974:	61fb      	str	r3, [r7, #28]
 8001976:	4b1b      	ldr	r3, [pc, #108]	@ (80019e4 <main+0xd4>)
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	69fa      	ldr	r2, [r7, #28]
 800197c:	429a      	cmp	r2, r3
 800197e:	d3e2      	bcc.n	8001946 <main+0x36>
  /* ----------------------------------------------------------------------
  ** Compare the generated output against the reference output computed
  ** in MATLAB.
  ** ------------------------------------------------------------------- */

  snr = arm_snr_f32(&refOutput[0], &testOutput[0], TEST_LENGTH_SAMPLES);
 8001980:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8001984:	4913      	ldr	r1, [pc, #76]	@ (80019d4 <main+0xc4>)
 8001986:	4818      	ldr	r0, [pc, #96]	@ (80019e8 <main+0xd8>)
 8001988:	f000 fae8 	bl	8001f5c <arm_snr_f32>
 800198c:	eef0 7a40 	vmov.f32	s15, s0
 8001990:	4b16      	ldr	r3, [pc, #88]	@ (80019ec <main+0xdc>)
 8001992:	edc3 7a00 	vstr	s15, [r3]

  if (snr < SNR_THRESHOLD_F32)
 8001996:	4b15      	ldr	r3, [pc, #84]	@ (80019ec <main+0xdc>)
 8001998:	edd3 7a00 	vldr	s15, [r3]
 800199c:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 80019f0 <main+0xe0>
 80019a0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80019a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019a8:	d502      	bpl.n	80019b0 <main+0xa0>
  {
    status = ARM_MATH_TEST_FAILURE;
 80019aa:	23fa      	movs	r3, #250	@ 0xfa
 80019ac:	76fb      	strb	r3, [r7, #27]
 80019ae:	e001      	b.n	80019b4 <main+0xa4>
  }
  else
  {
    status = ARM_MATH_SUCCESS;
 80019b0:	2300      	movs	r3, #0
 80019b2:	76fb      	strb	r3, [r7, #27]
  }
  if(status == ARM_MATH_SUCCESS) state = 0;
 80019b4:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d103      	bne.n	80019c4 <main+0xb4>
 80019bc:	4b0d      	ldr	r3, [pc, #52]	@ (80019f4 <main+0xe4>)
 80019be:	2200      	movs	r2, #0
 80019c0:	601a      	str	r2, [r3, #0]
 80019c2:	e003      	b.n	80019cc <main+0xbc>
  else state = 1;
 80019c4:	4b0b      	ldr	r3, [pc, #44]	@ (80019f4 <main+0xe4>)
 80019c6:	2201      	movs	r2, #1
 80019c8:	601a      	str	r2, [r3, #0]

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80019ca:	bf00      	nop
 80019cc:	bf00      	nop
 80019ce:	e7fd      	b.n	80019cc <main+0xbc>
 80019d0:	20000000 	.word	0x20000000
 80019d4:	20000b0c 	.word	0x20000b0c
 80019d8:	20000a00 	.word	0x20000a00
 80019dc:	2000100c 	.word	0x2000100c
 80019e0:	08004fbc 	.word	0x08004fbc
 80019e4:	20000a04 	.word	0x20000a04
 80019e8:	20000500 	.word	0x20000500
 80019ec:	200010fc 	.word	0x200010fc
 80019f0:	430c0000 	.word	0x430c0000
 80019f4:	20000a08 	.word	0x20000a08

080019f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	b096      	sub	sp, #88	@ 0x58
 80019fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80019fe:	f107 0314 	add.w	r3, r7, #20
 8001a02:	2244      	movs	r2, #68	@ 0x44
 8001a04:	2100      	movs	r1, #0
 8001a06:	4618      	mov	r0, r3
 8001a08:	f003 f80f 	bl	8004a2a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001a0c:	463b      	mov	r3, r7
 8001a0e:	2200      	movs	r2, #0
 8001a10:	601a      	str	r2, [r3, #0]
 8001a12:	605a      	str	r2, [r3, #4]
 8001a14:	609a      	str	r2, [r3, #8]
 8001a16:	60da      	str	r2, [r3, #12]
 8001a18:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001a1a:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8001a1e:	f000 ffd1 	bl	80029c4 <HAL_PWREx_ControlVoltageScaling>
 8001a22:	4603      	mov	r3, r0
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d001      	beq.n	8001a2c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001a28:	f000 fa92 	bl	8001f50 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8001a2c:	2310      	movs	r3, #16
 8001a2e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001a30:	2301      	movs	r3, #1
 8001a32:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8001a34:	2300      	movs	r3, #0
 8001a36:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001a38:	2360      	movs	r3, #96	@ 0x60
 8001a3a:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001a3c:	2302      	movs	r3, #2
 8001a3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8001a40:	2301      	movs	r3, #1
 8001a42:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001a44:	2301      	movs	r3, #1
 8001a46:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 8001a48:	2328      	movs	r3, #40	@ 0x28
 8001a4a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001a4c:	2307      	movs	r3, #7
 8001a4e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001a50:	2302      	movs	r3, #2
 8001a52:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001a54:	2302      	movs	r3, #2
 8001a56:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001a58:	f107 0314 	add.w	r3, r7, #20
 8001a5c:	4618      	mov	r0, r3
 8001a5e:	f001 f807 	bl	8002a70 <HAL_RCC_OscConfig>
 8001a62:	4603      	mov	r3, r0
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d001      	beq.n	8001a6c <SystemClock_Config+0x74>
  {
    Error_Handler();
 8001a68:	f000 fa72 	bl	8001f50 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001a6c:	230f      	movs	r3, #15
 8001a6e:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001a70:	2303      	movs	r3, #3
 8001a72:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001a74:	2300      	movs	r3, #0
 8001a76:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001a78:	2300      	movs	r3, #0
 8001a7a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001a7c:	2300      	movs	r3, #0
 8001a7e:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001a80:	463b      	mov	r3, r7
 8001a82:	2104      	movs	r1, #4
 8001a84:	4618      	mov	r0, r3
 8001a86:	f001 fbcf 	bl	8003228 <HAL_RCC_ClockConfig>
 8001a8a:	4603      	mov	r3, r0
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d001      	beq.n	8001a94 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8001a90:	f000 fa5e 	bl	8001f50 <Error_Handler>
  }
}
 8001a94:	bf00      	nop
 8001a96:	3758      	adds	r7, #88	@ 0x58
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	bd80      	pop	{r7, pc}

08001a9c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001aa0:	4b14      	ldr	r3, [pc, #80]	@ (8001af4 <MX_USART1_UART_Init+0x58>)
 8001aa2:	4a15      	ldr	r2, [pc, #84]	@ (8001af8 <MX_USART1_UART_Init+0x5c>)
 8001aa4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001aa6:	4b13      	ldr	r3, [pc, #76]	@ (8001af4 <MX_USART1_UART_Init+0x58>)
 8001aa8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001aac:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001aae:	4b11      	ldr	r3, [pc, #68]	@ (8001af4 <MX_USART1_UART_Init+0x58>)
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001ab4:	4b0f      	ldr	r3, [pc, #60]	@ (8001af4 <MX_USART1_UART_Init+0x58>)
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001aba:	4b0e      	ldr	r3, [pc, #56]	@ (8001af4 <MX_USART1_UART_Init+0x58>)
 8001abc:	2200      	movs	r2, #0
 8001abe:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001ac0:	4b0c      	ldr	r3, [pc, #48]	@ (8001af4 <MX_USART1_UART_Init+0x58>)
 8001ac2:	220c      	movs	r2, #12
 8001ac4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001ac6:	4b0b      	ldr	r3, [pc, #44]	@ (8001af4 <MX_USART1_UART_Init+0x58>)
 8001ac8:	2200      	movs	r2, #0
 8001aca:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001acc:	4b09      	ldr	r3, [pc, #36]	@ (8001af4 <MX_USART1_UART_Init+0x58>)
 8001ace:	2200      	movs	r2, #0
 8001ad0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001ad2:	4b08      	ldr	r3, [pc, #32]	@ (8001af4 <MX_USART1_UART_Init+0x58>)
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001ad8:	4b06      	ldr	r3, [pc, #24]	@ (8001af4 <MX_USART1_UART_Init+0x58>)
 8001ada:	2200      	movs	r2, #0
 8001adc:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001ade:	4805      	ldr	r0, [pc, #20]	@ (8001af4 <MX_USART1_UART_Init+0x58>)
 8001ae0:	f002 fa82 	bl	8003fe8 <HAL_UART_Init>
 8001ae4:	4603      	mov	r3, r0
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d001      	beq.n	8001aee <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8001aea:	f000 fa31 	bl	8001f50 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001aee:	bf00      	nop
 8001af0:	bd80      	pop	{r7, pc}
 8001af2:	bf00      	nop
 8001af4:	20000a84 	.word	0x20000a84
 8001af8:	40013800 	.word	0x40013800

08001afc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	b08a      	sub	sp, #40	@ 0x28
 8001b00:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b02:	f107 0314 	add.w	r3, r7, #20
 8001b06:	2200      	movs	r2, #0
 8001b08:	601a      	str	r2, [r3, #0]
 8001b0a:	605a      	str	r2, [r3, #4]
 8001b0c:	609a      	str	r2, [r3, #8]
 8001b0e:	60da      	str	r2, [r3, #12]
 8001b10:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001b12:	4bbc      	ldr	r3, [pc, #752]	@ (8001e04 <MX_GPIO_Init+0x308>)
 8001b14:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b16:	4abb      	ldr	r2, [pc, #748]	@ (8001e04 <MX_GPIO_Init+0x308>)
 8001b18:	f043 0310 	orr.w	r3, r3, #16
 8001b1c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001b1e:	4bb9      	ldr	r3, [pc, #740]	@ (8001e04 <MX_GPIO_Init+0x308>)
 8001b20:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b22:	f003 0310 	and.w	r3, r3, #16
 8001b26:	613b      	str	r3, [r7, #16]
 8001b28:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b2a:	4bb6      	ldr	r3, [pc, #728]	@ (8001e04 <MX_GPIO_Init+0x308>)
 8001b2c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b2e:	4ab5      	ldr	r2, [pc, #724]	@ (8001e04 <MX_GPIO_Init+0x308>)
 8001b30:	f043 0304 	orr.w	r3, r3, #4
 8001b34:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001b36:	4bb3      	ldr	r3, [pc, #716]	@ (8001e04 <MX_GPIO_Init+0x308>)
 8001b38:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b3a:	f003 0304 	and.w	r3, r3, #4
 8001b3e:	60fb      	str	r3, [r7, #12]
 8001b40:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b42:	4bb0      	ldr	r3, [pc, #704]	@ (8001e04 <MX_GPIO_Init+0x308>)
 8001b44:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b46:	4aaf      	ldr	r2, [pc, #700]	@ (8001e04 <MX_GPIO_Init+0x308>)
 8001b48:	f043 0301 	orr.w	r3, r3, #1
 8001b4c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001b4e:	4bad      	ldr	r3, [pc, #692]	@ (8001e04 <MX_GPIO_Init+0x308>)
 8001b50:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b52:	f003 0301 	and.w	r3, r3, #1
 8001b56:	60bb      	str	r3, [r7, #8]
 8001b58:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b5a:	4baa      	ldr	r3, [pc, #680]	@ (8001e04 <MX_GPIO_Init+0x308>)
 8001b5c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b5e:	4aa9      	ldr	r2, [pc, #676]	@ (8001e04 <MX_GPIO_Init+0x308>)
 8001b60:	f043 0302 	orr.w	r3, r3, #2
 8001b64:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001b66:	4ba7      	ldr	r3, [pc, #668]	@ (8001e04 <MX_GPIO_Init+0x308>)
 8001b68:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b6a:	f003 0302 	and.w	r3, r3, #2
 8001b6e:	607b      	str	r3, [r7, #4]
 8001b70:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001b72:	4ba4      	ldr	r3, [pc, #656]	@ (8001e04 <MX_GPIO_Init+0x308>)
 8001b74:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b76:	4aa3      	ldr	r2, [pc, #652]	@ (8001e04 <MX_GPIO_Init+0x308>)
 8001b78:	f043 0308 	orr.w	r3, r3, #8
 8001b7c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001b7e:	4ba1      	ldr	r3, [pc, #644]	@ (8001e04 <MX_GPIO_Init+0x308>)
 8001b80:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b82:	f003 0308 	and.w	r3, r3, #8
 8001b86:	603b      	str	r3, [r7, #0]
 8001b88:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin, GPIO_PIN_RESET);
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	f44f 718a 	mov.w	r1, #276	@ 0x114
 8001b90:	489d      	ldr	r0, [pc, #628]	@ (8001e08 <MX_GPIO_Init+0x30c>)
 8001b92:	f000 fecd 	bl	8002930 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ARD_D10_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin, GPIO_PIN_RESET);
 8001b96:	2200      	movs	r2, #0
 8001b98:	f248 1104 	movw	r1, #33028	@ 0x8104
 8001b9c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001ba0:	f000 fec6 	bl	8002930 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	f24f 0114 	movw	r1, #61460	@ 0xf014
 8001baa:	4898      	ldr	r0, [pc, #608]	@ (8001e0c <MX_GPIO_Init+0x310>)
 8001bac:	f000 fec0 	bl	8002930 <HAL_GPIO_WritePin>
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, USB_OTG_FS_PWR_EN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin, GPIO_PIN_RESET);
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	f241 0181 	movw	r1, #4225	@ 0x1081
 8001bb6:	4896      	ldr	r0, [pc, #600]	@ (8001e10 <MX_GPIO_Init+0x314>)
 8001bb8:	f000 feba 	bl	8002930 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPBTLE_RF_SPI3_CSN_GPIO_Port, SPBTLE_RF_SPI3_CSN_Pin, GPIO_PIN_SET);
 8001bbc:	2201      	movs	r2, #1
 8001bbe:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001bc2:	4893      	ldr	r0, [pc, #588]	@ (8001e10 <MX_GPIO_Init+0x314>)
 8001bc4:	f000 feb4 	bl	8002930 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin, GPIO_PIN_RESET);
 8001bc8:	2200      	movs	r2, #0
 8001bca:	f44f 7110 	mov.w	r1, #576	@ 0x240
 8001bce:	4891      	ldr	r0, [pc, #580]	@ (8001e14 <MX_GPIO_Init+0x318>)
 8001bd0:	f000 feae 	bl	8002930 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPSGRF_915_SPI3_CSN_GPIO_Port, SPSGRF_915_SPI3_CSN_Pin, GPIO_PIN_SET);
 8001bd4:	2201      	movs	r2, #1
 8001bd6:	2120      	movs	r1, #32
 8001bd8:	488c      	ldr	r0, [pc, #560]	@ (8001e0c <MX_GPIO_Init+0x310>)
 8001bda:	f000 fea9 	bl	8002930 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ISM43362_SPI3_CSN_GPIO_Port, ISM43362_SPI3_CSN_Pin, GPIO_PIN_SET);
 8001bde:	2201      	movs	r2, #1
 8001be0:	2101      	movs	r1, #1
 8001be2:	4889      	ldr	r0, [pc, #548]	@ (8001e08 <MX_GPIO_Init+0x30c>)
 8001be4:	f000 fea4 	bl	8002930 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : M24SR64_Y_RF_DISABLE_Pin M24SR64_Y_GPO_Pin ISM43362_RST_Pin ISM43362_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin|ISM43362_SPI3_CSN_Pin;
 8001be8:	f240 1315 	movw	r3, #277	@ 0x115
 8001bec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001bee:	2301      	movs	r3, #1
 8001bf0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001bfa:	f107 0314 	add.w	r3, r7, #20
 8001bfe:	4619      	mov	r1, r3
 8001c00:	4881      	ldr	r0, [pc, #516]	@ (8001e08 <MX_GPIO_Init+0x30c>)
 8001c02:	f000 fceb 	bl	80025dc <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_OVRCR_EXTI3_Pin SPSGRF_915_GPIO3_EXTI5_Pin SPBTLE_RF_IRQ_EXTI6_Pin ISM43362_DRDY_EXTI1_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVRCR_EXTI3_Pin|SPSGRF_915_GPIO3_EXTI5_Pin|SPBTLE_RF_IRQ_EXTI6_Pin|ISM43362_DRDY_EXTI1_Pin;
 8001c06:	236a      	movs	r3, #106	@ 0x6a
 8001c08:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001c0a:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001c0e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c10:	2300      	movs	r3, #0
 8001c12:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001c14:	f107 0314 	add.w	r3, r7, #20
 8001c18:	4619      	mov	r1, r3
 8001c1a:	487b      	ldr	r0, [pc, #492]	@ (8001e08 <MX_GPIO_Init+0x30c>)
 8001c1c:	f000 fcde 	bl	80025dc <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_EXTI13_Pin */
  GPIO_InitStruct.Pin = BUTTON_EXTI13_Pin;
 8001c20:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001c24:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001c26:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8001c2a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c2c:	2300      	movs	r3, #0
 8001c2e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BUTTON_EXTI13_GPIO_Port, &GPIO_InitStruct);
 8001c30:	f107 0314 	add.w	r3, r7, #20
 8001c34:	4619      	mov	r1, r3
 8001c36:	4877      	ldr	r0, [pc, #476]	@ (8001e14 <MX_GPIO_Init+0x318>)
 8001c38:	f000 fcd0 	bl	80025dc <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_A5_Pin ARD_A4_Pin ARD_A3_Pin ARD_A2_Pin
                           ARD_A1_Pin ARD_A0_Pin */
  GPIO_InitStruct.Pin = ARD_A5_Pin|ARD_A4_Pin|ARD_A3_Pin|ARD_A2_Pin
 8001c3c:	233f      	movs	r3, #63	@ 0x3f
 8001c3e:	617b      	str	r3, [r7, #20]
                          |ARD_A1_Pin|ARD_A0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001c40:	230b      	movs	r3, #11
 8001c42:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c44:	2300      	movs	r3, #0
 8001c46:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c48:	f107 0314 	add.w	r3, r7, #20
 8001c4c:	4619      	mov	r1, r3
 8001c4e:	4871      	ldr	r0, [pc, #452]	@ (8001e14 <MX_GPIO_Init+0x318>)
 8001c50:	f000 fcc4 	bl	80025dc <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D1_Pin ARD_D0_Pin */
  GPIO_InitStruct.Pin = ARD_D1_Pin|ARD_D0_Pin;
 8001c54:	2303      	movs	r3, #3
 8001c56:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c58:	2302      	movs	r3, #2
 8001c5a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c5c:	2300      	movs	r3, #0
 8001c5e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c60:	2303      	movs	r3, #3
 8001c62:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001c64:	2308      	movs	r3, #8
 8001c66:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c68:	f107 0314 	add.w	r3, r7, #20
 8001c6c:	4619      	mov	r1, r3
 8001c6e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001c72:	f000 fcb3 	bl	80025dc <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D10_Pin SPBTLE_RF_RST_Pin ARD_D9_Pin */
  GPIO_InitStruct.Pin = ARD_D10_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin;
 8001c76:	f248 1304 	movw	r3, #33028	@ 0x8104
 8001c7a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c7c:	2301      	movs	r3, #1
 8001c7e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c80:	2300      	movs	r3, #0
 8001c82:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c84:	2300      	movs	r3, #0
 8001c86:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c88:	f107 0314 	add.w	r3, r7, #20
 8001c8c:	4619      	mov	r1, r3
 8001c8e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001c92:	f000 fca3 	bl	80025dc <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D4_Pin */
  GPIO_InitStruct.Pin = ARD_D4_Pin;
 8001c96:	2308      	movs	r3, #8
 8001c98:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c9a:	2302      	movs	r3, #2
 8001c9c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001ca6:	2301      	movs	r3, #1
 8001ca8:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(ARD_D4_GPIO_Port, &GPIO_InitStruct);
 8001caa:	f107 0314 	add.w	r3, r7, #20
 8001cae:	4619      	mov	r1, r3
 8001cb0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001cb4:	f000 fc92 	bl	80025dc <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D7_Pin */
  GPIO_InitStruct.Pin = ARD_D7_Pin;
 8001cb8:	2310      	movs	r3, #16
 8001cba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001cbc:	230b      	movs	r3, #11
 8001cbe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cc0:	2300      	movs	r3, #0
 8001cc2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D7_GPIO_Port, &GPIO_InitStruct);
 8001cc4:	f107 0314 	add.w	r3, r7, #20
 8001cc8:	4619      	mov	r1, r3
 8001cca:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001cce:	f000 fc85 	bl	80025dc <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D13_Pin ARD_D12_Pin ARD_D11_Pin */
  GPIO_InitStruct.Pin = ARD_D13_Pin|ARD_D12_Pin|ARD_D11_Pin;
 8001cd2:	23e0      	movs	r3, #224	@ 0xe0
 8001cd4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cd6:	2302      	movs	r3, #2
 8001cd8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cda:	2300      	movs	r3, #0
 8001cdc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cde:	2303      	movs	r3, #3
 8001ce0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001ce2:	2305      	movs	r3, #5
 8001ce4:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ce6:	f107 0314 	add.w	r3, r7, #20
 8001cea:	4619      	mov	r1, r3
 8001cec:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001cf0:	f000 fc74 	bl	80025dc <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D3_Pin */
  GPIO_InitStruct.Pin = ARD_D3_Pin;
 8001cf4:	2301      	movs	r3, #1
 8001cf6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001cf8:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001cfc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cfe:	2300      	movs	r3, #0
 8001d00:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D3_GPIO_Port, &GPIO_InitStruct);
 8001d02:	f107 0314 	add.w	r3, r7, #20
 8001d06:	4619      	mov	r1, r3
 8001d08:	4840      	ldr	r0, [pc, #256]	@ (8001e0c <MX_GPIO_Init+0x310>)
 8001d0a:	f000 fc67 	bl	80025dc <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D6_Pin */
  GPIO_InitStruct.Pin = ARD_D6_Pin;
 8001d0e:	2302      	movs	r3, #2
 8001d10:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001d12:	230b      	movs	r3, #11
 8001d14:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d16:	2300      	movs	r3, #0
 8001d18:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D6_GPIO_Port, &GPIO_InitStruct);
 8001d1a:	f107 0314 	add.w	r3, r7, #20
 8001d1e:	4619      	mov	r1, r3
 8001d20:	483a      	ldr	r0, [pc, #232]	@ (8001e0c <MX_GPIO_Init+0x310>)
 8001d22:	f000 fc5b 	bl	80025dc <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D8_Pin ISM43362_BOOT0_Pin ISM43362_WAKEUP_Pin LED2_Pin
                           SPSGRF_915_SDN_Pin ARD_D5_Pin SPSGRF_915_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 8001d26:	f24f 0334 	movw	r3, #61492	@ 0xf034
 8001d2a:	617b      	str	r3, [r7, #20]
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin|SPSGRF_915_SPI3_CSN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d2c:	2301      	movs	r3, #1
 8001d2e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d30:	2300      	movs	r3, #0
 8001d32:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d34:	2300      	movs	r3, #0
 8001d36:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d38:	f107 0314 	add.w	r3, r7, #20
 8001d3c:	4619      	mov	r1, r3
 8001d3e:	4833      	ldr	r0, [pc, #204]	@ (8001e0c <MX_GPIO_Init+0x310>)
 8001d40:	f000 fc4c 	bl	80025dc <HAL_GPIO_Init>

  /*Configure GPIO pins : DFSDM1_DATIN2_Pin DFSDM1_CKOUT_Pin */
  GPIO_InitStruct.Pin = DFSDM1_DATIN2_Pin|DFSDM1_CKOUT_Pin;
 8001d44:	f44f 7320 	mov.w	r3, #640	@ 0x280
 8001d48:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d4a:	2302      	movs	r3, #2
 8001d4c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d4e:	2300      	movs	r3, #0
 8001d50:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d52:	2300      	movs	r3, #0
 8001d54:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8001d56:	2306      	movs	r3, #6
 8001d58:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001d5a:	f107 0314 	add.w	r3, r7, #20
 8001d5e:	4619      	mov	r1, r3
 8001d60:	4829      	ldr	r0, [pc, #164]	@ (8001e08 <MX_GPIO_Init+0x30c>)
 8001d62:	f000 fc3b 	bl	80025dc <HAL_GPIO_Init>

  /*Configure GPIO pins : QUADSPI_CLK_Pin QUADSPI_NCS_Pin OQUADSPI_BK1_IO0_Pin QUADSPI_BK1_IO1_Pin
                           QUAD_SPI_BK1_IO2_Pin QUAD_SPI_BK1_IO3_Pin */
  GPIO_InitStruct.Pin = QUADSPI_CLK_Pin|QUADSPI_NCS_Pin|OQUADSPI_BK1_IO0_Pin|QUADSPI_BK1_IO1_Pin
 8001d66:	f44f 437c 	mov.w	r3, #64512	@ 0xfc00
 8001d6a:	617b      	str	r3, [r7, #20]
                          |QUAD_SPI_BK1_IO2_Pin|QUAD_SPI_BK1_IO3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d6c:	2302      	movs	r3, #2
 8001d6e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d70:	2300      	movs	r3, #0
 8001d72:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d74:	2303      	movs	r3, #3
 8001d76:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8001d78:	230a      	movs	r3, #10
 8001d7a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001d7c:	f107 0314 	add.w	r3, r7, #20
 8001d80:	4619      	mov	r1, r3
 8001d82:	4821      	ldr	r0, [pc, #132]	@ (8001e08 <MX_GPIO_Init+0x30c>)
 8001d84:	f000 fc2a 	bl	80025dc <HAL_GPIO_Init>

  /*Configure GPIO pins : INTERNAL_I2C2_SCL_Pin INTERNAL_I2C2_SDA_Pin */
  GPIO_InitStruct.Pin = INTERNAL_I2C2_SCL_Pin|INTERNAL_I2C2_SDA_Pin;
 8001d88:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8001d8c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001d8e:	2312      	movs	r3, #18
 8001d90:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d92:	2300      	movs	r3, #0
 8001d94:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d96:	2303      	movs	r3, #3
 8001d98:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001d9a:	2304      	movs	r3, #4
 8001d9c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d9e:	f107 0314 	add.w	r3, r7, #20
 8001da2:	4619      	mov	r1, r3
 8001da4:	4819      	ldr	r0, [pc, #100]	@ (8001e0c <MX_GPIO_Init+0x310>)
 8001da6:	f000 fc19 	bl	80025dc <HAL_GPIO_Init>

  /*Configure GPIO pins : INTERNAL_UART3_TX_Pin INTERNAL_UART3_RX_Pin */
  GPIO_InitStruct.Pin = INTERNAL_UART3_TX_Pin|INTERNAL_UART3_RX_Pin;
 8001daa:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001dae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001db0:	2302      	movs	r3, #2
 8001db2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001db4:	2300      	movs	r3, #0
 8001db6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001db8:	2303      	movs	r3, #3
 8001dba:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001dbc:	2307      	movs	r3, #7
 8001dbe:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001dc0:	f107 0314 	add.w	r3, r7, #20
 8001dc4:	4619      	mov	r1, r3
 8001dc6:	4812      	ldr	r0, [pc, #72]	@ (8001e10 <MX_GPIO_Init+0x314>)
 8001dc8:	f000 fc08 	bl	80025dc <HAL_GPIO_Init>

  /*Configure GPIO pins : LPS22HB_INT_DRDY_EXTI0_Pin LSM6DSL_INT1_EXTI11_Pin ARD_D2_Pin HTS221_DRDY_EXTI15_Pin
                           PMOD_IRQ_EXTI12_Pin */
  GPIO_InitStruct.Pin = LPS22HB_INT_DRDY_EXTI0_Pin|LSM6DSL_INT1_EXTI11_Pin|ARD_D2_Pin|HTS221_DRDY_EXTI15_Pin
 8001dcc:	f64c 4304 	movw	r3, #52228	@ 0xcc04
 8001dd0:	617b      	str	r3, [r7, #20]
                          |PMOD_IRQ_EXTI12_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001dd2:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001dd6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dd8:	2300      	movs	r3, #0
 8001dda:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001ddc:	f107 0314 	add.w	r3, r7, #20
 8001de0:	4619      	mov	r1, r3
 8001de2:	480b      	ldr	r0, [pc, #44]	@ (8001e10 <MX_GPIO_Init+0x314>)
 8001de4:	f000 fbfa 	bl	80025dc <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_PWR_EN_Pin SPBTLE_RF_SPI3_CSN_Pin PMOD_RESET_Pin STSAFE_A100_RESET_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin|SPBTLE_RF_SPI3_CSN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin;
 8001de8:	f243 0381 	movw	r3, #12417	@ 0x3081
 8001dec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001dee:	2301      	movs	r3, #1
 8001df0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001df2:	2300      	movs	r3, #0
 8001df4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001df6:	2300      	movs	r3, #0
 8001df8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001dfa:	f107 0314 	add.w	r3, r7, #20
 8001dfe:	4619      	mov	r1, r3
 8001e00:	e00a      	b.n	8001e18 <MX_GPIO_Init+0x31c>
 8001e02:	bf00      	nop
 8001e04:	40021000 	.word	0x40021000
 8001e08:	48001000 	.word	0x48001000
 8001e0c:	48000400 	.word	0x48000400
 8001e10:	48000c00 	.word	0x48000c00
 8001e14:	48000800 	.word	0x48000800
 8001e18:	484a      	ldr	r0, [pc, #296]	@ (8001f44 <MX_GPIO_Init+0x448>)
 8001e1a:	f000 fbdf 	bl	80025dc <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_XSHUT_Pin LED3_WIFI__LED4_BLE_Pin */
  GPIO_InitStruct.Pin = VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin;
 8001e1e:	f44f 7310 	mov.w	r3, #576	@ 0x240
 8001e22:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e24:	2301      	movs	r3, #1
 8001e26:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e28:	2300      	movs	r3, #0
 8001e2a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e2c:	2300      	movs	r3, #0
 8001e2e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e30:	f107 0314 	add.w	r3, r7, #20
 8001e34:	4619      	mov	r1, r3
 8001e36:	4844      	ldr	r0, [pc, #272]	@ (8001f48 <MX_GPIO_Init+0x44c>)
 8001e38:	f000 fbd0 	bl	80025dc <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_GPIO1_EXTI7_Pin LSM3MDL_DRDY_EXTI8_Pin */
  GPIO_InitStruct.Pin = VL53L0X_GPIO1_EXTI7_Pin|LSM3MDL_DRDY_EXTI8_Pin;
 8001e3c:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8001e40:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001e42:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001e46:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e48:	2300      	movs	r3, #0
 8001e4a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e4c:	f107 0314 	add.w	r3, r7, #20
 8001e50:	4619      	mov	r1, r3
 8001e52:	483d      	ldr	r0, [pc, #244]	@ (8001f48 <MX_GPIO_Init+0x44c>)
 8001e54:	f000 fbc2 	bl	80025dc <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_VBUS_Pin;
 8001e58:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001e5c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e5e:	2300      	movs	r3, #0
 8001e60:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e62:	2300      	movs	r3, #0
 8001e64:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USB_OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001e66:	f107 0314 	add.w	r3, r7, #20
 8001e6a:	4619      	mov	r1, r3
 8001e6c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001e70:	f000 fbb4 	bl	80025dc <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_ID_Pin USB_OTG_FS_DM_Pin USB_OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_ID_Pin|USB_OTG_FS_DM_Pin|USB_OTG_FS_DP_Pin;
 8001e74:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8001e78:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e7a:	2302      	movs	r3, #2
 8001e7c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e7e:	2300      	movs	r3, #0
 8001e80:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e82:	2303      	movs	r3, #3
 8001e84:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001e86:	230a      	movs	r3, #10
 8001e88:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e8a:	f107 0314 	add.w	r3, r7, #20
 8001e8e:	4619      	mov	r1, r3
 8001e90:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001e94:	f000 fba2 	bl	80025dc <HAL_GPIO_Init>

  /*Configure GPIO pins : INTERNAL_SPI3_SCK_Pin INTERNAL_SPI3_MISO_Pin INTERNAL_SPI3_MOSI_Pin */
  GPIO_InitStruct.Pin = INTERNAL_SPI3_SCK_Pin|INTERNAL_SPI3_MISO_Pin|INTERNAL_SPI3_MOSI_Pin;
 8001e98:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8001e9c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e9e:	2302      	movs	r3, #2
 8001ea0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ea6:	2303      	movs	r3, #3
 8001ea8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001eaa:	2306      	movs	r3, #6
 8001eac:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001eae:	f107 0314 	add.w	r3, r7, #20
 8001eb2:	4619      	mov	r1, r3
 8001eb4:	4824      	ldr	r0, [pc, #144]	@ (8001f48 <MX_GPIO_Init+0x44c>)
 8001eb6:	f000 fb91 	bl	80025dc <HAL_GPIO_Init>

  /*Configure GPIO pin : PMOD_SPI2_SCK_Pin */
  GPIO_InitStruct.Pin = PMOD_SPI2_SCK_Pin;
 8001eba:	2302      	movs	r3, #2
 8001ebc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ebe:	2302      	movs	r3, #2
 8001ec0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ec2:	2300      	movs	r3, #0
 8001ec4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ec6:	2303      	movs	r3, #3
 8001ec8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001eca:	2305      	movs	r3, #5
 8001ecc:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(PMOD_SPI2_SCK_GPIO_Port, &GPIO_InitStruct);
 8001ece:	f107 0314 	add.w	r3, r7, #20
 8001ed2:	4619      	mov	r1, r3
 8001ed4:	481b      	ldr	r0, [pc, #108]	@ (8001f44 <MX_GPIO_Init+0x448>)
 8001ed6:	f000 fb81 	bl	80025dc <HAL_GPIO_Init>

  /*Configure GPIO pins : PMOD_UART2_CTS_Pin PMOD_UART2_RTS_Pin PMOD_UART2_TX_Pin PMOD_UART2_RX_Pin */
  GPIO_InitStruct.Pin = PMOD_UART2_CTS_Pin|PMOD_UART2_RTS_Pin|PMOD_UART2_TX_Pin|PMOD_UART2_RX_Pin;
 8001eda:	2378      	movs	r3, #120	@ 0x78
 8001edc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ede:	2302      	movs	r3, #2
 8001ee0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ee6:	2303      	movs	r3, #3
 8001ee8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001eea:	2307      	movs	r3, #7
 8001eec:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001eee:	f107 0314 	add.w	r3, r7, #20
 8001ef2:	4619      	mov	r1, r3
 8001ef4:	4813      	ldr	r0, [pc, #76]	@ (8001f44 <MX_GPIO_Init+0x448>)
 8001ef6:	f000 fb71 	bl	80025dc <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D15_Pin ARD_D14_Pin */
  GPIO_InitStruct.Pin = ARD_D15_Pin|ARD_D14_Pin;
 8001efa:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001efe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001f00:	2312      	movs	r3, #18
 8001f02:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f04:	2300      	movs	r3, #0
 8001f06:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f08:	2303      	movs	r3, #3
 8001f0a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001f0c:	2304      	movs	r3, #4
 8001f0e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f10:	f107 0314 	add.w	r3, r7, #20
 8001f14:	4619      	mov	r1, r3
 8001f16:	480d      	ldr	r0, [pc, #52]	@ (8001f4c <MX_GPIO_Init+0x450>)
 8001f18:	f000 fb60 	bl	80025dc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	2100      	movs	r1, #0
 8001f20:	2017      	movs	r0, #23
 8001f22:	f000 fb24 	bl	800256e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001f26:	2017      	movs	r0, #23
 8001f28:	f000 fb3d 	bl	80025a6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	2100      	movs	r1, #0
 8001f30:	2028      	movs	r0, #40	@ 0x28
 8001f32:	f000 fb1c 	bl	800256e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001f36:	2028      	movs	r0, #40	@ 0x28
 8001f38:	f000 fb35 	bl	80025a6 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8001f3c:	bf00      	nop
 8001f3e:	3728      	adds	r7, #40	@ 0x28
 8001f40:	46bd      	mov	sp, r7
 8001f42:	bd80      	pop	{r7, pc}
 8001f44:	48000c00 	.word	0x48000c00
 8001f48:	48000800 	.word	0x48000800
 8001f4c:	48000400 	.word	0x48000400

08001f50 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001f50:	b480      	push	{r7}
 8001f52:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001f54:	b672      	cpsid	i
}
 8001f56:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001f58:	bf00      	nop
 8001f5a:	e7fd      	b.n	8001f58 <Error_Handler+0x8>

08001f5c <arm_snr_f32>:
 * The function Caluclates signal to noise ratio for the reference output
 * and test output
 */

float arm_snr_f32(float *pRef, float *pTest, uint32_t buffSize)
{
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	b08a      	sub	sp, #40	@ 0x28
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	60f8      	str	r0, [r7, #12]
 8001f64:	60b9      	str	r1, [r7, #8]
 8001f66:	607a      	str	r2, [r7, #4]
  float EnergySignal = 0.0, EnergyError = 0.0;
 8001f68:	f04f 0300 	mov.w	r3, #0
 8001f6c:	627b      	str	r3, [r7, #36]	@ 0x24
 8001f6e:	f04f 0300 	mov.w	r3, #0
 8001f72:	613b      	str	r3, [r7, #16]
  uint32_t i;
  float SNR;
  int temp;
  int *test;

  for (i = 0; i < buffSize; i++)
 8001f74:	2300      	movs	r3, #0
 8001f76:	623b      	str	r3, [r7, #32]
 8001f78:	e058      	b.n	800202c <arm_snr_f32+0xd0>
    {
 	  /* Checking for a NAN value in pRef array */
	  test =   (int *)(&pRef[i]);
 8001f7a:	6a3b      	ldr	r3, [r7, #32]
 8001f7c:	009b      	lsls	r3, r3, #2
 8001f7e:	68fa      	ldr	r2, [r7, #12]
 8001f80:	4413      	add	r3, r2
 8001f82:	61fb      	str	r3, [r7, #28]
      temp =  *test;
 8001f84:	69fb      	ldr	r3, [r7, #28]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	61bb      	str	r3, [r7, #24]

	  if (temp == 0x7FC00000)
 8001f8a:	69bb      	ldr	r3, [r7, #24]
 8001f8c:	4a43      	ldr	r2, [pc, #268]	@ (800209c <arm_snr_f32+0x140>)
 8001f8e:	4293      	cmp	r3, r2
 8001f90:	d102      	bne.n	8001f98 <arm_snr_f32+0x3c>
	  {
	  		return(0);
 8001f92:	f04f 0300 	mov.w	r3, #0
 8001f96:	e07a      	b.n	800208e <arm_snr_f32+0x132>
	  }

	  /* Checking for a NAN value in pTest array */
	  test =   (int *)(&pTest[i]);
 8001f98:	6a3b      	ldr	r3, [r7, #32]
 8001f9a:	009b      	lsls	r3, r3, #2
 8001f9c:	68ba      	ldr	r2, [r7, #8]
 8001f9e:	4413      	add	r3, r2
 8001fa0:	61fb      	str	r3, [r7, #28]
      temp =  *test;
 8001fa2:	69fb      	ldr	r3, [r7, #28]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	61bb      	str	r3, [r7, #24]

	  if (temp == 0x7FC00000)
 8001fa8:	69bb      	ldr	r3, [r7, #24]
 8001faa:	4a3c      	ldr	r2, [pc, #240]	@ (800209c <arm_snr_f32+0x140>)
 8001fac:	4293      	cmp	r3, r2
 8001fae:	d102      	bne.n	8001fb6 <arm_snr_f32+0x5a>
	  {
	  		return(0);
 8001fb0:	f04f 0300 	mov.w	r3, #0
 8001fb4:	e06b      	b.n	800208e <arm_snr_f32+0x132>
	  }
      EnergySignal += pRef[i] * pRef[i];
 8001fb6:	6a3b      	ldr	r3, [r7, #32]
 8001fb8:	009b      	lsls	r3, r3, #2
 8001fba:	68fa      	ldr	r2, [r7, #12]
 8001fbc:	4413      	add	r3, r2
 8001fbe:	ed93 7a00 	vldr	s14, [r3]
 8001fc2:	6a3b      	ldr	r3, [r7, #32]
 8001fc4:	009b      	lsls	r3, r3, #2
 8001fc6:	68fa      	ldr	r2, [r7, #12]
 8001fc8:	4413      	add	r3, r2
 8001fca:	edd3 7a00 	vldr	s15, [r3]
 8001fce:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001fd2:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8001fd6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001fda:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
      EnergyError += (pRef[i] - pTest[i]) * (pRef[i] - pTest[i]);
 8001fde:	6a3b      	ldr	r3, [r7, #32]
 8001fe0:	009b      	lsls	r3, r3, #2
 8001fe2:	68fa      	ldr	r2, [r7, #12]
 8001fe4:	4413      	add	r3, r2
 8001fe6:	ed93 7a00 	vldr	s14, [r3]
 8001fea:	6a3b      	ldr	r3, [r7, #32]
 8001fec:	009b      	lsls	r3, r3, #2
 8001fee:	68ba      	ldr	r2, [r7, #8]
 8001ff0:	4413      	add	r3, r2
 8001ff2:	edd3 7a00 	vldr	s15, [r3]
 8001ff6:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001ffa:	6a3b      	ldr	r3, [r7, #32]
 8001ffc:	009b      	lsls	r3, r3, #2
 8001ffe:	68fa      	ldr	r2, [r7, #12]
 8002000:	4413      	add	r3, r2
 8002002:	edd3 6a00 	vldr	s13, [r3]
 8002006:	6a3b      	ldr	r3, [r7, #32]
 8002008:	009b      	lsls	r3, r3, #2
 800200a:	68ba      	ldr	r2, [r7, #8]
 800200c:	4413      	add	r3, r2
 800200e:	edd3 7a00 	vldr	s15, [r3]
 8002012:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8002016:	ee27 7a27 	vmul.f32	s14, s14, s15
 800201a:	edd7 7a04 	vldr	s15, [r7, #16]
 800201e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002022:	edc7 7a04 	vstr	s15, [r7, #16]
  for (i = 0; i < buffSize; i++)
 8002026:	6a3b      	ldr	r3, [r7, #32]
 8002028:	3301      	adds	r3, #1
 800202a:	623b      	str	r3, [r7, #32]
 800202c:	6a3a      	ldr	r2, [r7, #32]
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	429a      	cmp	r2, r3
 8002032:	d3a2      	bcc.n	8001f7a <arm_snr_f32+0x1e>
    }

	/* Checking for a NAN value in EnergyError */
	test =   (int *)(&EnergyError);
 8002034:	f107 0310 	add.w	r3, r7, #16
 8002038:	61fb      	str	r3, [r7, #28]
    temp =  *test;
 800203a:	69fb      	ldr	r3, [r7, #28]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	61bb      	str	r3, [r7, #24]

    if (temp == 0x7FC00000)
 8002040:	69bb      	ldr	r3, [r7, #24]
 8002042:	4a16      	ldr	r2, [pc, #88]	@ (800209c <arm_snr_f32+0x140>)
 8002044:	4293      	cmp	r3, r2
 8002046:	d102      	bne.n	800204e <arm_snr_f32+0xf2>
    {
  		return(0);
 8002048:	f04f 0300 	mov.w	r3, #0
 800204c:	e01f      	b.n	800208e <arm_snr_f32+0x132>
    }


  SNR = 10 * log10 (EnergySignal / EnergyError);
 800204e:	edd7 7a04 	vldr	s15, [r7, #16]
 8002052:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8002056:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800205a:	ee16 0a90 	vmov	r0, s13
 800205e:	f7fe fa17 	bl	8000490 <__aeabi_f2d>
 8002062:	4602      	mov	r2, r0
 8002064:	460b      	mov	r3, r1
 8002066:	ec43 2b10 	vmov	d0, r2, r3
 800206a:	f002 fd11 	bl	8004a90 <log10>
 800206e:	ec51 0b10 	vmov	r0, r1, d0
 8002072:	f04f 0200 	mov.w	r2, #0
 8002076:	4b0a      	ldr	r3, [pc, #40]	@ (80020a0 <arm_snr_f32+0x144>)
 8002078:	f7fe fa62 	bl	8000540 <__aeabi_dmul>
 800207c:	4602      	mov	r2, r0
 800207e:	460b      	mov	r3, r1
 8002080:	4610      	mov	r0, r2
 8002082:	4619      	mov	r1, r3
 8002084:	f7fe fd0c 	bl	8000aa0 <__aeabi_d2f>
 8002088:	4603      	mov	r3, r0
 800208a:	617b      	str	r3, [r7, #20]

  return (SNR);
 800208c:	697b      	ldr	r3, [r7, #20]

}
 800208e:	ee07 3a90 	vmov	s15, r3
 8002092:	eeb0 0a67 	vmov.f32	s0, s15
 8002096:	3728      	adds	r7, #40	@ 0x28
 8002098:	46bd      	mov	sp, r7
 800209a:	bd80      	pop	{r7, pc}
 800209c:	7fc00000 	.word	0x7fc00000
 80020a0:	40240000 	.word	0x40240000

080020a4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80020a4:	b480      	push	{r7}
 80020a6:	b083      	sub	sp, #12
 80020a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80020aa:	4b0f      	ldr	r3, [pc, #60]	@ (80020e8 <HAL_MspInit+0x44>)
 80020ac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80020ae:	4a0e      	ldr	r2, [pc, #56]	@ (80020e8 <HAL_MspInit+0x44>)
 80020b0:	f043 0301 	orr.w	r3, r3, #1
 80020b4:	6613      	str	r3, [r2, #96]	@ 0x60
 80020b6:	4b0c      	ldr	r3, [pc, #48]	@ (80020e8 <HAL_MspInit+0x44>)
 80020b8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80020ba:	f003 0301 	and.w	r3, r3, #1
 80020be:	607b      	str	r3, [r7, #4]
 80020c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80020c2:	4b09      	ldr	r3, [pc, #36]	@ (80020e8 <HAL_MspInit+0x44>)
 80020c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80020c6:	4a08      	ldr	r2, [pc, #32]	@ (80020e8 <HAL_MspInit+0x44>)
 80020c8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80020cc:	6593      	str	r3, [r2, #88]	@ 0x58
 80020ce:	4b06      	ldr	r3, [pc, #24]	@ (80020e8 <HAL_MspInit+0x44>)
 80020d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80020d2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80020d6:	603b      	str	r3, [r7, #0]
 80020d8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80020da:	bf00      	nop
 80020dc:	370c      	adds	r7, #12
 80020de:	46bd      	mov	sp, r7
 80020e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e4:	4770      	bx	lr
 80020e6:	bf00      	nop
 80020e8:	40021000 	.word	0x40021000

080020ec <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80020ec:	b580      	push	{r7, lr}
 80020ee:	b0ac      	sub	sp, #176	@ 0xb0
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020f4:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80020f8:	2200      	movs	r2, #0
 80020fa:	601a      	str	r2, [r3, #0]
 80020fc:	605a      	str	r2, [r3, #4]
 80020fe:	609a      	str	r2, [r3, #8]
 8002100:	60da      	str	r2, [r3, #12]
 8002102:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002104:	f107 0314 	add.w	r3, r7, #20
 8002108:	2288      	movs	r2, #136	@ 0x88
 800210a:	2100      	movs	r1, #0
 800210c:	4618      	mov	r0, r3
 800210e:	f002 fc8c 	bl	8004a2a <memset>
  if(huart->Instance==USART1)
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	4a21      	ldr	r2, [pc, #132]	@ (800219c <HAL_UART_MspInit+0xb0>)
 8002118:	4293      	cmp	r3, r2
 800211a:	d13a      	bne.n	8002192 <HAL_UART_MspInit+0xa6>

    /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800211c:	2301      	movs	r3, #1
 800211e:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002120:	2300      	movs	r3, #0
 8002122:	64fb      	str	r3, [r7, #76]	@ 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002124:	f107 0314 	add.w	r3, r7, #20
 8002128:	4618      	mov	r0, r3
 800212a:	f001 faa1 	bl	8003670 <HAL_RCCEx_PeriphCLKConfig>
 800212e:	4603      	mov	r3, r0
 8002130:	2b00      	cmp	r3, #0
 8002132:	d001      	beq.n	8002138 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002134:	f7ff ff0c 	bl	8001f50 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002138:	4b19      	ldr	r3, [pc, #100]	@ (80021a0 <HAL_UART_MspInit+0xb4>)
 800213a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800213c:	4a18      	ldr	r2, [pc, #96]	@ (80021a0 <HAL_UART_MspInit+0xb4>)
 800213e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002142:	6613      	str	r3, [r2, #96]	@ 0x60
 8002144:	4b16      	ldr	r3, [pc, #88]	@ (80021a0 <HAL_UART_MspInit+0xb4>)
 8002146:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002148:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800214c:	613b      	str	r3, [r7, #16]
 800214e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002150:	4b13      	ldr	r3, [pc, #76]	@ (80021a0 <HAL_UART_MspInit+0xb4>)
 8002152:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002154:	4a12      	ldr	r2, [pc, #72]	@ (80021a0 <HAL_UART_MspInit+0xb4>)
 8002156:	f043 0302 	orr.w	r3, r3, #2
 800215a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800215c:	4b10      	ldr	r3, [pc, #64]	@ (80021a0 <HAL_UART_MspInit+0xb4>)
 800215e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002160:	f003 0302 	and.w	r3, r3, #2
 8002164:	60fb      	str	r3, [r7, #12]
 8002166:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = ST_LINK_UART1_TX_Pin|ST_LINK_UART1_RX_Pin;
 8002168:	23c0      	movs	r3, #192	@ 0xc0
 800216a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800216e:	2302      	movs	r3, #2
 8002170:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002174:	2300      	movs	r3, #0
 8002176:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800217a:	2303      	movs	r3, #3
 800217c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002180:	2307      	movs	r3, #7
 8002182:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002186:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800218a:	4619      	mov	r1, r3
 800218c:	4805      	ldr	r0, [pc, #20]	@ (80021a4 <HAL_UART_MspInit+0xb8>)
 800218e:	f000 fa25 	bl	80025dc <HAL_GPIO_Init>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 8002192:	bf00      	nop
 8002194:	37b0      	adds	r7, #176	@ 0xb0
 8002196:	46bd      	mov	sp, r7
 8002198:	bd80      	pop	{r7, pc}
 800219a:	bf00      	nop
 800219c:	40013800 	.word	0x40013800
 80021a0:	40021000 	.word	0x40021000
 80021a4:	48000400 	.word	0x48000400

080021a8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80021a8:	b480      	push	{r7}
 80021aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80021ac:	bf00      	nop
 80021ae:	e7fd      	b.n	80021ac <NMI_Handler+0x4>

080021b0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80021b0:	b480      	push	{r7}
 80021b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80021b4:	bf00      	nop
 80021b6:	e7fd      	b.n	80021b4 <HardFault_Handler+0x4>

080021b8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80021b8:	b480      	push	{r7}
 80021ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80021bc:	bf00      	nop
 80021be:	e7fd      	b.n	80021bc <MemManage_Handler+0x4>

080021c0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80021c0:	b480      	push	{r7}
 80021c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80021c4:	bf00      	nop
 80021c6:	e7fd      	b.n	80021c4 <BusFault_Handler+0x4>

080021c8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80021c8:	b480      	push	{r7}
 80021ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80021cc:	bf00      	nop
 80021ce:	e7fd      	b.n	80021cc <UsageFault_Handler+0x4>

080021d0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80021d0:	b480      	push	{r7}
 80021d2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80021d4:	bf00      	nop
 80021d6:	46bd      	mov	sp, r7
 80021d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021dc:	4770      	bx	lr

080021de <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80021de:	b480      	push	{r7}
 80021e0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80021e2:	bf00      	nop
 80021e4:	46bd      	mov	sp, r7
 80021e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ea:	4770      	bx	lr

080021ec <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80021ec:	b480      	push	{r7}
 80021ee:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80021f0:	bf00      	nop
 80021f2:	46bd      	mov	sp, r7
 80021f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f8:	4770      	bx	lr

080021fa <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80021fa:	b580      	push	{r7, lr}
 80021fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80021fe:	f000 f8bb 	bl	8002378 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002202:	bf00      	nop
 8002204:	bd80      	pop	{r7, pc}

08002206 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8002206:	b580      	push	{r7, lr}
 8002208:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SPSGRF_915_GPIO3_EXTI5_Pin);
 800220a:	2020      	movs	r0, #32
 800220c:	f000 fba8 	bl	8002960 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(SPBTLE_RF_IRQ_EXTI6_Pin);
 8002210:	2040      	movs	r0, #64	@ 0x40
 8002212:	f000 fba5 	bl	8002960 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(VL53L0X_GPIO1_EXTI7_Pin);
 8002216:	2080      	movs	r0, #128	@ 0x80
 8002218:	f000 fba2 	bl	8002960 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM3MDL_DRDY_EXTI8_Pin);
 800221c:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8002220:	f000 fb9e 	bl	8002960 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8002224:	bf00      	nop
 8002226:	bd80      	pop	{r7, pc}

08002228 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002228:	b580      	push	{r7, lr}
 800222a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LPS22HB_INT_DRDY_EXTI0_Pin);
 800222c:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8002230:	f000 fb96 	bl	8002960 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM6DSL_INT1_EXTI11_Pin);
 8002234:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8002238:	f000 fb92 	bl	8002960 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BUTTON_EXTI13_Pin);
 800223c:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8002240:	f000 fb8e 	bl	8002960 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ARD_D2_Pin);
 8002244:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8002248:	f000 fb8a 	bl	8002960 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(HTS221_DRDY_EXTI15_Pin);
 800224c:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8002250:	f000 fb86 	bl	8002960 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002254:	bf00      	nop
 8002256:	bd80      	pop	{r7, pc}

08002258 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8002258:	b480      	push	{r7}
 800225a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800225c:	4b06      	ldr	r3, [pc, #24]	@ (8002278 <SystemInit+0x20>)
 800225e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002262:	4a05      	ldr	r2, [pc, #20]	@ (8002278 <SystemInit+0x20>)
 8002264:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002268:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 800226c:	bf00      	nop
 800226e:	46bd      	mov	sp, r7
 8002270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002274:	4770      	bx	lr
 8002276:	bf00      	nop
 8002278:	e000ed00 	.word	0xe000ed00

0800227c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800227c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80022b4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002280:	f7ff ffea 	bl	8002258 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002284:	480c      	ldr	r0, [pc, #48]	@ (80022b8 <LoopForever+0x6>)
  ldr r1, =_edata
 8002286:	490d      	ldr	r1, [pc, #52]	@ (80022bc <LoopForever+0xa>)
  ldr r2, =_sidata
 8002288:	4a0d      	ldr	r2, [pc, #52]	@ (80022c0 <LoopForever+0xe>)
  movs r3, #0
 800228a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800228c:	e002      	b.n	8002294 <LoopCopyDataInit>

0800228e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800228e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002290:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002292:	3304      	adds	r3, #4

08002294 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002294:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002296:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002298:	d3f9      	bcc.n	800228e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800229a:	4a0a      	ldr	r2, [pc, #40]	@ (80022c4 <LoopForever+0x12>)
  ldr r4, =_ebss
 800229c:	4c0a      	ldr	r4, [pc, #40]	@ (80022c8 <LoopForever+0x16>)
  movs r3, #0
 800229e:	2300      	movs	r3, #0
  b LoopFillZerobss
 80022a0:	e001      	b.n	80022a6 <LoopFillZerobss>

080022a2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80022a2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80022a4:	3204      	adds	r2, #4

080022a6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80022a6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80022a8:	d3fb      	bcc.n	80022a2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80022aa:	f002 fbcd 	bl	8004a48 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80022ae:	f7ff fb2f 	bl	8001910 <main>

080022b2 <LoopForever>:

LoopForever:
    b LoopForever
 80022b2:	e7fe      	b.n	80022b2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80022b4:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80022b8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80022bc:	20000a68 	.word	0x20000a68
  ldr r2, =_sidata
 80022c0:	0800508c 	.word	0x0800508c
  ldr r2, =_sbss
 80022c4:	20000a68 	.word	0x20000a68
  ldr r4, =_ebss
 80022c8:	2000123c 	.word	0x2000123c

080022cc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80022cc:	e7fe      	b.n	80022cc <ADC1_2_IRQHandler>

080022ce <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80022ce:	b580      	push	{r7, lr}
 80022d0:	b082      	sub	sp, #8
 80022d2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80022d4:	2300      	movs	r3, #0
 80022d6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80022d8:	2003      	movs	r0, #3
 80022da:	f000 f93d 	bl	8002558 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80022de:	2000      	movs	r0, #0
 80022e0:	f000 f80e 	bl	8002300 <HAL_InitTick>
 80022e4:	4603      	mov	r3, r0
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d002      	beq.n	80022f0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80022ea:	2301      	movs	r3, #1
 80022ec:	71fb      	strb	r3, [r7, #7]
 80022ee:	e001      	b.n	80022f4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80022f0:	f7ff fed8 	bl	80020a4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80022f4:	79fb      	ldrb	r3, [r7, #7]
}
 80022f6:	4618      	mov	r0, r3
 80022f8:	3708      	adds	r7, #8
 80022fa:	46bd      	mov	sp, r7
 80022fc:	bd80      	pop	{r7, pc}
	...

08002300 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002300:	b580      	push	{r7, lr}
 8002302:	b084      	sub	sp, #16
 8002304:	af00      	add	r7, sp, #0
 8002306:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002308:	2300      	movs	r3, #0
 800230a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 800230c:	4b17      	ldr	r3, [pc, #92]	@ (800236c <HAL_InitTick+0x6c>)
 800230e:	781b      	ldrb	r3, [r3, #0]
 8002310:	2b00      	cmp	r3, #0
 8002312:	d023      	beq.n	800235c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8002314:	4b16      	ldr	r3, [pc, #88]	@ (8002370 <HAL_InitTick+0x70>)
 8002316:	681a      	ldr	r2, [r3, #0]
 8002318:	4b14      	ldr	r3, [pc, #80]	@ (800236c <HAL_InitTick+0x6c>)
 800231a:	781b      	ldrb	r3, [r3, #0]
 800231c:	4619      	mov	r1, r3
 800231e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002322:	fbb3 f3f1 	udiv	r3, r3, r1
 8002326:	fbb2 f3f3 	udiv	r3, r2, r3
 800232a:	4618      	mov	r0, r3
 800232c:	f000 f949 	bl	80025c2 <HAL_SYSTICK_Config>
 8002330:	4603      	mov	r3, r0
 8002332:	2b00      	cmp	r3, #0
 8002334:	d10f      	bne.n	8002356 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	2b0f      	cmp	r3, #15
 800233a:	d809      	bhi.n	8002350 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800233c:	2200      	movs	r2, #0
 800233e:	6879      	ldr	r1, [r7, #4]
 8002340:	f04f 30ff 	mov.w	r0, #4294967295
 8002344:	f000 f913 	bl	800256e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002348:	4a0a      	ldr	r2, [pc, #40]	@ (8002374 <HAL_InitTick+0x74>)
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	6013      	str	r3, [r2, #0]
 800234e:	e007      	b.n	8002360 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8002350:	2301      	movs	r3, #1
 8002352:	73fb      	strb	r3, [r7, #15]
 8002354:	e004      	b.n	8002360 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002356:	2301      	movs	r3, #1
 8002358:	73fb      	strb	r3, [r7, #15]
 800235a:	e001      	b.n	8002360 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 800235c:	2301      	movs	r3, #1
 800235e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002360:	7bfb      	ldrb	r3, [r7, #15]
}
 8002362:	4618      	mov	r0, r3
 8002364:	3710      	adds	r7, #16
 8002366:	46bd      	mov	sp, r7
 8002368:	bd80      	pop	{r7, pc}
 800236a:	bf00      	nop
 800236c:	20000a14 	.word	0x20000a14
 8002370:	20000a0c 	.word	0x20000a0c
 8002374:	20000a10 	.word	0x20000a10

08002378 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002378:	b480      	push	{r7}
 800237a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800237c:	4b06      	ldr	r3, [pc, #24]	@ (8002398 <HAL_IncTick+0x20>)
 800237e:	781b      	ldrb	r3, [r3, #0]
 8002380:	461a      	mov	r2, r3
 8002382:	4b06      	ldr	r3, [pc, #24]	@ (800239c <HAL_IncTick+0x24>)
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	4413      	add	r3, r2
 8002388:	4a04      	ldr	r2, [pc, #16]	@ (800239c <HAL_IncTick+0x24>)
 800238a:	6013      	str	r3, [r2, #0]
}
 800238c:	bf00      	nop
 800238e:	46bd      	mov	sp, r7
 8002390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002394:	4770      	bx	lr
 8002396:	bf00      	nop
 8002398:	20000a14 	.word	0x20000a14
 800239c:	20001100 	.word	0x20001100

080023a0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80023a0:	b480      	push	{r7}
 80023a2:	af00      	add	r7, sp, #0
  return uwTick;
 80023a4:	4b03      	ldr	r3, [pc, #12]	@ (80023b4 <HAL_GetTick+0x14>)
 80023a6:	681b      	ldr	r3, [r3, #0]
}
 80023a8:	4618      	mov	r0, r3
 80023aa:	46bd      	mov	sp, r7
 80023ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b0:	4770      	bx	lr
 80023b2:	bf00      	nop
 80023b4:	20001100 	.word	0x20001100

080023b8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80023b8:	b480      	push	{r7}
 80023ba:	b085      	sub	sp, #20
 80023bc:	af00      	add	r7, sp, #0
 80023be:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	f003 0307 	and.w	r3, r3, #7
 80023c6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80023c8:	4b0c      	ldr	r3, [pc, #48]	@ (80023fc <__NVIC_SetPriorityGrouping+0x44>)
 80023ca:	68db      	ldr	r3, [r3, #12]
 80023cc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80023ce:	68ba      	ldr	r2, [r7, #8]
 80023d0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80023d4:	4013      	ands	r3, r2
 80023d6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80023dc:	68bb      	ldr	r3, [r7, #8]
 80023de:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80023e0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80023e4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80023e8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80023ea:	4a04      	ldr	r2, [pc, #16]	@ (80023fc <__NVIC_SetPriorityGrouping+0x44>)
 80023ec:	68bb      	ldr	r3, [r7, #8]
 80023ee:	60d3      	str	r3, [r2, #12]
}
 80023f0:	bf00      	nop
 80023f2:	3714      	adds	r7, #20
 80023f4:	46bd      	mov	sp, r7
 80023f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023fa:	4770      	bx	lr
 80023fc:	e000ed00 	.word	0xe000ed00

08002400 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002400:	b480      	push	{r7}
 8002402:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002404:	4b04      	ldr	r3, [pc, #16]	@ (8002418 <__NVIC_GetPriorityGrouping+0x18>)
 8002406:	68db      	ldr	r3, [r3, #12]
 8002408:	0a1b      	lsrs	r3, r3, #8
 800240a:	f003 0307 	and.w	r3, r3, #7
}
 800240e:	4618      	mov	r0, r3
 8002410:	46bd      	mov	sp, r7
 8002412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002416:	4770      	bx	lr
 8002418:	e000ed00 	.word	0xe000ed00

0800241c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800241c:	b480      	push	{r7}
 800241e:	b083      	sub	sp, #12
 8002420:	af00      	add	r7, sp, #0
 8002422:	4603      	mov	r3, r0
 8002424:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002426:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800242a:	2b00      	cmp	r3, #0
 800242c:	db0b      	blt.n	8002446 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800242e:	79fb      	ldrb	r3, [r7, #7]
 8002430:	f003 021f 	and.w	r2, r3, #31
 8002434:	4907      	ldr	r1, [pc, #28]	@ (8002454 <__NVIC_EnableIRQ+0x38>)
 8002436:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800243a:	095b      	lsrs	r3, r3, #5
 800243c:	2001      	movs	r0, #1
 800243e:	fa00 f202 	lsl.w	r2, r0, r2
 8002442:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002446:	bf00      	nop
 8002448:	370c      	adds	r7, #12
 800244a:	46bd      	mov	sp, r7
 800244c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002450:	4770      	bx	lr
 8002452:	bf00      	nop
 8002454:	e000e100 	.word	0xe000e100

08002458 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002458:	b480      	push	{r7}
 800245a:	b083      	sub	sp, #12
 800245c:	af00      	add	r7, sp, #0
 800245e:	4603      	mov	r3, r0
 8002460:	6039      	str	r1, [r7, #0]
 8002462:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002464:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002468:	2b00      	cmp	r3, #0
 800246a:	db0a      	blt.n	8002482 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800246c:	683b      	ldr	r3, [r7, #0]
 800246e:	b2da      	uxtb	r2, r3
 8002470:	490c      	ldr	r1, [pc, #48]	@ (80024a4 <__NVIC_SetPriority+0x4c>)
 8002472:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002476:	0112      	lsls	r2, r2, #4
 8002478:	b2d2      	uxtb	r2, r2
 800247a:	440b      	add	r3, r1
 800247c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002480:	e00a      	b.n	8002498 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002482:	683b      	ldr	r3, [r7, #0]
 8002484:	b2da      	uxtb	r2, r3
 8002486:	4908      	ldr	r1, [pc, #32]	@ (80024a8 <__NVIC_SetPriority+0x50>)
 8002488:	79fb      	ldrb	r3, [r7, #7]
 800248a:	f003 030f 	and.w	r3, r3, #15
 800248e:	3b04      	subs	r3, #4
 8002490:	0112      	lsls	r2, r2, #4
 8002492:	b2d2      	uxtb	r2, r2
 8002494:	440b      	add	r3, r1
 8002496:	761a      	strb	r2, [r3, #24]
}
 8002498:	bf00      	nop
 800249a:	370c      	adds	r7, #12
 800249c:	46bd      	mov	sp, r7
 800249e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a2:	4770      	bx	lr
 80024a4:	e000e100 	.word	0xe000e100
 80024a8:	e000ed00 	.word	0xe000ed00

080024ac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80024ac:	b480      	push	{r7}
 80024ae:	b089      	sub	sp, #36	@ 0x24
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	60f8      	str	r0, [r7, #12]
 80024b4:	60b9      	str	r1, [r7, #8]
 80024b6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	f003 0307 	and.w	r3, r3, #7
 80024be:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80024c0:	69fb      	ldr	r3, [r7, #28]
 80024c2:	f1c3 0307 	rsb	r3, r3, #7
 80024c6:	2b04      	cmp	r3, #4
 80024c8:	bf28      	it	cs
 80024ca:	2304      	movcs	r3, #4
 80024cc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80024ce:	69fb      	ldr	r3, [r7, #28]
 80024d0:	3304      	adds	r3, #4
 80024d2:	2b06      	cmp	r3, #6
 80024d4:	d902      	bls.n	80024dc <NVIC_EncodePriority+0x30>
 80024d6:	69fb      	ldr	r3, [r7, #28]
 80024d8:	3b03      	subs	r3, #3
 80024da:	e000      	b.n	80024de <NVIC_EncodePriority+0x32>
 80024dc:	2300      	movs	r3, #0
 80024de:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024e0:	f04f 32ff 	mov.w	r2, #4294967295
 80024e4:	69bb      	ldr	r3, [r7, #24]
 80024e6:	fa02 f303 	lsl.w	r3, r2, r3
 80024ea:	43da      	mvns	r2, r3
 80024ec:	68bb      	ldr	r3, [r7, #8]
 80024ee:	401a      	ands	r2, r3
 80024f0:	697b      	ldr	r3, [r7, #20]
 80024f2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80024f4:	f04f 31ff 	mov.w	r1, #4294967295
 80024f8:	697b      	ldr	r3, [r7, #20]
 80024fa:	fa01 f303 	lsl.w	r3, r1, r3
 80024fe:	43d9      	mvns	r1, r3
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002504:	4313      	orrs	r3, r2
         );
}
 8002506:	4618      	mov	r0, r3
 8002508:	3724      	adds	r7, #36	@ 0x24
 800250a:	46bd      	mov	sp, r7
 800250c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002510:	4770      	bx	lr
	...

08002514 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002514:	b580      	push	{r7, lr}
 8002516:	b082      	sub	sp, #8
 8002518:	af00      	add	r7, sp, #0
 800251a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	3b01      	subs	r3, #1
 8002520:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002524:	d301      	bcc.n	800252a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002526:	2301      	movs	r3, #1
 8002528:	e00f      	b.n	800254a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800252a:	4a0a      	ldr	r2, [pc, #40]	@ (8002554 <SysTick_Config+0x40>)
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	3b01      	subs	r3, #1
 8002530:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002532:	210f      	movs	r1, #15
 8002534:	f04f 30ff 	mov.w	r0, #4294967295
 8002538:	f7ff ff8e 	bl	8002458 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800253c:	4b05      	ldr	r3, [pc, #20]	@ (8002554 <SysTick_Config+0x40>)
 800253e:	2200      	movs	r2, #0
 8002540:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002542:	4b04      	ldr	r3, [pc, #16]	@ (8002554 <SysTick_Config+0x40>)
 8002544:	2207      	movs	r2, #7
 8002546:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002548:	2300      	movs	r3, #0
}
 800254a:	4618      	mov	r0, r3
 800254c:	3708      	adds	r7, #8
 800254e:	46bd      	mov	sp, r7
 8002550:	bd80      	pop	{r7, pc}
 8002552:	bf00      	nop
 8002554:	e000e010 	.word	0xe000e010

08002558 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002558:	b580      	push	{r7, lr}
 800255a:	b082      	sub	sp, #8
 800255c:	af00      	add	r7, sp, #0
 800255e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002560:	6878      	ldr	r0, [r7, #4]
 8002562:	f7ff ff29 	bl	80023b8 <__NVIC_SetPriorityGrouping>
}
 8002566:	bf00      	nop
 8002568:	3708      	adds	r7, #8
 800256a:	46bd      	mov	sp, r7
 800256c:	bd80      	pop	{r7, pc}

0800256e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800256e:	b580      	push	{r7, lr}
 8002570:	b086      	sub	sp, #24
 8002572:	af00      	add	r7, sp, #0
 8002574:	4603      	mov	r3, r0
 8002576:	60b9      	str	r1, [r7, #8]
 8002578:	607a      	str	r2, [r7, #4]
 800257a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800257c:	2300      	movs	r3, #0
 800257e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002580:	f7ff ff3e 	bl	8002400 <__NVIC_GetPriorityGrouping>
 8002584:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002586:	687a      	ldr	r2, [r7, #4]
 8002588:	68b9      	ldr	r1, [r7, #8]
 800258a:	6978      	ldr	r0, [r7, #20]
 800258c:	f7ff ff8e 	bl	80024ac <NVIC_EncodePriority>
 8002590:	4602      	mov	r2, r0
 8002592:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002596:	4611      	mov	r1, r2
 8002598:	4618      	mov	r0, r3
 800259a:	f7ff ff5d 	bl	8002458 <__NVIC_SetPriority>
}
 800259e:	bf00      	nop
 80025a0:	3718      	adds	r7, #24
 80025a2:	46bd      	mov	sp, r7
 80025a4:	bd80      	pop	{r7, pc}

080025a6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80025a6:	b580      	push	{r7, lr}
 80025a8:	b082      	sub	sp, #8
 80025aa:	af00      	add	r7, sp, #0
 80025ac:	4603      	mov	r3, r0
 80025ae:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80025b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025b4:	4618      	mov	r0, r3
 80025b6:	f7ff ff31 	bl	800241c <__NVIC_EnableIRQ>
}
 80025ba:	bf00      	nop
 80025bc:	3708      	adds	r7, #8
 80025be:	46bd      	mov	sp, r7
 80025c0:	bd80      	pop	{r7, pc}

080025c2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80025c2:	b580      	push	{r7, lr}
 80025c4:	b082      	sub	sp, #8
 80025c6:	af00      	add	r7, sp, #0
 80025c8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80025ca:	6878      	ldr	r0, [r7, #4]
 80025cc:	f7ff ffa2 	bl	8002514 <SysTick_Config>
 80025d0:	4603      	mov	r3, r0
}
 80025d2:	4618      	mov	r0, r3
 80025d4:	3708      	adds	r7, #8
 80025d6:	46bd      	mov	sp, r7
 80025d8:	bd80      	pop	{r7, pc}
	...

080025dc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80025dc:	b480      	push	{r7}
 80025de:	b087      	sub	sp, #28
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	6078      	str	r0, [r7, #4]
 80025e4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80025e6:	2300      	movs	r3, #0
 80025e8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80025ea:	e17f      	b.n	80028ec <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80025ec:	683b      	ldr	r3, [r7, #0]
 80025ee:	681a      	ldr	r2, [r3, #0]
 80025f0:	2101      	movs	r1, #1
 80025f2:	697b      	ldr	r3, [r7, #20]
 80025f4:	fa01 f303 	lsl.w	r3, r1, r3
 80025f8:	4013      	ands	r3, r2
 80025fa:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	2b00      	cmp	r3, #0
 8002600:	f000 8171 	beq.w	80028e6 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002604:	683b      	ldr	r3, [r7, #0]
 8002606:	685b      	ldr	r3, [r3, #4]
 8002608:	f003 0303 	and.w	r3, r3, #3
 800260c:	2b01      	cmp	r3, #1
 800260e:	d005      	beq.n	800261c <HAL_GPIO_Init+0x40>
 8002610:	683b      	ldr	r3, [r7, #0]
 8002612:	685b      	ldr	r3, [r3, #4]
 8002614:	f003 0303 	and.w	r3, r3, #3
 8002618:	2b02      	cmp	r3, #2
 800261a:	d130      	bne.n	800267e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	689b      	ldr	r3, [r3, #8]
 8002620:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002622:	697b      	ldr	r3, [r7, #20]
 8002624:	005b      	lsls	r3, r3, #1
 8002626:	2203      	movs	r2, #3
 8002628:	fa02 f303 	lsl.w	r3, r2, r3
 800262c:	43db      	mvns	r3, r3
 800262e:	693a      	ldr	r2, [r7, #16]
 8002630:	4013      	ands	r3, r2
 8002632:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002634:	683b      	ldr	r3, [r7, #0]
 8002636:	68da      	ldr	r2, [r3, #12]
 8002638:	697b      	ldr	r3, [r7, #20]
 800263a:	005b      	lsls	r3, r3, #1
 800263c:	fa02 f303 	lsl.w	r3, r2, r3
 8002640:	693a      	ldr	r2, [r7, #16]
 8002642:	4313      	orrs	r3, r2
 8002644:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	693a      	ldr	r2, [r7, #16]
 800264a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	685b      	ldr	r3, [r3, #4]
 8002650:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002652:	2201      	movs	r2, #1
 8002654:	697b      	ldr	r3, [r7, #20]
 8002656:	fa02 f303 	lsl.w	r3, r2, r3
 800265a:	43db      	mvns	r3, r3
 800265c:	693a      	ldr	r2, [r7, #16]
 800265e:	4013      	ands	r3, r2
 8002660:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002662:	683b      	ldr	r3, [r7, #0]
 8002664:	685b      	ldr	r3, [r3, #4]
 8002666:	091b      	lsrs	r3, r3, #4
 8002668:	f003 0201 	and.w	r2, r3, #1
 800266c:	697b      	ldr	r3, [r7, #20]
 800266e:	fa02 f303 	lsl.w	r3, r2, r3
 8002672:	693a      	ldr	r2, [r7, #16]
 8002674:	4313      	orrs	r3, r2
 8002676:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	693a      	ldr	r2, [r7, #16]
 800267c:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800267e:	683b      	ldr	r3, [r7, #0]
 8002680:	685b      	ldr	r3, [r3, #4]
 8002682:	f003 0303 	and.w	r3, r3, #3
 8002686:	2b03      	cmp	r3, #3
 8002688:	d118      	bne.n	80026bc <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800268e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8002690:	2201      	movs	r2, #1
 8002692:	697b      	ldr	r3, [r7, #20]
 8002694:	fa02 f303 	lsl.w	r3, r2, r3
 8002698:	43db      	mvns	r3, r3
 800269a:	693a      	ldr	r2, [r7, #16]
 800269c:	4013      	ands	r3, r2
 800269e:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 80026a0:	683b      	ldr	r3, [r7, #0]
 80026a2:	685b      	ldr	r3, [r3, #4]
 80026a4:	08db      	lsrs	r3, r3, #3
 80026a6:	f003 0201 	and.w	r2, r3, #1
 80026aa:	697b      	ldr	r3, [r7, #20]
 80026ac:	fa02 f303 	lsl.w	r3, r2, r3
 80026b0:	693a      	ldr	r2, [r7, #16]
 80026b2:	4313      	orrs	r3, r2
 80026b4:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	693a      	ldr	r2, [r7, #16]
 80026ba:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80026bc:	683b      	ldr	r3, [r7, #0]
 80026be:	685b      	ldr	r3, [r3, #4]
 80026c0:	f003 0303 	and.w	r3, r3, #3
 80026c4:	2b03      	cmp	r3, #3
 80026c6:	d017      	beq.n	80026f8 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	68db      	ldr	r3, [r3, #12]
 80026cc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80026ce:	697b      	ldr	r3, [r7, #20]
 80026d0:	005b      	lsls	r3, r3, #1
 80026d2:	2203      	movs	r2, #3
 80026d4:	fa02 f303 	lsl.w	r3, r2, r3
 80026d8:	43db      	mvns	r3, r3
 80026da:	693a      	ldr	r2, [r7, #16]
 80026dc:	4013      	ands	r3, r2
 80026de:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80026e0:	683b      	ldr	r3, [r7, #0]
 80026e2:	689a      	ldr	r2, [r3, #8]
 80026e4:	697b      	ldr	r3, [r7, #20]
 80026e6:	005b      	lsls	r3, r3, #1
 80026e8:	fa02 f303 	lsl.w	r3, r2, r3
 80026ec:	693a      	ldr	r2, [r7, #16]
 80026ee:	4313      	orrs	r3, r2
 80026f0:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	693a      	ldr	r2, [r7, #16]
 80026f6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80026f8:	683b      	ldr	r3, [r7, #0]
 80026fa:	685b      	ldr	r3, [r3, #4]
 80026fc:	f003 0303 	and.w	r3, r3, #3
 8002700:	2b02      	cmp	r3, #2
 8002702:	d123      	bne.n	800274c <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002704:	697b      	ldr	r3, [r7, #20]
 8002706:	08da      	lsrs	r2, r3, #3
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	3208      	adds	r2, #8
 800270c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002710:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002712:	697b      	ldr	r3, [r7, #20]
 8002714:	f003 0307 	and.w	r3, r3, #7
 8002718:	009b      	lsls	r3, r3, #2
 800271a:	220f      	movs	r2, #15
 800271c:	fa02 f303 	lsl.w	r3, r2, r3
 8002720:	43db      	mvns	r3, r3
 8002722:	693a      	ldr	r2, [r7, #16]
 8002724:	4013      	ands	r3, r2
 8002726:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002728:	683b      	ldr	r3, [r7, #0]
 800272a:	691a      	ldr	r2, [r3, #16]
 800272c:	697b      	ldr	r3, [r7, #20]
 800272e:	f003 0307 	and.w	r3, r3, #7
 8002732:	009b      	lsls	r3, r3, #2
 8002734:	fa02 f303 	lsl.w	r3, r2, r3
 8002738:	693a      	ldr	r2, [r7, #16]
 800273a:	4313      	orrs	r3, r2
 800273c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800273e:	697b      	ldr	r3, [r7, #20]
 8002740:	08da      	lsrs	r2, r3, #3
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	3208      	adds	r2, #8
 8002746:	6939      	ldr	r1, [r7, #16]
 8002748:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002752:	697b      	ldr	r3, [r7, #20]
 8002754:	005b      	lsls	r3, r3, #1
 8002756:	2203      	movs	r2, #3
 8002758:	fa02 f303 	lsl.w	r3, r2, r3
 800275c:	43db      	mvns	r3, r3
 800275e:	693a      	ldr	r2, [r7, #16]
 8002760:	4013      	ands	r3, r2
 8002762:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002764:	683b      	ldr	r3, [r7, #0]
 8002766:	685b      	ldr	r3, [r3, #4]
 8002768:	f003 0203 	and.w	r2, r3, #3
 800276c:	697b      	ldr	r3, [r7, #20]
 800276e:	005b      	lsls	r3, r3, #1
 8002770:	fa02 f303 	lsl.w	r3, r2, r3
 8002774:	693a      	ldr	r2, [r7, #16]
 8002776:	4313      	orrs	r3, r2
 8002778:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	693a      	ldr	r2, [r7, #16]
 800277e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002780:	683b      	ldr	r3, [r7, #0]
 8002782:	685b      	ldr	r3, [r3, #4]
 8002784:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002788:	2b00      	cmp	r3, #0
 800278a:	f000 80ac 	beq.w	80028e6 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800278e:	4b5f      	ldr	r3, [pc, #380]	@ (800290c <HAL_GPIO_Init+0x330>)
 8002790:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002792:	4a5e      	ldr	r2, [pc, #376]	@ (800290c <HAL_GPIO_Init+0x330>)
 8002794:	f043 0301 	orr.w	r3, r3, #1
 8002798:	6613      	str	r3, [r2, #96]	@ 0x60
 800279a:	4b5c      	ldr	r3, [pc, #368]	@ (800290c <HAL_GPIO_Init+0x330>)
 800279c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800279e:	f003 0301 	and.w	r3, r3, #1
 80027a2:	60bb      	str	r3, [r7, #8]
 80027a4:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80027a6:	4a5a      	ldr	r2, [pc, #360]	@ (8002910 <HAL_GPIO_Init+0x334>)
 80027a8:	697b      	ldr	r3, [r7, #20]
 80027aa:	089b      	lsrs	r3, r3, #2
 80027ac:	3302      	adds	r3, #2
 80027ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80027b2:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80027b4:	697b      	ldr	r3, [r7, #20]
 80027b6:	f003 0303 	and.w	r3, r3, #3
 80027ba:	009b      	lsls	r3, r3, #2
 80027bc:	220f      	movs	r2, #15
 80027be:	fa02 f303 	lsl.w	r3, r2, r3
 80027c2:	43db      	mvns	r3, r3
 80027c4:	693a      	ldr	r2, [r7, #16]
 80027c6:	4013      	ands	r3, r2
 80027c8:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80027d0:	d025      	beq.n	800281e <HAL_GPIO_Init+0x242>
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	4a4f      	ldr	r2, [pc, #316]	@ (8002914 <HAL_GPIO_Init+0x338>)
 80027d6:	4293      	cmp	r3, r2
 80027d8:	d01f      	beq.n	800281a <HAL_GPIO_Init+0x23e>
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	4a4e      	ldr	r2, [pc, #312]	@ (8002918 <HAL_GPIO_Init+0x33c>)
 80027de:	4293      	cmp	r3, r2
 80027e0:	d019      	beq.n	8002816 <HAL_GPIO_Init+0x23a>
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	4a4d      	ldr	r2, [pc, #308]	@ (800291c <HAL_GPIO_Init+0x340>)
 80027e6:	4293      	cmp	r3, r2
 80027e8:	d013      	beq.n	8002812 <HAL_GPIO_Init+0x236>
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	4a4c      	ldr	r2, [pc, #304]	@ (8002920 <HAL_GPIO_Init+0x344>)
 80027ee:	4293      	cmp	r3, r2
 80027f0:	d00d      	beq.n	800280e <HAL_GPIO_Init+0x232>
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	4a4b      	ldr	r2, [pc, #300]	@ (8002924 <HAL_GPIO_Init+0x348>)
 80027f6:	4293      	cmp	r3, r2
 80027f8:	d007      	beq.n	800280a <HAL_GPIO_Init+0x22e>
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	4a4a      	ldr	r2, [pc, #296]	@ (8002928 <HAL_GPIO_Init+0x34c>)
 80027fe:	4293      	cmp	r3, r2
 8002800:	d101      	bne.n	8002806 <HAL_GPIO_Init+0x22a>
 8002802:	2306      	movs	r3, #6
 8002804:	e00c      	b.n	8002820 <HAL_GPIO_Init+0x244>
 8002806:	2307      	movs	r3, #7
 8002808:	e00a      	b.n	8002820 <HAL_GPIO_Init+0x244>
 800280a:	2305      	movs	r3, #5
 800280c:	e008      	b.n	8002820 <HAL_GPIO_Init+0x244>
 800280e:	2304      	movs	r3, #4
 8002810:	e006      	b.n	8002820 <HAL_GPIO_Init+0x244>
 8002812:	2303      	movs	r3, #3
 8002814:	e004      	b.n	8002820 <HAL_GPIO_Init+0x244>
 8002816:	2302      	movs	r3, #2
 8002818:	e002      	b.n	8002820 <HAL_GPIO_Init+0x244>
 800281a:	2301      	movs	r3, #1
 800281c:	e000      	b.n	8002820 <HAL_GPIO_Init+0x244>
 800281e:	2300      	movs	r3, #0
 8002820:	697a      	ldr	r2, [r7, #20]
 8002822:	f002 0203 	and.w	r2, r2, #3
 8002826:	0092      	lsls	r2, r2, #2
 8002828:	4093      	lsls	r3, r2
 800282a:	693a      	ldr	r2, [r7, #16]
 800282c:	4313      	orrs	r3, r2
 800282e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002830:	4937      	ldr	r1, [pc, #220]	@ (8002910 <HAL_GPIO_Init+0x334>)
 8002832:	697b      	ldr	r3, [r7, #20]
 8002834:	089b      	lsrs	r3, r3, #2
 8002836:	3302      	adds	r3, #2
 8002838:	693a      	ldr	r2, [r7, #16]
 800283a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800283e:	4b3b      	ldr	r3, [pc, #236]	@ (800292c <HAL_GPIO_Init+0x350>)
 8002840:	689b      	ldr	r3, [r3, #8]
 8002842:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	43db      	mvns	r3, r3
 8002848:	693a      	ldr	r2, [r7, #16]
 800284a:	4013      	ands	r3, r2
 800284c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800284e:	683b      	ldr	r3, [r7, #0]
 8002850:	685b      	ldr	r3, [r3, #4]
 8002852:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002856:	2b00      	cmp	r3, #0
 8002858:	d003      	beq.n	8002862 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800285a:	693a      	ldr	r2, [r7, #16]
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	4313      	orrs	r3, r2
 8002860:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002862:	4a32      	ldr	r2, [pc, #200]	@ (800292c <HAL_GPIO_Init+0x350>)
 8002864:	693b      	ldr	r3, [r7, #16]
 8002866:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002868:	4b30      	ldr	r3, [pc, #192]	@ (800292c <HAL_GPIO_Init+0x350>)
 800286a:	68db      	ldr	r3, [r3, #12]
 800286c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	43db      	mvns	r3, r3
 8002872:	693a      	ldr	r2, [r7, #16]
 8002874:	4013      	ands	r3, r2
 8002876:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002878:	683b      	ldr	r3, [r7, #0]
 800287a:	685b      	ldr	r3, [r3, #4]
 800287c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002880:	2b00      	cmp	r3, #0
 8002882:	d003      	beq.n	800288c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8002884:	693a      	ldr	r2, [r7, #16]
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	4313      	orrs	r3, r2
 800288a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800288c:	4a27      	ldr	r2, [pc, #156]	@ (800292c <HAL_GPIO_Init+0x350>)
 800288e:	693b      	ldr	r3, [r7, #16]
 8002890:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002892:	4b26      	ldr	r3, [pc, #152]	@ (800292c <HAL_GPIO_Init+0x350>)
 8002894:	685b      	ldr	r3, [r3, #4]
 8002896:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	43db      	mvns	r3, r3
 800289c:	693a      	ldr	r2, [r7, #16]
 800289e:	4013      	ands	r3, r2
 80028a0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80028a2:	683b      	ldr	r3, [r7, #0]
 80028a4:	685b      	ldr	r3, [r3, #4]
 80028a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d003      	beq.n	80028b6 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80028ae:	693a      	ldr	r2, [r7, #16]
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	4313      	orrs	r3, r2
 80028b4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80028b6:	4a1d      	ldr	r2, [pc, #116]	@ (800292c <HAL_GPIO_Init+0x350>)
 80028b8:	693b      	ldr	r3, [r7, #16]
 80028ba:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80028bc:	4b1b      	ldr	r3, [pc, #108]	@ (800292c <HAL_GPIO_Init+0x350>)
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	43db      	mvns	r3, r3
 80028c6:	693a      	ldr	r2, [r7, #16]
 80028c8:	4013      	ands	r3, r2
 80028ca:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80028cc:	683b      	ldr	r3, [r7, #0]
 80028ce:	685b      	ldr	r3, [r3, #4]
 80028d0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d003      	beq.n	80028e0 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80028d8:	693a      	ldr	r2, [r7, #16]
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	4313      	orrs	r3, r2
 80028de:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80028e0:	4a12      	ldr	r2, [pc, #72]	@ (800292c <HAL_GPIO_Init+0x350>)
 80028e2:	693b      	ldr	r3, [r7, #16]
 80028e4:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80028e6:	697b      	ldr	r3, [r7, #20]
 80028e8:	3301      	adds	r3, #1
 80028ea:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80028ec:	683b      	ldr	r3, [r7, #0]
 80028ee:	681a      	ldr	r2, [r3, #0]
 80028f0:	697b      	ldr	r3, [r7, #20]
 80028f2:	fa22 f303 	lsr.w	r3, r2, r3
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	f47f ae78 	bne.w	80025ec <HAL_GPIO_Init+0x10>
  }
}
 80028fc:	bf00      	nop
 80028fe:	bf00      	nop
 8002900:	371c      	adds	r7, #28
 8002902:	46bd      	mov	sp, r7
 8002904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002908:	4770      	bx	lr
 800290a:	bf00      	nop
 800290c:	40021000 	.word	0x40021000
 8002910:	40010000 	.word	0x40010000
 8002914:	48000400 	.word	0x48000400
 8002918:	48000800 	.word	0x48000800
 800291c:	48000c00 	.word	0x48000c00
 8002920:	48001000 	.word	0x48001000
 8002924:	48001400 	.word	0x48001400
 8002928:	48001800 	.word	0x48001800
 800292c:	40010400 	.word	0x40010400

08002930 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002930:	b480      	push	{r7}
 8002932:	b083      	sub	sp, #12
 8002934:	af00      	add	r7, sp, #0
 8002936:	6078      	str	r0, [r7, #4]
 8002938:	460b      	mov	r3, r1
 800293a:	807b      	strh	r3, [r7, #2]
 800293c:	4613      	mov	r3, r2
 800293e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002940:	787b      	ldrb	r3, [r7, #1]
 8002942:	2b00      	cmp	r3, #0
 8002944:	d003      	beq.n	800294e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002946:	887a      	ldrh	r2, [r7, #2]
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800294c:	e002      	b.n	8002954 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800294e:	887a      	ldrh	r2, [r7, #2]
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002954:	bf00      	nop
 8002956:	370c      	adds	r7, #12
 8002958:	46bd      	mov	sp, r7
 800295a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800295e:	4770      	bx	lr

08002960 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002960:	b580      	push	{r7, lr}
 8002962:	b082      	sub	sp, #8
 8002964:	af00      	add	r7, sp, #0
 8002966:	4603      	mov	r3, r0
 8002968:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800296a:	4b08      	ldr	r3, [pc, #32]	@ (800298c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800296c:	695a      	ldr	r2, [r3, #20]
 800296e:	88fb      	ldrh	r3, [r7, #6]
 8002970:	4013      	ands	r3, r2
 8002972:	2b00      	cmp	r3, #0
 8002974:	d006      	beq.n	8002984 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002976:	4a05      	ldr	r2, [pc, #20]	@ (800298c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002978:	88fb      	ldrh	r3, [r7, #6]
 800297a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800297c:	88fb      	ldrh	r3, [r7, #6]
 800297e:	4618      	mov	r0, r3
 8002980:	f000 f806 	bl	8002990 <HAL_GPIO_EXTI_Callback>
  }
}
 8002984:	bf00      	nop
 8002986:	3708      	adds	r7, #8
 8002988:	46bd      	mov	sp, r7
 800298a:	bd80      	pop	{r7, pc}
 800298c:	40010400 	.word	0x40010400

08002990 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002990:	b480      	push	{r7}
 8002992:	b083      	sub	sp, #12
 8002994:	af00      	add	r7, sp, #0
 8002996:	4603      	mov	r3, r0
 8002998:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800299a:	bf00      	nop
 800299c:	370c      	adds	r7, #12
 800299e:	46bd      	mov	sp, r7
 80029a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a4:	4770      	bx	lr
	...

080029a8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80029a8:	b480      	push	{r7}
 80029aa:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80029ac:	4b04      	ldr	r3, [pc, #16]	@ (80029c0 <HAL_PWREx_GetVoltageRange+0x18>)
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 80029b4:	4618      	mov	r0, r3
 80029b6:	46bd      	mov	sp, r7
 80029b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029bc:	4770      	bx	lr
 80029be:	bf00      	nop
 80029c0:	40007000 	.word	0x40007000

080029c4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80029c4:	b480      	push	{r7}
 80029c6:	b085      	sub	sp, #20
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80029d2:	d130      	bne.n	8002a36 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80029d4:	4b23      	ldr	r3, [pc, #140]	@ (8002a64 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80029dc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80029e0:	d038      	beq.n	8002a54 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80029e2:	4b20      	ldr	r3, [pc, #128]	@ (8002a64 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80029ea:	4a1e      	ldr	r2, [pc, #120]	@ (8002a64 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80029ec:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80029f0:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80029f2:	4b1d      	ldr	r3, [pc, #116]	@ (8002a68 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	2232      	movs	r2, #50	@ 0x32
 80029f8:	fb02 f303 	mul.w	r3, r2, r3
 80029fc:	4a1b      	ldr	r2, [pc, #108]	@ (8002a6c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80029fe:	fba2 2303 	umull	r2, r3, r2, r3
 8002a02:	0c9b      	lsrs	r3, r3, #18
 8002a04:	3301      	adds	r3, #1
 8002a06:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002a08:	e002      	b.n	8002a10 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	3b01      	subs	r3, #1
 8002a0e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002a10:	4b14      	ldr	r3, [pc, #80]	@ (8002a64 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002a12:	695b      	ldr	r3, [r3, #20]
 8002a14:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002a18:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002a1c:	d102      	bne.n	8002a24 <HAL_PWREx_ControlVoltageScaling+0x60>
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d1f2      	bne.n	8002a0a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002a24:	4b0f      	ldr	r3, [pc, #60]	@ (8002a64 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002a26:	695b      	ldr	r3, [r3, #20]
 8002a28:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002a2c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002a30:	d110      	bne.n	8002a54 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002a32:	2303      	movs	r3, #3
 8002a34:	e00f      	b.n	8002a56 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002a36:	4b0b      	ldr	r3, [pc, #44]	@ (8002a64 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002a3e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002a42:	d007      	beq.n	8002a54 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002a44:	4b07      	ldr	r3, [pc, #28]	@ (8002a64 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002a4c:	4a05      	ldr	r2, [pc, #20]	@ (8002a64 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002a4e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002a52:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002a54:	2300      	movs	r3, #0
}
 8002a56:	4618      	mov	r0, r3
 8002a58:	3714      	adds	r7, #20
 8002a5a:	46bd      	mov	sp, r7
 8002a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a60:	4770      	bx	lr
 8002a62:	bf00      	nop
 8002a64:	40007000 	.word	0x40007000
 8002a68:	20000a0c 	.word	0x20000a0c
 8002a6c:	431bde83 	.word	0x431bde83

08002a70 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002a70:	b580      	push	{r7, lr}
 8002a72:	b088      	sub	sp, #32
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d101      	bne.n	8002a82 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002a7e:	2301      	movs	r3, #1
 8002a80:	e3ca      	b.n	8003218 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002a82:	4b97      	ldr	r3, [pc, #604]	@ (8002ce0 <HAL_RCC_OscConfig+0x270>)
 8002a84:	689b      	ldr	r3, [r3, #8]
 8002a86:	f003 030c 	and.w	r3, r3, #12
 8002a8a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002a8c:	4b94      	ldr	r3, [pc, #592]	@ (8002ce0 <HAL_RCC_OscConfig+0x270>)
 8002a8e:	68db      	ldr	r3, [r3, #12]
 8002a90:	f003 0303 	and.w	r3, r3, #3
 8002a94:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	f003 0310 	and.w	r3, r3, #16
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	f000 80e4 	beq.w	8002c6c <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002aa4:	69bb      	ldr	r3, [r7, #24]
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d007      	beq.n	8002aba <HAL_RCC_OscConfig+0x4a>
 8002aaa:	69bb      	ldr	r3, [r7, #24]
 8002aac:	2b0c      	cmp	r3, #12
 8002aae:	f040 808b 	bne.w	8002bc8 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002ab2:	697b      	ldr	r3, [r7, #20]
 8002ab4:	2b01      	cmp	r3, #1
 8002ab6:	f040 8087 	bne.w	8002bc8 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002aba:	4b89      	ldr	r3, [pc, #548]	@ (8002ce0 <HAL_RCC_OscConfig+0x270>)
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f003 0302 	and.w	r3, r3, #2
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d005      	beq.n	8002ad2 <HAL_RCC_OscConfig+0x62>
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	699b      	ldr	r3, [r3, #24]
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d101      	bne.n	8002ad2 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8002ace:	2301      	movs	r3, #1
 8002ad0:	e3a2      	b.n	8003218 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	6a1a      	ldr	r2, [r3, #32]
 8002ad6:	4b82      	ldr	r3, [pc, #520]	@ (8002ce0 <HAL_RCC_OscConfig+0x270>)
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	f003 0308 	and.w	r3, r3, #8
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d004      	beq.n	8002aec <HAL_RCC_OscConfig+0x7c>
 8002ae2:	4b7f      	ldr	r3, [pc, #508]	@ (8002ce0 <HAL_RCC_OscConfig+0x270>)
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002aea:	e005      	b.n	8002af8 <HAL_RCC_OscConfig+0x88>
 8002aec:	4b7c      	ldr	r3, [pc, #496]	@ (8002ce0 <HAL_RCC_OscConfig+0x270>)
 8002aee:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002af2:	091b      	lsrs	r3, r3, #4
 8002af4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002af8:	4293      	cmp	r3, r2
 8002afa:	d223      	bcs.n	8002b44 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	6a1b      	ldr	r3, [r3, #32]
 8002b00:	4618      	mov	r0, r3
 8002b02:	f000 fd55 	bl	80035b0 <RCC_SetFlashLatencyFromMSIRange>
 8002b06:	4603      	mov	r3, r0
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d001      	beq.n	8002b10 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8002b0c:	2301      	movs	r3, #1
 8002b0e:	e383      	b.n	8003218 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002b10:	4b73      	ldr	r3, [pc, #460]	@ (8002ce0 <HAL_RCC_OscConfig+0x270>)
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	4a72      	ldr	r2, [pc, #456]	@ (8002ce0 <HAL_RCC_OscConfig+0x270>)
 8002b16:	f043 0308 	orr.w	r3, r3, #8
 8002b1a:	6013      	str	r3, [r2, #0]
 8002b1c:	4b70      	ldr	r3, [pc, #448]	@ (8002ce0 <HAL_RCC_OscConfig+0x270>)
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	6a1b      	ldr	r3, [r3, #32]
 8002b28:	496d      	ldr	r1, [pc, #436]	@ (8002ce0 <HAL_RCC_OscConfig+0x270>)
 8002b2a:	4313      	orrs	r3, r2
 8002b2c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002b2e:	4b6c      	ldr	r3, [pc, #432]	@ (8002ce0 <HAL_RCC_OscConfig+0x270>)
 8002b30:	685b      	ldr	r3, [r3, #4]
 8002b32:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	69db      	ldr	r3, [r3, #28]
 8002b3a:	021b      	lsls	r3, r3, #8
 8002b3c:	4968      	ldr	r1, [pc, #416]	@ (8002ce0 <HAL_RCC_OscConfig+0x270>)
 8002b3e:	4313      	orrs	r3, r2
 8002b40:	604b      	str	r3, [r1, #4]
 8002b42:	e025      	b.n	8002b90 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002b44:	4b66      	ldr	r3, [pc, #408]	@ (8002ce0 <HAL_RCC_OscConfig+0x270>)
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	4a65      	ldr	r2, [pc, #404]	@ (8002ce0 <HAL_RCC_OscConfig+0x270>)
 8002b4a:	f043 0308 	orr.w	r3, r3, #8
 8002b4e:	6013      	str	r3, [r2, #0]
 8002b50:	4b63      	ldr	r3, [pc, #396]	@ (8002ce0 <HAL_RCC_OscConfig+0x270>)
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	6a1b      	ldr	r3, [r3, #32]
 8002b5c:	4960      	ldr	r1, [pc, #384]	@ (8002ce0 <HAL_RCC_OscConfig+0x270>)
 8002b5e:	4313      	orrs	r3, r2
 8002b60:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002b62:	4b5f      	ldr	r3, [pc, #380]	@ (8002ce0 <HAL_RCC_OscConfig+0x270>)
 8002b64:	685b      	ldr	r3, [r3, #4]
 8002b66:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	69db      	ldr	r3, [r3, #28]
 8002b6e:	021b      	lsls	r3, r3, #8
 8002b70:	495b      	ldr	r1, [pc, #364]	@ (8002ce0 <HAL_RCC_OscConfig+0x270>)
 8002b72:	4313      	orrs	r3, r2
 8002b74:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002b76:	69bb      	ldr	r3, [r7, #24]
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d109      	bne.n	8002b90 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	6a1b      	ldr	r3, [r3, #32]
 8002b80:	4618      	mov	r0, r3
 8002b82:	f000 fd15 	bl	80035b0 <RCC_SetFlashLatencyFromMSIRange>
 8002b86:	4603      	mov	r3, r0
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d001      	beq.n	8002b90 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8002b8c:	2301      	movs	r3, #1
 8002b8e:	e343      	b.n	8003218 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002b90:	f000 fc4a 	bl	8003428 <HAL_RCC_GetSysClockFreq>
 8002b94:	4602      	mov	r2, r0
 8002b96:	4b52      	ldr	r3, [pc, #328]	@ (8002ce0 <HAL_RCC_OscConfig+0x270>)
 8002b98:	689b      	ldr	r3, [r3, #8]
 8002b9a:	091b      	lsrs	r3, r3, #4
 8002b9c:	f003 030f 	and.w	r3, r3, #15
 8002ba0:	4950      	ldr	r1, [pc, #320]	@ (8002ce4 <HAL_RCC_OscConfig+0x274>)
 8002ba2:	5ccb      	ldrb	r3, [r1, r3]
 8002ba4:	f003 031f 	and.w	r3, r3, #31
 8002ba8:	fa22 f303 	lsr.w	r3, r2, r3
 8002bac:	4a4e      	ldr	r2, [pc, #312]	@ (8002ce8 <HAL_RCC_OscConfig+0x278>)
 8002bae:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002bb0:	4b4e      	ldr	r3, [pc, #312]	@ (8002cec <HAL_RCC_OscConfig+0x27c>)
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	4618      	mov	r0, r3
 8002bb6:	f7ff fba3 	bl	8002300 <HAL_InitTick>
 8002bba:	4603      	mov	r3, r0
 8002bbc:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002bbe:	7bfb      	ldrb	r3, [r7, #15]
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d052      	beq.n	8002c6a <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8002bc4:	7bfb      	ldrb	r3, [r7, #15]
 8002bc6:	e327      	b.n	8003218 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	699b      	ldr	r3, [r3, #24]
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d032      	beq.n	8002c36 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002bd0:	4b43      	ldr	r3, [pc, #268]	@ (8002ce0 <HAL_RCC_OscConfig+0x270>)
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	4a42      	ldr	r2, [pc, #264]	@ (8002ce0 <HAL_RCC_OscConfig+0x270>)
 8002bd6:	f043 0301 	orr.w	r3, r3, #1
 8002bda:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002bdc:	f7ff fbe0 	bl	80023a0 <HAL_GetTick>
 8002be0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002be2:	e008      	b.n	8002bf6 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002be4:	f7ff fbdc 	bl	80023a0 <HAL_GetTick>
 8002be8:	4602      	mov	r2, r0
 8002bea:	693b      	ldr	r3, [r7, #16]
 8002bec:	1ad3      	subs	r3, r2, r3
 8002bee:	2b02      	cmp	r3, #2
 8002bf0:	d901      	bls.n	8002bf6 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8002bf2:	2303      	movs	r3, #3
 8002bf4:	e310      	b.n	8003218 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002bf6:	4b3a      	ldr	r3, [pc, #232]	@ (8002ce0 <HAL_RCC_OscConfig+0x270>)
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	f003 0302 	and.w	r3, r3, #2
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d0f0      	beq.n	8002be4 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002c02:	4b37      	ldr	r3, [pc, #220]	@ (8002ce0 <HAL_RCC_OscConfig+0x270>)
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	4a36      	ldr	r2, [pc, #216]	@ (8002ce0 <HAL_RCC_OscConfig+0x270>)
 8002c08:	f043 0308 	orr.w	r3, r3, #8
 8002c0c:	6013      	str	r3, [r2, #0]
 8002c0e:	4b34      	ldr	r3, [pc, #208]	@ (8002ce0 <HAL_RCC_OscConfig+0x270>)
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	6a1b      	ldr	r3, [r3, #32]
 8002c1a:	4931      	ldr	r1, [pc, #196]	@ (8002ce0 <HAL_RCC_OscConfig+0x270>)
 8002c1c:	4313      	orrs	r3, r2
 8002c1e:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002c20:	4b2f      	ldr	r3, [pc, #188]	@ (8002ce0 <HAL_RCC_OscConfig+0x270>)
 8002c22:	685b      	ldr	r3, [r3, #4]
 8002c24:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	69db      	ldr	r3, [r3, #28]
 8002c2c:	021b      	lsls	r3, r3, #8
 8002c2e:	492c      	ldr	r1, [pc, #176]	@ (8002ce0 <HAL_RCC_OscConfig+0x270>)
 8002c30:	4313      	orrs	r3, r2
 8002c32:	604b      	str	r3, [r1, #4]
 8002c34:	e01a      	b.n	8002c6c <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002c36:	4b2a      	ldr	r3, [pc, #168]	@ (8002ce0 <HAL_RCC_OscConfig+0x270>)
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	4a29      	ldr	r2, [pc, #164]	@ (8002ce0 <HAL_RCC_OscConfig+0x270>)
 8002c3c:	f023 0301 	bic.w	r3, r3, #1
 8002c40:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002c42:	f7ff fbad 	bl	80023a0 <HAL_GetTick>
 8002c46:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002c48:	e008      	b.n	8002c5c <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002c4a:	f7ff fba9 	bl	80023a0 <HAL_GetTick>
 8002c4e:	4602      	mov	r2, r0
 8002c50:	693b      	ldr	r3, [r7, #16]
 8002c52:	1ad3      	subs	r3, r2, r3
 8002c54:	2b02      	cmp	r3, #2
 8002c56:	d901      	bls.n	8002c5c <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8002c58:	2303      	movs	r3, #3
 8002c5a:	e2dd      	b.n	8003218 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002c5c:	4b20      	ldr	r3, [pc, #128]	@ (8002ce0 <HAL_RCC_OscConfig+0x270>)
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	f003 0302 	and.w	r3, r3, #2
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d1f0      	bne.n	8002c4a <HAL_RCC_OscConfig+0x1da>
 8002c68:	e000      	b.n	8002c6c <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002c6a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	f003 0301 	and.w	r3, r3, #1
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d074      	beq.n	8002d62 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002c78:	69bb      	ldr	r3, [r7, #24]
 8002c7a:	2b08      	cmp	r3, #8
 8002c7c:	d005      	beq.n	8002c8a <HAL_RCC_OscConfig+0x21a>
 8002c7e:	69bb      	ldr	r3, [r7, #24]
 8002c80:	2b0c      	cmp	r3, #12
 8002c82:	d10e      	bne.n	8002ca2 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002c84:	697b      	ldr	r3, [r7, #20]
 8002c86:	2b03      	cmp	r3, #3
 8002c88:	d10b      	bne.n	8002ca2 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c8a:	4b15      	ldr	r3, [pc, #84]	@ (8002ce0 <HAL_RCC_OscConfig+0x270>)
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d064      	beq.n	8002d60 <HAL_RCC_OscConfig+0x2f0>
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	685b      	ldr	r3, [r3, #4]
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d160      	bne.n	8002d60 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002c9e:	2301      	movs	r3, #1
 8002ca0:	e2ba      	b.n	8003218 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	685b      	ldr	r3, [r3, #4]
 8002ca6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002caa:	d106      	bne.n	8002cba <HAL_RCC_OscConfig+0x24a>
 8002cac:	4b0c      	ldr	r3, [pc, #48]	@ (8002ce0 <HAL_RCC_OscConfig+0x270>)
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	4a0b      	ldr	r2, [pc, #44]	@ (8002ce0 <HAL_RCC_OscConfig+0x270>)
 8002cb2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002cb6:	6013      	str	r3, [r2, #0]
 8002cb8:	e026      	b.n	8002d08 <HAL_RCC_OscConfig+0x298>
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	685b      	ldr	r3, [r3, #4]
 8002cbe:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002cc2:	d115      	bne.n	8002cf0 <HAL_RCC_OscConfig+0x280>
 8002cc4:	4b06      	ldr	r3, [pc, #24]	@ (8002ce0 <HAL_RCC_OscConfig+0x270>)
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	4a05      	ldr	r2, [pc, #20]	@ (8002ce0 <HAL_RCC_OscConfig+0x270>)
 8002cca:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002cce:	6013      	str	r3, [r2, #0]
 8002cd0:	4b03      	ldr	r3, [pc, #12]	@ (8002ce0 <HAL_RCC_OscConfig+0x270>)
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	4a02      	ldr	r2, [pc, #8]	@ (8002ce0 <HAL_RCC_OscConfig+0x270>)
 8002cd6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002cda:	6013      	str	r3, [r2, #0]
 8002cdc:	e014      	b.n	8002d08 <HAL_RCC_OscConfig+0x298>
 8002cde:	bf00      	nop
 8002ce0:	40021000 	.word	0x40021000
 8002ce4:	08005030 	.word	0x08005030
 8002ce8:	20000a0c 	.word	0x20000a0c
 8002cec:	20000a10 	.word	0x20000a10
 8002cf0:	4ba0      	ldr	r3, [pc, #640]	@ (8002f74 <HAL_RCC_OscConfig+0x504>)
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	4a9f      	ldr	r2, [pc, #636]	@ (8002f74 <HAL_RCC_OscConfig+0x504>)
 8002cf6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002cfa:	6013      	str	r3, [r2, #0]
 8002cfc:	4b9d      	ldr	r3, [pc, #628]	@ (8002f74 <HAL_RCC_OscConfig+0x504>)
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	4a9c      	ldr	r2, [pc, #624]	@ (8002f74 <HAL_RCC_OscConfig+0x504>)
 8002d02:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002d06:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	685b      	ldr	r3, [r3, #4]
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d013      	beq.n	8002d38 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d10:	f7ff fb46 	bl	80023a0 <HAL_GetTick>
 8002d14:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002d16:	e008      	b.n	8002d2a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002d18:	f7ff fb42 	bl	80023a0 <HAL_GetTick>
 8002d1c:	4602      	mov	r2, r0
 8002d1e:	693b      	ldr	r3, [r7, #16]
 8002d20:	1ad3      	subs	r3, r2, r3
 8002d22:	2b64      	cmp	r3, #100	@ 0x64
 8002d24:	d901      	bls.n	8002d2a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002d26:	2303      	movs	r3, #3
 8002d28:	e276      	b.n	8003218 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002d2a:	4b92      	ldr	r3, [pc, #584]	@ (8002f74 <HAL_RCC_OscConfig+0x504>)
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d0f0      	beq.n	8002d18 <HAL_RCC_OscConfig+0x2a8>
 8002d36:	e014      	b.n	8002d62 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d38:	f7ff fb32 	bl	80023a0 <HAL_GetTick>
 8002d3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002d3e:	e008      	b.n	8002d52 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002d40:	f7ff fb2e 	bl	80023a0 <HAL_GetTick>
 8002d44:	4602      	mov	r2, r0
 8002d46:	693b      	ldr	r3, [r7, #16]
 8002d48:	1ad3      	subs	r3, r2, r3
 8002d4a:	2b64      	cmp	r3, #100	@ 0x64
 8002d4c:	d901      	bls.n	8002d52 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002d4e:	2303      	movs	r3, #3
 8002d50:	e262      	b.n	8003218 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002d52:	4b88      	ldr	r3, [pc, #544]	@ (8002f74 <HAL_RCC_OscConfig+0x504>)
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d1f0      	bne.n	8002d40 <HAL_RCC_OscConfig+0x2d0>
 8002d5e:	e000      	b.n	8002d62 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d60:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	f003 0302 	and.w	r3, r3, #2
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d060      	beq.n	8002e30 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002d6e:	69bb      	ldr	r3, [r7, #24]
 8002d70:	2b04      	cmp	r3, #4
 8002d72:	d005      	beq.n	8002d80 <HAL_RCC_OscConfig+0x310>
 8002d74:	69bb      	ldr	r3, [r7, #24]
 8002d76:	2b0c      	cmp	r3, #12
 8002d78:	d119      	bne.n	8002dae <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002d7a:	697b      	ldr	r3, [r7, #20]
 8002d7c:	2b02      	cmp	r3, #2
 8002d7e:	d116      	bne.n	8002dae <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002d80:	4b7c      	ldr	r3, [pc, #496]	@ (8002f74 <HAL_RCC_OscConfig+0x504>)
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d005      	beq.n	8002d98 <HAL_RCC_OscConfig+0x328>
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	68db      	ldr	r3, [r3, #12]
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d101      	bne.n	8002d98 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002d94:	2301      	movs	r3, #1
 8002d96:	e23f      	b.n	8003218 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d98:	4b76      	ldr	r3, [pc, #472]	@ (8002f74 <HAL_RCC_OscConfig+0x504>)
 8002d9a:	685b      	ldr	r3, [r3, #4]
 8002d9c:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	691b      	ldr	r3, [r3, #16]
 8002da4:	061b      	lsls	r3, r3, #24
 8002da6:	4973      	ldr	r1, [pc, #460]	@ (8002f74 <HAL_RCC_OscConfig+0x504>)
 8002da8:	4313      	orrs	r3, r2
 8002daa:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002dac:	e040      	b.n	8002e30 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	68db      	ldr	r3, [r3, #12]
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d023      	beq.n	8002dfe <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002db6:	4b6f      	ldr	r3, [pc, #444]	@ (8002f74 <HAL_RCC_OscConfig+0x504>)
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	4a6e      	ldr	r2, [pc, #440]	@ (8002f74 <HAL_RCC_OscConfig+0x504>)
 8002dbc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002dc0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002dc2:	f7ff faed 	bl	80023a0 <HAL_GetTick>
 8002dc6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002dc8:	e008      	b.n	8002ddc <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002dca:	f7ff fae9 	bl	80023a0 <HAL_GetTick>
 8002dce:	4602      	mov	r2, r0
 8002dd0:	693b      	ldr	r3, [r7, #16]
 8002dd2:	1ad3      	subs	r3, r2, r3
 8002dd4:	2b02      	cmp	r3, #2
 8002dd6:	d901      	bls.n	8002ddc <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002dd8:	2303      	movs	r3, #3
 8002dda:	e21d      	b.n	8003218 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002ddc:	4b65      	ldr	r3, [pc, #404]	@ (8002f74 <HAL_RCC_OscConfig+0x504>)
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d0f0      	beq.n	8002dca <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002de8:	4b62      	ldr	r3, [pc, #392]	@ (8002f74 <HAL_RCC_OscConfig+0x504>)
 8002dea:	685b      	ldr	r3, [r3, #4]
 8002dec:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	691b      	ldr	r3, [r3, #16]
 8002df4:	061b      	lsls	r3, r3, #24
 8002df6:	495f      	ldr	r1, [pc, #380]	@ (8002f74 <HAL_RCC_OscConfig+0x504>)
 8002df8:	4313      	orrs	r3, r2
 8002dfa:	604b      	str	r3, [r1, #4]
 8002dfc:	e018      	b.n	8002e30 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002dfe:	4b5d      	ldr	r3, [pc, #372]	@ (8002f74 <HAL_RCC_OscConfig+0x504>)
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	4a5c      	ldr	r2, [pc, #368]	@ (8002f74 <HAL_RCC_OscConfig+0x504>)
 8002e04:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002e08:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e0a:	f7ff fac9 	bl	80023a0 <HAL_GetTick>
 8002e0e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002e10:	e008      	b.n	8002e24 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002e12:	f7ff fac5 	bl	80023a0 <HAL_GetTick>
 8002e16:	4602      	mov	r2, r0
 8002e18:	693b      	ldr	r3, [r7, #16]
 8002e1a:	1ad3      	subs	r3, r2, r3
 8002e1c:	2b02      	cmp	r3, #2
 8002e1e:	d901      	bls.n	8002e24 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002e20:	2303      	movs	r3, #3
 8002e22:	e1f9      	b.n	8003218 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002e24:	4b53      	ldr	r3, [pc, #332]	@ (8002f74 <HAL_RCC_OscConfig+0x504>)
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d1f0      	bne.n	8002e12 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f003 0308 	and.w	r3, r3, #8
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d03c      	beq.n	8002eb6 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	695b      	ldr	r3, [r3, #20]
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d01c      	beq.n	8002e7e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002e44:	4b4b      	ldr	r3, [pc, #300]	@ (8002f74 <HAL_RCC_OscConfig+0x504>)
 8002e46:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002e4a:	4a4a      	ldr	r2, [pc, #296]	@ (8002f74 <HAL_RCC_OscConfig+0x504>)
 8002e4c:	f043 0301 	orr.w	r3, r3, #1
 8002e50:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e54:	f7ff faa4 	bl	80023a0 <HAL_GetTick>
 8002e58:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002e5a:	e008      	b.n	8002e6e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002e5c:	f7ff faa0 	bl	80023a0 <HAL_GetTick>
 8002e60:	4602      	mov	r2, r0
 8002e62:	693b      	ldr	r3, [r7, #16]
 8002e64:	1ad3      	subs	r3, r2, r3
 8002e66:	2b02      	cmp	r3, #2
 8002e68:	d901      	bls.n	8002e6e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002e6a:	2303      	movs	r3, #3
 8002e6c:	e1d4      	b.n	8003218 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002e6e:	4b41      	ldr	r3, [pc, #260]	@ (8002f74 <HAL_RCC_OscConfig+0x504>)
 8002e70:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002e74:	f003 0302 	and.w	r3, r3, #2
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d0ef      	beq.n	8002e5c <HAL_RCC_OscConfig+0x3ec>
 8002e7c:	e01b      	b.n	8002eb6 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002e7e:	4b3d      	ldr	r3, [pc, #244]	@ (8002f74 <HAL_RCC_OscConfig+0x504>)
 8002e80:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002e84:	4a3b      	ldr	r2, [pc, #236]	@ (8002f74 <HAL_RCC_OscConfig+0x504>)
 8002e86:	f023 0301 	bic.w	r3, r3, #1
 8002e8a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e8e:	f7ff fa87 	bl	80023a0 <HAL_GetTick>
 8002e92:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002e94:	e008      	b.n	8002ea8 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002e96:	f7ff fa83 	bl	80023a0 <HAL_GetTick>
 8002e9a:	4602      	mov	r2, r0
 8002e9c:	693b      	ldr	r3, [r7, #16]
 8002e9e:	1ad3      	subs	r3, r2, r3
 8002ea0:	2b02      	cmp	r3, #2
 8002ea2:	d901      	bls.n	8002ea8 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002ea4:	2303      	movs	r3, #3
 8002ea6:	e1b7      	b.n	8003218 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002ea8:	4b32      	ldr	r3, [pc, #200]	@ (8002f74 <HAL_RCC_OscConfig+0x504>)
 8002eaa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002eae:	f003 0302 	and.w	r3, r3, #2
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d1ef      	bne.n	8002e96 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	f003 0304 	and.w	r3, r3, #4
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	f000 80a6 	beq.w	8003010 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002ec4:	2300      	movs	r3, #0
 8002ec6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002ec8:	4b2a      	ldr	r3, [pc, #168]	@ (8002f74 <HAL_RCC_OscConfig+0x504>)
 8002eca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ecc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d10d      	bne.n	8002ef0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002ed4:	4b27      	ldr	r3, [pc, #156]	@ (8002f74 <HAL_RCC_OscConfig+0x504>)
 8002ed6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ed8:	4a26      	ldr	r2, [pc, #152]	@ (8002f74 <HAL_RCC_OscConfig+0x504>)
 8002eda:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002ede:	6593      	str	r3, [r2, #88]	@ 0x58
 8002ee0:	4b24      	ldr	r3, [pc, #144]	@ (8002f74 <HAL_RCC_OscConfig+0x504>)
 8002ee2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ee4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002ee8:	60bb      	str	r3, [r7, #8]
 8002eea:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002eec:	2301      	movs	r3, #1
 8002eee:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002ef0:	4b21      	ldr	r3, [pc, #132]	@ (8002f78 <HAL_RCC_OscConfig+0x508>)
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d118      	bne.n	8002f2e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002efc:	4b1e      	ldr	r3, [pc, #120]	@ (8002f78 <HAL_RCC_OscConfig+0x508>)
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	4a1d      	ldr	r2, [pc, #116]	@ (8002f78 <HAL_RCC_OscConfig+0x508>)
 8002f02:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002f06:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002f08:	f7ff fa4a 	bl	80023a0 <HAL_GetTick>
 8002f0c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002f0e:	e008      	b.n	8002f22 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f10:	f7ff fa46 	bl	80023a0 <HAL_GetTick>
 8002f14:	4602      	mov	r2, r0
 8002f16:	693b      	ldr	r3, [r7, #16]
 8002f18:	1ad3      	subs	r3, r2, r3
 8002f1a:	2b02      	cmp	r3, #2
 8002f1c:	d901      	bls.n	8002f22 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002f1e:	2303      	movs	r3, #3
 8002f20:	e17a      	b.n	8003218 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002f22:	4b15      	ldr	r3, [pc, #84]	@ (8002f78 <HAL_RCC_OscConfig+0x508>)
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d0f0      	beq.n	8002f10 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	689b      	ldr	r3, [r3, #8]
 8002f32:	2b01      	cmp	r3, #1
 8002f34:	d108      	bne.n	8002f48 <HAL_RCC_OscConfig+0x4d8>
 8002f36:	4b0f      	ldr	r3, [pc, #60]	@ (8002f74 <HAL_RCC_OscConfig+0x504>)
 8002f38:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002f3c:	4a0d      	ldr	r2, [pc, #52]	@ (8002f74 <HAL_RCC_OscConfig+0x504>)
 8002f3e:	f043 0301 	orr.w	r3, r3, #1
 8002f42:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002f46:	e029      	b.n	8002f9c <HAL_RCC_OscConfig+0x52c>
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	689b      	ldr	r3, [r3, #8]
 8002f4c:	2b05      	cmp	r3, #5
 8002f4e:	d115      	bne.n	8002f7c <HAL_RCC_OscConfig+0x50c>
 8002f50:	4b08      	ldr	r3, [pc, #32]	@ (8002f74 <HAL_RCC_OscConfig+0x504>)
 8002f52:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002f56:	4a07      	ldr	r2, [pc, #28]	@ (8002f74 <HAL_RCC_OscConfig+0x504>)
 8002f58:	f043 0304 	orr.w	r3, r3, #4
 8002f5c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002f60:	4b04      	ldr	r3, [pc, #16]	@ (8002f74 <HAL_RCC_OscConfig+0x504>)
 8002f62:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002f66:	4a03      	ldr	r2, [pc, #12]	@ (8002f74 <HAL_RCC_OscConfig+0x504>)
 8002f68:	f043 0301 	orr.w	r3, r3, #1
 8002f6c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002f70:	e014      	b.n	8002f9c <HAL_RCC_OscConfig+0x52c>
 8002f72:	bf00      	nop
 8002f74:	40021000 	.word	0x40021000
 8002f78:	40007000 	.word	0x40007000
 8002f7c:	4b9c      	ldr	r3, [pc, #624]	@ (80031f0 <HAL_RCC_OscConfig+0x780>)
 8002f7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002f82:	4a9b      	ldr	r2, [pc, #620]	@ (80031f0 <HAL_RCC_OscConfig+0x780>)
 8002f84:	f023 0301 	bic.w	r3, r3, #1
 8002f88:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002f8c:	4b98      	ldr	r3, [pc, #608]	@ (80031f0 <HAL_RCC_OscConfig+0x780>)
 8002f8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002f92:	4a97      	ldr	r2, [pc, #604]	@ (80031f0 <HAL_RCC_OscConfig+0x780>)
 8002f94:	f023 0304 	bic.w	r3, r3, #4
 8002f98:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	689b      	ldr	r3, [r3, #8]
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d016      	beq.n	8002fd2 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fa4:	f7ff f9fc 	bl	80023a0 <HAL_GetTick>
 8002fa8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002faa:	e00a      	b.n	8002fc2 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002fac:	f7ff f9f8 	bl	80023a0 <HAL_GetTick>
 8002fb0:	4602      	mov	r2, r0
 8002fb2:	693b      	ldr	r3, [r7, #16]
 8002fb4:	1ad3      	subs	r3, r2, r3
 8002fb6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002fba:	4293      	cmp	r3, r2
 8002fbc:	d901      	bls.n	8002fc2 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8002fbe:	2303      	movs	r3, #3
 8002fc0:	e12a      	b.n	8003218 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002fc2:	4b8b      	ldr	r3, [pc, #556]	@ (80031f0 <HAL_RCC_OscConfig+0x780>)
 8002fc4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002fc8:	f003 0302 	and.w	r3, r3, #2
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d0ed      	beq.n	8002fac <HAL_RCC_OscConfig+0x53c>
 8002fd0:	e015      	b.n	8002ffe <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fd2:	f7ff f9e5 	bl	80023a0 <HAL_GetTick>
 8002fd6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002fd8:	e00a      	b.n	8002ff0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002fda:	f7ff f9e1 	bl	80023a0 <HAL_GetTick>
 8002fde:	4602      	mov	r2, r0
 8002fe0:	693b      	ldr	r3, [r7, #16]
 8002fe2:	1ad3      	subs	r3, r2, r3
 8002fe4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002fe8:	4293      	cmp	r3, r2
 8002fea:	d901      	bls.n	8002ff0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002fec:	2303      	movs	r3, #3
 8002fee:	e113      	b.n	8003218 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002ff0:	4b7f      	ldr	r3, [pc, #508]	@ (80031f0 <HAL_RCC_OscConfig+0x780>)
 8002ff2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002ff6:	f003 0302 	and.w	r3, r3, #2
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d1ed      	bne.n	8002fda <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002ffe:	7ffb      	ldrb	r3, [r7, #31]
 8003000:	2b01      	cmp	r3, #1
 8003002:	d105      	bne.n	8003010 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003004:	4b7a      	ldr	r3, [pc, #488]	@ (80031f0 <HAL_RCC_OscConfig+0x780>)
 8003006:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003008:	4a79      	ldr	r2, [pc, #484]	@ (80031f0 <HAL_RCC_OscConfig+0x780>)
 800300a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800300e:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003014:	2b00      	cmp	r3, #0
 8003016:	f000 80fe 	beq.w	8003216 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800301e:	2b02      	cmp	r3, #2
 8003020:	f040 80d0 	bne.w	80031c4 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003024:	4b72      	ldr	r3, [pc, #456]	@ (80031f0 <HAL_RCC_OscConfig+0x780>)
 8003026:	68db      	ldr	r3, [r3, #12]
 8003028:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800302a:	697b      	ldr	r3, [r7, #20]
 800302c:	f003 0203 	and.w	r2, r3, #3
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003034:	429a      	cmp	r2, r3
 8003036:	d130      	bne.n	800309a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003038:	697b      	ldr	r3, [r7, #20]
 800303a:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003042:	3b01      	subs	r3, #1
 8003044:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003046:	429a      	cmp	r2, r3
 8003048:	d127      	bne.n	800309a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800304a:	697b      	ldr	r3, [r7, #20]
 800304c:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003054:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003056:	429a      	cmp	r2, r3
 8003058:	d11f      	bne.n	800309a <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800305a:	697b      	ldr	r3, [r7, #20]
 800305c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003060:	687a      	ldr	r2, [r7, #4]
 8003062:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8003064:	2a07      	cmp	r2, #7
 8003066:	bf14      	ite	ne
 8003068:	2201      	movne	r2, #1
 800306a:	2200      	moveq	r2, #0
 800306c:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800306e:	4293      	cmp	r3, r2
 8003070:	d113      	bne.n	800309a <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003072:	697b      	ldr	r3, [r7, #20]
 8003074:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800307c:	085b      	lsrs	r3, r3, #1
 800307e:	3b01      	subs	r3, #1
 8003080:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003082:	429a      	cmp	r2, r3
 8003084:	d109      	bne.n	800309a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003086:	697b      	ldr	r3, [r7, #20]
 8003088:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003090:	085b      	lsrs	r3, r3, #1
 8003092:	3b01      	subs	r3, #1
 8003094:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003096:	429a      	cmp	r2, r3
 8003098:	d06e      	beq.n	8003178 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800309a:	69bb      	ldr	r3, [r7, #24]
 800309c:	2b0c      	cmp	r3, #12
 800309e:	d069      	beq.n	8003174 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80030a0:	4b53      	ldr	r3, [pc, #332]	@ (80031f0 <HAL_RCC_OscConfig+0x780>)
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d105      	bne.n	80030b8 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80030ac:	4b50      	ldr	r3, [pc, #320]	@ (80031f0 <HAL_RCC_OscConfig+0x780>)
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d001      	beq.n	80030bc <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80030b8:	2301      	movs	r3, #1
 80030ba:	e0ad      	b.n	8003218 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80030bc:	4b4c      	ldr	r3, [pc, #304]	@ (80031f0 <HAL_RCC_OscConfig+0x780>)
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	4a4b      	ldr	r2, [pc, #300]	@ (80031f0 <HAL_RCC_OscConfig+0x780>)
 80030c2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80030c6:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80030c8:	f7ff f96a 	bl	80023a0 <HAL_GetTick>
 80030cc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80030ce:	e008      	b.n	80030e2 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80030d0:	f7ff f966 	bl	80023a0 <HAL_GetTick>
 80030d4:	4602      	mov	r2, r0
 80030d6:	693b      	ldr	r3, [r7, #16]
 80030d8:	1ad3      	subs	r3, r2, r3
 80030da:	2b02      	cmp	r3, #2
 80030dc:	d901      	bls.n	80030e2 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80030de:	2303      	movs	r3, #3
 80030e0:	e09a      	b.n	8003218 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80030e2:	4b43      	ldr	r3, [pc, #268]	@ (80031f0 <HAL_RCC_OscConfig+0x780>)
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d1f0      	bne.n	80030d0 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80030ee:	4b40      	ldr	r3, [pc, #256]	@ (80031f0 <HAL_RCC_OscConfig+0x780>)
 80030f0:	68da      	ldr	r2, [r3, #12]
 80030f2:	4b40      	ldr	r3, [pc, #256]	@ (80031f4 <HAL_RCC_OscConfig+0x784>)
 80030f4:	4013      	ands	r3, r2
 80030f6:	687a      	ldr	r2, [r7, #4]
 80030f8:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 80030fa:	687a      	ldr	r2, [r7, #4]
 80030fc:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80030fe:	3a01      	subs	r2, #1
 8003100:	0112      	lsls	r2, r2, #4
 8003102:	4311      	orrs	r1, r2
 8003104:	687a      	ldr	r2, [r7, #4]
 8003106:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8003108:	0212      	lsls	r2, r2, #8
 800310a:	4311      	orrs	r1, r2
 800310c:	687a      	ldr	r2, [r7, #4]
 800310e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003110:	0852      	lsrs	r2, r2, #1
 8003112:	3a01      	subs	r2, #1
 8003114:	0552      	lsls	r2, r2, #21
 8003116:	4311      	orrs	r1, r2
 8003118:	687a      	ldr	r2, [r7, #4]
 800311a:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800311c:	0852      	lsrs	r2, r2, #1
 800311e:	3a01      	subs	r2, #1
 8003120:	0652      	lsls	r2, r2, #25
 8003122:	4311      	orrs	r1, r2
 8003124:	687a      	ldr	r2, [r7, #4]
 8003126:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8003128:	0912      	lsrs	r2, r2, #4
 800312a:	0452      	lsls	r2, r2, #17
 800312c:	430a      	orrs	r2, r1
 800312e:	4930      	ldr	r1, [pc, #192]	@ (80031f0 <HAL_RCC_OscConfig+0x780>)
 8003130:	4313      	orrs	r3, r2
 8003132:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003134:	4b2e      	ldr	r3, [pc, #184]	@ (80031f0 <HAL_RCC_OscConfig+0x780>)
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	4a2d      	ldr	r2, [pc, #180]	@ (80031f0 <HAL_RCC_OscConfig+0x780>)
 800313a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800313e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003140:	4b2b      	ldr	r3, [pc, #172]	@ (80031f0 <HAL_RCC_OscConfig+0x780>)
 8003142:	68db      	ldr	r3, [r3, #12]
 8003144:	4a2a      	ldr	r2, [pc, #168]	@ (80031f0 <HAL_RCC_OscConfig+0x780>)
 8003146:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800314a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800314c:	f7ff f928 	bl	80023a0 <HAL_GetTick>
 8003150:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003152:	e008      	b.n	8003166 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003154:	f7ff f924 	bl	80023a0 <HAL_GetTick>
 8003158:	4602      	mov	r2, r0
 800315a:	693b      	ldr	r3, [r7, #16]
 800315c:	1ad3      	subs	r3, r2, r3
 800315e:	2b02      	cmp	r3, #2
 8003160:	d901      	bls.n	8003166 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8003162:	2303      	movs	r3, #3
 8003164:	e058      	b.n	8003218 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003166:	4b22      	ldr	r3, [pc, #136]	@ (80031f0 <HAL_RCC_OscConfig+0x780>)
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800316e:	2b00      	cmp	r3, #0
 8003170:	d0f0      	beq.n	8003154 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003172:	e050      	b.n	8003216 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003174:	2301      	movs	r3, #1
 8003176:	e04f      	b.n	8003218 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003178:	4b1d      	ldr	r3, [pc, #116]	@ (80031f0 <HAL_RCC_OscConfig+0x780>)
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003180:	2b00      	cmp	r3, #0
 8003182:	d148      	bne.n	8003216 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003184:	4b1a      	ldr	r3, [pc, #104]	@ (80031f0 <HAL_RCC_OscConfig+0x780>)
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	4a19      	ldr	r2, [pc, #100]	@ (80031f0 <HAL_RCC_OscConfig+0x780>)
 800318a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800318e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003190:	4b17      	ldr	r3, [pc, #92]	@ (80031f0 <HAL_RCC_OscConfig+0x780>)
 8003192:	68db      	ldr	r3, [r3, #12]
 8003194:	4a16      	ldr	r2, [pc, #88]	@ (80031f0 <HAL_RCC_OscConfig+0x780>)
 8003196:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800319a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800319c:	f7ff f900 	bl	80023a0 <HAL_GetTick>
 80031a0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80031a2:	e008      	b.n	80031b6 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80031a4:	f7ff f8fc 	bl	80023a0 <HAL_GetTick>
 80031a8:	4602      	mov	r2, r0
 80031aa:	693b      	ldr	r3, [r7, #16]
 80031ac:	1ad3      	subs	r3, r2, r3
 80031ae:	2b02      	cmp	r3, #2
 80031b0:	d901      	bls.n	80031b6 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80031b2:	2303      	movs	r3, #3
 80031b4:	e030      	b.n	8003218 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80031b6:	4b0e      	ldr	r3, [pc, #56]	@ (80031f0 <HAL_RCC_OscConfig+0x780>)
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d0f0      	beq.n	80031a4 <HAL_RCC_OscConfig+0x734>
 80031c2:	e028      	b.n	8003216 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80031c4:	69bb      	ldr	r3, [r7, #24]
 80031c6:	2b0c      	cmp	r3, #12
 80031c8:	d023      	beq.n	8003212 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80031ca:	4b09      	ldr	r3, [pc, #36]	@ (80031f0 <HAL_RCC_OscConfig+0x780>)
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	4a08      	ldr	r2, [pc, #32]	@ (80031f0 <HAL_RCC_OscConfig+0x780>)
 80031d0:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80031d4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031d6:	f7ff f8e3 	bl	80023a0 <HAL_GetTick>
 80031da:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80031dc:	e00c      	b.n	80031f8 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80031de:	f7ff f8df 	bl	80023a0 <HAL_GetTick>
 80031e2:	4602      	mov	r2, r0
 80031e4:	693b      	ldr	r3, [r7, #16]
 80031e6:	1ad3      	subs	r3, r2, r3
 80031e8:	2b02      	cmp	r3, #2
 80031ea:	d905      	bls.n	80031f8 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 80031ec:	2303      	movs	r3, #3
 80031ee:	e013      	b.n	8003218 <HAL_RCC_OscConfig+0x7a8>
 80031f0:	40021000 	.word	0x40021000
 80031f4:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80031f8:	4b09      	ldr	r3, [pc, #36]	@ (8003220 <HAL_RCC_OscConfig+0x7b0>)
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003200:	2b00      	cmp	r3, #0
 8003202:	d1ec      	bne.n	80031de <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003204:	4b06      	ldr	r3, [pc, #24]	@ (8003220 <HAL_RCC_OscConfig+0x7b0>)
 8003206:	68da      	ldr	r2, [r3, #12]
 8003208:	4905      	ldr	r1, [pc, #20]	@ (8003220 <HAL_RCC_OscConfig+0x7b0>)
 800320a:	4b06      	ldr	r3, [pc, #24]	@ (8003224 <HAL_RCC_OscConfig+0x7b4>)
 800320c:	4013      	ands	r3, r2
 800320e:	60cb      	str	r3, [r1, #12]
 8003210:	e001      	b.n	8003216 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003212:	2301      	movs	r3, #1
 8003214:	e000      	b.n	8003218 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8003216:	2300      	movs	r3, #0
}
 8003218:	4618      	mov	r0, r3
 800321a:	3720      	adds	r7, #32
 800321c:	46bd      	mov	sp, r7
 800321e:	bd80      	pop	{r7, pc}
 8003220:	40021000 	.word	0x40021000
 8003224:	feeefffc 	.word	0xfeeefffc

08003228 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003228:	b580      	push	{r7, lr}
 800322a:	b084      	sub	sp, #16
 800322c:	af00      	add	r7, sp, #0
 800322e:	6078      	str	r0, [r7, #4]
 8003230:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	2b00      	cmp	r3, #0
 8003236:	d101      	bne.n	800323c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003238:	2301      	movs	r3, #1
 800323a:	e0e7      	b.n	800340c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800323c:	4b75      	ldr	r3, [pc, #468]	@ (8003414 <HAL_RCC_ClockConfig+0x1ec>)
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	f003 0307 	and.w	r3, r3, #7
 8003244:	683a      	ldr	r2, [r7, #0]
 8003246:	429a      	cmp	r2, r3
 8003248:	d910      	bls.n	800326c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800324a:	4b72      	ldr	r3, [pc, #456]	@ (8003414 <HAL_RCC_ClockConfig+0x1ec>)
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	f023 0207 	bic.w	r2, r3, #7
 8003252:	4970      	ldr	r1, [pc, #448]	@ (8003414 <HAL_RCC_ClockConfig+0x1ec>)
 8003254:	683b      	ldr	r3, [r7, #0]
 8003256:	4313      	orrs	r3, r2
 8003258:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800325a:	4b6e      	ldr	r3, [pc, #440]	@ (8003414 <HAL_RCC_ClockConfig+0x1ec>)
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	f003 0307 	and.w	r3, r3, #7
 8003262:	683a      	ldr	r2, [r7, #0]
 8003264:	429a      	cmp	r2, r3
 8003266:	d001      	beq.n	800326c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003268:	2301      	movs	r3, #1
 800326a:	e0cf      	b.n	800340c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	f003 0302 	and.w	r3, r3, #2
 8003274:	2b00      	cmp	r3, #0
 8003276:	d010      	beq.n	800329a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	689a      	ldr	r2, [r3, #8]
 800327c:	4b66      	ldr	r3, [pc, #408]	@ (8003418 <HAL_RCC_ClockConfig+0x1f0>)
 800327e:	689b      	ldr	r3, [r3, #8]
 8003280:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003284:	429a      	cmp	r2, r3
 8003286:	d908      	bls.n	800329a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003288:	4b63      	ldr	r3, [pc, #396]	@ (8003418 <HAL_RCC_ClockConfig+0x1f0>)
 800328a:	689b      	ldr	r3, [r3, #8]
 800328c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	689b      	ldr	r3, [r3, #8]
 8003294:	4960      	ldr	r1, [pc, #384]	@ (8003418 <HAL_RCC_ClockConfig+0x1f0>)
 8003296:	4313      	orrs	r3, r2
 8003298:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	f003 0301 	and.w	r3, r3, #1
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d04c      	beq.n	8003340 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	685b      	ldr	r3, [r3, #4]
 80032aa:	2b03      	cmp	r3, #3
 80032ac:	d107      	bne.n	80032be <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80032ae:	4b5a      	ldr	r3, [pc, #360]	@ (8003418 <HAL_RCC_ClockConfig+0x1f0>)
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d121      	bne.n	80032fe <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80032ba:	2301      	movs	r3, #1
 80032bc:	e0a6      	b.n	800340c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	685b      	ldr	r3, [r3, #4]
 80032c2:	2b02      	cmp	r3, #2
 80032c4:	d107      	bne.n	80032d6 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80032c6:	4b54      	ldr	r3, [pc, #336]	@ (8003418 <HAL_RCC_ClockConfig+0x1f0>)
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d115      	bne.n	80032fe <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80032d2:	2301      	movs	r3, #1
 80032d4:	e09a      	b.n	800340c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	685b      	ldr	r3, [r3, #4]
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d107      	bne.n	80032ee <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80032de:	4b4e      	ldr	r3, [pc, #312]	@ (8003418 <HAL_RCC_ClockConfig+0x1f0>)
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	f003 0302 	and.w	r3, r3, #2
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d109      	bne.n	80032fe <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80032ea:	2301      	movs	r3, #1
 80032ec:	e08e      	b.n	800340c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80032ee:	4b4a      	ldr	r3, [pc, #296]	@ (8003418 <HAL_RCC_ClockConfig+0x1f0>)
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d101      	bne.n	80032fe <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80032fa:	2301      	movs	r3, #1
 80032fc:	e086      	b.n	800340c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80032fe:	4b46      	ldr	r3, [pc, #280]	@ (8003418 <HAL_RCC_ClockConfig+0x1f0>)
 8003300:	689b      	ldr	r3, [r3, #8]
 8003302:	f023 0203 	bic.w	r2, r3, #3
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	685b      	ldr	r3, [r3, #4]
 800330a:	4943      	ldr	r1, [pc, #268]	@ (8003418 <HAL_RCC_ClockConfig+0x1f0>)
 800330c:	4313      	orrs	r3, r2
 800330e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003310:	f7ff f846 	bl	80023a0 <HAL_GetTick>
 8003314:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003316:	e00a      	b.n	800332e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003318:	f7ff f842 	bl	80023a0 <HAL_GetTick>
 800331c:	4602      	mov	r2, r0
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	1ad3      	subs	r3, r2, r3
 8003322:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003326:	4293      	cmp	r3, r2
 8003328:	d901      	bls.n	800332e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800332a:	2303      	movs	r3, #3
 800332c:	e06e      	b.n	800340c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800332e:	4b3a      	ldr	r3, [pc, #232]	@ (8003418 <HAL_RCC_ClockConfig+0x1f0>)
 8003330:	689b      	ldr	r3, [r3, #8]
 8003332:	f003 020c 	and.w	r2, r3, #12
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	685b      	ldr	r3, [r3, #4]
 800333a:	009b      	lsls	r3, r3, #2
 800333c:	429a      	cmp	r2, r3
 800333e:	d1eb      	bne.n	8003318 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	f003 0302 	and.w	r3, r3, #2
 8003348:	2b00      	cmp	r3, #0
 800334a:	d010      	beq.n	800336e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	689a      	ldr	r2, [r3, #8]
 8003350:	4b31      	ldr	r3, [pc, #196]	@ (8003418 <HAL_RCC_ClockConfig+0x1f0>)
 8003352:	689b      	ldr	r3, [r3, #8]
 8003354:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003358:	429a      	cmp	r2, r3
 800335a:	d208      	bcs.n	800336e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800335c:	4b2e      	ldr	r3, [pc, #184]	@ (8003418 <HAL_RCC_ClockConfig+0x1f0>)
 800335e:	689b      	ldr	r3, [r3, #8]
 8003360:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	689b      	ldr	r3, [r3, #8]
 8003368:	492b      	ldr	r1, [pc, #172]	@ (8003418 <HAL_RCC_ClockConfig+0x1f0>)
 800336a:	4313      	orrs	r3, r2
 800336c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800336e:	4b29      	ldr	r3, [pc, #164]	@ (8003414 <HAL_RCC_ClockConfig+0x1ec>)
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	f003 0307 	and.w	r3, r3, #7
 8003376:	683a      	ldr	r2, [r7, #0]
 8003378:	429a      	cmp	r2, r3
 800337a:	d210      	bcs.n	800339e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800337c:	4b25      	ldr	r3, [pc, #148]	@ (8003414 <HAL_RCC_ClockConfig+0x1ec>)
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	f023 0207 	bic.w	r2, r3, #7
 8003384:	4923      	ldr	r1, [pc, #140]	@ (8003414 <HAL_RCC_ClockConfig+0x1ec>)
 8003386:	683b      	ldr	r3, [r7, #0]
 8003388:	4313      	orrs	r3, r2
 800338a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800338c:	4b21      	ldr	r3, [pc, #132]	@ (8003414 <HAL_RCC_ClockConfig+0x1ec>)
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	f003 0307 	and.w	r3, r3, #7
 8003394:	683a      	ldr	r2, [r7, #0]
 8003396:	429a      	cmp	r2, r3
 8003398:	d001      	beq.n	800339e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800339a:	2301      	movs	r3, #1
 800339c:	e036      	b.n	800340c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	f003 0304 	and.w	r3, r3, #4
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d008      	beq.n	80033bc <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80033aa:	4b1b      	ldr	r3, [pc, #108]	@ (8003418 <HAL_RCC_ClockConfig+0x1f0>)
 80033ac:	689b      	ldr	r3, [r3, #8]
 80033ae:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	68db      	ldr	r3, [r3, #12]
 80033b6:	4918      	ldr	r1, [pc, #96]	@ (8003418 <HAL_RCC_ClockConfig+0x1f0>)
 80033b8:	4313      	orrs	r3, r2
 80033ba:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	f003 0308 	and.w	r3, r3, #8
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d009      	beq.n	80033dc <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80033c8:	4b13      	ldr	r3, [pc, #76]	@ (8003418 <HAL_RCC_ClockConfig+0x1f0>)
 80033ca:	689b      	ldr	r3, [r3, #8]
 80033cc:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	691b      	ldr	r3, [r3, #16]
 80033d4:	00db      	lsls	r3, r3, #3
 80033d6:	4910      	ldr	r1, [pc, #64]	@ (8003418 <HAL_RCC_ClockConfig+0x1f0>)
 80033d8:	4313      	orrs	r3, r2
 80033da:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80033dc:	f000 f824 	bl	8003428 <HAL_RCC_GetSysClockFreq>
 80033e0:	4602      	mov	r2, r0
 80033e2:	4b0d      	ldr	r3, [pc, #52]	@ (8003418 <HAL_RCC_ClockConfig+0x1f0>)
 80033e4:	689b      	ldr	r3, [r3, #8]
 80033e6:	091b      	lsrs	r3, r3, #4
 80033e8:	f003 030f 	and.w	r3, r3, #15
 80033ec:	490b      	ldr	r1, [pc, #44]	@ (800341c <HAL_RCC_ClockConfig+0x1f4>)
 80033ee:	5ccb      	ldrb	r3, [r1, r3]
 80033f0:	f003 031f 	and.w	r3, r3, #31
 80033f4:	fa22 f303 	lsr.w	r3, r2, r3
 80033f8:	4a09      	ldr	r2, [pc, #36]	@ (8003420 <HAL_RCC_ClockConfig+0x1f8>)
 80033fa:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80033fc:	4b09      	ldr	r3, [pc, #36]	@ (8003424 <HAL_RCC_ClockConfig+0x1fc>)
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	4618      	mov	r0, r3
 8003402:	f7fe ff7d 	bl	8002300 <HAL_InitTick>
 8003406:	4603      	mov	r3, r0
 8003408:	72fb      	strb	r3, [r7, #11]

  return status;
 800340a:	7afb      	ldrb	r3, [r7, #11]
}
 800340c:	4618      	mov	r0, r3
 800340e:	3710      	adds	r7, #16
 8003410:	46bd      	mov	sp, r7
 8003412:	bd80      	pop	{r7, pc}
 8003414:	40022000 	.word	0x40022000
 8003418:	40021000 	.word	0x40021000
 800341c:	08005030 	.word	0x08005030
 8003420:	20000a0c 	.word	0x20000a0c
 8003424:	20000a10 	.word	0x20000a10

08003428 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003428:	b480      	push	{r7}
 800342a:	b089      	sub	sp, #36	@ 0x24
 800342c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800342e:	2300      	movs	r3, #0
 8003430:	61fb      	str	r3, [r7, #28]
 8003432:	2300      	movs	r3, #0
 8003434:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003436:	4b3e      	ldr	r3, [pc, #248]	@ (8003530 <HAL_RCC_GetSysClockFreq+0x108>)
 8003438:	689b      	ldr	r3, [r3, #8]
 800343a:	f003 030c 	and.w	r3, r3, #12
 800343e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003440:	4b3b      	ldr	r3, [pc, #236]	@ (8003530 <HAL_RCC_GetSysClockFreq+0x108>)
 8003442:	68db      	ldr	r3, [r3, #12]
 8003444:	f003 0303 	and.w	r3, r3, #3
 8003448:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800344a:	693b      	ldr	r3, [r7, #16]
 800344c:	2b00      	cmp	r3, #0
 800344e:	d005      	beq.n	800345c <HAL_RCC_GetSysClockFreq+0x34>
 8003450:	693b      	ldr	r3, [r7, #16]
 8003452:	2b0c      	cmp	r3, #12
 8003454:	d121      	bne.n	800349a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	2b01      	cmp	r3, #1
 800345a:	d11e      	bne.n	800349a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800345c:	4b34      	ldr	r3, [pc, #208]	@ (8003530 <HAL_RCC_GetSysClockFreq+0x108>)
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	f003 0308 	and.w	r3, r3, #8
 8003464:	2b00      	cmp	r3, #0
 8003466:	d107      	bne.n	8003478 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003468:	4b31      	ldr	r3, [pc, #196]	@ (8003530 <HAL_RCC_GetSysClockFreq+0x108>)
 800346a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800346e:	0a1b      	lsrs	r3, r3, #8
 8003470:	f003 030f 	and.w	r3, r3, #15
 8003474:	61fb      	str	r3, [r7, #28]
 8003476:	e005      	b.n	8003484 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003478:	4b2d      	ldr	r3, [pc, #180]	@ (8003530 <HAL_RCC_GetSysClockFreq+0x108>)
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	091b      	lsrs	r3, r3, #4
 800347e:	f003 030f 	and.w	r3, r3, #15
 8003482:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003484:	4a2b      	ldr	r2, [pc, #172]	@ (8003534 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003486:	69fb      	ldr	r3, [r7, #28]
 8003488:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800348c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800348e:	693b      	ldr	r3, [r7, #16]
 8003490:	2b00      	cmp	r3, #0
 8003492:	d10d      	bne.n	80034b0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003494:	69fb      	ldr	r3, [r7, #28]
 8003496:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003498:	e00a      	b.n	80034b0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800349a:	693b      	ldr	r3, [r7, #16]
 800349c:	2b04      	cmp	r3, #4
 800349e:	d102      	bne.n	80034a6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80034a0:	4b25      	ldr	r3, [pc, #148]	@ (8003538 <HAL_RCC_GetSysClockFreq+0x110>)
 80034a2:	61bb      	str	r3, [r7, #24]
 80034a4:	e004      	b.n	80034b0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80034a6:	693b      	ldr	r3, [r7, #16]
 80034a8:	2b08      	cmp	r3, #8
 80034aa:	d101      	bne.n	80034b0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80034ac:	4b23      	ldr	r3, [pc, #140]	@ (800353c <HAL_RCC_GetSysClockFreq+0x114>)
 80034ae:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80034b0:	693b      	ldr	r3, [r7, #16]
 80034b2:	2b0c      	cmp	r3, #12
 80034b4:	d134      	bne.n	8003520 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80034b6:	4b1e      	ldr	r3, [pc, #120]	@ (8003530 <HAL_RCC_GetSysClockFreq+0x108>)
 80034b8:	68db      	ldr	r3, [r3, #12]
 80034ba:	f003 0303 	and.w	r3, r3, #3
 80034be:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80034c0:	68bb      	ldr	r3, [r7, #8]
 80034c2:	2b02      	cmp	r3, #2
 80034c4:	d003      	beq.n	80034ce <HAL_RCC_GetSysClockFreq+0xa6>
 80034c6:	68bb      	ldr	r3, [r7, #8]
 80034c8:	2b03      	cmp	r3, #3
 80034ca:	d003      	beq.n	80034d4 <HAL_RCC_GetSysClockFreq+0xac>
 80034cc:	e005      	b.n	80034da <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80034ce:	4b1a      	ldr	r3, [pc, #104]	@ (8003538 <HAL_RCC_GetSysClockFreq+0x110>)
 80034d0:	617b      	str	r3, [r7, #20]
      break;
 80034d2:	e005      	b.n	80034e0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80034d4:	4b19      	ldr	r3, [pc, #100]	@ (800353c <HAL_RCC_GetSysClockFreq+0x114>)
 80034d6:	617b      	str	r3, [r7, #20]
      break;
 80034d8:	e002      	b.n	80034e0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80034da:	69fb      	ldr	r3, [r7, #28]
 80034dc:	617b      	str	r3, [r7, #20]
      break;
 80034de:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80034e0:	4b13      	ldr	r3, [pc, #76]	@ (8003530 <HAL_RCC_GetSysClockFreq+0x108>)
 80034e2:	68db      	ldr	r3, [r3, #12]
 80034e4:	091b      	lsrs	r3, r3, #4
 80034e6:	f003 0307 	and.w	r3, r3, #7
 80034ea:	3301      	adds	r3, #1
 80034ec:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80034ee:	4b10      	ldr	r3, [pc, #64]	@ (8003530 <HAL_RCC_GetSysClockFreq+0x108>)
 80034f0:	68db      	ldr	r3, [r3, #12]
 80034f2:	0a1b      	lsrs	r3, r3, #8
 80034f4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80034f8:	697a      	ldr	r2, [r7, #20]
 80034fa:	fb03 f202 	mul.w	r2, r3, r2
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	fbb2 f3f3 	udiv	r3, r2, r3
 8003504:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003506:	4b0a      	ldr	r3, [pc, #40]	@ (8003530 <HAL_RCC_GetSysClockFreq+0x108>)
 8003508:	68db      	ldr	r3, [r3, #12]
 800350a:	0e5b      	lsrs	r3, r3, #25
 800350c:	f003 0303 	and.w	r3, r3, #3
 8003510:	3301      	adds	r3, #1
 8003512:	005b      	lsls	r3, r3, #1
 8003514:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003516:	697a      	ldr	r2, [r7, #20]
 8003518:	683b      	ldr	r3, [r7, #0]
 800351a:	fbb2 f3f3 	udiv	r3, r2, r3
 800351e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003520:	69bb      	ldr	r3, [r7, #24]
}
 8003522:	4618      	mov	r0, r3
 8003524:	3724      	adds	r7, #36	@ 0x24
 8003526:	46bd      	mov	sp, r7
 8003528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800352c:	4770      	bx	lr
 800352e:	bf00      	nop
 8003530:	40021000 	.word	0x40021000
 8003534:	08005048 	.word	0x08005048
 8003538:	00f42400 	.word	0x00f42400
 800353c:	007a1200 	.word	0x007a1200

08003540 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003540:	b480      	push	{r7}
 8003542:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003544:	4b03      	ldr	r3, [pc, #12]	@ (8003554 <HAL_RCC_GetHCLKFreq+0x14>)
 8003546:	681b      	ldr	r3, [r3, #0]
}
 8003548:	4618      	mov	r0, r3
 800354a:	46bd      	mov	sp, r7
 800354c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003550:	4770      	bx	lr
 8003552:	bf00      	nop
 8003554:	20000a0c 	.word	0x20000a0c

08003558 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003558:	b580      	push	{r7, lr}
 800355a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800355c:	f7ff fff0 	bl	8003540 <HAL_RCC_GetHCLKFreq>
 8003560:	4602      	mov	r2, r0
 8003562:	4b06      	ldr	r3, [pc, #24]	@ (800357c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003564:	689b      	ldr	r3, [r3, #8]
 8003566:	0a1b      	lsrs	r3, r3, #8
 8003568:	f003 0307 	and.w	r3, r3, #7
 800356c:	4904      	ldr	r1, [pc, #16]	@ (8003580 <HAL_RCC_GetPCLK1Freq+0x28>)
 800356e:	5ccb      	ldrb	r3, [r1, r3]
 8003570:	f003 031f 	and.w	r3, r3, #31
 8003574:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003578:	4618      	mov	r0, r3
 800357a:	bd80      	pop	{r7, pc}
 800357c:	40021000 	.word	0x40021000
 8003580:	08005040 	.word	0x08005040

08003584 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003584:	b580      	push	{r7, lr}
 8003586:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003588:	f7ff ffda 	bl	8003540 <HAL_RCC_GetHCLKFreq>
 800358c:	4602      	mov	r2, r0
 800358e:	4b06      	ldr	r3, [pc, #24]	@ (80035a8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003590:	689b      	ldr	r3, [r3, #8]
 8003592:	0adb      	lsrs	r3, r3, #11
 8003594:	f003 0307 	and.w	r3, r3, #7
 8003598:	4904      	ldr	r1, [pc, #16]	@ (80035ac <HAL_RCC_GetPCLK2Freq+0x28>)
 800359a:	5ccb      	ldrb	r3, [r1, r3]
 800359c:	f003 031f 	and.w	r3, r3, #31
 80035a0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80035a4:	4618      	mov	r0, r3
 80035a6:	bd80      	pop	{r7, pc}
 80035a8:	40021000 	.word	0x40021000
 80035ac:	08005040 	.word	0x08005040

080035b0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80035b0:	b580      	push	{r7, lr}
 80035b2:	b086      	sub	sp, #24
 80035b4:	af00      	add	r7, sp, #0
 80035b6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80035b8:	2300      	movs	r3, #0
 80035ba:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80035bc:	4b2a      	ldr	r3, [pc, #168]	@ (8003668 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80035be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80035c0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d003      	beq.n	80035d0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80035c8:	f7ff f9ee 	bl	80029a8 <HAL_PWREx_GetVoltageRange>
 80035cc:	6178      	str	r0, [r7, #20]
 80035ce:	e014      	b.n	80035fa <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80035d0:	4b25      	ldr	r3, [pc, #148]	@ (8003668 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80035d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80035d4:	4a24      	ldr	r2, [pc, #144]	@ (8003668 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80035d6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80035da:	6593      	str	r3, [r2, #88]	@ 0x58
 80035dc:	4b22      	ldr	r3, [pc, #136]	@ (8003668 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80035de:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80035e0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80035e4:	60fb      	str	r3, [r7, #12]
 80035e6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80035e8:	f7ff f9de 	bl	80029a8 <HAL_PWREx_GetVoltageRange>
 80035ec:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80035ee:	4b1e      	ldr	r3, [pc, #120]	@ (8003668 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80035f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80035f2:	4a1d      	ldr	r2, [pc, #116]	@ (8003668 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80035f4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80035f8:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80035fa:	697b      	ldr	r3, [r7, #20]
 80035fc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003600:	d10b      	bne.n	800361a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	2b80      	cmp	r3, #128	@ 0x80
 8003606:	d919      	bls.n	800363c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	2ba0      	cmp	r3, #160	@ 0xa0
 800360c:	d902      	bls.n	8003614 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800360e:	2302      	movs	r3, #2
 8003610:	613b      	str	r3, [r7, #16]
 8003612:	e013      	b.n	800363c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003614:	2301      	movs	r3, #1
 8003616:	613b      	str	r3, [r7, #16]
 8003618:	e010      	b.n	800363c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	2b80      	cmp	r3, #128	@ 0x80
 800361e:	d902      	bls.n	8003626 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003620:	2303      	movs	r3, #3
 8003622:	613b      	str	r3, [r7, #16]
 8003624:	e00a      	b.n	800363c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	2b80      	cmp	r3, #128	@ 0x80
 800362a:	d102      	bne.n	8003632 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800362c:	2302      	movs	r3, #2
 800362e:	613b      	str	r3, [r7, #16]
 8003630:	e004      	b.n	800363c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	2b70      	cmp	r3, #112	@ 0x70
 8003636:	d101      	bne.n	800363c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003638:	2301      	movs	r3, #1
 800363a:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800363c:	4b0b      	ldr	r3, [pc, #44]	@ (800366c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f023 0207 	bic.w	r2, r3, #7
 8003644:	4909      	ldr	r1, [pc, #36]	@ (800366c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003646:	693b      	ldr	r3, [r7, #16]
 8003648:	4313      	orrs	r3, r2
 800364a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800364c:	4b07      	ldr	r3, [pc, #28]	@ (800366c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	f003 0307 	and.w	r3, r3, #7
 8003654:	693a      	ldr	r2, [r7, #16]
 8003656:	429a      	cmp	r2, r3
 8003658:	d001      	beq.n	800365e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800365a:	2301      	movs	r3, #1
 800365c:	e000      	b.n	8003660 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800365e:	2300      	movs	r3, #0
}
 8003660:	4618      	mov	r0, r3
 8003662:	3718      	adds	r7, #24
 8003664:	46bd      	mov	sp, r7
 8003666:	bd80      	pop	{r7, pc}
 8003668:	40021000 	.word	0x40021000
 800366c:	40022000 	.word	0x40022000

08003670 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003670:	b580      	push	{r7, lr}
 8003672:	b086      	sub	sp, #24
 8003674:	af00      	add	r7, sp, #0
 8003676:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003678:	2300      	movs	r3, #0
 800367a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800367c:	2300      	movs	r3, #0
 800367e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003688:	2b00      	cmp	r3, #0
 800368a:	d041      	beq.n	8003710 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003690:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003694:	d02a      	beq.n	80036ec <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8003696:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800369a:	d824      	bhi.n	80036e6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800369c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80036a0:	d008      	beq.n	80036b4 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80036a2:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80036a6:	d81e      	bhi.n	80036e6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d00a      	beq.n	80036c2 <HAL_RCCEx_PeriphCLKConfig+0x52>
 80036ac:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80036b0:	d010      	beq.n	80036d4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80036b2:	e018      	b.n	80036e6 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80036b4:	4b86      	ldr	r3, [pc, #536]	@ (80038d0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80036b6:	68db      	ldr	r3, [r3, #12]
 80036b8:	4a85      	ldr	r2, [pc, #532]	@ (80038d0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80036ba:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80036be:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80036c0:	e015      	b.n	80036ee <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	3304      	adds	r3, #4
 80036c6:	2100      	movs	r1, #0
 80036c8:	4618      	mov	r0, r3
 80036ca:	f000 fabb 	bl	8003c44 <RCCEx_PLLSAI1_Config>
 80036ce:	4603      	mov	r3, r0
 80036d0:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80036d2:	e00c      	b.n	80036ee <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	3320      	adds	r3, #32
 80036d8:	2100      	movs	r1, #0
 80036da:	4618      	mov	r0, r3
 80036dc:	f000 fba6 	bl	8003e2c <RCCEx_PLLSAI2_Config>
 80036e0:	4603      	mov	r3, r0
 80036e2:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80036e4:	e003      	b.n	80036ee <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80036e6:	2301      	movs	r3, #1
 80036e8:	74fb      	strb	r3, [r7, #19]
      break;
 80036ea:	e000      	b.n	80036ee <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80036ec:	bf00      	nop
    }

    if(ret == HAL_OK)
 80036ee:	7cfb      	ldrb	r3, [r7, #19]
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d10b      	bne.n	800370c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80036f4:	4b76      	ldr	r3, [pc, #472]	@ (80038d0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80036f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80036fa:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003702:	4973      	ldr	r1, [pc, #460]	@ (80038d0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003704:	4313      	orrs	r3, r2
 8003706:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 800370a:	e001      	b.n	8003710 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800370c:	7cfb      	ldrb	r3, [r7, #19]
 800370e:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003718:	2b00      	cmp	r3, #0
 800371a:	d041      	beq.n	80037a0 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003720:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003724:	d02a      	beq.n	800377c <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8003726:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800372a:	d824      	bhi.n	8003776 <HAL_RCCEx_PeriphCLKConfig+0x106>
 800372c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003730:	d008      	beq.n	8003744 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003732:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003736:	d81e      	bhi.n	8003776 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003738:	2b00      	cmp	r3, #0
 800373a:	d00a      	beq.n	8003752 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 800373c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003740:	d010      	beq.n	8003764 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003742:	e018      	b.n	8003776 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003744:	4b62      	ldr	r3, [pc, #392]	@ (80038d0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003746:	68db      	ldr	r3, [r3, #12]
 8003748:	4a61      	ldr	r2, [pc, #388]	@ (80038d0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800374a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800374e:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003750:	e015      	b.n	800377e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	3304      	adds	r3, #4
 8003756:	2100      	movs	r1, #0
 8003758:	4618      	mov	r0, r3
 800375a:	f000 fa73 	bl	8003c44 <RCCEx_PLLSAI1_Config>
 800375e:	4603      	mov	r3, r0
 8003760:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003762:	e00c      	b.n	800377e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	3320      	adds	r3, #32
 8003768:	2100      	movs	r1, #0
 800376a:	4618      	mov	r0, r3
 800376c:	f000 fb5e 	bl	8003e2c <RCCEx_PLLSAI2_Config>
 8003770:	4603      	mov	r3, r0
 8003772:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003774:	e003      	b.n	800377e <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003776:	2301      	movs	r3, #1
 8003778:	74fb      	strb	r3, [r7, #19]
      break;
 800377a:	e000      	b.n	800377e <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 800377c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800377e:	7cfb      	ldrb	r3, [r7, #19]
 8003780:	2b00      	cmp	r3, #0
 8003782:	d10b      	bne.n	800379c <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003784:	4b52      	ldr	r3, [pc, #328]	@ (80038d0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003786:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800378a:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003792:	494f      	ldr	r1, [pc, #316]	@ (80038d0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003794:	4313      	orrs	r3, r2
 8003796:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 800379a:	e001      	b.n	80037a0 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800379c:	7cfb      	ldrb	r3, [r7, #19]
 800379e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	f000 80a0 	beq.w	80038ee <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80037ae:	2300      	movs	r3, #0
 80037b0:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80037b2:	4b47      	ldr	r3, [pc, #284]	@ (80038d0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80037b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80037b6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d101      	bne.n	80037c2 <HAL_RCCEx_PeriphCLKConfig+0x152>
 80037be:	2301      	movs	r3, #1
 80037c0:	e000      	b.n	80037c4 <HAL_RCCEx_PeriphCLKConfig+0x154>
 80037c2:	2300      	movs	r3, #0
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d00d      	beq.n	80037e4 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80037c8:	4b41      	ldr	r3, [pc, #260]	@ (80038d0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80037ca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80037cc:	4a40      	ldr	r2, [pc, #256]	@ (80038d0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80037ce:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80037d2:	6593      	str	r3, [r2, #88]	@ 0x58
 80037d4:	4b3e      	ldr	r3, [pc, #248]	@ (80038d0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80037d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80037d8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80037dc:	60bb      	str	r3, [r7, #8]
 80037de:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80037e0:	2301      	movs	r3, #1
 80037e2:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80037e4:	4b3b      	ldr	r3, [pc, #236]	@ (80038d4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	4a3a      	ldr	r2, [pc, #232]	@ (80038d4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80037ea:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80037ee:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80037f0:	f7fe fdd6 	bl	80023a0 <HAL_GetTick>
 80037f4:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80037f6:	e009      	b.n	800380c <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80037f8:	f7fe fdd2 	bl	80023a0 <HAL_GetTick>
 80037fc:	4602      	mov	r2, r0
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	1ad3      	subs	r3, r2, r3
 8003802:	2b02      	cmp	r3, #2
 8003804:	d902      	bls.n	800380c <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8003806:	2303      	movs	r3, #3
 8003808:	74fb      	strb	r3, [r7, #19]
        break;
 800380a:	e005      	b.n	8003818 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800380c:	4b31      	ldr	r3, [pc, #196]	@ (80038d4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003814:	2b00      	cmp	r3, #0
 8003816:	d0ef      	beq.n	80037f8 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8003818:	7cfb      	ldrb	r3, [r7, #19]
 800381a:	2b00      	cmp	r3, #0
 800381c:	d15c      	bne.n	80038d8 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800381e:	4b2c      	ldr	r3, [pc, #176]	@ (80038d0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003820:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003824:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003828:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800382a:	697b      	ldr	r3, [r7, #20]
 800382c:	2b00      	cmp	r3, #0
 800382e:	d01f      	beq.n	8003870 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003836:	697a      	ldr	r2, [r7, #20]
 8003838:	429a      	cmp	r2, r3
 800383a:	d019      	beq.n	8003870 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800383c:	4b24      	ldr	r3, [pc, #144]	@ (80038d0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800383e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003842:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003846:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003848:	4b21      	ldr	r3, [pc, #132]	@ (80038d0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800384a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800384e:	4a20      	ldr	r2, [pc, #128]	@ (80038d0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003850:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003854:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003858:	4b1d      	ldr	r3, [pc, #116]	@ (80038d0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800385a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800385e:	4a1c      	ldr	r2, [pc, #112]	@ (80038d0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003860:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003864:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003868:	4a19      	ldr	r2, [pc, #100]	@ (80038d0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800386a:	697b      	ldr	r3, [r7, #20]
 800386c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003870:	697b      	ldr	r3, [r7, #20]
 8003872:	f003 0301 	and.w	r3, r3, #1
 8003876:	2b00      	cmp	r3, #0
 8003878:	d016      	beq.n	80038a8 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800387a:	f7fe fd91 	bl	80023a0 <HAL_GetTick>
 800387e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003880:	e00b      	b.n	800389a <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003882:	f7fe fd8d 	bl	80023a0 <HAL_GetTick>
 8003886:	4602      	mov	r2, r0
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	1ad3      	subs	r3, r2, r3
 800388c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003890:	4293      	cmp	r3, r2
 8003892:	d902      	bls.n	800389a <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8003894:	2303      	movs	r3, #3
 8003896:	74fb      	strb	r3, [r7, #19]
            break;
 8003898:	e006      	b.n	80038a8 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800389a:	4b0d      	ldr	r3, [pc, #52]	@ (80038d0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800389c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80038a0:	f003 0302 	and.w	r3, r3, #2
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d0ec      	beq.n	8003882 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80038a8:	7cfb      	ldrb	r3, [r7, #19]
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d10c      	bne.n	80038c8 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80038ae:	4b08      	ldr	r3, [pc, #32]	@ (80038d0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80038b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80038b4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80038be:	4904      	ldr	r1, [pc, #16]	@ (80038d0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80038c0:	4313      	orrs	r3, r2
 80038c2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80038c6:	e009      	b.n	80038dc <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80038c8:	7cfb      	ldrb	r3, [r7, #19]
 80038ca:	74bb      	strb	r3, [r7, #18]
 80038cc:	e006      	b.n	80038dc <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80038ce:	bf00      	nop
 80038d0:	40021000 	.word	0x40021000
 80038d4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80038d8:	7cfb      	ldrb	r3, [r7, #19]
 80038da:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80038dc:	7c7b      	ldrb	r3, [r7, #17]
 80038de:	2b01      	cmp	r3, #1
 80038e0:	d105      	bne.n	80038ee <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80038e2:	4b9e      	ldr	r3, [pc, #632]	@ (8003b5c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80038e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80038e6:	4a9d      	ldr	r2, [pc, #628]	@ (8003b5c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80038e8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80038ec:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	f003 0301 	and.w	r3, r3, #1
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d00a      	beq.n	8003910 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80038fa:	4b98      	ldr	r3, [pc, #608]	@ (8003b5c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80038fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003900:	f023 0203 	bic.w	r2, r3, #3
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003908:	4994      	ldr	r1, [pc, #592]	@ (8003b5c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800390a:	4313      	orrs	r3, r2
 800390c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	f003 0302 	and.w	r3, r3, #2
 8003918:	2b00      	cmp	r3, #0
 800391a:	d00a      	beq.n	8003932 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800391c:	4b8f      	ldr	r3, [pc, #572]	@ (8003b5c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800391e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003922:	f023 020c 	bic.w	r2, r3, #12
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800392a:	498c      	ldr	r1, [pc, #560]	@ (8003b5c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800392c:	4313      	orrs	r3, r2
 800392e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	f003 0304 	and.w	r3, r3, #4
 800393a:	2b00      	cmp	r3, #0
 800393c:	d00a      	beq.n	8003954 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800393e:	4b87      	ldr	r3, [pc, #540]	@ (8003b5c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003940:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003944:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800394c:	4983      	ldr	r1, [pc, #524]	@ (8003b5c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800394e:	4313      	orrs	r3, r2
 8003950:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	f003 0308 	and.w	r3, r3, #8
 800395c:	2b00      	cmp	r3, #0
 800395e:	d00a      	beq.n	8003976 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003960:	4b7e      	ldr	r3, [pc, #504]	@ (8003b5c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003962:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003966:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800396e:	497b      	ldr	r1, [pc, #492]	@ (8003b5c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003970:	4313      	orrs	r3, r2
 8003972:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	f003 0310 	and.w	r3, r3, #16
 800397e:	2b00      	cmp	r3, #0
 8003980:	d00a      	beq.n	8003998 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003982:	4b76      	ldr	r3, [pc, #472]	@ (8003b5c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003984:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003988:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003990:	4972      	ldr	r1, [pc, #456]	@ (8003b5c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003992:	4313      	orrs	r3, r2
 8003994:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	f003 0320 	and.w	r3, r3, #32
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d00a      	beq.n	80039ba <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80039a4:	4b6d      	ldr	r3, [pc, #436]	@ (8003b5c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80039a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80039aa:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80039b2:	496a      	ldr	r1, [pc, #424]	@ (8003b5c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80039b4:	4313      	orrs	r3, r2
 80039b6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d00a      	beq.n	80039dc <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80039c6:	4b65      	ldr	r3, [pc, #404]	@ (8003b5c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80039c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80039cc:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80039d4:	4961      	ldr	r1, [pc, #388]	@ (8003b5c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80039d6:	4313      	orrs	r3, r2
 80039d8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d00a      	beq.n	80039fe <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80039e8:	4b5c      	ldr	r3, [pc, #368]	@ (8003b5c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80039ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80039ee:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80039f6:	4959      	ldr	r1, [pc, #356]	@ (8003b5c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80039f8:	4313      	orrs	r3, r2
 80039fa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d00a      	beq.n	8003a20 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003a0a:	4b54      	ldr	r3, [pc, #336]	@ (8003b5c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a10:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003a18:	4950      	ldr	r1, [pc, #320]	@ (8003b5c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a1a:	4313      	orrs	r3, r2
 8003a1c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d00a      	beq.n	8003a42 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003a2c:	4b4b      	ldr	r3, [pc, #300]	@ (8003b5c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a32:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a3a:	4948      	ldr	r1, [pc, #288]	@ (8003b5c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a3c:	4313      	orrs	r3, r2
 8003a3e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d00a      	beq.n	8003a64 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003a4e:	4b43      	ldr	r3, [pc, #268]	@ (8003b5c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a50:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a54:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a5c:	493f      	ldr	r1, [pc, #252]	@ (8003b5c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a5e:	4313      	orrs	r3, r2
 8003a60:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d028      	beq.n	8003ac2 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003a70:	4b3a      	ldr	r3, [pc, #232]	@ (8003b5c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a72:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a76:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003a7e:	4937      	ldr	r1, [pc, #220]	@ (8003b5c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a80:	4313      	orrs	r3, r2
 8003a82:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003a8a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003a8e:	d106      	bne.n	8003a9e <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003a90:	4b32      	ldr	r3, [pc, #200]	@ (8003b5c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a92:	68db      	ldr	r3, [r3, #12]
 8003a94:	4a31      	ldr	r2, [pc, #196]	@ (8003b5c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a96:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003a9a:	60d3      	str	r3, [r2, #12]
 8003a9c:	e011      	b.n	8003ac2 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003aa2:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003aa6:	d10c      	bne.n	8003ac2 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	3304      	adds	r3, #4
 8003aac:	2101      	movs	r1, #1
 8003aae:	4618      	mov	r0, r3
 8003ab0:	f000 f8c8 	bl	8003c44 <RCCEx_PLLSAI1_Config>
 8003ab4:	4603      	mov	r3, r0
 8003ab6:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003ab8:	7cfb      	ldrb	r3, [r7, #19]
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d001      	beq.n	8003ac2 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8003abe:	7cfb      	ldrb	r3, [r7, #19]
 8003ac0:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d028      	beq.n	8003b20 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003ace:	4b23      	ldr	r3, [pc, #140]	@ (8003b5c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ad0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ad4:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003adc:	491f      	ldr	r1, [pc, #124]	@ (8003b5c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ade:	4313      	orrs	r3, r2
 8003ae0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ae8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003aec:	d106      	bne.n	8003afc <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003aee:	4b1b      	ldr	r3, [pc, #108]	@ (8003b5c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003af0:	68db      	ldr	r3, [r3, #12]
 8003af2:	4a1a      	ldr	r2, [pc, #104]	@ (8003b5c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003af4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003af8:	60d3      	str	r3, [r2, #12]
 8003afa:	e011      	b.n	8003b20 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b00:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003b04:	d10c      	bne.n	8003b20 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	3304      	adds	r3, #4
 8003b0a:	2101      	movs	r1, #1
 8003b0c:	4618      	mov	r0, r3
 8003b0e:	f000 f899 	bl	8003c44 <RCCEx_PLLSAI1_Config>
 8003b12:	4603      	mov	r3, r0
 8003b14:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003b16:	7cfb      	ldrb	r3, [r7, #19]
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d001      	beq.n	8003b20 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8003b1c:	7cfb      	ldrb	r3, [r7, #19]
 8003b1e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d02b      	beq.n	8003b84 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003b2c:	4b0b      	ldr	r3, [pc, #44]	@ (8003b5c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b32:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003b3a:	4908      	ldr	r1, [pc, #32]	@ (8003b5c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b3c:	4313      	orrs	r3, r2
 8003b3e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003b46:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003b4a:	d109      	bne.n	8003b60 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003b4c:	4b03      	ldr	r3, [pc, #12]	@ (8003b5c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b4e:	68db      	ldr	r3, [r3, #12]
 8003b50:	4a02      	ldr	r2, [pc, #8]	@ (8003b5c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b52:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003b56:	60d3      	str	r3, [r2, #12]
 8003b58:	e014      	b.n	8003b84 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8003b5a:	bf00      	nop
 8003b5c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003b64:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003b68:	d10c      	bne.n	8003b84 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	3304      	adds	r3, #4
 8003b6e:	2101      	movs	r1, #1
 8003b70:	4618      	mov	r0, r3
 8003b72:	f000 f867 	bl	8003c44 <RCCEx_PLLSAI1_Config>
 8003b76:	4603      	mov	r3, r0
 8003b78:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003b7a:	7cfb      	ldrb	r3, [r7, #19]
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d001      	beq.n	8003b84 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8003b80:	7cfb      	ldrb	r3, [r7, #19]
 8003b82:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d02f      	beq.n	8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003b90:	4b2b      	ldr	r3, [pc, #172]	@ (8003c40 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003b92:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b96:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003b9e:	4928      	ldr	r1, [pc, #160]	@ (8003c40 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003ba0:	4313      	orrs	r3, r2
 8003ba2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003baa:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003bae:	d10d      	bne.n	8003bcc <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	3304      	adds	r3, #4
 8003bb4:	2102      	movs	r1, #2
 8003bb6:	4618      	mov	r0, r3
 8003bb8:	f000 f844 	bl	8003c44 <RCCEx_PLLSAI1_Config>
 8003bbc:	4603      	mov	r3, r0
 8003bbe:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003bc0:	7cfb      	ldrb	r3, [r7, #19]
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d014      	beq.n	8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003bc6:	7cfb      	ldrb	r3, [r7, #19]
 8003bc8:	74bb      	strb	r3, [r7, #18]
 8003bca:	e011      	b.n	8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003bd0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003bd4:	d10c      	bne.n	8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	3320      	adds	r3, #32
 8003bda:	2102      	movs	r1, #2
 8003bdc:	4618      	mov	r0, r3
 8003bde:	f000 f925 	bl	8003e2c <RCCEx_PLLSAI2_Config>
 8003be2:	4603      	mov	r3, r0
 8003be4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003be6:	7cfb      	ldrb	r3, [r7, #19]
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d001      	beq.n	8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003bec:	7cfb      	ldrb	r3, [r7, #19]
 8003bee:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d00a      	beq.n	8003c12 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003bfc:	4b10      	ldr	r3, [pc, #64]	@ (8003c40 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003bfe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c02:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003c0a:	490d      	ldr	r1, [pc, #52]	@ (8003c40 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003c0c:	4313      	orrs	r3, r2
 8003c0e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d00b      	beq.n	8003c36 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003c1e:	4b08      	ldr	r3, [pc, #32]	@ (8003c40 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003c20:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c24:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003c2e:	4904      	ldr	r1, [pc, #16]	@ (8003c40 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003c30:	4313      	orrs	r3, r2
 8003c32:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003c36:	7cbb      	ldrb	r3, [r7, #18]
}
 8003c38:	4618      	mov	r0, r3
 8003c3a:	3718      	adds	r7, #24
 8003c3c:	46bd      	mov	sp, r7
 8003c3e:	bd80      	pop	{r7, pc}
 8003c40:	40021000 	.word	0x40021000

08003c44 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003c44:	b580      	push	{r7, lr}
 8003c46:	b084      	sub	sp, #16
 8003c48:	af00      	add	r7, sp, #0
 8003c4a:	6078      	str	r0, [r7, #4]
 8003c4c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003c4e:	2300      	movs	r3, #0
 8003c50:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003c52:	4b75      	ldr	r3, [pc, #468]	@ (8003e28 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003c54:	68db      	ldr	r3, [r3, #12]
 8003c56:	f003 0303 	and.w	r3, r3, #3
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d018      	beq.n	8003c90 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003c5e:	4b72      	ldr	r3, [pc, #456]	@ (8003e28 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003c60:	68db      	ldr	r3, [r3, #12]
 8003c62:	f003 0203 	and.w	r2, r3, #3
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	429a      	cmp	r2, r3
 8003c6c:	d10d      	bne.n	8003c8a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
       ||
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d009      	beq.n	8003c8a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003c76:	4b6c      	ldr	r3, [pc, #432]	@ (8003e28 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003c78:	68db      	ldr	r3, [r3, #12]
 8003c7a:	091b      	lsrs	r3, r3, #4
 8003c7c:	f003 0307 	and.w	r3, r3, #7
 8003c80:	1c5a      	adds	r2, r3, #1
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	685b      	ldr	r3, [r3, #4]
       ||
 8003c86:	429a      	cmp	r2, r3
 8003c88:	d047      	beq.n	8003d1a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003c8a:	2301      	movs	r3, #1
 8003c8c:	73fb      	strb	r3, [r7, #15]
 8003c8e:	e044      	b.n	8003d1a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	2b03      	cmp	r3, #3
 8003c96:	d018      	beq.n	8003cca <RCCEx_PLLSAI1_Config+0x86>
 8003c98:	2b03      	cmp	r3, #3
 8003c9a:	d825      	bhi.n	8003ce8 <RCCEx_PLLSAI1_Config+0xa4>
 8003c9c:	2b01      	cmp	r3, #1
 8003c9e:	d002      	beq.n	8003ca6 <RCCEx_PLLSAI1_Config+0x62>
 8003ca0:	2b02      	cmp	r3, #2
 8003ca2:	d009      	beq.n	8003cb8 <RCCEx_PLLSAI1_Config+0x74>
 8003ca4:	e020      	b.n	8003ce8 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003ca6:	4b60      	ldr	r3, [pc, #384]	@ (8003e28 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	f003 0302 	and.w	r3, r3, #2
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d11d      	bne.n	8003cee <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8003cb2:	2301      	movs	r3, #1
 8003cb4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003cb6:	e01a      	b.n	8003cee <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003cb8:	4b5b      	ldr	r3, [pc, #364]	@ (8003e28 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d116      	bne.n	8003cf2 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003cc4:	2301      	movs	r3, #1
 8003cc6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003cc8:	e013      	b.n	8003cf2 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003cca:	4b57      	ldr	r3, [pc, #348]	@ (8003e28 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d10f      	bne.n	8003cf6 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003cd6:	4b54      	ldr	r3, [pc, #336]	@ (8003e28 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d109      	bne.n	8003cf6 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8003ce2:	2301      	movs	r3, #1
 8003ce4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003ce6:	e006      	b.n	8003cf6 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003ce8:	2301      	movs	r3, #1
 8003cea:	73fb      	strb	r3, [r7, #15]
      break;
 8003cec:	e004      	b.n	8003cf8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003cee:	bf00      	nop
 8003cf0:	e002      	b.n	8003cf8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003cf2:	bf00      	nop
 8003cf4:	e000      	b.n	8003cf8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003cf6:	bf00      	nop
    }

    if(status == HAL_OK)
 8003cf8:	7bfb      	ldrb	r3, [r7, #15]
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d10d      	bne.n	8003d1a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003cfe:	4b4a      	ldr	r3, [pc, #296]	@ (8003e28 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003d00:	68db      	ldr	r3, [r3, #12]
 8003d02:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	6819      	ldr	r1, [r3, #0]
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	685b      	ldr	r3, [r3, #4]
 8003d0e:	3b01      	subs	r3, #1
 8003d10:	011b      	lsls	r3, r3, #4
 8003d12:	430b      	orrs	r3, r1
 8003d14:	4944      	ldr	r1, [pc, #272]	@ (8003e28 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003d16:	4313      	orrs	r3, r2
 8003d18:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003d1a:	7bfb      	ldrb	r3, [r7, #15]
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d17d      	bne.n	8003e1c <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003d20:	4b41      	ldr	r3, [pc, #260]	@ (8003e28 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	4a40      	ldr	r2, [pc, #256]	@ (8003e28 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003d26:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8003d2a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003d2c:	f7fe fb38 	bl	80023a0 <HAL_GetTick>
 8003d30:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003d32:	e009      	b.n	8003d48 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003d34:	f7fe fb34 	bl	80023a0 <HAL_GetTick>
 8003d38:	4602      	mov	r2, r0
 8003d3a:	68bb      	ldr	r3, [r7, #8]
 8003d3c:	1ad3      	subs	r3, r2, r3
 8003d3e:	2b02      	cmp	r3, #2
 8003d40:	d902      	bls.n	8003d48 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003d42:	2303      	movs	r3, #3
 8003d44:	73fb      	strb	r3, [r7, #15]
        break;
 8003d46:	e005      	b.n	8003d54 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003d48:	4b37      	ldr	r3, [pc, #220]	@ (8003e28 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d1ef      	bne.n	8003d34 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003d54:	7bfb      	ldrb	r3, [r7, #15]
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d160      	bne.n	8003e1c <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003d5a:	683b      	ldr	r3, [r7, #0]
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d111      	bne.n	8003d84 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003d60:	4b31      	ldr	r3, [pc, #196]	@ (8003e28 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003d62:	691b      	ldr	r3, [r3, #16]
 8003d64:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8003d68:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003d6c:	687a      	ldr	r2, [r7, #4]
 8003d6e:	6892      	ldr	r2, [r2, #8]
 8003d70:	0211      	lsls	r1, r2, #8
 8003d72:	687a      	ldr	r2, [r7, #4]
 8003d74:	68d2      	ldr	r2, [r2, #12]
 8003d76:	0912      	lsrs	r2, r2, #4
 8003d78:	0452      	lsls	r2, r2, #17
 8003d7a:	430a      	orrs	r2, r1
 8003d7c:	492a      	ldr	r1, [pc, #168]	@ (8003e28 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003d7e:	4313      	orrs	r3, r2
 8003d80:	610b      	str	r3, [r1, #16]
 8003d82:	e027      	b.n	8003dd4 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003d84:	683b      	ldr	r3, [r7, #0]
 8003d86:	2b01      	cmp	r3, #1
 8003d88:	d112      	bne.n	8003db0 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003d8a:	4b27      	ldr	r3, [pc, #156]	@ (8003e28 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003d8c:	691b      	ldr	r3, [r3, #16]
 8003d8e:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8003d92:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003d96:	687a      	ldr	r2, [r7, #4]
 8003d98:	6892      	ldr	r2, [r2, #8]
 8003d9a:	0211      	lsls	r1, r2, #8
 8003d9c:	687a      	ldr	r2, [r7, #4]
 8003d9e:	6912      	ldr	r2, [r2, #16]
 8003da0:	0852      	lsrs	r2, r2, #1
 8003da2:	3a01      	subs	r2, #1
 8003da4:	0552      	lsls	r2, r2, #21
 8003da6:	430a      	orrs	r2, r1
 8003da8:	491f      	ldr	r1, [pc, #124]	@ (8003e28 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003daa:	4313      	orrs	r3, r2
 8003dac:	610b      	str	r3, [r1, #16]
 8003dae:	e011      	b.n	8003dd4 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003db0:	4b1d      	ldr	r3, [pc, #116]	@ (8003e28 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003db2:	691b      	ldr	r3, [r3, #16]
 8003db4:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8003db8:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003dbc:	687a      	ldr	r2, [r7, #4]
 8003dbe:	6892      	ldr	r2, [r2, #8]
 8003dc0:	0211      	lsls	r1, r2, #8
 8003dc2:	687a      	ldr	r2, [r7, #4]
 8003dc4:	6952      	ldr	r2, [r2, #20]
 8003dc6:	0852      	lsrs	r2, r2, #1
 8003dc8:	3a01      	subs	r2, #1
 8003dca:	0652      	lsls	r2, r2, #25
 8003dcc:	430a      	orrs	r2, r1
 8003dce:	4916      	ldr	r1, [pc, #88]	@ (8003e28 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003dd0:	4313      	orrs	r3, r2
 8003dd2:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003dd4:	4b14      	ldr	r3, [pc, #80]	@ (8003e28 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	4a13      	ldr	r2, [pc, #76]	@ (8003e28 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003dda:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003dde:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003de0:	f7fe fade 	bl	80023a0 <HAL_GetTick>
 8003de4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003de6:	e009      	b.n	8003dfc <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003de8:	f7fe fada 	bl	80023a0 <HAL_GetTick>
 8003dec:	4602      	mov	r2, r0
 8003dee:	68bb      	ldr	r3, [r7, #8]
 8003df0:	1ad3      	subs	r3, r2, r3
 8003df2:	2b02      	cmp	r3, #2
 8003df4:	d902      	bls.n	8003dfc <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8003df6:	2303      	movs	r3, #3
 8003df8:	73fb      	strb	r3, [r7, #15]
          break;
 8003dfa:	e005      	b.n	8003e08 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003dfc:	4b0a      	ldr	r3, [pc, #40]	@ (8003e28 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d0ef      	beq.n	8003de8 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8003e08:	7bfb      	ldrb	r3, [r7, #15]
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d106      	bne.n	8003e1c <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003e0e:	4b06      	ldr	r3, [pc, #24]	@ (8003e28 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003e10:	691a      	ldr	r2, [r3, #16]
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	699b      	ldr	r3, [r3, #24]
 8003e16:	4904      	ldr	r1, [pc, #16]	@ (8003e28 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003e18:	4313      	orrs	r3, r2
 8003e1a:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003e1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e1e:	4618      	mov	r0, r3
 8003e20:	3710      	adds	r7, #16
 8003e22:	46bd      	mov	sp, r7
 8003e24:	bd80      	pop	{r7, pc}
 8003e26:	bf00      	nop
 8003e28:	40021000 	.word	0x40021000

08003e2c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003e2c:	b580      	push	{r7, lr}
 8003e2e:	b084      	sub	sp, #16
 8003e30:	af00      	add	r7, sp, #0
 8003e32:	6078      	str	r0, [r7, #4]
 8003e34:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003e36:	2300      	movs	r3, #0
 8003e38:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003e3a:	4b6a      	ldr	r3, [pc, #424]	@ (8003fe4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003e3c:	68db      	ldr	r3, [r3, #12]
 8003e3e:	f003 0303 	and.w	r3, r3, #3
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d018      	beq.n	8003e78 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8003e46:	4b67      	ldr	r3, [pc, #412]	@ (8003fe4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003e48:	68db      	ldr	r3, [r3, #12]
 8003e4a:	f003 0203 	and.w	r2, r3, #3
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	429a      	cmp	r2, r3
 8003e54:	d10d      	bne.n	8003e72 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
       ||
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d009      	beq.n	8003e72 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8003e5e:	4b61      	ldr	r3, [pc, #388]	@ (8003fe4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003e60:	68db      	ldr	r3, [r3, #12]
 8003e62:	091b      	lsrs	r3, r3, #4
 8003e64:	f003 0307 	and.w	r3, r3, #7
 8003e68:	1c5a      	adds	r2, r3, #1
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	685b      	ldr	r3, [r3, #4]
       ||
 8003e6e:	429a      	cmp	r2, r3
 8003e70:	d047      	beq.n	8003f02 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003e72:	2301      	movs	r3, #1
 8003e74:	73fb      	strb	r3, [r7, #15]
 8003e76:	e044      	b.n	8003f02 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	2b03      	cmp	r3, #3
 8003e7e:	d018      	beq.n	8003eb2 <RCCEx_PLLSAI2_Config+0x86>
 8003e80:	2b03      	cmp	r3, #3
 8003e82:	d825      	bhi.n	8003ed0 <RCCEx_PLLSAI2_Config+0xa4>
 8003e84:	2b01      	cmp	r3, #1
 8003e86:	d002      	beq.n	8003e8e <RCCEx_PLLSAI2_Config+0x62>
 8003e88:	2b02      	cmp	r3, #2
 8003e8a:	d009      	beq.n	8003ea0 <RCCEx_PLLSAI2_Config+0x74>
 8003e8c:	e020      	b.n	8003ed0 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003e8e:	4b55      	ldr	r3, [pc, #340]	@ (8003fe4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	f003 0302 	and.w	r3, r3, #2
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d11d      	bne.n	8003ed6 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8003e9a:	2301      	movs	r3, #1
 8003e9c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003e9e:	e01a      	b.n	8003ed6 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003ea0:	4b50      	ldr	r3, [pc, #320]	@ (8003fe4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d116      	bne.n	8003eda <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8003eac:	2301      	movs	r3, #1
 8003eae:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003eb0:	e013      	b.n	8003eda <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003eb2:	4b4c      	ldr	r3, [pc, #304]	@ (8003fe4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d10f      	bne.n	8003ede <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003ebe:	4b49      	ldr	r3, [pc, #292]	@ (8003fe4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d109      	bne.n	8003ede <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8003eca:	2301      	movs	r3, #1
 8003ecc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003ece:	e006      	b.n	8003ede <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003ed0:	2301      	movs	r3, #1
 8003ed2:	73fb      	strb	r3, [r7, #15]
      break;
 8003ed4:	e004      	b.n	8003ee0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003ed6:	bf00      	nop
 8003ed8:	e002      	b.n	8003ee0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003eda:	bf00      	nop
 8003edc:	e000      	b.n	8003ee0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003ede:	bf00      	nop
    }

    if(status == HAL_OK)
 8003ee0:	7bfb      	ldrb	r3, [r7, #15]
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d10d      	bne.n	8003f02 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003ee6:	4b3f      	ldr	r3, [pc, #252]	@ (8003fe4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003ee8:	68db      	ldr	r3, [r3, #12]
 8003eea:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	6819      	ldr	r1, [r3, #0]
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	685b      	ldr	r3, [r3, #4]
 8003ef6:	3b01      	subs	r3, #1
 8003ef8:	011b      	lsls	r3, r3, #4
 8003efa:	430b      	orrs	r3, r1
 8003efc:	4939      	ldr	r1, [pc, #228]	@ (8003fe4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003efe:	4313      	orrs	r3, r2
 8003f00:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003f02:	7bfb      	ldrb	r3, [r7, #15]
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d167      	bne.n	8003fd8 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003f08:	4b36      	ldr	r3, [pc, #216]	@ (8003fe4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	4a35      	ldr	r2, [pc, #212]	@ (8003fe4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003f0e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003f12:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003f14:	f7fe fa44 	bl	80023a0 <HAL_GetTick>
 8003f18:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003f1a:	e009      	b.n	8003f30 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003f1c:	f7fe fa40 	bl	80023a0 <HAL_GetTick>
 8003f20:	4602      	mov	r2, r0
 8003f22:	68bb      	ldr	r3, [r7, #8]
 8003f24:	1ad3      	subs	r3, r2, r3
 8003f26:	2b02      	cmp	r3, #2
 8003f28:	d902      	bls.n	8003f30 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003f2a:	2303      	movs	r3, #3
 8003f2c:	73fb      	strb	r3, [r7, #15]
        break;
 8003f2e:	e005      	b.n	8003f3c <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003f30:	4b2c      	ldr	r3, [pc, #176]	@ (8003fe4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d1ef      	bne.n	8003f1c <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003f3c:	7bfb      	ldrb	r3, [r7, #15]
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d14a      	bne.n	8003fd8 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003f42:	683b      	ldr	r3, [r7, #0]
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d111      	bne.n	8003f6c <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003f48:	4b26      	ldr	r3, [pc, #152]	@ (8003fe4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003f4a:	695b      	ldr	r3, [r3, #20]
 8003f4c:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8003f50:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003f54:	687a      	ldr	r2, [r7, #4]
 8003f56:	6892      	ldr	r2, [r2, #8]
 8003f58:	0211      	lsls	r1, r2, #8
 8003f5a:	687a      	ldr	r2, [r7, #4]
 8003f5c:	68d2      	ldr	r2, [r2, #12]
 8003f5e:	0912      	lsrs	r2, r2, #4
 8003f60:	0452      	lsls	r2, r2, #17
 8003f62:	430a      	orrs	r2, r1
 8003f64:	491f      	ldr	r1, [pc, #124]	@ (8003fe4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003f66:	4313      	orrs	r3, r2
 8003f68:	614b      	str	r3, [r1, #20]
 8003f6a:	e011      	b.n	8003f90 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003f6c:	4b1d      	ldr	r3, [pc, #116]	@ (8003fe4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003f6e:	695b      	ldr	r3, [r3, #20]
 8003f70:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8003f74:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003f78:	687a      	ldr	r2, [r7, #4]
 8003f7a:	6892      	ldr	r2, [r2, #8]
 8003f7c:	0211      	lsls	r1, r2, #8
 8003f7e:	687a      	ldr	r2, [r7, #4]
 8003f80:	6912      	ldr	r2, [r2, #16]
 8003f82:	0852      	lsrs	r2, r2, #1
 8003f84:	3a01      	subs	r2, #1
 8003f86:	0652      	lsls	r2, r2, #25
 8003f88:	430a      	orrs	r2, r1
 8003f8a:	4916      	ldr	r1, [pc, #88]	@ (8003fe4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003f8c:	4313      	orrs	r3, r2
 8003f8e:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003f90:	4b14      	ldr	r3, [pc, #80]	@ (8003fe4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	4a13      	ldr	r2, [pc, #76]	@ (8003fe4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003f96:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003f9a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f9c:	f7fe fa00 	bl	80023a0 <HAL_GetTick>
 8003fa0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003fa2:	e009      	b.n	8003fb8 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003fa4:	f7fe f9fc 	bl	80023a0 <HAL_GetTick>
 8003fa8:	4602      	mov	r2, r0
 8003faa:	68bb      	ldr	r3, [r7, #8]
 8003fac:	1ad3      	subs	r3, r2, r3
 8003fae:	2b02      	cmp	r3, #2
 8003fb0:	d902      	bls.n	8003fb8 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8003fb2:	2303      	movs	r3, #3
 8003fb4:	73fb      	strb	r3, [r7, #15]
          break;
 8003fb6:	e005      	b.n	8003fc4 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003fb8:	4b0a      	ldr	r3, [pc, #40]	@ (8003fe4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d0ef      	beq.n	8003fa4 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8003fc4:	7bfb      	ldrb	r3, [r7, #15]
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d106      	bne.n	8003fd8 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003fca:	4b06      	ldr	r3, [pc, #24]	@ (8003fe4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003fcc:	695a      	ldr	r2, [r3, #20]
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	695b      	ldr	r3, [r3, #20]
 8003fd2:	4904      	ldr	r1, [pc, #16]	@ (8003fe4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003fd4:	4313      	orrs	r3, r2
 8003fd6:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003fd8:	7bfb      	ldrb	r3, [r7, #15]
}
 8003fda:	4618      	mov	r0, r3
 8003fdc:	3710      	adds	r7, #16
 8003fde:	46bd      	mov	sp, r7
 8003fe0:	bd80      	pop	{r7, pc}
 8003fe2:	bf00      	nop
 8003fe4:	40021000 	.word	0x40021000

08003fe8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003fe8:	b580      	push	{r7, lr}
 8003fea:	b082      	sub	sp, #8
 8003fec:	af00      	add	r7, sp, #0
 8003fee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d101      	bne.n	8003ffa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003ff6:	2301      	movs	r3, #1
 8003ff8:	e040      	b.n	800407c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d106      	bne.n	8004010 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	2200      	movs	r2, #0
 8004006:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800400a:	6878      	ldr	r0, [r7, #4]
 800400c:	f7fe f86e 	bl	80020ec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	2224      	movs	r2, #36	@ 0x24
 8004014:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	681a      	ldr	r2, [r3, #0]
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	f022 0201 	bic.w	r2, r2, #1
 8004024:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800402a:	2b00      	cmp	r3, #0
 800402c:	d002      	beq.n	8004034 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800402e:	6878      	ldr	r0, [r7, #4]
 8004030:	f000 fae0 	bl	80045f4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004034:	6878      	ldr	r0, [r7, #4]
 8004036:	f000 f825 	bl	8004084 <UART_SetConfig>
 800403a:	4603      	mov	r3, r0
 800403c:	2b01      	cmp	r3, #1
 800403e:	d101      	bne.n	8004044 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8004040:	2301      	movs	r3, #1
 8004042:	e01b      	b.n	800407c <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	685a      	ldr	r2, [r3, #4]
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004052:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	689a      	ldr	r2, [r3, #8]
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004062:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	681a      	ldr	r2, [r3, #0]
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	f042 0201 	orr.w	r2, r2, #1
 8004072:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004074:	6878      	ldr	r0, [r7, #4]
 8004076:	f000 fb5f 	bl	8004738 <UART_CheckIdleState>
 800407a:	4603      	mov	r3, r0
}
 800407c:	4618      	mov	r0, r3
 800407e:	3708      	adds	r7, #8
 8004080:	46bd      	mov	sp, r7
 8004082:	bd80      	pop	{r7, pc}

08004084 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004084:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004088:	b08a      	sub	sp, #40	@ 0x28
 800408a:	af00      	add	r7, sp, #0
 800408c:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800408e:	2300      	movs	r3, #0
 8004090:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	689a      	ldr	r2, [r3, #8]
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	691b      	ldr	r3, [r3, #16]
 800409c:	431a      	orrs	r2, r3
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	695b      	ldr	r3, [r3, #20]
 80040a2:	431a      	orrs	r2, r3
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	69db      	ldr	r3, [r3, #28]
 80040a8:	4313      	orrs	r3, r2
 80040aa:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	681a      	ldr	r2, [r3, #0]
 80040b2:	4ba4      	ldr	r3, [pc, #656]	@ (8004344 <UART_SetConfig+0x2c0>)
 80040b4:	4013      	ands	r3, r2
 80040b6:	68fa      	ldr	r2, [r7, #12]
 80040b8:	6812      	ldr	r2, [r2, #0]
 80040ba:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80040bc:	430b      	orrs	r3, r1
 80040be:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	685b      	ldr	r3, [r3, #4]
 80040c6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	68da      	ldr	r2, [r3, #12]
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	430a      	orrs	r2, r1
 80040d4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	699b      	ldr	r3, [r3, #24]
 80040da:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	4a99      	ldr	r2, [pc, #612]	@ (8004348 <UART_SetConfig+0x2c4>)
 80040e2:	4293      	cmp	r3, r2
 80040e4:	d004      	beq.n	80040f0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	6a1b      	ldr	r3, [r3, #32]
 80040ea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80040ec:	4313      	orrs	r3, r2
 80040ee:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	689b      	ldr	r3, [r3, #8]
 80040f6:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004100:	430a      	orrs	r2, r1
 8004102:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	4a90      	ldr	r2, [pc, #576]	@ (800434c <UART_SetConfig+0x2c8>)
 800410a:	4293      	cmp	r3, r2
 800410c:	d126      	bne.n	800415c <UART_SetConfig+0xd8>
 800410e:	4b90      	ldr	r3, [pc, #576]	@ (8004350 <UART_SetConfig+0x2cc>)
 8004110:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004114:	f003 0303 	and.w	r3, r3, #3
 8004118:	2b03      	cmp	r3, #3
 800411a:	d81b      	bhi.n	8004154 <UART_SetConfig+0xd0>
 800411c:	a201      	add	r2, pc, #4	@ (adr r2, 8004124 <UART_SetConfig+0xa0>)
 800411e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004122:	bf00      	nop
 8004124:	08004135 	.word	0x08004135
 8004128:	08004145 	.word	0x08004145
 800412c:	0800413d 	.word	0x0800413d
 8004130:	0800414d 	.word	0x0800414d
 8004134:	2301      	movs	r3, #1
 8004136:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800413a:	e116      	b.n	800436a <UART_SetConfig+0x2e6>
 800413c:	2302      	movs	r3, #2
 800413e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004142:	e112      	b.n	800436a <UART_SetConfig+0x2e6>
 8004144:	2304      	movs	r3, #4
 8004146:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800414a:	e10e      	b.n	800436a <UART_SetConfig+0x2e6>
 800414c:	2308      	movs	r3, #8
 800414e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004152:	e10a      	b.n	800436a <UART_SetConfig+0x2e6>
 8004154:	2310      	movs	r3, #16
 8004156:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800415a:	e106      	b.n	800436a <UART_SetConfig+0x2e6>
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	4a7c      	ldr	r2, [pc, #496]	@ (8004354 <UART_SetConfig+0x2d0>)
 8004162:	4293      	cmp	r3, r2
 8004164:	d138      	bne.n	80041d8 <UART_SetConfig+0x154>
 8004166:	4b7a      	ldr	r3, [pc, #488]	@ (8004350 <UART_SetConfig+0x2cc>)
 8004168:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800416c:	f003 030c 	and.w	r3, r3, #12
 8004170:	2b0c      	cmp	r3, #12
 8004172:	d82d      	bhi.n	80041d0 <UART_SetConfig+0x14c>
 8004174:	a201      	add	r2, pc, #4	@ (adr r2, 800417c <UART_SetConfig+0xf8>)
 8004176:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800417a:	bf00      	nop
 800417c:	080041b1 	.word	0x080041b1
 8004180:	080041d1 	.word	0x080041d1
 8004184:	080041d1 	.word	0x080041d1
 8004188:	080041d1 	.word	0x080041d1
 800418c:	080041c1 	.word	0x080041c1
 8004190:	080041d1 	.word	0x080041d1
 8004194:	080041d1 	.word	0x080041d1
 8004198:	080041d1 	.word	0x080041d1
 800419c:	080041b9 	.word	0x080041b9
 80041a0:	080041d1 	.word	0x080041d1
 80041a4:	080041d1 	.word	0x080041d1
 80041a8:	080041d1 	.word	0x080041d1
 80041ac:	080041c9 	.word	0x080041c9
 80041b0:	2300      	movs	r3, #0
 80041b2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80041b6:	e0d8      	b.n	800436a <UART_SetConfig+0x2e6>
 80041b8:	2302      	movs	r3, #2
 80041ba:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80041be:	e0d4      	b.n	800436a <UART_SetConfig+0x2e6>
 80041c0:	2304      	movs	r3, #4
 80041c2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80041c6:	e0d0      	b.n	800436a <UART_SetConfig+0x2e6>
 80041c8:	2308      	movs	r3, #8
 80041ca:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80041ce:	e0cc      	b.n	800436a <UART_SetConfig+0x2e6>
 80041d0:	2310      	movs	r3, #16
 80041d2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80041d6:	e0c8      	b.n	800436a <UART_SetConfig+0x2e6>
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	4a5e      	ldr	r2, [pc, #376]	@ (8004358 <UART_SetConfig+0x2d4>)
 80041de:	4293      	cmp	r3, r2
 80041e0:	d125      	bne.n	800422e <UART_SetConfig+0x1aa>
 80041e2:	4b5b      	ldr	r3, [pc, #364]	@ (8004350 <UART_SetConfig+0x2cc>)
 80041e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80041e8:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80041ec:	2b30      	cmp	r3, #48	@ 0x30
 80041ee:	d016      	beq.n	800421e <UART_SetConfig+0x19a>
 80041f0:	2b30      	cmp	r3, #48	@ 0x30
 80041f2:	d818      	bhi.n	8004226 <UART_SetConfig+0x1a2>
 80041f4:	2b20      	cmp	r3, #32
 80041f6:	d00a      	beq.n	800420e <UART_SetConfig+0x18a>
 80041f8:	2b20      	cmp	r3, #32
 80041fa:	d814      	bhi.n	8004226 <UART_SetConfig+0x1a2>
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d002      	beq.n	8004206 <UART_SetConfig+0x182>
 8004200:	2b10      	cmp	r3, #16
 8004202:	d008      	beq.n	8004216 <UART_SetConfig+0x192>
 8004204:	e00f      	b.n	8004226 <UART_SetConfig+0x1a2>
 8004206:	2300      	movs	r3, #0
 8004208:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800420c:	e0ad      	b.n	800436a <UART_SetConfig+0x2e6>
 800420e:	2302      	movs	r3, #2
 8004210:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004214:	e0a9      	b.n	800436a <UART_SetConfig+0x2e6>
 8004216:	2304      	movs	r3, #4
 8004218:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800421c:	e0a5      	b.n	800436a <UART_SetConfig+0x2e6>
 800421e:	2308      	movs	r3, #8
 8004220:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004224:	e0a1      	b.n	800436a <UART_SetConfig+0x2e6>
 8004226:	2310      	movs	r3, #16
 8004228:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800422c:	e09d      	b.n	800436a <UART_SetConfig+0x2e6>
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	4a4a      	ldr	r2, [pc, #296]	@ (800435c <UART_SetConfig+0x2d8>)
 8004234:	4293      	cmp	r3, r2
 8004236:	d125      	bne.n	8004284 <UART_SetConfig+0x200>
 8004238:	4b45      	ldr	r3, [pc, #276]	@ (8004350 <UART_SetConfig+0x2cc>)
 800423a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800423e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8004242:	2bc0      	cmp	r3, #192	@ 0xc0
 8004244:	d016      	beq.n	8004274 <UART_SetConfig+0x1f0>
 8004246:	2bc0      	cmp	r3, #192	@ 0xc0
 8004248:	d818      	bhi.n	800427c <UART_SetConfig+0x1f8>
 800424a:	2b80      	cmp	r3, #128	@ 0x80
 800424c:	d00a      	beq.n	8004264 <UART_SetConfig+0x1e0>
 800424e:	2b80      	cmp	r3, #128	@ 0x80
 8004250:	d814      	bhi.n	800427c <UART_SetConfig+0x1f8>
 8004252:	2b00      	cmp	r3, #0
 8004254:	d002      	beq.n	800425c <UART_SetConfig+0x1d8>
 8004256:	2b40      	cmp	r3, #64	@ 0x40
 8004258:	d008      	beq.n	800426c <UART_SetConfig+0x1e8>
 800425a:	e00f      	b.n	800427c <UART_SetConfig+0x1f8>
 800425c:	2300      	movs	r3, #0
 800425e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004262:	e082      	b.n	800436a <UART_SetConfig+0x2e6>
 8004264:	2302      	movs	r3, #2
 8004266:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800426a:	e07e      	b.n	800436a <UART_SetConfig+0x2e6>
 800426c:	2304      	movs	r3, #4
 800426e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004272:	e07a      	b.n	800436a <UART_SetConfig+0x2e6>
 8004274:	2308      	movs	r3, #8
 8004276:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800427a:	e076      	b.n	800436a <UART_SetConfig+0x2e6>
 800427c:	2310      	movs	r3, #16
 800427e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004282:	e072      	b.n	800436a <UART_SetConfig+0x2e6>
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	4a35      	ldr	r2, [pc, #212]	@ (8004360 <UART_SetConfig+0x2dc>)
 800428a:	4293      	cmp	r3, r2
 800428c:	d12a      	bne.n	80042e4 <UART_SetConfig+0x260>
 800428e:	4b30      	ldr	r3, [pc, #192]	@ (8004350 <UART_SetConfig+0x2cc>)
 8004290:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004294:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004298:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800429c:	d01a      	beq.n	80042d4 <UART_SetConfig+0x250>
 800429e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80042a2:	d81b      	bhi.n	80042dc <UART_SetConfig+0x258>
 80042a4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80042a8:	d00c      	beq.n	80042c4 <UART_SetConfig+0x240>
 80042aa:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80042ae:	d815      	bhi.n	80042dc <UART_SetConfig+0x258>
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d003      	beq.n	80042bc <UART_SetConfig+0x238>
 80042b4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80042b8:	d008      	beq.n	80042cc <UART_SetConfig+0x248>
 80042ba:	e00f      	b.n	80042dc <UART_SetConfig+0x258>
 80042bc:	2300      	movs	r3, #0
 80042be:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80042c2:	e052      	b.n	800436a <UART_SetConfig+0x2e6>
 80042c4:	2302      	movs	r3, #2
 80042c6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80042ca:	e04e      	b.n	800436a <UART_SetConfig+0x2e6>
 80042cc:	2304      	movs	r3, #4
 80042ce:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80042d2:	e04a      	b.n	800436a <UART_SetConfig+0x2e6>
 80042d4:	2308      	movs	r3, #8
 80042d6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80042da:	e046      	b.n	800436a <UART_SetConfig+0x2e6>
 80042dc:	2310      	movs	r3, #16
 80042de:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80042e2:	e042      	b.n	800436a <UART_SetConfig+0x2e6>
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	4a17      	ldr	r2, [pc, #92]	@ (8004348 <UART_SetConfig+0x2c4>)
 80042ea:	4293      	cmp	r3, r2
 80042ec:	d13a      	bne.n	8004364 <UART_SetConfig+0x2e0>
 80042ee:	4b18      	ldr	r3, [pc, #96]	@ (8004350 <UART_SetConfig+0x2cc>)
 80042f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80042f4:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80042f8:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80042fc:	d01a      	beq.n	8004334 <UART_SetConfig+0x2b0>
 80042fe:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004302:	d81b      	bhi.n	800433c <UART_SetConfig+0x2b8>
 8004304:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004308:	d00c      	beq.n	8004324 <UART_SetConfig+0x2a0>
 800430a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800430e:	d815      	bhi.n	800433c <UART_SetConfig+0x2b8>
 8004310:	2b00      	cmp	r3, #0
 8004312:	d003      	beq.n	800431c <UART_SetConfig+0x298>
 8004314:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004318:	d008      	beq.n	800432c <UART_SetConfig+0x2a8>
 800431a:	e00f      	b.n	800433c <UART_SetConfig+0x2b8>
 800431c:	2300      	movs	r3, #0
 800431e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004322:	e022      	b.n	800436a <UART_SetConfig+0x2e6>
 8004324:	2302      	movs	r3, #2
 8004326:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800432a:	e01e      	b.n	800436a <UART_SetConfig+0x2e6>
 800432c:	2304      	movs	r3, #4
 800432e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004332:	e01a      	b.n	800436a <UART_SetConfig+0x2e6>
 8004334:	2308      	movs	r3, #8
 8004336:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800433a:	e016      	b.n	800436a <UART_SetConfig+0x2e6>
 800433c:	2310      	movs	r3, #16
 800433e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004342:	e012      	b.n	800436a <UART_SetConfig+0x2e6>
 8004344:	efff69f3 	.word	0xefff69f3
 8004348:	40008000 	.word	0x40008000
 800434c:	40013800 	.word	0x40013800
 8004350:	40021000 	.word	0x40021000
 8004354:	40004400 	.word	0x40004400
 8004358:	40004800 	.word	0x40004800
 800435c:	40004c00 	.word	0x40004c00
 8004360:	40005000 	.word	0x40005000
 8004364:	2310      	movs	r3, #16
 8004366:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	4a9f      	ldr	r2, [pc, #636]	@ (80045ec <UART_SetConfig+0x568>)
 8004370:	4293      	cmp	r3, r2
 8004372:	d17a      	bne.n	800446a <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004374:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004378:	2b08      	cmp	r3, #8
 800437a:	d824      	bhi.n	80043c6 <UART_SetConfig+0x342>
 800437c:	a201      	add	r2, pc, #4	@ (adr r2, 8004384 <UART_SetConfig+0x300>)
 800437e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004382:	bf00      	nop
 8004384:	080043a9 	.word	0x080043a9
 8004388:	080043c7 	.word	0x080043c7
 800438c:	080043b1 	.word	0x080043b1
 8004390:	080043c7 	.word	0x080043c7
 8004394:	080043b7 	.word	0x080043b7
 8004398:	080043c7 	.word	0x080043c7
 800439c:	080043c7 	.word	0x080043c7
 80043a0:	080043c7 	.word	0x080043c7
 80043a4:	080043bf 	.word	0x080043bf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80043a8:	f7ff f8d6 	bl	8003558 <HAL_RCC_GetPCLK1Freq>
 80043ac:	61f8      	str	r0, [r7, #28]
        break;
 80043ae:	e010      	b.n	80043d2 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80043b0:	4b8f      	ldr	r3, [pc, #572]	@ (80045f0 <UART_SetConfig+0x56c>)
 80043b2:	61fb      	str	r3, [r7, #28]
        break;
 80043b4:	e00d      	b.n	80043d2 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80043b6:	f7ff f837 	bl	8003428 <HAL_RCC_GetSysClockFreq>
 80043ba:	61f8      	str	r0, [r7, #28]
        break;
 80043bc:	e009      	b.n	80043d2 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80043be:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80043c2:	61fb      	str	r3, [r7, #28]
        break;
 80043c4:	e005      	b.n	80043d2 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 80043c6:	2300      	movs	r3, #0
 80043c8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80043ca:	2301      	movs	r3, #1
 80043cc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80043d0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80043d2:	69fb      	ldr	r3, [r7, #28]
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	f000 80fb 	beq.w	80045d0 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	685a      	ldr	r2, [r3, #4]
 80043de:	4613      	mov	r3, r2
 80043e0:	005b      	lsls	r3, r3, #1
 80043e2:	4413      	add	r3, r2
 80043e4:	69fa      	ldr	r2, [r7, #28]
 80043e6:	429a      	cmp	r2, r3
 80043e8:	d305      	bcc.n	80043f6 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	685b      	ldr	r3, [r3, #4]
 80043ee:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80043f0:	69fa      	ldr	r2, [r7, #28]
 80043f2:	429a      	cmp	r2, r3
 80043f4:	d903      	bls.n	80043fe <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 80043f6:	2301      	movs	r3, #1
 80043f8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80043fc:	e0e8      	b.n	80045d0 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80043fe:	69fb      	ldr	r3, [r7, #28]
 8004400:	2200      	movs	r2, #0
 8004402:	461c      	mov	r4, r3
 8004404:	4615      	mov	r5, r2
 8004406:	f04f 0200 	mov.w	r2, #0
 800440a:	f04f 0300 	mov.w	r3, #0
 800440e:	022b      	lsls	r3, r5, #8
 8004410:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8004414:	0222      	lsls	r2, r4, #8
 8004416:	68f9      	ldr	r1, [r7, #12]
 8004418:	6849      	ldr	r1, [r1, #4]
 800441a:	0849      	lsrs	r1, r1, #1
 800441c:	2000      	movs	r0, #0
 800441e:	4688      	mov	r8, r1
 8004420:	4681      	mov	r9, r0
 8004422:	eb12 0a08 	adds.w	sl, r2, r8
 8004426:	eb43 0b09 	adc.w	fp, r3, r9
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	685b      	ldr	r3, [r3, #4]
 800442e:	2200      	movs	r2, #0
 8004430:	603b      	str	r3, [r7, #0]
 8004432:	607a      	str	r2, [r7, #4]
 8004434:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004438:	4650      	mov	r0, sl
 800443a:	4659      	mov	r1, fp
 800443c:	f7fc fb80 	bl	8000b40 <__aeabi_uldivmod>
 8004440:	4602      	mov	r2, r0
 8004442:	460b      	mov	r3, r1
 8004444:	4613      	mov	r3, r2
 8004446:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004448:	69bb      	ldr	r3, [r7, #24]
 800444a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800444e:	d308      	bcc.n	8004462 <UART_SetConfig+0x3de>
 8004450:	69bb      	ldr	r3, [r7, #24]
 8004452:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004456:	d204      	bcs.n	8004462 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	69ba      	ldr	r2, [r7, #24]
 800445e:	60da      	str	r2, [r3, #12]
 8004460:	e0b6      	b.n	80045d0 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8004462:	2301      	movs	r3, #1
 8004464:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8004468:	e0b2      	b.n	80045d0 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	69db      	ldr	r3, [r3, #28]
 800446e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004472:	d15e      	bne.n	8004532 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8004474:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004478:	2b08      	cmp	r3, #8
 800447a:	d828      	bhi.n	80044ce <UART_SetConfig+0x44a>
 800447c:	a201      	add	r2, pc, #4	@ (adr r2, 8004484 <UART_SetConfig+0x400>)
 800447e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004482:	bf00      	nop
 8004484:	080044a9 	.word	0x080044a9
 8004488:	080044b1 	.word	0x080044b1
 800448c:	080044b9 	.word	0x080044b9
 8004490:	080044cf 	.word	0x080044cf
 8004494:	080044bf 	.word	0x080044bf
 8004498:	080044cf 	.word	0x080044cf
 800449c:	080044cf 	.word	0x080044cf
 80044a0:	080044cf 	.word	0x080044cf
 80044a4:	080044c7 	.word	0x080044c7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80044a8:	f7ff f856 	bl	8003558 <HAL_RCC_GetPCLK1Freq>
 80044ac:	61f8      	str	r0, [r7, #28]
        break;
 80044ae:	e014      	b.n	80044da <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80044b0:	f7ff f868 	bl	8003584 <HAL_RCC_GetPCLK2Freq>
 80044b4:	61f8      	str	r0, [r7, #28]
        break;
 80044b6:	e010      	b.n	80044da <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80044b8:	4b4d      	ldr	r3, [pc, #308]	@ (80045f0 <UART_SetConfig+0x56c>)
 80044ba:	61fb      	str	r3, [r7, #28]
        break;
 80044bc:	e00d      	b.n	80044da <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80044be:	f7fe ffb3 	bl	8003428 <HAL_RCC_GetSysClockFreq>
 80044c2:	61f8      	str	r0, [r7, #28]
        break;
 80044c4:	e009      	b.n	80044da <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80044c6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80044ca:	61fb      	str	r3, [r7, #28]
        break;
 80044cc:	e005      	b.n	80044da <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 80044ce:	2300      	movs	r3, #0
 80044d0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80044d2:	2301      	movs	r3, #1
 80044d4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80044d8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80044da:	69fb      	ldr	r3, [r7, #28]
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d077      	beq.n	80045d0 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80044e0:	69fb      	ldr	r3, [r7, #28]
 80044e2:	005a      	lsls	r2, r3, #1
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	685b      	ldr	r3, [r3, #4]
 80044e8:	085b      	lsrs	r3, r3, #1
 80044ea:	441a      	add	r2, r3
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	685b      	ldr	r3, [r3, #4]
 80044f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80044f4:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80044f6:	69bb      	ldr	r3, [r7, #24]
 80044f8:	2b0f      	cmp	r3, #15
 80044fa:	d916      	bls.n	800452a <UART_SetConfig+0x4a6>
 80044fc:	69bb      	ldr	r3, [r7, #24]
 80044fe:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004502:	d212      	bcs.n	800452a <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004504:	69bb      	ldr	r3, [r7, #24]
 8004506:	b29b      	uxth	r3, r3
 8004508:	f023 030f 	bic.w	r3, r3, #15
 800450c:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800450e:	69bb      	ldr	r3, [r7, #24]
 8004510:	085b      	lsrs	r3, r3, #1
 8004512:	b29b      	uxth	r3, r3
 8004514:	f003 0307 	and.w	r3, r3, #7
 8004518:	b29a      	uxth	r2, r3
 800451a:	8afb      	ldrh	r3, [r7, #22]
 800451c:	4313      	orrs	r3, r2
 800451e:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	8afa      	ldrh	r2, [r7, #22]
 8004526:	60da      	str	r2, [r3, #12]
 8004528:	e052      	b.n	80045d0 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800452a:	2301      	movs	r3, #1
 800452c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8004530:	e04e      	b.n	80045d0 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004532:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004536:	2b08      	cmp	r3, #8
 8004538:	d827      	bhi.n	800458a <UART_SetConfig+0x506>
 800453a:	a201      	add	r2, pc, #4	@ (adr r2, 8004540 <UART_SetConfig+0x4bc>)
 800453c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004540:	08004565 	.word	0x08004565
 8004544:	0800456d 	.word	0x0800456d
 8004548:	08004575 	.word	0x08004575
 800454c:	0800458b 	.word	0x0800458b
 8004550:	0800457b 	.word	0x0800457b
 8004554:	0800458b 	.word	0x0800458b
 8004558:	0800458b 	.word	0x0800458b
 800455c:	0800458b 	.word	0x0800458b
 8004560:	08004583 	.word	0x08004583
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004564:	f7fe fff8 	bl	8003558 <HAL_RCC_GetPCLK1Freq>
 8004568:	61f8      	str	r0, [r7, #28]
        break;
 800456a:	e014      	b.n	8004596 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800456c:	f7ff f80a 	bl	8003584 <HAL_RCC_GetPCLK2Freq>
 8004570:	61f8      	str	r0, [r7, #28]
        break;
 8004572:	e010      	b.n	8004596 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004574:	4b1e      	ldr	r3, [pc, #120]	@ (80045f0 <UART_SetConfig+0x56c>)
 8004576:	61fb      	str	r3, [r7, #28]
        break;
 8004578:	e00d      	b.n	8004596 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800457a:	f7fe ff55 	bl	8003428 <HAL_RCC_GetSysClockFreq>
 800457e:	61f8      	str	r0, [r7, #28]
        break;
 8004580:	e009      	b.n	8004596 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004582:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004586:	61fb      	str	r3, [r7, #28]
        break;
 8004588:	e005      	b.n	8004596 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 800458a:	2300      	movs	r3, #0
 800458c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800458e:	2301      	movs	r3, #1
 8004590:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8004594:	bf00      	nop
    }

    if (pclk != 0U)
 8004596:	69fb      	ldr	r3, [r7, #28]
 8004598:	2b00      	cmp	r3, #0
 800459a:	d019      	beq.n	80045d0 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	685b      	ldr	r3, [r3, #4]
 80045a0:	085a      	lsrs	r2, r3, #1
 80045a2:	69fb      	ldr	r3, [r7, #28]
 80045a4:	441a      	add	r2, r3
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	685b      	ldr	r3, [r3, #4]
 80045aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80045ae:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80045b0:	69bb      	ldr	r3, [r7, #24]
 80045b2:	2b0f      	cmp	r3, #15
 80045b4:	d909      	bls.n	80045ca <UART_SetConfig+0x546>
 80045b6:	69bb      	ldr	r3, [r7, #24]
 80045b8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80045bc:	d205      	bcs.n	80045ca <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80045be:	69bb      	ldr	r3, [r7, #24]
 80045c0:	b29a      	uxth	r2, r3
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	60da      	str	r2, [r3, #12]
 80045c8:	e002      	b.n	80045d0 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80045ca:	2301      	movs	r3, #1
 80045cc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	2200      	movs	r2, #0
 80045d4:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	2200      	movs	r2, #0
 80045da:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80045dc:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 80045e0:	4618      	mov	r0, r3
 80045e2:	3728      	adds	r7, #40	@ 0x28
 80045e4:	46bd      	mov	sp, r7
 80045e6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80045ea:	bf00      	nop
 80045ec:	40008000 	.word	0x40008000
 80045f0:	00f42400 	.word	0x00f42400

080045f4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80045f4:	b480      	push	{r7}
 80045f6:	b083      	sub	sp, #12
 80045f8:	af00      	add	r7, sp, #0
 80045fa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004600:	f003 0308 	and.w	r3, r3, #8
 8004604:	2b00      	cmp	r3, #0
 8004606:	d00a      	beq.n	800461e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	685b      	ldr	r3, [r3, #4]
 800460e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	430a      	orrs	r2, r1
 800461c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004622:	f003 0301 	and.w	r3, r3, #1
 8004626:	2b00      	cmp	r3, #0
 8004628:	d00a      	beq.n	8004640 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	685b      	ldr	r3, [r3, #4]
 8004630:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	430a      	orrs	r2, r1
 800463e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004644:	f003 0302 	and.w	r3, r3, #2
 8004648:	2b00      	cmp	r3, #0
 800464a:	d00a      	beq.n	8004662 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	685b      	ldr	r3, [r3, #4]
 8004652:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	430a      	orrs	r2, r1
 8004660:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004666:	f003 0304 	and.w	r3, r3, #4
 800466a:	2b00      	cmp	r3, #0
 800466c:	d00a      	beq.n	8004684 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	685b      	ldr	r3, [r3, #4]
 8004674:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	430a      	orrs	r2, r1
 8004682:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004688:	f003 0310 	and.w	r3, r3, #16
 800468c:	2b00      	cmp	r3, #0
 800468e:	d00a      	beq.n	80046a6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	689b      	ldr	r3, [r3, #8]
 8004696:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	430a      	orrs	r2, r1
 80046a4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046aa:	f003 0320 	and.w	r3, r3, #32
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d00a      	beq.n	80046c8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	689b      	ldr	r3, [r3, #8]
 80046b8:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	430a      	orrs	r2, r1
 80046c6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046cc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d01a      	beq.n	800470a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	685b      	ldr	r3, [r3, #4]
 80046da:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	430a      	orrs	r2, r1
 80046e8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046ee:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80046f2:	d10a      	bne.n	800470a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	685b      	ldr	r3, [r3, #4]
 80046fa:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	430a      	orrs	r2, r1
 8004708:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800470e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004712:	2b00      	cmp	r3, #0
 8004714:	d00a      	beq.n	800472c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	685b      	ldr	r3, [r3, #4]
 800471c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	430a      	orrs	r2, r1
 800472a:	605a      	str	r2, [r3, #4]
  }
}
 800472c:	bf00      	nop
 800472e:	370c      	adds	r7, #12
 8004730:	46bd      	mov	sp, r7
 8004732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004736:	4770      	bx	lr

08004738 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004738:	b580      	push	{r7, lr}
 800473a:	b098      	sub	sp, #96	@ 0x60
 800473c:	af02      	add	r7, sp, #8
 800473e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	2200      	movs	r2, #0
 8004744:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004748:	f7fd fe2a 	bl	80023a0 <HAL_GetTick>
 800474c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	f003 0308 	and.w	r3, r3, #8
 8004758:	2b08      	cmp	r3, #8
 800475a:	d12e      	bne.n	80047ba <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800475c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004760:	9300      	str	r3, [sp, #0]
 8004762:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004764:	2200      	movs	r2, #0
 8004766:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800476a:	6878      	ldr	r0, [r7, #4]
 800476c:	f000 f88c 	bl	8004888 <UART_WaitOnFlagUntilTimeout>
 8004770:	4603      	mov	r3, r0
 8004772:	2b00      	cmp	r3, #0
 8004774:	d021      	beq.n	80047ba <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800477c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800477e:	e853 3f00 	ldrex	r3, [r3]
 8004782:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004784:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004786:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800478a:	653b      	str	r3, [r7, #80]	@ 0x50
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	461a      	mov	r2, r3
 8004792:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004794:	647b      	str	r3, [r7, #68]	@ 0x44
 8004796:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004798:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800479a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800479c:	e841 2300 	strex	r3, r2, [r1]
 80047a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80047a2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d1e6      	bne.n	8004776 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	2220      	movs	r2, #32
 80047ac:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	2200      	movs	r2, #0
 80047b2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80047b6:	2303      	movs	r3, #3
 80047b8:	e062      	b.n	8004880 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	f003 0304 	and.w	r3, r3, #4
 80047c4:	2b04      	cmp	r3, #4
 80047c6:	d149      	bne.n	800485c <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80047c8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80047cc:	9300      	str	r3, [sp, #0]
 80047ce:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80047d0:	2200      	movs	r2, #0
 80047d2:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80047d6:	6878      	ldr	r0, [r7, #4]
 80047d8:	f000 f856 	bl	8004888 <UART_WaitOnFlagUntilTimeout>
 80047dc:	4603      	mov	r3, r0
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d03c      	beq.n	800485c <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047ea:	e853 3f00 	ldrex	r3, [r3]
 80047ee:	623b      	str	r3, [r7, #32]
   return(result);
 80047f0:	6a3b      	ldr	r3, [r7, #32]
 80047f2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80047f6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	461a      	mov	r2, r3
 80047fe:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004800:	633b      	str	r3, [r7, #48]	@ 0x30
 8004802:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004804:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004806:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004808:	e841 2300 	strex	r3, r2, [r1]
 800480c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800480e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004810:	2b00      	cmp	r3, #0
 8004812:	d1e6      	bne.n	80047e2 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	3308      	adds	r3, #8
 800481a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800481c:	693b      	ldr	r3, [r7, #16]
 800481e:	e853 3f00 	ldrex	r3, [r3]
 8004822:	60fb      	str	r3, [r7, #12]
   return(result);
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	f023 0301 	bic.w	r3, r3, #1
 800482a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	3308      	adds	r3, #8
 8004832:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004834:	61fa      	str	r2, [r7, #28]
 8004836:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004838:	69b9      	ldr	r1, [r7, #24]
 800483a:	69fa      	ldr	r2, [r7, #28]
 800483c:	e841 2300 	strex	r3, r2, [r1]
 8004840:	617b      	str	r3, [r7, #20]
   return(result);
 8004842:	697b      	ldr	r3, [r7, #20]
 8004844:	2b00      	cmp	r3, #0
 8004846:	d1e5      	bne.n	8004814 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	2220      	movs	r2, #32
 800484c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	2200      	movs	r2, #0
 8004854:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004858:	2303      	movs	r3, #3
 800485a:	e011      	b.n	8004880 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	2220      	movs	r2, #32
 8004860:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	2220      	movs	r2, #32
 8004866:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	2200      	movs	r2, #0
 800486e:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	2200      	movs	r2, #0
 8004874:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	2200      	movs	r2, #0
 800487a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800487e:	2300      	movs	r3, #0
}
 8004880:	4618      	mov	r0, r3
 8004882:	3758      	adds	r7, #88	@ 0x58
 8004884:	46bd      	mov	sp, r7
 8004886:	bd80      	pop	{r7, pc}

08004888 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004888:	b580      	push	{r7, lr}
 800488a:	b084      	sub	sp, #16
 800488c:	af00      	add	r7, sp, #0
 800488e:	60f8      	str	r0, [r7, #12]
 8004890:	60b9      	str	r1, [r7, #8]
 8004892:	603b      	str	r3, [r7, #0]
 8004894:	4613      	mov	r3, r2
 8004896:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004898:	e04f      	b.n	800493a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800489a:	69bb      	ldr	r3, [r7, #24]
 800489c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048a0:	d04b      	beq.n	800493a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80048a2:	f7fd fd7d 	bl	80023a0 <HAL_GetTick>
 80048a6:	4602      	mov	r2, r0
 80048a8:	683b      	ldr	r3, [r7, #0]
 80048aa:	1ad3      	subs	r3, r2, r3
 80048ac:	69ba      	ldr	r2, [r7, #24]
 80048ae:	429a      	cmp	r2, r3
 80048b0:	d302      	bcc.n	80048b8 <UART_WaitOnFlagUntilTimeout+0x30>
 80048b2:	69bb      	ldr	r3, [r7, #24]
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d101      	bne.n	80048bc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80048b8:	2303      	movs	r3, #3
 80048ba:	e04e      	b.n	800495a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	f003 0304 	and.w	r3, r3, #4
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d037      	beq.n	800493a <UART_WaitOnFlagUntilTimeout+0xb2>
 80048ca:	68bb      	ldr	r3, [r7, #8]
 80048cc:	2b80      	cmp	r3, #128	@ 0x80
 80048ce:	d034      	beq.n	800493a <UART_WaitOnFlagUntilTimeout+0xb2>
 80048d0:	68bb      	ldr	r3, [r7, #8]
 80048d2:	2b40      	cmp	r3, #64	@ 0x40
 80048d4:	d031      	beq.n	800493a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	69db      	ldr	r3, [r3, #28]
 80048dc:	f003 0308 	and.w	r3, r3, #8
 80048e0:	2b08      	cmp	r3, #8
 80048e2:	d110      	bne.n	8004906 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	2208      	movs	r2, #8
 80048ea:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80048ec:	68f8      	ldr	r0, [r7, #12]
 80048ee:	f000 f838 	bl	8004962 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	2208      	movs	r2, #8
 80048f6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	2200      	movs	r2, #0
 80048fe:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8004902:	2301      	movs	r3, #1
 8004904:	e029      	b.n	800495a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	69db      	ldr	r3, [r3, #28]
 800490c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004910:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004914:	d111      	bne.n	800493a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800491e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004920:	68f8      	ldr	r0, [r7, #12]
 8004922:	f000 f81e 	bl	8004962 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	2220      	movs	r2, #32
 800492a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	2200      	movs	r2, #0
 8004932:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8004936:	2303      	movs	r3, #3
 8004938:	e00f      	b.n	800495a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	69da      	ldr	r2, [r3, #28]
 8004940:	68bb      	ldr	r3, [r7, #8]
 8004942:	4013      	ands	r3, r2
 8004944:	68ba      	ldr	r2, [r7, #8]
 8004946:	429a      	cmp	r2, r3
 8004948:	bf0c      	ite	eq
 800494a:	2301      	moveq	r3, #1
 800494c:	2300      	movne	r3, #0
 800494e:	b2db      	uxtb	r3, r3
 8004950:	461a      	mov	r2, r3
 8004952:	79fb      	ldrb	r3, [r7, #7]
 8004954:	429a      	cmp	r2, r3
 8004956:	d0a0      	beq.n	800489a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004958:	2300      	movs	r3, #0
}
 800495a:	4618      	mov	r0, r3
 800495c:	3710      	adds	r7, #16
 800495e:	46bd      	mov	sp, r7
 8004960:	bd80      	pop	{r7, pc}

08004962 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004962:	b480      	push	{r7}
 8004964:	b095      	sub	sp, #84	@ 0x54
 8004966:	af00      	add	r7, sp, #0
 8004968:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004970:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004972:	e853 3f00 	ldrex	r3, [r3]
 8004976:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004978:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800497a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800497e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	461a      	mov	r2, r3
 8004986:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004988:	643b      	str	r3, [r7, #64]	@ 0x40
 800498a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800498c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800498e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004990:	e841 2300 	strex	r3, r2, [r1]
 8004994:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004996:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004998:	2b00      	cmp	r3, #0
 800499a:	d1e6      	bne.n	800496a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	3308      	adds	r3, #8
 80049a2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049a4:	6a3b      	ldr	r3, [r7, #32]
 80049a6:	e853 3f00 	ldrex	r3, [r3]
 80049aa:	61fb      	str	r3, [r7, #28]
   return(result);
 80049ac:	69fb      	ldr	r3, [r7, #28]
 80049ae:	f023 0301 	bic.w	r3, r3, #1
 80049b2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	3308      	adds	r3, #8
 80049ba:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80049bc:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80049be:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049c0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80049c2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80049c4:	e841 2300 	strex	r3, r2, [r1]
 80049c8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80049ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d1e5      	bne.n	800499c <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80049d4:	2b01      	cmp	r3, #1
 80049d6:	d118      	bne.n	8004a0a <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	e853 3f00 	ldrex	r3, [r3]
 80049e4:	60bb      	str	r3, [r7, #8]
   return(result);
 80049e6:	68bb      	ldr	r3, [r7, #8]
 80049e8:	f023 0310 	bic.w	r3, r3, #16
 80049ec:	647b      	str	r3, [r7, #68]	@ 0x44
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	461a      	mov	r2, r3
 80049f4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80049f6:	61bb      	str	r3, [r7, #24]
 80049f8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049fa:	6979      	ldr	r1, [r7, #20]
 80049fc:	69ba      	ldr	r2, [r7, #24]
 80049fe:	e841 2300 	strex	r3, r2, [r1]
 8004a02:	613b      	str	r3, [r7, #16]
   return(result);
 8004a04:	693b      	ldr	r3, [r7, #16]
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d1e6      	bne.n	80049d8 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	2220      	movs	r2, #32
 8004a0e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	2200      	movs	r2, #0
 8004a16:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	2200      	movs	r2, #0
 8004a1c:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8004a1e:	bf00      	nop
 8004a20:	3754      	adds	r7, #84	@ 0x54
 8004a22:	46bd      	mov	sp, r7
 8004a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a28:	4770      	bx	lr

08004a2a <memset>:
 8004a2a:	4402      	add	r2, r0
 8004a2c:	4603      	mov	r3, r0
 8004a2e:	4293      	cmp	r3, r2
 8004a30:	d100      	bne.n	8004a34 <memset+0xa>
 8004a32:	4770      	bx	lr
 8004a34:	f803 1b01 	strb.w	r1, [r3], #1
 8004a38:	e7f9      	b.n	8004a2e <memset+0x4>
	...

08004a3c <__errno>:
 8004a3c:	4b01      	ldr	r3, [pc, #4]	@ (8004a44 <__errno+0x8>)
 8004a3e:	6818      	ldr	r0, [r3, #0]
 8004a40:	4770      	bx	lr
 8004a42:	bf00      	nop
 8004a44:	20000a18 	.word	0x20000a18

08004a48 <__libc_init_array>:
 8004a48:	b570      	push	{r4, r5, r6, lr}
 8004a4a:	4d0d      	ldr	r5, [pc, #52]	@ (8004a80 <__libc_init_array+0x38>)
 8004a4c:	4c0d      	ldr	r4, [pc, #52]	@ (8004a84 <__libc_init_array+0x3c>)
 8004a4e:	1b64      	subs	r4, r4, r5
 8004a50:	10a4      	asrs	r4, r4, #2
 8004a52:	2600      	movs	r6, #0
 8004a54:	42a6      	cmp	r6, r4
 8004a56:	d109      	bne.n	8004a6c <__libc_init_array+0x24>
 8004a58:	4d0b      	ldr	r5, [pc, #44]	@ (8004a88 <__libc_init_array+0x40>)
 8004a5a:	4c0c      	ldr	r4, [pc, #48]	@ (8004a8c <__libc_init_array+0x44>)
 8004a5c:	f000 faa2 	bl	8004fa4 <_init>
 8004a60:	1b64      	subs	r4, r4, r5
 8004a62:	10a4      	asrs	r4, r4, #2
 8004a64:	2600      	movs	r6, #0
 8004a66:	42a6      	cmp	r6, r4
 8004a68:	d105      	bne.n	8004a76 <__libc_init_array+0x2e>
 8004a6a:	bd70      	pop	{r4, r5, r6, pc}
 8004a6c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004a70:	4798      	blx	r3
 8004a72:	3601      	adds	r6, #1
 8004a74:	e7ee      	b.n	8004a54 <__libc_init_array+0xc>
 8004a76:	f855 3b04 	ldr.w	r3, [r5], #4
 8004a7a:	4798      	blx	r3
 8004a7c:	3601      	adds	r6, #1
 8004a7e:	e7f2      	b.n	8004a66 <__libc_init_array+0x1e>
 8004a80:	08005084 	.word	0x08005084
 8004a84:	08005084 	.word	0x08005084
 8004a88:	08005084 	.word	0x08005084
 8004a8c:	08005088 	.word	0x08005088

08004a90 <log10>:
 8004a90:	b538      	push	{r3, r4, r5, lr}
 8004a92:	ed2d 8b02 	vpush	{d8}
 8004a96:	ec55 4b10 	vmov	r4, r5, d0
 8004a9a:	f000 f841 	bl	8004b20 <__ieee754_log10>
 8004a9e:	4622      	mov	r2, r4
 8004aa0:	462b      	mov	r3, r5
 8004aa2:	4620      	mov	r0, r4
 8004aa4:	4629      	mov	r1, r5
 8004aa6:	eeb0 8a40 	vmov.f32	s16, s0
 8004aaa:	eef0 8a60 	vmov.f32	s17, s1
 8004aae:	f7fb ffe1 	bl	8000a74 <__aeabi_dcmpun>
 8004ab2:	b998      	cbnz	r0, 8004adc <log10+0x4c>
 8004ab4:	2200      	movs	r2, #0
 8004ab6:	2300      	movs	r3, #0
 8004ab8:	4620      	mov	r0, r4
 8004aba:	4629      	mov	r1, r5
 8004abc:	f7fb ffbc 	bl	8000a38 <__aeabi_dcmple>
 8004ac0:	b160      	cbz	r0, 8004adc <log10+0x4c>
 8004ac2:	2200      	movs	r2, #0
 8004ac4:	2300      	movs	r3, #0
 8004ac6:	4620      	mov	r0, r4
 8004ac8:	4629      	mov	r1, r5
 8004aca:	f7fb ffa1 	bl	8000a10 <__aeabi_dcmpeq>
 8004ace:	b160      	cbz	r0, 8004aea <log10+0x5a>
 8004ad0:	f7ff ffb4 	bl	8004a3c <__errno>
 8004ad4:	ed9f 8b0a 	vldr	d8, [pc, #40]	@ 8004b00 <log10+0x70>
 8004ad8:	2322      	movs	r3, #34	@ 0x22
 8004ada:	6003      	str	r3, [r0, #0]
 8004adc:	eeb0 0a48 	vmov.f32	s0, s16
 8004ae0:	eef0 0a68 	vmov.f32	s1, s17
 8004ae4:	ecbd 8b02 	vpop	{d8}
 8004ae8:	bd38      	pop	{r3, r4, r5, pc}
 8004aea:	f7ff ffa7 	bl	8004a3c <__errno>
 8004aee:	ecbd 8b02 	vpop	{d8}
 8004af2:	2321      	movs	r3, #33	@ 0x21
 8004af4:	6003      	str	r3, [r0, #0]
 8004af6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004afa:	4803      	ldr	r0, [pc, #12]	@ (8004b08 <log10+0x78>)
 8004afc:	f000 b808 	b.w	8004b10 <nan>
 8004b00:	00000000 	.word	0x00000000
 8004b04:	fff00000 	.word	0xfff00000
 8004b08:	08005078 	.word	0x08005078
 8004b0c:	00000000 	.word	0x00000000

08004b10 <nan>:
 8004b10:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8004b18 <nan+0x8>
 8004b14:	4770      	bx	lr
 8004b16:	bf00      	nop
 8004b18:	00000000 	.word	0x00000000
 8004b1c:	7ff80000 	.word	0x7ff80000

08004b20 <__ieee754_log10>:
 8004b20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004b24:	ec55 4b10 	vmov	r4, r5, d0
 8004b28:	f5b5 1f80 	cmp.w	r5, #1048576	@ 0x100000
 8004b2c:	ed2d 8b02 	vpush	{d8}
 8004b30:	462b      	mov	r3, r5
 8004b32:	da2e      	bge.n	8004b92 <__ieee754_log10+0x72>
 8004b34:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 8004b38:	4322      	orrs	r2, r4
 8004b3a:	d10b      	bne.n	8004b54 <__ieee754_log10+0x34>
 8004b3c:	493a      	ldr	r1, [pc, #232]	@ (8004c28 <__ieee754_log10+0x108>)
 8004b3e:	2200      	movs	r2, #0
 8004b40:	2300      	movs	r3, #0
 8004b42:	2000      	movs	r0, #0
 8004b44:	f7fb fe26 	bl	8000794 <__aeabi_ddiv>
 8004b48:	ecbd 8b02 	vpop	{d8}
 8004b4c:	ec41 0b10 	vmov	d0, r0, r1
 8004b50:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004b54:	2d00      	cmp	r5, #0
 8004b56:	da07      	bge.n	8004b68 <__ieee754_log10+0x48>
 8004b58:	4622      	mov	r2, r4
 8004b5a:	4620      	mov	r0, r4
 8004b5c:	4629      	mov	r1, r5
 8004b5e:	f7fb fb37 	bl	80001d0 <__aeabi_dsub>
 8004b62:	2200      	movs	r2, #0
 8004b64:	2300      	movs	r3, #0
 8004b66:	e7ed      	b.n	8004b44 <__ieee754_log10+0x24>
 8004b68:	4b30      	ldr	r3, [pc, #192]	@ (8004c2c <__ieee754_log10+0x10c>)
 8004b6a:	2200      	movs	r2, #0
 8004b6c:	4620      	mov	r0, r4
 8004b6e:	4629      	mov	r1, r5
 8004b70:	f7fb fce6 	bl	8000540 <__aeabi_dmul>
 8004b74:	f06f 0235 	mvn.w	r2, #53	@ 0x35
 8004b78:	4604      	mov	r4, r0
 8004b7a:	460d      	mov	r5, r1
 8004b7c:	460b      	mov	r3, r1
 8004b7e:	492c      	ldr	r1, [pc, #176]	@ (8004c30 <__ieee754_log10+0x110>)
 8004b80:	428b      	cmp	r3, r1
 8004b82:	dd08      	ble.n	8004b96 <__ieee754_log10+0x76>
 8004b84:	4622      	mov	r2, r4
 8004b86:	462b      	mov	r3, r5
 8004b88:	4620      	mov	r0, r4
 8004b8a:	4629      	mov	r1, r5
 8004b8c:	f7fb fb22 	bl	80001d4 <__adddf3>
 8004b90:	e7da      	b.n	8004b48 <__ieee754_log10+0x28>
 8004b92:	2200      	movs	r2, #0
 8004b94:	e7f3      	b.n	8004b7e <__ieee754_log10+0x5e>
 8004b96:	1518      	asrs	r0, r3, #20
 8004b98:	f2a0 30ff 	subw	r0, r0, #1023	@ 0x3ff
 8004b9c:	4410      	add	r0, r2
 8004b9e:	ea4f 79d0 	mov.w	r9, r0, lsr #31
 8004ba2:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 8004ba6:	f3c3 0813 	ubfx	r8, r3, #0, #20
 8004baa:	f7fb fc5f 	bl	800046c <__aeabi_i2d>
 8004bae:	f5c9 737f 	rsb	r3, r9, #1020	@ 0x3fc
 8004bb2:	3303      	adds	r3, #3
 8004bb4:	ea48 5503 	orr.w	r5, r8, r3, lsl #20
 8004bb8:	a315      	add	r3, pc, #84	@ (adr r3, 8004c10 <__ieee754_log10+0xf0>)
 8004bba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bbe:	ec45 4b18 	vmov	d8, r4, r5
 8004bc2:	4606      	mov	r6, r0
 8004bc4:	460f      	mov	r7, r1
 8004bc6:	f7fb fcbb 	bl	8000540 <__aeabi_dmul>
 8004bca:	eeb0 0a48 	vmov.f32	s0, s16
 8004bce:	eef0 0a68 	vmov.f32	s1, s17
 8004bd2:	4604      	mov	r4, r0
 8004bd4:	460d      	mov	r5, r1
 8004bd6:	f000 f82f 	bl	8004c38 <__ieee754_log>
 8004bda:	a30f      	add	r3, pc, #60	@ (adr r3, 8004c18 <__ieee754_log10+0xf8>)
 8004bdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004be0:	ec51 0b10 	vmov	r0, r1, d0
 8004be4:	f7fb fcac 	bl	8000540 <__aeabi_dmul>
 8004be8:	4622      	mov	r2, r4
 8004bea:	462b      	mov	r3, r5
 8004bec:	f7fb faf2 	bl	80001d4 <__adddf3>
 8004bf0:	a30b      	add	r3, pc, #44	@ (adr r3, 8004c20 <__ieee754_log10+0x100>)
 8004bf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bf6:	4604      	mov	r4, r0
 8004bf8:	460d      	mov	r5, r1
 8004bfa:	4630      	mov	r0, r6
 8004bfc:	4639      	mov	r1, r7
 8004bfe:	f7fb fc9f 	bl	8000540 <__aeabi_dmul>
 8004c02:	4602      	mov	r2, r0
 8004c04:	460b      	mov	r3, r1
 8004c06:	4620      	mov	r0, r4
 8004c08:	4629      	mov	r1, r5
 8004c0a:	e7bf      	b.n	8004b8c <__ieee754_log10+0x6c>
 8004c0c:	f3af 8000 	nop.w
 8004c10:	11f12b36 	.word	0x11f12b36
 8004c14:	3d59fef3 	.word	0x3d59fef3
 8004c18:	1526e50e 	.word	0x1526e50e
 8004c1c:	3fdbcb7b 	.word	0x3fdbcb7b
 8004c20:	509f6000 	.word	0x509f6000
 8004c24:	3fd34413 	.word	0x3fd34413
 8004c28:	c3500000 	.word	0xc3500000
 8004c2c:	43500000 	.word	0x43500000
 8004c30:	7fefffff 	.word	0x7fefffff
 8004c34:	00000000 	.word	0x00000000

08004c38 <__ieee754_log>:
 8004c38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004c3c:	ec51 0b10 	vmov	r0, r1, d0
 8004c40:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8004c44:	b087      	sub	sp, #28
 8004c46:	460d      	mov	r5, r1
 8004c48:	da26      	bge.n	8004c98 <__ieee754_log+0x60>
 8004c4a:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8004c4e:	4303      	orrs	r3, r0
 8004c50:	4602      	mov	r2, r0
 8004c52:	d10a      	bne.n	8004c6a <__ieee754_log+0x32>
 8004c54:	49ce      	ldr	r1, [pc, #824]	@ (8004f90 <__ieee754_log+0x358>)
 8004c56:	2200      	movs	r2, #0
 8004c58:	2300      	movs	r3, #0
 8004c5a:	2000      	movs	r0, #0
 8004c5c:	f7fb fd9a 	bl	8000794 <__aeabi_ddiv>
 8004c60:	ec41 0b10 	vmov	d0, r0, r1
 8004c64:	b007      	add	sp, #28
 8004c66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004c6a:	2900      	cmp	r1, #0
 8004c6c:	da05      	bge.n	8004c7a <__ieee754_log+0x42>
 8004c6e:	460b      	mov	r3, r1
 8004c70:	f7fb faae 	bl	80001d0 <__aeabi_dsub>
 8004c74:	2200      	movs	r2, #0
 8004c76:	2300      	movs	r3, #0
 8004c78:	e7f0      	b.n	8004c5c <__ieee754_log+0x24>
 8004c7a:	4bc6      	ldr	r3, [pc, #792]	@ (8004f94 <__ieee754_log+0x35c>)
 8004c7c:	2200      	movs	r2, #0
 8004c7e:	f7fb fc5f 	bl	8000540 <__aeabi_dmul>
 8004c82:	f06f 0335 	mvn.w	r3, #53	@ 0x35
 8004c86:	460d      	mov	r5, r1
 8004c88:	4ac3      	ldr	r2, [pc, #780]	@ (8004f98 <__ieee754_log+0x360>)
 8004c8a:	4295      	cmp	r5, r2
 8004c8c:	dd06      	ble.n	8004c9c <__ieee754_log+0x64>
 8004c8e:	4602      	mov	r2, r0
 8004c90:	460b      	mov	r3, r1
 8004c92:	f7fb fa9f 	bl	80001d4 <__adddf3>
 8004c96:	e7e3      	b.n	8004c60 <__ieee754_log+0x28>
 8004c98:	2300      	movs	r3, #0
 8004c9a:	e7f5      	b.n	8004c88 <__ieee754_log+0x50>
 8004c9c:	152c      	asrs	r4, r5, #20
 8004c9e:	f2a4 34ff 	subw	r4, r4, #1023	@ 0x3ff
 8004ca2:	f3c5 0513 	ubfx	r5, r5, #0, #20
 8004ca6:	441c      	add	r4, r3
 8004ca8:	f505 2315 	add.w	r3, r5, #610304	@ 0x95000
 8004cac:	f603 7364 	addw	r3, r3, #3940	@ 0xf64
 8004cb0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004cb4:	f083 527f 	eor.w	r2, r3, #1069547520	@ 0x3fc00000
 8004cb8:	f482 1240 	eor.w	r2, r2, #3145728	@ 0x300000
 8004cbc:	ea42 0105 	orr.w	r1, r2, r5
 8004cc0:	eb04 5413 	add.w	r4, r4, r3, lsr #20
 8004cc4:	2200      	movs	r2, #0
 8004cc6:	4bb5      	ldr	r3, [pc, #724]	@ (8004f9c <__ieee754_log+0x364>)
 8004cc8:	f7fb fa82 	bl	80001d0 <__aeabi_dsub>
 8004ccc:	1cab      	adds	r3, r5, #2
 8004cce:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004cd2:	2b02      	cmp	r3, #2
 8004cd4:	4682      	mov	sl, r0
 8004cd6:	468b      	mov	fp, r1
 8004cd8:	f04f 0200 	mov.w	r2, #0
 8004cdc:	dc53      	bgt.n	8004d86 <__ieee754_log+0x14e>
 8004cde:	2300      	movs	r3, #0
 8004ce0:	f7fb fe96 	bl	8000a10 <__aeabi_dcmpeq>
 8004ce4:	b1d0      	cbz	r0, 8004d1c <__ieee754_log+0xe4>
 8004ce6:	2c00      	cmp	r4, #0
 8004ce8:	f000 8120 	beq.w	8004f2c <__ieee754_log+0x2f4>
 8004cec:	4620      	mov	r0, r4
 8004cee:	f7fb fbbd 	bl	800046c <__aeabi_i2d>
 8004cf2:	a391      	add	r3, pc, #580	@ (adr r3, 8004f38 <__ieee754_log+0x300>)
 8004cf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cf8:	4606      	mov	r6, r0
 8004cfa:	460f      	mov	r7, r1
 8004cfc:	f7fb fc20 	bl	8000540 <__aeabi_dmul>
 8004d00:	a38f      	add	r3, pc, #572	@ (adr r3, 8004f40 <__ieee754_log+0x308>)
 8004d02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d06:	4604      	mov	r4, r0
 8004d08:	460d      	mov	r5, r1
 8004d0a:	4630      	mov	r0, r6
 8004d0c:	4639      	mov	r1, r7
 8004d0e:	f7fb fc17 	bl	8000540 <__aeabi_dmul>
 8004d12:	4602      	mov	r2, r0
 8004d14:	460b      	mov	r3, r1
 8004d16:	4620      	mov	r0, r4
 8004d18:	4629      	mov	r1, r5
 8004d1a:	e7ba      	b.n	8004c92 <__ieee754_log+0x5a>
 8004d1c:	a38a      	add	r3, pc, #552	@ (adr r3, 8004f48 <__ieee754_log+0x310>)
 8004d1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d22:	4650      	mov	r0, sl
 8004d24:	4659      	mov	r1, fp
 8004d26:	f7fb fc0b 	bl	8000540 <__aeabi_dmul>
 8004d2a:	4602      	mov	r2, r0
 8004d2c:	460b      	mov	r3, r1
 8004d2e:	2000      	movs	r0, #0
 8004d30:	499b      	ldr	r1, [pc, #620]	@ (8004fa0 <__ieee754_log+0x368>)
 8004d32:	f7fb fa4d 	bl	80001d0 <__aeabi_dsub>
 8004d36:	4652      	mov	r2, sl
 8004d38:	4606      	mov	r6, r0
 8004d3a:	460f      	mov	r7, r1
 8004d3c:	465b      	mov	r3, fp
 8004d3e:	4650      	mov	r0, sl
 8004d40:	4659      	mov	r1, fp
 8004d42:	f7fb fbfd 	bl	8000540 <__aeabi_dmul>
 8004d46:	4602      	mov	r2, r0
 8004d48:	460b      	mov	r3, r1
 8004d4a:	4630      	mov	r0, r6
 8004d4c:	4639      	mov	r1, r7
 8004d4e:	f7fb fbf7 	bl	8000540 <__aeabi_dmul>
 8004d52:	4606      	mov	r6, r0
 8004d54:	460f      	mov	r7, r1
 8004d56:	b914      	cbnz	r4, 8004d5e <__ieee754_log+0x126>
 8004d58:	4632      	mov	r2, r6
 8004d5a:	463b      	mov	r3, r7
 8004d5c:	e0a0      	b.n	8004ea0 <__ieee754_log+0x268>
 8004d5e:	4620      	mov	r0, r4
 8004d60:	f7fb fb84 	bl	800046c <__aeabi_i2d>
 8004d64:	a374      	add	r3, pc, #464	@ (adr r3, 8004f38 <__ieee754_log+0x300>)
 8004d66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d6a:	4680      	mov	r8, r0
 8004d6c:	4689      	mov	r9, r1
 8004d6e:	f7fb fbe7 	bl	8000540 <__aeabi_dmul>
 8004d72:	a373      	add	r3, pc, #460	@ (adr r3, 8004f40 <__ieee754_log+0x308>)
 8004d74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d78:	4604      	mov	r4, r0
 8004d7a:	460d      	mov	r5, r1
 8004d7c:	4640      	mov	r0, r8
 8004d7e:	4649      	mov	r1, r9
 8004d80:	f7fb fbde 	bl	8000540 <__aeabi_dmul>
 8004d84:	e0a5      	b.n	8004ed2 <__ieee754_log+0x29a>
 8004d86:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8004d8a:	f7fb fa23 	bl	80001d4 <__adddf3>
 8004d8e:	4602      	mov	r2, r0
 8004d90:	460b      	mov	r3, r1
 8004d92:	4650      	mov	r0, sl
 8004d94:	4659      	mov	r1, fp
 8004d96:	f7fb fcfd 	bl	8000794 <__aeabi_ddiv>
 8004d9a:	e9cd 0100 	strd	r0, r1, [sp]
 8004d9e:	4620      	mov	r0, r4
 8004da0:	f7fb fb64 	bl	800046c <__aeabi_i2d>
 8004da4:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004da8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004dac:	4610      	mov	r0, r2
 8004dae:	4619      	mov	r1, r3
 8004db0:	f7fb fbc6 	bl	8000540 <__aeabi_dmul>
 8004db4:	4602      	mov	r2, r0
 8004db6:	460b      	mov	r3, r1
 8004db8:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8004dbc:	f7fb fbc0 	bl	8000540 <__aeabi_dmul>
 8004dc0:	a363      	add	r3, pc, #396	@ (adr r3, 8004f50 <__ieee754_log+0x318>)
 8004dc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004dc6:	4680      	mov	r8, r0
 8004dc8:	4689      	mov	r9, r1
 8004dca:	f7fb fbb9 	bl	8000540 <__aeabi_dmul>
 8004dce:	a362      	add	r3, pc, #392	@ (adr r3, 8004f58 <__ieee754_log+0x320>)
 8004dd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004dd4:	f7fb f9fe 	bl	80001d4 <__adddf3>
 8004dd8:	4642      	mov	r2, r8
 8004dda:	464b      	mov	r3, r9
 8004ddc:	f7fb fbb0 	bl	8000540 <__aeabi_dmul>
 8004de0:	a35f      	add	r3, pc, #380	@ (adr r3, 8004f60 <__ieee754_log+0x328>)
 8004de2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004de6:	f7fb f9f5 	bl	80001d4 <__adddf3>
 8004dea:	4642      	mov	r2, r8
 8004dec:	464b      	mov	r3, r9
 8004dee:	f7fb fba7 	bl	8000540 <__aeabi_dmul>
 8004df2:	a35d      	add	r3, pc, #372	@ (adr r3, 8004f68 <__ieee754_log+0x330>)
 8004df4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004df8:	f7fb f9ec 	bl	80001d4 <__adddf3>
 8004dfc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004e00:	f7fb fb9e 	bl	8000540 <__aeabi_dmul>
 8004e04:	a35a      	add	r3, pc, #360	@ (adr r3, 8004f70 <__ieee754_log+0x338>)
 8004e06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e0a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004e0e:	4640      	mov	r0, r8
 8004e10:	4649      	mov	r1, r9
 8004e12:	f7fb fb95 	bl	8000540 <__aeabi_dmul>
 8004e16:	a358      	add	r3, pc, #352	@ (adr r3, 8004f78 <__ieee754_log+0x340>)
 8004e18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e1c:	f7fb f9da 	bl	80001d4 <__adddf3>
 8004e20:	4642      	mov	r2, r8
 8004e22:	464b      	mov	r3, r9
 8004e24:	f7fb fb8c 	bl	8000540 <__aeabi_dmul>
 8004e28:	a355      	add	r3, pc, #340	@ (adr r3, 8004f80 <__ieee754_log+0x348>)
 8004e2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e2e:	f7fb f9d1 	bl	80001d4 <__adddf3>
 8004e32:	4642      	mov	r2, r8
 8004e34:	464b      	mov	r3, r9
 8004e36:	f7fb fb83 	bl	8000540 <__aeabi_dmul>
 8004e3a:	f5a5 26c2 	sub.w	r6, r5, #397312	@ 0x61000
 8004e3e:	4602      	mov	r2, r0
 8004e40:	460b      	mov	r3, r1
 8004e42:	f5c5 25d7 	rsb	r5, r5, #440320	@ 0x6b800
 8004e46:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004e4a:	f7fb f9c3 	bl	80001d4 <__adddf3>
 8004e4e:	f2a6 467a 	subw	r6, r6, #1146	@ 0x47a
 8004e52:	3551      	adds	r5, #81	@ 0x51
 8004e54:	4335      	orrs	r5, r6
 8004e56:	2d00      	cmp	r5, #0
 8004e58:	4680      	mov	r8, r0
 8004e5a:	4689      	mov	r9, r1
 8004e5c:	dd48      	ble.n	8004ef0 <__ieee754_log+0x2b8>
 8004e5e:	4b50      	ldr	r3, [pc, #320]	@ (8004fa0 <__ieee754_log+0x368>)
 8004e60:	2200      	movs	r2, #0
 8004e62:	4650      	mov	r0, sl
 8004e64:	4659      	mov	r1, fp
 8004e66:	f7fb fb6b 	bl	8000540 <__aeabi_dmul>
 8004e6a:	4652      	mov	r2, sl
 8004e6c:	465b      	mov	r3, fp
 8004e6e:	f7fb fb67 	bl	8000540 <__aeabi_dmul>
 8004e72:	4602      	mov	r2, r0
 8004e74:	460b      	mov	r3, r1
 8004e76:	4606      	mov	r6, r0
 8004e78:	460f      	mov	r7, r1
 8004e7a:	4640      	mov	r0, r8
 8004e7c:	4649      	mov	r1, r9
 8004e7e:	f7fb f9a9 	bl	80001d4 <__adddf3>
 8004e82:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004e86:	f7fb fb5b 	bl	8000540 <__aeabi_dmul>
 8004e8a:	4680      	mov	r8, r0
 8004e8c:	4689      	mov	r9, r1
 8004e8e:	b964      	cbnz	r4, 8004eaa <__ieee754_log+0x272>
 8004e90:	4602      	mov	r2, r0
 8004e92:	460b      	mov	r3, r1
 8004e94:	4630      	mov	r0, r6
 8004e96:	4639      	mov	r1, r7
 8004e98:	f7fb f99a 	bl	80001d0 <__aeabi_dsub>
 8004e9c:	4602      	mov	r2, r0
 8004e9e:	460b      	mov	r3, r1
 8004ea0:	4650      	mov	r0, sl
 8004ea2:	4659      	mov	r1, fp
 8004ea4:	f7fb f994 	bl	80001d0 <__aeabi_dsub>
 8004ea8:	e6da      	b.n	8004c60 <__ieee754_log+0x28>
 8004eaa:	a323      	add	r3, pc, #140	@ (adr r3, 8004f38 <__ieee754_log+0x300>)
 8004eac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004eb0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004eb4:	f7fb fb44 	bl	8000540 <__aeabi_dmul>
 8004eb8:	a321      	add	r3, pc, #132	@ (adr r3, 8004f40 <__ieee754_log+0x308>)
 8004eba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ebe:	4604      	mov	r4, r0
 8004ec0:	460d      	mov	r5, r1
 8004ec2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004ec6:	f7fb fb3b 	bl	8000540 <__aeabi_dmul>
 8004eca:	4642      	mov	r2, r8
 8004ecc:	464b      	mov	r3, r9
 8004ece:	f7fb f981 	bl	80001d4 <__adddf3>
 8004ed2:	4602      	mov	r2, r0
 8004ed4:	460b      	mov	r3, r1
 8004ed6:	4630      	mov	r0, r6
 8004ed8:	4639      	mov	r1, r7
 8004eda:	f7fb f979 	bl	80001d0 <__aeabi_dsub>
 8004ede:	4652      	mov	r2, sl
 8004ee0:	465b      	mov	r3, fp
 8004ee2:	f7fb f975 	bl	80001d0 <__aeabi_dsub>
 8004ee6:	4602      	mov	r2, r0
 8004ee8:	460b      	mov	r3, r1
 8004eea:	4620      	mov	r0, r4
 8004eec:	4629      	mov	r1, r5
 8004eee:	e7d9      	b.n	8004ea4 <__ieee754_log+0x26c>
 8004ef0:	4602      	mov	r2, r0
 8004ef2:	460b      	mov	r3, r1
 8004ef4:	4650      	mov	r0, sl
 8004ef6:	4659      	mov	r1, fp
 8004ef8:	f7fb f96a 	bl	80001d0 <__aeabi_dsub>
 8004efc:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004f00:	f7fb fb1e 	bl	8000540 <__aeabi_dmul>
 8004f04:	4606      	mov	r6, r0
 8004f06:	460f      	mov	r7, r1
 8004f08:	2c00      	cmp	r4, #0
 8004f0a:	f43f af25 	beq.w	8004d58 <__ieee754_log+0x120>
 8004f0e:	a30a      	add	r3, pc, #40	@ (adr r3, 8004f38 <__ieee754_log+0x300>)
 8004f10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f14:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004f18:	f7fb fb12 	bl	8000540 <__aeabi_dmul>
 8004f1c:	a308      	add	r3, pc, #32	@ (adr r3, 8004f40 <__ieee754_log+0x308>)
 8004f1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f22:	4604      	mov	r4, r0
 8004f24:	460d      	mov	r5, r1
 8004f26:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004f2a:	e729      	b.n	8004d80 <__ieee754_log+0x148>
 8004f2c:	ed9f 0b16 	vldr	d0, [pc, #88]	@ 8004f88 <__ieee754_log+0x350>
 8004f30:	e698      	b.n	8004c64 <__ieee754_log+0x2c>
 8004f32:	bf00      	nop
 8004f34:	f3af 8000 	nop.w
 8004f38:	fee00000 	.word	0xfee00000
 8004f3c:	3fe62e42 	.word	0x3fe62e42
 8004f40:	35793c76 	.word	0x35793c76
 8004f44:	3dea39ef 	.word	0x3dea39ef
 8004f48:	55555555 	.word	0x55555555
 8004f4c:	3fd55555 	.word	0x3fd55555
 8004f50:	df3e5244 	.word	0xdf3e5244
 8004f54:	3fc2f112 	.word	0x3fc2f112
 8004f58:	96cb03de 	.word	0x96cb03de
 8004f5c:	3fc74664 	.word	0x3fc74664
 8004f60:	94229359 	.word	0x94229359
 8004f64:	3fd24924 	.word	0x3fd24924
 8004f68:	55555593 	.word	0x55555593
 8004f6c:	3fe55555 	.word	0x3fe55555
 8004f70:	d078c69f 	.word	0xd078c69f
 8004f74:	3fc39a09 	.word	0x3fc39a09
 8004f78:	1d8e78af 	.word	0x1d8e78af
 8004f7c:	3fcc71c5 	.word	0x3fcc71c5
 8004f80:	9997fa04 	.word	0x9997fa04
 8004f84:	3fd99999 	.word	0x3fd99999
	...
 8004f90:	c3500000 	.word	0xc3500000
 8004f94:	43500000 	.word	0x43500000
 8004f98:	7fefffff 	.word	0x7fefffff
 8004f9c:	3ff00000 	.word	0x3ff00000
 8004fa0:	3fe00000 	.word	0x3fe00000

08004fa4 <_init>:
 8004fa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004fa6:	bf00      	nop
 8004fa8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004faa:	bc08      	pop	{r3}
 8004fac:	469e      	mov	lr, r3
 8004fae:	4770      	bx	lr

08004fb0 <_fini>:
 8004fb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004fb2:	bf00      	nop
 8004fb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004fb6:	bc08      	pop	{r3}
 8004fb8:	469e      	mov	lr, r3
 8004fba:	4770      	bx	lr
