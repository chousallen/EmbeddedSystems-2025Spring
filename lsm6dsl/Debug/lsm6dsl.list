
lsm6dsl.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000048fc  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  08004a84  08004a84  00005a84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004acc  08004acc  0000600c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08004acc  08004acc  00005acc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004ad4  08004ad4  0000600c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004ad4  08004ad4  00005ad4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004ad8  08004ad8  00005ad8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08004adc  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000774  2000000c  08004ae8  0000600c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000780  08004ae8  00006780  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000600c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017140  00000000  00000000  0000603c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002dda  00000000  00000000  0001d17c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001568  00000000  00000000  0001ff58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000010a1  00000000  00000000  000214c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000272d2  00000000  00000000  00022561  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018a19  00000000  00000000  00049833  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000efb88  00000000  00000000  0006224c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00151dd4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005bf8  00000000  00000000  00151e18  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000058  00000000  00000000  00157a10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08004a6c 	.word	0x08004a6c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08004a6c 	.word	0x08004a6c

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b988 	b.w	80004f0 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	468e      	mov	lr, r1
 8000200:	4604      	mov	r4, r0
 8000202:	4688      	mov	r8, r1
 8000204:	2b00      	cmp	r3, #0
 8000206:	d14a      	bne.n	800029e <__udivmoddi4+0xa6>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d962      	bls.n	80002d4 <__udivmoddi4+0xdc>
 800020e:	fab2 f682 	clz	r6, r2
 8000212:	b14e      	cbz	r6, 8000228 <__udivmoddi4+0x30>
 8000214:	f1c6 0320 	rsb	r3, r6, #32
 8000218:	fa01 f806 	lsl.w	r8, r1, r6
 800021c:	fa20 f303 	lsr.w	r3, r0, r3
 8000220:	40b7      	lsls	r7, r6
 8000222:	ea43 0808 	orr.w	r8, r3, r8
 8000226:	40b4      	lsls	r4, r6
 8000228:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800022c:	fa1f fc87 	uxth.w	ip, r7
 8000230:	fbb8 f1fe 	udiv	r1, r8, lr
 8000234:	0c23      	lsrs	r3, r4, #16
 8000236:	fb0e 8811 	mls	r8, lr, r1, r8
 800023a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800023e:	fb01 f20c 	mul.w	r2, r1, ip
 8000242:	429a      	cmp	r2, r3
 8000244:	d909      	bls.n	800025a <__udivmoddi4+0x62>
 8000246:	18fb      	adds	r3, r7, r3
 8000248:	f101 30ff 	add.w	r0, r1, #4294967295
 800024c:	f080 80ea 	bcs.w	8000424 <__udivmoddi4+0x22c>
 8000250:	429a      	cmp	r2, r3
 8000252:	f240 80e7 	bls.w	8000424 <__udivmoddi4+0x22c>
 8000256:	3902      	subs	r1, #2
 8000258:	443b      	add	r3, r7
 800025a:	1a9a      	subs	r2, r3, r2
 800025c:	b2a3      	uxth	r3, r4
 800025e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000262:	fb0e 2210 	mls	r2, lr, r0, r2
 8000266:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800026a:	fb00 fc0c 	mul.w	ip, r0, ip
 800026e:	459c      	cmp	ip, r3
 8000270:	d909      	bls.n	8000286 <__udivmoddi4+0x8e>
 8000272:	18fb      	adds	r3, r7, r3
 8000274:	f100 32ff 	add.w	r2, r0, #4294967295
 8000278:	f080 80d6 	bcs.w	8000428 <__udivmoddi4+0x230>
 800027c:	459c      	cmp	ip, r3
 800027e:	f240 80d3 	bls.w	8000428 <__udivmoddi4+0x230>
 8000282:	443b      	add	r3, r7
 8000284:	3802      	subs	r0, #2
 8000286:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800028a:	eba3 030c 	sub.w	r3, r3, ip
 800028e:	2100      	movs	r1, #0
 8000290:	b11d      	cbz	r5, 800029a <__udivmoddi4+0xa2>
 8000292:	40f3      	lsrs	r3, r6
 8000294:	2200      	movs	r2, #0
 8000296:	e9c5 3200 	strd	r3, r2, [r5]
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d905      	bls.n	80002ae <__udivmoddi4+0xb6>
 80002a2:	b10d      	cbz	r5, 80002a8 <__udivmoddi4+0xb0>
 80002a4:	e9c5 0100 	strd	r0, r1, [r5]
 80002a8:	2100      	movs	r1, #0
 80002aa:	4608      	mov	r0, r1
 80002ac:	e7f5      	b.n	800029a <__udivmoddi4+0xa2>
 80002ae:	fab3 f183 	clz	r1, r3
 80002b2:	2900      	cmp	r1, #0
 80002b4:	d146      	bne.n	8000344 <__udivmoddi4+0x14c>
 80002b6:	4573      	cmp	r3, lr
 80002b8:	d302      	bcc.n	80002c0 <__udivmoddi4+0xc8>
 80002ba:	4282      	cmp	r2, r0
 80002bc:	f200 8105 	bhi.w	80004ca <__udivmoddi4+0x2d2>
 80002c0:	1a84      	subs	r4, r0, r2
 80002c2:	eb6e 0203 	sbc.w	r2, lr, r3
 80002c6:	2001      	movs	r0, #1
 80002c8:	4690      	mov	r8, r2
 80002ca:	2d00      	cmp	r5, #0
 80002cc:	d0e5      	beq.n	800029a <__udivmoddi4+0xa2>
 80002ce:	e9c5 4800 	strd	r4, r8, [r5]
 80002d2:	e7e2      	b.n	800029a <__udivmoddi4+0xa2>
 80002d4:	2a00      	cmp	r2, #0
 80002d6:	f000 8090 	beq.w	80003fa <__udivmoddi4+0x202>
 80002da:	fab2 f682 	clz	r6, r2
 80002de:	2e00      	cmp	r6, #0
 80002e0:	f040 80a4 	bne.w	800042c <__udivmoddi4+0x234>
 80002e4:	1a8a      	subs	r2, r1, r2
 80002e6:	0c03      	lsrs	r3, r0, #16
 80002e8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002ec:	b280      	uxth	r0, r0
 80002ee:	b2bc      	uxth	r4, r7
 80002f0:	2101      	movs	r1, #1
 80002f2:	fbb2 fcfe 	udiv	ip, r2, lr
 80002f6:	fb0e 221c 	mls	r2, lr, ip, r2
 80002fa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002fe:	fb04 f20c 	mul.w	r2, r4, ip
 8000302:	429a      	cmp	r2, r3
 8000304:	d907      	bls.n	8000316 <__udivmoddi4+0x11e>
 8000306:	18fb      	adds	r3, r7, r3
 8000308:	f10c 38ff 	add.w	r8, ip, #4294967295
 800030c:	d202      	bcs.n	8000314 <__udivmoddi4+0x11c>
 800030e:	429a      	cmp	r2, r3
 8000310:	f200 80e0 	bhi.w	80004d4 <__udivmoddi4+0x2dc>
 8000314:	46c4      	mov	ip, r8
 8000316:	1a9b      	subs	r3, r3, r2
 8000318:	fbb3 f2fe 	udiv	r2, r3, lr
 800031c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000320:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000324:	fb02 f404 	mul.w	r4, r2, r4
 8000328:	429c      	cmp	r4, r3
 800032a:	d907      	bls.n	800033c <__udivmoddi4+0x144>
 800032c:	18fb      	adds	r3, r7, r3
 800032e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000332:	d202      	bcs.n	800033a <__udivmoddi4+0x142>
 8000334:	429c      	cmp	r4, r3
 8000336:	f200 80ca 	bhi.w	80004ce <__udivmoddi4+0x2d6>
 800033a:	4602      	mov	r2, r0
 800033c:	1b1b      	subs	r3, r3, r4
 800033e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000342:	e7a5      	b.n	8000290 <__udivmoddi4+0x98>
 8000344:	f1c1 0620 	rsb	r6, r1, #32
 8000348:	408b      	lsls	r3, r1
 800034a:	fa22 f706 	lsr.w	r7, r2, r6
 800034e:	431f      	orrs	r7, r3
 8000350:	fa0e f401 	lsl.w	r4, lr, r1
 8000354:	fa20 f306 	lsr.w	r3, r0, r6
 8000358:	fa2e fe06 	lsr.w	lr, lr, r6
 800035c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000360:	4323      	orrs	r3, r4
 8000362:	fa00 f801 	lsl.w	r8, r0, r1
 8000366:	fa1f fc87 	uxth.w	ip, r7
 800036a:	fbbe f0f9 	udiv	r0, lr, r9
 800036e:	0c1c      	lsrs	r4, r3, #16
 8000370:	fb09 ee10 	mls	lr, r9, r0, lr
 8000374:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000378:	fb00 fe0c 	mul.w	lr, r0, ip
 800037c:	45a6      	cmp	lr, r4
 800037e:	fa02 f201 	lsl.w	r2, r2, r1
 8000382:	d909      	bls.n	8000398 <__udivmoddi4+0x1a0>
 8000384:	193c      	adds	r4, r7, r4
 8000386:	f100 3aff 	add.w	sl, r0, #4294967295
 800038a:	f080 809c 	bcs.w	80004c6 <__udivmoddi4+0x2ce>
 800038e:	45a6      	cmp	lr, r4
 8000390:	f240 8099 	bls.w	80004c6 <__udivmoddi4+0x2ce>
 8000394:	3802      	subs	r0, #2
 8000396:	443c      	add	r4, r7
 8000398:	eba4 040e 	sub.w	r4, r4, lr
 800039c:	fa1f fe83 	uxth.w	lr, r3
 80003a0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003a4:	fb09 4413 	mls	r4, r9, r3, r4
 80003a8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003ac:	fb03 fc0c 	mul.w	ip, r3, ip
 80003b0:	45a4      	cmp	ip, r4
 80003b2:	d908      	bls.n	80003c6 <__udivmoddi4+0x1ce>
 80003b4:	193c      	adds	r4, r7, r4
 80003b6:	f103 3eff 	add.w	lr, r3, #4294967295
 80003ba:	f080 8082 	bcs.w	80004c2 <__udivmoddi4+0x2ca>
 80003be:	45a4      	cmp	ip, r4
 80003c0:	d97f      	bls.n	80004c2 <__udivmoddi4+0x2ca>
 80003c2:	3b02      	subs	r3, #2
 80003c4:	443c      	add	r4, r7
 80003c6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003ca:	eba4 040c 	sub.w	r4, r4, ip
 80003ce:	fba0 ec02 	umull	lr, ip, r0, r2
 80003d2:	4564      	cmp	r4, ip
 80003d4:	4673      	mov	r3, lr
 80003d6:	46e1      	mov	r9, ip
 80003d8:	d362      	bcc.n	80004a0 <__udivmoddi4+0x2a8>
 80003da:	d05f      	beq.n	800049c <__udivmoddi4+0x2a4>
 80003dc:	b15d      	cbz	r5, 80003f6 <__udivmoddi4+0x1fe>
 80003de:	ebb8 0203 	subs.w	r2, r8, r3
 80003e2:	eb64 0409 	sbc.w	r4, r4, r9
 80003e6:	fa04 f606 	lsl.w	r6, r4, r6
 80003ea:	fa22 f301 	lsr.w	r3, r2, r1
 80003ee:	431e      	orrs	r6, r3
 80003f0:	40cc      	lsrs	r4, r1
 80003f2:	e9c5 6400 	strd	r6, r4, [r5]
 80003f6:	2100      	movs	r1, #0
 80003f8:	e74f      	b.n	800029a <__udivmoddi4+0xa2>
 80003fa:	fbb1 fcf2 	udiv	ip, r1, r2
 80003fe:	0c01      	lsrs	r1, r0, #16
 8000400:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000404:	b280      	uxth	r0, r0
 8000406:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800040a:	463b      	mov	r3, r7
 800040c:	4638      	mov	r0, r7
 800040e:	463c      	mov	r4, r7
 8000410:	46b8      	mov	r8, r7
 8000412:	46be      	mov	lr, r7
 8000414:	2620      	movs	r6, #32
 8000416:	fbb1 f1f7 	udiv	r1, r1, r7
 800041a:	eba2 0208 	sub.w	r2, r2, r8
 800041e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000422:	e766      	b.n	80002f2 <__udivmoddi4+0xfa>
 8000424:	4601      	mov	r1, r0
 8000426:	e718      	b.n	800025a <__udivmoddi4+0x62>
 8000428:	4610      	mov	r0, r2
 800042a:	e72c      	b.n	8000286 <__udivmoddi4+0x8e>
 800042c:	f1c6 0220 	rsb	r2, r6, #32
 8000430:	fa2e f302 	lsr.w	r3, lr, r2
 8000434:	40b7      	lsls	r7, r6
 8000436:	40b1      	lsls	r1, r6
 8000438:	fa20 f202 	lsr.w	r2, r0, r2
 800043c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000440:	430a      	orrs	r2, r1
 8000442:	fbb3 f8fe 	udiv	r8, r3, lr
 8000446:	b2bc      	uxth	r4, r7
 8000448:	fb0e 3318 	mls	r3, lr, r8, r3
 800044c:	0c11      	lsrs	r1, r2, #16
 800044e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000452:	fb08 f904 	mul.w	r9, r8, r4
 8000456:	40b0      	lsls	r0, r6
 8000458:	4589      	cmp	r9, r1
 800045a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800045e:	b280      	uxth	r0, r0
 8000460:	d93e      	bls.n	80004e0 <__udivmoddi4+0x2e8>
 8000462:	1879      	adds	r1, r7, r1
 8000464:	f108 3cff 	add.w	ip, r8, #4294967295
 8000468:	d201      	bcs.n	800046e <__udivmoddi4+0x276>
 800046a:	4589      	cmp	r9, r1
 800046c:	d81f      	bhi.n	80004ae <__udivmoddi4+0x2b6>
 800046e:	eba1 0109 	sub.w	r1, r1, r9
 8000472:	fbb1 f9fe 	udiv	r9, r1, lr
 8000476:	fb09 f804 	mul.w	r8, r9, r4
 800047a:	fb0e 1119 	mls	r1, lr, r9, r1
 800047e:	b292      	uxth	r2, r2
 8000480:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000484:	4542      	cmp	r2, r8
 8000486:	d229      	bcs.n	80004dc <__udivmoddi4+0x2e4>
 8000488:	18ba      	adds	r2, r7, r2
 800048a:	f109 31ff 	add.w	r1, r9, #4294967295
 800048e:	d2c4      	bcs.n	800041a <__udivmoddi4+0x222>
 8000490:	4542      	cmp	r2, r8
 8000492:	d2c2      	bcs.n	800041a <__udivmoddi4+0x222>
 8000494:	f1a9 0102 	sub.w	r1, r9, #2
 8000498:	443a      	add	r2, r7
 800049a:	e7be      	b.n	800041a <__udivmoddi4+0x222>
 800049c:	45f0      	cmp	r8, lr
 800049e:	d29d      	bcs.n	80003dc <__udivmoddi4+0x1e4>
 80004a0:	ebbe 0302 	subs.w	r3, lr, r2
 80004a4:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004a8:	3801      	subs	r0, #1
 80004aa:	46e1      	mov	r9, ip
 80004ac:	e796      	b.n	80003dc <__udivmoddi4+0x1e4>
 80004ae:	eba7 0909 	sub.w	r9, r7, r9
 80004b2:	4449      	add	r1, r9
 80004b4:	f1a8 0c02 	sub.w	ip, r8, #2
 80004b8:	fbb1 f9fe 	udiv	r9, r1, lr
 80004bc:	fb09 f804 	mul.w	r8, r9, r4
 80004c0:	e7db      	b.n	800047a <__udivmoddi4+0x282>
 80004c2:	4673      	mov	r3, lr
 80004c4:	e77f      	b.n	80003c6 <__udivmoddi4+0x1ce>
 80004c6:	4650      	mov	r0, sl
 80004c8:	e766      	b.n	8000398 <__udivmoddi4+0x1a0>
 80004ca:	4608      	mov	r0, r1
 80004cc:	e6fd      	b.n	80002ca <__udivmoddi4+0xd2>
 80004ce:	443b      	add	r3, r7
 80004d0:	3a02      	subs	r2, #2
 80004d2:	e733      	b.n	800033c <__udivmoddi4+0x144>
 80004d4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004d8:	443b      	add	r3, r7
 80004da:	e71c      	b.n	8000316 <__udivmoddi4+0x11e>
 80004dc:	4649      	mov	r1, r9
 80004de:	e79c      	b.n	800041a <__udivmoddi4+0x222>
 80004e0:	eba1 0109 	sub.w	r1, r1, r9
 80004e4:	46c4      	mov	ip, r8
 80004e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80004ea:	fb09 f804 	mul.w	r8, r9, r4
 80004ee:	e7c4      	b.n	800047a <__udivmoddi4+0x282>

080004f0 <__aeabi_idiv0>:
 80004f0:	4770      	bx	lr
 80004f2:	bf00      	nop

080004f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004f4:	b580      	push	{r7, lr}
 80004f6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004f8:	f000 fefd 	bl	80012f6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004fc:	f000 f812 	bl	8000524 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000500:	f000 f9da 	bl	80008b8 <MX_GPIO_Init>
  MX_DFSDM1_Init();
 8000504:	f000 f870 	bl	80005e8 <MX_DFSDM1_Init>
  MX_I2C2_Init();
 8000508:	f000 f8a6 	bl	8000658 <MX_I2C2_Init>
  MX_QUADSPI_Init();
 800050c:	f000 f8e2 	bl	80006d4 <MX_QUADSPI_Init>
  MX_SPI3_Init();
 8000510:	f000 f906 	bl	8000720 <MX_SPI3_Init>
  MX_USART1_UART_Init();
 8000514:	f000 f942 	bl	800079c <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 8000518:	f000 f970 	bl	80007fc <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 800051c:	f000 f99e 	bl	800085c <MX_USB_OTG_FS_PCD_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000520:	bf00      	nop
 8000522:	e7fd      	b.n	8000520 <main+0x2c>

08000524 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000524:	b580      	push	{r7, lr}
 8000526:	b096      	sub	sp, #88	@ 0x58
 8000528:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800052a:	f107 0314 	add.w	r3, r7, #20
 800052e:	2244      	movs	r2, #68	@ 0x44
 8000530:	2100      	movs	r1, #0
 8000532:	4618      	mov	r0, r3
 8000534:	f004 fa6d 	bl	8004a12 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000538:	463b      	mov	r3, r7
 800053a:	2200      	movs	r2, #0
 800053c:	601a      	str	r2, [r3, #0]
 800053e:	605a      	str	r2, [r3, #4]
 8000540:	609a      	str	r2, [r3, #8]
 8000542:	60da      	str	r2, [r3, #12]
 8000544:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000546:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800054a:	f001 fe03 	bl	8002154 <HAL_PWREx_ControlVoltageScaling>
 800054e:	4603      	mov	r3, r0
 8000550:	2b00      	cmp	r3, #0
 8000552:	d001      	beq.n	8000558 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000554:	f000 fb88 	bl	8000c68 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000558:	f001 fdde 	bl	8002118 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 800055c:	4b21      	ldr	r3, [pc, #132]	@ (80005e4 <SystemClock_Config+0xc0>)
 800055e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8000562:	4a20      	ldr	r2, [pc, #128]	@ (80005e4 <SystemClock_Config+0xc0>)
 8000564:	f023 0318 	bic.w	r3, r3, #24
 8000568:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 800056c:	2314      	movs	r3, #20
 800056e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000570:	2301      	movs	r3, #1
 8000572:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000574:	2301      	movs	r3, #1
 8000576:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000578:	2300      	movs	r3, #0
 800057a:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800057c:	2360      	movs	r3, #96	@ 0x60
 800057e:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000580:	2302      	movs	r3, #2
 8000582:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000584:	2301      	movs	r3, #1
 8000586:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000588:	2301      	movs	r3, #1
 800058a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 800058c:	2328      	movs	r3, #40	@ 0x28
 800058e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000590:	2307      	movs	r3, #7
 8000592:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000594:	2302      	movs	r3, #2
 8000596:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000598:	2302      	movs	r3, #2
 800059a:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800059c:	f107 0314 	add.w	r3, r7, #20
 80005a0:	4618      	mov	r0, r3
 80005a2:	f001 fef9 	bl	8002398 <HAL_RCC_OscConfig>
 80005a6:	4603      	mov	r3, r0
 80005a8:	2b00      	cmp	r3, #0
 80005aa:	d001      	beq.n	80005b0 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 80005ac:	f000 fb5c 	bl	8000c68 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005b0:	230f      	movs	r3, #15
 80005b2:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005b4:	2303      	movs	r3, #3
 80005b6:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005b8:	2300      	movs	r3, #0
 80005ba:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005bc:	2300      	movs	r3, #0
 80005be:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005c0:	2300      	movs	r3, #0
 80005c2:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80005c4:	463b      	mov	r3, r7
 80005c6:	2104      	movs	r1, #4
 80005c8:	4618      	mov	r0, r3
 80005ca:	f002 fac1 	bl	8002b50 <HAL_RCC_ClockConfig>
 80005ce:	4603      	mov	r3, r0
 80005d0:	2b00      	cmp	r3, #0
 80005d2:	d001      	beq.n	80005d8 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 80005d4:	f000 fb48 	bl	8000c68 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 80005d8:	f002 ffc8 	bl	800356c <HAL_RCCEx_EnableMSIPLLMode>
}
 80005dc:	bf00      	nop
 80005de:	3758      	adds	r7, #88	@ 0x58
 80005e0:	46bd      	mov	sp, r7
 80005e2:	bd80      	pop	{r7, pc}
 80005e4:	40021000 	.word	0x40021000

080005e8 <MX_DFSDM1_Init>:
  * @brief DFSDM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DFSDM1_Init(void)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */

  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_channel1.Instance = DFSDM1_Channel1;
 80005ec:	4b18      	ldr	r3, [pc, #96]	@ (8000650 <MX_DFSDM1_Init+0x68>)
 80005ee:	4a19      	ldr	r2, [pc, #100]	@ (8000654 <MX_DFSDM1_Init+0x6c>)
 80005f0:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel1.Init.OutputClock.Activation = ENABLE;
 80005f2:	4b17      	ldr	r3, [pc, #92]	@ (8000650 <MX_DFSDM1_Init+0x68>)
 80005f4:	2201      	movs	r2, #1
 80005f6:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel1.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 80005f8:	4b15      	ldr	r3, [pc, #84]	@ (8000650 <MX_DFSDM1_Init+0x68>)
 80005fa:	2200      	movs	r2, #0
 80005fc:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel1.Init.OutputClock.Divider = 2;
 80005fe:	4b14      	ldr	r3, [pc, #80]	@ (8000650 <MX_DFSDM1_Init+0x68>)
 8000600:	2202      	movs	r2, #2
 8000602:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel1.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 8000604:	4b12      	ldr	r3, [pc, #72]	@ (8000650 <MX_DFSDM1_Init+0x68>)
 8000606:	2200      	movs	r2, #0
 8000608:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel1.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 800060a:	4b11      	ldr	r3, [pc, #68]	@ (8000650 <MX_DFSDM1_Init+0x68>)
 800060c:	2200      	movs	r2, #0
 800060e:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel1.Init.Input.Pins = DFSDM_CHANNEL_FOLLOWING_CHANNEL_PINS;
 8000610:	4b0f      	ldr	r3, [pc, #60]	@ (8000650 <MX_DFSDM1_Init+0x68>)
 8000612:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000616:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel1.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 8000618:	4b0d      	ldr	r3, [pc, #52]	@ (8000650 <MX_DFSDM1_Init+0x68>)
 800061a:	2200      	movs	r2, #0
 800061c:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel1.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 800061e:	4b0c      	ldr	r3, [pc, #48]	@ (8000650 <MX_DFSDM1_Init+0x68>)
 8000620:	2204      	movs	r2, #4
 8000622:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel1.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 8000624:	4b0a      	ldr	r3, [pc, #40]	@ (8000650 <MX_DFSDM1_Init+0x68>)
 8000626:	2200      	movs	r2, #0
 8000628:	625a      	str	r2, [r3, #36]	@ 0x24
  hdfsdm1_channel1.Init.Awd.Oversampling = 1;
 800062a:	4b09      	ldr	r3, [pc, #36]	@ (8000650 <MX_DFSDM1_Init+0x68>)
 800062c:	2201      	movs	r2, #1
 800062e:	629a      	str	r2, [r3, #40]	@ 0x28
  hdfsdm1_channel1.Init.Offset = 0;
 8000630:	4b07      	ldr	r3, [pc, #28]	@ (8000650 <MX_DFSDM1_Init+0x68>)
 8000632:	2200      	movs	r2, #0
 8000634:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdfsdm1_channel1.Init.RightBitShift = 0x00;
 8000636:	4b06      	ldr	r3, [pc, #24]	@ (8000650 <MX_DFSDM1_Init+0x68>)
 8000638:	2200      	movs	r2, #0
 800063a:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel1) != HAL_OK)
 800063c:	4804      	ldr	r0, [pc, #16]	@ (8000650 <MX_DFSDM1_Init+0x68>)
 800063e:	f001 f805 	bl	800164c <HAL_DFSDM_ChannelInit>
 8000642:	4603      	mov	r3, r0
 8000644:	2b00      	cmp	r3, #0
 8000646:	d001      	beq.n	800064c <MX_DFSDM1_Init+0x64>
  {
    Error_Handler();
 8000648:	f000 fb0e 	bl	8000c68 <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM1_Init 2 */

  /* USER CODE END DFSDM1_Init 2 */

}
 800064c:	bf00      	nop
 800064e:	bd80      	pop	{r7, pc}
 8000650:	20000028 	.word	0x20000028
 8000654:	40016020 	.word	0x40016020

08000658 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 800065c:	4b1b      	ldr	r3, [pc, #108]	@ (80006cc <MX_I2C2_Init+0x74>)
 800065e:	4a1c      	ldr	r2, [pc, #112]	@ (80006d0 <MX_I2C2_Init+0x78>)
 8000660:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00000E14;
 8000662:	4b1a      	ldr	r3, [pc, #104]	@ (80006cc <MX_I2C2_Init+0x74>)
 8000664:	f640 6214 	movw	r2, #3604	@ 0xe14
 8000668:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 800066a:	4b18      	ldr	r3, [pc, #96]	@ (80006cc <MX_I2C2_Init+0x74>)
 800066c:	2200      	movs	r2, #0
 800066e:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000670:	4b16      	ldr	r3, [pc, #88]	@ (80006cc <MX_I2C2_Init+0x74>)
 8000672:	2201      	movs	r2, #1
 8000674:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000676:	4b15      	ldr	r3, [pc, #84]	@ (80006cc <MX_I2C2_Init+0x74>)
 8000678:	2200      	movs	r2, #0
 800067a:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 800067c:	4b13      	ldr	r3, [pc, #76]	@ (80006cc <MX_I2C2_Init+0x74>)
 800067e:	2200      	movs	r2, #0
 8000680:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000682:	4b12      	ldr	r3, [pc, #72]	@ (80006cc <MX_I2C2_Init+0x74>)
 8000684:	2200      	movs	r2, #0
 8000686:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000688:	4b10      	ldr	r3, [pc, #64]	@ (80006cc <MX_I2C2_Init+0x74>)
 800068a:	2200      	movs	r2, #0
 800068c:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800068e:	4b0f      	ldr	r3, [pc, #60]	@ (80006cc <MX_I2C2_Init+0x74>)
 8000690:	2200      	movs	r2, #0
 8000692:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000694:	480d      	ldr	r0, [pc, #52]	@ (80006cc <MX_I2C2_Init+0x74>)
 8000696:	f001 fad9 	bl	8001c4c <HAL_I2C_Init>
 800069a:	4603      	mov	r3, r0
 800069c:	2b00      	cmp	r3, #0
 800069e:	d001      	beq.n	80006a4 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80006a0:	f000 fae2 	bl	8000c68 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80006a4:	2100      	movs	r1, #0
 80006a6:	4809      	ldr	r0, [pc, #36]	@ (80006cc <MX_I2C2_Init+0x74>)
 80006a8:	f001 fb6b 	bl	8001d82 <HAL_I2CEx_ConfigAnalogFilter>
 80006ac:	4603      	mov	r3, r0
 80006ae:	2b00      	cmp	r3, #0
 80006b0:	d001      	beq.n	80006b6 <MX_I2C2_Init+0x5e>
  {
    Error_Handler();
 80006b2:	f000 fad9 	bl	8000c68 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80006b6:	2100      	movs	r1, #0
 80006b8:	4804      	ldr	r0, [pc, #16]	@ (80006cc <MX_I2C2_Init+0x74>)
 80006ba:	f001 fbad 	bl	8001e18 <HAL_I2CEx_ConfigDigitalFilter>
 80006be:	4603      	mov	r3, r0
 80006c0:	2b00      	cmp	r3, #0
 80006c2:	d001      	beq.n	80006c8 <MX_I2C2_Init+0x70>
  {
    Error_Handler();
 80006c4:	f000 fad0 	bl	8000c68 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80006c8:	bf00      	nop
 80006ca:	bd80      	pop	{r7, pc}
 80006cc:	20000060 	.word	0x20000060
 80006d0:	40005800 	.word	0x40005800

080006d4 <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 80006d8:	4b0f      	ldr	r3, [pc, #60]	@ (8000718 <MX_QUADSPI_Init+0x44>)
 80006da:	4a10      	ldr	r2, [pc, #64]	@ (800071c <MX_QUADSPI_Init+0x48>)
 80006dc:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 2;
 80006de:	4b0e      	ldr	r3, [pc, #56]	@ (8000718 <MX_QUADSPI_Init+0x44>)
 80006e0:	2202      	movs	r2, #2
 80006e2:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 4;
 80006e4:	4b0c      	ldr	r3, [pc, #48]	@ (8000718 <MX_QUADSPI_Init+0x44>)
 80006e6:	2204      	movs	r2, #4
 80006e8:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 80006ea:	4b0b      	ldr	r3, [pc, #44]	@ (8000718 <MX_QUADSPI_Init+0x44>)
 80006ec:	2210      	movs	r2, #16
 80006ee:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 23;
 80006f0:	4b09      	ldr	r3, [pc, #36]	@ (8000718 <MX_QUADSPI_Init+0x44>)
 80006f2:	2217      	movs	r2, #23
 80006f4:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 80006f6:	4b08      	ldr	r3, [pc, #32]	@ (8000718 <MX_QUADSPI_Init+0x44>)
 80006f8:	2200      	movs	r2, #0
 80006fa:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 80006fc:	4b06      	ldr	r3, [pc, #24]	@ (8000718 <MX_QUADSPI_Init+0x44>)
 80006fe:	2200      	movs	r2, #0
 8000700:	619a      	str	r2, [r3, #24]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8000702:	4805      	ldr	r0, [pc, #20]	@ (8000718 <MX_QUADSPI_Init+0x44>)
 8000704:	f001 fd8c 	bl	8002220 <HAL_QSPI_Init>
 8000708:	4603      	mov	r3, r0
 800070a:	2b00      	cmp	r3, #0
 800070c:	d001      	beq.n	8000712 <MX_QUADSPI_Init+0x3e>
  {
    Error_Handler();
 800070e:	f000 faab 	bl	8000c68 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 8000712:	bf00      	nop
 8000714:	bd80      	pop	{r7, pc}
 8000716:	bf00      	nop
 8000718:	200000b4 	.word	0x200000b4
 800071c:	a0001000 	.word	0xa0001000

08000720 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8000724:	4b1b      	ldr	r3, [pc, #108]	@ (8000794 <MX_SPI3_Init+0x74>)
 8000726:	4a1c      	ldr	r2, [pc, #112]	@ (8000798 <MX_SPI3_Init+0x78>)
 8000728:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800072a:	4b1a      	ldr	r3, [pc, #104]	@ (8000794 <MX_SPI3_Init+0x74>)
 800072c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000730:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8000732:	4b18      	ldr	r3, [pc, #96]	@ (8000794 <MX_SPI3_Init+0x74>)
 8000734:	2200      	movs	r2, #0
 8000736:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 8000738:	4b16      	ldr	r3, [pc, #88]	@ (8000794 <MX_SPI3_Init+0x74>)
 800073a:	f44f 7240 	mov.w	r2, #768	@ 0x300
 800073e:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000740:	4b14      	ldr	r3, [pc, #80]	@ (8000794 <MX_SPI3_Init+0x74>)
 8000742:	2200      	movs	r2, #0
 8000744:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000746:	4b13      	ldr	r3, [pc, #76]	@ (8000794 <MX_SPI3_Init+0x74>)
 8000748:	2200      	movs	r2, #0
 800074a:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 800074c:	4b11      	ldr	r3, [pc, #68]	@ (8000794 <MX_SPI3_Init+0x74>)
 800074e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000752:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000754:	4b0f      	ldr	r3, [pc, #60]	@ (8000794 <MX_SPI3_Init+0x74>)
 8000756:	2200      	movs	r2, #0
 8000758:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800075a:	4b0e      	ldr	r3, [pc, #56]	@ (8000794 <MX_SPI3_Init+0x74>)
 800075c:	2200      	movs	r2, #0
 800075e:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000760:	4b0c      	ldr	r3, [pc, #48]	@ (8000794 <MX_SPI3_Init+0x74>)
 8000762:	2200      	movs	r2, #0
 8000764:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000766:	4b0b      	ldr	r3, [pc, #44]	@ (8000794 <MX_SPI3_Init+0x74>)
 8000768:	2200      	movs	r2, #0
 800076a:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 7;
 800076c:	4b09      	ldr	r3, [pc, #36]	@ (8000794 <MX_SPI3_Init+0x74>)
 800076e:	2207      	movs	r2, #7
 8000770:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000772:	4b08      	ldr	r3, [pc, #32]	@ (8000794 <MX_SPI3_Init+0x74>)
 8000774:	2200      	movs	r2, #0
 8000776:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000778:	4b06      	ldr	r3, [pc, #24]	@ (8000794 <MX_SPI3_Init+0x74>)
 800077a:	2208      	movs	r2, #8
 800077c:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 800077e:	4805      	ldr	r0, [pc, #20]	@ (8000794 <MX_SPI3_Init+0x74>)
 8000780:	f003 f8d6 	bl	8003930 <HAL_SPI_Init>
 8000784:	4603      	mov	r3, r0
 8000786:	2b00      	cmp	r3, #0
 8000788:	d001      	beq.n	800078e <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 800078a:	f000 fa6d 	bl	8000c68 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 800078e:	bf00      	nop
 8000790:	bd80      	pop	{r7, pc}
 8000792:	bf00      	nop
 8000794:	200000f8 	.word	0x200000f8
 8000798:	40003c00 	.word	0x40003c00

0800079c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80007a0:	4b14      	ldr	r3, [pc, #80]	@ (80007f4 <MX_USART1_UART_Init+0x58>)
 80007a2:	4a15      	ldr	r2, [pc, #84]	@ (80007f8 <MX_USART1_UART_Init+0x5c>)
 80007a4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80007a6:	4b13      	ldr	r3, [pc, #76]	@ (80007f4 <MX_USART1_UART_Init+0x58>)
 80007a8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80007ac:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80007ae:	4b11      	ldr	r3, [pc, #68]	@ (80007f4 <MX_USART1_UART_Init+0x58>)
 80007b0:	2200      	movs	r2, #0
 80007b2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80007b4:	4b0f      	ldr	r3, [pc, #60]	@ (80007f4 <MX_USART1_UART_Init+0x58>)
 80007b6:	2200      	movs	r2, #0
 80007b8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80007ba:	4b0e      	ldr	r3, [pc, #56]	@ (80007f4 <MX_USART1_UART_Init+0x58>)
 80007bc:	2200      	movs	r2, #0
 80007be:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80007c0:	4b0c      	ldr	r3, [pc, #48]	@ (80007f4 <MX_USART1_UART_Init+0x58>)
 80007c2:	220c      	movs	r2, #12
 80007c4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007c6:	4b0b      	ldr	r3, [pc, #44]	@ (80007f4 <MX_USART1_UART_Init+0x58>)
 80007c8:	2200      	movs	r2, #0
 80007ca:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80007cc:	4b09      	ldr	r3, [pc, #36]	@ (80007f4 <MX_USART1_UART_Init+0x58>)
 80007ce:	2200      	movs	r2, #0
 80007d0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80007d2:	4b08      	ldr	r3, [pc, #32]	@ (80007f4 <MX_USART1_UART_Init+0x58>)
 80007d4:	2200      	movs	r2, #0
 80007d6:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80007d8:	4b06      	ldr	r3, [pc, #24]	@ (80007f4 <MX_USART1_UART_Init+0x58>)
 80007da:	2200      	movs	r2, #0
 80007dc:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80007de:	4805      	ldr	r0, [pc, #20]	@ (80007f4 <MX_USART1_UART_Init+0x58>)
 80007e0:	f003 f949 	bl	8003a76 <HAL_UART_Init>
 80007e4:	4603      	mov	r3, r0
 80007e6:	2b00      	cmp	r3, #0
 80007e8:	d001      	beq.n	80007ee <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80007ea:	f000 fa3d 	bl	8000c68 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80007ee:	bf00      	nop
 80007f0:	bd80      	pop	{r7, pc}
 80007f2:	bf00      	nop
 80007f4:	2000015c 	.word	0x2000015c
 80007f8:	40013800 	.word	0x40013800

080007fc <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000800:	4b14      	ldr	r3, [pc, #80]	@ (8000854 <MX_USART3_UART_Init+0x58>)
 8000802:	4a15      	ldr	r2, [pc, #84]	@ (8000858 <MX_USART3_UART_Init+0x5c>)
 8000804:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000806:	4b13      	ldr	r3, [pc, #76]	@ (8000854 <MX_USART3_UART_Init+0x58>)
 8000808:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800080c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800080e:	4b11      	ldr	r3, [pc, #68]	@ (8000854 <MX_USART3_UART_Init+0x58>)
 8000810:	2200      	movs	r2, #0
 8000812:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000814:	4b0f      	ldr	r3, [pc, #60]	@ (8000854 <MX_USART3_UART_Init+0x58>)
 8000816:	2200      	movs	r2, #0
 8000818:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800081a:	4b0e      	ldr	r3, [pc, #56]	@ (8000854 <MX_USART3_UART_Init+0x58>)
 800081c:	2200      	movs	r2, #0
 800081e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000820:	4b0c      	ldr	r3, [pc, #48]	@ (8000854 <MX_USART3_UART_Init+0x58>)
 8000822:	220c      	movs	r2, #12
 8000824:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000826:	4b0b      	ldr	r3, [pc, #44]	@ (8000854 <MX_USART3_UART_Init+0x58>)
 8000828:	2200      	movs	r2, #0
 800082a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800082c:	4b09      	ldr	r3, [pc, #36]	@ (8000854 <MX_USART3_UART_Init+0x58>)
 800082e:	2200      	movs	r2, #0
 8000830:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000832:	4b08      	ldr	r3, [pc, #32]	@ (8000854 <MX_USART3_UART_Init+0x58>)
 8000834:	2200      	movs	r2, #0
 8000836:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000838:	4b06      	ldr	r3, [pc, #24]	@ (8000854 <MX_USART3_UART_Init+0x58>)
 800083a:	2200      	movs	r2, #0
 800083c:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800083e:	4805      	ldr	r0, [pc, #20]	@ (8000854 <MX_USART3_UART_Init+0x58>)
 8000840:	f003 f919 	bl	8003a76 <HAL_UART_Init>
 8000844:	4603      	mov	r3, r0
 8000846:	2b00      	cmp	r3, #0
 8000848:	d001      	beq.n	800084e <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 800084a:	f000 fa0d 	bl	8000c68 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800084e:	bf00      	nop
 8000850:	bd80      	pop	{r7, pc}
 8000852:	bf00      	nop
 8000854:	200001e4 	.word	0x200001e4
 8000858:	40004800 	.word	0x40004800

0800085c <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000860:	4b14      	ldr	r3, [pc, #80]	@ (80008b4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000862:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8000866:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000868:	4b12      	ldr	r3, [pc, #72]	@ (80008b4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800086a:	2206      	movs	r2, #6
 800086c:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800086e:	4b11      	ldr	r3, [pc, #68]	@ (80008b4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000870:	2202      	movs	r2, #2
 8000872:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000874:	4b0f      	ldr	r3, [pc, #60]	@ (80008b4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000876:	2202      	movs	r2, #2
 8000878:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800087a:	4b0e      	ldr	r3, [pc, #56]	@ (80008b4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800087c:	2200      	movs	r2, #0
 800087e:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000880:	4b0c      	ldr	r3, [pc, #48]	@ (80008b4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000882:	2200      	movs	r2, #0
 8000884:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000886:	4b0b      	ldr	r3, [pc, #44]	@ (80008b4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000888:	2200      	movs	r2, #0
 800088a:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 800088c:	4b09      	ldr	r3, [pc, #36]	@ (80008b4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800088e:	2200      	movs	r2, #0
 8000890:	735a      	strb	r2, [r3, #13]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000892:	4b08      	ldr	r3, [pc, #32]	@ (80008b4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000894:	2200      	movs	r2, #0
 8000896:	73da      	strb	r2, [r3, #15]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8000898:	4b06      	ldr	r3, [pc, #24]	@ (80008b4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800089a:	2200      	movs	r2, #0
 800089c:	739a      	strb	r2, [r3, #14]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800089e:	4805      	ldr	r0, [pc, #20]	@ (80008b4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008a0:	f001 fb06 	bl	8001eb0 <HAL_PCD_Init>
 80008a4:	4603      	mov	r3, r0
 80008a6:	2b00      	cmp	r3, #0
 80008a8:	d001      	beq.n	80008ae <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 80008aa:	f000 f9dd 	bl	8000c68 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80008ae:	bf00      	nop
 80008b0:	bd80      	pop	{r7, pc}
 80008b2:	bf00      	nop
 80008b4:	2000026c 	.word	0x2000026c

080008b8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	b08a      	sub	sp, #40	@ 0x28
 80008bc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008be:	f107 0314 	add.w	r3, r7, #20
 80008c2:	2200      	movs	r2, #0
 80008c4:	601a      	str	r2, [r3, #0]
 80008c6:	605a      	str	r2, [r3, #4]
 80008c8:	609a      	str	r2, [r3, #8]
 80008ca:	60da      	str	r2, [r3, #12]
 80008cc:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80008ce:	4bbd      	ldr	r3, [pc, #756]	@ (8000bc4 <MX_GPIO_Init+0x30c>)
 80008d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008d2:	4abc      	ldr	r2, [pc, #752]	@ (8000bc4 <MX_GPIO_Init+0x30c>)
 80008d4:	f043 0310 	orr.w	r3, r3, #16
 80008d8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80008da:	4bba      	ldr	r3, [pc, #744]	@ (8000bc4 <MX_GPIO_Init+0x30c>)
 80008dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008de:	f003 0310 	and.w	r3, r3, #16
 80008e2:	613b      	str	r3, [r7, #16]
 80008e4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008e6:	4bb7      	ldr	r3, [pc, #732]	@ (8000bc4 <MX_GPIO_Init+0x30c>)
 80008e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008ea:	4ab6      	ldr	r2, [pc, #728]	@ (8000bc4 <MX_GPIO_Init+0x30c>)
 80008ec:	f043 0304 	orr.w	r3, r3, #4
 80008f0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80008f2:	4bb4      	ldr	r3, [pc, #720]	@ (8000bc4 <MX_GPIO_Init+0x30c>)
 80008f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008f6:	f003 0304 	and.w	r3, r3, #4
 80008fa:	60fb      	str	r3, [r7, #12]
 80008fc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008fe:	4bb1      	ldr	r3, [pc, #708]	@ (8000bc4 <MX_GPIO_Init+0x30c>)
 8000900:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000902:	4ab0      	ldr	r2, [pc, #704]	@ (8000bc4 <MX_GPIO_Init+0x30c>)
 8000904:	f043 0301 	orr.w	r3, r3, #1
 8000908:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800090a:	4bae      	ldr	r3, [pc, #696]	@ (8000bc4 <MX_GPIO_Init+0x30c>)
 800090c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800090e:	f003 0301 	and.w	r3, r3, #1
 8000912:	60bb      	str	r3, [r7, #8]
 8000914:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000916:	4bab      	ldr	r3, [pc, #684]	@ (8000bc4 <MX_GPIO_Init+0x30c>)
 8000918:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800091a:	4aaa      	ldr	r2, [pc, #680]	@ (8000bc4 <MX_GPIO_Init+0x30c>)
 800091c:	f043 0302 	orr.w	r3, r3, #2
 8000920:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000922:	4ba8      	ldr	r3, [pc, #672]	@ (8000bc4 <MX_GPIO_Init+0x30c>)
 8000924:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000926:	f003 0302 	and.w	r3, r3, #2
 800092a:	607b      	str	r3, [r7, #4]
 800092c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800092e:	4ba5      	ldr	r3, [pc, #660]	@ (8000bc4 <MX_GPIO_Init+0x30c>)
 8000930:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000932:	4aa4      	ldr	r2, [pc, #656]	@ (8000bc4 <MX_GPIO_Init+0x30c>)
 8000934:	f043 0308 	orr.w	r3, r3, #8
 8000938:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800093a:	4ba2      	ldr	r3, [pc, #648]	@ (8000bc4 <MX_GPIO_Init+0x30c>)
 800093c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800093e:	f003 0308 	and.w	r3, r3, #8
 8000942:	603b      	str	r3, [r7, #0]
 8000944:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin, GPIO_PIN_RESET);
 8000946:	2200      	movs	r2, #0
 8000948:	f44f 718a 	mov.w	r1, #276	@ 0x114
 800094c:	489e      	ldr	r0, [pc, #632]	@ (8000bc8 <MX_GPIO_Init+0x310>)
 800094e:	f001 f933 	bl	8001bb8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ARD_D10_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin, GPIO_PIN_RESET);
 8000952:	2200      	movs	r2, #0
 8000954:	f248 1104 	movw	r1, #33028	@ 0x8104
 8000958:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800095c:	f001 f92c 	bl	8001bb8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 8000960:	2200      	movs	r2, #0
 8000962:	f24f 0114 	movw	r1, #61460	@ 0xf014
 8000966:	4899      	ldr	r0, [pc, #612]	@ (8000bcc <MX_GPIO_Init+0x314>)
 8000968:	f001 f926 	bl	8001bb8 <HAL_GPIO_WritePin>
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, USB_OTG_FS_PWR_EN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin, GPIO_PIN_RESET);
 800096c:	2200      	movs	r2, #0
 800096e:	f241 0181 	movw	r1, #4225	@ 0x1081
 8000972:	4897      	ldr	r0, [pc, #604]	@ (8000bd0 <MX_GPIO_Init+0x318>)
 8000974:	f001 f920 	bl	8001bb8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPBTLE_RF_SPI3_CSN_GPIO_Port, SPBTLE_RF_SPI3_CSN_Pin, GPIO_PIN_SET);
 8000978:	2201      	movs	r2, #1
 800097a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800097e:	4894      	ldr	r0, [pc, #592]	@ (8000bd0 <MX_GPIO_Init+0x318>)
 8000980:	f001 f91a 	bl	8001bb8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin, GPIO_PIN_RESET);
 8000984:	2200      	movs	r2, #0
 8000986:	f44f 7110 	mov.w	r1, #576	@ 0x240
 800098a:	4892      	ldr	r0, [pc, #584]	@ (8000bd4 <MX_GPIO_Init+0x31c>)
 800098c:	f001 f914 	bl	8001bb8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPSGRF_915_SPI3_CSN_GPIO_Port, SPSGRF_915_SPI3_CSN_Pin, GPIO_PIN_SET);
 8000990:	2201      	movs	r2, #1
 8000992:	2120      	movs	r1, #32
 8000994:	488d      	ldr	r0, [pc, #564]	@ (8000bcc <MX_GPIO_Init+0x314>)
 8000996:	f001 f90f 	bl	8001bb8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ISM43362_SPI3_CSN_GPIO_Port, ISM43362_SPI3_CSN_Pin, GPIO_PIN_SET);
 800099a:	2201      	movs	r2, #1
 800099c:	2101      	movs	r1, #1
 800099e:	488a      	ldr	r0, [pc, #552]	@ (8000bc8 <MX_GPIO_Init+0x310>)
 80009a0:	f001 f90a 	bl	8001bb8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : M24SR64_Y_RF_DISABLE_Pin M24SR64_Y_GPO_Pin ISM43362_RST_Pin ISM43362_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin|ISM43362_SPI3_CSN_Pin;
 80009a4:	f240 1315 	movw	r3, #277	@ 0x115
 80009a8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009aa:	2301      	movs	r3, #1
 80009ac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ae:	2300      	movs	r3, #0
 80009b0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009b2:	2300      	movs	r3, #0
 80009b4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80009b6:	f107 0314 	add.w	r3, r7, #20
 80009ba:	4619      	mov	r1, r3
 80009bc:	4882      	ldr	r0, [pc, #520]	@ (8000bc8 <MX_GPIO_Init+0x310>)
 80009be:	f000 ff51 	bl	8001864 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_OVRCR_EXTI3_Pin SPSGRF_915_GPIO3_EXTI5_Pin SPBTLE_RF_IRQ_EXTI6_Pin ISM43362_DRDY_EXTI1_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVRCR_EXTI3_Pin|SPSGRF_915_GPIO3_EXTI5_Pin|SPBTLE_RF_IRQ_EXTI6_Pin|ISM43362_DRDY_EXTI1_Pin;
 80009c2:	236a      	movs	r3, #106	@ 0x6a
 80009c4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80009c6:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80009ca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009cc:	2300      	movs	r3, #0
 80009ce:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80009d0:	f107 0314 	add.w	r3, r7, #20
 80009d4:	4619      	mov	r1, r3
 80009d6:	487c      	ldr	r0, [pc, #496]	@ (8000bc8 <MX_GPIO_Init+0x310>)
 80009d8:	f000 ff44 	bl	8001864 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_EXTI13_Pin */
  GPIO_InitStruct.Pin = BUTTON_EXTI13_Pin;
 80009dc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80009e0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80009e2:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80009e6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e8:	2300      	movs	r3, #0
 80009ea:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BUTTON_EXTI13_GPIO_Port, &GPIO_InitStruct);
 80009ec:	f107 0314 	add.w	r3, r7, #20
 80009f0:	4619      	mov	r1, r3
 80009f2:	4878      	ldr	r0, [pc, #480]	@ (8000bd4 <MX_GPIO_Init+0x31c>)
 80009f4:	f000 ff36 	bl	8001864 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_A5_Pin ARD_A4_Pin ARD_A3_Pin ARD_A2_Pin
                           ARD_A1_Pin ARD_A0_Pin */
  GPIO_InitStruct.Pin = ARD_A5_Pin|ARD_A4_Pin|ARD_A3_Pin|ARD_A2_Pin
 80009f8:	233f      	movs	r3, #63	@ 0x3f
 80009fa:	617b      	str	r3, [r7, #20]
                          |ARD_A1_Pin|ARD_A0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80009fc:	230b      	movs	r3, #11
 80009fe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a00:	2300      	movs	r3, #0
 8000a02:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a04:	f107 0314 	add.w	r3, r7, #20
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4872      	ldr	r0, [pc, #456]	@ (8000bd4 <MX_GPIO_Init+0x31c>)
 8000a0c:	f000 ff2a 	bl	8001864 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D1_Pin ARD_D0_Pin */
  GPIO_InitStruct.Pin = ARD_D1_Pin|ARD_D0_Pin;
 8000a10:	2303      	movs	r3, #3
 8000a12:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a14:	2302      	movs	r3, #2
 8000a16:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a18:	2300      	movs	r3, #0
 8000a1a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a1c:	2303      	movs	r3, #3
 8000a1e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8000a20:	2308      	movs	r3, #8
 8000a22:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a24:	f107 0314 	add.w	r3, r7, #20
 8000a28:	4619      	mov	r1, r3
 8000a2a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a2e:	f000 ff19 	bl	8001864 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D10_Pin SPBTLE_RF_RST_Pin ARD_D9_Pin */
  GPIO_InitStruct.Pin = ARD_D10_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin;
 8000a32:	f248 1304 	movw	r3, #33028	@ 0x8104
 8000a36:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a38:	2301      	movs	r3, #1
 8000a3a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a40:	2300      	movs	r3, #0
 8000a42:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a44:	f107 0314 	add.w	r3, r7, #20
 8000a48:	4619      	mov	r1, r3
 8000a4a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a4e:	f000 ff09 	bl	8001864 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D4_Pin */
  GPIO_InitStruct.Pin = ARD_D4_Pin;
 8000a52:	2308      	movs	r3, #8
 8000a54:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a56:	2302      	movs	r3, #2
 8000a58:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a5e:	2300      	movs	r3, #0
 8000a60:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000a62:	2301      	movs	r3, #1
 8000a64:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(ARD_D4_GPIO_Port, &GPIO_InitStruct);
 8000a66:	f107 0314 	add.w	r3, r7, #20
 8000a6a:	4619      	mov	r1, r3
 8000a6c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a70:	f000 fef8 	bl	8001864 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D7_Pin */
  GPIO_InitStruct.Pin = ARD_D7_Pin;
 8000a74:	2310      	movs	r3, #16
 8000a76:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000a78:	230b      	movs	r3, #11
 8000a7a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D7_GPIO_Port, &GPIO_InitStruct);
 8000a80:	f107 0314 	add.w	r3, r7, #20
 8000a84:	4619      	mov	r1, r3
 8000a86:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a8a:	f000 feeb 	bl	8001864 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D13_Pin ARD_D12_Pin ARD_D11_Pin */
  GPIO_InitStruct.Pin = ARD_D13_Pin|ARD_D12_Pin|ARD_D11_Pin;
 8000a8e:	23e0      	movs	r3, #224	@ 0xe0
 8000a90:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a92:	2302      	movs	r3, #2
 8000a94:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a96:	2300      	movs	r3, #0
 8000a98:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a9a:	2303      	movs	r3, #3
 8000a9c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000a9e:	2305      	movs	r3, #5
 8000aa0:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000aa2:	f107 0314 	add.w	r3, r7, #20
 8000aa6:	4619      	mov	r1, r3
 8000aa8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000aac:	f000 feda 	bl	8001864 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D3_Pin */
  GPIO_InitStruct.Pin = ARD_D3_Pin;
 8000ab0:	2301      	movs	r3, #1
 8000ab2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000ab4:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000ab8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aba:	2300      	movs	r3, #0
 8000abc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D3_GPIO_Port, &GPIO_InitStruct);
 8000abe:	f107 0314 	add.w	r3, r7, #20
 8000ac2:	4619      	mov	r1, r3
 8000ac4:	4841      	ldr	r0, [pc, #260]	@ (8000bcc <MX_GPIO_Init+0x314>)
 8000ac6:	f000 fecd 	bl	8001864 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D6_Pin */
  GPIO_InitStruct.Pin = ARD_D6_Pin;
 8000aca:	2302      	movs	r3, #2
 8000acc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000ace:	230b      	movs	r3, #11
 8000ad0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D6_GPIO_Port, &GPIO_InitStruct);
 8000ad6:	f107 0314 	add.w	r3, r7, #20
 8000ada:	4619      	mov	r1, r3
 8000adc:	483b      	ldr	r0, [pc, #236]	@ (8000bcc <MX_GPIO_Init+0x314>)
 8000ade:	f000 fec1 	bl	8001864 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D8_Pin ISM43362_BOOT0_Pin ISM43362_WAKEUP_Pin LED2_Pin
                           SPSGRF_915_SDN_Pin ARD_D5_Pin SPSGRF_915_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 8000ae2:	f24f 0334 	movw	r3, #61492	@ 0xf034
 8000ae6:	617b      	str	r3, [r7, #20]
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin|SPSGRF_915_SPI3_CSN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ae8:	2301      	movs	r3, #1
 8000aea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aec:	2300      	movs	r3, #0
 8000aee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000af0:	2300      	movs	r3, #0
 8000af2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000af4:	f107 0314 	add.w	r3, r7, #20
 8000af8:	4619      	mov	r1, r3
 8000afa:	4834      	ldr	r0, [pc, #208]	@ (8000bcc <MX_GPIO_Init+0x314>)
 8000afc:	f000 feb2 	bl	8001864 <HAL_GPIO_Init>

  /*Configure GPIO pins : LPS22HB_INT_DRDY_EXTI0_Pin LSM6DSL_INT1_EXTI11_Pin ARD_D2_Pin HTS221_DRDY_EXTI15_Pin
                           PMOD_IRQ_EXTI12_Pin */
  GPIO_InitStruct.Pin = LPS22HB_INT_DRDY_EXTI0_Pin|LSM6DSL_INT1_EXTI11_Pin|ARD_D2_Pin|HTS221_DRDY_EXTI15_Pin
 8000b00:	f64c 4304 	movw	r3, #52228	@ 0xcc04
 8000b04:	617b      	str	r3, [r7, #20]
                          |PMOD_IRQ_EXTI12_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000b06:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000b0a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b10:	f107 0314 	add.w	r3, r7, #20
 8000b14:	4619      	mov	r1, r3
 8000b16:	482e      	ldr	r0, [pc, #184]	@ (8000bd0 <MX_GPIO_Init+0x318>)
 8000b18:	f000 fea4 	bl	8001864 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_PWR_EN_Pin SPBTLE_RF_SPI3_CSN_Pin PMOD_RESET_Pin STSAFE_A100_RESET_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin|SPBTLE_RF_SPI3_CSN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin;
 8000b1c:	f243 0381 	movw	r3, #12417	@ 0x3081
 8000b20:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b22:	2301      	movs	r3, #1
 8000b24:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b26:	2300      	movs	r3, #0
 8000b28:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b2e:	f107 0314 	add.w	r3, r7, #20
 8000b32:	4619      	mov	r1, r3
 8000b34:	4826      	ldr	r0, [pc, #152]	@ (8000bd0 <MX_GPIO_Init+0x318>)
 8000b36:	f000 fe95 	bl	8001864 <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_XSHUT_Pin LED3_WIFI__LED4_BLE_Pin */
  GPIO_InitStruct.Pin = VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin;
 8000b3a:	f44f 7310 	mov.w	r3, #576	@ 0x240
 8000b3e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b40:	2301      	movs	r3, #1
 8000b42:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b44:	2300      	movs	r3, #0
 8000b46:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b48:	2300      	movs	r3, #0
 8000b4a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b4c:	f107 0314 	add.w	r3, r7, #20
 8000b50:	4619      	mov	r1, r3
 8000b52:	4820      	ldr	r0, [pc, #128]	@ (8000bd4 <MX_GPIO_Init+0x31c>)
 8000b54:	f000 fe86 	bl	8001864 <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_GPIO1_EXTI7_Pin LSM3MDL_DRDY_EXTI8_Pin */
  GPIO_InitStruct.Pin = VL53L0X_GPIO1_EXTI7_Pin|LSM3MDL_DRDY_EXTI8_Pin;
 8000b58:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8000b5c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000b5e:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000b62:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b64:	2300      	movs	r3, #0
 8000b66:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b68:	f107 0314 	add.w	r3, r7, #20
 8000b6c:	4619      	mov	r1, r3
 8000b6e:	4819      	ldr	r0, [pc, #100]	@ (8000bd4 <MX_GPIO_Init+0x31c>)
 8000b70:	f000 fe78 	bl	8001864 <HAL_GPIO_Init>

  /*Configure GPIO pin : PMOD_SPI2_SCK_Pin */
  GPIO_InitStruct.Pin = PMOD_SPI2_SCK_Pin;
 8000b74:	2302      	movs	r3, #2
 8000b76:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b78:	2302      	movs	r3, #2
 8000b7a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b80:	2303      	movs	r3, #3
 8000b82:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000b84:	2305      	movs	r3, #5
 8000b86:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(PMOD_SPI2_SCK_GPIO_Port, &GPIO_InitStruct);
 8000b88:	f107 0314 	add.w	r3, r7, #20
 8000b8c:	4619      	mov	r1, r3
 8000b8e:	4810      	ldr	r0, [pc, #64]	@ (8000bd0 <MX_GPIO_Init+0x318>)
 8000b90:	f000 fe68 	bl	8001864 <HAL_GPIO_Init>

  /*Configure GPIO pins : PMOD_UART2_CTS_Pin PMOD_UART2_RTS_Pin PMOD_UART2_TX_Pin PMOD_UART2_RX_Pin */
  GPIO_InitStruct.Pin = PMOD_UART2_CTS_Pin|PMOD_UART2_RTS_Pin|PMOD_UART2_TX_Pin|PMOD_UART2_RX_Pin;
 8000b94:	2378      	movs	r3, #120	@ 0x78
 8000b96:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b98:	2302      	movs	r3, #2
 8000b9a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ba0:	2303      	movs	r3, #3
 8000ba2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000ba4:	2307      	movs	r3, #7
 8000ba6:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ba8:	f107 0314 	add.w	r3, r7, #20
 8000bac:	4619      	mov	r1, r3
 8000bae:	4808      	ldr	r0, [pc, #32]	@ (8000bd0 <MX_GPIO_Init+0x318>)
 8000bb0:	f000 fe58 	bl	8001864 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D15_Pin ARD_D14_Pin */
  GPIO_InitStruct.Pin = ARD_D15_Pin|ARD_D14_Pin;
 8000bb4:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000bb8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000bba:	2312      	movs	r3, #18
 8000bbc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	e00a      	b.n	8000bd8 <MX_GPIO_Init+0x320>
 8000bc2:	bf00      	nop
 8000bc4:	40021000 	.word	0x40021000
 8000bc8:	48001000 	.word	0x48001000
 8000bcc:	48000400 	.word	0x48000400
 8000bd0:	48000c00 	.word	0x48000c00
 8000bd4:	48000800 	.word	0x48000800
 8000bd8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bda:	2303      	movs	r3, #3
 8000bdc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000bde:	2304      	movs	r3, #4
 8000be0:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000be2:	f107 0314 	add.w	r3, r7, #20
 8000be6:	4619      	mov	r1, r3
 8000be8:	480b      	ldr	r0, [pc, #44]	@ (8000c18 <MX_GPIO_Init+0x360>)
 8000bea:	f000 fe3b 	bl	8001864 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000bee:	2200      	movs	r2, #0
 8000bf0:	2100      	movs	r1, #0
 8000bf2:	2017      	movs	r0, #23
 8000bf4:	f000 fcf3 	bl	80015de <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000bf8:	2017      	movs	r0, #23
 8000bfa:	f000 fd0c 	bl	8001616 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000bfe:	2200      	movs	r2, #0
 8000c00:	2100      	movs	r1, #0
 8000c02:	2028      	movs	r0, #40	@ 0x28
 8000c04:	f000 fceb 	bl	80015de <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000c08:	2028      	movs	r0, #40	@ 0x28
 8000c0a:	f000 fd04 	bl	8001616 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000c0e:	bf00      	nop
 8000c10:	3728      	adds	r7, #40	@ 0x28
 8000c12:	46bd      	mov	sp, r7
 8000c14:	bd80      	pop	{r7, pc}
 8000c16:	bf00      	nop
 8000c18:	48000400 	.word	0x48000400

08000c1c <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	b082      	sub	sp, #8
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	4603      	mov	r3, r0
 8000c24:	80fb      	strh	r3, [r7, #6]
	switch(GPIO_Pin)
 8000c26:	88fb      	ldrh	r3, [r7, #6]
 8000c28:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8000c2c:	d00d      	beq.n	8000c4a <HAL_GPIO_EXTI_Callback+0x2e>
 8000c2e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000c32:	d110      	bne.n	8000c56 <HAL_GPIO_EXTI_Callback+0x3a>
	{
	case (GPIO_PIN_13):
	{
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);
 8000c34:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000c38:	4809      	ldr	r0, [pc, #36]	@ (8000c60 <HAL_GPIO_EXTI_Callback+0x44>)
 8000c3a:	f000 ffd5 	bl	8001be8 <HAL_GPIO_TogglePin>
		++indicator;
 8000c3e:	4b09      	ldr	r3, [pc, #36]	@ (8000c64 <HAL_GPIO_EXTI_Callback+0x48>)
 8000c40:	681b      	ldr	r3, [r3, #0]
 8000c42:	3301      	adds	r3, #1
 8000c44:	4a07      	ldr	r2, [pc, #28]	@ (8000c64 <HAL_GPIO_EXTI_Callback+0x48>)
 8000c46:	6013      	str	r3, [r2, #0]
		break;
 8000c48:	e005      	b.n	8000c56 <HAL_GPIO_EXTI_Callback+0x3a>
	}
	case(GPIO_PIN_11):
	{
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);
 8000c4a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000c4e:	4804      	ldr	r0, [pc, #16]	@ (8000c60 <HAL_GPIO_EXTI_Callback+0x44>)
 8000c50:	f000 ffca 	bl	8001be8 <HAL_GPIO_TogglePin>
		break;
 8000c54:	bf00      	nop
	}
	}
}
 8000c56:	bf00      	nop
 8000c58:	3708      	adds	r7, #8
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	bd80      	pop	{r7, pc}
 8000c5e:	bf00      	nop
 8000c60:	48000400 	.word	0x48000400
 8000c64:	20000750 	.word	0x20000750

08000c68 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c68:	b480      	push	{r7}
 8000c6a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c6c:	b672      	cpsid	i
}
 8000c6e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c70:	bf00      	nop
 8000c72:	e7fd      	b.n	8000c70 <Error_Handler+0x8>

08000c74 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c74:	b480      	push	{r7}
 8000c76:	b083      	sub	sp, #12
 8000c78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c7a:	4b0f      	ldr	r3, [pc, #60]	@ (8000cb8 <HAL_MspInit+0x44>)
 8000c7c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000c7e:	4a0e      	ldr	r2, [pc, #56]	@ (8000cb8 <HAL_MspInit+0x44>)
 8000c80:	f043 0301 	orr.w	r3, r3, #1
 8000c84:	6613      	str	r3, [r2, #96]	@ 0x60
 8000c86:	4b0c      	ldr	r3, [pc, #48]	@ (8000cb8 <HAL_MspInit+0x44>)
 8000c88:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000c8a:	f003 0301 	and.w	r3, r3, #1
 8000c8e:	607b      	str	r3, [r7, #4]
 8000c90:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c92:	4b09      	ldr	r3, [pc, #36]	@ (8000cb8 <HAL_MspInit+0x44>)
 8000c94:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000c96:	4a08      	ldr	r2, [pc, #32]	@ (8000cb8 <HAL_MspInit+0x44>)
 8000c98:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000c9c:	6593      	str	r3, [r2, #88]	@ 0x58
 8000c9e:	4b06      	ldr	r3, [pc, #24]	@ (8000cb8 <HAL_MspInit+0x44>)
 8000ca0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000ca2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000ca6:	603b      	str	r3, [r7, #0]
 8000ca8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000caa:	bf00      	nop
 8000cac:	370c      	adds	r7, #12
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop
 8000cb8:	40021000 	.word	0x40021000

08000cbc <HAL_DFSDM_ChannelMspInit>:
  * This function configures the hardware resources used in this example
  * @param hdfsdm_channel: DFSDM_Channel handle pointer
  * @retval None
  */
void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* hdfsdm_channel)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	b0ac      	sub	sp, #176	@ 0xb0
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cc4:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000cc8:	2200      	movs	r2, #0
 8000cca:	601a      	str	r2, [r3, #0]
 8000ccc:	605a      	str	r2, [r3, #4]
 8000cce:	609a      	str	r2, [r3, #8]
 8000cd0:	60da      	str	r2, [r3, #12]
 8000cd2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000cd4:	f107 0314 	add.w	r3, r7, #20
 8000cd8:	2288      	movs	r2, #136	@ 0x88
 8000cda:	2100      	movs	r1, #0
 8000cdc:	4618      	mov	r0, r3
 8000cde:	f003 fe98 	bl	8004a12 <memset>
  if(DFSDM1_Init == 0)
 8000ce2:	4b25      	ldr	r3, [pc, #148]	@ (8000d78 <HAL_DFSDM_ChannelMspInit+0xbc>)
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	d142      	bne.n	8000d70 <HAL_DFSDM_ChannelMspInit+0xb4>

    /* USER CODE END DFSDM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1;
 8000cea:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000cee:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000cf6:	f107 0314 	add.w	r3, r7, #20
 8000cfa:	4618      	mov	r0, r3
 8000cfc:	f002 f94c 	bl	8002f98 <HAL_RCCEx_PeriphCLKConfig>
 8000d00:	4603      	mov	r3, r0
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d001      	beq.n	8000d0a <HAL_DFSDM_ChannelMspInit+0x4e>
    {
      Error_Handler();
 8000d06:	f7ff ffaf 	bl	8000c68 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_DFSDM1_CLK_ENABLE();
 8000d0a:	4b1c      	ldr	r3, [pc, #112]	@ (8000d7c <HAL_DFSDM_ChannelMspInit+0xc0>)
 8000d0c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000d0e:	4a1b      	ldr	r2, [pc, #108]	@ (8000d7c <HAL_DFSDM_ChannelMspInit+0xc0>)
 8000d10:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000d14:	6613      	str	r3, [r2, #96]	@ 0x60
 8000d16:	4b19      	ldr	r3, [pc, #100]	@ (8000d7c <HAL_DFSDM_ChannelMspInit+0xc0>)
 8000d18:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000d1a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8000d1e:	613b      	str	r3, [r7, #16]
 8000d20:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000d22:	4b16      	ldr	r3, [pc, #88]	@ (8000d7c <HAL_DFSDM_ChannelMspInit+0xc0>)
 8000d24:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d26:	4a15      	ldr	r2, [pc, #84]	@ (8000d7c <HAL_DFSDM_ChannelMspInit+0xc0>)
 8000d28:	f043 0310 	orr.w	r3, r3, #16
 8000d2c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000d2e:	4b13      	ldr	r3, [pc, #76]	@ (8000d7c <HAL_DFSDM_ChannelMspInit+0xc0>)
 8000d30:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d32:	f003 0310 	and.w	r3, r3, #16
 8000d36:	60fb      	str	r3, [r7, #12]
 8000d38:	68fb      	ldr	r3, [r7, #12]
    /**DFSDM1 GPIO Configuration
    PE7     ------> DFSDM1_DATIN2
    PE9     ------> DFSDM1_CKOUT
    */
    GPIO_InitStruct.Pin = DFSDM1_DATIN2_Pin|DFSDM1_CKOUT_Pin;
 8000d3a:	f44f 7320 	mov.w	r3, #640	@ 0x280
 8000d3e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d42:	2302      	movs	r3, #2
 8000d44:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d48:	2300      	movs	r3, #0
 8000d4a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d4e:	2300      	movs	r3, #0
 8000d50:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8000d54:	2306      	movs	r3, #6
 8000d56:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000d5a:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000d5e:	4619      	mov	r1, r3
 8000d60:	4807      	ldr	r0, [pc, #28]	@ (8000d80 <HAL_DFSDM_ChannelMspInit+0xc4>)
 8000d62:	f000 fd7f 	bl	8001864 <HAL_GPIO_Init>

    /* USER CODE BEGIN DFSDM1_MspInit 1 */

    /* USER CODE END DFSDM1_MspInit 1 */

  DFSDM1_Init++;
 8000d66:	4b04      	ldr	r3, [pc, #16]	@ (8000d78 <HAL_DFSDM_ChannelMspInit+0xbc>)
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	3301      	adds	r3, #1
 8000d6c:	4a02      	ldr	r2, [pc, #8]	@ (8000d78 <HAL_DFSDM_ChannelMspInit+0xbc>)
 8000d6e:	6013      	str	r3, [r2, #0]
  }

}
 8000d70:	bf00      	nop
 8000d72:	37b0      	adds	r7, #176	@ 0xb0
 8000d74:	46bd      	mov	sp, r7
 8000d76:	bd80      	pop	{r7, pc}
 8000d78:	20000754 	.word	0x20000754
 8000d7c:	40021000 	.word	0x40021000
 8000d80:	48001000 	.word	0x48001000

08000d84 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	b0ac      	sub	sp, #176	@ 0xb0
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d8c:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000d90:	2200      	movs	r2, #0
 8000d92:	601a      	str	r2, [r3, #0]
 8000d94:	605a      	str	r2, [r3, #4]
 8000d96:	609a      	str	r2, [r3, #8]
 8000d98:	60da      	str	r2, [r3, #12]
 8000d9a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000d9c:	f107 0314 	add.w	r3, r7, #20
 8000da0:	2288      	movs	r2, #136	@ 0x88
 8000da2:	2100      	movs	r1, #0
 8000da4:	4618      	mov	r0, r3
 8000da6:	f003 fe34 	bl	8004a12 <memset>
  if(hi2c->Instance==I2C2)
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	4a21      	ldr	r2, [pc, #132]	@ (8000e34 <HAL_I2C_MspInit+0xb0>)
 8000db0:	4293      	cmp	r3, r2
 8000db2:	d13b      	bne.n	8000e2c <HAL_I2C_MspInit+0xa8>

    /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8000db4:	2380      	movs	r3, #128	@ 0x80
 8000db6:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8000db8:	2300      	movs	r3, #0
 8000dba:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000dbc:	f107 0314 	add.w	r3, r7, #20
 8000dc0:	4618      	mov	r0, r3
 8000dc2:	f002 f8e9 	bl	8002f98 <HAL_RCCEx_PeriphCLKConfig>
 8000dc6:	4603      	mov	r3, r0
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	d001      	beq.n	8000dd0 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8000dcc:	f7ff ff4c 	bl	8000c68 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dd0:	4b19      	ldr	r3, [pc, #100]	@ (8000e38 <HAL_I2C_MspInit+0xb4>)
 8000dd2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000dd4:	4a18      	ldr	r2, [pc, #96]	@ (8000e38 <HAL_I2C_MspInit+0xb4>)
 8000dd6:	f043 0302 	orr.w	r3, r3, #2
 8000dda:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000ddc:	4b16      	ldr	r3, [pc, #88]	@ (8000e38 <HAL_I2C_MspInit+0xb4>)
 8000dde:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000de0:	f003 0302 	and.w	r3, r3, #2
 8000de4:	613b      	str	r3, [r7, #16]
 8000de6:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = INTERNAL_I2C2_SCL_Pin|INTERNAL_I2C2_SDA_Pin;
 8000de8:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8000dec:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000df0:	2312      	movs	r3, #18
 8000df2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000df6:	2301      	movs	r3, #1
 8000df8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dfc:	2303      	movs	r3, #3
 8000dfe:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000e02:	2304      	movs	r3, #4
 8000e04:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e08:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000e0c:	4619      	mov	r1, r3
 8000e0e:	480b      	ldr	r0, [pc, #44]	@ (8000e3c <HAL_I2C_MspInit+0xb8>)
 8000e10:	f000 fd28 	bl	8001864 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000e14:	4b08      	ldr	r3, [pc, #32]	@ (8000e38 <HAL_I2C_MspInit+0xb4>)
 8000e16:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000e18:	4a07      	ldr	r2, [pc, #28]	@ (8000e38 <HAL_I2C_MspInit+0xb4>)
 8000e1a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000e1e:	6593      	str	r3, [r2, #88]	@ 0x58
 8000e20:	4b05      	ldr	r3, [pc, #20]	@ (8000e38 <HAL_I2C_MspInit+0xb4>)
 8000e22:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000e24:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000e28:	60fb      	str	r3, [r7, #12]
 8000e2a:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C2_MspInit 1 */

  }

}
 8000e2c:	bf00      	nop
 8000e2e:	37b0      	adds	r7, #176	@ 0xb0
 8000e30:	46bd      	mov	sp, r7
 8000e32:	bd80      	pop	{r7, pc}
 8000e34:	40005800 	.word	0x40005800
 8000e38:	40021000 	.word	0x40021000
 8000e3c:	48000400 	.word	0x48000400

08000e40 <HAL_QSPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hqspi: QSPI handle pointer
  * @retval None
  */
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b08a      	sub	sp, #40	@ 0x28
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e48:	f107 0314 	add.w	r3, r7, #20
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	601a      	str	r2, [r3, #0]
 8000e50:	605a      	str	r2, [r3, #4]
 8000e52:	609a      	str	r2, [r3, #8]
 8000e54:	60da      	str	r2, [r3, #12]
 8000e56:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	4a17      	ldr	r2, [pc, #92]	@ (8000ebc <HAL_QSPI_MspInit+0x7c>)
 8000e5e:	4293      	cmp	r3, r2
 8000e60:	d128      	bne.n	8000eb4 <HAL_QSPI_MspInit+0x74>
  {
    /* USER CODE BEGIN QUADSPI_MspInit 0 */

    /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8000e62:	4b17      	ldr	r3, [pc, #92]	@ (8000ec0 <HAL_QSPI_MspInit+0x80>)
 8000e64:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8000e66:	4a16      	ldr	r2, [pc, #88]	@ (8000ec0 <HAL_QSPI_MspInit+0x80>)
 8000e68:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000e6c:	6513      	str	r3, [r2, #80]	@ 0x50
 8000e6e:	4b14      	ldr	r3, [pc, #80]	@ (8000ec0 <HAL_QSPI_MspInit+0x80>)
 8000e70:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8000e72:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000e76:	613b      	str	r3, [r7, #16]
 8000e78:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000e7a:	4b11      	ldr	r3, [pc, #68]	@ (8000ec0 <HAL_QSPI_MspInit+0x80>)
 8000e7c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e7e:	4a10      	ldr	r2, [pc, #64]	@ (8000ec0 <HAL_QSPI_MspInit+0x80>)
 8000e80:	f043 0310 	orr.w	r3, r3, #16
 8000e84:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000e86:	4b0e      	ldr	r3, [pc, #56]	@ (8000ec0 <HAL_QSPI_MspInit+0x80>)
 8000e88:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e8a:	f003 0310 	and.w	r3, r3, #16
 8000e8e:	60fb      	str	r3, [r7, #12]
 8000e90:	68fb      	ldr	r3, [r7, #12]
    PE12     ------> QUADSPI_BK1_IO0
    PE13     ------> QUADSPI_BK1_IO1
    PE14     ------> QUADSPI_BK1_IO2
    PE15     ------> QUADSPI_BK1_IO3
    */
    GPIO_InitStruct.Pin = QUADSPI_CLK_Pin|QUADSPI_NCS_Pin|OQUADSPI_BK1_IO0_Pin|QUADSPI_BK1_IO1_Pin
 8000e92:	f44f 437c 	mov.w	r3, #64512	@ 0xfc00
 8000e96:	617b      	str	r3, [r7, #20]
                          |QUAD_SPI_BK1_IO2_Pin|QUAD_SPI_BK1_IO3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e98:	2302      	movs	r3, #2
 8000e9a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ea0:	2303      	movs	r3, #3
 8000ea2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8000ea4:	230a      	movs	r3, #10
 8000ea6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000ea8:	f107 0314 	add.w	r3, r7, #20
 8000eac:	4619      	mov	r1, r3
 8000eae:	4805      	ldr	r0, [pc, #20]	@ (8000ec4 <HAL_QSPI_MspInit+0x84>)
 8000eb0:	f000 fcd8 	bl	8001864 <HAL_GPIO_Init>

    /* USER CODE END QUADSPI_MspInit 1 */

  }

}
 8000eb4:	bf00      	nop
 8000eb6:	3728      	adds	r7, #40	@ 0x28
 8000eb8:	46bd      	mov	sp, r7
 8000eba:	bd80      	pop	{r7, pc}
 8000ebc:	a0001000 	.word	0xa0001000
 8000ec0:	40021000 	.word	0x40021000
 8000ec4:	48001000 	.word	0x48001000

08000ec8 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b08a      	sub	sp, #40	@ 0x28
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ed0:	f107 0314 	add.w	r3, r7, #20
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	601a      	str	r2, [r3, #0]
 8000ed8:	605a      	str	r2, [r3, #4]
 8000eda:	609a      	str	r2, [r3, #8]
 8000edc:	60da      	str	r2, [r3, #12]
 8000ede:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	4a17      	ldr	r2, [pc, #92]	@ (8000f44 <HAL_SPI_MspInit+0x7c>)
 8000ee6:	4293      	cmp	r3, r2
 8000ee8:	d128      	bne.n	8000f3c <HAL_SPI_MspInit+0x74>
  {
    /* USER CODE BEGIN SPI3_MspInit 0 */

    /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000eea:	4b17      	ldr	r3, [pc, #92]	@ (8000f48 <HAL_SPI_MspInit+0x80>)
 8000eec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000eee:	4a16      	ldr	r2, [pc, #88]	@ (8000f48 <HAL_SPI_MspInit+0x80>)
 8000ef0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000ef4:	6593      	str	r3, [r2, #88]	@ 0x58
 8000ef6:	4b14      	ldr	r3, [pc, #80]	@ (8000f48 <HAL_SPI_MspInit+0x80>)
 8000ef8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000efa:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000efe:	613b      	str	r3, [r7, #16]
 8000f00:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f02:	4b11      	ldr	r3, [pc, #68]	@ (8000f48 <HAL_SPI_MspInit+0x80>)
 8000f04:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f06:	4a10      	ldr	r2, [pc, #64]	@ (8000f48 <HAL_SPI_MspInit+0x80>)
 8000f08:	f043 0304 	orr.w	r3, r3, #4
 8000f0c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000f0e:	4b0e      	ldr	r3, [pc, #56]	@ (8000f48 <HAL_SPI_MspInit+0x80>)
 8000f10:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f12:	f003 0304 	and.w	r3, r3, #4
 8000f16:	60fb      	str	r3, [r7, #12]
 8000f18:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = INTERNAL_SPI3_SCK_Pin|INTERNAL_SPI3_MISO_Pin|INTERNAL_SPI3_MOSI_Pin;
 8000f1a:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8000f1e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f20:	2302      	movs	r3, #2
 8000f22:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f24:	2300      	movs	r3, #0
 8000f26:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f28:	2303      	movs	r3, #3
 8000f2a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000f2c:	2306      	movs	r3, #6
 8000f2e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f30:	f107 0314 	add.w	r3, r7, #20
 8000f34:	4619      	mov	r1, r3
 8000f36:	4805      	ldr	r0, [pc, #20]	@ (8000f4c <HAL_SPI_MspInit+0x84>)
 8000f38:	f000 fc94 	bl	8001864 <HAL_GPIO_Init>

    /* USER CODE END SPI3_MspInit 1 */

  }

}
 8000f3c:	bf00      	nop
 8000f3e:	3728      	adds	r7, #40	@ 0x28
 8000f40:	46bd      	mov	sp, r7
 8000f42:	bd80      	pop	{r7, pc}
 8000f44:	40003c00 	.word	0x40003c00
 8000f48:	40021000 	.word	0x40021000
 8000f4c:	48000800 	.word	0x48000800

08000f50 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b0ae      	sub	sp, #184	@ 0xb8
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f58:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	601a      	str	r2, [r3, #0]
 8000f60:	605a      	str	r2, [r3, #4]
 8000f62:	609a      	str	r2, [r3, #8]
 8000f64:	60da      	str	r2, [r3, #12]
 8000f66:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000f68:	f107 031c 	add.w	r3, r7, #28
 8000f6c:	2288      	movs	r2, #136	@ 0x88
 8000f6e:	2100      	movs	r1, #0
 8000f70:	4618      	mov	r0, r3
 8000f72:	f003 fd4e 	bl	8004a12 <memset>
  if(huart->Instance==USART1)
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	4a42      	ldr	r2, [pc, #264]	@ (8001084 <HAL_UART_MspInit+0x134>)
 8000f7c:	4293      	cmp	r3, r2
 8000f7e:	d13b      	bne.n	8000ff8 <HAL_UART_MspInit+0xa8>

    /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000f80:	2301      	movs	r3, #1
 8000f82:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000f84:	2300      	movs	r3, #0
 8000f86:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000f88:	f107 031c 	add.w	r3, r7, #28
 8000f8c:	4618      	mov	r0, r3
 8000f8e:	f002 f803 	bl	8002f98 <HAL_RCCEx_PeriphCLKConfig>
 8000f92:	4603      	mov	r3, r0
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d001      	beq.n	8000f9c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000f98:	f7ff fe66 	bl	8000c68 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000f9c:	4b3a      	ldr	r3, [pc, #232]	@ (8001088 <HAL_UART_MspInit+0x138>)
 8000f9e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000fa0:	4a39      	ldr	r2, [pc, #228]	@ (8001088 <HAL_UART_MspInit+0x138>)
 8000fa2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000fa6:	6613      	str	r3, [r2, #96]	@ 0x60
 8000fa8:	4b37      	ldr	r3, [pc, #220]	@ (8001088 <HAL_UART_MspInit+0x138>)
 8000faa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000fac:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000fb0:	61bb      	str	r3, [r7, #24]
 8000fb2:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fb4:	4b34      	ldr	r3, [pc, #208]	@ (8001088 <HAL_UART_MspInit+0x138>)
 8000fb6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000fb8:	4a33      	ldr	r2, [pc, #204]	@ (8001088 <HAL_UART_MspInit+0x138>)
 8000fba:	f043 0302 	orr.w	r3, r3, #2
 8000fbe:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000fc0:	4b31      	ldr	r3, [pc, #196]	@ (8001088 <HAL_UART_MspInit+0x138>)
 8000fc2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000fc4:	f003 0302 	and.w	r3, r3, #2
 8000fc8:	617b      	str	r3, [r7, #20]
 8000fca:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = ST_LINK_UART1_TX_Pin|ST_LINK_UART1_RX_Pin;
 8000fcc:	23c0      	movs	r3, #192	@ 0xc0
 8000fce:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fd2:	2302      	movs	r3, #2
 8000fd4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fd8:	2300      	movs	r3, #0
 8000fda:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fde:	2303      	movs	r3, #3
 8000fe0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000fe4:	2307      	movs	r3, #7
 8000fe6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fea:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000fee:	4619      	mov	r1, r3
 8000ff0:	4826      	ldr	r0, [pc, #152]	@ (800108c <HAL_UART_MspInit+0x13c>)
 8000ff2:	f000 fc37 	bl	8001864 <HAL_GPIO_Init>
    /* USER CODE BEGIN USART3_MspInit 1 */

    /* USER CODE END USART3_MspInit 1 */
  }

}
 8000ff6:	e040      	b.n	800107a <HAL_UART_MspInit+0x12a>
  else if(huart->Instance==USART3)
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	4a24      	ldr	r2, [pc, #144]	@ (8001090 <HAL_UART_MspInit+0x140>)
 8000ffe:	4293      	cmp	r3, r2
 8001000:	d13b      	bne.n	800107a <HAL_UART_MspInit+0x12a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001002:	2304      	movs	r3, #4
 8001004:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001006:	2300      	movs	r3, #0
 8001008:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800100a:	f107 031c 	add.w	r3, r7, #28
 800100e:	4618      	mov	r0, r3
 8001010:	f001 ffc2 	bl	8002f98 <HAL_RCCEx_PeriphCLKConfig>
 8001014:	4603      	mov	r3, r0
 8001016:	2b00      	cmp	r3, #0
 8001018:	d001      	beq.n	800101e <HAL_UART_MspInit+0xce>
      Error_Handler();
 800101a:	f7ff fe25 	bl	8000c68 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 800101e:	4b1a      	ldr	r3, [pc, #104]	@ (8001088 <HAL_UART_MspInit+0x138>)
 8001020:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001022:	4a19      	ldr	r2, [pc, #100]	@ (8001088 <HAL_UART_MspInit+0x138>)
 8001024:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001028:	6593      	str	r3, [r2, #88]	@ 0x58
 800102a:	4b17      	ldr	r3, [pc, #92]	@ (8001088 <HAL_UART_MspInit+0x138>)
 800102c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800102e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001032:	613b      	str	r3, [r7, #16]
 8001034:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001036:	4b14      	ldr	r3, [pc, #80]	@ (8001088 <HAL_UART_MspInit+0x138>)
 8001038:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800103a:	4a13      	ldr	r2, [pc, #76]	@ (8001088 <HAL_UART_MspInit+0x138>)
 800103c:	f043 0308 	orr.w	r3, r3, #8
 8001040:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001042:	4b11      	ldr	r3, [pc, #68]	@ (8001088 <HAL_UART_MspInit+0x138>)
 8001044:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001046:	f003 0308 	and.w	r3, r3, #8
 800104a:	60fb      	str	r3, [r7, #12]
 800104c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = INTERNAL_UART3_TX_Pin|INTERNAL_UART3_RX_Pin;
 800104e:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001052:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001056:	2302      	movs	r3, #2
 8001058:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800105c:	2300      	movs	r3, #0
 800105e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001062:	2303      	movs	r3, #3
 8001064:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001068:	2307      	movs	r3, #7
 800106a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800106e:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001072:	4619      	mov	r1, r3
 8001074:	4807      	ldr	r0, [pc, #28]	@ (8001094 <HAL_UART_MspInit+0x144>)
 8001076:	f000 fbf5 	bl	8001864 <HAL_GPIO_Init>
}
 800107a:	bf00      	nop
 800107c:	37b8      	adds	r7, #184	@ 0xb8
 800107e:	46bd      	mov	sp, r7
 8001080:	bd80      	pop	{r7, pc}
 8001082:	bf00      	nop
 8001084:	40013800 	.word	0x40013800
 8001088:	40021000 	.word	0x40021000
 800108c:	48000400 	.word	0x48000400
 8001090:	40004800 	.word	0x40004800
 8001094:	48000c00 	.word	0x48000c00

08001098 <HAL_PCD_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hpcd: PCD handle pointer
  * @retval None
  */
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b0ac      	sub	sp, #176	@ 0xb0
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010a0:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80010a4:	2200      	movs	r2, #0
 80010a6:	601a      	str	r2, [r3, #0]
 80010a8:	605a      	str	r2, [r3, #4]
 80010aa:	609a      	str	r2, [r3, #8]
 80010ac:	60da      	str	r2, [r3, #12]
 80010ae:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80010b0:	f107 0314 	add.w	r3, r7, #20
 80010b4:	2288      	movs	r2, #136	@ 0x88
 80010b6:	2100      	movs	r1, #0
 80010b8:	4618      	mov	r0, r3
 80010ba:	f003 fcaa 	bl	8004a12 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80010c6:	d17c      	bne.n	80011c2 <HAL_PCD_MspInit+0x12a>

    /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80010c8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80010cc:	617b      	str	r3, [r7, #20]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 80010ce:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 80010d2:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 80010d6:	2301      	movs	r3, #1
 80010d8:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 80010da:	2301      	movs	r3, #1
 80010dc:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 80010de:	2318      	movs	r3, #24
 80010e0:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 80010e2:	2307      	movs	r3, #7
 80010e4:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80010e6:	2302      	movs	r3, #2
 80010e8:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80010ea:	2302      	movs	r3, #2
 80010ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 80010ee:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80010f2:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80010f4:	f107 0314 	add.w	r3, r7, #20
 80010f8:	4618      	mov	r0, r3
 80010fa:	f001 ff4d 	bl	8002f98 <HAL_RCCEx_PeriphCLKConfig>
 80010fe:	4603      	mov	r3, r0
 8001100:	2b00      	cmp	r3, #0
 8001102:	d001      	beq.n	8001108 <HAL_PCD_MspInit+0x70>
    {
      Error_Handler();
 8001104:	f7ff fdb0 	bl	8000c68 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001108:	4b30      	ldr	r3, [pc, #192]	@ (80011cc <HAL_PCD_MspInit+0x134>)
 800110a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800110c:	4a2f      	ldr	r2, [pc, #188]	@ (80011cc <HAL_PCD_MspInit+0x134>)
 800110e:	f043 0301 	orr.w	r3, r3, #1
 8001112:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001114:	4b2d      	ldr	r3, [pc, #180]	@ (80011cc <HAL_PCD_MspInit+0x134>)
 8001116:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001118:	f003 0301 	and.w	r3, r3, #1
 800111c:	613b      	str	r3, [r7, #16]
 800111e:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_OTG_FS_VBUS_Pin;
 8001120:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001124:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001128:	2300      	movs	r3, #0
 800112a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800112e:	2300      	movs	r3, #0
 8001130:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(USB_OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001134:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001138:	4619      	mov	r1, r3
 800113a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800113e:	f000 fb91 	bl	8001864 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_OTG_FS_ID_Pin|USB_OTG_FS_DM_Pin|USB_OTG_FS_DP_Pin;
 8001142:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8001146:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800114a:	2302      	movs	r3, #2
 800114c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001150:	2300      	movs	r3, #0
 8001152:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001156:	2303      	movs	r3, #3
 8001158:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800115c:	230a      	movs	r3, #10
 800115e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001162:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001166:	4619      	mov	r1, r3
 8001168:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800116c:	f000 fb7a 	bl	8001864 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001170:	4b16      	ldr	r3, [pc, #88]	@ (80011cc <HAL_PCD_MspInit+0x134>)
 8001172:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001174:	4a15      	ldr	r2, [pc, #84]	@ (80011cc <HAL_PCD_MspInit+0x134>)
 8001176:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800117a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800117c:	4b13      	ldr	r3, [pc, #76]	@ (80011cc <HAL_PCD_MspInit+0x134>)
 800117e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001180:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001184:	60fb      	str	r3, [r7, #12]
 8001186:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001188:	4b10      	ldr	r3, [pc, #64]	@ (80011cc <HAL_PCD_MspInit+0x134>)
 800118a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800118c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001190:	2b00      	cmp	r3, #0
 8001192:	d114      	bne.n	80011be <HAL_PCD_MspInit+0x126>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001194:	4b0d      	ldr	r3, [pc, #52]	@ (80011cc <HAL_PCD_MspInit+0x134>)
 8001196:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001198:	4a0c      	ldr	r2, [pc, #48]	@ (80011cc <HAL_PCD_MspInit+0x134>)
 800119a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800119e:	6593      	str	r3, [r2, #88]	@ 0x58
 80011a0:	4b0a      	ldr	r3, [pc, #40]	@ (80011cc <HAL_PCD_MspInit+0x134>)
 80011a2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80011a4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80011a8:	60bb      	str	r3, [r7, #8]
 80011aa:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 80011ac:	f001 f828 	bl	8002200 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 80011b0:	4b06      	ldr	r3, [pc, #24]	@ (80011cc <HAL_PCD_MspInit+0x134>)
 80011b2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80011b4:	4a05      	ldr	r2, [pc, #20]	@ (80011cc <HAL_PCD_MspInit+0x134>)
 80011b6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80011ba:	6593      	str	r3, [r2, #88]	@ 0x58

    /* USER CODE END USB_OTG_FS_MspInit 1 */

  }

}
 80011bc:	e001      	b.n	80011c2 <HAL_PCD_MspInit+0x12a>
      HAL_PWREx_EnableVddUSB();
 80011be:	f001 f81f 	bl	8002200 <HAL_PWREx_EnableVddUSB>
}
 80011c2:	bf00      	nop
 80011c4:	37b0      	adds	r7, #176	@ 0xb0
 80011c6:	46bd      	mov	sp, r7
 80011c8:	bd80      	pop	{r7, pc}
 80011ca:	bf00      	nop
 80011cc:	40021000 	.word	0x40021000

080011d0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80011d0:	b480      	push	{r7}
 80011d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80011d4:	bf00      	nop
 80011d6:	e7fd      	b.n	80011d4 <NMI_Handler+0x4>

080011d8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80011d8:	b480      	push	{r7}
 80011da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80011dc:	bf00      	nop
 80011de:	e7fd      	b.n	80011dc <HardFault_Handler+0x4>

080011e0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80011e0:	b480      	push	{r7}
 80011e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80011e4:	bf00      	nop
 80011e6:	e7fd      	b.n	80011e4 <MemManage_Handler+0x4>

080011e8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80011e8:	b480      	push	{r7}
 80011ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80011ec:	bf00      	nop
 80011ee:	e7fd      	b.n	80011ec <BusFault_Handler+0x4>

080011f0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80011f0:	b480      	push	{r7}
 80011f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80011f4:	bf00      	nop
 80011f6:	e7fd      	b.n	80011f4 <UsageFault_Handler+0x4>

080011f8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80011f8:	b480      	push	{r7}
 80011fa:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80011fc:	bf00      	nop
 80011fe:	46bd      	mov	sp, r7
 8001200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001204:	4770      	bx	lr

08001206 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001206:	b480      	push	{r7}
 8001208:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800120a:	bf00      	nop
 800120c:	46bd      	mov	sp, r7
 800120e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001212:	4770      	bx	lr

08001214 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001214:	b480      	push	{r7}
 8001216:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001218:	bf00      	nop
 800121a:	46bd      	mov	sp, r7
 800121c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001220:	4770      	bx	lr

08001222 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001222:	b580      	push	{r7, lr}
 8001224:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001226:	f000 f8bb 	bl	80013a0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800122a:	bf00      	nop
 800122c:	bd80      	pop	{r7, pc}

0800122e <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 800122e:	b580      	push	{r7, lr}
 8001230:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SPSGRF_915_GPIO3_EXTI5_Pin);
 8001232:	2020      	movs	r0, #32
 8001234:	f000 fcf2 	bl	8001c1c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(SPBTLE_RF_IRQ_EXTI6_Pin);
 8001238:	2040      	movs	r0, #64	@ 0x40
 800123a:	f000 fcef 	bl	8001c1c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(VL53L0X_GPIO1_EXTI7_Pin);
 800123e:	2080      	movs	r0, #128	@ 0x80
 8001240:	f000 fcec 	bl	8001c1c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM3MDL_DRDY_EXTI8_Pin);
 8001244:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8001248:	f000 fce8 	bl	8001c1c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800124c:	bf00      	nop
 800124e:	bd80      	pop	{r7, pc}

08001250 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LPS22HB_INT_DRDY_EXTI0_Pin);
 8001254:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8001258:	f000 fce0 	bl	8001c1c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM6DSL_INT1_EXTI11_Pin);
 800125c:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8001260:	f000 fcdc 	bl	8001c1c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BUTTON_EXTI13_Pin);
 8001264:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8001268:	f000 fcd8 	bl	8001c1c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ARD_D2_Pin);
 800126c:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8001270:	f000 fcd4 	bl	8001c1c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(HTS221_DRDY_EXTI15_Pin);
 8001274:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8001278:	f000 fcd0 	bl	8001c1c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800127c:	bf00      	nop
 800127e:	bd80      	pop	{r7, pc}

08001280 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001280:	b480      	push	{r7}
 8001282:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001284:	4b06      	ldr	r3, [pc, #24]	@ (80012a0 <SystemInit+0x20>)
 8001286:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800128a:	4a05      	ldr	r2, [pc, #20]	@ (80012a0 <SystemInit+0x20>)
 800128c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001290:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8001294:	bf00      	nop
 8001296:	46bd      	mov	sp, r7
 8001298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129c:	4770      	bx	lr
 800129e:	bf00      	nop
 80012a0:	e000ed00 	.word	0xe000ed00

080012a4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80012a4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80012dc <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80012a8:	f7ff ffea 	bl	8001280 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80012ac:	480c      	ldr	r0, [pc, #48]	@ (80012e0 <LoopForever+0x6>)
  ldr r1, =_edata
 80012ae:	490d      	ldr	r1, [pc, #52]	@ (80012e4 <LoopForever+0xa>)
  ldr r2, =_sidata
 80012b0:	4a0d      	ldr	r2, [pc, #52]	@ (80012e8 <LoopForever+0xe>)
  movs r3, #0
 80012b2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80012b4:	e002      	b.n	80012bc <LoopCopyDataInit>

080012b6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80012b6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80012b8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80012ba:	3304      	adds	r3, #4

080012bc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80012bc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80012be:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80012c0:	d3f9      	bcc.n	80012b6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80012c2:	4a0a      	ldr	r2, [pc, #40]	@ (80012ec <LoopForever+0x12>)
  ldr r4, =_ebss
 80012c4:	4c0a      	ldr	r4, [pc, #40]	@ (80012f0 <LoopForever+0x16>)
  movs r3, #0
 80012c6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80012c8:	e001      	b.n	80012ce <LoopFillZerobss>

080012ca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80012ca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80012cc:	3204      	adds	r2, #4

080012ce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80012ce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80012d0:	d3fb      	bcc.n	80012ca <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80012d2:	f003 fba7 	bl	8004a24 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80012d6:	f7ff f90d 	bl	80004f4 <main>

080012da <LoopForever>:

LoopForever:
    b LoopForever
 80012da:	e7fe      	b.n	80012da <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80012dc:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80012e0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80012e4:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80012e8:	08004adc 	.word	0x08004adc
  ldr r2, =_sbss
 80012ec:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80012f0:	20000780 	.word	0x20000780

080012f4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80012f4:	e7fe      	b.n	80012f4 <ADC1_2_IRQHandler>

080012f6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80012f6:	b580      	push	{r7, lr}
 80012f8:	b082      	sub	sp, #8
 80012fa:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80012fc:	2300      	movs	r3, #0
 80012fe:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001300:	2003      	movs	r0, #3
 8001302:	f000 f961 	bl	80015c8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001306:	2000      	movs	r0, #0
 8001308:	f000 f80e 	bl	8001328 <HAL_InitTick>
 800130c:	4603      	mov	r3, r0
 800130e:	2b00      	cmp	r3, #0
 8001310:	d002      	beq.n	8001318 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001312:	2301      	movs	r3, #1
 8001314:	71fb      	strb	r3, [r7, #7]
 8001316:	e001      	b.n	800131c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001318:	f7ff fcac 	bl	8000c74 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800131c:	79fb      	ldrb	r3, [r7, #7]
}
 800131e:	4618      	mov	r0, r3
 8001320:	3708      	adds	r7, #8
 8001322:	46bd      	mov	sp, r7
 8001324:	bd80      	pop	{r7, pc}
	...

08001328 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	b084      	sub	sp, #16
 800132c:	af00      	add	r7, sp, #0
 800132e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001330:	2300      	movs	r3, #0
 8001332:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001334:	4b17      	ldr	r3, [pc, #92]	@ (8001394 <HAL_InitTick+0x6c>)
 8001336:	781b      	ldrb	r3, [r3, #0]
 8001338:	2b00      	cmp	r3, #0
 800133a:	d023      	beq.n	8001384 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800133c:	4b16      	ldr	r3, [pc, #88]	@ (8001398 <HAL_InitTick+0x70>)
 800133e:	681a      	ldr	r2, [r3, #0]
 8001340:	4b14      	ldr	r3, [pc, #80]	@ (8001394 <HAL_InitTick+0x6c>)
 8001342:	781b      	ldrb	r3, [r3, #0]
 8001344:	4619      	mov	r1, r3
 8001346:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800134a:	fbb3 f3f1 	udiv	r3, r3, r1
 800134e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001352:	4618      	mov	r0, r3
 8001354:	f000 f96d 	bl	8001632 <HAL_SYSTICK_Config>
 8001358:	4603      	mov	r3, r0
 800135a:	2b00      	cmp	r3, #0
 800135c:	d10f      	bne.n	800137e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	2b0f      	cmp	r3, #15
 8001362:	d809      	bhi.n	8001378 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001364:	2200      	movs	r2, #0
 8001366:	6879      	ldr	r1, [r7, #4]
 8001368:	f04f 30ff 	mov.w	r0, #4294967295
 800136c:	f000 f937 	bl	80015de <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001370:	4a0a      	ldr	r2, [pc, #40]	@ (800139c <HAL_InitTick+0x74>)
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	6013      	str	r3, [r2, #0]
 8001376:	e007      	b.n	8001388 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001378:	2301      	movs	r3, #1
 800137a:	73fb      	strb	r3, [r7, #15]
 800137c:	e004      	b.n	8001388 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800137e:	2301      	movs	r3, #1
 8001380:	73fb      	strb	r3, [r7, #15]
 8001382:	e001      	b.n	8001388 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001384:	2301      	movs	r3, #1
 8001386:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001388:	7bfb      	ldrb	r3, [r7, #15]
}
 800138a:	4618      	mov	r0, r3
 800138c:	3710      	adds	r7, #16
 800138e:	46bd      	mov	sp, r7
 8001390:	bd80      	pop	{r7, pc}
 8001392:	bf00      	nop
 8001394:	20000008 	.word	0x20000008
 8001398:	20000000 	.word	0x20000000
 800139c:	20000004 	.word	0x20000004

080013a0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80013a0:	b480      	push	{r7}
 80013a2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80013a4:	4b06      	ldr	r3, [pc, #24]	@ (80013c0 <HAL_IncTick+0x20>)
 80013a6:	781b      	ldrb	r3, [r3, #0]
 80013a8:	461a      	mov	r2, r3
 80013aa:	4b06      	ldr	r3, [pc, #24]	@ (80013c4 <HAL_IncTick+0x24>)
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	4413      	add	r3, r2
 80013b0:	4a04      	ldr	r2, [pc, #16]	@ (80013c4 <HAL_IncTick+0x24>)
 80013b2:	6013      	str	r3, [r2, #0]
}
 80013b4:	bf00      	nop
 80013b6:	46bd      	mov	sp, r7
 80013b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013bc:	4770      	bx	lr
 80013be:	bf00      	nop
 80013c0:	20000008 	.word	0x20000008
 80013c4:	20000758 	.word	0x20000758

080013c8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80013c8:	b480      	push	{r7}
 80013ca:	af00      	add	r7, sp, #0
  return uwTick;
 80013cc:	4b03      	ldr	r3, [pc, #12]	@ (80013dc <HAL_GetTick+0x14>)
 80013ce:	681b      	ldr	r3, [r3, #0]
}
 80013d0:	4618      	mov	r0, r3
 80013d2:	46bd      	mov	sp, r7
 80013d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d8:	4770      	bx	lr
 80013da:	bf00      	nop
 80013dc:	20000758 	.word	0x20000758

080013e0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	b084      	sub	sp, #16
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80013e8:	f7ff ffee 	bl	80013c8 <HAL_GetTick>
 80013ec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80013f2:	68fb      	ldr	r3, [r7, #12]
 80013f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80013f8:	d005      	beq.n	8001406 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80013fa:	4b0a      	ldr	r3, [pc, #40]	@ (8001424 <HAL_Delay+0x44>)
 80013fc:	781b      	ldrb	r3, [r3, #0]
 80013fe:	461a      	mov	r2, r3
 8001400:	68fb      	ldr	r3, [r7, #12]
 8001402:	4413      	add	r3, r2
 8001404:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001406:	bf00      	nop
 8001408:	f7ff ffde 	bl	80013c8 <HAL_GetTick>
 800140c:	4602      	mov	r2, r0
 800140e:	68bb      	ldr	r3, [r7, #8]
 8001410:	1ad3      	subs	r3, r2, r3
 8001412:	68fa      	ldr	r2, [r7, #12]
 8001414:	429a      	cmp	r2, r3
 8001416:	d8f7      	bhi.n	8001408 <HAL_Delay+0x28>
  {
  }
}
 8001418:	bf00      	nop
 800141a:	bf00      	nop
 800141c:	3710      	adds	r7, #16
 800141e:	46bd      	mov	sp, r7
 8001420:	bd80      	pop	{r7, pc}
 8001422:	bf00      	nop
 8001424:	20000008 	.word	0x20000008

08001428 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001428:	b480      	push	{r7}
 800142a:	b085      	sub	sp, #20
 800142c:	af00      	add	r7, sp, #0
 800142e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	f003 0307 	and.w	r3, r3, #7
 8001436:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001438:	4b0c      	ldr	r3, [pc, #48]	@ (800146c <__NVIC_SetPriorityGrouping+0x44>)
 800143a:	68db      	ldr	r3, [r3, #12]
 800143c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800143e:	68ba      	ldr	r2, [r7, #8]
 8001440:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001444:	4013      	ands	r3, r2
 8001446:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001448:	68fb      	ldr	r3, [r7, #12]
 800144a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800144c:	68bb      	ldr	r3, [r7, #8]
 800144e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001450:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001454:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001458:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800145a:	4a04      	ldr	r2, [pc, #16]	@ (800146c <__NVIC_SetPriorityGrouping+0x44>)
 800145c:	68bb      	ldr	r3, [r7, #8]
 800145e:	60d3      	str	r3, [r2, #12]
}
 8001460:	bf00      	nop
 8001462:	3714      	adds	r7, #20
 8001464:	46bd      	mov	sp, r7
 8001466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146a:	4770      	bx	lr
 800146c:	e000ed00 	.word	0xe000ed00

08001470 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001470:	b480      	push	{r7}
 8001472:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001474:	4b04      	ldr	r3, [pc, #16]	@ (8001488 <__NVIC_GetPriorityGrouping+0x18>)
 8001476:	68db      	ldr	r3, [r3, #12]
 8001478:	0a1b      	lsrs	r3, r3, #8
 800147a:	f003 0307 	and.w	r3, r3, #7
}
 800147e:	4618      	mov	r0, r3
 8001480:	46bd      	mov	sp, r7
 8001482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001486:	4770      	bx	lr
 8001488:	e000ed00 	.word	0xe000ed00

0800148c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800148c:	b480      	push	{r7}
 800148e:	b083      	sub	sp, #12
 8001490:	af00      	add	r7, sp, #0
 8001492:	4603      	mov	r3, r0
 8001494:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001496:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800149a:	2b00      	cmp	r3, #0
 800149c:	db0b      	blt.n	80014b6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800149e:	79fb      	ldrb	r3, [r7, #7]
 80014a0:	f003 021f 	and.w	r2, r3, #31
 80014a4:	4907      	ldr	r1, [pc, #28]	@ (80014c4 <__NVIC_EnableIRQ+0x38>)
 80014a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014aa:	095b      	lsrs	r3, r3, #5
 80014ac:	2001      	movs	r0, #1
 80014ae:	fa00 f202 	lsl.w	r2, r0, r2
 80014b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80014b6:	bf00      	nop
 80014b8:	370c      	adds	r7, #12
 80014ba:	46bd      	mov	sp, r7
 80014bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c0:	4770      	bx	lr
 80014c2:	bf00      	nop
 80014c4:	e000e100 	.word	0xe000e100

080014c8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80014c8:	b480      	push	{r7}
 80014ca:	b083      	sub	sp, #12
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	4603      	mov	r3, r0
 80014d0:	6039      	str	r1, [r7, #0]
 80014d2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014d8:	2b00      	cmp	r3, #0
 80014da:	db0a      	blt.n	80014f2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014dc:	683b      	ldr	r3, [r7, #0]
 80014de:	b2da      	uxtb	r2, r3
 80014e0:	490c      	ldr	r1, [pc, #48]	@ (8001514 <__NVIC_SetPriority+0x4c>)
 80014e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014e6:	0112      	lsls	r2, r2, #4
 80014e8:	b2d2      	uxtb	r2, r2
 80014ea:	440b      	add	r3, r1
 80014ec:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80014f0:	e00a      	b.n	8001508 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014f2:	683b      	ldr	r3, [r7, #0]
 80014f4:	b2da      	uxtb	r2, r3
 80014f6:	4908      	ldr	r1, [pc, #32]	@ (8001518 <__NVIC_SetPriority+0x50>)
 80014f8:	79fb      	ldrb	r3, [r7, #7]
 80014fa:	f003 030f 	and.w	r3, r3, #15
 80014fe:	3b04      	subs	r3, #4
 8001500:	0112      	lsls	r2, r2, #4
 8001502:	b2d2      	uxtb	r2, r2
 8001504:	440b      	add	r3, r1
 8001506:	761a      	strb	r2, [r3, #24]
}
 8001508:	bf00      	nop
 800150a:	370c      	adds	r7, #12
 800150c:	46bd      	mov	sp, r7
 800150e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001512:	4770      	bx	lr
 8001514:	e000e100 	.word	0xe000e100
 8001518:	e000ed00 	.word	0xe000ed00

0800151c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800151c:	b480      	push	{r7}
 800151e:	b089      	sub	sp, #36	@ 0x24
 8001520:	af00      	add	r7, sp, #0
 8001522:	60f8      	str	r0, [r7, #12]
 8001524:	60b9      	str	r1, [r7, #8]
 8001526:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	f003 0307 	and.w	r3, r3, #7
 800152e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001530:	69fb      	ldr	r3, [r7, #28]
 8001532:	f1c3 0307 	rsb	r3, r3, #7
 8001536:	2b04      	cmp	r3, #4
 8001538:	bf28      	it	cs
 800153a:	2304      	movcs	r3, #4
 800153c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800153e:	69fb      	ldr	r3, [r7, #28]
 8001540:	3304      	adds	r3, #4
 8001542:	2b06      	cmp	r3, #6
 8001544:	d902      	bls.n	800154c <NVIC_EncodePriority+0x30>
 8001546:	69fb      	ldr	r3, [r7, #28]
 8001548:	3b03      	subs	r3, #3
 800154a:	e000      	b.n	800154e <NVIC_EncodePriority+0x32>
 800154c:	2300      	movs	r3, #0
 800154e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001550:	f04f 32ff 	mov.w	r2, #4294967295
 8001554:	69bb      	ldr	r3, [r7, #24]
 8001556:	fa02 f303 	lsl.w	r3, r2, r3
 800155a:	43da      	mvns	r2, r3
 800155c:	68bb      	ldr	r3, [r7, #8]
 800155e:	401a      	ands	r2, r3
 8001560:	697b      	ldr	r3, [r7, #20]
 8001562:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001564:	f04f 31ff 	mov.w	r1, #4294967295
 8001568:	697b      	ldr	r3, [r7, #20]
 800156a:	fa01 f303 	lsl.w	r3, r1, r3
 800156e:	43d9      	mvns	r1, r3
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001574:	4313      	orrs	r3, r2
         );
}
 8001576:	4618      	mov	r0, r3
 8001578:	3724      	adds	r7, #36	@ 0x24
 800157a:	46bd      	mov	sp, r7
 800157c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001580:	4770      	bx	lr
	...

08001584 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	b082      	sub	sp, #8
 8001588:	af00      	add	r7, sp, #0
 800158a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	3b01      	subs	r3, #1
 8001590:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001594:	d301      	bcc.n	800159a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001596:	2301      	movs	r3, #1
 8001598:	e00f      	b.n	80015ba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800159a:	4a0a      	ldr	r2, [pc, #40]	@ (80015c4 <SysTick_Config+0x40>)
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	3b01      	subs	r3, #1
 80015a0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80015a2:	210f      	movs	r1, #15
 80015a4:	f04f 30ff 	mov.w	r0, #4294967295
 80015a8:	f7ff ff8e 	bl	80014c8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80015ac:	4b05      	ldr	r3, [pc, #20]	@ (80015c4 <SysTick_Config+0x40>)
 80015ae:	2200      	movs	r2, #0
 80015b0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80015b2:	4b04      	ldr	r3, [pc, #16]	@ (80015c4 <SysTick_Config+0x40>)
 80015b4:	2207      	movs	r2, #7
 80015b6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80015b8:	2300      	movs	r3, #0
}
 80015ba:	4618      	mov	r0, r3
 80015bc:	3708      	adds	r7, #8
 80015be:	46bd      	mov	sp, r7
 80015c0:	bd80      	pop	{r7, pc}
 80015c2:	bf00      	nop
 80015c4:	e000e010 	.word	0xe000e010

080015c8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015c8:	b580      	push	{r7, lr}
 80015ca:	b082      	sub	sp, #8
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80015d0:	6878      	ldr	r0, [r7, #4]
 80015d2:	f7ff ff29 	bl	8001428 <__NVIC_SetPriorityGrouping>
}
 80015d6:	bf00      	nop
 80015d8:	3708      	adds	r7, #8
 80015da:	46bd      	mov	sp, r7
 80015dc:	bd80      	pop	{r7, pc}

080015de <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015de:	b580      	push	{r7, lr}
 80015e0:	b086      	sub	sp, #24
 80015e2:	af00      	add	r7, sp, #0
 80015e4:	4603      	mov	r3, r0
 80015e6:	60b9      	str	r1, [r7, #8]
 80015e8:	607a      	str	r2, [r7, #4]
 80015ea:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80015ec:	2300      	movs	r3, #0
 80015ee:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80015f0:	f7ff ff3e 	bl	8001470 <__NVIC_GetPriorityGrouping>
 80015f4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80015f6:	687a      	ldr	r2, [r7, #4]
 80015f8:	68b9      	ldr	r1, [r7, #8]
 80015fa:	6978      	ldr	r0, [r7, #20]
 80015fc:	f7ff ff8e 	bl	800151c <NVIC_EncodePriority>
 8001600:	4602      	mov	r2, r0
 8001602:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001606:	4611      	mov	r1, r2
 8001608:	4618      	mov	r0, r3
 800160a:	f7ff ff5d 	bl	80014c8 <__NVIC_SetPriority>
}
 800160e:	bf00      	nop
 8001610:	3718      	adds	r7, #24
 8001612:	46bd      	mov	sp, r7
 8001614:	bd80      	pop	{r7, pc}

08001616 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001616:	b580      	push	{r7, lr}
 8001618:	b082      	sub	sp, #8
 800161a:	af00      	add	r7, sp, #0
 800161c:	4603      	mov	r3, r0
 800161e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001620:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001624:	4618      	mov	r0, r3
 8001626:	f7ff ff31 	bl	800148c <__NVIC_EnableIRQ>
}
 800162a:	bf00      	nop
 800162c:	3708      	adds	r7, #8
 800162e:	46bd      	mov	sp, r7
 8001630:	bd80      	pop	{r7, pc}

08001632 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001632:	b580      	push	{r7, lr}
 8001634:	b082      	sub	sp, #8
 8001636:	af00      	add	r7, sp, #0
 8001638:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800163a:	6878      	ldr	r0, [r7, #4]
 800163c:	f7ff ffa2 	bl	8001584 <SysTick_Config>
 8001640:	4603      	mov	r3, r0
}
 8001642:	4618      	mov	r0, r3
 8001644:	3708      	adds	r7, #8
 8001646:	46bd      	mov	sp, r7
 8001648:	bd80      	pop	{r7, pc}
	...

0800164c <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	b082      	sub	sp, #8
 8001650:	af00      	add	r7, sp, #0
 8001652:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_channel == NULL)
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	2b00      	cmp	r3, #0
 8001658:	d101      	bne.n	800165e <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 800165a:	2301      	movs	r3, #1
 800165c:	e0ac      	b.n	80017b8 <HAL_DFSDM_ChannelInit+0x16c>
  assert_param(IS_DFSDM_CHANNEL_FILTER_OVS_RATIO(hdfsdm_channel->Init.Awd.Oversampling));
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));

  /* Check that channel has not been already initialized */
  if (a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	4618      	mov	r0, r3
 8001664:	f000 f8b2 	bl	80017cc <DFSDM_GetChannelFromInstance>
 8001668:	4603      	mov	r3, r0
 800166a:	4a55      	ldr	r2, [pc, #340]	@ (80017c0 <HAL_DFSDM_ChannelInit+0x174>)
 800166c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001670:	2b00      	cmp	r3, #0
 8001672:	d001      	beq.n	8001678 <HAL_DFSDM_ChannelInit+0x2c>
  {
    return HAL_ERROR;
 8001674:	2301      	movs	r3, #1
 8001676:	e09f      	b.n	80017b8 <HAL_DFSDM_ChannelInit+0x16c>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 8001678:	6878      	ldr	r0, [r7, #4]
 800167a:	f7ff fb1f 	bl	8000cbc <HAL_DFSDM_ChannelMspInit>
#endif

  /* Update the channel counter */
  v_dfsdm1ChannelCounter++;
 800167e:	4b51      	ldr	r3, [pc, #324]	@ (80017c4 <HAL_DFSDM_ChannelInit+0x178>)
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	3301      	adds	r3, #1
 8001684:	4a4f      	ldr	r2, [pc, #316]	@ (80017c4 <HAL_DFSDM_ChannelInit+0x178>)
 8001686:	6013      	str	r3, [r2, #0]

  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if (v_dfsdm1ChannelCounter == 1U)
 8001688:	4b4e      	ldr	r3, [pc, #312]	@ (80017c4 <HAL_DFSDM_ChannelInit+0x178>)
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	2b01      	cmp	r3, #1
 800168e:	d125      	bne.n	80016dc <HAL_DFSDM_ChannelInit+0x90>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 8001690:	4b4d      	ldr	r3, [pc, #308]	@ (80017c8 <HAL_DFSDM_ChannelInit+0x17c>)
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	4a4c      	ldr	r2, [pc, #304]	@ (80017c8 <HAL_DFSDM_ChannelInit+0x17c>)
 8001696:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800169a:	6013      	str	r3, [r2, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 800169c:	4b4a      	ldr	r3, [pc, #296]	@ (80017c8 <HAL_DFSDM_ChannelInit+0x17c>)
 800169e:	681a      	ldr	r2, [r3, #0]
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	689b      	ldr	r3, [r3, #8]
 80016a4:	4948      	ldr	r1, [pc, #288]	@ (80017c8 <HAL_DFSDM_ChannelInit+0x17c>)
 80016a6:	4313      	orrs	r3, r2
 80016a8:	600b      	str	r3, [r1, #0]

    /* Reset clock divider */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 80016aa:	4b47      	ldr	r3, [pc, #284]	@ (80017c8 <HAL_DFSDM_ChannelInit+0x17c>)
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	4a46      	ldr	r2, [pc, #280]	@ (80017c8 <HAL_DFSDM_ChannelInit+0x17c>)
 80016b0:	f423 037f 	bic.w	r3, r3, #16711680	@ 0xff0000
 80016b4:	6013      	str	r3, [r2, #0]
    if (hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	791b      	ldrb	r3, [r3, #4]
 80016ba:	2b01      	cmp	r3, #1
 80016bc:	d108      	bne.n	80016d0 <HAL_DFSDM_ChannelInit+0x84>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t)((hdfsdm_channel->Init.OutputClock.Divider - 1U) <<
 80016be:	4b42      	ldr	r3, [pc, #264]	@ (80017c8 <HAL_DFSDM_ChannelInit+0x17c>)
 80016c0:	681a      	ldr	r2, [r3, #0]
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	68db      	ldr	r3, [r3, #12]
 80016c6:	3b01      	subs	r3, #1
 80016c8:	041b      	lsls	r3, r3, #16
 80016ca:	493f      	ldr	r1, [pc, #252]	@ (80017c8 <HAL_DFSDM_ChannelInit+0x17c>)
 80016cc:	4313      	orrs	r3, r2
 80016ce:	600b      	str	r3, [r1, #0]
                                             DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }

    /* enable the DFSDM global interface */
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 80016d0:	4b3d      	ldr	r3, [pc, #244]	@ (80017c8 <HAL_DFSDM_ChannelInit+0x17c>)
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	4a3c      	ldr	r2, [pc, #240]	@ (80017c8 <HAL_DFSDM_ChannelInit+0x17c>)
 80016d6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80016da:	6013      	str	r3, [r2, #0]
  }

  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	681a      	ldr	r2, [r3, #0]
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	f422 4271 	bic.w	r2, r2, #61696	@ 0xf100
 80016ea:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	6819      	ldr	r1, [r3, #0]
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking |
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 80016fa:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8001700:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	430a      	orrs	r2, r1
 8001708:	601a      	str	r2, [r3, #0]

  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	681a      	ldr	r2, [r3, #0]
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	f022 020f 	bic.w	r2, r2, #15
 8001718:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	6819      	ldr	r1, [r3, #0]
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8001728:	431a      	orrs	r2, r3
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	430a      	orrs	r2, r1
 8001730:	601a      	str	r2, [r3, #0]

  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	689a      	ldr	r2, [r3, #8]
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	f422 025f 	bic.w	r2, r2, #14614528	@ 0xdf0000
 8001740:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	6899      	ldr	r1, [r3, #8]
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001750:	3b01      	subs	r3, #1
 8001752:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8001754:	431a      	orrs	r2, r3
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	430a      	orrs	r2, r1
 800175c:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	685a      	ldr	r2, [r3, #4]
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	f002 0207 	and.w	r2, r2, #7
 800176c:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	6859      	ldr	r1, [r3, #4]
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001778:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800177e:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8001780:	431a      	orrs	r2, r3
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	430a      	orrs	r2, r1
 8001788:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	681a      	ldr	r2, [r3, #0]
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001798:	601a      	str	r2, [r3, #0]

  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	2201      	movs	r2, #1
 800179e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	4618      	mov	r0, r3
 80017a8:	f000 f810 	bl	80017cc <DFSDM_GetChannelFromInstance>
 80017ac:	4602      	mov	r2, r0
 80017ae:	4904      	ldr	r1, [pc, #16]	@ (80017c0 <HAL_DFSDM_ChannelInit+0x174>)
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

  return HAL_OK;
 80017b6:	2300      	movs	r3, #0
}
 80017b8:	4618      	mov	r0, r3
 80017ba:	3708      	adds	r7, #8
 80017bc:	46bd      	mov	sp, r7
 80017be:	bd80      	pop	{r7, pc}
 80017c0:	20000760 	.word	0x20000760
 80017c4:	2000075c 	.word	0x2000075c
 80017c8:	40016000 	.word	0x40016000

080017cc <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef *Instance)
{
 80017cc:	b480      	push	{r7}
 80017ce:	b085      	sub	sp, #20
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	6078      	str	r0, [r7, #4]
  uint32_t channel;

  /* Get channel from instance */
  if (Instance == DFSDM1_Channel0)
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	4a1c      	ldr	r2, [pc, #112]	@ (8001848 <DFSDM_GetChannelFromInstance+0x7c>)
 80017d8:	4293      	cmp	r3, r2
 80017da:	d102      	bne.n	80017e2 <DFSDM_GetChannelFromInstance+0x16>
  {
    channel = 0;
 80017dc:	2300      	movs	r3, #0
 80017de:	60fb      	str	r3, [r7, #12]
 80017e0:	e02b      	b.n	800183a <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel1)
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	4a19      	ldr	r2, [pc, #100]	@ (800184c <DFSDM_GetChannelFromInstance+0x80>)
 80017e6:	4293      	cmp	r3, r2
 80017e8:	d102      	bne.n	80017f0 <DFSDM_GetChannelFromInstance+0x24>
  {
    channel = 1;
 80017ea:	2301      	movs	r3, #1
 80017ec:	60fb      	str	r3, [r7, #12]
 80017ee:	e024      	b.n	800183a <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel2)
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	4a17      	ldr	r2, [pc, #92]	@ (8001850 <DFSDM_GetChannelFromInstance+0x84>)
 80017f4:	4293      	cmp	r3, r2
 80017f6:	d102      	bne.n	80017fe <DFSDM_GetChannelFromInstance+0x32>
  {
    channel = 2;
 80017f8:	2302      	movs	r3, #2
 80017fa:	60fb      	str	r3, [r7, #12]
 80017fc:	e01d      	b.n	800183a <DFSDM_GetChannelFromInstance+0x6e>
  }
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else if (Instance == DFSDM1_Channel4)
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	4a14      	ldr	r2, [pc, #80]	@ (8001854 <DFSDM_GetChannelFromInstance+0x88>)
 8001802:	4293      	cmp	r3, r2
 8001804:	d102      	bne.n	800180c <DFSDM_GetChannelFromInstance+0x40>
  {
    channel = 4;
 8001806:	2304      	movs	r3, #4
 8001808:	60fb      	str	r3, [r7, #12]
 800180a:	e016      	b.n	800183a <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel5)
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	4a12      	ldr	r2, [pc, #72]	@ (8001858 <DFSDM_GetChannelFromInstance+0x8c>)
 8001810:	4293      	cmp	r3, r2
 8001812:	d102      	bne.n	800181a <DFSDM_GetChannelFromInstance+0x4e>
  {
    channel = 5;
 8001814:	2305      	movs	r3, #5
 8001816:	60fb      	str	r3, [r7, #12]
 8001818:	e00f      	b.n	800183a <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel6)
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	4a0f      	ldr	r2, [pc, #60]	@ (800185c <DFSDM_GetChannelFromInstance+0x90>)
 800181e:	4293      	cmp	r3, r2
 8001820:	d102      	bne.n	8001828 <DFSDM_GetChannelFromInstance+0x5c>
  {
    channel = 6;
 8001822:	2306      	movs	r3, #6
 8001824:	60fb      	str	r3, [r7, #12]
 8001826:	e008      	b.n	800183a <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel7)
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	4a0d      	ldr	r2, [pc, #52]	@ (8001860 <DFSDM_GetChannelFromInstance+0x94>)
 800182c:	4293      	cmp	r3, r2
 800182e:	d102      	bne.n	8001836 <DFSDM_GetChannelFromInstance+0x6a>
  {
    channel = 7;
 8001830:	2307      	movs	r3, #7
 8001832:	60fb      	str	r3, [r7, #12]
 8001834:	e001      	b.n	800183a <DFSDM_GetChannelFromInstance+0x6e>
  }
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx || STM32L496xx || STM32L4A6xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else /* DFSDM1_Channel3 */
  {
    channel = 3;
 8001836:	2303      	movs	r3, #3
 8001838:	60fb      	str	r3, [r7, #12]
  }

  return channel;
 800183a:	68fb      	ldr	r3, [r7, #12]
}
 800183c:	4618      	mov	r0, r3
 800183e:	3714      	adds	r7, #20
 8001840:	46bd      	mov	sp, r7
 8001842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001846:	4770      	bx	lr
 8001848:	40016000 	.word	0x40016000
 800184c:	40016020 	.word	0x40016020
 8001850:	40016040 	.word	0x40016040
 8001854:	40016080 	.word	0x40016080
 8001858:	400160a0 	.word	0x400160a0
 800185c:	400160c0 	.word	0x400160c0
 8001860:	400160e0 	.word	0x400160e0

08001864 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001864:	b480      	push	{r7}
 8001866:	b087      	sub	sp, #28
 8001868:	af00      	add	r7, sp, #0
 800186a:	6078      	str	r0, [r7, #4]
 800186c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800186e:	2300      	movs	r3, #0
 8001870:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001872:	e17f      	b.n	8001b74 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001874:	683b      	ldr	r3, [r7, #0]
 8001876:	681a      	ldr	r2, [r3, #0]
 8001878:	2101      	movs	r1, #1
 800187a:	697b      	ldr	r3, [r7, #20]
 800187c:	fa01 f303 	lsl.w	r3, r1, r3
 8001880:	4013      	ands	r3, r2
 8001882:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	2b00      	cmp	r3, #0
 8001888:	f000 8171 	beq.w	8001b6e <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800188c:	683b      	ldr	r3, [r7, #0]
 800188e:	685b      	ldr	r3, [r3, #4]
 8001890:	f003 0303 	and.w	r3, r3, #3
 8001894:	2b01      	cmp	r3, #1
 8001896:	d005      	beq.n	80018a4 <HAL_GPIO_Init+0x40>
 8001898:	683b      	ldr	r3, [r7, #0]
 800189a:	685b      	ldr	r3, [r3, #4]
 800189c:	f003 0303 	and.w	r3, r3, #3
 80018a0:	2b02      	cmp	r3, #2
 80018a2:	d130      	bne.n	8001906 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	689b      	ldr	r3, [r3, #8]
 80018a8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80018aa:	697b      	ldr	r3, [r7, #20]
 80018ac:	005b      	lsls	r3, r3, #1
 80018ae:	2203      	movs	r2, #3
 80018b0:	fa02 f303 	lsl.w	r3, r2, r3
 80018b4:	43db      	mvns	r3, r3
 80018b6:	693a      	ldr	r2, [r7, #16]
 80018b8:	4013      	ands	r3, r2
 80018ba:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80018bc:	683b      	ldr	r3, [r7, #0]
 80018be:	68da      	ldr	r2, [r3, #12]
 80018c0:	697b      	ldr	r3, [r7, #20]
 80018c2:	005b      	lsls	r3, r3, #1
 80018c4:	fa02 f303 	lsl.w	r3, r2, r3
 80018c8:	693a      	ldr	r2, [r7, #16]
 80018ca:	4313      	orrs	r3, r2
 80018cc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	693a      	ldr	r2, [r7, #16]
 80018d2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	685b      	ldr	r3, [r3, #4]
 80018d8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80018da:	2201      	movs	r2, #1
 80018dc:	697b      	ldr	r3, [r7, #20]
 80018de:	fa02 f303 	lsl.w	r3, r2, r3
 80018e2:	43db      	mvns	r3, r3
 80018e4:	693a      	ldr	r2, [r7, #16]
 80018e6:	4013      	ands	r3, r2
 80018e8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80018ea:	683b      	ldr	r3, [r7, #0]
 80018ec:	685b      	ldr	r3, [r3, #4]
 80018ee:	091b      	lsrs	r3, r3, #4
 80018f0:	f003 0201 	and.w	r2, r3, #1
 80018f4:	697b      	ldr	r3, [r7, #20]
 80018f6:	fa02 f303 	lsl.w	r3, r2, r3
 80018fa:	693a      	ldr	r2, [r7, #16]
 80018fc:	4313      	orrs	r3, r2
 80018fe:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	693a      	ldr	r2, [r7, #16]
 8001904:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001906:	683b      	ldr	r3, [r7, #0]
 8001908:	685b      	ldr	r3, [r3, #4]
 800190a:	f003 0303 	and.w	r3, r3, #3
 800190e:	2b03      	cmp	r3, #3
 8001910:	d118      	bne.n	8001944 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001916:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001918:	2201      	movs	r2, #1
 800191a:	697b      	ldr	r3, [r7, #20]
 800191c:	fa02 f303 	lsl.w	r3, r2, r3
 8001920:	43db      	mvns	r3, r3
 8001922:	693a      	ldr	r2, [r7, #16]
 8001924:	4013      	ands	r3, r2
 8001926:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8001928:	683b      	ldr	r3, [r7, #0]
 800192a:	685b      	ldr	r3, [r3, #4]
 800192c:	08db      	lsrs	r3, r3, #3
 800192e:	f003 0201 	and.w	r2, r3, #1
 8001932:	697b      	ldr	r3, [r7, #20]
 8001934:	fa02 f303 	lsl.w	r3, r2, r3
 8001938:	693a      	ldr	r2, [r7, #16]
 800193a:	4313      	orrs	r3, r2
 800193c:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	693a      	ldr	r2, [r7, #16]
 8001942:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001944:	683b      	ldr	r3, [r7, #0]
 8001946:	685b      	ldr	r3, [r3, #4]
 8001948:	f003 0303 	and.w	r3, r3, #3
 800194c:	2b03      	cmp	r3, #3
 800194e:	d017      	beq.n	8001980 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	68db      	ldr	r3, [r3, #12]
 8001954:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001956:	697b      	ldr	r3, [r7, #20]
 8001958:	005b      	lsls	r3, r3, #1
 800195a:	2203      	movs	r2, #3
 800195c:	fa02 f303 	lsl.w	r3, r2, r3
 8001960:	43db      	mvns	r3, r3
 8001962:	693a      	ldr	r2, [r7, #16]
 8001964:	4013      	ands	r3, r2
 8001966:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001968:	683b      	ldr	r3, [r7, #0]
 800196a:	689a      	ldr	r2, [r3, #8]
 800196c:	697b      	ldr	r3, [r7, #20]
 800196e:	005b      	lsls	r3, r3, #1
 8001970:	fa02 f303 	lsl.w	r3, r2, r3
 8001974:	693a      	ldr	r2, [r7, #16]
 8001976:	4313      	orrs	r3, r2
 8001978:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	693a      	ldr	r2, [r7, #16]
 800197e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001980:	683b      	ldr	r3, [r7, #0]
 8001982:	685b      	ldr	r3, [r3, #4]
 8001984:	f003 0303 	and.w	r3, r3, #3
 8001988:	2b02      	cmp	r3, #2
 800198a:	d123      	bne.n	80019d4 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800198c:	697b      	ldr	r3, [r7, #20]
 800198e:	08da      	lsrs	r2, r3, #3
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	3208      	adds	r2, #8
 8001994:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001998:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800199a:	697b      	ldr	r3, [r7, #20]
 800199c:	f003 0307 	and.w	r3, r3, #7
 80019a0:	009b      	lsls	r3, r3, #2
 80019a2:	220f      	movs	r2, #15
 80019a4:	fa02 f303 	lsl.w	r3, r2, r3
 80019a8:	43db      	mvns	r3, r3
 80019aa:	693a      	ldr	r2, [r7, #16]
 80019ac:	4013      	ands	r3, r2
 80019ae:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80019b0:	683b      	ldr	r3, [r7, #0]
 80019b2:	691a      	ldr	r2, [r3, #16]
 80019b4:	697b      	ldr	r3, [r7, #20]
 80019b6:	f003 0307 	and.w	r3, r3, #7
 80019ba:	009b      	lsls	r3, r3, #2
 80019bc:	fa02 f303 	lsl.w	r3, r2, r3
 80019c0:	693a      	ldr	r2, [r7, #16]
 80019c2:	4313      	orrs	r3, r2
 80019c4:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80019c6:	697b      	ldr	r3, [r7, #20]
 80019c8:	08da      	lsrs	r2, r3, #3
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	3208      	adds	r2, #8
 80019ce:	6939      	ldr	r1, [r7, #16]
 80019d0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80019da:	697b      	ldr	r3, [r7, #20]
 80019dc:	005b      	lsls	r3, r3, #1
 80019de:	2203      	movs	r2, #3
 80019e0:	fa02 f303 	lsl.w	r3, r2, r3
 80019e4:	43db      	mvns	r3, r3
 80019e6:	693a      	ldr	r2, [r7, #16]
 80019e8:	4013      	ands	r3, r2
 80019ea:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80019ec:	683b      	ldr	r3, [r7, #0]
 80019ee:	685b      	ldr	r3, [r3, #4]
 80019f0:	f003 0203 	and.w	r2, r3, #3
 80019f4:	697b      	ldr	r3, [r7, #20]
 80019f6:	005b      	lsls	r3, r3, #1
 80019f8:	fa02 f303 	lsl.w	r3, r2, r3
 80019fc:	693a      	ldr	r2, [r7, #16]
 80019fe:	4313      	orrs	r3, r2
 8001a00:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	693a      	ldr	r2, [r7, #16]
 8001a06:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001a08:	683b      	ldr	r3, [r7, #0]
 8001a0a:	685b      	ldr	r3, [r3, #4]
 8001a0c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	f000 80ac 	beq.w	8001b6e <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a16:	4b5f      	ldr	r3, [pc, #380]	@ (8001b94 <HAL_GPIO_Init+0x330>)
 8001a18:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001a1a:	4a5e      	ldr	r2, [pc, #376]	@ (8001b94 <HAL_GPIO_Init+0x330>)
 8001a1c:	f043 0301 	orr.w	r3, r3, #1
 8001a20:	6613      	str	r3, [r2, #96]	@ 0x60
 8001a22:	4b5c      	ldr	r3, [pc, #368]	@ (8001b94 <HAL_GPIO_Init+0x330>)
 8001a24:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001a26:	f003 0301 	and.w	r3, r3, #1
 8001a2a:	60bb      	str	r3, [r7, #8]
 8001a2c:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001a2e:	4a5a      	ldr	r2, [pc, #360]	@ (8001b98 <HAL_GPIO_Init+0x334>)
 8001a30:	697b      	ldr	r3, [r7, #20]
 8001a32:	089b      	lsrs	r3, r3, #2
 8001a34:	3302      	adds	r3, #2
 8001a36:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a3a:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001a3c:	697b      	ldr	r3, [r7, #20]
 8001a3e:	f003 0303 	and.w	r3, r3, #3
 8001a42:	009b      	lsls	r3, r3, #2
 8001a44:	220f      	movs	r2, #15
 8001a46:	fa02 f303 	lsl.w	r3, r2, r3
 8001a4a:	43db      	mvns	r3, r3
 8001a4c:	693a      	ldr	r2, [r7, #16]
 8001a4e:	4013      	ands	r3, r2
 8001a50:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001a58:	d025      	beq.n	8001aa6 <HAL_GPIO_Init+0x242>
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	4a4f      	ldr	r2, [pc, #316]	@ (8001b9c <HAL_GPIO_Init+0x338>)
 8001a5e:	4293      	cmp	r3, r2
 8001a60:	d01f      	beq.n	8001aa2 <HAL_GPIO_Init+0x23e>
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	4a4e      	ldr	r2, [pc, #312]	@ (8001ba0 <HAL_GPIO_Init+0x33c>)
 8001a66:	4293      	cmp	r3, r2
 8001a68:	d019      	beq.n	8001a9e <HAL_GPIO_Init+0x23a>
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	4a4d      	ldr	r2, [pc, #308]	@ (8001ba4 <HAL_GPIO_Init+0x340>)
 8001a6e:	4293      	cmp	r3, r2
 8001a70:	d013      	beq.n	8001a9a <HAL_GPIO_Init+0x236>
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	4a4c      	ldr	r2, [pc, #304]	@ (8001ba8 <HAL_GPIO_Init+0x344>)
 8001a76:	4293      	cmp	r3, r2
 8001a78:	d00d      	beq.n	8001a96 <HAL_GPIO_Init+0x232>
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	4a4b      	ldr	r2, [pc, #300]	@ (8001bac <HAL_GPIO_Init+0x348>)
 8001a7e:	4293      	cmp	r3, r2
 8001a80:	d007      	beq.n	8001a92 <HAL_GPIO_Init+0x22e>
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	4a4a      	ldr	r2, [pc, #296]	@ (8001bb0 <HAL_GPIO_Init+0x34c>)
 8001a86:	4293      	cmp	r3, r2
 8001a88:	d101      	bne.n	8001a8e <HAL_GPIO_Init+0x22a>
 8001a8a:	2306      	movs	r3, #6
 8001a8c:	e00c      	b.n	8001aa8 <HAL_GPIO_Init+0x244>
 8001a8e:	2307      	movs	r3, #7
 8001a90:	e00a      	b.n	8001aa8 <HAL_GPIO_Init+0x244>
 8001a92:	2305      	movs	r3, #5
 8001a94:	e008      	b.n	8001aa8 <HAL_GPIO_Init+0x244>
 8001a96:	2304      	movs	r3, #4
 8001a98:	e006      	b.n	8001aa8 <HAL_GPIO_Init+0x244>
 8001a9a:	2303      	movs	r3, #3
 8001a9c:	e004      	b.n	8001aa8 <HAL_GPIO_Init+0x244>
 8001a9e:	2302      	movs	r3, #2
 8001aa0:	e002      	b.n	8001aa8 <HAL_GPIO_Init+0x244>
 8001aa2:	2301      	movs	r3, #1
 8001aa4:	e000      	b.n	8001aa8 <HAL_GPIO_Init+0x244>
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	697a      	ldr	r2, [r7, #20]
 8001aaa:	f002 0203 	and.w	r2, r2, #3
 8001aae:	0092      	lsls	r2, r2, #2
 8001ab0:	4093      	lsls	r3, r2
 8001ab2:	693a      	ldr	r2, [r7, #16]
 8001ab4:	4313      	orrs	r3, r2
 8001ab6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001ab8:	4937      	ldr	r1, [pc, #220]	@ (8001b98 <HAL_GPIO_Init+0x334>)
 8001aba:	697b      	ldr	r3, [r7, #20]
 8001abc:	089b      	lsrs	r3, r3, #2
 8001abe:	3302      	adds	r3, #2
 8001ac0:	693a      	ldr	r2, [r7, #16]
 8001ac2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001ac6:	4b3b      	ldr	r3, [pc, #236]	@ (8001bb4 <HAL_GPIO_Init+0x350>)
 8001ac8:	689b      	ldr	r3, [r3, #8]
 8001aca:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	43db      	mvns	r3, r3
 8001ad0:	693a      	ldr	r2, [r7, #16]
 8001ad2:	4013      	ands	r3, r2
 8001ad4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001ad6:	683b      	ldr	r3, [r7, #0]
 8001ad8:	685b      	ldr	r3, [r3, #4]
 8001ada:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d003      	beq.n	8001aea <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001ae2:	693a      	ldr	r2, [r7, #16]
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	4313      	orrs	r3, r2
 8001ae8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001aea:	4a32      	ldr	r2, [pc, #200]	@ (8001bb4 <HAL_GPIO_Init+0x350>)
 8001aec:	693b      	ldr	r3, [r7, #16]
 8001aee:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001af0:	4b30      	ldr	r3, [pc, #192]	@ (8001bb4 <HAL_GPIO_Init+0x350>)
 8001af2:	68db      	ldr	r3, [r3, #12]
 8001af4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	43db      	mvns	r3, r3
 8001afa:	693a      	ldr	r2, [r7, #16]
 8001afc:	4013      	ands	r3, r2
 8001afe:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001b00:	683b      	ldr	r3, [r7, #0]
 8001b02:	685b      	ldr	r3, [r3, #4]
 8001b04:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d003      	beq.n	8001b14 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001b0c:	693a      	ldr	r2, [r7, #16]
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	4313      	orrs	r3, r2
 8001b12:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001b14:	4a27      	ldr	r2, [pc, #156]	@ (8001bb4 <HAL_GPIO_Init+0x350>)
 8001b16:	693b      	ldr	r3, [r7, #16]
 8001b18:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001b1a:	4b26      	ldr	r3, [pc, #152]	@ (8001bb4 <HAL_GPIO_Init+0x350>)
 8001b1c:	685b      	ldr	r3, [r3, #4]
 8001b1e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	43db      	mvns	r3, r3
 8001b24:	693a      	ldr	r2, [r7, #16]
 8001b26:	4013      	ands	r3, r2
 8001b28:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001b2a:	683b      	ldr	r3, [r7, #0]
 8001b2c:	685b      	ldr	r3, [r3, #4]
 8001b2e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d003      	beq.n	8001b3e <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001b36:	693a      	ldr	r2, [r7, #16]
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	4313      	orrs	r3, r2
 8001b3c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001b3e:	4a1d      	ldr	r2, [pc, #116]	@ (8001bb4 <HAL_GPIO_Init+0x350>)
 8001b40:	693b      	ldr	r3, [r7, #16]
 8001b42:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001b44:	4b1b      	ldr	r3, [pc, #108]	@ (8001bb4 <HAL_GPIO_Init+0x350>)
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	43db      	mvns	r3, r3
 8001b4e:	693a      	ldr	r2, [r7, #16]
 8001b50:	4013      	ands	r3, r2
 8001b52:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001b54:	683b      	ldr	r3, [r7, #0]
 8001b56:	685b      	ldr	r3, [r3, #4]
 8001b58:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d003      	beq.n	8001b68 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001b60:	693a      	ldr	r2, [r7, #16]
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	4313      	orrs	r3, r2
 8001b66:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001b68:	4a12      	ldr	r2, [pc, #72]	@ (8001bb4 <HAL_GPIO_Init+0x350>)
 8001b6a:	693b      	ldr	r3, [r7, #16]
 8001b6c:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001b6e:	697b      	ldr	r3, [r7, #20]
 8001b70:	3301      	adds	r3, #1
 8001b72:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b74:	683b      	ldr	r3, [r7, #0]
 8001b76:	681a      	ldr	r2, [r3, #0]
 8001b78:	697b      	ldr	r3, [r7, #20]
 8001b7a:	fa22 f303 	lsr.w	r3, r2, r3
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	f47f ae78 	bne.w	8001874 <HAL_GPIO_Init+0x10>
  }
}
 8001b84:	bf00      	nop
 8001b86:	bf00      	nop
 8001b88:	371c      	adds	r7, #28
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b90:	4770      	bx	lr
 8001b92:	bf00      	nop
 8001b94:	40021000 	.word	0x40021000
 8001b98:	40010000 	.word	0x40010000
 8001b9c:	48000400 	.word	0x48000400
 8001ba0:	48000800 	.word	0x48000800
 8001ba4:	48000c00 	.word	0x48000c00
 8001ba8:	48001000 	.word	0x48001000
 8001bac:	48001400 	.word	0x48001400
 8001bb0:	48001800 	.word	0x48001800
 8001bb4:	40010400 	.word	0x40010400

08001bb8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001bb8:	b480      	push	{r7}
 8001bba:	b083      	sub	sp, #12
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	6078      	str	r0, [r7, #4]
 8001bc0:	460b      	mov	r3, r1
 8001bc2:	807b      	strh	r3, [r7, #2]
 8001bc4:	4613      	mov	r3, r2
 8001bc6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001bc8:	787b      	ldrb	r3, [r7, #1]
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d003      	beq.n	8001bd6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001bce:	887a      	ldrh	r2, [r7, #2]
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001bd4:	e002      	b.n	8001bdc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001bd6:	887a      	ldrh	r2, [r7, #2]
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001bdc:	bf00      	nop
 8001bde:	370c      	adds	r7, #12
 8001be0:	46bd      	mov	sp, r7
 8001be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be6:	4770      	bx	lr

08001be8 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001be8:	b480      	push	{r7}
 8001bea:	b085      	sub	sp, #20
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	6078      	str	r0, [r7, #4]
 8001bf0:	460b      	mov	r3, r1
 8001bf2:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	695b      	ldr	r3, [r3, #20]
 8001bf8:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001bfa:	887a      	ldrh	r2, [r7, #2]
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	4013      	ands	r3, r2
 8001c00:	041a      	lsls	r2, r3, #16
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	43d9      	mvns	r1, r3
 8001c06:	887b      	ldrh	r3, [r7, #2]
 8001c08:	400b      	ands	r3, r1
 8001c0a:	431a      	orrs	r2, r3
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	619a      	str	r2, [r3, #24]
}
 8001c10:	bf00      	nop
 8001c12:	3714      	adds	r7, #20
 8001c14:	46bd      	mov	sp, r7
 8001c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1a:	4770      	bx	lr

08001c1c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	b082      	sub	sp, #8
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	4603      	mov	r3, r0
 8001c24:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001c26:	4b08      	ldr	r3, [pc, #32]	@ (8001c48 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001c28:	695a      	ldr	r2, [r3, #20]
 8001c2a:	88fb      	ldrh	r3, [r7, #6]
 8001c2c:	4013      	ands	r3, r2
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d006      	beq.n	8001c40 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001c32:	4a05      	ldr	r2, [pc, #20]	@ (8001c48 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001c34:	88fb      	ldrh	r3, [r7, #6]
 8001c36:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001c38:	88fb      	ldrh	r3, [r7, #6]
 8001c3a:	4618      	mov	r0, r3
 8001c3c:	f7fe ffee 	bl	8000c1c <HAL_GPIO_EXTI_Callback>
  }
}
 8001c40:	bf00      	nop
 8001c42:	3708      	adds	r7, #8
 8001c44:	46bd      	mov	sp, r7
 8001c46:	bd80      	pop	{r7, pc}
 8001c48:	40010400 	.word	0x40010400

08001c4c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	b082      	sub	sp, #8
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d101      	bne.n	8001c5e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001c5a:	2301      	movs	r3, #1
 8001c5c:	e08d      	b.n	8001d7a <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001c64:	b2db      	uxtb	r3, r3
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d106      	bne.n	8001c78 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001c72:	6878      	ldr	r0, [r7, #4]
 8001c74:	f7ff f886 	bl	8000d84 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	2224      	movs	r2, #36	@ 0x24
 8001c7c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	681a      	ldr	r2, [r3, #0]
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	f022 0201 	bic.w	r2, r2, #1
 8001c8e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	685a      	ldr	r2, [r3, #4]
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001c9c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	689a      	ldr	r2, [r3, #8]
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001cac:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	68db      	ldr	r3, [r3, #12]
 8001cb2:	2b01      	cmp	r3, #1
 8001cb4:	d107      	bne.n	8001cc6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	689a      	ldr	r2, [r3, #8]
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001cc2:	609a      	str	r2, [r3, #8]
 8001cc4:	e006      	b.n	8001cd4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	689a      	ldr	r2, [r3, #8]
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8001cd2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	68db      	ldr	r3, [r3, #12]
 8001cd8:	2b02      	cmp	r3, #2
 8001cda:	d108      	bne.n	8001cee <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	685a      	ldr	r2, [r3, #4]
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001cea:	605a      	str	r2, [r3, #4]
 8001cec:	e007      	b.n	8001cfe <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	685a      	ldr	r2, [r3, #4]
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001cfc:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	685b      	ldr	r3, [r3, #4]
 8001d04:	687a      	ldr	r2, [r7, #4]
 8001d06:	6812      	ldr	r2, [r2, #0]
 8001d08:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001d0c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001d10:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	68da      	ldr	r2, [r3, #12]
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001d20:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	691a      	ldr	r2, [r3, #16]
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	695b      	ldr	r3, [r3, #20]
 8001d2a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	699b      	ldr	r3, [r3, #24]
 8001d32:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	430a      	orrs	r2, r1
 8001d3a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	69d9      	ldr	r1, [r3, #28]
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	6a1a      	ldr	r2, [r3, #32]
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	430a      	orrs	r2, r1
 8001d4a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	681a      	ldr	r2, [r3, #0]
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	f042 0201 	orr.w	r2, r2, #1
 8001d5a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	2200      	movs	r2, #0
 8001d60:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	2220      	movs	r2, #32
 8001d66:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	2200      	movs	r2, #0
 8001d74:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8001d78:	2300      	movs	r3, #0
}
 8001d7a:	4618      	mov	r0, r3
 8001d7c:	3708      	adds	r7, #8
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	bd80      	pop	{r7, pc}

08001d82 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001d82:	b480      	push	{r7}
 8001d84:	b083      	sub	sp, #12
 8001d86:	af00      	add	r7, sp, #0
 8001d88:	6078      	str	r0, [r7, #4]
 8001d8a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001d92:	b2db      	uxtb	r3, r3
 8001d94:	2b20      	cmp	r3, #32
 8001d96:	d138      	bne.n	8001e0a <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001d9e:	2b01      	cmp	r3, #1
 8001da0:	d101      	bne.n	8001da6 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001da2:	2302      	movs	r3, #2
 8001da4:	e032      	b.n	8001e0c <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	2201      	movs	r2, #1
 8001daa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	2224      	movs	r2, #36	@ 0x24
 8001db2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	681a      	ldr	r2, [r3, #0]
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	f022 0201 	bic.w	r2, r2, #1
 8001dc4:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	681a      	ldr	r2, [r3, #0]
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8001dd4:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	6819      	ldr	r1, [r3, #0]
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	683a      	ldr	r2, [r7, #0]
 8001de2:	430a      	orrs	r2, r1
 8001de4:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	681a      	ldr	r2, [r3, #0]
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	f042 0201 	orr.w	r2, r2, #1
 8001df4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	2220      	movs	r2, #32
 8001dfa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	2200      	movs	r2, #0
 8001e02:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8001e06:	2300      	movs	r3, #0
 8001e08:	e000      	b.n	8001e0c <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001e0a:	2302      	movs	r3, #2
  }
}
 8001e0c:	4618      	mov	r0, r3
 8001e0e:	370c      	adds	r7, #12
 8001e10:	46bd      	mov	sp, r7
 8001e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e16:	4770      	bx	lr

08001e18 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001e18:	b480      	push	{r7}
 8001e1a:	b085      	sub	sp, #20
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	6078      	str	r0, [r7, #4]
 8001e20:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001e28:	b2db      	uxtb	r3, r3
 8001e2a:	2b20      	cmp	r3, #32
 8001e2c:	d139      	bne.n	8001ea2 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001e34:	2b01      	cmp	r3, #1
 8001e36:	d101      	bne.n	8001e3c <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001e38:	2302      	movs	r3, #2
 8001e3a:	e033      	b.n	8001ea4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	2201      	movs	r2, #1
 8001e40:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	2224      	movs	r2, #36	@ 0x24
 8001e48:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	681a      	ldr	r2, [r3, #0]
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	f022 0201 	bic.w	r2, r2, #1
 8001e5a:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8001e6a:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001e6c:	683b      	ldr	r3, [r7, #0]
 8001e6e:	021b      	lsls	r3, r3, #8
 8001e70:	68fa      	ldr	r2, [r7, #12]
 8001e72:	4313      	orrs	r3, r2
 8001e74:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	68fa      	ldr	r2, [r7, #12]
 8001e7c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	681a      	ldr	r2, [r3, #0]
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	f042 0201 	orr.w	r2, r2, #1
 8001e8c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	2220      	movs	r2, #32
 8001e92:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	2200      	movs	r2, #0
 8001e9a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8001e9e:	2300      	movs	r3, #0
 8001ea0:	e000      	b.n	8001ea4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001ea2:	2302      	movs	r3, #2
  }
}
 8001ea4:	4618      	mov	r0, r3
 8001ea6:	3714      	adds	r7, #20
 8001ea8:	46bd      	mov	sp, r7
 8001eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eae:	4770      	bx	lr

08001eb0 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	b086      	sub	sp, #24
 8001eb4:	af02      	add	r7, sp, #8
 8001eb6:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d101      	bne.n	8001ec2 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001ebe:	2301      	movs	r3, #1
 8001ec0:	e101      	b.n	80020c6 <HAL_PCD_Init+0x216>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8001ec8:	b2db      	uxtb	r3, r3
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d106      	bne.n	8001edc <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001ed6:	6878      	ldr	r0, [r7, #4]
 8001ed8:	f7ff f8de 	bl	8001098 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	2203      	movs	r2, #3
 8001ee0:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Disable DMA mode for FS instance */
  hpcd->Init.dma_enable = 0U;
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	719a      	strb	r2, [r3, #6]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	4618      	mov	r0, r3
 8001ef0:	f002 fb10 	bl	8004514 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	6818      	ldr	r0, [r3, #0]
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	7c1a      	ldrb	r2, [r3, #16]
 8001efc:	f88d 2000 	strb.w	r2, [sp]
 8001f00:	3304      	adds	r3, #4
 8001f02:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001f04:	f002 fad9 	bl	80044ba <USB_CoreInit>
 8001f08:	4603      	mov	r3, r0
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d005      	beq.n	8001f1a <HAL_PCD_Init+0x6a>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	2202      	movs	r2, #2
 8001f12:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8001f16:	2301      	movs	r3, #1
 8001f18:	e0d5      	b.n	80020c6 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	2100      	movs	r1, #0
 8001f20:	4618      	mov	r0, r3
 8001f22:	f002 fb08 	bl	8004536 <USB_SetCurrentMode>
 8001f26:	4603      	mov	r3, r0
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d005      	beq.n	8001f38 <HAL_PCD_Init+0x88>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	2202      	movs	r2, #2
 8001f30:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8001f34:	2301      	movs	r3, #1
 8001f36:	e0c6      	b.n	80020c6 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001f38:	2300      	movs	r3, #0
 8001f3a:	73fb      	strb	r3, [r7, #15]
 8001f3c:	e04a      	b.n	8001fd4 <HAL_PCD_Init+0x124>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001f3e:	7bfa      	ldrb	r2, [r7, #15]
 8001f40:	6879      	ldr	r1, [r7, #4]
 8001f42:	4613      	mov	r3, r2
 8001f44:	00db      	lsls	r3, r3, #3
 8001f46:	4413      	add	r3, r2
 8001f48:	009b      	lsls	r3, r3, #2
 8001f4a:	440b      	add	r3, r1
 8001f4c:	3315      	adds	r3, #21
 8001f4e:	2201      	movs	r2, #1
 8001f50:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001f52:	7bfa      	ldrb	r2, [r7, #15]
 8001f54:	6879      	ldr	r1, [r7, #4]
 8001f56:	4613      	mov	r3, r2
 8001f58:	00db      	lsls	r3, r3, #3
 8001f5a:	4413      	add	r3, r2
 8001f5c:	009b      	lsls	r3, r3, #2
 8001f5e:	440b      	add	r3, r1
 8001f60:	3314      	adds	r3, #20
 8001f62:	7bfa      	ldrb	r2, [r7, #15]
 8001f64:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001f66:	7bfa      	ldrb	r2, [r7, #15]
 8001f68:	7bfb      	ldrb	r3, [r7, #15]
 8001f6a:	b298      	uxth	r0, r3
 8001f6c:	6879      	ldr	r1, [r7, #4]
 8001f6e:	4613      	mov	r3, r2
 8001f70:	00db      	lsls	r3, r3, #3
 8001f72:	4413      	add	r3, r2
 8001f74:	009b      	lsls	r3, r3, #2
 8001f76:	440b      	add	r3, r1
 8001f78:	332e      	adds	r3, #46	@ 0x2e
 8001f7a:	4602      	mov	r2, r0
 8001f7c:	801a      	strh	r2, [r3, #0]
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001f7e:	7bfa      	ldrb	r2, [r7, #15]
 8001f80:	6879      	ldr	r1, [r7, #4]
 8001f82:	4613      	mov	r3, r2
 8001f84:	00db      	lsls	r3, r3, #3
 8001f86:	4413      	add	r3, r2
 8001f88:	009b      	lsls	r3, r3, #2
 8001f8a:	440b      	add	r3, r1
 8001f8c:	3318      	adds	r3, #24
 8001f8e:	2200      	movs	r2, #0
 8001f90:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001f92:	7bfa      	ldrb	r2, [r7, #15]
 8001f94:	6879      	ldr	r1, [r7, #4]
 8001f96:	4613      	mov	r3, r2
 8001f98:	00db      	lsls	r3, r3, #3
 8001f9a:	4413      	add	r3, r2
 8001f9c:	009b      	lsls	r3, r3, #2
 8001f9e:	440b      	add	r3, r1
 8001fa0:	331c      	adds	r3, #28
 8001fa2:	2200      	movs	r2, #0
 8001fa4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001fa6:	7bfa      	ldrb	r2, [r7, #15]
 8001fa8:	6879      	ldr	r1, [r7, #4]
 8001faa:	4613      	mov	r3, r2
 8001fac:	00db      	lsls	r3, r3, #3
 8001fae:	4413      	add	r3, r2
 8001fb0:	009b      	lsls	r3, r3, #2
 8001fb2:	440b      	add	r3, r1
 8001fb4:	3320      	adds	r3, #32
 8001fb6:	2200      	movs	r2, #0
 8001fb8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001fba:	7bfa      	ldrb	r2, [r7, #15]
 8001fbc:	6879      	ldr	r1, [r7, #4]
 8001fbe:	4613      	mov	r3, r2
 8001fc0:	00db      	lsls	r3, r3, #3
 8001fc2:	4413      	add	r3, r2
 8001fc4:	009b      	lsls	r3, r3, #2
 8001fc6:	440b      	add	r3, r1
 8001fc8:	3324      	adds	r3, #36	@ 0x24
 8001fca:	2200      	movs	r2, #0
 8001fcc:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001fce:	7bfb      	ldrb	r3, [r7, #15]
 8001fd0:	3301      	adds	r3, #1
 8001fd2:	73fb      	strb	r3, [r7, #15]
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	791b      	ldrb	r3, [r3, #4]
 8001fd8:	7bfa      	ldrb	r2, [r7, #15]
 8001fda:	429a      	cmp	r2, r3
 8001fdc:	d3af      	bcc.n	8001f3e <HAL_PCD_Init+0x8e>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001fde:	2300      	movs	r3, #0
 8001fe0:	73fb      	strb	r3, [r7, #15]
 8001fe2:	e044      	b.n	800206e <HAL_PCD_Init+0x1be>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001fe4:	7bfa      	ldrb	r2, [r7, #15]
 8001fe6:	6879      	ldr	r1, [r7, #4]
 8001fe8:	4613      	mov	r3, r2
 8001fea:	00db      	lsls	r3, r3, #3
 8001fec:	4413      	add	r3, r2
 8001fee:	009b      	lsls	r3, r3, #2
 8001ff0:	440b      	add	r3, r1
 8001ff2:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8001ff6:	2200      	movs	r2, #0
 8001ff8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001ffa:	7bfa      	ldrb	r2, [r7, #15]
 8001ffc:	6879      	ldr	r1, [r7, #4]
 8001ffe:	4613      	mov	r3, r2
 8002000:	00db      	lsls	r3, r3, #3
 8002002:	4413      	add	r3, r2
 8002004:	009b      	lsls	r3, r3, #2
 8002006:	440b      	add	r3, r1
 8002008:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 800200c:	7bfa      	ldrb	r2, [r7, #15]
 800200e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002010:	7bfa      	ldrb	r2, [r7, #15]
 8002012:	6879      	ldr	r1, [r7, #4]
 8002014:	4613      	mov	r3, r2
 8002016:	00db      	lsls	r3, r3, #3
 8002018:	4413      	add	r3, r2
 800201a:	009b      	lsls	r3, r3, #2
 800201c:	440b      	add	r3, r1
 800201e:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8002022:	2200      	movs	r2, #0
 8002024:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002026:	7bfa      	ldrb	r2, [r7, #15]
 8002028:	6879      	ldr	r1, [r7, #4]
 800202a:	4613      	mov	r3, r2
 800202c:	00db      	lsls	r3, r3, #3
 800202e:	4413      	add	r3, r2
 8002030:	009b      	lsls	r3, r3, #2
 8002032:	440b      	add	r3, r1
 8002034:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8002038:	2200      	movs	r2, #0
 800203a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800203c:	7bfa      	ldrb	r2, [r7, #15]
 800203e:	6879      	ldr	r1, [r7, #4]
 8002040:	4613      	mov	r3, r2
 8002042:	00db      	lsls	r3, r3, #3
 8002044:	4413      	add	r3, r2
 8002046:	009b      	lsls	r3, r3, #2
 8002048:	440b      	add	r3, r1
 800204a:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800204e:	2200      	movs	r2, #0
 8002050:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002052:	7bfa      	ldrb	r2, [r7, #15]
 8002054:	6879      	ldr	r1, [r7, #4]
 8002056:	4613      	mov	r3, r2
 8002058:	00db      	lsls	r3, r3, #3
 800205a:	4413      	add	r3, r2
 800205c:	009b      	lsls	r3, r3, #2
 800205e:	440b      	add	r3, r1
 8002060:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8002064:	2200      	movs	r2, #0
 8002066:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002068:	7bfb      	ldrb	r3, [r7, #15]
 800206a:	3301      	adds	r3, #1
 800206c:	73fb      	strb	r3, [r7, #15]
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	791b      	ldrb	r3, [r3, #4]
 8002072:	7bfa      	ldrb	r2, [r7, #15]
 8002074:	429a      	cmp	r2, r3
 8002076:	d3b5      	bcc.n	8001fe4 <HAL_PCD_Init+0x134>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	6818      	ldr	r0, [r3, #0]
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	7c1a      	ldrb	r2, [r3, #16]
 8002080:	f88d 2000 	strb.w	r2, [sp]
 8002084:	3304      	adds	r3, #4
 8002086:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002088:	f002 faa2 	bl	80045d0 <USB_DevInit>
 800208c:	4603      	mov	r3, r0
 800208e:	2b00      	cmp	r3, #0
 8002090:	d005      	beq.n	800209e <HAL_PCD_Init+0x1ee>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	2202      	movs	r2, #2
 8002096:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800209a:	2301      	movs	r3, #1
 800209c:	e013      	b.n	80020c6 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	2200      	movs	r2, #0
 80020a2:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	2201      	movs	r2, #1
 80020a8:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	7b1b      	ldrb	r3, [r3, #12]
 80020b0:	2b01      	cmp	r3, #1
 80020b2:	d102      	bne.n	80020ba <HAL_PCD_Init+0x20a>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80020b4:	6878      	ldr	r0, [r7, #4]
 80020b6:	f000 f80a 	bl	80020ce <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	4618      	mov	r0, r3
 80020c0:	f002 fc47 	bl	8004952 <USB_DevDisconnect>

  return HAL_OK;
 80020c4:	2300      	movs	r3, #0
}
 80020c6:	4618      	mov	r0, r3
 80020c8:	3710      	adds	r7, #16
 80020ca:	46bd      	mov	sp, r7
 80020cc:	bd80      	pop	{r7, pc}

080020ce <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80020ce:	b480      	push	{r7}
 80020d0:	b085      	sub	sp, #20
 80020d2:	af00      	add	r7, sp, #0
 80020d4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	2201      	movs	r2, #1
 80020e0:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	2200      	movs	r2, #0
 80020e8:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	699b      	ldr	r3, [r3, #24]
 80020f0:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80020fc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002100:	f043 0303 	orr.w	r3, r3, #3
 8002104:	68fa      	ldr	r2, [r7, #12]
 8002106:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8002108:	2300      	movs	r3, #0
}
 800210a:	4618      	mov	r0, r3
 800210c:	3714      	adds	r7, #20
 800210e:	46bd      	mov	sp, r7
 8002110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002114:	4770      	bx	lr
	...

08002118 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002118:	b480      	push	{r7}
 800211a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800211c:	4b05      	ldr	r3, [pc, #20]	@ (8002134 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	4a04      	ldr	r2, [pc, #16]	@ (8002134 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002122:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002126:	6013      	str	r3, [r2, #0]
}
 8002128:	bf00      	nop
 800212a:	46bd      	mov	sp, r7
 800212c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002130:	4770      	bx	lr
 8002132:	bf00      	nop
 8002134:	40007000 	.word	0x40007000

08002138 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002138:	b480      	push	{r7}
 800213a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800213c:	4b04      	ldr	r3, [pc, #16]	@ (8002150 <HAL_PWREx_GetVoltageRange+0x18>)
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8002144:	4618      	mov	r0, r3
 8002146:	46bd      	mov	sp, r7
 8002148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214c:	4770      	bx	lr
 800214e:	bf00      	nop
 8002150:	40007000 	.word	0x40007000

08002154 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002154:	b480      	push	{r7}
 8002156:	b085      	sub	sp, #20
 8002158:	af00      	add	r7, sp, #0
 800215a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002162:	d130      	bne.n	80021c6 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002164:	4b23      	ldr	r3, [pc, #140]	@ (80021f4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800216c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002170:	d038      	beq.n	80021e4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002172:	4b20      	ldr	r3, [pc, #128]	@ (80021f4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800217a:	4a1e      	ldr	r2, [pc, #120]	@ (80021f4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800217c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002180:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002182:	4b1d      	ldr	r3, [pc, #116]	@ (80021f8 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	2232      	movs	r2, #50	@ 0x32
 8002188:	fb02 f303 	mul.w	r3, r2, r3
 800218c:	4a1b      	ldr	r2, [pc, #108]	@ (80021fc <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800218e:	fba2 2303 	umull	r2, r3, r2, r3
 8002192:	0c9b      	lsrs	r3, r3, #18
 8002194:	3301      	adds	r3, #1
 8002196:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002198:	e002      	b.n	80021a0 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	3b01      	subs	r3, #1
 800219e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80021a0:	4b14      	ldr	r3, [pc, #80]	@ (80021f4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80021a2:	695b      	ldr	r3, [r3, #20]
 80021a4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80021a8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80021ac:	d102      	bne.n	80021b4 <HAL_PWREx_ControlVoltageScaling+0x60>
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d1f2      	bne.n	800219a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80021b4:	4b0f      	ldr	r3, [pc, #60]	@ (80021f4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80021b6:	695b      	ldr	r3, [r3, #20]
 80021b8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80021bc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80021c0:	d110      	bne.n	80021e4 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80021c2:	2303      	movs	r3, #3
 80021c4:	e00f      	b.n	80021e6 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80021c6:	4b0b      	ldr	r3, [pc, #44]	@ (80021f4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80021ce:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80021d2:	d007      	beq.n	80021e4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80021d4:	4b07      	ldr	r3, [pc, #28]	@ (80021f4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80021dc:	4a05      	ldr	r2, [pc, #20]	@ (80021f4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80021de:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80021e2:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80021e4:	2300      	movs	r3, #0
}
 80021e6:	4618      	mov	r0, r3
 80021e8:	3714      	adds	r7, #20
 80021ea:	46bd      	mov	sp, r7
 80021ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f0:	4770      	bx	lr
 80021f2:	bf00      	nop
 80021f4:	40007000 	.word	0x40007000
 80021f8:	20000000 	.word	0x20000000
 80021fc:	431bde83 	.word	0x431bde83

08002200 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8002200:	b480      	push	{r7}
 8002202:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8002204:	4b05      	ldr	r3, [pc, #20]	@ (800221c <HAL_PWREx_EnableVddUSB+0x1c>)
 8002206:	685b      	ldr	r3, [r3, #4]
 8002208:	4a04      	ldr	r2, [pc, #16]	@ (800221c <HAL_PWREx_EnableVddUSB+0x1c>)
 800220a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800220e:	6053      	str	r3, [r2, #4]
}
 8002210:	bf00      	nop
 8002212:	46bd      	mov	sp, r7
 8002214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002218:	4770      	bx	lr
 800221a:	bf00      	nop
 800221c:	40007000 	.word	0x40007000

08002220 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8002220:	b580      	push	{r7, lr}
 8002222:	b086      	sub	sp, #24
 8002224:	af02      	add	r7, sp, #8
 8002226:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8002228:	f7ff f8ce 	bl	80013c8 <HAL_GetTick>
 800222c:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	2b00      	cmp	r3, #0
 8002232:	d101      	bne.n	8002238 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8002234:	2301      	movs	r3, #1
 8002236:	e063      	b.n	8002300 <HAL_QSPI_Init+0xe0>
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }
#endif

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 800223e:	b2db      	uxtb	r3, r3
 8002240:	2b00      	cmp	r3, #0
 8002242:	d10b      	bne.n	800225c <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	2200      	movs	r2, #0
 8002248:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 800224c:	6878      	ldr	r0, [r7, #4]
 800224e:	f7fe fdf7 	bl	8000e40 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 8002252:	f241 3188 	movw	r1, #5000	@ 0x1388
 8002256:	6878      	ldr	r0, [r7, #4]
 8002258:	f000 f858 	bl	800230c <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	f423 6170 	bic.w	r1, r3, #3840	@ 0xf00
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	689b      	ldr	r3, [r3, #8]
 800226a:	3b01      	subs	r3, #1
 800226c:	021a      	lsls	r2, r3, #8
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	430a      	orrs	r2, r1
 8002274:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800227a:	9300      	str	r3, [sp, #0]
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	2200      	movs	r2, #0
 8002280:	2120      	movs	r1, #32
 8002282:	6878      	ldr	r0, [r7, #4]
 8002284:	f000 f850 	bl	8002328 <QSPI_WaitFlagStateUntilTimeout>
 8002288:	4603      	mov	r3, r0
 800228a:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 800228c:	7afb      	ldrb	r3, [r7, #11]
 800228e:	2b00      	cmp	r3, #0
 8002290:	d131      	bne.n	80022f6 <HAL_QSPI_Init+0xd6>
#if defined(QUADSPI_CR_DFM)
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));
#else
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT),
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800229c:	f023 0310 	bic.w	r3, r3, #16
 80022a0:	687a      	ldr	r2, [r7, #4]
 80022a2:	6852      	ldr	r2, [r2, #4]
 80022a4:	0611      	lsls	r1, r2, #24
 80022a6:	687a      	ldr	r2, [r7, #4]
 80022a8:	68d2      	ldr	r2, [r2, #12]
 80022aa:	4311      	orrs	r1, r2
 80022ac:	687a      	ldr	r2, [r7, #4]
 80022ae:	6812      	ldr	r2, [r2, #0]
 80022b0:	430b      	orrs	r3, r1
 80022b2:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting));
#endif

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	685a      	ldr	r2, [r3, #4]
 80022ba:	4b13      	ldr	r3, [pc, #76]	@ (8002308 <HAL_QSPI_Init+0xe8>)
 80022bc:	4013      	ands	r3, r2
 80022be:	687a      	ldr	r2, [r7, #4]
 80022c0:	6912      	ldr	r2, [r2, #16]
 80022c2:	0411      	lsls	r1, r2, #16
 80022c4:	687a      	ldr	r2, [r7, #4]
 80022c6:	6952      	ldr	r2, [r2, #20]
 80022c8:	4311      	orrs	r1, r2
 80022ca:	687a      	ldr	r2, [r7, #4]
 80022cc:	6992      	ldr	r2, [r2, #24]
 80022ce:	4311      	orrs	r1, r2
 80022d0:	687a      	ldr	r2, [r7, #4]
 80022d2:	6812      	ldr	r2, [r2, #0]
 80022d4:	430b      	orrs	r3, r1
 80022d6:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	681a      	ldr	r2, [r3, #0]
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	f042 0201 	orr.w	r2, r2, #1
 80022e6:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	2200      	movs	r2, #0
 80022ec:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	2201      	movs	r2, #1
 80022f2:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	2200      	movs	r2, #0
 80022fa:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  /* Return function status */
  return status;
 80022fe:	7afb      	ldrb	r3, [r7, #11]
}
 8002300:	4618      	mov	r0, r3
 8002302:	3710      	adds	r7, #16
 8002304:	46bd      	mov	sp, r7
 8002306:	bd80      	pop	{r7, pc}
 8002308:	ffe0f8fe 	.word	0xffe0f8fe

0800230c <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 800230c:	b480      	push	{r7}
 800230e:	b083      	sub	sp, #12
 8002310:	af00      	add	r7, sp, #0
 8002312:	6078      	str	r0, [r7, #4]
 8002314:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	683a      	ldr	r2, [r7, #0]
 800231a:	641a      	str	r2, [r3, #64]	@ 0x40
}
 800231c:	bf00      	nop
 800231e:	370c      	adds	r7, #12
 8002320:	46bd      	mov	sp, r7
 8002322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002326:	4770      	bx	lr

08002328 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8002328:	b580      	push	{r7, lr}
 800232a:	b084      	sub	sp, #16
 800232c:	af00      	add	r7, sp, #0
 800232e:	60f8      	str	r0, [r7, #12]
 8002330:	60b9      	str	r1, [r7, #8]
 8002332:	603b      	str	r3, [r7, #0]
 8002334:	4613      	mov	r3, r2
 8002336:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8002338:	e01a      	b.n	8002370 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800233a:	69bb      	ldr	r3, [r7, #24]
 800233c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002340:	d016      	beq.n	8002370 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002342:	f7ff f841 	bl	80013c8 <HAL_GetTick>
 8002346:	4602      	mov	r2, r0
 8002348:	683b      	ldr	r3, [r7, #0]
 800234a:	1ad3      	subs	r3, r2, r3
 800234c:	69ba      	ldr	r2, [r7, #24]
 800234e:	429a      	cmp	r2, r3
 8002350:	d302      	bcc.n	8002358 <QSPI_WaitFlagStateUntilTimeout+0x30>
 8002352:	69bb      	ldr	r3, [r7, #24]
 8002354:	2b00      	cmp	r3, #0
 8002356:	d10b      	bne.n	8002370 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	2204      	movs	r2, #4
 800235c:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002364:	f043 0201 	orr.w	r2, r3, #1
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	63da      	str	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800236c:	2301      	movs	r3, #1
 800236e:	e00e      	b.n	800238e <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	689a      	ldr	r2, [r3, #8]
 8002376:	68bb      	ldr	r3, [r7, #8]
 8002378:	4013      	ands	r3, r2
 800237a:	2b00      	cmp	r3, #0
 800237c:	bf14      	ite	ne
 800237e:	2301      	movne	r3, #1
 8002380:	2300      	moveq	r3, #0
 8002382:	b2db      	uxtb	r3, r3
 8002384:	461a      	mov	r2, r3
 8002386:	79fb      	ldrb	r3, [r7, #7]
 8002388:	429a      	cmp	r2, r3
 800238a:	d1d6      	bne.n	800233a <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800238c:	2300      	movs	r3, #0
}
 800238e:	4618      	mov	r0, r3
 8002390:	3710      	adds	r7, #16
 8002392:	46bd      	mov	sp, r7
 8002394:	bd80      	pop	{r7, pc}
	...

08002398 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002398:	b580      	push	{r7, lr}
 800239a:	b088      	sub	sp, #32
 800239c:	af00      	add	r7, sp, #0
 800239e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d101      	bne.n	80023aa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80023a6:	2301      	movs	r3, #1
 80023a8:	e3ca      	b.n	8002b40 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80023aa:	4b97      	ldr	r3, [pc, #604]	@ (8002608 <HAL_RCC_OscConfig+0x270>)
 80023ac:	689b      	ldr	r3, [r3, #8]
 80023ae:	f003 030c 	and.w	r3, r3, #12
 80023b2:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80023b4:	4b94      	ldr	r3, [pc, #592]	@ (8002608 <HAL_RCC_OscConfig+0x270>)
 80023b6:	68db      	ldr	r3, [r3, #12]
 80023b8:	f003 0303 	and.w	r3, r3, #3
 80023bc:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	f003 0310 	and.w	r3, r3, #16
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	f000 80e4 	beq.w	8002594 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80023cc:	69bb      	ldr	r3, [r7, #24]
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d007      	beq.n	80023e2 <HAL_RCC_OscConfig+0x4a>
 80023d2:	69bb      	ldr	r3, [r7, #24]
 80023d4:	2b0c      	cmp	r3, #12
 80023d6:	f040 808b 	bne.w	80024f0 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80023da:	697b      	ldr	r3, [r7, #20]
 80023dc:	2b01      	cmp	r3, #1
 80023de:	f040 8087 	bne.w	80024f0 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80023e2:	4b89      	ldr	r3, [pc, #548]	@ (8002608 <HAL_RCC_OscConfig+0x270>)
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f003 0302 	and.w	r3, r3, #2
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d005      	beq.n	80023fa <HAL_RCC_OscConfig+0x62>
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	699b      	ldr	r3, [r3, #24]
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d101      	bne.n	80023fa <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80023f6:	2301      	movs	r3, #1
 80023f8:	e3a2      	b.n	8002b40 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	6a1a      	ldr	r2, [r3, #32]
 80023fe:	4b82      	ldr	r3, [pc, #520]	@ (8002608 <HAL_RCC_OscConfig+0x270>)
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f003 0308 	and.w	r3, r3, #8
 8002406:	2b00      	cmp	r3, #0
 8002408:	d004      	beq.n	8002414 <HAL_RCC_OscConfig+0x7c>
 800240a:	4b7f      	ldr	r3, [pc, #508]	@ (8002608 <HAL_RCC_OscConfig+0x270>)
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002412:	e005      	b.n	8002420 <HAL_RCC_OscConfig+0x88>
 8002414:	4b7c      	ldr	r3, [pc, #496]	@ (8002608 <HAL_RCC_OscConfig+0x270>)
 8002416:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800241a:	091b      	lsrs	r3, r3, #4
 800241c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002420:	4293      	cmp	r3, r2
 8002422:	d223      	bcs.n	800246c <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	6a1b      	ldr	r3, [r3, #32]
 8002428:	4618      	mov	r0, r3
 800242a:	f000 fd55 	bl	8002ed8 <RCC_SetFlashLatencyFromMSIRange>
 800242e:	4603      	mov	r3, r0
 8002430:	2b00      	cmp	r3, #0
 8002432:	d001      	beq.n	8002438 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8002434:	2301      	movs	r3, #1
 8002436:	e383      	b.n	8002b40 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002438:	4b73      	ldr	r3, [pc, #460]	@ (8002608 <HAL_RCC_OscConfig+0x270>)
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	4a72      	ldr	r2, [pc, #456]	@ (8002608 <HAL_RCC_OscConfig+0x270>)
 800243e:	f043 0308 	orr.w	r3, r3, #8
 8002442:	6013      	str	r3, [r2, #0]
 8002444:	4b70      	ldr	r3, [pc, #448]	@ (8002608 <HAL_RCC_OscConfig+0x270>)
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	6a1b      	ldr	r3, [r3, #32]
 8002450:	496d      	ldr	r1, [pc, #436]	@ (8002608 <HAL_RCC_OscConfig+0x270>)
 8002452:	4313      	orrs	r3, r2
 8002454:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002456:	4b6c      	ldr	r3, [pc, #432]	@ (8002608 <HAL_RCC_OscConfig+0x270>)
 8002458:	685b      	ldr	r3, [r3, #4]
 800245a:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	69db      	ldr	r3, [r3, #28]
 8002462:	021b      	lsls	r3, r3, #8
 8002464:	4968      	ldr	r1, [pc, #416]	@ (8002608 <HAL_RCC_OscConfig+0x270>)
 8002466:	4313      	orrs	r3, r2
 8002468:	604b      	str	r3, [r1, #4]
 800246a:	e025      	b.n	80024b8 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800246c:	4b66      	ldr	r3, [pc, #408]	@ (8002608 <HAL_RCC_OscConfig+0x270>)
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	4a65      	ldr	r2, [pc, #404]	@ (8002608 <HAL_RCC_OscConfig+0x270>)
 8002472:	f043 0308 	orr.w	r3, r3, #8
 8002476:	6013      	str	r3, [r2, #0]
 8002478:	4b63      	ldr	r3, [pc, #396]	@ (8002608 <HAL_RCC_OscConfig+0x270>)
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	6a1b      	ldr	r3, [r3, #32]
 8002484:	4960      	ldr	r1, [pc, #384]	@ (8002608 <HAL_RCC_OscConfig+0x270>)
 8002486:	4313      	orrs	r3, r2
 8002488:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800248a:	4b5f      	ldr	r3, [pc, #380]	@ (8002608 <HAL_RCC_OscConfig+0x270>)
 800248c:	685b      	ldr	r3, [r3, #4]
 800248e:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	69db      	ldr	r3, [r3, #28]
 8002496:	021b      	lsls	r3, r3, #8
 8002498:	495b      	ldr	r1, [pc, #364]	@ (8002608 <HAL_RCC_OscConfig+0x270>)
 800249a:	4313      	orrs	r3, r2
 800249c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800249e:	69bb      	ldr	r3, [r7, #24]
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d109      	bne.n	80024b8 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	6a1b      	ldr	r3, [r3, #32]
 80024a8:	4618      	mov	r0, r3
 80024aa:	f000 fd15 	bl	8002ed8 <RCC_SetFlashLatencyFromMSIRange>
 80024ae:	4603      	mov	r3, r0
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d001      	beq.n	80024b8 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80024b4:	2301      	movs	r3, #1
 80024b6:	e343      	b.n	8002b40 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80024b8:	f000 fc4a 	bl	8002d50 <HAL_RCC_GetSysClockFreq>
 80024bc:	4602      	mov	r2, r0
 80024be:	4b52      	ldr	r3, [pc, #328]	@ (8002608 <HAL_RCC_OscConfig+0x270>)
 80024c0:	689b      	ldr	r3, [r3, #8]
 80024c2:	091b      	lsrs	r3, r3, #4
 80024c4:	f003 030f 	and.w	r3, r3, #15
 80024c8:	4950      	ldr	r1, [pc, #320]	@ (800260c <HAL_RCC_OscConfig+0x274>)
 80024ca:	5ccb      	ldrb	r3, [r1, r3]
 80024cc:	f003 031f 	and.w	r3, r3, #31
 80024d0:	fa22 f303 	lsr.w	r3, r2, r3
 80024d4:	4a4e      	ldr	r2, [pc, #312]	@ (8002610 <HAL_RCC_OscConfig+0x278>)
 80024d6:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80024d8:	4b4e      	ldr	r3, [pc, #312]	@ (8002614 <HAL_RCC_OscConfig+0x27c>)
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	4618      	mov	r0, r3
 80024de:	f7fe ff23 	bl	8001328 <HAL_InitTick>
 80024e2:	4603      	mov	r3, r0
 80024e4:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80024e6:	7bfb      	ldrb	r3, [r7, #15]
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d052      	beq.n	8002592 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80024ec:	7bfb      	ldrb	r3, [r7, #15]
 80024ee:	e327      	b.n	8002b40 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	699b      	ldr	r3, [r3, #24]
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d032      	beq.n	800255e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80024f8:	4b43      	ldr	r3, [pc, #268]	@ (8002608 <HAL_RCC_OscConfig+0x270>)
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	4a42      	ldr	r2, [pc, #264]	@ (8002608 <HAL_RCC_OscConfig+0x270>)
 80024fe:	f043 0301 	orr.w	r3, r3, #1
 8002502:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002504:	f7fe ff60 	bl	80013c8 <HAL_GetTick>
 8002508:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800250a:	e008      	b.n	800251e <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800250c:	f7fe ff5c 	bl	80013c8 <HAL_GetTick>
 8002510:	4602      	mov	r2, r0
 8002512:	693b      	ldr	r3, [r7, #16]
 8002514:	1ad3      	subs	r3, r2, r3
 8002516:	2b02      	cmp	r3, #2
 8002518:	d901      	bls.n	800251e <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800251a:	2303      	movs	r3, #3
 800251c:	e310      	b.n	8002b40 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800251e:	4b3a      	ldr	r3, [pc, #232]	@ (8002608 <HAL_RCC_OscConfig+0x270>)
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	f003 0302 	and.w	r3, r3, #2
 8002526:	2b00      	cmp	r3, #0
 8002528:	d0f0      	beq.n	800250c <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800252a:	4b37      	ldr	r3, [pc, #220]	@ (8002608 <HAL_RCC_OscConfig+0x270>)
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	4a36      	ldr	r2, [pc, #216]	@ (8002608 <HAL_RCC_OscConfig+0x270>)
 8002530:	f043 0308 	orr.w	r3, r3, #8
 8002534:	6013      	str	r3, [r2, #0]
 8002536:	4b34      	ldr	r3, [pc, #208]	@ (8002608 <HAL_RCC_OscConfig+0x270>)
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	6a1b      	ldr	r3, [r3, #32]
 8002542:	4931      	ldr	r1, [pc, #196]	@ (8002608 <HAL_RCC_OscConfig+0x270>)
 8002544:	4313      	orrs	r3, r2
 8002546:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002548:	4b2f      	ldr	r3, [pc, #188]	@ (8002608 <HAL_RCC_OscConfig+0x270>)
 800254a:	685b      	ldr	r3, [r3, #4]
 800254c:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	69db      	ldr	r3, [r3, #28]
 8002554:	021b      	lsls	r3, r3, #8
 8002556:	492c      	ldr	r1, [pc, #176]	@ (8002608 <HAL_RCC_OscConfig+0x270>)
 8002558:	4313      	orrs	r3, r2
 800255a:	604b      	str	r3, [r1, #4]
 800255c:	e01a      	b.n	8002594 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800255e:	4b2a      	ldr	r3, [pc, #168]	@ (8002608 <HAL_RCC_OscConfig+0x270>)
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	4a29      	ldr	r2, [pc, #164]	@ (8002608 <HAL_RCC_OscConfig+0x270>)
 8002564:	f023 0301 	bic.w	r3, r3, #1
 8002568:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800256a:	f7fe ff2d 	bl	80013c8 <HAL_GetTick>
 800256e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002570:	e008      	b.n	8002584 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002572:	f7fe ff29 	bl	80013c8 <HAL_GetTick>
 8002576:	4602      	mov	r2, r0
 8002578:	693b      	ldr	r3, [r7, #16]
 800257a:	1ad3      	subs	r3, r2, r3
 800257c:	2b02      	cmp	r3, #2
 800257e:	d901      	bls.n	8002584 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8002580:	2303      	movs	r3, #3
 8002582:	e2dd      	b.n	8002b40 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002584:	4b20      	ldr	r3, [pc, #128]	@ (8002608 <HAL_RCC_OscConfig+0x270>)
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	f003 0302 	and.w	r3, r3, #2
 800258c:	2b00      	cmp	r3, #0
 800258e:	d1f0      	bne.n	8002572 <HAL_RCC_OscConfig+0x1da>
 8002590:	e000      	b.n	8002594 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002592:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	f003 0301 	and.w	r3, r3, #1
 800259c:	2b00      	cmp	r3, #0
 800259e:	d074      	beq.n	800268a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80025a0:	69bb      	ldr	r3, [r7, #24]
 80025a2:	2b08      	cmp	r3, #8
 80025a4:	d005      	beq.n	80025b2 <HAL_RCC_OscConfig+0x21a>
 80025a6:	69bb      	ldr	r3, [r7, #24]
 80025a8:	2b0c      	cmp	r3, #12
 80025aa:	d10e      	bne.n	80025ca <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80025ac:	697b      	ldr	r3, [r7, #20]
 80025ae:	2b03      	cmp	r3, #3
 80025b0:	d10b      	bne.n	80025ca <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025b2:	4b15      	ldr	r3, [pc, #84]	@ (8002608 <HAL_RCC_OscConfig+0x270>)
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d064      	beq.n	8002688 <HAL_RCC_OscConfig+0x2f0>
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	685b      	ldr	r3, [r3, #4]
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d160      	bne.n	8002688 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80025c6:	2301      	movs	r3, #1
 80025c8:	e2ba      	b.n	8002b40 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	685b      	ldr	r3, [r3, #4]
 80025ce:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80025d2:	d106      	bne.n	80025e2 <HAL_RCC_OscConfig+0x24a>
 80025d4:	4b0c      	ldr	r3, [pc, #48]	@ (8002608 <HAL_RCC_OscConfig+0x270>)
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	4a0b      	ldr	r2, [pc, #44]	@ (8002608 <HAL_RCC_OscConfig+0x270>)
 80025da:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80025de:	6013      	str	r3, [r2, #0]
 80025e0:	e026      	b.n	8002630 <HAL_RCC_OscConfig+0x298>
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	685b      	ldr	r3, [r3, #4]
 80025e6:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80025ea:	d115      	bne.n	8002618 <HAL_RCC_OscConfig+0x280>
 80025ec:	4b06      	ldr	r3, [pc, #24]	@ (8002608 <HAL_RCC_OscConfig+0x270>)
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	4a05      	ldr	r2, [pc, #20]	@ (8002608 <HAL_RCC_OscConfig+0x270>)
 80025f2:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80025f6:	6013      	str	r3, [r2, #0]
 80025f8:	4b03      	ldr	r3, [pc, #12]	@ (8002608 <HAL_RCC_OscConfig+0x270>)
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	4a02      	ldr	r2, [pc, #8]	@ (8002608 <HAL_RCC_OscConfig+0x270>)
 80025fe:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002602:	6013      	str	r3, [r2, #0]
 8002604:	e014      	b.n	8002630 <HAL_RCC_OscConfig+0x298>
 8002606:	bf00      	nop
 8002608:	40021000 	.word	0x40021000
 800260c:	08004a84 	.word	0x08004a84
 8002610:	20000000 	.word	0x20000000
 8002614:	20000004 	.word	0x20000004
 8002618:	4ba0      	ldr	r3, [pc, #640]	@ (800289c <HAL_RCC_OscConfig+0x504>)
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	4a9f      	ldr	r2, [pc, #636]	@ (800289c <HAL_RCC_OscConfig+0x504>)
 800261e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002622:	6013      	str	r3, [r2, #0]
 8002624:	4b9d      	ldr	r3, [pc, #628]	@ (800289c <HAL_RCC_OscConfig+0x504>)
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	4a9c      	ldr	r2, [pc, #624]	@ (800289c <HAL_RCC_OscConfig+0x504>)
 800262a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800262e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	685b      	ldr	r3, [r3, #4]
 8002634:	2b00      	cmp	r3, #0
 8002636:	d013      	beq.n	8002660 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002638:	f7fe fec6 	bl	80013c8 <HAL_GetTick>
 800263c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800263e:	e008      	b.n	8002652 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002640:	f7fe fec2 	bl	80013c8 <HAL_GetTick>
 8002644:	4602      	mov	r2, r0
 8002646:	693b      	ldr	r3, [r7, #16]
 8002648:	1ad3      	subs	r3, r2, r3
 800264a:	2b64      	cmp	r3, #100	@ 0x64
 800264c:	d901      	bls.n	8002652 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800264e:	2303      	movs	r3, #3
 8002650:	e276      	b.n	8002b40 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002652:	4b92      	ldr	r3, [pc, #584]	@ (800289c <HAL_RCC_OscConfig+0x504>)
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800265a:	2b00      	cmp	r3, #0
 800265c:	d0f0      	beq.n	8002640 <HAL_RCC_OscConfig+0x2a8>
 800265e:	e014      	b.n	800268a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002660:	f7fe feb2 	bl	80013c8 <HAL_GetTick>
 8002664:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002666:	e008      	b.n	800267a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002668:	f7fe feae 	bl	80013c8 <HAL_GetTick>
 800266c:	4602      	mov	r2, r0
 800266e:	693b      	ldr	r3, [r7, #16]
 8002670:	1ad3      	subs	r3, r2, r3
 8002672:	2b64      	cmp	r3, #100	@ 0x64
 8002674:	d901      	bls.n	800267a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002676:	2303      	movs	r3, #3
 8002678:	e262      	b.n	8002b40 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800267a:	4b88      	ldr	r3, [pc, #544]	@ (800289c <HAL_RCC_OscConfig+0x504>)
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002682:	2b00      	cmp	r3, #0
 8002684:	d1f0      	bne.n	8002668 <HAL_RCC_OscConfig+0x2d0>
 8002686:	e000      	b.n	800268a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002688:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f003 0302 	and.w	r3, r3, #2
 8002692:	2b00      	cmp	r3, #0
 8002694:	d060      	beq.n	8002758 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002696:	69bb      	ldr	r3, [r7, #24]
 8002698:	2b04      	cmp	r3, #4
 800269a:	d005      	beq.n	80026a8 <HAL_RCC_OscConfig+0x310>
 800269c:	69bb      	ldr	r3, [r7, #24]
 800269e:	2b0c      	cmp	r3, #12
 80026a0:	d119      	bne.n	80026d6 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80026a2:	697b      	ldr	r3, [r7, #20]
 80026a4:	2b02      	cmp	r3, #2
 80026a6:	d116      	bne.n	80026d6 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80026a8:	4b7c      	ldr	r3, [pc, #496]	@ (800289c <HAL_RCC_OscConfig+0x504>)
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d005      	beq.n	80026c0 <HAL_RCC_OscConfig+0x328>
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	68db      	ldr	r3, [r3, #12]
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d101      	bne.n	80026c0 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80026bc:	2301      	movs	r3, #1
 80026be:	e23f      	b.n	8002b40 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026c0:	4b76      	ldr	r3, [pc, #472]	@ (800289c <HAL_RCC_OscConfig+0x504>)
 80026c2:	685b      	ldr	r3, [r3, #4]
 80026c4:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	691b      	ldr	r3, [r3, #16]
 80026cc:	061b      	lsls	r3, r3, #24
 80026ce:	4973      	ldr	r1, [pc, #460]	@ (800289c <HAL_RCC_OscConfig+0x504>)
 80026d0:	4313      	orrs	r3, r2
 80026d2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80026d4:	e040      	b.n	8002758 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	68db      	ldr	r3, [r3, #12]
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d023      	beq.n	8002726 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80026de:	4b6f      	ldr	r3, [pc, #444]	@ (800289c <HAL_RCC_OscConfig+0x504>)
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	4a6e      	ldr	r2, [pc, #440]	@ (800289c <HAL_RCC_OscConfig+0x504>)
 80026e4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80026e8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026ea:	f7fe fe6d 	bl	80013c8 <HAL_GetTick>
 80026ee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80026f0:	e008      	b.n	8002704 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80026f2:	f7fe fe69 	bl	80013c8 <HAL_GetTick>
 80026f6:	4602      	mov	r2, r0
 80026f8:	693b      	ldr	r3, [r7, #16]
 80026fa:	1ad3      	subs	r3, r2, r3
 80026fc:	2b02      	cmp	r3, #2
 80026fe:	d901      	bls.n	8002704 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002700:	2303      	movs	r3, #3
 8002702:	e21d      	b.n	8002b40 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002704:	4b65      	ldr	r3, [pc, #404]	@ (800289c <HAL_RCC_OscConfig+0x504>)
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800270c:	2b00      	cmp	r3, #0
 800270e:	d0f0      	beq.n	80026f2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002710:	4b62      	ldr	r3, [pc, #392]	@ (800289c <HAL_RCC_OscConfig+0x504>)
 8002712:	685b      	ldr	r3, [r3, #4]
 8002714:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	691b      	ldr	r3, [r3, #16]
 800271c:	061b      	lsls	r3, r3, #24
 800271e:	495f      	ldr	r1, [pc, #380]	@ (800289c <HAL_RCC_OscConfig+0x504>)
 8002720:	4313      	orrs	r3, r2
 8002722:	604b      	str	r3, [r1, #4]
 8002724:	e018      	b.n	8002758 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002726:	4b5d      	ldr	r3, [pc, #372]	@ (800289c <HAL_RCC_OscConfig+0x504>)
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	4a5c      	ldr	r2, [pc, #368]	@ (800289c <HAL_RCC_OscConfig+0x504>)
 800272c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002730:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002732:	f7fe fe49 	bl	80013c8 <HAL_GetTick>
 8002736:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002738:	e008      	b.n	800274c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800273a:	f7fe fe45 	bl	80013c8 <HAL_GetTick>
 800273e:	4602      	mov	r2, r0
 8002740:	693b      	ldr	r3, [r7, #16]
 8002742:	1ad3      	subs	r3, r2, r3
 8002744:	2b02      	cmp	r3, #2
 8002746:	d901      	bls.n	800274c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002748:	2303      	movs	r3, #3
 800274a:	e1f9      	b.n	8002b40 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800274c:	4b53      	ldr	r3, [pc, #332]	@ (800289c <HAL_RCC_OscConfig+0x504>)
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002754:	2b00      	cmp	r3, #0
 8002756:	d1f0      	bne.n	800273a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f003 0308 	and.w	r3, r3, #8
 8002760:	2b00      	cmp	r3, #0
 8002762:	d03c      	beq.n	80027de <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	695b      	ldr	r3, [r3, #20]
 8002768:	2b00      	cmp	r3, #0
 800276a:	d01c      	beq.n	80027a6 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800276c:	4b4b      	ldr	r3, [pc, #300]	@ (800289c <HAL_RCC_OscConfig+0x504>)
 800276e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002772:	4a4a      	ldr	r2, [pc, #296]	@ (800289c <HAL_RCC_OscConfig+0x504>)
 8002774:	f043 0301 	orr.w	r3, r3, #1
 8002778:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800277c:	f7fe fe24 	bl	80013c8 <HAL_GetTick>
 8002780:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002782:	e008      	b.n	8002796 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002784:	f7fe fe20 	bl	80013c8 <HAL_GetTick>
 8002788:	4602      	mov	r2, r0
 800278a:	693b      	ldr	r3, [r7, #16]
 800278c:	1ad3      	subs	r3, r2, r3
 800278e:	2b02      	cmp	r3, #2
 8002790:	d901      	bls.n	8002796 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002792:	2303      	movs	r3, #3
 8002794:	e1d4      	b.n	8002b40 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002796:	4b41      	ldr	r3, [pc, #260]	@ (800289c <HAL_RCC_OscConfig+0x504>)
 8002798:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800279c:	f003 0302 	and.w	r3, r3, #2
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d0ef      	beq.n	8002784 <HAL_RCC_OscConfig+0x3ec>
 80027a4:	e01b      	b.n	80027de <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80027a6:	4b3d      	ldr	r3, [pc, #244]	@ (800289c <HAL_RCC_OscConfig+0x504>)
 80027a8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80027ac:	4a3b      	ldr	r2, [pc, #236]	@ (800289c <HAL_RCC_OscConfig+0x504>)
 80027ae:	f023 0301 	bic.w	r3, r3, #1
 80027b2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027b6:	f7fe fe07 	bl	80013c8 <HAL_GetTick>
 80027ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80027bc:	e008      	b.n	80027d0 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80027be:	f7fe fe03 	bl	80013c8 <HAL_GetTick>
 80027c2:	4602      	mov	r2, r0
 80027c4:	693b      	ldr	r3, [r7, #16]
 80027c6:	1ad3      	subs	r3, r2, r3
 80027c8:	2b02      	cmp	r3, #2
 80027ca:	d901      	bls.n	80027d0 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80027cc:	2303      	movs	r3, #3
 80027ce:	e1b7      	b.n	8002b40 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80027d0:	4b32      	ldr	r3, [pc, #200]	@ (800289c <HAL_RCC_OscConfig+0x504>)
 80027d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80027d6:	f003 0302 	and.w	r3, r3, #2
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d1ef      	bne.n	80027be <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	f003 0304 	and.w	r3, r3, #4
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	f000 80a6 	beq.w	8002938 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80027ec:	2300      	movs	r3, #0
 80027ee:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80027f0:	4b2a      	ldr	r3, [pc, #168]	@ (800289c <HAL_RCC_OscConfig+0x504>)
 80027f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80027f4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d10d      	bne.n	8002818 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80027fc:	4b27      	ldr	r3, [pc, #156]	@ (800289c <HAL_RCC_OscConfig+0x504>)
 80027fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002800:	4a26      	ldr	r2, [pc, #152]	@ (800289c <HAL_RCC_OscConfig+0x504>)
 8002802:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002806:	6593      	str	r3, [r2, #88]	@ 0x58
 8002808:	4b24      	ldr	r3, [pc, #144]	@ (800289c <HAL_RCC_OscConfig+0x504>)
 800280a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800280c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002810:	60bb      	str	r3, [r7, #8]
 8002812:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002814:	2301      	movs	r3, #1
 8002816:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002818:	4b21      	ldr	r3, [pc, #132]	@ (80028a0 <HAL_RCC_OscConfig+0x508>)
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002820:	2b00      	cmp	r3, #0
 8002822:	d118      	bne.n	8002856 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002824:	4b1e      	ldr	r3, [pc, #120]	@ (80028a0 <HAL_RCC_OscConfig+0x508>)
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	4a1d      	ldr	r2, [pc, #116]	@ (80028a0 <HAL_RCC_OscConfig+0x508>)
 800282a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800282e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002830:	f7fe fdca 	bl	80013c8 <HAL_GetTick>
 8002834:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002836:	e008      	b.n	800284a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002838:	f7fe fdc6 	bl	80013c8 <HAL_GetTick>
 800283c:	4602      	mov	r2, r0
 800283e:	693b      	ldr	r3, [r7, #16]
 8002840:	1ad3      	subs	r3, r2, r3
 8002842:	2b02      	cmp	r3, #2
 8002844:	d901      	bls.n	800284a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002846:	2303      	movs	r3, #3
 8002848:	e17a      	b.n	8002b40 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800284a:	4b15      	ldr	r3, [pc, #84]	@ (80028a0 <HAL_RCC_OscConfig+0x508>)
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002852:	2b00      	cmp	r3, #0
 8002854:	d0f0      	beq.n	8002838 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	689b      	ldr	r3, [r3, #8]
 800285a:	2b01      	cmp	r3, #1
 800285c:	d108      	bne.n	8002870 <HAL_RCC_OscConfig+0x4d8>
 800285e:	4b0f      	ldr	r3, [pc, #60]	@ (800289c <HAL_RCC_OscConfig+0x504>)
 8002860:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002864:	4a0d      	ldr	r2, [pc, #52]	@ (800289c <HAL_RCC_OscConfig+0x504>)
 8002866:	f043 0301 	orr.w	r3, r3, #1
 800286a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800286e:	e029      	b.n	80028c4 <HAL_RCC_OscConfig+0x52c>
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	689b      	ldr	r3, [r3, #8]
 8002874:	2b05      	cmp	r3, #5
 8002876:	d115      	bne.n	80028a4 <HAL_RCC_OscConfig+0x50c>
 8002878:	4b08      	ldr	r3, [pc, #32]	@ (800289c <HAL_RCC_OscConfig+0x504>)
 800287a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800287e:	4a07      	ldr	r2, [pc, #28]	@ (800289c <HAL_RCC_OscConfig+0x504>)
 8002880:	f043 0304 	orr.w	r3, r3, #4
 8002884:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002888:	4b04      	ldr	r3, [pc, #16]	@ (800289c <HAL_RCC_OscConfig+0x504>)
 800288a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800288e:	4a03      	ldr	r2, [pc, #12]	@ (800289c <HAL_RCC_OscConfig+0x504>)
 8002890:	f043 0301 	orr.w	r3, r3, #1
 8002894:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002898:	e014      	b.n	80028c4 <HAL_RCC_OscConfig+0x52c>
 800289a:	bf00      	nop
 800289c:	40021000 	.word	0x40021000
 80028a0:	40007000 	.word	0x40007000
 80028a4:	4b9c      	ldr	r3, [pc, #624]	@ (8002b18 <HAL_RCC_OscConfig+0x780>)
 80028a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80028aa:	4a9b      	ldr	r2, [pc, #620]	@ (8002b18 <HAL_RCC_OscConfig+0x780>)
 80028ac:	f023 0301 	bic.w	r3, r3, #1
 80028b0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80028b4:	4b98      	ldr	r3, [pc, #608]	@ (8002b18 <HAL_RCC_OscConfig+0x780>)
 80028b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80028ba:	4a97      	ldr	r2, [pc, #604]	@ (8002b18 <HAL_RCC_OscConfig+0x780>)
 80028bc:	f023 0304 	bic.w	r3, r3, #4
 80028c0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	689b      	ldr	r3, [r3, #8]
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d016      	beq.n	80028fa <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028cc:	f7fe fd7c 	bl	80013c8 <HAL_GetTick>
 80028d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80028d2:	e00a      	b.n	80028ea <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80028d4:	f7fe fd78 	bl	80013c8 <HAL_GetTick>
 80028d8:	4602      	mov	r2, r0
 80028da:	693b      	ldr	r3, [r7, #16]
 80028dc:	1ad3      	subs	r3, r2, r3
 80028de:	f241 3288 	movw	r2, #5000	@ 0x1388
 80028e2:	4293      	cmp	r3, r2
 80028e4:	d901      	bls.n	80028ea <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80028e6:	2303      	movs	r3, #3
 80028e8:	e12a      	b.n	8002b40 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80028ea:	4b8b      	ldr	r3, [pc, #556]	@ (8002b18 <HAL_RCC_OscConfig+0x780>)
 80028ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80028f0:	f003 0302 	and.w	r3, r3, #2
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d0ed      	beq.n	80028d4 <HAL_RCC_OscConfig+0x53c>
 80028f8:	e015      	b.n	8002926 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028fa:	f7fe fd65 	bl	80013c8 <HAL_GetTick>
 80028fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002900:	e00a      	b.n	8002918 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002902:	f7fe fd61 	bl	80013c8 <HAL_GetTick>
 8002906:	4602      	mov	r2, r0
 8002908:	693b      	ldr	r3, [r7, #16]
 800290a:	1ad3      	subs	r3, r2, r3
 800290c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002910:	4293      	cmp	r3, r2
 8002912:	d901      	bls.n	8002918 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002914:	2303      	movs	r3, #3
 8002916:	e113      	b.n	8002b40 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002918:	4b7f      	ldr	r3, [pc, #508]	@ (8002b18 <HAL_RCC_OscConfig+0x780>)
 800291a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800291e:	f003 0302 	and.w	r3, r3, #2
 8002922:	2b00      	cmp	r3, #0
 8002924:	d1ed      	bne.n	8002902 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002926:	7ffb      	ldrb	r3, [r7, #31]
 8002928:	2b01      	cmp	r3, #1
 800292a:	d105      	bne.n	8002938 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800292c:	4b7a      	ldr	r3, [pc, #488]	@ (8002b18 <HAL_RCC_OscConfig+0x780>)
 800292e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002930:	4a79      	ldr	r2, [pc, #484]	@ (8002b18 <HAL_RCC_OscConfig+0x780>)
 8002932:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002936:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800293c:	2b00      	cmp	r3, #0
 800293e:	f000 80fe 	beq.w	8002b3e <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002946:	2b02      	cmp	r3, #2
 8002948:	f040 80d0 	bne.w	8002aec <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800294c:	4b72      	ldr	r3, [pc, #456]	@ (8002b18 <HAL_RCC_OscConfig+0x780>)
 800294e:	68db      	ldr	r3, [r3, #12]
 8002950:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002952:	697b      	ldr	r3, [r7, #20]
 8002954:	f003 0203 	and.w	r2, r3, #3
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800295c:	429a      	cmp	r2, r3
 800295e:	d130      	bne.n	80029c2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002960:	697b      	ldr	r3, [r7, #20]
 8002962:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800296a:	3b01      	subs	r3, #1
 800296c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800296e:	429a      	cmp	r2, r3
 8002970:	d127      	bne.n	80029c2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002972:	697b      	ldr	r3, [r7, #20]
 8002974:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800297c:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800297e:	429a      	cmp	r2, r3
 8002980:	d11f      	bne.n	80029c2 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002982:	697b      	ldr	r3, [r7, #20]
 8002984:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002988:	687a      	ldr	r2, [r7, #4]
 800298a:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800298c:	2a07      	cmp	r2, #7
 800298e:	bf14      	ite	ne
 8002990:	2201      	movne	r2, #1
 8002992:	2200      	moveq	r2, #0
 8002994:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002996:	4293      	cmp	r3, r2
 8002998:	d113      	bne.n	80029c2 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800299a:	697b      	ldr	r3, [r7, #20]
 800299c:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80029a4:	085b      	lsrs	r3, r3, #1
 80029a6:	3b01      	subs	r3, #1
 80029a8:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80029aa:	429a      	cmp	r2, r3
 80029ac:	d109      	bne.n	80029c2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80029ae:	697b      	ldr	r3, [r7, #20]
 80029b0:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029b8:	085b      	lsrs	r3, r3, #1
 80029ba:	3b01      	subs	r3, #1
 80029bc:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80029be:	429a      	cmp	r2, r3
 80029c0:	d06e      	beq.n	8002aa0 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80029c2:	69bb      	ldr	r3, [r7, #24]
 80029c4:	2b0c      	cmp	r3, #12
 80029c6:	d069      	beq.n	8002a9c <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80029c8:	4b53      	ldr	r3, [pc, #332]	@ (8002b18 <HAL_RCC_OscConfig+0x780>)
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d105      	bne.n	80029e0 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80029d4:	4b50      	ldr	r3, [pc, #320]	@ (8002b18 <HAL_RCC_OscConfig+0x780>)
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d001      	beq.n	80029e4 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80029e0:	2301      	movs	r3, #1
 80029e2:	e0ad      	b.n	8002b40 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80029e4:	4b4c      	ldr	r3, [pc, #304]	@ (8002b18 <HAL_RCC_OscConfig+0x780>)
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	4a4b      	ldr	r2, [pc, #300]	@ (8002b18 <HAL_RCC_OscConfig+0x780>)
 80029ea:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80029ee:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80029f0:	f7fe fcea 	bl	80013c8 <HAL_GetTick>
 80029f4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80029f6:	e008      	b.n	8002a0a <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80029f8:	f7fe fce6 	bl	80013c8 <HAL_GetTick>
 80029fc:	4602      	mov	r2, r0
 80029fe:	693b      	ldr	r3, [r7, #16]
 8002a00:	1ad3      	subs	r3, r2, r3
 8002a02:	2b02      	cmp	r3, #2
 8002a04:	d901      	bls.n	8002a0a <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8002a06:	2303      	movs	r3, #3
 8002a08:	e09a      	b.n	8002b40 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002a0a:	4b43      	ldr	r3, [pc, #268]	@ (8002b18 <HAL_RCC_OscConfig+0x780>)
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d1f0      	bne.n	80029f8 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002a16:	4b40      	ldr	r3, [pc, #256]	@ (8002b18 <HAL_RCC_OscConfig+0x780>)
 8002a18:	68da      	ldr	r2, [r3, #12]
 8002a1a:	4b40      	ldr	r3, [pc, #256]	@ (8002b1c <HAL_RCC_OscConfig+0x784>)
 8002a1c:	4013      	ands	r3, r2
 8002a1e:	687a      	ldr	r2, [r7, #4]
 8002a20:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8002a22:	687a      	ldr	r2, [r7, #4]
 8002a24:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8002a26:	3a01      	subs	r2, #1
 8002a28:	0112      	lsls	r2, r2, #4
 8002a2a:	4311      	orrs	r1, r2
 8002a2c:	687a      	ldr	r2, [r7, #4]
 8002a2e:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8002a30:	0212      	lsls	r2, r2, #8
 8002a32:	4311      	orrs	r1, r2
 8002a34:	687a      	ldr	r2, [r7, #4]
 8002a36:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002a38:	0852      	lsrs	r2, r2, #1
 8002a3a:	3a01      	subs	r2, #1
 8002a3c:	0552      	lsls	r2, r2, #21
 8002a3e:	4311      	orrs	r1, r2
 8002a40:	687a      	ldr	r2, [r7, #4]
 8002a42:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8002a44:	0852      	lsrs	r2, r2, #1
 8002a46:	3a01      	subs	r2, #1
 8002a48:	0652      	lsls	r2, r2, #25
 8002a4a:	4311      	orrs	r1, r2
 8002a4c:	687a      	ldr	r2, [r7, #4]
 8002a4e:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002a50:	0912      	lsrs	r2, r2, #4
 8002a52:	0452      	lsls	r2, r2, #17
 8002a54:	430a      	orrs	r2, r1
 8002a56:	4930      	ldr	r1, [pc, #192]	@ (8002b18 <HAL_RCC_OscConfig+0x780>)
 8002a58:	4313      	orrs	r3, r2
 8002a5a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002a5c:	4b2e      	ldr	r3, [pc, #184]	@ (8002b18 <HAL_RCC_OscConfig+0x780>)
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	4a2d      	ldr	r2, [pc, #180]	@ (8002b18 <HAL_RCC_OscConfig+0x780>)
 8002a62:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002a66:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002a68:	4b2b      	ldr	r3, [pc, #172]	@ (8002b18 <HAL_RCC_OscConfig+0x780>)
 8002a6a:	68db      	ldr	r3, [r3, #12]
 8002a6c:	4a2a      	ldr	r2, [pc, #168]	@ (8002b18 <HAL_RCC_OscConfig+0x780>)
 8002a6e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002a72:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002a74:	f7fe fca8 	bl	80013c8 <HAL_GetTick>
 8002a78:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002a7a:	e008      	b.n	8002a8e <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a7c:	f7fe fca4 	bl	80013c8 <HAL_GetTick>
 8002a80:	4602      	mov	r2, r0
 8002a82:	693b      	ldr	r3, [r7, #16]
 8002a84:	1ad3      	subs	r3, r2, r3
 8002a86:	2b02      	cmp	r3, #2
 8002a88:	d901      	bls.n	8002a8e <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8002a8a:	2303      	movs	r3, #3
 8002a8c:	e058      	b.n	8002b40 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002a8e:	4b22      	ldr	r3, [pc, #136]	@ (8002b18 <HAL_RCC_OscConfig+0x780>)
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d0f0      	beq.n	8002a7c <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002a9a:	e050      	b.n	8002b3e <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002a9c:	2301      	movs	r3, #1
 8002a9e:	e04f      	b.n	8002b40 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002aa0:	4b1d      	ldr	r3, [pc, #116]	@ (8002b18 <HAL_RCC_OscConfig+0x780>)
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d148      	bne.n	8002b3e <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002aac:	4b1a      	ldr	r3, [pc, #104]	@ (8002b18 <HAL_RCC_OscConfig+0x780>)
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	4a19      	ldr	r2, [pc, #100]	@ (8002b18 <HAL_RCC_OscConfig+0x780>)
 8002ab2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002ab6:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002ab8:	4b17      	ldr	r3, [pc, #92]	@ (8002b18 <HAL_RCC_OscConfig+0x780>)
 8002aba:	68db      	ldr	r3, [r3, #12]
 8002abc:	4a16      	ldr	r2, [pc, #88]	@ (8002b18 <HAL_RCC_OscConfig+0x780>)
 8002abe:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002ac2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002ac4:	f7fe fc80 	bl	80013c8 <HAL_GetTick>
 8002ac8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002aca:	e008      	b.n	8002ade <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002acc:	f7fe fc7c 	bl	80013c8 <HAL_GetTick>
 8002ad0:	4602      	mov	r2, r0
 8002ad2:	693b      	ldr	r3, [r7, #16]
 8002ad4:	1ad3      	subs	r3, r2, r3
 8002ad6:	2b02      	cmp	r3, #2
 8002ad8:	d901      	bls.n	8002ade <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8002ada:	2303      	movs	r3, #3
 8002adc:	e030      	b.n	8002b40 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002ade:	4b0e      	ldr	r3, [pc, #56]	@ (8002b18 <HAL_RCC_OscConfig+0x780>)
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d0f0      	beq.n	8002acc <HAL_RCC_OscConfig+0x734>
 8002aea:	e028      	b.n	8002b3e <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002aec:	69bb      	ldr	r3, [r7, #24]
 8002aee:	2b0c      	cmp	r3, #12
 8002af0:	d023      	beq.n	8002b3a <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002af2:	4b09      	ldr	r3, [pc, #36]	@ (8002b18 <HAL_RCC_OscConfig+0x780>)
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	4a08      	ldr	r2, [pc, #32]	@ (8002b18 <HAL_RCC_OscConfig+0x780>)
 8002af8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002afc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002afe:	f7fe fc63 	bl	80013c8 <HAL_GetTick>
 8002b02:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002b04:	e00c      	b.n	8002b20 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b06:	f7fe fc5f 	bl	80013c8 <HAL_GetTick>
 8002b0a:	4602      	mov	r2, r0
 8002b0c:	693b      	ldr	r3, [r7, #16]
 8002b0e:	1ad3      	subs	r3, r2, r3
 8002b10:	2b02      	cmp	r3, #2
 8002b12:	d905      	bls.n	8002b20 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8002b14:	2303      	movs	r3, #3
 8002b16:	e013      	b.n	8002b40 <HAL_RCC_OscConfig+0x7a8>
 8002b18:	40021000 	.word	0x40021000
 8002b1c:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002b20:	4b09      	ldr	r3, [pc, #36]	@ (8002b48 <HAL_RCC_OscConfig+0x7b0>)
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d1ec      	bne.n	8002b06 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002b2c:	4b06      	ldr	r3, [pc, #24]	@ (8002b48 <HAL_RCC_OscConfig+0x7b0>)
 8002b2e:	68da      	ldr	r2, [r3, #12]
 8002b30:	4905      	ldr	r1, [pc, #20]	@ (8002b48 <HAL_RCC_OscConfig+0x7b0>)
 8002b32:	4b06      	ldr	r3, [pc, #24]	@ (8002b4c <HAL_RCC_OscConfig+0x7b4>)
 8002b34:	4013      	ands	r3, r2
 8002b36:	60cb      	str	r3, [r1, #12]
 8002b38:	e001      	b.n	8002b3e <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002b3a:	2301      	movs	r3, #1
 8002b3c:	e000      	b.n	8002b40 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8002b3e:	2300      	movs	r3, #0
}
 8002b40:	4618      	mov	r0, r3
 8002b42:	3720      	adds	r7, #32
 8002b44:	46bd      	mov	sp, r7
 8002b46:	bd80      	pop	{r7, pc}
 8002b48:	40021000 	.word	0x40021000
 8002b4c:	feeefffc 	.word	0xfeeefffc

08002b50 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002b50:	b580      	push	{r7, lr}
 8002b52:	b084      	sub	sp, #16
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	6078      	str	r0, [r7, #4]
 8002b58:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d101      	bne.n	8002b64 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002b60:	2301      	movs	r3, #1
 8002b62:	e0e7      	b.n	8002d34 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002b64:	4b75      	ldr	r3, [pc, #468]	@ (8002d3c <HAL_RCC_ClockConfig+0x1ec>)
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	f003 0307 	and.w	r3, r3, #7
 8002b6c:	683a      	ldr	r2, [r7, #0]
 8002b6e:	429a      	cmp	r2, r3
 8002b70:	d910      	bls.n	8002b94 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b72:	4b72      	ldr	r3, [pc, #456]	@ (8002d3c <HAL_RCC_ClockConfig+0x1ec>)
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f023 0207 	bic.w	r2, r3, #7
 8002b7a:	4970      	ldr	r1, [pc, #448]	@ (8002d3c <HAL_RCC_ClockConfig+0x1ec>)
 8002b7c:	683b      	ldr	r3, [r7, #0]
 8002b7e:	4313      	orrs	r3, r2
 8002b80:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b82:	4b6e      	ldr	r3, [pc, #440]	@ (8002d3c <HAL_RCC_ClockConfig+0x1ec>)
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	f003 0307 	and.w	r3, r3, #7
 8002b8a:	683a      	ldr	r2, [r7, #0]
 8002b8c:	429a      	cmp	r2, r3
 8002b8e:	d001      	beq.n	8002b94 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002b90:	2301      	movs	r3, #1
 8002b92:	e0cf      	b.n	8002d34 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	f003 0302 	and.w	r3, r3, #2
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d010      	beq.n	8002bc2 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	689a      	ldr	r2, [r3, #8]
 8002ba4:	4b66      	ldr	r3, [pc, #408]	@ (8002d40 <HAL_RCC_ClockConfig+0x1f0>)
 8002ba6:	689b      	ldr	r3, [r3, #8]
 8002ba8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002bac:	429a      	cmp	r2, r3
 8002bae:	d908      	bls.n	8002bc2 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002bb0:	4b63      	ldr	r3, [pc, #396]	@ (8002d40 <HAL_RCC_ClockConfig+0x1f0>)
 8002bb2:	689b      	ldr	r3, [r3, #8]
 8002bb4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	689b      	ldr	r3, [r3, #8]
 8002bbc:	4960      	ldr	r1, [pc, #384]	@ (8002d40 <HAL_RCC_ClockConfig+0x1f0>)
 8002bbe:	4313      	orrs	r3, r2
 8002bc0:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f003 0301 	and.w	r3, r3, #1
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d04c      	beq.n	8002c68 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	685b      	ldr	r3, [r3, #4]
 8002bd2:	2b03      	cmp	r3, #3
 8002bd4:	d107      	bne.n	8002be6 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002bd6:	4b5a      	ldr	r3, [pc, #360]	@ (8002d40 <HAL_RCC_ClockConfig+0x1f0>)
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d121      	bne.n	8002c26 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002be2:	2301      	movs	r3, #1
 8002be4:	e0a6      	b.n	8002d34 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	685b      	ldr	r3, [r3, #4]
 8002bea:	2b02      	cmp	r3, #2
 8002bec:	d107      	bne.n	8002bfe <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002bee:	4b54      	ldr	r3, [pc, #336]	@ (8002d40 <HAL_RCC_ClockConfig+0x1f0>)
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d115      	bne.n	8002c26 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002bfa:	2301      	movs	r3, #1
 8002bfc:	e09a      	b.n	8002d34 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	685b      	ldr	r3, [r3, #4]
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d107      	bne.n	8002c16 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002c06:	4b4e      	ldr	r3, [pc, #312]	@ (8002d40 <HAL_RCC_ClockConfig+0x1f0>)
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f003 0302 	and.w	r3, r3, #2
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d109      	bne.n	8002c26 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002c12:	2301      	movs	r3, #1
 8002c14:	e08e      	b.n	8002d34 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002c16:	4b4a      	ldr	r3, [pc, #296]	@ (8002d40 <HAL_RCC_ClockConfig+0x1f0>)
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d101      	bne.n	8002c26 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002c22:	2301      	movs	r3, #1
 8002c24:	e086      	b.n	8002d34 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002c26:	4b46      	ldr	r3, [pc, #280]	@ (8002d40 <HAL_RCC_ClockConfig+0x1f0>)
 8002c28:	689b      	ldr	r3, [r3, #8]
 8002c2a:	f023 0203 	bic.w	r2, r3, #3
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	685b      	ldr	r3, [r3, #4]
 8002c32:	4943      	ldr	r1, [pc, #268]	@ (8002d40 <HAL_RCC_ClockConfig+0x1f0>)
 8002c34:	4313      	orrs	r3, r2
 8002c36:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002c38:	f7fe fbc6 	bl	80013c8 <HAL_GetTick>
 8002c3c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c3e:	e00a      	b.n	8002c56 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c40:	f7fe fbc2 	bl	80013c8 <HAL_GetTick>
 8002c44:	4602      	mov	r2, r0
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	1ad3      	subs	r3, r2, r3
 8002c4a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002c4e:	4293      	cmp	r3, r2
 8002c50:	d901      	bls.n	8002c56 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002c52:	2303      	movs	r3, #3
 8002c54:	e06e      	b.n	8002d34 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c56:	4b3a      	ldr	r3, [pc, #232]	@ (8002d40 <HAL_RCC_ClockConfig+0x1f0>)
 8002c58:	689b      	ldr	r3, [r3, #8]
 8002c5a:	f003 020c 	and.w	r2, r3, #12
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	685b      	ldr	r3, [r3, #4]
 8002c62:	009b      	lsls	r3, r3, #2
 8002c64:	429a      	cmp	r2, r3
 8002c66:	d1eb      	bne.n	8002c40 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	f003 0302 	and.w	r3, r3, #2
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d010      	beq.n	8002c96 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	689a      	ldr	r2, [r3, #8]
 8002c78:	4b31      	ldr	r3, [pc, #196]	@ (8002d40 <HAL_RCC_ClockConfig+0x1f0>)
 8002c7a:	689b      	ldr	r3, [r3, #8]
 8002c7c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002c80:	429a      	cmp	r2, r3
 8002c82:	d208      	bcs.n	8002c96 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002c84:	4b2e      	ldr	r3, [pc, #184]	@ (8002d40 <HAL_RCC_ClockConfig+0x1f0>)
 8002c86:	689b      	ldr	r3, [r3, #8]
 8002c88:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	689b      	ldr	r3, [r3, #8]
 8002c90:	492b      	ldr	r1, [pc, #172]	@ (8002d40 <HAL_RCC_ClockConfig+0x1f0>)
 8002c92:	4313      	orrs	r3, r2
 8002c94:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002c96:	4b29      	ldr	r3, [pc, #164]	@ (8002d3c <HAL_RCC_ClockConfig+0x1ec>)
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f003 0307 	and.w	r3, r3, #7
 8002c9e:	683a      	ldr	r2, [r7, #0]
 8002ca0:	429a      	cmp	r2, r3
 8002ca2:	d210      	bcs.n	8002cc6 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ca4:	4b25      	ldr	r3, [pc, #148]	@ (8002d3c <HAL_RCC_ClockConfig+0x1ec>)
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	f023 0207 	bic.w	r2, r3, #7
 8002cac:	4923      	ldr	r1, [pc, #140]	@ (8002d3c <HAL_RCC_ClockConfig+0x1ec>)
 8002cae:	683b      	ldr	r3, [r7, #0]
 8002cb0:	4313      	orrs	r3, r2
 8002cb2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002cb4:	4b21      	ldr	r3, [pc, #132]	@ (8002d3c <HAL_RCC_ClockConfig+0x1ec>)
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	f003 0307 	and.w	r3, r3, #7
 8002cbc:	683a      	ldr	r2, [r7, #0]
 8002cbe:	429a      	cmp	r2, r3
 8002cc0:	d001      	beq.n	8002cc6 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8002cc2:	2301      	movs	r3, #1
 8002cc4:	e036      	b.n	8002d34 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	f003 0304 	and.w	r3, r3, #4
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d008      	beq.n	8002ce4 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002cd2:	4b1b      	ldr	r3, [pc, #108]	@ (8002d40 <HAL_RCC_ClockConfig+0x1f0>)
 8002cd4:	689b      	ldr	r3, [r3, #8]
 8002cd6:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	68db      	ldr	r3, [r3, #12]
 8002cde:	4918      	ldr	r1, [pc, #96]	@ (8002d40 <HAL_RCC_ClockConfig+0x1f0>)
 8002ce0:	4313      	orrs	r3, r2
 8002ce2:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	f003 0308 	and.w	r3, r3, #8
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d009      	beq.n	8002d04 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002cf0:	4b13      	ldr	r3, [pc, #76]	@ (8002d40 <HAL_RCC_ClockConfig+0x1f0>)
 8002cf2:	689b      	ldr	r3, [r3, #8]
 8002cf4:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	691b      	ldr	r3, [r3, #16]
 8002cfc:	00db      	lsls	r3, r3, #3
 8002cfe:	4910      	ldr	r1, [pc, #64]	@ (8002d40 <HAL_RCC_ClockConfig+0x1f0>)
 8002d00:	4313      	orrs	r3, r2
 8002d02:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002d04:	f000 f824 	bl	8002d50 <HAL_RCC_GetSysClockFreq>
 8002d08:	4602      	mov	r2, r0
 8002d0a:	4b0d      	ldr	r3, [pc, #52]	@ (8002d40 <HAL_RCC_ClockConfig+0x1f0>)
 8002d0c:	689b      	ldr	r3, [r3, #8]
 8002d0e:	091b      	lsrs	r3, r3, #4
 8002d10:	f003 030f 	and.w	r3, r3, #15
 8002d14:	490b      	ldr	r1, [pc, #44]	@ (8002d44 <HAL_RCC_ClockConfig+0x1f4>)
 8002d16:	5ccb      	ldrb	r3, [r1, r3]
 8002d18:	f003 031f 	and.w	r3, r3, #31
 8002d1c:	fa22 f303 	lsr.w	r3, r2, r3
 8002d20:	4a09      	ldr	r2, [pc, #36]	@ (8002d48 <HAL_RCC_ClockConfig+0x1f8>)
 8002d22:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002d24:	4b09      	ldr	r3, [pc, #36]	@ (8002d4c <HAL_RCC_ClockConfig+0x1fc>)
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	4618      	mov	r0, r3
 8002d2a:	f7fe fafd 	bl	8001328 <HAL_InitTick>
 8002d2e:	4603      	mov	r3, r0
 8002d30:	72fb      	strb	r3, [r7, #11]

  return status;
 8002d32:	7afb      	ldrb	r3, [r7, #11]
}
 8002d34:	4618      	mov	r0, r3
 8002d36:	3710      	adds	r7, #16
 8002d38:	46bd      	mov	sp, r7
 8002d3a:	bd80      	pop	{r7, pc}
 8002d3c:	40022000 	.word	0x40022000
 8002d40:	40021000 	.word	0x40021000
 8002d44:	08004a84 	.word	0x08004a84
 8002d48:	20000000 	.word	0x20000000
 8002d4c:	20000004 	.word	0x20000004

08002d50 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002d50:	b480      	push	{r7}
 8002d52:	b089      	sub	sp, #36	@ 0x24
 8002d54:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002d56:	2300      	movs	r3, #0
 8002d58:	61fb      	str	r3, [r7, #28]
 8002d5a:	2300      	movs	r3, #0
 8002d5c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002d5e:	4b3e      	ldr	r3, [pc, #248]	@ (8002e58 <HAL_RCC_GetSysClockFreq+0x108>)
 8002d60:	689b      	ldr	r3, [r3, #8]
 8002d62:	f003 030c 	and.w	r3, r3, #12
 8002d66:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002d68:	4b3b      	ldr	r3, [pc, #236]	@ (8002e58 <HAL_RCC_GetSysClockFreq+0x108>)
 8002d6a:	68db      	ldr	r3, [r3, #12]
 8002d6c:	f003 0303 	and.w	r3, r3, #3
 8002d70:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002d72:	693b      	ldr	r3, [r7, #16]
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d005      	beq.n	8002d84 <HAL_RCC_GetSysClockFreq+0x34>
 8002d78:	693b      	ldr	r3, [r7, #16]
 8002d7a:	2b0c      	cmp	r3, #12
 8002d7c:	d121      	bne.n	8002dc2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	2b01      	cmp	r3, #1
 8002d82:	d11e      	bne.n	8002dc2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002d84:	4b34      	ldr	r3, [pc, #208]	@ (8002e58 <HAL_RCC_GetSysClockFreq+0x108>)
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	f003 0308 	and.w	r3, r3, #8
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d107      	bne.n	8002da0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002d90:	4b31      	ldr	r3, [pc, #196]	@ (8002e58 <HAL_RCC_GetSysClockFreq+0x108>)
 8002d92:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002d96:	0a1b      	lsrs	r3, r3, #8
 8002d98:	f003 030f 	and.w	r3, r3, #15
 8002d9c:	61fb      	str	r3, [r7, #28]
 8002d9e:	e005      	b.n	8002dac <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002da0:	4b2d      	ldr	r3, [pc, #180]	@ (8002e58 <HAL_RCC_GetSysClockFreq+0x108>)
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	091b      	lsrs	r3, r3, #4
 8002da6:	f003 030f 	and.w	r3, r3, #15
 8002daa:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002dac:	4a2b      	ldr	r2, [pc, #172]	@ (8002e5c <HAL_RCC_GetSysClockFreq+0x10c>)
 8002dae:	69fb      	ldr	r3, [r7, #28]
 8002db0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002db4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002db6:	693b      	ldr	r3, [r7, #16]
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d10d      	bne.n	8002dd8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002dbc:	69fb      	ldr	r3, [r7, #28]
 8002dbe:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002dc0:	e00a      	b.n	8002dd8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002dc2:	693b      	ldr	r3, [r7, #16]
 8002dc4:	2b04      	cmp	r3, #4
 8002dc6:	d102      	bne.n	8002dce <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002dc8:	4b25      	ldr	r3, [pc, #148]	@ (8002e60 <HAL_RCC_GetSysClockFreq+0x110>)
 8002dca:	61bb      	str	r3, [r7, #24]
 8002dcc:	e004      	b.n	8002dd8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002dce:	693b      	ldr	r3, [r7, #16]
 8002dd0:	2b08      	cmp	r3, #8
 8002dd2:	d101      	bne.n	8002dd8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002dd4:	4b23      	ldr	r3, [pc, #140]	@ (8002e64 <HAL_RCC_GetSysClockFreq+0x114>)
 8002dd6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002dd8:	693b      	ldr	r3, [r7, #16]
 8002dda:	2b0c      	cmp	r3, #12
 8002ddc:	d134      	bne.n	8002e48 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002dde:	4b1e      	ldr	r3, [pc, #120]	@ (8002e58 <HAL_RCC_GetSysClockFreq+0x108>)
 8002de0:	68db      	ldr	r3, [r3, #12]
 8002de2:	f003 0303 	and.w	r3, r3, #3
 8002de6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002de8:	68bb      	ldr	r3, [r7, #8]
 8002dea:	2b02      	cmp	r3, #2
 8002dec:	d003      	beq.n	8002df6 <HAL_RCC_GetSysClockFreq+0xa6>
 8002dee:	68bb      	ldr	r3, [r7, #8]
 8002df0:	2b03      	cmp	r3, #3
 8002df2:	d003      	beq.n	8002dfc <HAL_RCC_GetSysClockFreq+0xac>
 8002df4:	e005      	b.n	8002e02 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002df6:	4b1a      	ldr	r3, [pc, #104]	@ (8002e60 <HAL_RCC_GetSysClockFreq+0x110>)
 8002df8:	617b      	str	r3, [r7, #20]
      break;
 8002dfa:	e005      	b.n	8002e08 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002dfc:	4b19      	ldr	r3, [pc, #100]	@ (8002e64 <HAL_RCC_GetSysClockFreq+0x114>)
 8002dfe:	617b      	str	r3, [r7, #20]
      break;
 8002e00:	e002      	b.n	8002e08 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002e02:	69fb      	ldr	r3, [r7, #28]
 8002e04:	617b      	str	r3, [r7, #20]
      break;
 8002e06:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002e08:	4b13      	ldr	r3, [pc, #76]	@ (8002e58 <HAL_RCC_GetSysClockFreq+0x108>)
 8002e0a:	68db      	ldr	r3, [r3, #12]
 8002e0c:	091b      	lsrs	r3, r3, #4
 8002e0e:	f003 0307 	and.w	r3, r3, #7
 8002e12:	3301      	adds	r3, #1
 8002e14:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002e16:	4b10      	ldr	r3, [pc, #64]	@ (8002e58 <HAL_RCC_GetSysClockFreq+0x108>)
 8002e18:	68db      	ldr	r3, [r3, #12]
 8002e1a:	0a1b      	lsrs	r3, r3, #8
 8002e1c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002e20:	697a      	ldr	r2, [r7, #20]
 8002e22:	fb03 f202 	mul.w	r2, r3, r2
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e2c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002e2e:	4b0a      	ldr	r3, [pc, #40]	@ (8002e58 <HAL_RCC_GetSysClockFreq+0x108>)
 8002e30:	68db      	ldr	r3, [r3, #12]
 8002e32:	0e5b      	lsrs	r3, r3, #25
 8002e34:	f003 0303 	and.w	r3, r3, #3
 8002e38:	3301      	adds	r3, #1
 8002e3a:	005b      	lsls	r3, r3, #1
 8002e3c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002e3e:	697a      	ldr	r2, [r7, #20]
 8002e40:	683b      	ldr	r3, [r7, #0]
 8002e42:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e46:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002e48:	69bb      	ldr	r3, [r7, #24]
}
 8002e4a:	4618      	mov	r0, r3
 8002e4c:	3724      	adds	r7, #36	@ 0x24
 8002e4e:	46bd      	mov	sp, r7
 8002e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e54:	4770      	bx	lr
 8002e56:	bf00      	nop
 8002e58:	40021000 	.word	0x40021000
 8002e5c:	08004a9c 	.word	0x08004a9c
 8002e60:	00f42400 	.word	0x00f42400
 8002e64:	007a1200 	.word	0x007a1200

08002e68 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002e68:	b480      	push	{r7}
 8002e6a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002e6c:	4b03      	ldr	r3, [pc, #12]	@ (8002e7c <HAL_RCC_GetHCLKFreq+0x14>)
 8002e6e:	681b      	ldr	r3, [r3, #0]
}
 8002e70:	4618      	mov	r0, r3
 8002e72:	46bd      	mov	sp, r7
 8002e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e78:	4770      	bx	lr
 8002e7a:	bf00      	nop
 8002e7c:	20000000 	.word	0x20000000

08002e80 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002e80:	b580      	push	{r7, lr}
 8002e82:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002e84:	f7ff fff0 	bl	8002e68 <HAL_RCC_GetHCLKFreq>
 8002e88:	4602      	mov	r2, r0
 8002e8a:	4b06      	ldr	r3, [pc, #24]	@ (8002ea4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002e8c:	689b      	ldr	r3, [r3, #8]
 8002e8e:	0a1b      	lsrs	r3, r3, #8
 8002e90:	f003 0307 	and.w	r3, r3, #7
 8002e94:	4904      	ldr	r1, [pc, #16]	@ (8002ea8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002e96:	5ccb      	ldrb	r3, [r1, r3]
 8002e98:	f003 031f 	and.w	r3, r3, #31
 8002e9c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002ea0:	4618      	mov	r0, r3
 8002ea2:	bd80      	pop	{r7, pc}
 8002ea4:	40021000 	.word	0x40021000
 8002ea8:	08004a94 	.word	0x08004a94

08002eac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002eac:	b580      	push	{r7, lr}
 8002eae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002eb0:	f7ff ffda 	bl	8002e68 <HAL_RCC_GetHCLKFreq>
 8002eb4:	4602      	mov	r2, r0
 8002eb6:	4b06      	ldr	r3, [pc, #24]	@ (8002ed0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002eb8:	689b      	ldr	r3, [r3, #8]
 8002eba:	0adb      	lsrs	r3, r3, #11
 8002ebc:	f003 0307 	and.w	r3, r3, #7
 8002ec0:	4904      	ldr	r1, [pc, #16]	@ (8002ed4 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002ec2:	5ccb      	ldrb	r3, [r1, r3]
 8002ec4:	f003 031f 	and.w	r3, r3, #31
 8002ec8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002ecc:	4618      	mov	r0, r3
 8002ece:	bd80      	pop	{r7, pc}
 8002ed0:	40021000 	.word	0x40021000
 8002ed4:	08004a94 	.word	0x08004a94

08002ed8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002ed8:	b580      	push	{r7, lr}
 8002eda:	b086      	sub	sp, #24
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002ee0:	2300      	movs	r3, #0
 8002ee2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002ee4:	4b2a      	ldr	r3, [pc, #168]	@ (8002f90 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002ee6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ee8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d003      	beq.n	8002ef8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002ef0:	f7ff f922 	bl	8002138 <HAL_PWREx_GetVoltageRange>
 8002ef4:	6178      	str	r0, [r7, #20]
 8002ef6:	e014      	b.n	8002f22 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002ef8:	4b25      	ldr	r3, [pc, #148]	@ (8002f90 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002efa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002efc:	4a24      	ldr	r2, [pc, #144]	@ (8002f90 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002efe:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002f02:	6593      	str	r3, [r2, #88]	@ 0x58
 8002f04:	4b22      	ldr	r3, [pc, #136]	@ (8002f90 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002f06:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f08:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002f0c:	60fb      	str	r3, [r7, #12]
 8002f0e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002f10:	f7ff f912 	bl	8002138 <HAL_PWREx_GetVoltageRange>
 8002f14:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002f16:	4b1e      	ldr	r3, [pc, #120]	@ (8002f90 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002f18:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f1a:	4a1d      	ldr	r2, [pc, #116]	@ (8002f90 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002f1c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002f20:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002f22:	697b      	ldr	r3, [r7, #20]
 8002f24:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002f28:	d10b      	bne.n	8002f42 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	2b80      	cmp	r3, #128	@ 0x80
 8002f2e:	d919      	bls.n	8002f64 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	2ba0      	cmp	r3, #160	@ 0xa0
 8002f34:	d902      	bls.n	8002f3c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002f36:	2302      	movs	r3, #2
 8002f38:	613b      	str	r3, [r7, #16]
 8002f3a:	e013      	b.n	8002f64 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002f3c:	2301      	movs	r3, #1
 8002f3e:	613b      	str	r3, [r7, #16]
 8002f40:	e010      	b.n	8002f64 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	2b80      	cmp	r3, #128	@ 0x80
 8002f46:	d902      	bls.n	8002f4e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002f48:	2303      	movs	r3, #3
 8002f4a:	613b      	str	r3, [r7, #16]
 8002f4c:	e00a      	b.n	8002f64 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	2b80      	cmp	r3, #128	@ 0x80
 8002f52:	d102      	bne.n	8002f5a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002f54:	2302      	movs	r3, #2
 8002f56:	613b      	str	r3, [r7, #16]
 8002f58:	e004      	b.n	8002f64 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	2b70      	cmp	r3, #112	@ 0x70
 8002f5e:	d101      	bne.n	8002f64 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002f60:	2301      	movs	r3, #1
 8002f62:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002f64:	4b0b      	ldr	r3, [pc, #44]	@ (8002f94 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	f023 0207 	bic.w	r2, r3, #7
 8002f6c:	4909      	ldr	r1, [pc, #36]	@ (8002f94 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002f6e:	693b      	ldr	r3, [r7, #16]
 8002f70:	4313      	orrs	r3, r2
 8002f72:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002f74:	4b07      	ldr	r3, [pc, #28]	@ (8002f94 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	f003 0307 	and.w	r3, r3, #7
 8002f7c:	693a      	ldr	r2, [r7, #16]
 8002f7e:	429a      	cmp	r2, r3
 8002f80:	d001      	beq.n	8002f86 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002f82:	2301      	movs	r3, #1
 8002f84:	e000      	b.n	8002f88 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002f86:	2300      	movs	r3, #0
}
 8002f88:	4618      	mov	r0, r3
 8002f8a:	3718      	adds	r7, #24
 8002f8c:	46bd      	mov	sp, r7
 8002f8e:	bd80      	pop	{r7, pc}
 8002f90:	40021000 	.word	0x40021000
 8002f94:	40022000 	.word	0x40022000

08002f98 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002f98:	b580      	push	{r7, lr}
 8002f9a:	b086      	sub	sp, #24
 8002f9c:	af00      	add	r7, sp, #0
 8002f9e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002fa0:	2300      	movs	r3, #0
 8002fa2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002fa4:	2300      	movs	r3, #0
 8002fa6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d041      	beq.n	8003038 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002fb8:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8002fbc:	d02a      	beq.n	8003014 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8002fbe:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8002fc2:	d824      	bhi.n	800300e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002fc4:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002fc8:	d008      	beq.n	8002fdc <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002fca:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002fce:	d81e      	bhi.n	800300e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d00a      	beq.n	8002fea <HAL_RCCEx_PeriphCLKConfig+0x52>
 8002fd4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002fd8:	d010      	beq.n	8002ffc <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002fda:	e018      	b.n	800300e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002fdc:	4b86      	ldr	r3, [pc, #536]	@ (80031f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002fde:	68db      	ldr	r3, [r3, #12]
 8002fe0:	4a85      	ldr	r2, [pc, #532]	@ (80031f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002fe2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002fe6:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002fe8:	e015      	b.n	8003016 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	3304      	adds	r3, #4
 8002fee:	2100      	movs	r1, #0
 8002ff0:	4618      	mov	r0, r3
 8002ff2:	f000 facb 	bl	800358c <RCCEx_PLLSAI1_Config>
 8002ff6:	4603      	mov	r3, r0
 8002ff8:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002ffa:	e00c      	b.n	8003016 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	3320      	adds	r3, #32
 8003000:	2100      	movs	r1, #0
 8003002:	4618      	mov	r0, r3
 8003004:	f000 fbb6 	bl	8003774 <RCCEx_PLLSAI2_Config>
 8003008:	4603      	mov	r3, r0
 800300a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800300c:	e003      	b.n	8003016 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800300e:	2301      	movs	r3, #1
 8003010:	74fb      	strb	r3, [r7, #19]
      break;
 8003012:	e000      	b.n	8003016 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003014:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003016:	7cfb      	ldrb	r3, [r7, #19]
 8003018:	2b00      	cmp	r3, #0
 800301a:	d10b      	bne.n	8003034 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800301c:	4b76      	ldr	r3, [pc, #472]	@ (80031f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800301e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003022:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800302a:	4973      	ldr	r1, [pc, #460]	@ (80031f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800302c:	4313      	orrs	r3, r2
 800302e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8003032:	e001      	b.n	8003038 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003034:	7cfb      	ldrb	r3, [r7, #19]
 8003036:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003040:	2b00      	cmp	r3, #0
 8003042:	d041      	beq.n	80030c8 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003048:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800304c:	d02a      	beq.n	80030a4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800304e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003052:	d824      	bhi.n	800309e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003054:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003058:	d008      	beq.n	800306c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800305a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800305e:	d81e      	bhi.n	800309e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003060:	2b00      	cmp	r3, #0
 8003062:	d00a      	beq.n	800307a <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8003064:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003068:	d010      	beq.n	800308c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800306a:	e018      	b.n	800309e <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800306c:	4b62      	ldr	r3, [pc, #392]	@ (80031f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800306e:	68db      	ldr	r3, [r3, #12]
 8003070:	4a61      	ldr	r2, [pc, #388]	@ (80031f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003072:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003076:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003078:	e015      	b.n	80030a6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	3304      	adds	r3, #4
 800307e:	2100      	movs	r1, #0
 8003080:	4618      	mov	r0, r3
 8003082:	f000 fa83 	bl	800358c <RCCEx_PLLSAI1_Config>
 8003086:	4603      	mov	r3, r0
 8003088:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800308a:	e00c      	b.n	80030a6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	3320      	adds	r3, #32
 8003090:	2100      	movs	r1, #0
 8003092:	4618      	mov	r0, r3
 8003094:	f000 fb6e 	bl	8003774 <RCCEx_PLLSAI2_Config>
 8003098:	4603      	mov	r3, r0
 800309a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800309c:	e003      	b.n	80030a6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800309e:	2301      	movs	r3, #1
 80030a0:	74fb      	strb	r3, [r7, #19]
      break;
 80030a2:	e000      	b.n	80030a6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80030a4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80030a6:	7cfb      	ldrb	r3, [r7, #19]
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d10b      	bne.n	80030c4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80030ac:	4b52      	ldr	r3, [pc, #328]	@ (80031f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80030ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80030b2:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80030ba:	494f      	ldr	r1, [pc, #316]	@ (80031f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80030bc:	4313      	orrs	r3, r2
 80030be:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80030c2:	e001      	b.n	80030c8 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80030c4:	7cfb      	ldrb	r3, [r7, #19]
 80030c6:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	f000 80a0 	beq.w	8003216 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80030d6:	2300      	movs	r3, #0
 80030d8:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80030da:	4b47      	ldr	r3, [pc, #284]	@ (80031f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80030dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80030de:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d101      	bne.n	80030ea <HAL_RCCEx_PeriphCLKConfig+0x152>
 80030e6:	2301      	movs	r3, #1
 80030e8:	e000      	b.n	80030ec <HAL_RCCEx_PeriphCLKConfig+0x154>
 80030ea:	2300      	movs	r3, #0
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d00d      	beq.n	800310c <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80030f0:	4b41      	ldr	r3, [pc, #260]	@ (80031f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80030f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80030f4:	4a40      	ldr	r2, [pc, #256]	@ (80031f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80030f6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80030fa:	6593      	str	r3, [r2, #88]	@ 0x58
 80030fc:	4b3e      	ldr	r3, [pc, #248]	@ (80031f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80030fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003100:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003104:	60bb      	str	r3, [r7, #8]
 8003106:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003108:	2301      	movs	r3, #1
 800310a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800310c:	4b3b      	ldr	r3, [pc, #236]	@ (80031fc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	4a3a      	ldr	r2, [pc, #232]	@ (80031fc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003112:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003116:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003118:	f7fe f956 	bl	80013c8 <HAL_GetTick>
 800311c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800311e:	e009      	b.n	8003134 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003120:	f7fe f952 	bl	80013c8 <HAL_GetTick>
 8003124:	4602      	mov	r2, r0
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	1ad3      	subs	r3, r2, r3
 800312a:	2b02      	cmp	r3, #2
 800312c:	d902      	bls.n	8003134 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800312e:	2303      	movs	r3, #3
 8003130:	74fb      	strb	r3, [r7, #19]
        break;
 8003132:	e005      	b.n	8003140 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003134:	4b31      	ldr	r3, [pc, #196]	@ (80031fc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800313c:	2b00      	cmp	r3, #0
 800313e:	d0ef      	beq.n	8003120 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8003140:	7cfb      	ldrb	r3, [r7, #19]
 8003142:	2b00      	cmp	r3, #0
 8003144:	d15c      	bne.n	8003200 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003146:	4b2c      	ldr	r3, [pc, #176]	@ (80031f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003148:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800314c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003150:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003152:	697b      	ldr	r3, [r7, #20]
 8003154:	2b00      	cmp	r3, #0
 8003156:	d01f      	beq.n	8003198 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800315e:	697a      	ldr	r2, [r7, #20]
 8003160:	429a      	cmp	r2, r3
 8003162:	d019      	beq.n	8003198 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003164:	4b24      	ldr	r3, [pc, #144]	@ (80031f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003166:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800316a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800316e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003170:	4b21      	ldr	r3, [pc, #132]	@ (80031f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003172:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003176:	4a20      	ldr	r2, [pc, #128]	@ (80031f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003178:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800317c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003180:	4b1d      	ldr	r3, [pc, #116]	@ (80031f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003182:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003186:	4a1c      	ldr	r2, [pc, #112]	@ (80031f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003188:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800318c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003190:	4a19      	ldr	r2, [pc, #100]	@ (80031f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003192:	697b      	ldr	r3, [r7, #20]
 8003194:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003198:	697b      	ldr	r3, [r7, #20]
 800319a:	f003 0301 	and.w	r3, r3, #1
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d016      	beq.n	80031d0 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031a2:	f7fe f911 	bl	80013c8 <HAL_GetTick>
 80031a6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80031a8:	e00b      	b.n	80031c2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80031aa:	f7fe f90d 	bl	80013c8 <HAL_GetTick>
 80031ae:	4602      	mov	r2, r0
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	1ad3      	subs	r3, r2, r3
 80031b4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80031b8:	4293      	cmp	r3, r2
 80031ba:	d902      	bls.n	80031c2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80031bc:	2303      	movs	r3, #3
 80031be:	74fb      	strb	r3, [r7, #19]
            break;
 80031c0:	e006      	b.n	80031d0 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80031c2:	4b0d      	ldr	r3, [pc, #52]	@ (80031f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80031c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80031c8:	f003 0302 	and.w	r3, r3, #2
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d0ec      	beq.n	80031aa <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80031d0:	7cfb      	ldrb	r3, [r7, #19]
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d10c      	bne.n	80031f0 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80031d6:	4b08      	ldr	r3, [pc, #32]	@ (80031f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80031d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80031dc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80031e6:	4904      	ldr	r1, [pc, #16]	@ (80031f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80031e8:	4313      	orrs	r3, r2
 80031ea:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80031ee:	e009      	b.n	8003204 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80031f0:	7cfb      	ldrb	r3, [r7, #19]
 80031f2:	74bb      	strb	r3, [r7, #18]
 80031f4:	e006      	b.n	8003204 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80031f6:	bf00      	nop
 80031f8:	40021000 	.word	0x40021000
 80031fc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003200:	7cfb      	ldrb	r3, [r7, #19]
 8003202:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003204:	7c7b      	ldrb	r3, [r7, #17]
 8003206:	2b01      	cmp	r3, #1
 8003208:	d105      	bne.n	8003216 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800320a:	4b9e      	ldr	r3, [pc, #632]	@ (8003484 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800320c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800320e:	4a9d      	ldr	r2, [pc, #628]	@ (8003484 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003210:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003214:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	f003 0301 	and.w	r3, r3, #1
 800321e:	2b00      	cmp	r3, #0
 8003220:	d00a      	beq.n	8003238 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003222:	4b98      	ldr	r3, [pc, #608]	@ (8003484 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003224:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003228:	f023 0203 	bic.w	r2, r3, #3
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003230:	4994      	ldr	r1, [pc, #592]	@ (8003484 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003232:	4313      	orrs	r3, r2
 8003234:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	f003 0302 	and.w	r3, r3, #2
 8003240:	2b00      	cmp	r3, #0
 8003242:	d00a      	beq.n	800325a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003244:	4b8f      	ldr	r3, [pc, #572]	@ (8003484 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003246:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800324a:	f023 020c 	bic.w	r2, r3, #12
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003252:	498c      	ldr	r1, [pc, #560]	@ (8003484 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003254:	4313      	orrs	r3, r2
 8003256:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	f003 0304 	and.w	r3, r3, #4
 8003262:	2b00      	cmp	r3, #0
 8003264:	d00a      	beq.n	800327c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003266:	4b87      	ldr	r3, [pc, #540]	@ (8003484 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003268:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800326c:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003274:	4983      	ldr	r1, [pc, #524]	@ (8003484 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003276:	4313      	orrs	r3, r2
 8003278:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	f003 0308 	and.w	r3, r3, #8
 8003284:	2b00      	cmp	r3, #0
 8003286:	d00a      	beq.n	800329e <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003288:	4b7e      	ldr	r3, [pc, #504]	@ (8003484 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800328a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800328e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003296:	497b      	ldr	r1, [pc, #492]	@ (8003484 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003298:	4313      	orrs	r3, r2
 800329a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	f003 0310 	and.w	r3, r3, #16
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d00a      	beq.n	80032c0 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80032aa:	4b76      	ldr	r3, [pc, #472]	@ (8003484 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80032b0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80032b8:	4972      	ldr	r1, [pc, #456]	@ (8003484 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032ba:	4313      	orrs	r3, r2
 80032bc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	f003 0320 	and.w	r3, r3, #32
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d00a      	beq.n	80032e2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80032cc:	4b6d      	ldr	r3, [pc, #436]	@ (8003484 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80032d2:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80032da:	496a      	ldr	r1, [pc, #424]	@ (8003484 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032dc:	4313      	orrs	r3, r2
 80032de:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d00a      	beq.n	8003304 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80032ee:	4b65      	ldr	r3, [pc, #404]	@ (8003484 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80032f4:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80032fc:	4961      	ldr	r1, [pc, #388]	@ (8003484 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032fe:	4313      	orrs	r3, r2
 8003300:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800330c:	2b00      	cmp	r3, #0
 800330e:	d00a      	beq.n	8003326 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003310:	4b5c      	ldr	r3, [pc, #368]	@ (8003484 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003312:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003316:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800331e:	4959      	ldr	r1, [pc, #356]	@ (8003484 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003320:	4313      	orrs	r3, r2
 8003322:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800332e:	2b00      	cmp	r3, #0
 8003330:	d00a      	beq.n	8003348 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003332:	4b54      	ldr	r3, [pc, #336]	@ (8003484 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003334:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003338:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003340:	4950      	ldr	r1, [pc, #320]	@ (8003484 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003342:	4313      	orrs	r3, r2
 8003344:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003350:	2b00      	cmp	r3, #0
 8003352:	d00a      	beq.n	800336a <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003354:	4b4b      	ldr	r3, [pc, #300]	@ (8003484 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003356:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800335a:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003362:	4948      	ldr	r1, [pc, #288]	@ (8003484 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003364:	4313      	orrs	r3, r2
 8003366:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003372:	2b00      	cmp	r3, #0
 8003374:	d00a      	beq.n	800338c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003376:	4b43      	ldr	r3, [pc, #268]	@ (8003484 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003378:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800337c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003384:	493f      	ldr	r1, [pc, #252]	@ (8003484 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003386:	4313      	orrs	r3, r2
 8003388:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003394:	2b00      	cmp	r3, #0
 8003396:	d028      	beq.n	80033ea <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003398:	4b3a      	ldr	r3, [pc, #232]	@ (8003484 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800339a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800339e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80033a6:	4937      	ldr	r1, [pc, #220]	@ (8003484 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033a8:	4313      	orrs	r3, r2
 80033aa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80033b2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80033b6:	d106      	bne.n	80033c6 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80033b8:	4b32      	ldr	r3, [pc, #200]	@ (8003484 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033ba:	68db      	ldr	r3, [r3, #12]
 80033bc:	4a31      	ldr	r2, [pc, #196]	@ (8003484 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033be:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80033c2:	60d3      	str	r3, [r2, #12]
 80033c4:	e011      	b.n	80033ea <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80033ca:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80033ce:	d10c      	bne.n	80033ea <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	3304      	adds	r3, #4
 80033d4:	2101      	movs	r1, #1
 80033d6:	4618      	mov	r0, r3
 80033d8:	f000 f8d8 	bl	800358c <RCCEx_PLLSAI1_Config>
 80033dc:	4603      	mov	r3, r0
 80033de:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80033e0:	7cfb      	ldrb	r3, [r7, #19]
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d001      	beq.n	80033ea <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80033e6:	7cfb      	ldrb	r3, [r7, #19]
 80033e8:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d028      	beq.n	8003448 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80033f6:	4b23      	ldr	r3, [pc, #140]	@ (8003484 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80033fc:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003404:	491f      	ldr	r1, [pc, #124]	@ (8003484 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003406:	4313      	orrs	r3, r2
 8003408:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003410:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003414:	d106      	bne.n	8003424 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003416:	4b1b      	ldr	r3, [pc, #108]	@ (8003484 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003418:	68db      	ldr	r3, [r3, #12]
 800341a:	4a1a      	ldr	r2, [pc, #104]	@ (8003484 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800341c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003420:	60d3      	str	r3, [r2, #12]
 8003422:	e011      	b.n	8003448 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003428:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800342c:	d10c      	bne.n	8003448 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	3304      	adds	r3, #4
 8003432:	2101      	movs	r1, #1
 8003434:	4618      	mov	r0, r3
 8003436:	f000 f8a9 	bl	800358c <RCCEx_PLLSAI1_Config>
 800343a:	4603      	mov	r3, r0
 800343c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800343e:	7cfb      	ldrb	r3, [r7, #19]
 8003440:	2b00      	cmp	r3, #0
 8003442:	d001      	beq.n	8003448 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8003444:	7cfb      	ldrb	r3, [r7, #19]
 8003446:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003450:	2b00      	cmp	r3, #0
 8003452:	d02b      	beq.n	80034ac <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003454:	4b0b      	ldr	r3, [pc, #44]	@ (8003484 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003456:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800345a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003462:	4908      	ldr	r1, [pc, #32]	@ (8003484 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003464:	4313      	orrs	r3, r2
 8003466:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800346e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003472:	d109      	bne.n	8003488 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003474:	4b03      	ldr	r3, [pc, #12]	@ (8003484 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003476:	68db      	ldr	r3, [r3, #12]
 8003478:	4a02      	ldr	r2, [pc, #8]	@ (8003484 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800347a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800347e:	60d3      	str	r3, [r2, #12]
 8003480:	e014      	b.n	80034ac <HAL_RCCEx_PeriphCLKConfig+0x514>
 8003482:	bf00      	nop
 8003484:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800348c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003490:	d10c      	bne.n	80034ac <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	3304      	adds	r3, #4
 8003496:	2101      	movs	r1, #1
 8003498:	4618      	mov	r0, r3
 800349a:	f000 f877 	bl	800358c <RCCEx_PLLSAI1_Config>
 800349e:	4603      	mov	r3, r0
 80034a0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80034a2:	7cfb      	ldrb	r3, [r7, #19]
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d001      	beq.n	80034ac <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80034a8:	7cfb      	ldrb	r3, [r7, #19]
 80034aa:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d02f      	beq.n	8003518 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80034b8:	4b2b      	ldr	r3, [pc, #172]	@ (8003568 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80034ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80034be:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80034c6:	4928      	ldr	r1, [pc, #160]	@ (8003568 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80034c8:	4313      	orrs	r3, r2
 80034ca:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80034d2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80034d6:	d10d      	bne.n	80034f4 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	3304      	adds	r3, #4
 80034dc:	2102      	movs	r1, #2
 80034de:	4618      	mov	r0, r3
 80034e0:	f000 f854 	bl	800358c <RCCEx_PLLSAI1_Config>
 80034e4:	4603      	mov	r3, r0
 80034e6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80034e8:	7cfb      	ldrb	r3, [r7, #19]
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d014      	beq.n	8003518 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80034ee:	7cfb      	ldrb	r3, [r7, #19]
 80034f0:	74bb      	strb	r3, [r7, #18]
 80034f2:	e011      	b.n	8003518 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80034f8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80034fc:	d10c      	bne.n	8003518 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	3320      	adds	r3, #32
 8003502:	2102      	movs	r1, #2
 8003504:	4618      	mov	r0, r3
 8003506:	f000 f935 	bl	8003774 <RCCEx_PLLSAI2_Config>
 800350a:	4603      	mov	r3, r0
 800350c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800350e:	7cfb      	ldrb	r3, [r7, #19]
 8003510:	2b00      	cmp	r3, #0
 8003512:	d001      	beq.n	8003518 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003514:	7cfb      	ldrb	r3, [r7, #19]
 8003516:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003520:	2b00      	cmp	r3, #0
 8003522:	d00a      	beq.n	800353a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003524:	4b10      	ldr	r3, [pc, #64]	@ (8003568 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003526:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800352a:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003532:	490d      	ldr	r1, [pc, #52]	@ (8003568 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003534:	4313      	orrs	r3, r2
 8003536:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003542:	2b00      	cmp	r3, #0
 8003544:	d00b      	beq.n	800355e <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003546:	4b08      	ldr	r3, [pc, #32]	@ (8003568 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003548:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800354c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003556:	4904      	ldr	r1, [pc, #16]	@ (8003568 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003558:	4313      	orrs	r3, r2
 800355a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800355e:	7cbb      	ldrb	r3, [r7, #18]
}
 8003560:	4618      	mov	r0, r3
 8003562:	3718      	adds	r7, #24
 8003564:	46bd      	mov	sp, r7
 8003566:	bd80      	pop	{r7, pc}
 8003568:	40021000 	.word	0x40021000

0800356c <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 800356c:	b480      	push	{r7}
 800356e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8003570:	4b05      	ldr	r3, [pc, #20]	@ (8003588 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	4a04      	ldr	r2, [pc, #16]	@ (8003588 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8003576:	f043 0304 	orr.w	r3, r3, #4
 800357a:	6013      	str	r3, [r2, #0]
}
 800357c:	bf00      	nop
 800357e:	46bd      	mov	sp, r7
 8003580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003584:	4770      	bx	lr
 8003586:	bf00      	nop
 8003588:	40021000 	.word	0x40021000

0800358c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800358c:	b580      	push	{r7, lr}
 800358e:	b084      	sub	sp, #16
 8003590:	af00      	add	r7, sp, #0
 8003592:	6078      	str	r0, [r7, #4]
 8003594:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003596:	2300      	movs	r3, #0
 8003598:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800359a:	4b75      	ldr	r3, [pc, #468]	@ (8003770 <RCCEx_PLLSAI1_Config+0x1e4>)
 800359c:	68db      	ldr	r3, [r3, #12]
 800359e:	f003 0303 	and.w	r3, r3, #3
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d018      	beq.n	80035d8 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80035a6:	4b72      	ldr	r3, [pc, #456]	@ (8003770 <RCCEx_PLLSAI1_Config+0x1e4>)
 80035a8:	68db      	ldr	r3, [r3, #12]
 80035aa:	f003 0203 	and.w	r2, r3, #3
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	429a      	cmp	r2, r3
 80035b4:	d10d      	bne.n	80035d2 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
       ||
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d009      	beq.n	80035d2 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80035be:	4b6c      	ldr	r3, [pc, #432]	@ (8003770 <RCCEx_PLLSAI1_Config+0x1e4>)
 80035c0:	68db      	ldr	r3, [r3, #12]
 80035c2:	091b      	lsrs	r3, r3, #4
 80035c4:	f003 0307 	and.w	r3, r3, #7
 80035c8:	1c5a      	adds	r2, r3, #1
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	685b      	ldr	r3, [r3, #4]
       ||
 80035ce:	429a      	cmp	r2, r3
 80035d0:	d047      	beq.n	8003662 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80035d2:	2301      	movs	r3, #1
 80035d4:	73fb      	strb	r3, [r7, #15]
 80035d6:	e044      	b.n	8003662 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	2b03      	cmp	r3, #3
 80035de:	d018      	beq.n	8003612 <RCCEx_PLLSAI1_Config+0x86>
 80035e0:	2b03      	cmp	r3, #3
 80035e2:	d825      	bhi.n	8003630 <RCCEx_PLLSAI1_Config+0xa4>
 80035e4:	2b01      	cmp	r3, #1
 80035e6:	d002      	beq.n	80035ee <RCCEx_PLLSAI1_Config+0x62>
 80035e8:	2b02      	cmp	r3, #2
 80035ea:	d009      	beq.n	8003600 <RCCEx_PLLSAI1_Config+0x74>
 80035ec:	e020      	b.n	8003630 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80035ee:	4b60      	ldr	r3, [pc, #384]	@ (8003770 <RCCEx_PLLSAI1_Config+0x1e4>)
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	f003 0302 	and.w	r3, r3, #2
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d11d      	bne.n	8003636 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80035fa:	2301      	movs	r3, #1
 80035fc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80035fe:	e01a      	b.n	8003636 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003600:	4b5b      	ldr	r3, [pc, #364]	@ (8003770 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003608:	2b00      	cmp	r3, #0
 800360a:	d116      	bne.n	800363a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 800360c:	2301      	movs	r3, #1
 800360e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003610:	e013      	b.n	800363a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003612:	4b57      	ldr	r3, [pc, #348]	@ (8003770 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800361a:	2b00      	cmp	r3, #0
 800361c:	d10f      	bne.n	800363e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800361e:	4b54      	ldr	r3, [pc, #336]	@ (8003770 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003626:	2b00      	cmp	r3, #0
 8003628:	d109      	bne.n	800363e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800362a:	2301      	movs	r3, #1
 800362c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800362e:	e006      	b.n	800363e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003630:	2301      	movs	r3, #1
 8003632:	73fb      	strb	r3, [r7, #15]
      break;
 8003634:	e004      	b.n	8003640 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003636:	bf00      	nop
 8003638:	e002      	b.n	8003640 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800363a:	bf00      	nop
 800363c:	e000      	b.n	8003640 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800363e:	bf00      	nop
    }

    if(status == HAL_OK)
 8003640:	7bfb      	ldrb	r3, [r7, #15]
 8003642:	2b00      	cmp	r3, #0
 8003644:	d10d      	bne.n	8003662 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003646:	4b4a      	ldr	r3, [pc, #296]	@ (8003770 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003648:	68db      	ldr	r3, [r3, #12]
 800364a:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	6819      	ldr	r1, [r3, #0]
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	685b      	ldr	r3, [r3, #4]
 8003656:	3b01      	subs	r3, #1
 8003658:	011b      	lsls	r3, r3, #4
 800365a:	430b      	orrs	r3, r1
 800365c:	4944      	ldr	r1, [pc, #272]	@ (8003770 <RCCEx_PLLSAI1_Config+0x1e4>)
 800365e:	4313      	orrs	r3, r2
 8003660:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003662:	7bfb      	ldrb	r3, [r7, #15]
 8003664:	2b00      	cmp	r3, #0
 8003666:	d17d      	bne.n	8003764 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003668:	4b41      	ldr	r3, [pc, #260]	@ (8003770 <RCCEx_PLLSAI1_Config+0x1e4>)
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	4a40      	ldr	r2, [pc, #256]	@ (8003770 <RCCEx_PLLSAI1_Config+0x1e4>)
 800366e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8003672:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003674:	f7fd fea8 	bl	80013c8 <HAL_GetTick>
 8003678:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800367a:	e009      	b.n	8003690 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800367c:	f7fd fea4 	bl	80013c8 <HAL_GetTick>
 8003680:	4602      	mov	r2, r0
 8003682:	68bb      	ldr	r3, [r7, #8]
 8003684:	1ad3      	subs	r3, r2, r3
 8003686:	2b02      	cmp	r3, #2
 8003688:	d902      	bls.n	8003690 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800368a:	2303      	movs	r3, #3
 800368c:	73fb      	strb	r3, [r7, #15]
        break;
 800368e:	e005      	b.n	800369c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003690:	4b37      	ldr	r3, [pc, #220]	@ (8003770 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003698:	2b00      	cmp	r3, #0
 800369a:	d1ef      	bne.n	800367c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800369c:	7bfb      	ldrb	r3, [r7, #15]
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d160      	bne.n	8003764 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80036a2:	683b      	ldr	r3, [r7, #0]
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d111      	bne.n	80036cc <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80036a8:	4b31      	ldr	r3, [pc, #196]	@ (8003770 <RCCEx_PLLSAI1_Config+0x1e4>)
 80036aa:	691b      	ldr	r3, [r3, #16]
 80036ac:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 80036b0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80036b4:	687a      	ldr	r2, [r7, #4]
 80036b6:	6892      	ldr	r2, [r2, #8]
 80036b8:	0211      	lsls	r1, r2, #8
 80036ba:	687a      	ldr	r2, [r7, #4]
 80036bc:	68d2      	ldr	r2, [r2, #12]
 80036be:	0912      	lsrs	r2, r2, #4
 80036c0:	0452      	lsls	r2, r2, #17
 80036c2:	430a      	orrs	r2, r1
 80036c4:	492a      	ldr	r1, [pc, #168]	@ (8003770 <RCCEx_PLLSAI1_Config+0x1e4>)
 80036c6:	4313      	orrs	r3, r2
 80036c8:	610b      	str	r3, [r1, #16]
 80036ca:	e027      	b.n	800371c <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80036cc:	683b      	ldr	r3, [r7, #0]
 80036ce:	2b01      	cmp	r3, #1
 80036d0:	d112      	bne.n	80036f8 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80036d2:	4b27      	ldr	r3, [pc, #156]	@ (8003770 <RCCEx_PLLSAI1_Config+0x1e4>)
 80036d4:	691b      	ldr	r3, [r3, #16]
 80036d6:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 80036da:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80036de:	687a      	ldr	r2, [r7, #4]
 80036e0:	6892      	ldr	r2, [r2, #8]
 80036e2:	0211      	lsls	r1, r2, #8
 80036e4:	687a      	ldr	r2, [r7, #4]
 80036e6:	6912      	ldr	r2, [r2, #16]
 80036e8:	0852      	lsrs	r2, r2, #1
 80036ea:	3a01      	subs	r2, #1
 80036ec:	0552      	lsls	r2, r2, #21
 80036ee:	430a      	orrs	r2, r1
 80036f0:	491f      	ldr	r1, [pc, #124]	@ (8003770 <RCCEx_PLLSAI1_Config+0x1e4>)
 80036f2:	4313      	orrs	r3, r2
 80036f4:	610b      	str	r3, [r1, #16]
 80036f6:	e011      	b.n	800371c <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80036f8:	4b1d      	ldr	r3, [pc, #116]	@ (8003770 <RCCEx_PLLSAI1_Config+0x1e4>)
 80036fa:	691b      	ldr	r3, [r3, #16]
 80036fc:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8003700:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003704:	687a      	ldr	r2, [r7, #4]
 8003706:	6892      	ldr	r2, [r2, #8]
 8003708:	0211      	lsls	r1, r2, #8
 800370a:	687a      	ldr	r2, [r7, #4]
 800370c:	6952      	ldr	r2, [r2, #20]
 800370e:	0852      	lsrs	r2, r2, #1
 8003710:	3a01      	subs	r2, #1
 8003712:	0652      	lsls	r2, r2, #25
 8003714:	430a      	orrs	r2, r1
 8003716:	4916      	ldr	r1, [pc, #88]	@ (8003770 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003718:	4313      	orrs	r3, r2
 800371a:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800371c:	4b14      	ldr	r3, [pc, #80]	@ (8003770 <RCCEx_PLLSAI1_Config+0x1e4>)
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	4a13      	ldr	r2, [pc, #76]	@ (8003770 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003722:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003726:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003728:	f7fd fe4e 	bl	80013c8 <HAL_GetTick>
 800372c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800372e:	e009      	b.n	8003744 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003730:	f7fd fe4a 	bl	80013c8 <HAL_GetTick>
 8003734:	4602      	mov	r2, r0
 8003736:	68bb      	ldr	r3, [r7, #8]
 8003738:	1ad3      	subs	r3, r2, r3
 800373a:	2b02      	cmp	r3, #2
 800373c:	d902      	bls.n	8003744 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 800373e:	2303      	movs	r3, #3
 8003740:	73fb      	strb	r3, [r7, #15]
          break;
 8003742:	e005      	b.n	8003750 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003744:	4b0a      	ldr	r3, [pc, #40]	@ (8003770 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800374c:	2b00      	cmp	r3, #0
 800374e:	d0ef      	beq.n	8003730 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8003750:	7bfb      	ldrb	r3, [r7, #15]
 8003752:	2b00      	cmp	r3, #0
 8003754:	d106      	bne.n	8003764 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003756:	4b06      	ldr	r3, [pc, #24]	@ (8003770 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003758:	691a      	ldr	r2, [r3, #16]
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	699b      	ldr	r3, [r3, #24]
 800375e:	4904      	ldr	r1, [pc, #16]	@ (8003770 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003760:	4313      	orrs	r3, r2
 8003762:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003764:	7bfb      	ldrb	r3, [r7, #15]
}
 8003766:	4618      	mov	r0, r3
 8003768:	3710      	adds	r7, #16
 800376a:	46bd      	mov	sp, r7
 800376c:	bd80      	pop	{r7, pc}
 800376e:	bf00      	nop
 8003770:	40021000 	.word	0x40021000

08003774 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003774:	b580      	push	{r7, lr}
 8003776:	b084      	sub	sp, #16
 8003778:	af00      	add	r7, sp, #0
 800377a:	6078      	str	r0, [r7, #4]
 800377c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800377e:	2300      	movs	r3, #0
 8003780:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003782:	4b6a      	ldr	r3, [pc, #424]	@ (800392c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003784:	68db      	ldr	r3, [r3, #12]
 8003786:	f003 0303 	and.w	r3, r3, #3
 800378a:	2b00      	cmp	r3, #0
 800378c:	d018      	beq.n	80037c0 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800378e:	4b67      	ldr	r3, [pc, #412]	@ (800392c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003790:	68db      	ldr	r3, [r3, #12]
 8003792:	f003 0203 	and.w	r2, r3, #3
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	429a      	cmp	r2, r3
 800379c:	d10d      	bne.n	80037ba <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
       ||
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d009      	beq.n	80037ba <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80037a6:	4b61      	ldr	r3, [pc, #388]	@ (800392c <RCCEx_PLLSAI2_Config+0x1b8>)
 80037a8:	68db      	ldr	r3, [r3, #12]
 80037aa:	091b      	lsrs	r3, r3, #4
 80037ac:	f003 0307 	and.w	r3, r3, #7
 80037b0:	1c5a      	adds	r2, r3, #1
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	685b      	ldr	r3, [r3, #4]
       ||
 80037b6:	429a      	cmp	r2, r3
 80037b8:	d047      	beq.n	800384a <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80037ba:	2301      	movs	r3, #1
 80037bc:	73fb      	strb	r3, [r7, #15]
 80037be:	e044      	b.n	800384a <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	2b03      	cmp	r3, #3
 80037c6:	d018      	beq.n	80037fa <RCCEx_PLLSAI2_Config+0x86>
 80037c8:	2b03      	cmp	r3, #3
 80037ca:	d825      	bhi.n	8003818 <RCCEx_PLLSAI2_Config+0xa4>
 80037cc:	2b01      	cmp	r3, #1
 80037ce:	d002      	beq.n	80037d6 <RCCEx_PLLSAI2_Config+0x62>
 80037d0:	2b02      	cmp	r3, #2
 80037d2:	d009      	beq.n	80037e8 <RCCEx_PLLSAI2_Config+0x74>
 80037d4:	e020      	b.n	8003818 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80037d6:	4b55      	ldr	r3, [pc, #340]	@ (800392c <RCCEx_PLLSAI2_Config+0x1b8>)
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	f003 0302 	and.w	r3, r3, #2
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d11d      	bne.n	800381e <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80037e2:	2301      	movs	r3, #1
 80037e4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80037e6:	e01a      	b.n	800381e <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80037e8:	4b50      	ldr	r3, [pc, #320]	@ (800392c <RCCEx_PLLSAI2_Config+0x1b8>)
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d116      	bne.n	8003822 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80037f4:	2301      	movs	r3, #1
 80037f6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80037f8:	e013      	b.n	8003822 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80037fa:	4b4c      	ldr	r3, [pc, #304]	@ (800392c <RCCEx_PLLSAI2_Config+0x1b8>)
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003802:	2b00      	cmp	r3, #0
 8003804:	d10f      	bne.n	8003826 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003806:	4b49      	ldr	r3, [pc, #292]	@ (800392c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800380e:	2b00      	cmp	r3, #0
 8003810:	d109      	bne.n	8003826 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8003812:	2301      	movs	r3, #1
 8003814:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003816:	e006      	b.n	8003826 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003818:	2301      	movs	r3, #1
 800381a:	73fb      	strb	r3, [r7, #15]
      break;
 800381c:	e004      	b.n	8003828 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800381e:	bf00      	nop
 8003820:	e002      	b.n	8003828 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003822:	bf00      	nop
 8003824:	e000      	b.n	8003828 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003826:	bf00      	nop
    }

    if(status == HAL_OK)
 8003828:	7bfb      	ldrb	r3, [r7, #15]
 800382a:	2b00      	cmp	r3, #0
 800382c:	d10d      	bne.n	800384a <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800382e:	4b3f      	ldr	r3, [pc, #252]	@ (800392c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003830:	68db      	ldr	r3, [r3, #12]
 8003832:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	6819      	ldr	r1, [r3, #0]
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	685b      	ldr	r3, [r3, #4]
 800383e:	3b01      	subs	r3, #1
 8003840:	011b      	lsls	r3, r3, #4
 8003842:	430b      	orrs	r3, r1
 8003844:	4939      	ldr	r1, [pc, #228]	@ (800392c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003846:	4313      	orrs	r3, r2
 8003848:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800384a:	7bfb      	ldrb	r3, [r7, #15]
 800384c:	2b00      	cmp	r3, #0
 800384e:	d167      	bne.n	8003920 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003850:	4b36      	ldr	r3, [pc, #216]	@ (800392c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	4a35      	ldr	r2, [pc, #212]	@ (800392c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003856:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800385a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800385c:	f7fd fdb4 	bl	80013c8 <HAL_GetTick>
 8003860:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003862:	e009      	b.n	8003878 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003864:	f7fd fdb0 	bl	80013c8 <HAL_GetTick>
 8003868:	4602      	mov	r2, r0
 800386a:	68bb      	ldr	r3, [r7, #8]
 800386c:	1ad3      	subs	r3, r2, r3
 800386e:	2b02      	cmp	r3, #2
 8003870:	d902      	bls.n	8003878 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003872:	2303      	movs	r3, #3
 8003874:	73fb      	strb	r3, [r7, #15]
        break;
 8003876:	e005      	b.n	8003884 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003878:	4b2c      	ldr	r3, [pc, #176]	@ (800392c <RCCEx_PLLSAI2_Config+0x1b8>)
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003880:	2b00      	cmp	r3, #0
 8003882:	d1ef      	bne.n	8003864 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003884:	7bfb      	ldrb	r3, [r7, #15]
 8003886:	2b00      	cmp	r3, #0
 8003888:	d14a      	bne.n	8003920 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800388a:	683b      	ldr	r3, [r7, #0]
 800388c:	2b00      	cmp	r3, #0
 800388e:	d111      	bne.n	80038b4 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003890:	4b26      	ldr	r3, [pc, #152]	@ (800392c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003892:	695b      	ldr	r3, [r3, #20]
 8003894:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8003898:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800389c:	687a      	ldr	r2, [r7, #4]
 800389e:	6892      	ldr	r2, [r2, #8]
 80038a0:	0211      	lsls	r1, r2, #8
 80038a2:	687a      	ldr	r2, [r7, #4]
 80038a4:	68d2      	ldr	r2, [r2, #12]
 80038a6:	0912      	lsrs	r2, r2, #4
 80038a8:	0452      	lsls	r2, r2, #17
 80038aa:	430a      	orrs	r2, r1
 80038ac:	491f      	ldr	r1, [pc, #124]	@ (800392c <RCCEx_PLLSAI2_Config+0x1b8>)
 80038ae:	4313      	orrs	r3, r2
 80038b0:	614b      	str	r3, [r1, #20]
 80038b2:	e011      	b.n	80038d8 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80038b4:	4b1d      	ldr	r3, [pc, #116]	@ (800392c <RCCEx_PLLSAI2_Config+0x1b8>)
 80038b6:	695b      	ldr	r3, [r3, #20]
 80038b8:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 80038bc:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80038c0:	687a      	ldr	r2, [r7, #4]
 80038c2:	6892      	ldr	r2, [r2, #8]
 80038c4:	0211      	lsls	r1, r2, #8
 80038c6:	687a      	ldr	r2, [r7, #4]
 80038c8:	6912      	ldr	r2, [r2, #16]
 80038ca:	0852      	lsrs	r2, r2, #1
 80038cc:	3a01      	subs	r2, #1
 80038ce:	0652      	lsls	r2, r2, #25
 80038d0:	430a      	orrs	r2, r1
 80038d2:	4916      	ldr	r1, [pc, #88]	@ (800392c <RCCEx_PLLSAI2_Config+0x1b8>)
 80038d4:	4313      	orrs	r3, r2
 80038d6:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80038d8:	4b14      	ldr	r3, [pc, #80]	@ (800392c <RCCEx_PLLSAI2_Config+0x1b8>)
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	4a13      	ldr	r2, [pc, #76]	@ (800392c <RCCEx_PLLSAI2_Config+0x1b8>)
 80038de:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80038e2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038e4:	f7fd fd70 	bl	80013c8 <HAL_GetTick>
 80038e8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80038ea:	e009      	b.n	8003900 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80038ec:	f7fd fd6c 	bl	80013c8 <HAL_GetTick>
 80038f0:	4602      	mov	r2, r0
 80038f2:	68bb      	ldr	r3, [r7, #8]
 80038f4:	1ad3      	subs	r3, r2, r3
 80038f6:	2b02      	cmp	r3, #2
 80038f8:	d902      	bls.n	8003900 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80038fa:	2303      	movs	r3, #3
 80038fc:	73fb      	strb	r3, [r7, #15]
          break;
 80038fe:	e005      	b.n	800390c <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003900:	4b0a      	ldr	r3, [pc, #40]	@ (800392c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003908:	2b00      	cmp	r3, #0
 800390a:	d0ef      	beq.n	80038ec <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 800390c:	7bfb      	ldrb	r3, [r7, #15]
 800390e:	2b00      	cmp	r3, #0
 8003910:	d106      	bne.n	8003920 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003912:	4b06      	ldr	r3, [pc, #24]	@ (800392c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003914:	695a      	ldr	r2, [r3, #20]
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	695b      	ldr	r3, [r3, #20]
 800391a:	4904      	ldr	r1, [pc, #16]	@ (800392c <RCCEx_PLLSAI2_Config+0x1b8>)
 800391c:	4313      	orrs	r3, r2
 800391e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003920:	7bfb      	ldrb	r3, [r7, #15]
}
 8003922:	4618      	mov	r0, r3
 8003924:	3710      	adds	r7, #16
 8003926:	46bd      	mov	sp, r7
 8003928:	bd80      	pop	{r7, pc}
 800392a:	bf00      	nop
 800392c:	40021000 	.word	0x40021000

08003930 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003930:	b580      	push	{r7, lr}
 8003932:	b084      	sub	sp, #16
 8003934:	af00      	add	r7, sp, #0
 8003936:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	2b00      	cmp	r3, #0
 800393c:	d101      	bne.n	8003942 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800393e:	2301      	movs	r3, #1
 8003940:	e095      	b.n	8003a6e <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003946:	2b00      	cmp	r3, #0
 8003948:	d108      	bne.n	800395c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	685b      	ldr	r3, [r3, #4]
 800394e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003952:	d009      	beq.n	8003968 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	2200      	movs	r2, #0
 8003958:	61da      	str	r2, [r3, #28]
 800395a:	e005      	b.n	8003968 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	2200      	movs	r2, #0
 8003960:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	2200      	movs	r2, #0
 8003966:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	2200      	movs	r2, #0
 800396c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003974:	b2db      	uxtb	r3, r3
 8003976:	2b00      	cmp	r3, #0
 8003978:	d106      	bne.n	8003988 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	2200      	movs	r2, #0
 800397e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003982:	6878      	ldr	r0, [r7, #4]
 8003984:	f7fd faa0 	bl	8000ec8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	2202      	movs	r2, #2
 800398c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	681a      	ldr	r2, [r3, #0]
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800399e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	68db      	ldr	r3, [r3, #12]
 80039a4:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80039a8:	d902      	bls.n	80039b0 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80039aa:	2300      	movs	r3, #0
 80039ac:	60fb      	str	r3, [r7, #12]
 80039ae:	e002      	b.n	80039b6 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80039b0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80039b4:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	68db      	ldr	r3, [r3, #12]
 80039ba:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 80039be:	d007      	beq.n	80039d0 <HAL_SPI_Init+0xa0>
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	68db      	ldr	r3, [r3, #12]
 80039c4:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80039c8:	d002      	beq.n	80039d0 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	2200      	movs	r2, #0
 80039ce:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	685b      	ldr	r3, [r3, #4]
 80039d4:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	689b      	ldr	r3, [r3, #8]
 80039dc:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80039e0:	431a      	orrs	r2, r3
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	691b      	ldr	r3, [r3, #16]
 80039e6:	f003 0302 	and.w	r3, r3, #2
 80039ea:	431a      	orrs	r2, r3
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	695b      	ldr	r3, [r3, #20]
 80039f0:	f003 0301 	and.w	r3, r3, #1
 80039f4:	431a      	orrs	r2, r3
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	699b      	ldr	r3, [r3, #24]
 80039fa:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80039fe:	431a      	orrs	r2, r3
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	69db      	ldr	r3, [r3, #28]
 8003a04:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003a08:	431a      	orrs	r2, r3
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	6a1b      	ldr	r3, [r3, #32]
 8003a0e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003a12:	ea42 0103 	orr.w	r1, r2, r3
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a1a:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	430a      	orrs	r2, r1
 8003a24:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	699b      	ldr	r3, [r3, #24]
 8003a2a:	0c1b      	lsrs	r3, r3, #16
 8003a2c:	f003 0204 	and.w	r2, r3, #4
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a34:	f003 0310 	and.w	r3, r3, #16
 8003a38:	431a      	orrs	r2, r3
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003a3e:	f003 0308 	and.w	r3, r3, #8
 8003a42:	431a      	orrs	r2, r3
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	68db      	ldr	r3, [r3, #12]
 8003a48:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8003a4c:	ea42 0103 	orr.w	r1, r2, r3
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	430a      	orrs	r2, r1
 8003a5c:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	2200      	movs	r2, #0
 8003a62:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	2201      	movs	r2, #1
 8003a68:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8003a6c:	2300      	movs	r3, #0
}
 8003a6e:	4618      	mov	r0, r3
 8003a70:	3710      	adds	r7, #16
 8003a72:	46bd      	mov	sp, r7
 8003a74:	bd80      	pop	{r7, pc}

08003a76 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003a76:	b580      	push	{r7, lr}
 8003a78:	b082      	sub	sp, #8
 8003a7a:	af00      	add	r7, sp, #0
 8003a7c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d101      	bne.n	8003a88 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003a84:	2301      	movs	r3, #1
 8003a86:	e040      	b.n	8003b0a <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d106      	bne.n	8003a9e <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	2200      	movs	r2, #0
 8003a94:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003a98:	6878      	ldr	r0, [r7, #4]
 8003a9a:	f7fd fa59 	bl	8000f50 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	2224      	movs	r2, #36	@ 0x24
 8003aa2:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	681a      	ldr	r2, [r3, #0]
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	f022 0201 	bic.w	r2, r2, #1
 8003ab2:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d002      	beq.n	8003ac2 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8003abc:	6878      	ldr	r0, [r7, #4]
 8003abe:	f000 fae1 	bl	8004084 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003ac2:	6878      	ldr	r0, [r7, #4]
 8003ac4:	f000 f826 	bl	8003b14 <UART_SetConfig>
 8003ac8:	4603      	mov	r3, r0
 8003aca:	2b01      	cmp	r3, #1
 8003acc:	d101      	bne.n	8003ad2 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8003ace:	2301      	movs	r3, #1
 8003ad0:	e01b      	b.n	8003b0a <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	685a      	ldr	r2, [r3, #4]
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003ae0:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	689a      	ldr	r2, [r3, #8]
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003af0:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	681a      	ldr	r2, [r3, #0]
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	f042 0201 	orr.w	r2, r2, #1
 8003b00:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003b02:	6878      	ldr	r0, [r7, #4]
 8003b04:	f000 fb60 	bl	80041c8 <UART_CheckIdleState>
 8003b08:	4603      	mov	r3, r0
}
 8003b0a:	4618      	mov	r0, r3
 8003b0c:	3708      	adds	r7, #8
 8003b0e:	46bd      	mov	sp, r7
 8003b10:	bd80      	pop	{r7, pc}
	...

08003b14 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003b14:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003b18:	b08a      	sub	sp, #40	@ 0x28
 8003b1a:	af00      	add	r7, sp, #0
 8003b1c:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003b1e:	2300      	movs	r3, #0
 8003b20:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	689a      	ldr	r2, [r3, #8]
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	691b      	ldr	r3, [r3, #16]
 8003b2c:	431a      	orrs	r2, r3
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	695b      	ldr	r3, [r3, #20]
 8003b32:	431a      	orrs	r2, r3
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	69db      	ldr	r3, [r3, #28]
 8003b38:	4313      	orrs	r3, r2
 8003b3a:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	681a      	ldr	r2, [r3, #0]
 8003b42:	4ba4      	ldr	r3, [pc, #656]	@ (8003dd4 <UART_SetConfig+0x2c0>)
 8003b44:	4013      	ands	r3, r2
 8003b46:	68fa      	ldr	r2, [r7, #12]
 8003b48:	6812      	ldr	r2, [r2, #0]
 8003b4a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003b4c:	430b      	orrs	r3, r1
 8003b4e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	685b      	ldr	r3, [r3, #4]
 8003b56:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	68da      	ldr	r2, [r3, #12]
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	430a      	orrs	r2, r1
 8003b64:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	699b      	ldr	r3, [r3, #24]
 8003b6a:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	4a99      	ldr	r2, [pc, #612]	@ (8003dd8 <UART_SetConfig+0x2c4>)
 8003b72:	4293      	cmp	r3, r2
 8003b74:	d004      	beq.n	8003b80 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	6a1b      	ldr	r3, [r3, #32]
 8003b7a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003b7c:	4313      	orrs	r3, r2
 8003b7e:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	689b      	ldr	r3, [r3, #8]
 8003b86:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003b90:	430a      	orrs	r2, r1
 8003b92:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	4a90      	ldr	r2, [pc, #576]	@ (8003ddc <UART_SetConfig+0x2c8>)
 8003b9a:	4293      	cmp	r3, r2
 8003b9c:	d126      	bne.n	8003bec <UART_SetConfig+0xd8>
 8003b9e:	4b90      	ldr	r3, [pc, #576]	@ (8003de0 <UART_SetConfig+0x2cc>)
 8003ba0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ba4:	f003 0303 	and.w	r3, r3, #3
 8003ba8:	2b03      	cmp	r3, #3
 8003baa:	d81b      	bhi.n	8003be4 <UART_SetConfig+0xd0>
 8003bac:	a201      	add	r2, pc, #4	@ (adr r2, 8003bb4 <UART_SetConfig+0xa0>)
 8003bae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bb2:	bf00      	nop
 8003bb4:	08003bc5 	.word	0x08003bc5
 8003bb8:	08003bd5 	.word	0x08003bd5
 8003bbc:	08003bcd 	.word	0x08003bcd
 8003bc0:	08003bdd 	.word	0x08003bdd
 8003bc4:	2301      	movs	r3, #1
 8003bc6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003bca:	e116      	b.n	8003dfa <UART_SetConfig+0x2e6>
 8003bcc:	2302      	movs	r3, #2
 8003bce:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003bd2:	e112      	b.n	8003dfa <UART_SetConfig+0x2e6>
 8003bd4:	2304      	movs	r3, #4
 8003bd6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003bda:	e10e      	b.n	8003dfa <UART_SetConfig+0x2e6>
 8003bdc:	2308      	movs	r3, #8
 8003bde:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003be2:	e10a      	b.n	8003dfa <UART_SetConfig+0x2e6>
 8003be4:	2310      	movs	r3, #16
 8003be6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003bea:	e106      	b.n	8003dfa <UART_SetConfig+0x2e6>
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	4a7c      	ldr	r2, [pc, #496]	@ (8003de4 <UART_SetConfig+0x2d0>)
 8003bf2:	4293      	cmp	r3, r2
 8003bf4:	d138      	bne.n	8003c68 <UART_SetConfig+0x154>
 8003bf6:	4b7a      	ldr	r3, [pc, #488]	@ (8003de0 <UART_SetConfig+0x2cc>)
 8003bf8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003bfc:	f003 030c 	and.w	r3, r3, #12
 8003c00:	2b0c      	cmp	r3, #12
 8003c02:	d82d      	bhi.n	8003c60 <UART_SetConfig+0x14c>
 8003c04:	a201      	add	r2, pc, #4	@ (adr r2, 8003c0c <UART_SetConfig+0xf8>)
 8003c06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c0a:	bf00      	nop
 8003c0c:	08003c41 	.word	0x08003c41
 8003c10:	08003c61 	.word	0x08003c61
 8003c14:	08003c61 	.word	0x08003c61
 8003c18:	08003c61 	.word	0x08003c61
 8003c1c:	08003c51 	.word	0x08003c51
 8003c20:	08003c61 	.word	0x08003c61
 8003c24:	08003c61 	.word	0x08003c61
 8003c28:	08003c61 	.word	0x08003c61
 8003c2c:	08003c49 	.word	0x08003c49
 8003c30:	08003c61 	.word	0x08003c61
 8003c34:	08003c61 	.word	0x08003c61
 8003c38:	08003c61 	.word	0x08003c61
 8003c3c:	08003c59 	.word	0x08003c59
 8003c40:	2300      	movs	r3, #0
 8003c42:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003c46:	e0d8      	b.n	8003dfa <UART_SetConfig+0x2e6>
 8003c48:	2302      	movs	r3, #2
 8003c4a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003c4e:	e0d4      	b.n	8003dfa <UART_SetConfig+0x2e6>
 8003c50:	2304      	movs	r3, #4
 8003c52:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003c56:	e0d0      	b.n	8003dfa <UART_SetConfig+0x2e6>
 8003c58:	2308      	movs	r3, #8
 8003c5a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003c5e:	e0cc      	b.n	8003dfa <UART_SetConfig+0x2e6>
 8003c60:	2310      	movs	r3, #16
 8003c62:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003c66:	e0c8      	b.n	8003dfa <UART_SetConfig+0x2e6>
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	4a5e      	ldr	r2, [pc, #376]	@ (8003de8 <UART_SetConfig+0x2d4>)
 8003c6e:	4293      	cmp	r3, r2
 8003c70:	d125      	bne.n	8003cbe <UART_SetConfig+0x1aa>
 8003c72:	4b5b      	ldr	r3, [pc, #364]	@ (8003de0 <UART_SetConfig+0x2cc>)
 8003c74:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c78:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8003c7c:	2b30      	cmp	r3, #48	@ 0x30
 8003c7e:	d016      	beq.n	8003cae <UART_SetConfig+0x19a>
 8003c80:	2b30      	cmp	r3, #48	@ 0x30
 8003c82:	d818      	bhi.n	8003cb6 <UART_SetConfig+0x1a2>
 8003c84:	2b20      	cmp	r3, #32
 8003c86:	d00a      	beq.n	8003c9e <UART_SetConfig+0x18a>
 8003c88:	2b20      	cmp	r3, #32
 8003c8a:	d814      	bhi.n	8003cb6 <UART_SetConfig+0x1a2>
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d002      	beq.n	8003c96 <UART_SetConfig+0x182>
 8003c90:	2b10      	cmp	r3, #16
 8003c92:	d008      	beq.n	8003ca6 <UART_SetConfig+0x192>
 8003c94:	e00f      	b.n	8003cb6 <UART_SetConfig+0x1a2>
 8003c96:	2300      	movs	r3, #0
 8003c98:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003c9c:	e0ad      	b.n	8003dfa <UART_SetConfig+0x2e6>
 8003c9e:	2302      	movs	r3, #2
 8003ca0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003ca4:	e0a9      	b.n	8003dfa <UART_SetConfig+0x2e6>
 8003ca6:	2304      	movs	r3, #4
 8003ca8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003cac:	e0a5      	b.n	8003dfa <UART_SetConfig+0x2e6>
 8003cae:	2308      	movs	r3, #8
 8003cb0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003cb4:	e0a1      	b.n	8003dfa <UART_SetConfig+0x2e6>
 8003cb6:	2310      	movs	r3, #16
 8003cb8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003cbc:	e09d      	b.n	8003dfa <UART_SetConfig+0x2e6>
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	4a4a      	ldr	r2, [pc, #296]	@ (8003dec <UART_SetConfig+0x2d8>)
 8003cc4:	4293      	cmp	r3, r2
 8003cc6:	d125      	bne.n	8003d14 <UART_SetConfig+0x200>
 8003cc8:	4b45      	ldr	r3, [pc, #276]	@ (8003de0 <UART_SetConfig+0x2cc>)
 8003cca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003cce:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8003cd2:	2bc0      	cmp	r3, #192	@ 0xc0
 8003cd4:	d016      	beq.n	8003d04 <UART_SetConfig+0x1f0>
 8003cd6:	2bc0      	cmp	r3, #192	@ 0xc0
 8003cd8:	d818      	bhi.n	8003d0c <UART_SetConfig+0x1f8>
 8003cda:	2b80      	cmp	r3, #128	@ 0x80
 8003cdc:	d00a      	beq.n	8003cf4 <UART_SetConfig+0x1e0>
 8003cde:	2b80      	cmp	r3, #128	@ 0x80
 8003ce0:	d814      	bhi.n	8003d0c <UART_SetConfig+0x1f8>
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d002      	beq.n	8003cec <UART_SetConfig+0x1d8>
 8003ce6:	2b40      	cmp	r3, #64	@ 0x40
 8003ce8:	d008      	beq.n	8003cfc <UART_SetConfig+0x1e8>
 8003cea:	e00f      	b.n	8003d0c <UART_SetConfig+0x1f8>
 8003cec:	2300      	movs	r3, #0
 8003cee:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003cf2:	e082      	b.n	8003dfa <UART_SetConfig+0x2e6>
 8003cf4:	2302      	movs	r3, #2
 8003cf6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003cfa:	e07e      	b.n	8003dfa <UART_SetConfig+0x2e6>
 8003cfc:	2304      	movs	r3, #4
 8003cfe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003d02:	e07a      	b.n	8003dfa <UART_SetConfig+0x2e6>
 8003d04:	2308      	movs	r3, #8
 8003d06:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003d0a:	e076      	b.n	8003dfa <UART_SetConfig+0x2e6>
 8003d0c:	2310      	movs	r3, #16
 8003d0e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003d12:	e072      	b.n	8003dfa <UART_SetConfig+0x2e6>
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	4a35      	ldr	r2, [pc, #212]	@ (8003df0 <UART_SetConfig+0x2dc>)
 8003d1a:	4293      	cmp	r3, r2
 8003d1c:	d12a      	bne.n	8003d74 <UART_SetConfig+0x260>
 8003d1e:	4b30      	ldr	r3, [pc, #192]	@ (8003de0 <UART_SetConfig+0x2cc>)
 8003d20:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d24:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003d28:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003d2c:	d01a      	beq.n	8003d64 <UART_SetConfig+0x250>
 8003d2e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003d32:	d81b      	bhi.n	8003d6c <UART_SetConfig+0x258>
 8003d34:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003d38:	d00c      	beq.n	8003d54 <UART_SetConfig+0x240>
 8003d3a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003d3e:	d815      	bhi.n	8003d6c <UART_SetConfig+0x258>
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d003      	beq.n	8003d4c <UART_SetConfig+0x238>
 8003d44:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003d48:	d008      	beq.n	8003d5c <UART_SetConfig+0x248>
 8003d4a:	e00f      	b.n	8003d6c <UART_SetConfig+0x258>
 8003d4c:	2300      	movs	r3, #0
 8003d4e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003d52:	e052      	b.n	8003dfa <UART_SetConfig+0x2e6>
 8003d54:	2302      	movs	r3, #2
 8003d56:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003d5a:	e04e      	b.n	8003dfa <UART_SetConfig+0x2e6>
 8003d5c:	2304      	movs	r3, #4
 8003d5e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003d62:	e04a      	b.n	8003dfa <UART_SetConfig+0x2e6>
 8003d64:	2308      	movs	r3, #8
 8003d66:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003d6a:	e046      	b.n	8003dfa <UART_SetConfig+0x2e6>
 8003d6c:	2310      	movs	r3, #16
 8003d6e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003d72:	e042      	b.n	8003dfa <UART_SetConfig+0x2e6>
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	4a17      	ldr	r2, [pc, #92]	@ (8003dd8 <UART_SetConfig+0x2c4>)
 8003d7a:	4293      	cmp	r3, r2
 8003d7c:	d13a      	bne.n	8003df4 <UART_SetConfig+0x2e0>
 8003d7e:	4b18      	ldr	r3, [pc, #96]	@ (8003de0 <UART_SetConfig+0x2cc>)
 8003d80:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d84:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8003d88:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003d8c:	d01a      	beq.n	8003dc4 <UART_SetConfig+0x2b0>
 8003d8e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003d92:	d81b      	bhi.n	8003dcc <UART_SetConfig+0x2b8>
 8003d94:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003d98:	d00c      	beq.n	8003db4 <UART_SetConfig+0x2a0>
 8003d9a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003d9e:	d815      	bhi.n	8003dcc <UART_SetConfig+0x2b8>
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d003      	beq.n	8003dac <UART_SetConfig+0x298>
 8003da4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003da8:	d008      	beq.n	8003dbc <UART_SetConfig+0x2a8>
 8003daa:	e00f      	b.n	8003dcc <UART_SetConfig+0x2b8>
 8003dac:	2300      	movs	r3, #0
 8003dae:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003db2:	e022      	b.n	8003dfa <UART_SetConfig+0x2e6>
 8003db4:	2302      	movs	r3, #2
 8003db6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003dba:	e01e      	b.n	8003dfa <UART_SetConfig+0x2e6>
 8003dbc:	2304      	movs	r3, #4
 8003dbe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003dc2:	e01a      	b.n	8003dfa <UART_SetConfig+0x2e6>
 8003dc4:	2308      	movs	r3, #8
 8003dc6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003dca:	e016      	b.n	8003dfa <UART_SetConfig+0x2e6>
 8003dcc:	2310      	movs	r3, #16
 8003dce:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003dd2:	e012      	b.n	8003dfa <UART_SetConfig+0x2e6>
 8003dd4:	efff69f3 	.word	0xefff69f3
 8003dd8:	40008000 	.word	0x40008000
 8003ddc:	40013800 	.word	0x40013800
 8003de0:	40021000 	.word	0x40021000
 8003de4:	40004400 	.word	0x40004400
 8003de8:	40004800 	.word	0x40004800
 8003dec:	40004c00 	.word	0x40004c00
 8003df0:	40005000 	.word	0x40005000
 8003df4:	2310      	movs	r3, #16
 8003df6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	4a9f      	ldr	r2, [pc, #636]	@ (800407c <UART_SetConfig+0x568>)
 8003e00:	4293      	cmp	r3, r2
 8003e02:	d17a      	bne.n	8003efa <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003e04:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003e08:	2b08      	cmp	r3, #8
 8003e0a:	d824      	bhi.n	8003e56 <UART_SetConfig+0x342>
 8003e0c:	a201      	add	r2, pc, #4	@ (adr r2, 8003e14 <UART_SetConfig+0x300>)
 8003e0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e12:	bf00      	nop
 8003e14:	08003e39 	.word	0x08003e39
 8003e18:	08003e57 	.word	0x08003e57
 8003e1c:	08003e41 	.word	0x08003e41
 8003e20:	08003e57 	.word	0x08003e57
 8003e24:	08003e47 	.word	0x08003e47
 8003e28:	08003e57 	.word	0x08003e57
 8003e2c:	08003e57 	.word	0x08003e57
 8003e30:	08003e57 	.word	0x08003e57
 8003e34:	08003e4f 	.word	0x08003e4f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003e38:	f7ff f822 	bl	8002e80 <HAL_RCC_GetPCLK1Freq>
 8003e3c:	61f8      	str	r0, [r7, #28]
        break;
 8003e3e:	e010      	b.n	8003e62 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003e40:	4b8f      	ldr	r3, [pc, #572]	@ (8004080 <UART_SetConfig+0x56c>)
 8003e42:	61fb      	str	r3, [r7, #28]
        break;
 8003e44:	e00d      	b.n	8003e62 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003e46:	f7fe ff83 	bl	8002d50 <HAL_RCC_GetSysClockFreq>
 8003e4a:	61f8      	str	r0, [r7, #28]
        break;
 8003e4c:	e009      	b.n	8003e62 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003e4e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003e52:	61fb      	str	r3, [r7, #28]
        break;
 8003e54:	e005      	b.n	8003e62 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8003e56:	2300      	movs	r3, #0
 8003e58:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003e5a:	2301      	movs	r3, #1
 8003e5c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8003e60:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003e62:	69fb      	ldr	r3, [r7, #28]
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	f000 80fb 	beq.w	8004060 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	685a      	ldr	r2, [r3, #4]
 8003e6e:	4613      	mov	r3, r2
 8003e70:	005b      	lsls	r3, r3, #1
 8003e72:	4413      	add	r3, r2
 8003e74:	69fa      	ldr	r2, [r7, #28]
 8003e76:	429a      	cmp	r2, r3
 8003e78:	d305      	bcc.n	8003e86 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	685b      	ldr	r3, [r3, #4]
 8003e7e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003e80:	69fa      	ldr	r2, [r7, #28]
 8003e82:	429a      	cmp	r2, r3
 8003e84:	d903      	bls.n	8003e8e <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8003e86:	2301      	movs	r3, #1
 8003e88:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8003e8c:	e0e8      	b.n	8004060 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003e8e:	69fb      	ldr	r3, [r7, #28]
 8003e90:	2200      	movs	r2, #0
 8003e92:	461c      	mov	r4, r3
 8003e94:	4615      	mov	r5, r2
 8003e96:	f04f 0200 	mov.w	r2, #0
 8003e9a:	f04f 0300 	mov.w	r3, #0
 8003e9e:	022b      	lsls	r3, r5, #8
 8003ea0:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8003ea4:	0222      	lsls	r2, r4, #8
 8003ea6:	68f9      	ldr	r1, [r7, #12]
 8003ea8:	6849      	ldr	r1, [r1, #4]
 8003eaa:	0849      	lsrs	r1, r1, #1
 8003eac:	2000      	movs	r0, #0
 8003eae:	4688      	mov	r8, r1
 8003eb0:	4681      	mov	r9, r0
 8003eb2:	eb12 0a08 	adds.w	sl, r2, r8
 8003eb6:	eb43 0b09 	adc.w	fp, r3, r9
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	685b      	ldr	r3, [r3, #4]
 8003ebe:	2200      	movs	r2, #0
 8003ec0:	603b      	str	r3, [r7, #0]
 8003ec2:	607a      	str	r2, [r7, #4]
 8003ec4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003ec8:	4650      	mov	r0, sl
 8003eca:	4659      	mov	r1, fp
 8003ecc:	f7fc f97c 	bl	80001c8 <__aeabi_uldivmod>
 8003ed0:	4602      	mov	r2, r0
 8003ed2:	460b      	mov	r3, r1
 8003ed4:	4613      	mov	r3, r2
 8003ed6:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003ed8:	69bb      	ldr	r3, [r7, #24]
 8003eda:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003ede:	d308      	bcc.n	8003ef2 <UART_SetConfig+0x3de>
 8003ee0:	69bb      	ldr	r3, [r7, #24]
 8003ee2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003ee6:	d204      	bcs.n	8003ef2 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	69ba      	ldr	r2, [r7, #24]
 8003eee:	60da      	str	r2, [r3, #12]
 8003ef0:	e0b6      	b.n	8004060 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8003ef2:	2301      	movs	r3, #1
 8003ef4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8003ef8:	e0b2      	b.n	8004060 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	69db      	ldr	r3, [r3, #28]
 8003efe:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003f02:	d15e      	bne.n	8003fc2 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8003f04:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003f08:	2b08      	cmp	r3, #8
 8003f0a:	d828      	bhi.n	8003f5e <UART_SetConfig+0x44a>
 8003f0c:	a201      	add	r2, pc, #4	@ (adr r2, 8003f14 <UART_SetConfig+0x400>)
 8003f0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f12:	bf00      	nop
 8003f14:	08003f39 	.word	0x08003f39
 8003f18:	08003f41 	.word	0x08003f41
 8003f1c:	08003f49 	.word	0x08003f49
 8003f20:	08003f5f 	.word	0x08003f5f
 8003f24:	08003f4f 	.word	0x08003f4f
 8003f28:	08003f5f 	.word	0x08003f5f
 8003f2c:	08003f5f 	.word	0x08003f5f
 8003f30:	08003f5f 	.word	0x08003f5f
 8003f34:	08003f57 	.word	0x08003f57
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003f38:	f7fe ffa2 	bl	8002e80 <HAL_RCC_GetPCLK1Freq>
 8003f3c:	61f8      	str	r0, [r7, #28]
        break;
 8003f3e:	e014      	b.n	8003f6a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003f40:	f7fe ffb4 	bl	8002eac <HAL_RCC_GetPCLK2Freq>
 8003f44:	61f8      	str	r0, [r7, #28]
        break;
 8003f46:	e010      	b.n	8003f6a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003f48:	4b4d      	ldr	r3, [pc, #308]	@ (8004080 <UART_SetConfig+0x56c>)
 8003f4a:	61fb      	str	r3, [r7, #28]
        break;
 8003f4c:	e00d      	b.n	8003f6a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003f4e:	f7fe feff 	bl	8002d50 <HAL_RCC_GetSysClockFreq>
 8003f52:	61f8      	str	r0, [r7, #28]
        break;
 8003f54:	e009      	b.n	8003f6a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003f56:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003f5a:	61fb      	str	r3, [r7, #28]
        break;
 8003f5c:	e005      	b.n	8003f6a <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8003f5e:	2300      	movs	r3, #0
 8003f60:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003f62:	2301      	movs	r3, #1
 8003f64:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8003f68:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003f6a:	69fb      	ldr	r3, [r7, #28]
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d077      	beq.n	8004060 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003f70:	69fb      	ldr	r3, [r7, #28]
 8003f72:	005a      	lsls	r2, r3, #1
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	685b      	ldr	r3, [r3, #4]
 8003f78:	085b      	lsrs	r3, r3, #1
 8003f7a:	441a      	add	r2, r3
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	685b      	ldr	r3, [r3, #4]
 8003f80:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f84:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003f86:	69bb      	ldr	r3, [r7, #24]
 8003f88:	2b0f      	cmp	r3, #15
 8003f8a:	d916      	bls.n	8003fba <UART_SetConfig+0x4a6>
 8003f8c:	69bb      	ldr	r3, [r7, #24]
 8003f8e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003f92:	d212      	bcs.n	8003fba <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003f94:	69bb      	ldr	r3, [r7, #24]
 8003f96:	b29b      	uxth	r3, r3
 8003f98:	f023 030f 	bic.w	r3, r3, #15
 8003f9c:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003f9e:	69bb      	ldr	r3, [r7, #24]
 8003fa0:	085b      	lsrs	r3, r3, #1
 8003fa2:	b29b      	uxth	r3, r3
 8003fa4:	f003 0307 	and.w	r3, r3, #7
 8003fa8:	b29a      	uxth	r2, r3
 8003faa:	8afb      	ldrh	r3, [r7, #22]
 8003fac:	4313      	orrs	r3, r2
 8003fae:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	8afa      	ldrh	r2, [r7, #22]
 8003fb6:	60da      	str	r2, [r3, #12]
 8003fb8:	e052      	b.n	8004060 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8003fba:	2301      	movs	r3, #1
 8003fbc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8003fc0:	e04e      	b.n	8004060 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003fc2:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003fc6:	2b08      	cmp	r3, #8
 8003fc8:	d827      	bhi.n	800401a <UART_SetConfig+0x506>
 8003fca:	a201      	add	r2, pc, #4	@ (adr r2, 8003fd0 <UART_SetConfig+0x4bc>)
 8003fcc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fd0:	08003ff5 	.word	0x08003ff5
 8003fd4:	08003ffd 	.word	0x08003ffd
 8003fd8:	08004005 	.word	0x08004005
 8003fdc:	0800401b 	.word	0x0800401b
 8003fe0:	0800400b 	.word	0x0800400b
 8003fe4:	0800401b 	.word	0x0800401b
 8003fe8:	0800401b 	.word	0x0800401b
 8003fec:	0800401b 	.word	0x0800401b
 8003ff0:	08004013 	.word	0x08004013
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003ff4:	f7fe ff44 	bl	8002e80 <HAL_RCC_GetPCLK1Freq>
 8003ff8:	61f8      	str	r0, [r7, #28]
        break;
 8003ffa:	e014      	b.n	8004026 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003ffc:	f7fe ff56 	bl	8002eac <HAL_RCC_GetPCLK2Freq>
 8004000:	61f8      	str	r0, [r7, #28]
        break;
 8004002:	e010      	b.n	8004026 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004004:	4b1e      	ldr	r3, [pc, #120]	@ (8004080 <UART_SetConfig+0x56c>)
 8004006:	61fb      	str	r3, [r7, #28]
        break;
 8004008:	e00d      	b.n	8004026 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800400a:	f7fe fea1 	bl	8002d50 <HAL_RCC_GetSysClockFreq>
 800400e:	61f8      	str	r0, [r7, #28]
        break;
 8004010:	e009      	b.n	8004026 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004012:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004016:	61fb      	str	r3, [r7, #28]
        break;
 8004018:	e005      	b.n	8004026 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 800401a:	2300      	movs	r3, #0
 800401c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800401e:	2301      	movs	r3, #1
 8004020:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8004024:	bf00      	nop
    }

    if (pclk != 0U)
 8004026:	69fb      	ldr	r3, [r7, #28]
 8004028:	2b00      	cmp	r3, #0
 800402a:	d019      	beq.n	8004060 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	685b      	ldr	r3, [r3, #4]
 8004030:	085a      	lsrs	r2, r3, #1
 8004032:	69fb      	ldr	r3, [r7, #28]
 8004034:	441a      	add	r2, r3
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	685b      	ldr	r3, [r3, #4]
 800403a:	fbb2 f3f3 	udiv	r3, r2, r3
 800403e:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004040:	69bb      	ldr	r3, [r7, #24]
 8004042:	2b0f      	cmp	r3, #15
 8004044:	d909      	bls.n	800405a <UART_SetConfig+0x546>
 8004046:	69bb      	ldr	r3, [r7, #24]
 8004048:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800404c:	d205      	bcs.n	800405a <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800404e:	69bb      	ldr	r3, [r7, #24]
 8004050:	b29a      	uxth	r2, r3
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	60da      	str	r2, [r3, #12]
 8004058:	e002      	b.n	8004060 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800405a:	2301      	movs	r3, #1
 800405c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	2200      	movs	r2, #0
 8004064:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	2200      	movs	r2, #0
 800406a:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 800406c:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8004070:	4618      	mov	r0, r3
 8004072:	3728      	adds	r7, #40	@ 0x28
 8004074:	46bd      	mov	sp, r7
 8004076:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800407a:	bf00      	nop
 800407c:	40008000 	.word	0x40008000
 8004080:	00f42400 	.word	0x00f42400

08004084 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004084:	b480      	push	{r7}
 8004086:	b083      	sub	sp, #12
 8004088:	af00      	add	r7, sp, #0
 800408a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004090:	f003 0308 	and.w	r3, r3, #8
 8004094:	2b00      	cmp	r3, #0
 8004096:	d00a      	beq.n	80040ae <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	685b      	ldr	r3, [r3, #4]
 800409e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	430a      	orrs	r2, r1
 80040ac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040b2:	f003 0301 	and.w	r3, r3, #1
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d00a      	beq.n	80040d0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	685b      	ldr	r3, [r3, #4]
 80040c0:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	430a      	orrs	r2, r1
 80040ce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040d4:	f003 0302 	and.w	r3, r3, #2
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d00a      	beq.n	80040f2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	685b      	ldr	r3, [r3, #4]
 80040e2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	430a      	orrs	r2, r1
 80040f0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040f6:	f003 0304 	and.w	r3, r3, #4
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d00a      	beq.n	8004114 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	685b      	ldr	r3, [r3, #4]
 8004104:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	430a      	orrs	r2, r1
 8004112:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004118:	f003 0310 	and.w	r3, r3, #16
 800411c:	2b00      	cmp	r3, #0
 800411e:	d00a      	beq.n	8004136 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	689b      	ldr	r3, [r3, #8]
 8004126:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	430a      	orrs	r2, r1
 8004134:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800413a:	f003 0320 	and.w	r3, r3, #32
 800413e:	2b00      	cmp	r3, #0
 8004140:	d00a      	beq.n	8004158 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	689b      	ldr	r3, [r3, #8]
 8004148:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	430a      	orrs	r2, r1
 8004156:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800415c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004160:	2b00      	cmp	r3, #0
 8004162:	d01a      	beq.n	800419a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	685b      	ldr	r3, [r3, #4]
 800416a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	430a      	orrs	r2, r1
 8004178:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800417e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004182:	d10a      	bne.n	800419a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	685b      	ldr	r3, [r3, #4]
 800418a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	430a      	orrs	r2, r1
 8004198:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800419e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d00a      	beq.n	80041bc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	685b      	ldr	r3, [r3, #4]
 80041ac:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	430a      	orrs	r2, r1
 80041ba:	605a      	str	r2, [r3, #4]
  }
}
 80041bc:	bf00      	nop
 80041be:	370c      	adds	r7, #12
 80041c0:	46bd      	mov	sp, r7
 80041c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c6:	4770      	bx	lr

080041c8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80041c8:	b580      	push	{r7, lr}
 80041ca:	b098      	sub	sp, #96	@ 0x60
 80041cc:	af02      	add	r7, sp, #8
 80041ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	2200      	movs	r2, #0
 80041d4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80041d8:	f7fd f8f6 	bl	80013c8 <HAL_GetTick>
 80041dc:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	f003 0308 	and.w	r3, r3, #8
 80041e8:	2b08      	cmp	r3, #8
 80041ea:	d12e      	bne.n	800424a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80041ec:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80041f0:	9300      	str	r3, [sp, #0]
 80041f2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80041f4:	2200      	movs	r2, #0
 80041f6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80041fa:	6878      	ldr	r0, [r7, #4]
 80041fc:	f000 f88c 	bl	8004318 <UART_WaitOnFlagUntilTimeout>
 8004200:	4603      	mov	r3, r0
 8004202:	2b00      	cmp	r3, #0
 8004204:	d021      	beq.n	800424a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800420c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800420e:	e853 3f00 	ldrex	r3, [r3]
 8004212:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004214:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004216:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800421a:	653b      	str	r3, [r7, #80]	@ 0x50
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	461a      	mov	r2, r3
 8004222:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004224:	647b      	str	r3, [r7, #68]	@ 0x44
 8004226:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004228:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800422a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800422c:	e841 2300 	strex	r3, r2, [r1]
 8004230:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004232:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004234:	2b00      	cmp	r3, #0
 8004236:	d1e6      	bne.n	8004206 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	2220      	movs	r2, #32
 800423c:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	2200      	movs	r2, #0
 8004242:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004246:	2303      	movs	r3, #3
 8004248:	e062      	b.n	8004310 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	f003 0304 	and.w	r3, r3, #4
 8004254:	2b04      	cmp	r3, #4
 8004256:	d149      	bne.n	80042ec <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004258:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800425c:	9300      	str	r3, [sp, #0]
 800425e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004260:	2200      	movs	r2, #0
 8004262:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8004266:	6878      	ldr	r0, [r7, #4]
 8004268:	f000 f856 	bl	8004318 <UART_WaitOnFlagUntilTimeout>
 800426c:	4603      	mov	r3, r0
 800426e:	2b00      	cmp	r3, #0
 8004270:	d03c      	beq.n	80042ec <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004278:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800427a:	e853 3f00 	ldrex	r3, [r3]
 800427e:	623b      	str	r3, [r7, #32]
   return(result);
 8004280:	6a3b      	ldr	r3, [r7, #32]
 8004282:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004286:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	461a      	mov	r2, r3
 800428e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004290:	633b      	str	r3, [r7, #48]	@ 0x30
 8004292:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004294:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004296:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004298:	e841 2300 	strex	r3, r2, [r1]
 800429c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800429e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d1e6      	bne.n	8004272 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	3308      	adds	r3, #8
 80042aa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042ac:	693b      	ldr	r3, [r7, #16]
 80042ae:	e853 3f00 	ldrex	r3, [r3]
 80042b2:	60fb      	str	r3, [r7, #12]
   return(result);
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	f023 0301 	bic.w	r3, r3, #1
 80042ba:	64bb      	str	r3, [r7, #72]	@ 0x48
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	3308      	adds	r3, #8
 80042c2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80042c4:	61fa      	str	r2, [r7, #28]
 80042c6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042c8:	69b9      	ldr	r1, [r7, #24]
 80042ca:	69fa      	ldr	r2, [r7, #28]
 80042cc:	e841 2300 	strex	r3, r2, [r1]
 80042d0:	617b      	str	r3, [r7, #20]
   return(result);
 80042d2:	697b      	ldr	r3, [r7, #20]
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d1e5      	bne.n	80042a4 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	2220      	movs	r2, #32
 80042dc:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	2200      	movs	r2, #0
 80042e4:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80042e8:	2303      	movs	r3, #3
 80042ea:	e011      	b.n	8004310 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	2220      	movs	r2, #32
 80042f0:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	2220      	movs	r2, #32
 80042f6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	2200      	movs	r2, #0
 80042fe:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	2200      	movs	r2, #0
 8004304:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	2200      	movs	r2, #0
 800430a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800430e:	2300      	movs	r3, #0
}
 8004310:	4618      	mov	r0, r3
 8004312:	3758      	adds	r7, #88	@ 0x58
 8004314:	46bd      	mov	sp, r7
 8004316:	bd80      	pop	{r7, pc}

08004318 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004318:	b580      	push	{r7, lr}
 800431a:	b084      	sub	sp, #16
 800431c:	af00      	add	r7, sp, #0
 800431e:	60f8      	str	r0, [r7, #12]
 8004320:	60b9      	str	r1, [r7, #8]
 8004322:	603b      	str	r3, [r7, #0]
 8004324:	4613      	mov	r3, r2
 8004326:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004328:	e04f      	b.n	80043ca <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800432a:	69bb      	ldr	r3, [r7, #24]
 800432c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004330:	d04b      	beq.n	80043ca <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004332:	f7fd f849 	bl	80013c8 <HAL_GetTick>
 8004336:	4602      	mov	r2, r0
 8004338:	683b      	ldr	r3, [r7, #0]
 800433a:	1ad3      	subs	r3, r2, r3
 800433c:	69ba      	ldr	r2, [r7, #24]
 800433e:	429a      	cmp	r2, r3
 8004340:	d302      	bcc.n	8004348 <UART_WaitOnFlagUntilTimeout+0x30>
 8004342:	69bb      	ldr	r3, [r7, #24]
 8004344:	2b00      	cmp	r3, #0
 8004346:	d101      	bne.n	800434c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004348:	2303      	movs	r3, #3
 800434a:	e04e      	b.n	80043ea <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	f003 0304 	and.w	r3, r3, #4
 8004356:	2b00      	cmp	r3, #0
 8004358:	d037      	beq.n	80043ca <UART_WaitOnFlagUntilTimeout+0xb2>
 800435a:	68bb      	ldr	r3, [r7, #8]
 800435c:	2b80      	cmp	r3, #128	@ 0x80
 800435e:	d034      	beq.n	80043ca <UART_WaitOnFlagUntilTimeout+0xb2>
 8004360:	68bb      	ldr	r3, [r7, #8]
 8004362:	2b40      	cmp	r3, #64	@ 0x40
 8004364:	d031      	beq.n	80043ca <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	69db      	ldr	r3, [r3, #28]
 800436c:	f003 0308 	and.w	r3, r3, #8
 8004370:	2b08      	cmp	r3, #8
 8004372:	d110      	bne.n	8004396 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	2208      	movs	r2, #8
 800437a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800437c:	68f8      	ldr	r0, [r7, #12]
 800437e:	f000 f838 	bl	80043f2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	2208      	movs	r2, #8
 8004386:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	2200      	movs	r2, #0
 800438e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8004392:	2301      	movs	r3, #1
 8004394:	e029      	b.n	80043ea <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	69db      	ldr	r3, [r3, #28]
 800439c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80043a0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80043a4:	d111      	bne.n	80043ca <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80043ae:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80043b0:	68f8      	ldr	r0, [r7, #12]
 80043b2:	f000 f81e 	bl	80043f2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	2220      	movs	r2, #32
 80043ba:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	2200      	movs	r2, #0
 80043c2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 80043c6:	2303      	movs	r3, #3
 80043c8:	e00f      	b.n	80043ea <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	69da      	ldr	r2, [r3, #28]
 80043d0:	68bb      	ldr	r3, [r7, #8]
 80043d2:	4013      	ands	r3, r2
 80043d4:	68ba      	ldr	r2, [r7, #8]
 80043d6:	429a      	cmp	r2, r3
 80043d8:	bf0c      	ite	eq
 80043da:	2301      	moveq	r3, #1
 80043dc:	2300      	movne	r3, #0
 80043de:	b2db      	uxtb	r3, r3
 80043e0:	461a      	mov	r2, r3
 80043e2:	79fb      	ldrb	r3, [r7, #7]
 80043e4:	429a      	cmp	r2, r3
 80043e6:	d0a0      	beq.n	800432a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80043e8:	2300      	movs	r3, #0
}
 80043ea:	4618      	mov	r0, r3
 80043ec:	3710      	adds	r7, #16
 80043ee:	46bd      	mov	sp, r7
 80043f0:	bd80      	pop	{r7, pc}

080043f2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80043f2:	b480      	push	{r7}
 80043f4:	b095      	sub	sp, #84	@ 0x54
 80043f6:	af00      	add	r7, sp, #0
 80043f8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004400:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004402:	e853 3f00 	ldrex	r3, [r3]
 8004406:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004408:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800440a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800440e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	461a      	mov	r2, r3
 8004416:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004418:	643b      	str	r3, [r7, #64]	@ 0x40
 800441a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800441c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800441e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004420:	e841 2300 	strex	r3, r2, [r1]
 8004424:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004426:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004428:	2b00      	cmp	r3, #0
 800442a:	d1e6      	bne.n	80043fa <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	3308      	adds	r3, #8
 8004432:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004434:	6a3b      	ldr	r3, [r7, #32]
 8004436:	e853 3f00 	ldrex	r3, [r3]
 800443a:	61fb      	str	r3, [r7, #28]
   return(result);
 800443c:	69fb      	ldr	r3, [r7, #28]
 800443e:	f023 0301 	bic.w	r3, r3, #1
 8004442:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	3308      	adds	r3, #8
 800444a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800444c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800444e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004450:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004452:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004454:	e841 2300 	strex	r3, r2, [r1]
 8004458:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800445a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800445c:	2b00      	cmp	r3, #0
 800445e:	d1e5      	bne.n	800442c <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004464:	2b01      	cmp	r3, #1
 8004466:	d118      	bne.n	800449a <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	e853 3f00 	ldrex	r3, [r3]
 8004474:	60bb      	str	r3, [r7, #8]
   return(result);
 8004476:	68bb      	ldr	r3, [r7, #8]
 8004478:	f023 0310 	bic.w	r3, r3, #16
 800447c:	647b      	str	r3, [r7, #68]	@ 0x44
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	461a      	mov	r2, r3
 8004484:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004486:	61bb      	str	r3, [r7, #24]
 8004488:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800448a:	6979      	ldr	r1, [r7, #20]
 800448c:	69ba      	ldr	r2, [r7, #24]
 800448e:	e841 2300 	strex	r3, r2, [r1]
 8004492:	613b      	str	r3, [r7, #16]
   return(result);
 8004494:	693b      	ldr	r3, [r7, #16]
 8004496:	2b00      	cmp	r3, #0
 8004498:	d1e6      	bne.n	8004468 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	2220      	movs	r2, #32
 800449e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	2200      	movs	r2, #0
 80044a6:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	2200      	movs	r2, #0
 80044ac:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80044ae:	bf00      	nop
 80044b0:	3754      	adds	r7, #84	@ 0x54
 80044b2:	46bd      	mov	sp, r7
 80044b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b8:	4770      	bx	lr

080044ba <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80044ba:	b084      	sub	sp, #16
 80044bc:	b580      	push	{r7, lr}
 80044be:	b084      	sub	sp, #16
 80044c0:	af00      	add	r7, sp, #0
 80044c2:	6078      	str	r0, [r7, #4]
 80044c4:	f107 001c 	add.w	r0, r7, #28
 80044c8:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	68db      	ldr	r3, [r3, #12]
 80044d0:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 80044d8:	6878      	ldr	r0, [r7, #4]
 80044da:	f000 fa69 	bl	80049b0 <USB_CoreReset>
 80044de:	4603      	mov	r3, r0
 80044e0:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 80044e2:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d106      	bne.n	80044f8 <USB_CoreInit+0x3e>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80044ee:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	639a      	str	r2, [r3, #56]	@ 0x38
 80044f6:	e005      	b.n	8004504 <USB_CoreInit+0x4a>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80044fc:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return ret;
 8004504:	7bfb      	ldrb	r3, [r7, #15]
}
 8004506:	4618      	mov	r0, r3
 8004508:	3710      	adds	r7, #16
 800450a:	46bd      	mov	sp, r7
 800450c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004510:	b004      	add	sp, #16
 8004512:	4770      	bx	lr

08004514 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004514:	b480      	push	{r7}
 8004516:	b083      	sub	sp, #12
 8004518:	af00      	add	r7, sp, #0
 800451a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	689b      	ldr	r3, [r3, #8]
 8004520:	f023 0201 	bic.w	r2, r3, #1
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004528:	2300      	movs	r3, #0
}
 800452a:	4618      	mov	r0, r3
 800452c:	370c      	adds	r7, #12
 800452e:	46bd      	mov	sp, r7
 8004530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004534:	4770      	bx	lr

08004536 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 8004536:	b580      	push	{r7, lr}
 8004538:	b084      	sub	sp, #16
 800453a:	af00      	add	r7, sp, #0
 800453c:	6078      	str	r0, [r7, #4]
 800453e:	460b      	mov	r3, r1
 8004540:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004542:	2300      	movs	r3, #0
 8004544:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	68db      	ldr	r3, [r3, #12]
 800454a:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004552:	78fb      	ldrb	r3, [r7, #3]
 8004554:	2b01      	cmp	r3, #1
 8004556:	d115      	bne.n	8004584 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	68db      	ldr	r3, [r3, #12]
 800455c:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8004564:	200a      	movs	r0, #10
 8004566:	f7fc ff3b 	bl	80013e0 <HAL_Delay>
      ms += 10U;
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	330a      	adds	r3, #10
 800456e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8004570:	6878      	ldr	r0, [r7, #4]
 8004572:	f000 fa0f 	bl	8004994 <USB_GetMode>
 8004576:	4603      	mov	r3, r0
 8004578:	2b01      	cmp	r3, #1
 800457a:	d01e      	beq.n	80045ba <USB_SetCurrentMode+0x84>
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	2bc7      	cmp	r3, #199	@ 0xc7
 8004580:	d9f0      	bls.n	8004564 <USB_SetCurrentMode+0x2e>
 8004582:	e01a      	b.n	80045ba <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004584:	78fb      	ldrb	r3, [r7, #3]
 8004586:	2b00      	cmp	r3, #0
 8004588:	d115      	bne.n	80045b6 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	68db      	ldr	r3, [r3, #12]
 800458e:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8004596:	200a      	movs	r0, #10
 8004598:	f7fc ff22 	bl	80013e0 <HAL_Delay>
      ms += 10U;
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	330a      	adds	r3, #10
 80045a0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80045a2:	6878      	ldr	r0, [r7, #4]
 80045a4:	f000 f9f6 	bl	8004994 <USB_GetMode>
 80045a8:	4603      	mov	r3, r0
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d005      	beq.n	80045ba <USB_SetCurrentMode+0x84>
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	2bc7      	cmp	r3, #199	@ 0xc7
 80045b2:	d9f0      	bls.n	8004596 <USB_SetCurrentMode+0x60>
 80045b4:	e001      	b.n	80045ba <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80045b6:	2301      	movs	r3, #1
 80045b8:	e005      	b.n	80045c6 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	2bc8      	cmp	r3, #200	@ 0xc8
 80045be:	d101      	bne.n	80045c4 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80045c0:	2301      	movs	r3, #1
 80045c2:	e000      	b.n	80045c6 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80045c4:	2300      	movs	r3, #0
}
 80045c6:	4618      	mov	r0, r3
 80045c8:	3710      	adds	r7, #16
 80045ca:	46bd      	mov	sp, r7
 80045cc:	bd80      	pop	{r7, pc}
	...

080045d0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80045d0:	b084      	sub	sp, #16
 80045d2:	b580      	push	{r7, lr}
 80045d4:	b086      	sub	sp, #24
 80045d6:	af00      	add	r7, sp, #0
 80045d8:	6078      	str	r0, [r7, #4]
 80045da:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80045de:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80045e2:	2300      	movs	r3, #0
 80045e4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80045ea:	2300      	movs	r3, #0
 80045ec:	613b      	str	r3, [r7, #16]
 80045ee:	e009      	b.n	8004604 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80045f0:	687a      	ldr	r2, [r7, #4]
 80045f2:	693b      	ldr	r3, [r7, #16]
 80045f4:	3340      	adds	r3, #64	@ 0x40
 80045f6:	009b      	lsls	r3, r3, #2
 80045f8:	4413      	add	r3, r2
 80045fa:	2200      	movs	r2, #0
 80045fc:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80045fe:	693b      	ldr	r3, [r7, #16]
 8004600:	3301      	adds	r3, #1
 8004602:	613b      	str	r3, [r7, #16]
 8004604:	693b      	ldr	r3, [r7, #16]
 8004606:	2b0e      	cmp	r3, #14
 8004608:	d9f2      	bls.n	80045f0 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800460a:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800460e:	2b00      	cmp	r3, #0
 8004610:	d11c      	bne.n	800464c <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004618:	685b      	ldr	r3, [r3, #4]
 800461a:	68fa      	ldr	r2, [r7, #12]
 800461c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004620:	f043 0302 	orr.w	r3, r3, #2
 8004624:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800462a:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	601a      	str	r2, [r3, #0]
 800464a:	e005      	b.n	8004658 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004650:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800465e:	461a      	mov	r2, r3
 8004660:	2300      	movs	r3, #0
 8004662:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004664:	2103      	movs	r1, #3
 8004666:	6878      	ldr	r0, [r7, #4]
 8004668:	f000 f95a 	bl	8004920 <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800466c:	2110      	movs	r1, #16
 800466e:	6878      	ldr	r0, [r7, #4]
 8004670:	f000 f8f6 	bl	8004860 <USB_FlushTxFifo>
 8004674:	4603      	mov	r3, r0
 8004676:	2b00      	cmp	r3, #0
 8004678:	d001      	beq.n	800467e <USB_DevInit+0xae>
  {
    ret = HAL_ERROR;
 800467a:	2301      	movs	r3, #1
 800467c:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800467e:	6878      	ldr	r0, [r7, #4]
 8004680:	f000 f920 	bl	80048c4 <USB_FlushRxFifo>
 8004684:	4603      	mov	r3, r0
 8004686:	2b00      	cmp	r3, #0
 8004688:	d001      	beq.n	800468e <USB_DevInit+0xbe>
  {
    ret = HAL_ERROR;
 800468a:	2301      	movs	r3, #1
 800468c:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004694:	461a      	mov	r2, r3
 8004696:	2300      	movs	r3, #0
 8004698:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80046a0:	461a      	mov	r2, r3
 80046a2:	2300      	movs	r3, #0
 80046a4:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80046ac:	461a      	mov	r2, r3
 80046ae:	2300      	movs	r3, #0
 80046b0:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80046b2:	2300      	movs	r3, #0
 80046b4:	613b      	str	r3, [r7, #16]
 80046b6:	e043      	b.n	8004740 <USB_DevInit+0x170>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80046b8:	693b      	ldr	r3, [r7, #16]
 80046ba:	015a      	lsls	r2, r3, #5
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	4413      	add	r3, r2
 80046c0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80046ca:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80046ce:	d118      	bne.n	8004702 <USB_DevInit+0x132>
    {
      if (i == 0U)
 80046d0:	693b      	ldr	r3, [r7, #16]
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d10a      	bne.n	80046ec <USB_DevInit+0x11c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80046d6:	693b      	ldr	r3, [r7, #16]
 80046d8:	015a      	lsls	r2, r3, #5
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	4413      	add	r3, r2
 80046de:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80046e2:	461a      	mov	r2, r3
 80046e4:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80046e8:	6013      	str	r3, [r2, #0]
 80046ea:	e013      	b.n	8004714 <USB_DevInit+0x144>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80046ec:	693b      	ldr	r3, [r7, #16]
 80046ee:	015a      	lsls	r2, r3, #5
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	4413      	add	r3, r2
 80046f4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80046f8:	461a      	mov	r2, r3
 80046fa:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80046fe:	6013      	str	r3, [r2, #0]
 8004700:	e008      	b.n	8004714 <USB_DevInit+0x144>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004702:	693b      	ldr	r3, [r7, #16]
 8004704:	015a      	lsls	r2, r3, #5
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	4413      	add	r3, r2
 800470a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800470e:	461a      	mov	r2, r3
 8004710:	2300      	movs	r3, #0
 8004712:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004714:	693b      	ldr	r3, [r7, #16]
 8004716:	015a      	lsls	r2, r3, #5
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	4413      	add	r3, r2
 800471c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004720:	461a      	mov	r2, r3
 8004722:	2300      	movs	r3, #0
 8004724:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004726:	693b      	ldr	r3, [r7, #16]
 8004728:	015a      	lsls	r2, r3, #5
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	4413      	add	r3, r2
 800472e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004732:	461a      	mov	r2, r3
 8004734:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8004738:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800473a:	693b      	ldr	r3, [r7, #16]
 800473c:	3301      	adds	r3, #1
 800473e:	613b      	str	r3, [r7, #16]
 8004740:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8004744:	461a      	mov	r2, r3
 8004746:	693b      	ldr	r3, [r7, #16]
 8004748:	4293      	cmp	r3, r2
 800474a:	d3b5      	bcc.n	80046b8 <USB_DevInit+0xe8>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800474c:	2300      	movs	r3, #0
 800474e:	613b      	str	r3, [r7, #16]
 8004750:	e043      	b.n	80047da <USB_DevInit+0x20a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004752:	693b      	ldr	r3, [r7, #16]
 8004754:	015a      	lsls	r2, r3, #5
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	4413      	add	r3, r2
 800475a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004764:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004768:	d118      	bne.n	800479c <USB_DevInit+0x1cc>
    {
      if (i == 0U)
 800476a:	693b      	ldr	r3, [r7, #16]
 800476c:	2b00      	cmp	r3, #0
 800476e:	d10a      	bne.n	8004786 <USB_DevInit+0x1b6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004770:	693b      	ldr	r3, [r7, #16]
 8004772:	015a      	lsls	r2, r3, #5
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	4413      	add	r3, r2
 8004778:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800477c:	461a      	mov	r2, r3
 800477e:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8004782:	6013      	str	r3, [r2, #0]
 8004784:	e013      	b.n	80047ae <USB_DevInit+0x1de>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004786:	693b      	ldr	r3, [r7, #16]
 8004788:	015a      	lsls	r2, r3, #5
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	4413      	add	r3, r2
 800478e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004792:	461a      	mov	r2, r3
 8004794:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8004798:	6013      	str	r3, [r2, #0]
 800479a:	e008      	b.n	80047ae <USB_DevInit+0x1de>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800479c:	693b      	ldr	r3, [r7, #16]
 800479e:	015a      	lsls	r2, r3, #5
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	4413      	add	r3, r2
 80047a4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80047a8:	461a      	mov	r2, r3
 80047aa:	2300      	movs	r3, #0
 80047ac:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80047ae:	693b      	ldr	r3, [r7, #16]
 80047b0:	015a      	lsls	r2, r3, #5
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	4413      	add	r3, r2
 80047b6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80047ba:	461a      	mov	r2, r3
 80047bc:	2300      	movs	r3, #0
 80047be:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80047c0:	693b      	ldr	r3, [r7, #16]
 80047c2:	015a      	lsls	r2, r3, #5
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	4413      	add	r3, r2
 80047c8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80047cc:	461a      	mov	r2, r3
 80047ce:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80047d2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80047d4:	693b      	ldr	r3, [r7, #16]
 80047d6:	3301      	adds	r3, #1
 80047d8:	613b      	str	r3, [r7, #16]
 80047da:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80047de:	461a      	mov	r2, r3
 80047e0:	693b      	ldr	r3, [r7, #16]
 80047e2:	4293      	cmp	r3, r2
 80047e4:	d3b5      	bcc.n	8004752 <USB_DevInit+0x182>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80047ec:	691b      	ldr	r3, [r3, #16]
 80047ee:	68fa      	ldr	r2, [r7, #12]
 80047f0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80047f4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80047f8:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	2200      	movs	r2, #0
 80047fe:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8004806:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	699b      	ldr	r3, [r3, #24]
 800480c:	f043 0210 	orr.w	r2, r3, #16
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	699a      	ldr	r2, [r3, #24]
 8004818:	4b10      	ldr	r3, [pc, #64]	@ (800485c <USB_DevInit+0x28c>)
 800481a:	4313      	orrs	r3, r2
 800481c:	687a      	ldr	r2, [r7, #4]
 800481e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004820:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8004824:	2b00      	cmp	r3, #0
 8004826:	d005      	beq.n	8004834 <USB_DevInit+0x264>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	699b      	ldr	r3, [r3, #24]
 800482c:	f043 0208 	orr.w	r2, r3, #8
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004834:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8004838:	2b01      	cmp	r3, #1
 800483a:	d107      	bne.n	800484c <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	699b      	ldr	r3, [r3, #24]
 8004840:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004844:	f043 0304 	orr.w	r3, r3, #4
 8004848:	687a      	ldr	r2, [r7, #4]
 800484a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800484c:	7dfb      	ldrb	r3, [r7, #23]
}
 800484e:	4618      	mov	r0, r3
 8004850:	3718      	adds	r7, #24
 8004852:	46bd      	mov	sp, r7
 8004854:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004858:	b004      	add	sp, #16
 800485a:	4770      	bx	lr
 800485c:	803c3800 	.word	0x803c3800

08004860 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004860:	b480      	push	{r7}
 8004862:	b085      	sub	sp, #20
 8004864:	af00      	add	r7, sp, #0
 8004866:	6078      	str	r0, [r7, #4]
 8004868:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800486a:	2300      	movs	r3, #0
 800486c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	3301      	adds	r3, #1
 8004872:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800487a:	d901      	bls.n	8004880 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800487c:	2303      	movs	r3, #3
 800487e:	e01b      	b.n	80048b8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	691b      	ldr	r3, [r3, #16]
 8004884:	2b00      	cmp	r3, #0
 8004886:	daf2      	bge.n	800486e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8004888:	2300      	movs	r3, #0
 800488a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800488c:	683b      	ldr	r3, [r7, #0]
 800488e:	019b      	lsls	r3, r3, #6
 8004890:	f043 0220 	orr.w	r2, r3, #32
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	3301      	adds	r3, #1
 800489c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80048a4:	d901      	bls.n	80048aa <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80048a6:	2303      	movs	r3, #3
 80048a8:	e006      	b.n	80048b8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	691b      	ldr	r3, [r3, #16]
 80048ae:	f003 0320 	and.w	r3, r3, #32
 80048b2:	2b20      	cmp	r3, #32
 80048b4:	d0f0      	beq.n	8004898 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80048b6:	2300      	movs	r3, #0
}
 80048b8:	4618      	mov	r0, r3
 80048ba:	3714      	adds	r7, #20
 80048bc:	46bd      	mov	sp, r7
 80048be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c2:	4770      	bx	lr

080048c4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80048c4:	b480      	push	{r7}
 80048c6:	b085      	sub	sp, #20
 80048c8:	af00      	add	r7, sp, #0
 80048ca:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80048cc:	2300      	movs	r3, #0
 80048ce:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	3301      	adds	r3, #1
 80048d4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80048dc:	d901      	bls.n	80048e2 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80048de:	2303      	movs	r3, #3
 80048e0:	e018      	b.n	8004914 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	691b      	ldr	r3, [r3, #16]
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	daf2      	bge.n	80048d0 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80048ea:	2300      	movs	r3, #0
 80048ec:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	2210      	movs	r2, #16
 80048f2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	3301      	adds	r3, #1
 80048f8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004900:	d901      	bls.n	8004906 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8004902:	2303      	movs	r3, #3
 8004904:	e006      	b.n	8004914 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	691b      	ldr	r3, [r3, #16]
 800490a:	f003 0310 	and.w	r3, r3, #16
 800490e:	2b10      	cmp	r3, #16
 8004910:	d0f0      	beq.n	80048f4 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8004912:	2300      	movs	r3, #0
}
 8004914:	4618      	mov	r0, r3
 8004916:	3714      	adds	r7, #20
 8004918:	46bd      	mov	sp, r7
 800491a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800491e:	4770      	bx	lr

08004920 <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004920:	b480      	push	{r7}
 8004922:	b085      	sub	sp, #20
 8004924:	af00      	add	r7, sp, #0
 8004926:	6078      	str	r0, [r7, #4]
 8004928:	460b      	mov	r3, r1
 800492a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004936:	681a      	ldr	r2, [r3, #0]
 8004938:	78fb      	ldrb	r3, [r7, #3]
 800493a:	68f9      	ldr	r1, [r7, #12]
 800493c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004940:	4313      	orrs	r3, r2
 8004942:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004944:	2300      	movs	r3, #0
}
 8004946:	4618      	mov	r0, r3
 8004948:	3714      	adds	r7, #20
 800494a:	46bd      	mov	sp, r7
 800494c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004950:	4770      	bx	lr

08004952 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8004952:	b480      	push	{r7}
 8004954:	b085      	sub	sp, #20
 8004956:	af00      	add	r7, sp, #0
 8004958:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	68fa      	ldr	r2, [r7, #12]
 8004968:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800496c:	f023 0303 	bic.w	r3, r3, #3
 8004970:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004978:	685b      	ldr	r3, [r3, #4]
 800497a:	68fa      	ldr	r2, [r7, #12]
 800497c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004980:	f043 0302 	orr.w	r3, r3, #2
 8004984:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004986:	2300      	movs	r3, #0
}
 8004988:	4618      	mov	r0, r3
 800498a:	3714      	adds	r7, #20
 800498c:	46bd      	mov	sp, r7
 800498e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004992:	4770      	bx	lr

08004994 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8004994:	b480      	push	{r7}
 8004996:	b083      	sub	sp, #12
 8004998:	af00      	add	r7, sp, #0
 800499a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	695b      	ldr	r3, [r3, #20]
 80049a0:	f003 0301 	and.w	r3, r3, #1
}
 80049a4:	4618      	mov	r0, r3
 80049a6:	370c      	adds	r7, #12
 80049a8:	46bd      	mov	sp, r7
 80049aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ae:	4770      	bx	lr

080049b0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80049b0:	b480      	push	{r7}
 80049b2:	b085      	sub	sp, #20
 80049b4:	af00      	add	r7, sp, #0
 80049b6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80049b8:	2300      	movs	r3, #0
 80049ba:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	3301      	adds	r3, #1
 80049c0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80049c8:	d901      	bls.n	80049ce <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80049ca:	2303      	movs	r3, #3
 80049cc:	e01b      	b.n	8004a06 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	691b      	ldr	r3, [r3, #16]
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	daf2      	bge.n	80049bc <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80049d6:	2300      	movs	r3, #0
 80049d8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	691b      	ldr	r3, [r3, #16]
 80049de:	f043 0201 	orr.w	r2, r3, #1
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	3301      	adds	r3, #1
 80049ea:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80049f2:	d901      	bls.n	80049f8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80049f4:	2303      	movs	r3, #3
 80049f6:	e006      	b.n	8004a06 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	691b      	ldr	r3, [r3, #16]
 80049fc:	f003 0301 	and.w	r3, r3, #1
 8004a00:	2b01      	cmp	r3, #1
 8004a02:	d0f0      	beq.n	80049e6 <USB_CoreReset+0x36>

  return HAL_OK;
 8004a04:	2300      	movs	r3, #0
}
 8004a06:	4618      	mov	r0, r3
 8004a08:	3714      	adds	r7, #20
 8004a0a:	46bd      	mov	sp, r7
 8004a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a10:	4770      	bx	lr

08004a12 <memset>:
 8004a12:	4402      	add	r2, r0
 8004a14:	4603      	mov	r3, r0
 8004a16:	4293      	cmp	r3, r2
 8004a18:	d100      	bne.n	8004a1c <memset+0xa>
 8004a1a:	4770      	bx	lr
 8004a1c:	f803 1b01 	strb.w	r1, [r3], #1
 8004a20:	e7f9      	b.n	8004a16 <memset+0x4>
	...

08004a24 <__libc_init_array>:
 8004a24:	b570      	push	{r4, r5, r6, lr}
 8004a26:	4d0d      	ldr	r5, [pc, #52]	@ (8004a5c <__libc_init_array+0x38>)
 8004a28:	4c0d      	ldr	r4, [pc, #52]	@ (8004a60 <__libc_init_array+0x3c>)
 8004a2a:	1b64      	subs	r4, r4, r5
 8004a2c:	10a4      	asrs	r4, r4, #2
 8004a2e:	2600      	movs	r6, #0
 8004a30:	42a6      	cmp	r6, r4
 8004a32:	d109      	bne.n	8004a48 <__libc_init_array+0x24>
 8004a34:	4d0b      	ldr	r5, [pc, #44]	@ (8004a64 <__libc_init_array+0x40>)
 8004a36:	4c0c      	ldr	r4, [pc, #48]	@ (8004a68 <__libc_init_array+0x44>)
 8004a38:	f000 f818 	bl	8004a6c <_init>
 8004a3c:	1b64      	subs	r4, r4, r5
 8004a3e:	10a4      	asrs	r4, r4, #2
 8004a40:	2600      	movs	r6, #0
 8004a42:	42a6      	cmp	r6, r4
 8004a44:	d105      	bne.n	8004a52 <__libc_init_array+0x2e>
 8004a46:	bd70      	pop	{r4, r5, r6, pc}
 8004a48:	f855 3b04 	ldr.w	r3, [r5], #4
 8004a4c:	4798      	blx	r3
 8004a4e:	3601      	adds	r6, #1
 8004a50:	e7ee      	b.n	8004a30 <__libc_init_array+0xc>
 8004a52:	f855 3b04 	ldr.w	r3, [r5], #4
 8004a56:	4798      	blx	r3
 8004a58:	3601      	adds	r6, #1
 8004a5a:	e7f2      	b.n	8004a42 <__libc_init_array+0x1e>
 8004a5c:	08004ad4 	.word	0x08004ad4
 8004a60:	08004ad4 	.word	0x08004ad4
 8004a64:	08004ad4 	.word	0x08004ad4
 8004a68:	08004ad8 	.word	0x08004ad8

08004a6c <_init>:
 8004a6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a6e:	bf00      	nop
 8004a70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004a72:	bc08      	pop	{r3}
 8004a74:	469e      	mov	lr, r3
 8004a76:	4770      	bx	lr

08004a78 <_fini>:
 8004a78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a7a:	bf00      	nop
 8004a7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004a7e:	bc08      	pop	{r3}
 8004a80:	469e      	mov	lr, r3
 8004a82:	4770      	bx	lr
