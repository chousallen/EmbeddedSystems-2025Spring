
ble_lab2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000edf4  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004ec  0800ef88  0800ef88  0000ff88  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f474  0800f474  00011220  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800f474  0800f474  00010474  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f47c  0800f47c  00011220  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f47c  0800f47c  0001047c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800f480  0800f480  00010480  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000220  20000000  0800f484  00011000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000da0  20000220  0800f6a4  00011220  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000fc0  0800f6a4  00011fc0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00011220  2**0
                  CONTENTS, READONLY
 12 .debug_info   00023cd2  00000000  00000000  00011250  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005145  00000000  00000000  00034f22  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001f00  00000000  00000000  0003a068  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000017e0  00000000  00000000  0003bf68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002e8ec  00000000  00000000  0003d748  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002814b  00000000  00000000  0006c034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00101beb  00000000  00000000  0009417f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00195d6a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009720  00000000  00000000  00195db0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000059  00000000  00000000  0019f4d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000220 	.word	0x20000220
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800ef6c 	.word	0x0800ef6c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000224 	.word	0x20000224
 80001cc:	0800ef6c 	.word	0x0800ef6c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b9be 	b.w	800101c <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	@ (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	@ (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9d08      	ldr	r5, [sp, #32]
 8000d2a:	468e      	mov	lr, r1
 8000d2c:	4604      	mov	r4, r0
 8000d2e:	4688      	mov	r8, r1
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d14a      	bne.n	8000dca <__udivmoddi4+0xa6>
 8000d34:	428a      	cmp	r2, r1
 8000d36:	4617      	mov	r7, r2
 8000d38:	d962      	bls.n	8000e00 <__udivmoddi4+0xdc>
 8000d3a:	fab2 f682 	clz	r6, r2
 8000d3e:	b14e      	cbz	r6, 8000d54 <__udivmoddi4+0x30>
 8000d40:	f1c6 0320 	rsb	r3, r6, #32
 8000d44:	fa01 f806 	lsl.w	r8, r1, r6
 8000d48:	fa20 f303 	lsr.w	r3, r0, r3
 8000d4c:	40b7      	lsls	r7, r6
 8000d4e:	ea43 0808 	orr.w	r8, r3, r8
 8000d52:	40b4      	lsls	r4, r6
 8000d54:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d58:	fa1f fc87 	uxth.w	ip, r7
 8000d5c:	fbb8 f1fe 	udiv	r1, r8, lr
 8000d60:	0c23      	lsrs	r3, r4, #16
 8000d62:	fb0e 8811 	mls	r8, lr, r1, r8
 8000d66:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d6a:	fb01 f20c 	mul.w	r2, r1, ip
 8000d6e:	429a      	cmp	r2, r3
 8000d70:	d909      	bls.n	8000d86 <__udivmoddi4+0x62>
 8000d72:	18fb      	adds	r3, r7, r3
 8000d74:	f101 30ff 	add.w	r0, r1, #4294967295
 8000d78:	f080 80ea 	bcs.w	8000f50 <__udivmoddi4+0x22c>
 8000d7c:	429a      	cmp	r2, r3
 8000d7e:	f240 80e7 	bls.w	8000f50 <__udivmoddi4+0x22c>
 8000d82:	3902      	subs	r1, #2
 8000d84:	443b      	add	r3, r7
 8000d86:	1a9a      	subs	r2, r3, r2
 8000d88:	b2a3      	uxth	r3, r4
 8000d8a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d8e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d92:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000d96:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d9a:	459c      	cmp	ip, r3
 8000d9c:	d909      	bls.n	8000db2 <__udivmoddi4+0x8e>
 8000d9e:	18fb      	adds	r3, r7, r3
 8000da0:	f100 32ff 	add.w	r2, r0, #4294967295
 8000da4:	f080 80d6 	bcs.w	8000f54 <__udivmoddi4+0x230>
 8000da8:	459c      	cmp	ip, r3
 8000daa:	f240 80d3 	bls.w	8000f54 <__udivmoddi4+0x230>
 8000dae:	443b      	add	r3, r7
 8000db0:	3802      	subs	r0, #2
 8000db2:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000db6:	eba3 030c 	sub.w	r3, r3, ip
 8000dba:	2100      	movs	r1, #0
 8000dbc:	b11d      	cbz	r5, 8000dc6 <__udivmoddi4+0xa2>
 8000dbe:	40f3      	lsrs	r3, r6
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	e9c5 3200 	strd	r3, r2, [r5]
 8000dc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dca:	428b      	cmp	r3, r1
 8000dcc:	d905      	bls.n	8000dda <__udivmoddi4+0xb6>
 8000dce:	b10d      	cbz	r5, 8000dd4 <__udivmoddi4+0xb0>
 8000dd0:	e9c5 0100 	strd	r0, r1, [r5]
 8000dd4:	2100      	movs	r1, #0
 8000dd6:	4608      	mov	r0, r1
 8000dd8:	e7f5      	b.n	8000dc6 <__udivmoddi4+0xa2>
 8000dda:	fab3 f183 	clz	r1, r3
 8000dde:	2900      	cmp	r1, #0
 8000de0:	d146      	bne.n	8000e70 <__udivmoddi4+0x14c>
 8000de2:	4573      	cmp	r3, lr
 8000de4:	d302      	bcc.n	8000dec <__udivmoddi4+0xc8>
 8000de6:	4282      	cmp	r2, r0
 8000de8:	f200 8105 	bhi.w	8000ff6 <__udivmoddi4+0x2d2>
 8000dec:	1a84      	subs	r4, r0, r2
 8000dee:	eb6e 0203 	sbc.w	r2, lr, r3
 8000df2:	2001      	movs	r0, #1
 8000df4:	4690      	mov	r8, r2
 8000df6:	2d00      	cmp	r5, #0
 8000df8:	d0e5      	beq.n	8000dc6 <__udivmoddi4+0xa2>
 8000dfa:	e9c5 4800 	strd	r4, r8, [r5]
 8000dfe:	e7e2      	b.n	8000dc6 <__udivmoddi4+0xa2>
 8000e00:	2a00      	cmp	r2, #0
 8000e02:	f000 8090 	beq.w	8000f26 <__udivmoddi4+0x202>
 8000e06:	fab2 f682 	clz	r6, r2
 8000e0a:	2e00      	cmp	r6, #0
 8000e0c:	f040 80a4 	bne.w	8000f58 <__udivmoddi4+0x234>
 8000e10:	1a8a      	subs	r2, r1, r2
 8000e12:	0c03      	lsrs	r3, r0, #16
 8000e14:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e18:	b280      	uxth	r0, r0
 8000e1a:	b2bc      	uxth	r4, r7
 8000e1c:	2101      	movs	r1, #1
 8000e1e:	fbb2 fcfe 	udiv	ip, r2, lr
 8000e22:	fb0e 221c 	mls	r2, lr, ip, r2
 8000e26:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000e2a:	fb04 f20c 	mul.w	r2, r4, ip
 8000e2e:	429a      	cmp	r2, r3
 8000e30:	d907      	bls.n	8000e42 <__udivmoddi4+0x11e>
 8000e32:	18fb      	adds	r3, r7, r3
 8000e34:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000e38:	d202      	bcs.n	8000e40 <__udivmoddi4+0x11c>
 8000e3a:	429a      	cmp	r2, r3
 8000e3c:	f200 80e0 	bhi.w	8001000 <__udivmoddi4+0x2dc>
 8000e40:	46c4      	mov	ip, r8
 8000e42:	1a9b      	subs	r3, r3, r2
 8000e44:	fbb3 f2fe 	udiv	r2, r3, lr
 8000e48:	fb0e 3312 	mls	r3, lr, r2, r3
 8000e4c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000e50:	fb02 f404 	mul.w	r4, r2, r4
 8000e54:	429c      	cmp	r4, r3
 8000e56:	d907      	bls.n	8000e68 <__udivmoddi4+0x144>
 8000e58:	18fb      	adds	r3, r7, r3
 8000e5a:	f102 30ff 	add.w	r0, r2, #4294967295
 8000e5e:	d202      	bcs.n	8000e66 <__udivmoddi4+0x142>
 8000e60:	429c      	cmp	r4, r3
 8000e62:	f200 80ca 	bhi.w	8000ffa <__udivmoddi4+0x2d6>
 8000e66:	4602      	mov	r2, r0
 8000e68:	1b1b      	subs	r3, r3, r4
 8000e6a:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000e6e:	e7a5      	b.n	8000dbc <__udivmoddi4+0x98>
 8000e70:	f1c1 0620 	rsb	r6, r1, #32
 8000e74:	408b      	lsls	r3, r1
 8000e76:	fa22 f706 	lsr.w	r7, r2, r6
 8000e7a:	431f      	orrs	r7, r3
 8000e7c:	fa0e f401 	lsl.w	r4, lr, r1
 8000e80:	fa20 f306 	lsr.w	r3, r0, r6
 8000e84:	fa2e fe06 	lsr.w	lr, lr, r6
 8000e88:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000e8c:	4323      	orrs	r3, r4
 8000e8e:	fa00 f801 	lsl.w	r8, r0, r1
 8000e92:	fa1f fc87 	uxth.w	ip, r7
 8000e96:	fbbe f0f9 	udiv	r0, lr, r9
 8000e9a:	0c1c      	lsrs	r4, r3, #16
 8000e9c:	fb09 ee10 	mls	lr, r9, r0, lr
 8000ea0:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000ea4:	fb00 fe0c 	mul.w	lr, r0, ip
 8000ea8:	45a6      	cmp	lr, r4
 8000eaa:	fa02 f201 	lsl.w	r2, r2, r1
 8000eae:	d909      	bls.n	8000ec4 <__udivmoddi4+0x1a0>
 8000eb0:	193c      	adds	r4, r7, r4
 8000eb2:	f100 3aff 	add.w	sl, r0, #4294967295
 8000eb6:	f080 809c 	bcs.w	8000ff2 <__udivmoddi4+0x2ce>
 8000eba:	45a6      	cmp	lr, r4
 8000ebc:	f240 8099 	bls.w	8000ff2 <__udivmoddi4+0x2ce>
 8000ec0:	3802      	subs	r0, #2
 8000ec2:	443c      	add	r4, r7
 8000ec4:	eba4 040e 	sub.w	r4, r4, lr
 8000ec8:	fa1f fe83 	uxth.w	lr, r3
 8000ecc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000ed0:	fb09 4413 	mls	r4, r9, r3, r4
 8000ed4:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000ed8:	fb03 fc0c 	mul.w	ip, r3, ip
 8000edc:	45a4      	cmp	ip, r4
 8000ede:	d908      	bls.n	8000ef2 <__udivmoddi4+0x1ce>
 8000ee0:	193c      	adds	r4, r7, r4
 8000ee2:	f103 3eff 	add.w	lr, r3, #4294967295
 8000ee6:	f080 8082 	bcs.w	8000fee <__udivmoddi4+0x2ca>
 8000eea:	45a4      	cmp	ip, r4
 8000eec:	d97f      	bls.n	8000fee <__udivmoddi4+0x2ca>
 8000eee:	3b02      	subs	r3, #2
 8000ef0:	443c      	add	r4, r7
 8000ef2:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000ef6:	eba4 040c 	sub.w	r4, r4, ip
 8000efa:	fba0 ec02 	umull	lr, ip, r0, r2
 8000efe:	4564      	cmp	r4, ip
 8000f00:	4673      	mov	r3, lr
 8000f02:	46e1      	mov	r9, ip
 8000f04:	d362      	bcc.n	8000fcc <__udivmoddi4+0x2a8>
 8000f06:	d05f      	beq.n	8000fc8 <__udivmoddi4+0x2a4>
 8000f08:	b15d      	cbz	r5, 8000f22 <__udivmoddi4+0x1fe>
 8000f0a:	ebb8 0203 	subs.w	r2, r8, r3
 8000f0e:	eb64 0409 	sbc.w	r4, r4, r9
 8000f12:	fa04 f606 	lsl.w	r6, r4, r6
 8000f16:	fa22 f301 	lsr.w	r3, r2, r1
 8000f1a:	431e      	orrs	r6, r3
 8000f1c:	40cc      	lsrs	r4, r1
 8000f1e:	e9c5 6400 	strd	r6, r4, [r5]
 8000f22:	2100      	movs	r1, #0
 8000f24:	e74f      	b.n	8000dc6 <__udivmoddi4+0xa2>
 8000f26:	fbb1 fcf2 	udiv	ip, r1, r2
 8000f2a:	0c01      	lsrs	r1, r0, #16
 8000f2c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000f30:	b280      	uxth	r0, r0
 8000f32:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000f36:	463b      	mov	r3, r7
 8000f38:	4638      	mov	r0, r7
 8000f3a:	463c      	mov	r4, r7
 8000f3c:	46b8      	mov	r8, r7
 8000f3e:	46be      	mov	lr, r7
 8000f40:	2620      	movs	r6, #32
 8000f42:	fbb1 f1f7 	udiv	r1, r1, r7
 8000f46:	eba2 0208 	sub.w	r2, r2, r8
 8000f4a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000f4e:	e766      	b.n	8000e1e <__udivmoddi4+0xfa>
 8000f50:	4601      	mov	r1, r0
 8000f52:	e718      	b.n	8000d86 <__udivmoddi4+0x62>
 8000f54:	4610      	mov	r0, r2
 8000f56:	e72c      	b.n	8000db2 <__udivmoddi4+0x8e>
 8000f58:	f1c6 0220 	rsb	r2, r6, #32
 8000f5c:	fa2e f302 	lsr.w	r3, lr, r2
 8000f60:	40b7      	lsls	r7, r6
 8000f62:	40b1      	lsls	r1, r6
 8000f64:	fa20 f202 	lsr.w	r2, r0, r2
 8000f68:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000f6c:	430a      	orrs	r2, r1
 8000f6e:	fbb3 f8fe 	udiv	r8, r3, lr
 8000f72:	b2bc      	uxth	r4, r7
 8000f74:	fb0e 3318 	mls	r3, lr, r8, r3
 8000f78:	0c11      	lsrs	r1, r2, #16
 8000f7a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f7e:	fb08 f904 	mul.w	r9, r8, r4
 8000f82:	40b0      	lsls	r0, r6
 8000f84:	4589      	cmp	r9, r1
 8000f86:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000f8a:	b280      	uxth	r0, r0
 8000f8c:	d93e      	bls.n	800100c <__udivmoddi4+0x2e8>
 8000f8e:	1879      	adds	r1, r7, r1
 8000f90:	f108 3cff 	add.w	ip, r8, #4294967295
 8000f94:	d201      	bcs.n	8000f9a <__udivmoddi4+0x276>
 8000f96:	4589      	cmp	r9, r1
 8000f98:	d81f      	bhi.n	8000fda <__udivmoddi4+0x2b6>
 8000f9a:	eba1 0109 	sub.w	r1, r1, r9
 8000f9e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000fa2:	fb09 f804 	mul.w	r8, r9, r4
 8000fa6:	fb0e 1119 	mls	r1, lr, r9, r1
 8000faa:	b292      	uxth	r2, r2
 8000fac:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000fb0:	4542      	cmp	r2, r8
 8000fb2:	d229      	bcs.n	8001008 <__udivmoddi4+0x2e4>
 8000fb4:	18ba      	adds	r2, r7, r2
 8000fb6:	f109 31ff 	add.w	r1, r9, #4294967295
 8000fba:	d2c4      	bcs.n	8000f46 <__udivmoddi4+0x222>
 8000fbc:	4542      	cmp	r2, r8
 8000fbe:	d2c2      	bcs.n	8000f46 <__udivmoddi4+0x222>
 8000fc0:	f1a9 0102 	sub.w	r1, r9, #2
 8000fc4:	443a      	add	r2, r7
 8000fc6:	e7be      	b.n	8000f46 <__udivmoddi4+0x222>
 8000fc8:	45f0      	cmp	r8, lr
 8000fca:	d29d      	bcs.n	8000f08 <__udivmoddi4+0x1e4>
 8000fcc:	ebbe 0302 	subs.w	r3, lr, r2
 8000fd0:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000fd4:	3801      	subs	r0, #1
 8000fd6:	46e1      	mov	r9, ip
 8000fd8:	e796      	b.n	8000f08 <__udivmoddi4+0x1e4>
 8000fda:	eba7 0909 	sub.w	r9, r7, r9
 8000fde:	4449      	add	r1, r9
 8000fe0:	f1a8 0c02 	sub.w	ip, r8, #2
 8000fe4:	fbb1 f9fe 	udiv	r9, r1, lr
 8000fe8:	fb09 f804 	mul.w	r8, r9, r4
 8000fec:	e7db      	b.n	8000fa6 <__udivmoddi4+0x282>
 8000fee:	4673      	mov	r3, lr
 8000ff0:	e77f      	b.n	8000ef2 <__udivmoddi4+0x1ce>
 8000ff2:	4650      	mov	r0, sl
 8000ff4:	e766      	b.n	8000ec4 <__udivmoddi4+0x1a0>
 8000ff6:	4608      	mov	r0, r1
 8000ff8:	e6fd      	b.n	8000df6 <__udivmoddi4+0xd2>
 8000ffa:	443b      	add	r3, r7
 8000ffc:	3a02      	subs	r2, #2
 8000ffe:	e733      	b.n	8000e68 <__udivmoddi4+0x144>
 8001000:	f1ac 0c02 	sub.w	ip, ip, #2
 8001004:	443b      	add	r3, r7
 8001006:	e71c      	b.n	8000e42 <__udivmoddi4+0x11e>
 8001008:	4649      	mov	r1, r9
 800100a:	e79c      	b.n	8000f46 <__udivmoddi4+0x222>
 800100c:	eba1 0109 	sub.w	r1, r1, r9
 8001010:	46c4      	mov	ip, r8
 8001012:	fbb1 f9fe 	udiv	r9, r1, lr
 8001016:	fb09 f804 	mul.w	r8, r9, r4
 800101a:	e7c4      	b.n	8000fa6 <__udivmoddi4+0x282>

0800101c <__aeabi_idiv0>:
 800101c:	4770      	bx	lr
 800101e:	bf00      	nop

08001020 <MX_BlueNRG_MS_Init>:
  PRINT_CSV("%02ld:%02ld:%02ld.%03ld", (long)(ms/(60*60*1000)%24), (long)(ms/(60*1000)%60), (long)((ms/1000)%60), (long)(ms%1000));
}
#endif

void MX_BlueNRG_MS_Init(void)
{
 8001020:	b5b0      	push	{r4, r5, r7, lr}
 8001022:	b08a      	sub	sp, #40	@ 0x28
 8001024:	af04      	add	r7, sp, #16
  /* USER CODE BEGIN BlueNRG_MS_Init_PreTreatment */

  /* USER CODE END BlueNRG_MS_Init_PreTreatment */

  /* Initialize the peripherals and the BLE Stack */
  const char *name = "BlueNRG";
 8001026:	4b4e      	ldr	r3, [pc, #312]	@ (8001160 <MX_BlueNRG_MS_Init+0x140>)
 8001028:	617b      	str	r3, [r7, #20]
  uint8_t  bdaddr_len_out;
  uint8_t  hwVersion;
  uint16_t fwVersion;
  int ret;

  User_Init();
 800102a:	f000 f8ad 	bl	8001188 <User_Init>

  /* Get the User Button initial state */
  user_button_init_state = BSP_PB_GetState(BUTTON_KEY);
 800102e:	2000      	movs	r0, #0
 8001030:	f002 feba 	bl	8003da8 <BSP_PB_GetState>
 8001034:	4603      	mov	r3, r0
 8001036:	b2da      	uxtb	r2, r3
 8001038:	4b4a      	ldr	r3, [pc, #296]	@ (8001164 <MX_BlueNRG_MS_Init+0x144>)
 800103a:	701a      	strb	r2, [r3, #0]

  hci_init(user_notify, NULL);
 800103c:	2100      	movs	r1, #0
 800103e:	484a      	ldr	r0, [pc, #296]	@ (8001168 <MX_BlueNRG_MS_Init+0x148>)
 8001040:	f009 f8ba 	bl	800a1b8 <hci_init>

  /* get the BlueNRG HW and FW versions */
  getBlueNRGVersion(&hwVersion, &fwVersion);
 8001044:	1dba      	adds	r2, r7, #6
 8001046:	f107 0308 	add.w	r3, r7, #8
 800104a:	4611      	mov	r1, r2
 800104c:	4618      	mov	r0, r3
 800104e:	f008 ff28 	bl	8009ea2 <getBlueNRGVersion>
   * Reset BlueNRG again otherwise we won't
   * be able to change its MAC address.
   * aci_hal_write_config_data() must be the first
   * command after reset otherwise it will fail.
   */
  hci_reset();
 8001052:	f008 ff68 	bl	8009f26 <hci_reset>
  HAL_Delay(100);
 8001056:	2064      	movs	r0, #100	@ 0x64
 8001058:	f003 fc16 	bl	8004888 <HAL_Delay>

  PRINTF("HWver %d\nFWver %d\n", hwVersion, fwVersion);
  if (hwVersion > 0x30) { /* X-NUCLEO-IDB05A1 expansion board is used */
 800105c:	7a3b      	ldrb	r3, [r7, #8]
 800105e:	2b30      	cmp	r3, #48	@ 0x30
 8001060:	d902      	bls.n	8001068 <MX_BlueNRG_MS_Init+0x48>
    bnrg_expansion_board = IDB05A1;
 8001062:	4b42      	ldr	r3, [pc, #264]	@ (800116c <MX_BlueNRG_MS_Init+0x14c>)
 8001064:	2201      	movs	r2, #1
 8001066:	701a      	strb	r2, [r3, #0]
  }

  ret = aci_hal_read_config_data(CONFIG_DATA_RANDOM_ADDRESS, BDADDR_SIZE, &bdaddr_len_out, bdaddr);
 8001068:	f107 0209 	add.w	r2, r7, #9
 800106c:	4b40      	ldr	r3, [pc, #256]	@ (8001170 <MX_BlueNRG_MS_Init+0x150>)
 800106e:	2106      	movs	r1, #6
 8001070:	2080      	movs	r0, #128	@ 0x80
 8001072:	f008 fe90 	bl	8009d96 <aci_hal_read_config_data>
 8001076:	4603      	mov	r3, r0
 8001078:	613b      	str	r3, [r7, #16]

  if (ret) {
    PRINTF("Read Static Random address failed.\n");
  }

  if ((bdaddr[5] & 0xC0) != 0xC0) {
 800107a:	4b3d      	ldr	r3, [pc, #244]	@ (8001170 <MX_BlueNRG_MS_Init+0x150>)
 800107c:	795b      	ldrb	r3, [r3, #5]
 800107e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8001082:	2bc0      	cmp	r3, #192	@ 0xc0
 8001084:	d001      	beq.n	800108a <MX_BlueNRG_MS_Init+0x6a>
    PRINTF("Static Random address not well formed.\n");
    while(1);
 8001086:	bf00      	nop
 8001088:	e7fd      	b.n	8001086 <MX_BlueNRG_MS_Init+0x66>
  }

  /* GATT Init */
  ret = aci_gatt_init();
 800108a:	f008 fbfa 	bl	8009882 <aci_gatt_init>
 800108e:	4603      	mov	r3, r0
 8001090:	613b      	str	r3, [r7, #16]
  if(ret){
    PRINTF("GATT_Init failed.\n");
  }

  /* GAP Init */
  if (bnrg_expansion_board == IDB05A1) {
 8001092:	4b36      	ldr	r3, [pc, #216]	@ (800116c <MX_BlueNRG_MS_Init+0x14c>)
 8001094:	781b      	ldrb	r3, [r3, #0]
 8001096:	2b01      	cmp	r3, #1
 8001098:	d110      	bne.n	80010bc <MX_BlueNRG_MS_Init+0x9c>
    ret = aci_gap_init_IDB05A1(GAP_PERIPHERAL_ROLE_IDB05A1, 0, 0x07, &service_handle, &dev_name_char_handle, &appearance_char_handle);
 800109a:	f107 020e 	add.w	r2, r7, #14
 800109e:	f107 030a 	add.w	r3, r7, #10
 80010a2:	9301      	str	r3, [sp, #4]
 80010a4:	f107 030c 	add.w	r3, r7, #12
 80010a8:	9300      	str	r3, [sp, #0]
 80010aa:	4613      	mov	r3, r2
 80010ac:	2207      	movs	r2, #7
 80010ae:	2100      	movs	r1, #0
 80010b0:	2001      	movs	r0, #1
 80010b2:	f008 f9ba 	bl	800942a <aci_gap_init_IDB05A1>
 80010b6:	4603      	mov	r3, r0
 80010b8:	613b      	str	r3, [r7, #16]
 80010ba:	e00a      	b.n	80010d2 <MX_BlueNRG_MS_Init+0xb2>
  }
  else {
    ret = aci_gap_init_IDB04A1(GAP_PERIPHERAL_ROLE_IDB04A1, &service_handle, &dev_name_char_handle, &appearance_char_handle);
 80010bc:	f107 030a 	add.w	r3, r7, #10
 80010c0:	f107 020c 	add.w	r2, r7, #12
 80010c4:	f107 010e 	add.w	r1, r7, #14
 80010c8:	2001      	movs	r0, #1
 80010ca:	f008 f9fe 	bl	80094ca <aci_gap_init_IDB04A1>
 80010ce:	4603      	mov	r3, r0
 80010d0:	613b      	str	r3, [r7, #16]
  if (ret != BLE_STATUS_SUCCESS) {
    PRINTF("GAP_Init failed.\n");
  }

  /* Update device name */
  ret = aci_gatt_update_char_value(service_handle, dev_name_char_handle, 0,
 80010d2:	89fc      	ldrh	r4, [r7, #14]
 80010d4:	89bd      	ldrh	r5, [r7, #12]
                                   strlen(name), (uint8_t *)name);
 80010d6:	6978      	ldr	r0, [r7, #20]
 80010d8:	f7ff f8ca 	bl	8000270 <strlen>
 80010dc:	4603      	mov	r3, r0
  ret = aci_gatt_update_char_value(service_handle, dev_name_char_handle, 0,
 80010de:	b2da      	uxtb	r2, r3
 80010e0:	697b      	ldr	r3, [r7, #20]
 80010e2:	9300      	str	r3, [sp, #0]
 80010e4:	4613      	mov	r3, r2
 80010e6:	2200      	movs	r2, #0
 80010e8:	4629      	mov	r1, r5
 80010ea:	4620      	mov	r0, r4
 80010ec:	f008 fd40 	bl	8009b70 <aci_gatt_update_char_value>
 80010f0:	4603      	mov	r3, r0
 80010f2:	613b      	str	r3, [r7, #16]
  if (ret) {
 80010f4:	693b      	ldr	r3, [r7, #16]
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d001      	beq.n	80010fe <MX_BlueNRG_MS_Init+0xde>
    PRINTF("aci_gatt_update_char_value failed.\n");
    while(1);
 80010fa:	bf00      	nop
 80010fc:	e7fd      	b.n	80010fa <MX_BlueNRG_MS_Init+0xda>
  }

  ret = aci_gap_set_auth_requirement(MITM_PROTECTION_REQUIRED,
 80010fe:	2301      	movs	r3, #1
 8001100:	9303      	str	r3, [sp, #12]
 8001102:	4b1c      	ldr	r3, [pc, #112]	@ (8001174 <MX_BlueNRG_MS_Init+0x154>)
 8001104:	9302      	str	r3, [sp, #8]
 8001106:	2300      	movs	r3, #0
 8001108:	9301      	str	r3, [sp, #4]
 800110a:	2310      	movs	r3, #16
 800110c:	9300      	str	r3, [sp, #0]
 800110e:	2307      	movs	r3, #7
 8001110:	2200      	movs	r2, #0
 8001112:	2100      	movs	r1, #0
 8001114:	2001      	movs	r0, #1
 8001116:	f008 fb0c 	bl	8009732 <aci_gap_set_auth_requirement>
 800111a:	4603      	mov	r3, r0
 800111c:	613b      	str	r3, [r7, #16]
                                     7,
                                     16,
                                     USE_FIXED_PIN_FOR_PAIRING,
                                     123456,
                                     BONDING);
  if (ret) {
 800111e:	693b      	ldr	r3, [r7, #16]
 8001120:	2b00      	cmp	r3, #0
 8001122:	d001      	beq.n	8001128 <MX_BlueNRG_MS_Init+0x108>
    PRINTF("aci_gap_set_authentication_requirement failed.\n");
    while(1);
 8001124:	bf00      	nop
 8001126:	e7fd      	b.n	8001124 <MX_BlueNRG_MS_Init+0x104>
  }

  PRINTF("BLE Stack Initialized\n");

  ret = Add_HWServW2ST_Service();
 8001128:	f001 f872 	bl	8002210 <Add_HWServW2ST_Service>
 800112c:	4603      	mov	r3, r0
 800112e:	613b      	str	r3, [r7, #16]
  if(ret == BLE_STATUS_SUCCESS) {
 8001130:	693b      	ldr	r3, [r7, #16]
 8001132:	2b00      	cmp	r3, #0
 8001134:	d001      	beq.n	800113a <MX_BlueNRG_MS_Init+0x11a>
    PRINTF("BlueMS HW service added successfully.\n");
  } else {
    PRINTF("Error while adding BlueMS HW service: 0x%02x\r\n", ret);
    while(1);
 8001136:	bf00      	nop
 8001138:	e7fd      	b.n	8001136 <MX_BlueNRG_MS_Init+0x116>
  }

  ret = Add_SWServW2ST_Service();
 800113a:	f001 f93b 	bl	80023b4 <Add_SWServW2ST_Service>
 800113e:	4603      	mov	r3, r0
 8001140:	613b      	str	r3, [r7, #16]
  if(ret == BLE_STATUS_SUCCESS) {
 8001142:	693b      	ldr	r3, [r7, #16]
 8001144:	2b00      	cmp	r3, #0
 8001146:	d001      	beq.n	800114c <MX_BlueNRG_MS_Init+0x12c>
     PRINTF("BlueMS SW service added successfully.\n");
  } else {
     PRINTF("Error while adding BlueMS SW service: 0x%02x\r\n", ret);
     while(1);
 8001148:	bf00      	nop
 800114a:	e7fd      	b.n	8001148 <MX_BlueNRG_MS_Init+0x128>
  }

  /* Set output power level */
  ret = aci_hal_set_tx_power_level(1,4);
 800114c:	2104      	movs	r1, #4
 800114e:	2001      	movs	r0, #1
 8001150:	f008 fe76 	bl	8009e40 <aci_hal_set_tx_power_level>
 8001154:	4603      	mov	r3, r0
 8001156:	613b      	str	r3, [r7, #16]

  /* USER CODE BEGIN BlueNRG_MS_Init_PostTreatment */

  /* USER CODE END BlueNRG_MS_Init_PostTreatment */
}
 8001158:	bf00      	nop
 800115a:	3718      	adds	r7, #24
 800115c:	46bd      	mov	sp, r7
 800115e:	bdb0      	pop	{r4, r5, r7, pc}
 8001160:	0800ef88 	.word	0x0800ef88
 8001164:	20000000 	.word	0x20000000
 8001168:	08002a49 	.word	0x08002a49
 800116c:	2000023c 	.word	0x2000023c
 8001170:	20000240 	.word	0x20000240
 8001174:	0001e240 	.word	0x0001e240

08001178 <MX_BlueNRG_MS_Process>:

/*
 * BlueNRG-MS background task
 */
void MX_BlueNRG_MS_Process(void)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BlueNRG_MS_Process_PreTreatment */

  /* USER CODE END BlueNRG_MS_Process_PreTreatment */

  User_Process();
 800117c:	f000 f812 	bl	80011a4 <User_Process>
  hci_user_evt_proc();
 8001180:	f009 f994 	bl	800a4ac <hci_user_evt_proc>

  /* USER CODE BEGIN BlueNRG_MS_Process_PostTreatment */

  /* USER CODE END BlueNRG_MS_Process_PostTreatment */
}
 8001184:	bf00      	nop
 8001186:	bd80      	pop	{r7, pc}

08001188 <User_Init>:
 *
 * @param  None
 * @retval None
 */
static void User_Init(void)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	af00      	add	r7, sp, #0
  BSP_PB_Init(BUTTON_KEY, BUTTON_MODE_EXTI);
 800118c:	2101      	movs	r1, #1
 800118e:	2000      	movs	r0, #0
 8001190:	f002 fdb6 	bl	8003d00 <BSP_PB_Init>
  BSP_LED_Init(LED2);
 8001194:	2000      	movs	r0, #0
 8001196:	f002 fd4b 	bl	8003c30 <BSP_LED_Init>

  BSP_COM_Init(COM1);
 800119a:	2000      	movs	r0, #0
 800119c:	f002 fe62 	bl	8003e64 <BSP_COM_Init>
}
 80011a0:	bf00      	nop
 80011a2:	bd80      	pop	{r7, pc}

080011a4 <User_Process>:
 *
 * @param  None
 * @retval None
 */
static void User_Process(void)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b082      	sub	sp, #8
 80011a8:	af00      	add	r7, sp, #0
  float data_t;
  float data_p;
  static uint32_t counter = 0;

  if (set_connectable)
 80011aa:	4b2c      	ldr	r3, [pc, #176]	@ (800125c <User_Process+0xb8>)
 80011ac:	781b      	ldrb	r3, [r3, #0]
 80011ae:	b2db      	uxtb	r3, r3
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d004      	beq.n	80011be <User_Process+0x1a>
  {
    Set_DeviceConnectable();
 80011b4:	f001 fbd4 	bl	8002960 <Set_DeviceConnectable>
    set_connectable = FALSE;
 80011b8:	4b28      	ldr	r3, [pc, #160]	@ (800125c <User_Process+0xb8>)
 80011ba:	2200      	movs	r2, #0
 80011bc:	701a      	strb	r2, [r3, #0]
    while (BSP_PB_GetState(BUTTON_KEY) == !user_button_init_state);

    /* Debouncing */
    HAL_Delay(50);
#endif
    BSP_LED_Toggle(LED2);
 80011be:	2000      	movs	r0, #0
 80011c0:	f002 fd48 	bl	8003c54 <BSP_LED_Toggle>

    if (connected)
 80011c4:	4b26      	ldr	r3, [pc, #152]	@ (8001260 <User_Process+0xbc>)
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d042      	beq.n	8001252 <User_Process+0xae>
    {
      /* Set a random seed */
      srand(HAL_GetTick());
 80011cc:	f003 fb50 	bl	8004870 <HAL_GetTick>
 80011d0:	4603      	mov	r3, r0
 80011d2:	4618      	mov	r0, r3
 80011d4:	f009 fafa 	bl	800a7cc <srand>

      /* Update emulated Environmental data */
      Set_Random_Environmental_Values(&data_t, &data_p);
 80011d8:	463a      	mov	r2, r7
 80011da:	1d3b      	adds	r3, r7, #4
 80011dc:	4611      	mov	r1, r2
 80011de:	4618      	mov	r0, r3
 80011e0:	f000 f84c 	bl	800127c <Set_Random_Environmental_Values>
      BlueMS_Environmental_Update((int32_t)(data_p *100), (int16_t)(data_t * 10));
 80011e4:	edd7 7a00 	vldr	s15, [r7]
 80011e8:	ed9f 7a1e 	vldr	s14, [pc, #120]	@ 8001264 <User_Process+0xc0>
 80011ec:	ee67 7a87 	vmul.f32	s15, s15, s14
 80011f0:	eefd 6ae7 	vcvt.s32.f32	s13, s15
 80011f4:	edd7 7a01 	vldr	s15, [r7, #4]
 80011f8:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 80011fc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001200:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001204:	ee17 3a90 	vmov	r3, s15
 8001208:	b21b      	sxth	r3, r3
 800120a:	4619      	mov	r1, r3
 800120c:	ee16 0a90 	vmov	r0, s13
 8001210:	f001 fb3c 	bl	800288c <BlueMS_Environmental_Update>

      /* Update emulated Acceleration, Gyroscope and Sensor Fusion data */
      Set_Random_Motion_Values(counter);
 8001214:	4b14      	ldr	r3, [pc, #80]	@ (8001268 <User_Process+0xc4>)
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	4618      	mov	r0, r3
 800121a:	f000 f8af 	bl	800137c <Set_Random_Motion_Values>
      Acc_Update(&x_axes, &g_axes, &m_axes);
 800121e:	4a13      	ldr	r2, [pc, #76]	@ (800126c <User_Process+0xc8>)
 8001220:	4913      	ldr	r1, [pc, #76]	@ (8001270 <User_Process+0xcc>)
 8001222:	4814      	ldr	r0, [pc, #80]	@ (8001274 <User_Process+0xd0>)
 8001224:	f001 f99a 	bl	800255c <Acc_Update>
      Quat_Update(&q_axes);
 8001228:	4813      	ldr	r0, [pc, #76]	@ (8001278 <User_Process+0xd4>)
 800122a:	f001 fa21 	bl	8002670 <Quat_Update>

      counter ++;
 800122e:	4b0e      	ldr	r3, [pc, #56]	@ (8001268 <User_Process+0xc4>)
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	3301      	adds	r3, #1
 8001234:	4a0c      	ldr	r2, [pc, #48]	@ (8001268 <User_Process+0xc4>)
 8001236:	6013      	str	r3, [r2, #0]
      if (counter == 40) {
 8001238:	4b0b      	ldr	r3, [pc, #44]	@ (8001268 <User_Process+0xc4>)
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	2b28      	cmp	r3, #40	@ 0x28
 800123e:	d104      	bne.n	800124a <User_Process+0xa6>
        counter = 0;
 8001240:	4b09      	ldr	r3, [pc, #36]	@ (8001268 <User_Process+0xc4>)
 8001242:	2200      	movs	r2, #0
 8001244:	601a      	str	r2, [r3, #0]
        Reset_Motion_Values();
 8001246:	f000 fee9 	bl	800201c <Reset_Motion_Values>
      }
#if !USE_BUTTON
      HAL_Delay(1000); /* wait 1 sec before sending new data */
 800124a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800124e:	f003 fb1b 	bl	8004888 <HAL_Delay>
#if USE_BUTTON
    /* Reset the User Button flag */
    user_button_pressed = 0;
  }
#endif
}
 8001252:	bf00      	nop
 8001254:	3708      	adds	r7, #8
 8001256:	46bd      	mov	sp, r7
 8001258:	bd80      	pop	{r7, pc}
 800125a:	bf00      	nop
 800125c:	20000001 	.word	0x20000001
 8001260:	2000028c 	.word	0x2000028c
 8001264:	42c80000 	.word	0x42c80000
 8001268:	20000248 	.word	0x20000248
 800126c:	200002a8 	.word	0x200002a8
 8001270:	2000029c 	.word	0x2000029c
 8001274:	20000290 	.word	0x20000290
 8001278:	200002b4 	.word	0x200002b4

0800127c <Set_Random_Environmental_Values>:
 * @param  float pointer to temperature data
 * @param  float pointer to pressure data
 * @retval None
 */
static void Set_Random_Environmental_Values(float *data_t, float *data_p)
{
 800127c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001280:	b084      	sub	sp, #16
 8001282:	af00      	add	r7, sp, #0
 8001284:	60f8      	str	r0, [r7, #12]
 8001286:	60b9      	str	r1, [r7, #8]
  *data_t = 27.0 + ((uint64_t)rand()*5)/RAND_MAX;     /* T sensor emulation */
 8001288:	f009 face 	bl	800a828 <rand>
 800128c:	4603      	mov	r3, r0
 800128e:	17da      	asrs	r2, r3, #31
 8001290:	469a      	mov	sl, r3
 8001292:	4693      	mov	fp, r2
 8001294:	4652      	mov	r2, sl
 8001296:	465b      	mov	r3, fp
 8001298:	f04f 0000 	mov.w	r0, #0
 800129c:	f04f 0100 	mov.w	r1, #0
 80012a0:	0099      	lsls	r1, r3, #2
 80012a2:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 80012a6:	0090      	lsls	r0, r2, #2
 80012a8:	4602      	mov	r2, r0
 80012aa:	460b      	mov	r3, r1
 80012ac:	eb12 010a 	adds.w	r1, r2, sl
 80012b0:	6039      	str	r1, [r7, #0]
 80012b2:	eb43 030b 	adc.w	r3, r3, fp
 80012b6:	607b      	str	r3, [r7, #4]
 80012b8:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 80012bc:	f04f 0300 	mov.w	r3, #0
 80012c0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80012c4:	f7ff fce0 	bl	8000c88 <__aeabi_uldivmod>
 80012c8:	4602      	mov	r2, r0
 80012ca:	460b      	mov	r3, r1
 80012cc:	4610      	mov	r0, r2
 80012ce:	4619      	mov	r1, r3
 80012d0:	f7ff f95c 	bl	800058c <__aeabi_ul2d>
 80012d4:	f04f 0200 	mov.w	r2, #0
 80012d8:	4b26      	ldr	r3, [pc, #152]	@ (8001374 <Set_Random_Environmental_Values+0xf8>)
 80012da:	f7fe ffd7 	bl	800028c <__adddf3>
 80012de:	4602      	mov	r2, r0
 80012e0:	460b      	mov	r3, r1
 80012e2:	4610      	mov	r0, r2
 80012e4:	4619      	mov	r1, r3
 80012e6:	f7ff fc7f 	bl	8000be8 <__aeabi_d2f>
 80012ea:	4602      	mov	r2, r0
 80012ec:	68fb      	ldr	r3, [r7, #12]
 80012ee:	601a      	str	r2, [r3, #0]
  *data_p = 1000.0 + ((uint64_t)rand()*80)/RAND_MAX; /* P sensor emulation */
 80012f0:	f009 fa9a 	bl	800a828 <rand>
 80012f4:	4603      	mov	r3, r0
 80012f6:	17da      	asrs	r2, r3, #31
 80012f8:	4698      	mov	r8, r3
 80012fa:	4691      	mov	r9, r2
 80012fc:	4642      	mov	r2, r8
 80012fe:	464b      	mov	r3, r9
 8001300:	f04f 0000 	mov.w	r0, #0
 8001304:	f04f 0100 	mov.w	r1, #0
 8001308:	0099      	lsls	r1, r3, #2
 800130a:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 800130e:	0090      	lsls	r0, r2, #2
 8001310:	4602      	mov	r2, r0
 8001312:	460b      	mov	r3, r1
 8001314:	eb12 0408 	adds.w	r4, r2, r8
 8001318:	eb43 0509 	adc.w	r5, r3, r9
 800131c:	f04f 0200 	mov.w	r2, #0
 8001320:	f04f 0300 	mov.w	r3, #0
 8001324:	012b      	lsls	r3, r5, #4
 8001326:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 800132a:	0122      	lsls	r2, r4, #4
 800132c:	4614      	mov	r4, r2
 800132e:	461d      	mov	r5, r3
 8001330:	4620      	mov	r0, r4
 8001332:	4629      	mov	r1, r5
 8001334:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 8001338:	f04f 0300 	mov.w	r3, #0
 800133c:	f7ff fca4 	bl	8000c88 <__aeabi_uldivmod>
 8001340:	4602      	mov	r2, r0
 8001342:	460b      	mov	r3, r1
 8001344:	4610      	mov	r0, r2
 8001346:	4619      	mov	r1, r3
 8001348:	f7ff f920 	bl	800058c <__aeabi_ul2d>
 800134c:	f04f 0200 	mov.w	r2, #0
 8001350:	4b09      	ldr	r3, [pc, #36]	@ (8001378 <Set_Random_Environmental_Values+0xfc>)
 8001352:	f7fe ff9b 	bl	800028c <__adddf3>
 8001356:	4602      	mov	r2, r0
 8001358:	460b      	mov	r3, r1
 800135a:	4610      	mov	r0, r2
 800135c:	4619      	mov	r1, r3
 800135e:	f7ff fc43 	bl	8000be8 <__aeabi_d2f>
 8001362:	4602      	mov	r2, r0
 8001364:	68bb      	ldr	r3, [r7, #8]
 8001366:	601a      	str	r2, [r3, #0]
}
 8001368:	bf00      	nop
 800136a:	3710      	adds	r7, #16
 800136c:	46bd      	mov	sp, r7
 800136e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001372:	bf00      	nop
 8001374:	403b0000 	.word	0x403b0000
 8001378:	408f4000 	.word	0x408f4000

0800137c <Set_Random_Motion_Values>:
 * @brief  Set random values for all motion sensor data
 * @param  uint32_t counter for changing the rotation direction
 * @retval None
 */
static void Set_Random_Motion_Values(uint32_t cnt)
{
 800137c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001380:	f5ad 7d3c 	sub.w	sp, sp, #752	@ 0x2f0
 8001384:	af00      	add	r7, sp, #0
 8001386:	f8c7 02e4 	str.w	r0, [r7, #740]	@ 0x2e4
	int16_t acc_data[3];
	BSP_ACCELERO_AccGetXYZ(acc_data);
 800138a:	f507 733a 	add.w	r3, r7, #744	@ 0x2e8
 800138e:	4618      	mov	r0, r3
 8001390:	f003 f8d8 	bl	8004544 <BSP_ACCELERO_AccGetXYZ>
  /* Update Acceleration, Gyroscope and Sensor Fusion data */
	x_axes.AXIS_X = acc_data[0];
 8001394:	f9b7 32e8 	ldrsh.w	r3, [r7, #744]	@ 0x2e8
 8001398:	461a      	mov	r2, r3
 800139a:	4be9      	ldr	r3, [pc, #932]	@ (8001740 <Set_Random_Motion_Values+0x3c4>)
 800139c:	601a      	str	r2, [r3, #0]
	x_axes.AXIS_Y = acc_data[1];
 800139e:	f9b7 32ea 	ldrsh.w	r3, [r7, #746]	@ 0x2ea
 80013a2:	461a      	mov	r2, r3
 80013a4:	4be6      	ldr	r3, [pc, #920]	@ (8001740 <Set_Random_Motion_Values+0x3c4>)
 80013a6:	605a      	str	r2, [r3, #4]
	x_axes.AXIS_Z = acc_data[2];
 80013a8:	f9b7 32ec 	ldrsh.w	r3, [r7, #748]	@ 0x2ec
 80013ac:	461a      	mov	r2, r3
 80013ae:	4be4      	ldr	r3, [pc, #912]	@ (8001740 <Set_Random_Motion_Values+0x3c4>)
 80013b0:	609a      	str	r2, [r3, #8]
  if (cnt < 20) {
 80013b2:	f8d7 32e4 	ldr.w	r3, [r7, #740]	@ 0x2e4
 80013b6:	2b13      	cmp	r3, #19
 80013b8:	f200 830c 	bhi.w	80019d4 <Set_Random_Motion_Values+0x658>
//    x_axes.AXIS_X +=  (10  + ((uint64_t)rand()*3*cnt)/RAND_MAX);
//    x_axes.AXIS_Y += -(10  + ((uint64_t)rand()*5*cnt)/RAND_MAX);
//    x_axes.AXIS_Z +=  (10  + ((uint64_t)rand()*7*cnt)/RAND_MAX);
    g_axes.AXIS_X +=  (100 + ((uint64_t)rand()*2*cnt)/RAND_MAX);
 80013bc:	f009 fa34 	bl	800a828 <rand>
 80013c0:	4603      	mov	r3, r0
 80013c2:	17da      	asrs	r2, r3, #31
 80013c4:	f8c7 3258 	str.w	r3, [r7, #600]	@ 0x258
 80013c8:	f8c7 225c 	str.w	r2, [r7, #604]	@ 0x25c
 80013cc:	f8d7 32e4 	ldr.w	r3, [r7, #740]	@ 0x2e4
 80013d0:	2200      	movs	r2, #0
 80013d2:	f8c7 3250 	str.w	r3, [r7, #592]	@ 0x250
 80013d6:	f8c7 2254 	str.w	r2, [r7, #596]	@ 0x254
 80013da:	e9d7 4596 	ldrd	r4, r5, [r7, #600]	@ 0x258
 80013de:	462b      	mov	r3, r5
 80013e0:	e9d7 ab94 	ldrd	sl, fp, [r7, #592]	@ 0x250
 80013e4:	4652      	mov	r2, sl
 80013e6:	fb02 f203 	mul.w	r2, r2, r3
 80013ea:	465b      	mov	r3, fp
 80013ec:	4621      	mov	r1, r4
 80013ee:	fb01 f303 	mul.w	r3, r1, r3
 80013f2:	4413      	add	r3, r2
 80013f4:	4622      	mov	r2, r4
 80013f6:	4651      	mov	r1, sl
 80013f8:	fba2 8901 	umull	r8, r9, r2, r1
 80013fc:	444b      	add	r3, r9
 80013fe:	4699      	mov	r9, r3
 8001400:	eb18 0308 	adds.w	r3, r8, r8
 8001404:	65bb      	str	r3, [r7, #88]	@ 0x58
 8001406:	eb49 0309 	adc.w	r3, r9, r9
 800140a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800140c:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	@ 0x58
 8001410:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 8001414:	f04f 0300 	mov.w	r3, #0
 8001418:	f7ff fc36 	bl	8000c88 <__aeabi_uldivmod>
 800141c:	4602      	mov	r2, r0
 800141e:	460b      	mov	r3, r1
 8001420:	f112 0164 	adds.w	r1, r2, #100	@ 0x64
 8001424:	f8c7 10a0 	str.w	r1, [r7, #160]	@ 0xa0
 8001428:	f143 0300 	adc.w	r3, r3, #0
 800142c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8001430:	4bc4      	ldr	r3, [pc, #784]	@ (8001744 <Set_Random_Motion_Values+0x3c8>)
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	461a      	mov	r2, r3
 8001436:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800143a:	4413      	add	r3, r2
 800143c:	461a      	mov	r2, r3
 800143e:	4bc1      	ldr	r3, [pc, #772]	@ (8001744 <Set_Random_Motion_Values+0x3c8>)
 8001440:	601a      	str	r2, [r3, #0]
    g_axes.AXIS_Y += -(100 + ((uint64_t)rand()*4*cnt)/RAND_MAX);
 8001442:	f009 f9f1 	bl	800a828 <rand>
 8001446:	4603      	mov	r3, r0
 8001448:	17da      	asrs	r2, r3, #31
 800144a:	f8c7 3248 	str.w	r3, [r7, #584]	@ 0x248
 800144e:	f8c7 224c 	str.w	r2, [r7, #588]	@ 0x24c
 8001452:	f8d7 32e4 	ldr.w	r3, [r7, #740]	@ 0x2e4
 8001456:	2200      	movs	r2, #0
 8001458:	f8c7 3240 	str.w	r3, [r7, #576]	@ 0x240
 800145c:	f8c7 2244 	str.w	r2, [r7, #580]	@ 0x244
 8001460:	e9d7 4592 	ldrd	r4, r5, [r7, #584]	@ 0x248
 8001464:	462b      	mov	r3, r5
 8001466:	e9d7 8990 	ldrd	r8, r9, [r7, #576]	@ 0x240
 800146a:	4642      	mov	r2, r8
 800146c:	fb02 f203 	mul.w	r2, r2, r3
 8001470:	464b      	mov	r3, r9
 8001472:	4621      	mov	r1, r4
 8001474:	fb01 f303 	mul.w	r3, r1, r3
 8001478:	4413      	add	r3, r2
 800147a:	4622      	mov	r2, r4
 800147c:	4641      	mov	r1, r8
 800147e:	fba2 1201 	umull	r1, r2, r2, r1
 8001482:	f8c7 22dc 	str.w	r2, [r7, #732]	@ 0x2dc
 8001486:	460a      	mov	r2, r1
 8001488:	f8c7 22d8 	str.w	r2, [r7, #728]	@ 0x2d8
 800148c:	f8d7 22dc 	ldr.w	r2, [r7, #732]	@ 0x2dc
 8001490:	4413      	add	r3, r2
 8001492:	f8c7 32dc 	str.w	r3, [r7, #732]	@ 0x2dc
 8001496:	f04f 0000 	mov.w	r0, #0
 800149a:	f04f 0100 	mov.w	r1, #0
 800149e:	e9d7 45b6 	ldrd	r4, r5, [r7, #728]	@ 0x2d8
 80014a2:	462b      	mov	r3, r5
 80014a4:	0099      	lsls	r1, r3, #2
 80014a6:	4623      	mov	r3, r4
 80014a8:	ea41 7193 	orr.w	r1, r1, r3, lsr #30
 80014ac:	4623      	mov	r3, r4
 80014ae:	0098      	lsls	r0, r3, #2
 80014b0:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 80014b4:	f04f 0300 	mov.w	r3, #0
 80014b8:	f7ff fbe6 	bl	8000c88 <__aeabi_uldivmod>
 80014bc:	4602      	mov	r2, r0
 80014be:	460b      	mov	r3, r1
 80014c0:	f06f 0063 	mvn.w	r0, #99	@ 0x63
 80014c4:	f04f 31ff 	mov.w	r1, #4294967295
 80014c8:	1a80      	subs	r0, r0, r2
 80014ca:	f8c7 0098 	str.w	r0, [r7, #152]	@ 0x98
 80014ce:	eb61 0303 	sbc.w	r3, r1, r3
 80014d2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80014d6:	4b9b      	ldr	r3, [pc, #620]	@ (8001744 <Set_Random_Motion_Values+0x3c8>)
 80014d8:	685b      	ldr	r3, [r3, #4]
 80014da:	461a      	mov	r2, r3
 80014dc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80014e0:	4413      	add	r3, r2
 80014e2:	461a      	mov	r2, r3
 80014e4:	4b97      	ldr	r3, [pc, #604]	@ (8001744 <Set_Random_Motion_Values+0x3c8>)
 80014e6:	605a      	str	r2, [r3, #4]
    g_axes.AXIS_Z +=  (100 + ((uint64_t)rand()*6*cnt)/RAND_MAX);
 80014e8:	f009 f99e 	bl	800a828 <rand>
 80014ec:	4603      	mov	r3, r0
 80014ee:	17da      	asrs	r2, r3, #31
 80014f0:	f8c7 3238 	str.w	r3, [r7, #568]	@ 0x238
 80014f4:	f8c7 223c 	str.w	r2, [r7, #572]	@ 0x23c
 80014f8:	f8d7 32e4 	ldr.w	r3, [r7, #740]	@ 0x2e4
 80014fc:	2200      	movs	r2, #0
 80014fe:	f8c7 3230 	str.w	r3, [r7, #560]	@ 0x230
 8001502:	f8c7 2234 	str.w	r2, [r7, #564]	@ 0x234
 8001506:	e9d7 458e 	ldrd	r4, r5, [r7, #568]	@ 0x238
 800150a:	462b      	mov	r3, r5
 800150c:	e9d7 898c 	ldrd	r8, r9, [r7, #560]	@ 0x230
 8001510:	4642      	mov	r2, r8
 8001512:	fb02 f203 	mul.w	r2, r2, r3
 8001516:	464b      	mov	r3, r9
 8001518:	4621      	mov	r1, r4
 800151a:	fb01 f303 	mul.w	r3, r1, r3
 800151e:	4413      	add	r3, r2
 8001520:	4622      	mov	r2, r4
 8001522:	4641      	mov	r1, r8
 8001524:	fba2 1201 	umull	r1, r2, r2, r1
 8001528:	f8c7 22d4 	str.w	r2, [r7, #724]	@ 0x2d4
 800152c:	460a      	mov	r2, r1
 800152e:	f8c7 22d0 	str.w	r2, [r7, #720]	@ 0x2d0
 8001532:	f8d7 22d4 	ldr.w	r2, [r7, #724]	@ 0x2d4
 8001536:	4413      	add	r3, r2
 8001538:	f8c7 32d4 	str.w	r3, [r7, #724]	@ 0x2d4
 800153c:	e9d7 45b4 	ldrd	r4, r5, [r7, #720]	@ 0x2d0
 8001540:	4622      	mov	r2, r4
 8001542:	462b      	mov	r3, r5
 8001544:	1891      	adds	r1, r2, r2
 8001546:	6539      	str	r1, [r7, #80]	@ 0x50
 8001548:	415b      	adcs	r3, r3
 800154a:	657b      	str	r3, [r7, #84]	@ 0x54
 800154c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8001550:	4621      	mov	r1, r4
 8001552:	1851      	adds	r1, r2, r1
 8001554:	64b9      	str	r1, [r7, #72]	@ 0x48
 8001556:	4629      	mov	r1, r5
 8001558:	eb43 0101 	adc.w	r1, r3, r1
 800155c:	64f9      	str	r1, [r7, #76]	@ 0x4c
 800155e:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8001562:	460b      	mov	r3, r1
 8001564:	18db      	adds	r3, r3, r3
 8001566:	643b      	str	r3, [r7, #64]	@ 0x40
 8001568:	4613      	mov	r3, r2
 800156a:	eb42 0303 	adc.w	r3, r2, r3
 800156e:	647b      	str	r3, [r7, #68]	@ 0x44
 8001570:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	@ 0x40
 8001574:	4618      	mov	r0, r3
 8001576:	4621      	mov	r1, r4
 8001578:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 800157c:	f04f 0300 	mov.w	r3, #0
 8001580:	f7ff fb82 	bl	8000c88 <__aeabi_uldivmod>
 8001584:	4602      	mov	r2, r0
 8001586:	460b      	mov	r3, r1
 8001588:	f112 0164 	adds.w	r1, r2, #100	@ 0x64
 800158c:	f8c7 1090 	str.w	r1, [r7, #144]	@ 0x90
 8001590:	f143 0300 	adc.w	r3, r3, #0
 8001594:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8001598:	4b6a      	ldr	r3, [pc, #424]	@ (8001744 <Set_Random_Motion_Values+0x3c8>)
 800159a:	689b      	ldr	r3, [r3, #8]
 800159c:	461a      	mov	r2, r3
 800159e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80015a2:	4413      	add	r3, r2
 80015a4:	461a      	mov	r2, r3
 80015a6:	4b67      	ldr	r3, [pc, #412]	@ (8001744 <Set_Random_Motion_Values+0x3c8>)
 80015a8:	609a      	str	r2, [r3, #8]
    m_axes.AXIS_X +=  (3  + ((uint64_t)rand()*3*cnt)/RAND_MAX);
 80015aa:	f009 f93d 	bl	800a828 <rand>
 80015ae:	4603      	mov	r3, r0
 80015b0:	17da      	asrs	r2, r3, #31
 80015b2:	f8c7 3228 	str.w	r3, [r7, #552]	@ 0x228
 80015b6:	f8c7 222c 	str.w	r2, [r7, #556]	@ 0x22c
 80015ba:	f8d7 32e4 	ldr.w	r3, [r7, #740]	@ 0x2e4
 80015be:	2200      	movs	r2, #0
 80015c0:	f8c7 3220 	str.w	r3, [r7, #544]	@ 0x220
 80015c4:	f8c7 2224 	str.w	r2, [r7, #548]	@ 0x224
 80015c8:	e9d7 458a 	ldrd	r4, r5, [r7, #552]	@ 0x228
 80015cc:	462b      	mov	r3, r5
 80015ce:	e9d7 8988 	ldrd	r8, r9, [r7, #544]	@ 0x220
 80015d2:	4642      	mov	r2, r8
 80015d4:	fb02 f203 	mul.w	r2, r2, r3
 80015d8:	464b      	mov	r3, r9
 80015da:	4621      	mov	r1, r4
 80015dc:	fb01 f303 	mul.w	r3, r1, r3
 80015e0:	4413      	add	r3, r2
 80015e2:	4622      	mov	r2, r4
 80015e4:	4641      	mov	r1, r8
 80015e6:	fba2 1201 	umull	r1, r2, r2, r1
 80015ea:	f8c7 22cc 	str.w	r2, [r7, #716]	@ 0x2cc
 80015ee:	460a      	mov	r2, r1
 80015f0:	f8c7 22c8 	str.w	r2, [r7, #712]	@ 0x2c8
 80015f4:	f8d7 22cc 	ldr.w	r2, [r7, #716]	@ 0x2cc
 80015f8:	4413      	add	r3, r2
 80015fa:	f8c7 32cc 	str.w	r3, [r7, #716]	@ 0x2cc
 80015fe:	e9d7 45b2 	ldrd	r4, r5, [r7, #712]	@ 0x2c8
 8001602:	4622      	mov	r2, r4
 8001604:	462b      	mov	r3, r5
 8001606:	1891      	adds	r1, r2, r2
 8001608:	63b9      	str	r1, [r7, #56]	@ 0x38
 800160a:	415b      	adcs	r3, r3
 800160c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800160e:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8001612:	4621      	mov	r1, r4
 8001614:	1851      	adds	r1, r2, r1
 8001616:	f8c7 1218 	str.w	r1, [r7, #536]	@ 0x218
 800161a:	4629      	mov	r1, r5
 800161c:	eb43 0101 	adc.w	r1, r3, r1
 8001620:	f8c7 121c 	str.w	r1, [r7, #540]	@ 0x21c
 8001624:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 8001628:	f04f 0300 	mov.w	r3, #0
 800162c:	e9d7 0186 	ldrd	r0, r1, [r7, #536]	@ 0x218
 8001630:	f7ff fb2a 	bl	8000c88 <__aeabi_uldivmod>
 8001634:	4602      	mov	r2, r0
 8001636:	460b      	mov	r3, r1
 8001638:	1cd1      	adds	r1, r2, #3
 800163a:	f8c7 1088 	str.w	r1, [r7, #136]	@ 0x88
 800163e:	f143 0300 	adc.w	r3, r3, #0
 8001642:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8001646:	4b40      	ldr	r3, [pc, #256]	@ (8001748 <Set_Random_Motion_Values+0x3cc>)
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	461a      	mov	r2, r3
 800164c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001650:	4413      	add	r3, r2
 8001652:	461a      	mov	r2, r3
 8001654:	4b3c      	ldr	r3, [pc, #240]	@ (8001748 <Set_Random_Motion_Values+0x3cc>)
 8001656:	601a      	str	r2, [r3, #0]
    m_axes.AXIS_Y += -(3  + ((uint64_t)rand()*4*cnt)/RAND_MAX);
 8001658:	f009 f8e6 	bl	800a828 <rand>
 800165c:	4603      	mov	r3, r0
 800165e:	17da      	asrs	r2, r3, #31
 8001660:	f8c7 3210 	str.w	r3, [r7, #528]	@ 0x210
 8001664:	f8c7 2214 	str.w	r2, [r7, #532]	@ 0x214
 8001668:	f8d7 32e4 	ldr.w	r3, [r7, #740]	@ 0x2e4
 800166c:	2200      	movs	r2, #0
 800166e:	f8c7 3208 	str.w	r3, [r7, #520]	@ 0x208
 8001672:	f8c7 220c 	str.w	r2, [r7, #524]	@ 0x20c
 8001676:	e9d7 4584 	ldrd	r4, r5, [r7, #528]	@ 0x210
 800167a:	462b      	mov	r3, r5
 800167c:	e9d7 8982 	ldrd	r8, r9, [r7, #520]	@ 0x208
 8001680:	4642      	mov	r2, r8
 8001682:	fb02 f203 	mul.w	r2, r2, r3
 8001686:	464b      	mov	r3, r9
 8001688:	4621      	mov	r1, r4
 800168a:	fb01 f303 	mul.w	r3, r1, r3
 800168e:	4413      	add	r3, r2
 8001690:	4622      	mov	r2, r4
 8001692:	4641      	mov	r1, r8
 8001694:	fba2 1201 	umull	r1, r2, r2, r1
 8001698:	f8c7 22c4 	str.w	r2, [r7, #708]	@ 0x2c4
 800169c:	460a      	mov	r2, r1
 800169e:	f8c7 22c0 	str.w	r2, [r7, #704]	@ 0x2c0
 80016a2:	f8d7 22c4 	ldr.w	r2, [r7, #708]	@ 0x2c4
 80016a6:	4413      	add	r3, r2
 80016a8:	f8c7 32c4 	str.w	r3, [r7, #708]	@ 0x2c4
 80016ac:	f04f 0000 	mov.w	r0, #0
 80016b0:	f04f 0100 	mov.w	r1, #0
 80016b4:	e9d7 45b0 	ldrd	r4, r5, [r7, #704]	@ 0x2c0
 80016b8:	462b      	mov	r3, r5
 80016ba:	0099      	lsls	r1, r3, #2
 80016bc:	4623      	mov	r3, r4
 80016be:	ea41 7193 	orr.w	r1, r1, r3, lsr #30
 80016c2:	4623      	mov	r3, r4
 80016c4:	0098      	lsls	r0, r3, #2
 80016c6:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 80016ca:	f04f 0300 	mov.w	r3, #0
 80016ce:	f7ff fadb 	bl	8000c88 <__aeabi_uldivmod>
 80016d2:	4602      	mov	r2, r0
 80016d4:	460b      	mov	r3, r1
 80016d6:	f06f 0002 	mvn.w	r0, #2
 80016da:	f04f 31ff 	mov.w	r1, #4294967295
 80016de:	1a80      	subs	r0, r0, r2
 80016e0:	f8c7 0080 	str.w	r0, [r7, #128]	@ 0x80
 80016e4:	eb61 0303 	sbc.w	r3, r1, r3
 80016e8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80016ec:	4b16      	ldr	r3, [pc, #88]	@ (8001748 <Set_Random_Motion_Values+0x3cc>)
 80016ee:	685b      	ldr	r3, [r3, #4]
 80016f0:	461a      	mov	r2, r3
 80016f2:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80016f6:	4413      	add	r3, r2
 80016f8:	461a      	mov	r2, r3
 80016fa:	4b13      	ldr	r3, [pc, #76]	@ (8001748 <Set_Random_Motion_Values+0x3cc>)
 80016fc:	605a      	str	r2, [r3, #4]
    m_axes.AXIS_Z +=  (3  + ((uint64_t)rand()*5*cnt)/RAND_MAX);
 80016fe:	f009 f893 	bl	800a828 <rand>
 8001702:	4603      	mov	r3, r0
 8001704:	17da      	asrs	r2, r3, #31
 8001706:	f8c7 3200 	str.w	r3, [r7, #512]	@ 0x200
 800170a:	f8c7 2204 	str.w	r2, [r7, #516]	@ 0x204
 800170e:	f8d7 32e4 	ldr.w	r3, [r7, #740]	@ 0x2e4
 8001712:	2200      	movs	r2, #0
 8001714:	f8c7 31f8 	str.w	r3, [r7, #504]	@ 0x1f8
 8001718:	f8c7 21fc 	str.w	r2, [r7, #508]	@ 0x1fc
 800171c:	e9d7 4580 	ldrd	r4, r5, [r7, #512]	@ 0x200
 8001720:	462b      	mov	r3, r5
 8001722:	e9d7 897e 	ldrd	r8, r9, [r7, #504]	@ 0x1f8
 8001726:	4642      	mov	r2, r8
 8001728:	fb02 f203 	mul.w	r2, r2, r3
 800172c:	464b      	mov	r3, r9
 800172e:	4621      	mov	r1, r4
 8001730:	fb01 f303 	mul.w	r3, r1, r3
 8001734:	4413      	add	r3, r2
 8001736:	4622      	mov	r2, r4
 8001738:	4641      	mov	r1, r8
 800173a:	fba2 1201 	umull	r1, r2, r2, r1
 800173e:	e005      	b.n	800174c <Set_Random_Motion_Values+0x3d0>
 8001740:	20000290 	.word	0x20000290
 8001744:	2000029c 	.word	0x2000029c
 8001748:	200002a8 	.word	0x200002a8
 800174c:	f8c7 22bc 	str.w	r2, [r7, #700]	@ 0x2bc
 8001750:	460a      	mov	r2, r1
 8001752:	f8c7 22b8 	str.w	r2, [r7, #696]	@ 0x2b8
 8001756:	f8d7 22bc 	ldr.w	r2, [r7, #700]	@ 0x2bc
 800175a:	4413      	add	r3, r2
 800175c:	f8c7 32bc 	str.w	r3, [r7, #700]	@ 0x2bc
 8001760:	e9d7 45ae 	ldrd	r4, r5, [r7, #696]	@ 0x2b8
 8001764:	4622      	mov	r2, r4
 8001766:	462b      	mov	r3, r5
 8001768:	f04f 0000 	mov.w	r0, #0
 800176c:	f04f 0100 	mov.w	r1, #0
 8001770:	0099      	lsls	r1, r3, #2
 8001772:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 8001776:	0090      	lsls	r0, r2, #2
 8001778:	4602      	mov	r2, r0
 800177a:	460b      	mov	r3, r1
 800177c:	4621      	mov	r1, r4
 800177e:	1851      	adds	r1, r2, r1
 8001780:	f8c7 11f0 	str.w	r1, [r7, #496]	@ 0x1f0
 8001784:	4629      	mov	r1, r5
 8001786:	eb43 0101 	adc.w	r1, r3, r1
 800178a:	f8c7 11f4 	str.w	r1, [r7, #500]	@ 0x1f4
 800178e:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 8001792:	f04f 0300 	mov.w	r3, #0
 8001796:	e9d7 017c 	ldrd	r0, r1, [r7, #496]	@ 0x1f0
 800179a:	f7ff fa75 	bl	8000c88 <__aeabi_uldivmod>
 800179e:	4602      	mov	r2, r0
 80017a0:	460b      	mov	r3, r1
 80017a2:	1cd1      	adds	r1, r2, #3
 80017a4:	67b9      	str	r1, [r7, #120]	@ 0x78
 80017a6:	f143 0300 	adc.w	r3, r3, #0
 80017aa:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80017ac:	4b87      	ldr	r3, [pc, #540]	@ (80019cc <Set_Random_Motion_Values+0x650>)
 80017ae:	689b      	ldr	r3, [r3, #8]
 80017b0:	461a      	mov	r2, r3
 80017b2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80017b4:	4413      	add	r3, r2
 80017b6:	461a      	mov	r2, r3
 80017b8:	4b84      	ldr	r3, [pc, #528]	@ (80019cc <Set_Random_Motion_Values+0x650>)
 80017ba:	609a      	str	r2, [r3, #8]

    q_axes.AXIS_X -= (100  + ((uint64_t)rand()*3*cnt)/RAND_MAX);
 80017bc:	f009 f834 	bl	800a828 <rand>
 80017c0:	4603      	mov	r3, r0
 80017c2:	17da      	asrs	r2, r3, #31
 80017c4:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
 80017c8:	f8c7 21ec 	str.w	r2, [r7, #492]	@ 0x1ec
 80017cc:	f8d7 32e4 	ldr.w	r3, [r7, #740]	@ 0x2e4
 80017d0:	2200      	movs	r2, #0
 80017d2:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 80017d6:	f8c7 21e4 	str.w	r2, [r7, #484]	@ 0x1e4
 80017da:	e9d7 457a 	ldrd	r4, r5, [r7, #488]	@ 0x1e8
 80017de:	462b      	mov	r3, r5
 80017e0:	e9d7 8978 	ldrd	r8, r9, [r7, #480]	@ 0x1e0
 80017e4:	4642      	mov	r2, r8
 80017e6:	fb02 f203 	mul.w	r2, r2, r3
 80017ea:	464b      	mov	r3, r9
 80017ec:	4621      	mov	r1, r4
 80017ee:	fb01 f303 	mul.w	r3, r1, r3
 80017f2:	4413      	add	r3, r2
 80017f4:	4622      	mov	r2, r4
 80017f6:	4641      	mov	r1, r8
 80017f8:	fba2 1201 	umull	r1, r2, r2, r1
 80017fc:	f8c7 22b4 	str.w	r2, [r7, #692]	@ 0x2b4
 8001800:	460a      	mov	r2, r1
 8001802:	f8c7 22b0 	str.w	r2, [r7, #688]	@ 0x2b0
 8001806:	f8d7 22b4 	ldr.w	r2, [r7, #692]	@ 0x2b4
 800180a:	4413      	add	r3, r2
 800180c:	f8c7 32b4 	str.w	r3, [r7, #692]	@ 0x2b4
 8001810:	e9d7 45ac 	ldrd	r4, r5, [r7, #688]	@ 0x2b0
 8001814:	4622      	mov	r2, r4
 8001816:	462b      	mov	r3, r5
 8001818:	1891      	adds	r1, r2, r2
 800181a:	6339      	str	r1, [r7, #48]	@ 0x30
 800181c:	415b      	adcs	r3, r3
 800181e:	637b      	str	r3, [r7, #52]	@ 0x34
 8001820:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8001824:	4621      	mov	r1, r4
 8001826:	1851      	adds	r1, r2, r1
 8001828:	f8c7 11d8 	str.w	r1, [r7, #472]	@ 0x1d8
 800182c:	4629      	mov	r1, r5
 800182e:	eb43 0101 	adc.w	r1, r3, r1
 8001832:	f8c7 11dc 	str.w	r1, [r7, #476]	@ 0x1dc
 8001836:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 800183a:	f04f 0300 	mov.w	r3, #0
 800183e:	e9d7 0176 	ldrd	r0, r1, [r7, #472]	@ 0x1d8
 8001842:	f7ff fa21 	bl	8000c88 <__aeabi_uldivmod>
 8001846:	4602      	mov	r2, r0
 8001848:	460b      	mov	r3, r1
 800184a:	f112 0164 	adds.w	r1, r2, #100	@ 0x64
 800184e:	6739      	str	r1, [r7, #112]	@ 0x70
 8001850:	f143 0300 	adc.w	r3, r3, #0
 8001854:	677b      	str	r3, [r7, #116]	@ 0x74
 8001856:	4b5e      	ldr	r3, [pc, #376]	@ (80019d0 <Set_Random_Motion_Values+0x654>)
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	461a      	mov	r2, r3
 800185c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800185e:	1ad3      	subs	r3, r2, r3
 8001860:	461a      	mov	r2, r3
 8001862:	4b5b      	ldr	r3, [pc, #364]	@ (80019d0 <Set_Random_Motion_Values+0x654>)
 8001864:	601a      	str	r2, [r3, #0]
    q_axes.AXIS_Y += (100  + ((uint64_t)rand()*5*cnt)/RAND_MAX);
 8001866:	f008 ffdf 	bl	800a828 <rand>
 800186a:	4603      	mov	r3, r0
 800186c:	17da      	asrs	r2, r3, #31
 800186e:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
 8001872:	f8c7 21d4 	str.w	r2, [r7, #468]	@ 0x1d4
 8001876:	f8d7 32e4 	ldr.w	r3, [r7, #740]	@ 0x2e4
 800187a:	2200      	movs	r2, #0
 800187c:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
 8001880:	f8c7 21cc 	str.w	r2, [r7, #460]	@ 0x1cc
 8001884:	e9d7 4574 	ldrd	r4, r5, [r7, #464]	@ 0x1d0
 8001888:	462b      	mov	r3, r5
 800188a:	e9d7 8972 	ldrd	r8, r9, [r7, #456]	@ 0x1c8
 800188e:	4642      	mov	r2, r8
 8001890:	fb02 f203 	mul.w	r2, r2, r3
 8001894:	464b      	mov	r3, r9
 8001896:	4621      	mov	r1, r4
 8001898:	fb01 f303 	mul.w	r3, r1, r3
 800189c:	4413      	add	r3, r2
 800189e:	4622      	mov	r2, r4
 80018a0:	4641      	mov	r1, r8
 80018a2:	fba2 1201 	umull	r1, r2, r2, r1
 80018a6:	f8c7 22ac 	str.w	r2, [r7, #684]	@ 0x2ac
 80018aa:	460a      	mov	r2, r1
 80018ac:	f8c7 22a8 	str.w	r2, [r7, #680]	@ 0x2a8
 80018b0:	f8d7 22ac 	ldr.w	r2, [r7, #684]	@ 0x2ac
 80018b4:	4413      	add	r3, r2
 80018b6:	f8c7 32ac 	str.w	r3, [r7, #684]	@ 0x2ac
 80018ba:	e9d7 45aa 	ldrd	r4, r5, [r7, #680]	@ 0x2a8
 80018be:	4622      	mov	r2, r4
 80018c0:	462b      	mov	r3, r5
 80018c2:	f04f 0000 	mov.w	r0, #0
 80018c6:	f04f 0100 	mov.w	r1, #0
 80018ca:	0099      	lsls	r1, r3, #2
 80018cc:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 80018d0:	0090      	lsls	r0, r2, #2
 80018d2:	4602      	mov	r2, r0
 80018d4:	460b      	mov	r3, r1
 80018d6:	4621      	mov	r1, r4
 80018d8:	1851      	adds	r1, r2, r1
 80018da:	f8c7 11c0 	str.w	r1, [r7, #448]	@ 0x1c0
 80018de:	4629      	mov	r1, r5
 80018e0:	eb43 0101 	adc.w	r1, r3, r1
 80018e4:	f8c7 11c4 	str.w	r1, [r7, #452]	@ 0x1c4
 80018e8:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 80018ec:	f04f 0300 	mov.w	r3, #0
 80018f0:	e9d7 0170 	ldrd	r0, r1, [r7, #448]	@ 0x1c0
 80018f4:	f7ff f9c8 	bl	8000c88 <__aeabi_uldivmod>
 80018f8:	4602      	mov	r2, r0
 80018fa:	460b      	mov	r3, r1
 80018fc:	f112 0164 	adds.w	r1, r2, #100	@ 0x64
 8001900:	66b9      	str	r1, [r7, #104]	@ 0x68
 8001902:	f143 0300 	adc.w	r3, r3, #0
 8001906:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8001908:	4b31      	ldr	r3, [pc, #196]	@ (80019d0 <Set_Random_Motion_Values+0x654>)
 800190a:	685b      	ldr	r3, [r3, #4]
 800190c:	461a      	mov	r2, r3
 800190e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001910:	4413      	add	r3, r2
 8001912:	461a      	mov	r2, r3
 8001914:	4b2e      	ldr	r3, [pc, #184]	@ (80019d0 <Set_Random_Motion_Values+0x654>)
 8001916:	605a      	str	r2, [r3, #4]
    q_axes.AXIS_Z -= (100  + ((uint64_t)rand()*7*cnt)/RAND_MAX);
 8001918:	f008 ff86 	bl	800a828 <rand>
 800191c:	4603      	mov	r3, r0
 800191e:	17da      	asrs	r2, r3, #31
 8001920:	f8c7 31b8 	str.w	r3, [r7, #440]	@ 0x1b8
 8001924:	f8c7 21bc 	str.w	r2, [r7, #444]	@ 0x1bc
 8001928:	f8d7 32e4 	ldr.w	r3, [r7, #740]	@ 0x2e4
 800192c:	2200      	movs	r2, #0
 800192e:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
 8001932:	f8c7 21b4 	str.w	r2, [r7, #436]	@ 0x1b4
 8001936:	e9d7 456e 	ldrd	r4, r5, [r7, #440]	@ 0x1b8
 800193a:	462b      	mov	r3, r5
 800193c:	e9d7 896c 	ldrd	r8, r9, [r7, #432]	@ 0x1b0
 8001940:	4642      	mov	r2, r8
 8001942:	fb02 f203 	mul.w	r2, r2, r3
 8001946:	464b      	mov	r3, r9
 8001948:	4621      	mov	r1, r4
 800194a:	fb01 f303 	mul.w	r3, r1, r3
 800194e:	4413      	add	r3, r2
 8001950:	4622      	mov	r2, r4
 8001952:	4641      	mov	r1, r8
 8001954:	fba2 1201 	umull	r1, r2, r2, r1
 8001958:	f8c7 22a4 	str.w	r2, [r7, #676]	@ 0x2a4
 800195c:	460a      	mov	r2, r1
 800195e:	f8c7 22a0 	str.w	r2, [r7, #672]	@ 0x2a0
 8001962:	f8d7 22a4 	ldr.w	r2, [r7, #676]	@ 0x2a4
 8001966:	4413      	add	r3, r2
 8001968:	f8c7 32a4 	str.w	r3, [r7, #676]	@ 0x2a4
 800196c:	e9d7 45a8 	ldrd	r4, r5, [r7, #672]	@ 0x2a0
 8001970:	4622      	mov	r2, r4
 8001972:	462b      	mov	r3, r5
 8001974:	f04f 0000 	mov.w	r0, #0
 8001978:	f04f 0100 	mov.w	r1, #0
 800197c:	00d9      	lsls	r1, r3, #3
 800197e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001982:	00d0      	lsls	r0, r2, #3
 8001984:	4602      	mov	r2, r0
 8001986:	460b      	mov	r3, r1
 8001988:	4621      	mov	r1, r4
 800198a:	1a51      	subs	r1, r2, r1
 800198c:	f8c7 11a8 	str.w	r1, [r7, #424]	@ 0x1a8
 8001990:	4629      	mov	r1, r5
 8001992:	eb63 0301 	sbc.w	r3, r3, r1
 8001996:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
 800199a:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 800199e:	f04f 0300 	mov.w	r3, #0
 80019a2:	e9d7 016a 	ldrd	r0, r1, [r7, #424]	@ 0x1a8
 80019a6:	f7ff f96f 	bl	8000c88 <__aeabi_uldivmod>
 80019aa:	4602      	mov	r2, r0
 80019ac:	460b      	mov	r3, r1
 80019ae:	f112 0164 	adds.w	r1, r2, #100	@ 0x64
 80019b2:	6639      	str	r1, [r7, #96]	@ 0x60
 80019b4:	f143 0300 	adc.w	r3, r3, #0
 80019b8:	667b      	str	r3, [r7, #100]	@ 0x64
 80019ba:	4b05      	ldr	r3, [pc, #20]	@ (80019d0 <Set_Random_Motion_Values+0x654>)
 80019bc:	689b      	ldr	r3, [r3, #8]
 80019be:	461a      	mov	r2, r3
 80019c0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80019c2:	1ad3      	subs	r3, r2, r3
 80019c4:	461a      	mov	r2, r3
 80019c6:	4b02      	ldr	r3, [pc, #8]	@ (80019d0 <Set_Random_Motion_Values+0x654>)
 80019c8:	609a      	str	r2, [r3, #8]
    q_axes.AXIS_X += (200 + ((uint64_t)rand()*7*cnt)/RAND_MAX);
    q_axes.AXIS_Y -= (150 + ((uint64_t)rand()*3*cnt)/RAND_MAX);
    q_axes.AXIS_Z += (10  + ((uint64_t)rand()*5*cnt)/RAND_MAX);
  }

}
 80019ca:	e31f      	b.n	800200c <Set_Random_Motion_Values+0xc90>
 80019cc:	200002a8 	.word	0x200002a8
 80019d0:	200002b4 	.word	0x200002b4
    g_axes.AXIS_X += -(100 + ((uint64_t)rand()*2*cnt)/RAND_MAX);
 80019d4:	f008 ff28 	bl	800a828 <rand>
 80019d8:	4603      	mov	r3, r0
 80019da:	17da      	asrs	r2, r3, #31
 80019dc:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 80019e0:	f8c7 21a4 	str.w	r2, [r7, #420]	@ 0x1a4
 80019e4:	f8d7 32e4 	ldr.w	r3, [r7, #740]	@ 0x2e4
 80019e8:	2200      	movs	r2, #0
 80019ea:	469a      	mov	sl, r3
 80019ec:	4693      	mov	fp, r2
 80019ee:	e9d7 0168 	ldrd	r0, r1, [r7, #416]	@ 0x1a0
 80019f2:	460b      	mov	r3, r1
 80019f4:	fb0a f203 	mul.w	r2, sl, r3
 80019f8:	4603      	mov	r3, r0
 80019fa:	fb03 f30b 	mul.w	r3, r3, fp
 80019fe:	4413      	add	r3, r2
 8001a00:	4602      	mov	r2, r0
 8001a02:	fba2 450a 	umull	r4, r5, r2, sl
 8001a06:	442b      	add	r3, r5
 8001a08:	461d      	mov	r5, r3
 8001a0a:	1923      	adds	r3, r4, r4
 8001a0c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001a0e:	eb45 0305 	adc.w	r3, r5, r5
 8001a12:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001a14:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8001a18:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 8001a1c:	f04f 0300 	mov.w	r3, #0
 8001a20:	f7ff f932 	bl	8000c88 <__aeabi_uldivmod>
 8001a24:	4602      	mov	r2, r0
 8001a26:	460b      	mov	r3, r1
 8001a28:	f06f 0063 	mvn.w	r0, #99	@ 0x63
 8001a2c:	f04f 31ff 	mov.w	r1, #4294967295
 8001a30:	1a80      	subs	r0, r0, r2
 8001a32:	f8c7 00e8 	str.w	r0, [r7, #232]	@ 0xe8
 8001a36:	eb61 0303 	sbc.w	r3, r1, r3
 8001a3a:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8001a3e:	4beb      	ldr	r3, [pc, #940]	@ (8001dec <Set_Random_Motion_Values+0xa70>)
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	461a      	mov	r2, r3
 8001a44:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8001a48:	4413      	add	r3, r2
 8001a4a:	461a      	mov	r2, r3
 8001a4c:	4be7      	ldr	r3, [pc, #924]	@ (8001dec <Set_Random_Motion_Values+0xa70>)
 8001a4e:	601a      	str	r2, [r3, #0]
    g_axes.AXIS_Y +=  (100 + ((uint64_t)rand()*4*cnt)/RAND_MAX);
 8001a50:	f008 feea 	bl	800a828 <rand>
 8001a54:	4603      	mov	r3, r0
 8001a56:	17da      	asrs	r2, r3, #31
 8001a58:	f8c7 3198 	str.w	r3, [r7, #408]	@ 0x198
 8001a5c:	f8c7 219c 	str.w	r2, [r7, #412]	@ 0x19c
 8001a60:	f8d7 32e4 	ldr.w	r3, [r7, #740]	@ 0x2e4
 8001a64:	2200      	movs	r2, #0
 8001a66:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
 8001a6a:	f8c7 2194 	str.w	r2, [r7, #404]	@ 0x194
 8001a6e:	e9d7 4566 	ldrd	r4, r5, [r7, #408]	@ 0x198
 8001a72:	462b      	mov	r3, r5
 8001a74:	e9d7 8964 	ldrd	r8, r9, [r7, #400]	@ 0x190
 8001a78:	4642      	mov	r2, r8
 8001a7a:	fb02 f203 	mul.w	r2, r2, r3
 8001a7e:	464b      	mov	r3, r9
 8001a80:	4621      	mov	r1, r4
 8001a82:	fb01 f303 	mul.w	r3, r1, r3
 8001a86:	4413      	add	r3, r2
 8001a88:	4622      	mov	r2, r4
 8001a8a:	4641      	mov	r1, r8
 8001a8c:	fba2 1201 	umull	r1, r2, r2, r1
 8001a90:	f8c7 229c 	str.w	r2, [r7, #668]	@ 0x29c
 8001a94:	460a      	mov	r2, r1
 8001a96:	f8c7 2298 	str.w	r2, [r7, #664]	@ 0x298
 8001a9a:	f8d7 229c 	ldr.w	r2, [r7, #668]	@ 0x29c
 8001a9e:	4413      	add	r3, r2
 8001aa0:	f8c7 329c 	str.w	r3, [r7, #668]	@ 0x29c
 8001aa4:	f04f 0000 	mov.w	r0, #0
 8001aa8:	f04f 0100 	mov.w	r1, #0
 8001aac:	e9d7 45a6 	ldrd	r4, r5, [r7, #664]	@ 0x298
 8001ab0:	462b      	mov	r3, r5
 8001ab2:	0099      	lsls	r1, r3, #2
 8001ab4:	4623      	mov	r3, r4
 8001ab6:	ea41 7193 	orr.w	r1, r1, r3, lsr #30
 8001aba:	4623      	mov	r3, r4
 8001abc:	0098      	lsls	r0, r3, #2
 8001abe:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 8001ac2:	f04f 0300 	mov.w	r3, #0
 8001ac6:	f7ff f8df 	bl	8000c88 <__aeabi_uldivmod>
 8001aca:	4602      	mov	r2, r0
 8001acc:	460b      	mov	r3, r1
 8001ace:	f112 0164 	adds.w	r1, r2, #100	@ 0x64
 8001ad2:	f8c7 10e0 	str.w	r1, [r7, #224]	@ 0xe0
 8001ad6:	f143 0300 	adc.w	r3, r3, #0
 8001ada:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8001ade:	4bc3      	ldr	r3, [pc, #780]	@ (8001dec <Set_Random_Motion_Values+0xa70>)
 8001ae0:	685b      	ldr	r3, [r3, #4]
 8001ae2:	461a      	mov	r2, r3
 8001ae4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8001ae8:	4413      	add	r3, r2
 8001aea:	461a      	mov	r2, r3
 8001aec:	4bbf      	ldr	r3, [pc, #764]	@ (8001dec <Set_Random_Motion_Values+0xa70>)
 8001aee:	605a      	str	r2, [r3, #4]
    g_axes.AXIS_Z += -(100 + ((uint64_t)rand()*6*cnt)/RAND_MAX);
 8001af0:	f008 fe9a 	bl	800a828 <rand>
 8001af4:	4603      	mov	r3, r0
 8001af6:	17da      	asrs	r2, r3, #31
 8001af8:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
 8001afc:	f8c7 218c 	str.w	r2, [r7, #396]	@ 0x18c
 8001b00:	f8d7 32e4 	ldr.w	r3, [r7, #740]	@ 0x2e4
 8001b04:	2200      	movs	r2, #0
 8001b06:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 8001b0a:	f8c7 2184 	str.w	r2, [r7, #388]	@ 0x184
 8001b0e:	e9d7 4562 	ldrd	r4, r5, [r7, #392]	@ 0x188
 8001b12:	462b      	mov	r3, r5
 8001b14:	e9d7 8960 	ldrd	r8, r9, [r7, #384]	@ 0x180
 8001b18:	4642      	mov	r2, r8
 8001b1a:	fb02 f203 	mul.w	r2, r2, r3
 8001b1e:	464b      	mov	r3, r9
 8001b20:	4621      	mov	r1, r4
 8001b22:	fb01 f303 	mul.w	r3, r1, r3
 8001b26:	4413      	add	r3, r2
 8001b28:	4622      	mov	r2, r4
 8001b2a:	4641      	mov	r1, r8
 8001b2c:	fba2 1201 	umull	r1, r2, r2, r1
 8001b30:	f8c7 2294 	str.w	r2, [r7, #660]	@ 0x294
 8001b34:	460a      	mov	r2, r1
 8001b36:	f8c7 2290 	str.w	r2, [r7, #656]	@ 0x290
 8001b3a:	f8d7 2294 	ldr.w	r2, [r7, #660]	@ 0x294
 8001b3e:	4413      	add	r3, r2
 8001b40:	f8c7 3294 	str.w	r3, [r7, #660]	@ 0x294
 8001b44:	e9d7 45a4 	ldrd	r4, r5, [r7, #656]	@ 0x290
 8001b48:	4622      	mov	r2, r4
 8001b4a:	462b      	mov	r3, r5
 8001b4c:	1891      	adds	r1, r2, r2
 8001b4e:	6239      	str	r1, [r7, #32]
 8001b50:	415b      	adcs	r3, r3
 8001b52:	627b      	str	r3, [r7, #36]	@ 0x24
 8001b54:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001b58:	4621      	mov	r1, r4
 8001b5a:	1851      	adds	r1, r2, r1
 8001b5c:	61b9      	str	r1, [r7, #24]
 8001b5e:	4629      	mov	r1, r5
 8001b60:	eb43 0101 	adc.w	r1, r3, r1
 8001b64:	61f9      	str	r1, [r7, #28]
 8001b66:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8001b6a:	460b      	mov	r3, r1
 8001b6c:	18db      	adds	r3, r3, r3
 8001b6e:	613b      	str	r3, [r7, #16]
 8001b70:	4613      	mov	r3, r2
 8001b72:	eb42 0303 	adc.w	r3, r2, r3
 8001b76:	617b      	str	r3, [r7, #20]
 8001b78:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	4621      	mov	r1, r4
 8001b80:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 8001b84:	f04f 0300 	mov.w	r3, #0
 8001b88:	f7ff f87e 	bl	8000c88 <__aeabi_uldivmod>
 8001b8c:	4602      	mov	r2, r0
 8001b8e:	460b      	mov	r3, r1
 8001b90:	f06f 0063 	mvn.w	r0, #99	@ 0x63
 8001b94:	f04f 31ff 	mov.w	r1, #4294967295
 8001b98:	1a80      	subs	r0, r0, r2
 8001b9a:	f8c7 00d8 	str.w	r0, [r7, #216]	@ 0xd8
 8001b9e:	eb61 0303 	sbc.w	r3, r1, r3
 8001ba2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8001ba6:	4b91      	ldr	r3, [pc, #580]	@ (8001dec <Set_Random_Motion_Values+0xa70>)
 8001ba8:	689b      	ldr	r3, [r3, #8]
 8001baa:	461a      	mov	r2, r3
 8001bac:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8001bb0:	4413      	add	r3, r2
 8001bb2:	461a      	mov	r2, r3
 8001bb4:	4b8d      	ldr	r3, [pc, #564]	@ (8001dec <Set_Random_Motion_Values+0xa70>)
 8001bb6:	609a      	str	r2, [r3, #8]
    m_axes.AXIS_X += -(3  + ((uint64_t)rand()*7*cnt)/RAND_MAX);
 8001bb8:	f008 fe36 	bl	800a828 <rand>
 8001bbc:	4603      	mov	r3, r0
 8001bbe:	17da      	asrs	r2, r3, #31
 8001bc0:	f8c7 3178 	str.w	r3, [r7, #376]	@ 0x178
 8001bc4:	f8c7 217c 	str.w	r2, [r7, #380]	@ 0x17c
 8001bc8:	f8d7 32e4 	ldr.w	r3, [r7, #740]	@ 0x2e4
 8001bcc:	2200      	movs	r2, #0
 8001bce:	f8c7 3170 	str.w	r3, [r7, #368]	@ 0x170
 8001bd2:	f8c7 2174 	str.w	r2, [r7, #372]	@ 0x174
 8001bd6:	e9d7 455e 	ldrd	r4, r5, [r7, #376]	@ 0x178
 8001bda:	462b      	mov	r3, r5
 8001bdc:	e9d7 895c 	ldrd	r8, r9, [r7, #368]	@ 0x170
 8001be0:	4642      	mov	r2, r8
 8001be2:	fb02 f203 	mul.w	r2, r2, r3
 8001be6:	464b      	mov	r3, r9
 8001be8:	4621      	mov	r1, r4
 8001bea:	fb01 f303 	mul.w	r3, r1, r3
 8001bee:	4413      	add	r3, r2
 8001bf0:	4622      	mov	r2, r4
 8001bf2:	4641      	mov	r1, r8
 8001bf4:	fba2 1201 	umull	r1, r2, r2, r1
 8001bf8:	f8c7 228c 	str.w	r2, [r7, #652]	@ 0x28c
 8001bfc:	460a      	mov	r2, r1
 8001bfe:	f8c7 2288 	str.w	r2, [r7, #648]	@ 0x288
 8001c02:	f8d7 228c 	ldr.w	r2, [r7, #652]	@ 0x28c
 8001c06:	4413      	add	r3, r2
 8001c08:	f8c7 328c 	str.w	r3, [r7, #652]	@ 0x28c
 8001c0c:	e9d7 45a2 	ldrd	r4, r5, [r7, #648]	@ 0x288
 8001c10:	4622      	mov	r2, r4
 8001c12:	462b      	mov	r3, r5
 8001c14:	f04f 0000 	mov.w	r0, #0
 8001c18:	f04f 0100 	mov.w	r1, #0
 8001c1c:	00d9      	lsls	r1, r3, #3
 8001c1e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001c22:	00d0      	lsls	r0, r2, #3
 8001c24:	4602      	mov	r2, r0
 8001c26:	460b      	mov	r3, r1
 8001c28:	4621      	mov	r1, r4
 8001c2a:	1a51      	subs	r1, r2, r1
 8001c2c:	f8c7 1168 	str.w	r1, [r7, #360]	@ 0x168
 8001c30:	4629      	mov	r1, r5
 8001c32:	eb63 0301 	sbc.w	r3, r3, r1
 8001c36:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
 8001c3a:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 8001c3e:	f04f 0300 	mov.w	r3, #0
 8001c42:	e9d7 015a 	ldrd	r0, r1, [r7, #360]	@ 0x168
 8001c46:	f7ff f81f 	bl	8000c88 <__aeabi_uldivmod>
 8001c4a:	4602      	mov	r2, r0
 8001c4c:	460b      	mov	r3, r1
 8001c4e:	f06f 0002 	mvn.w	r0, #2
 8001c52:	f04f 31ff 	mov.w	r1, #4294967295
 8001c56:	1a80      	subs	r0, r0, r2
 8001c58:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
 8001c5c:	eb61 0303 	sbc.w	r3, r1, r3
 8001c60:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8001c64:	4b62      	ldr	r3, [pc, #392]	@ (8001df0 <Set_Random_Motion_Values+0xa74>)
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	461a      	mov	r2, r3
 8001c6a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8001c6e:	4413      	add	r3, r2
 8001c70:	461a      	mov	r2, r3
 8001c72:	4b5f      	ldr	r3, [pc, #380]	@ (8001df0 <Set_Random_Motion_Values+0xa74>)
 8001c74:	601a      	str	r2, [r3, #0]
    m_axes.AXIS_Y +=  (3  + ((uint64_t)rand()*9*cnt)/RAND_MAX);
 8001c76:	f008 fdd7 	bl	800a828 <rand>
 8001c7a:	4603      	mov	r3, r0
 8001c7c:	17da      	asrs	r2, r3, #31
 8001c7e:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
 8001c82:	f8c7 2164 	str.w	r2, [r7, #356]	@ 0x164
 8001c86:	f8d7 32e4 	ldr.w	r3, [r7, #740]	@ 0x2e4
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
 8001c90:	f8c7 215c 	str.w	r2, [r7, #348]	@ 0x15c
 8001c94:	e9d7 4558 	ldrd	r4, r5, [r7, #352]	@ 0x160
 8001c98:	462b      	mov	r3, r5
 8001c9a:	e9d7 8956 	ldrd	r8, r9, [r7, #344]	@ 0x158
 8001c9e:	4642      	mov	r2, r8
 8001ca0:	fb02 f203 	mul.w	r2, r2, r3
 8001ca4:	464b      	mov	r3, r9
 8001ca6:	4621      	mov	r1, r4
 8001ca8:	fb01 f303 	mul.w	r3, r1, r3
 8001cac:	4413      	add	r3, r2
 8001cae:	4622      	mov	r2, r4
 8001cb0:	4641      	mov	r1, r8
 8001cb2:	fba2 1201 	umull	r1, r2, r2, r1
 8001cb6:	f8c7 2284 	str.w	r2, [r7, #644]	@ 0x284
 8001cba:	460a      	mov	r2, r1
 8001cbc:	f8c7 2280 	str.w	r2, [r7, #640]	@ 0x280
 8001cc0:	f8d7 2284 	ldr.w	r2, [r7, #644]	@ 0x284
 8001cc4:	4413      	add	r3, r2
 8001cc6:	f8c7 3284 	str.w	r3, [r7, #644]	@ 0x284
 8001cca:	e9d7 45a0 	ldrd	r4, r5, [r7, #640]	@ 0x280
 8001cce:	4622      	mov	r2, r4
 8001cd0:	462b      	mov	r3, r5
 8001cd2:	f04f 0000 	mov.w	r0, #0
 8001cd6:	f04f 0100 	mov.w	r1, #0
 8001cda:	00d9      	lsls	r1, r3, #3
 8001cdc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001ce0:	00d0      	lsls	r0, r2, #3
 8001ce2:	4602      	mov	r2, r0
 8001ce4:	460b      	mov	r3, r1
 8001ce6:	4621      	mov	r1, r4
 8001ce8:	1851      	adds	r1, r2, r1
 8001cea:	f8c7 1150 	str.w	r1, [r7, #336]	@ 0x150
 8001cee:	4629      	mov	r1, r5
 8001cf0:	eb43 0101 	adc.w	r1, r3, r1
 8001cf4:	f8c7 1154 	str.w	r1, [r7, #340]	@ 0x154
 8001cf8:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 8001cfc:	f04f 0300 	mov.w	r3, #0
 8001d00:	e9d7 0154 	ldrd	r0, r1, [r7, #336]	@ 0x150
 8001d04:	f7fe ffc0 	bl	8000c88 <__aeabi_uldivmod>
 8001d08:	4602      	mov	r2, r0
 8001d0a:	460b      	mov	r3, r1
 8001d0c:	1cd1      	adds	r1, r2, #3
 8001d0e:	f8c7 10c8 	str.w	r1, [r7, #200]	@ 0xc8
 8001d12:	f143 0300 	adc.w	r3, r3, #0
 8001d16:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8001d1a:	4b35      	ldr	r3, [pc, #212]	@ (8001df0 <Set_Random_Motion_Values+0xa74>)
 8001d1c:	685b      	ldr	r3, [r3, #4]
 8001d1e:	461a      	mov	r2, r3
 8001d20:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8001d24:	4413      	add	r3, r2
 8001d26:	461a      	mov	r2, r3
 8001d28:	4b31      	ldr	r3, [pc, #196]	@ (8001df0 <Set_Random_Motion_Values+0xa74>)
 8001d2a:	605a      	str	r2, [r3, #4]
    m_axes.AXIS_Z += -(3  + ((uint64_t)rand()*3*cnt)/RAND_MAX);
 8001d2c:	f008 fd7c 	bl	800a828 <rand>
 8001d30:	4603      	mov	r3, r0
 8001d32:	17da      	asrs	r2, r3, #31
 8001d34:	f8c7 3148 	str.w	r3, [r7, #328]	@ 0x148
 8001d38:	f8c7 214c 	str.w	r2, [r7, #332]	@ 0x14c
 8001d3c:	f8d7 32e4 	ldr.w	r3, [r7, #740]	@ 0x2e4
 8001d40:	2200      	movs	r2, #0
 8001d42:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
 8001d46:	f8c7 2144 	str.w	r2, [r7, #324]	@ 0x144
 8001d4a:	e9d7 4552 	ldrd	r4, r5, [r7, #328]	@ 0x148
 8001d4e:	462b      	mov	r3, r5
 8001d50:	e9d7 8950 	ldrd	r8, r9, [r7, #320]	@ 0x140
 8001d54:	4642      	mov	r2, r8
 8001d56:	fb02 f203 	mul.w	r2, r2, r3
 8001d5a:	464b      	mov	r3, r9
 8001d5c:	4621      	mov	r1, r4
 8001d5e:	fb01 f303 	mul.w	r3, r1, r3
 8001d62:	4413      	add	r3, r2
 8001d64:	4622      	mov	r2, r4
 8001d66:	4641      	mov	r1, r8
 8001d68:	fba2 1201 	umull	r1, r2, r2, r1
 8001d6c:	f8c7 227c 	str.w	r2, [r7, #636]	@ 0x27c
 8001d70:	460a      	mov	r2, r1
 8001d72:	f8c7 2278 	str.w	r2, [r7, #632]	@ 0x278
 8001d76:	f8d7 227c 	ldr.w	r2, [r7, #636]	@ 0x27c
 8001d7a:	4413      	add	r3, r2
 8001d7c:	f8c7 327c 	str.w	r3, [r7, #636]	@ 0x27c
 8001d80:	e9d7 459e 	ldrd	r4, r5, [r7, #632]	@ 0x278
 8001d84:	4622      	mov	r2, r4
 8001d86:	462b      	mov	r3, r5
 8001d88:	1891      	adds	r1, r2, r2
 8001d8a:	60b9      	str	r1, [r7, #8]
 8001d8c:	415b      	adcs	r3, r3
 8001d8e:	60fb      	str	r3, [r7, #12]
 8001d90:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001d94:	4621      	mov	r1, r4
 8001d96:	1851      	adds	r1, r2, r1
 8001d98:	f8c7 1138 	str.w	r1, [r7, #312]	@ 0x138
 8001d9c:	4629      	mov	r1, r5
 8001d9e:	eb43 0101 	adc.w	r1, r3, r1
 8001da2:	f8c7 113c 	str.w	r1, [r7, #316]	@ 0x13c
 8001da6:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 8001daa:	f04f 0300 	mov.w	r3, #0
 8001dae:	e9d7 014e 	ldrd	r0, r1, [r7, #312]	@ 0x138
 8001db2:	f7fe ff69 	bl	8000c88 <__aeabi_uldivmod>
 8001db6:	4602      	mov	r2, r0
 8001db8:	460b      	mov	r3, r1
 8001dba:	f06f 0002 	mvn.w	r0, #2
 8001dbe:	f04f 31ff 	mov.w	r1, #4294967295
 8001dc2:	1a80      	subs	r0, r0, r2
 8001dc4:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0
 8001dc8:	eb61 0303 	sbc.w	r3, r1, r3
 8001dcc:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8001dd0:	4b07      	ldr	r3, [pc, #28]	@ (8001df0 <Set_Random_Motion_Values+0xa74>)
 8001dd2:	689b      	ldr	r3, [r3, #8]
 8001dd4:	461a      	mov	r2, r3
 8001dd6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001dda:	4413      	add	r3, r2
 8001ddc:	461a      	mov	r2, r3
 8001dde:	4b04      	ldr	r3, [pc, #16]	@ (8001df0 <Set_Random_Motion_Values+0xa74>)
 8001de0:	609a      	str	r2, [r3, #8]
    q_axes.AXIS_X += (200 + ((uint64_t)rand()*7*cnt)/RAND_MAX);
 8001de2:	f008 fd21 	bl	800a828 <rand>
 8001de6:	4603      	mov	r3, r0
 8001de8:	17da      	asrs	r2, r3, #31
 8001dea:	e003      	b.n	8001df4 <Set_Random_Motion_Values+0xa78>
 8001dec:	2000029c 	.word	0x2000029c
 8001df0:	200002a8 	.word	0x200002a8
 8001df4:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 8001df8:	f8c7 2134 	str.w	r2, [r7, #308]	@ 0x134
 8001dfc:	f8d7 32e4 	ldr.w	r3, [r7, #740]	@ 0x2e4
 8001e00:	2200      	movs	r2, #0
 8001e02:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 8001e06:	f8c7 212c 	str.w	r2, [r7, #300]	@ 0x12c
 8001e0a:	e9d7 454c 	ldrd	r4, r5, [r7, #304]	@ 0x130
 8001e0e:	462b      	mov	r3, r5
 8001e10:	e9d7 894a 	ldrd	r8, r9, [r7, #296]	@ 0x128
 8001e14:	4642      	mov	r2, r8
 8001e16:	fb02 f203 	mul.w	r2, r2, r3
 8001e1a:	464b      	mov	r3, r9
 8001e1c:	4621      	mov	r1, r4
 8001e1e:	fb01 f303 	mul.w	r3, r1, r3
 8001e22:	4413      	add	r3, r2
 8001e24:	4622      	mov	r2, r4
 8001e26:	4641      	mov	r1, r8
 8001e28:	fba2 1201 	umull	r1, r2, r2, r1
 8001e2c:	f8c7 2274 	str.w	r2, [r7, #628]	@ 0x274
 8001e30:	460a      	mov	r2, r1
 8001e32:	f8c7 2270 	str.w	r2, [r7, #624]	@ 0x270
 8001e36:	f8d7 2274 	ldr.w	r2, [r7, #628]	@ 0x274
 8001e3a:	4413      	add	r3, r2
 8001e3c:	f8c7 3274 	str.w	r3, [r7, #628]	@ 0x274
 8001e40:	e9d7 459c 	ldrd	r4, r5, [r7, #624]	@ 0x270
 8001e44:	4622      	mov	r2, r4
 8001e46:	462b      	mov	r3, r5
 8001e48:	f04f 0000 	mov.w	r0, #0
 8001e4c:	f04f 0100 	mov.w	r1, #0
 8001e50:	00d9      	lsls	r1, r3, #3
 8001e52:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001e56:	00d0      	lsls	r0, r2, #3
 8001e58:	4602      	mov	r2, r0
 8001e5a:	460b      	mov	r3, r1
 8001e5c:	4621      	mov	r1, r4
 8001e5e:	1a51      	subs	r1, r2, r1
 8001e60:	f8c7 1120 	str.w	r1, [r7, #288]	@ 0x120
 8001e64:	4629      	mov	r1, r5
 8001e66:	eb63 0301 	sbc.w	r3, r3, r1
 8001e6a:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8001e6e:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 8001e72:	f04f 0300 	mov.w	r3, #0
 8001e76:	e9d7 0148 	ldrd	r0, r1, [r7, #288]	@ 0x120
 8001e7a:	f7fe ff05 	bl	8000c88 <__aeabi_uldivmod>
 8001e7e:	4602      	mov	r2, r0
 8001e80:	460b      	mov	r3, r1
 8001e82:	f112 01c8 	adds.w	r1, r2, #200	@ 0xc8
 8001e86:	f8c7 10b8 	str.w	r1, [r7, #184]	@ 0xb8
 8001e8a:	f143 0300 	adc.w	r3, r3, #0
 8001e8e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8001e92:	4b61      	ldr	r3, [pc, #388]	@ (8002018 <Set_Random_Motion_Values+0xc9c>)
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	461a      	mov	r2, r3
 8001e98:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8001e9c:	4413      	add	r3, r2
 8001e9e:	461a      	mov	r2, r3
 8001ea0:	4b5d      	ldr	r3, [pc, #372]	@ (8002018 <Set_Random_Motion_Values+0xc9c>)
 8001ea2:	601a      	str	r2, [r3, #0]
    q_axes.AXIS_Y -= (150 + ((uint64_t)rand()*3*cnt)/RAND_MAX);
 8001ea4:	f008 fcc0 	bl	800a828 <rand>
 8001ea8:	4603      	mov	r3, r0
 8001eaa:	17da      	asrs	r2, r3, #31
 8001eac:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 8001eb0:	f8c7 211c 	str.w	r2, [r7, #284]	@ 0x11c
 8001eb4:	f8d7 32e4 	ldr.w	r3, [r7, #740]	@ 0x2e4
 8001eb8:	2200      	movs	r2, #0
 8001eba:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
 8001ebe:	f8c7 2114 	str.w	r2, [r7, #276]	@ 0x114
 8001ec2:	e9d7 4546 	ldrd	r4, r5, [r7, #280]	@ 0x118
 8001ec6:	462b      	mov	r3, r5
 8001ec8:	e9d7 8944 	ldrd	r8, r9, [r7, #272]	@ 0x110
 8001ecc:	4642      	mov	r2, r8
 8001ece:	fb02 f203 	mul.w	r2, r2, r3
 8001ed2:	464b      	mov	r3, r9
 8001ed4:	4621      	mov	r1, r4
 8001ed6:	fb01 f303 	mul.w	r3, r1, r3
 8001eda:	4413      	add	r3, r2
 8001edc:	4622      	mov	r2, r4
 8001ede:	4641      	mov	r1, r8
 8001ee0:	fba2 1201 	umull	r1, r2, r2, r1
 8001ee4:	f8c7 226c 	str.w	r2, [r7, #620]	@ 0x26c
 8001ee8:	460a      	mov	r2, r1
 8001eea:	f8c7 2268 	str.w	r2, [r7, #616]	@ 0x268
 8001eee:	f8d7 226c 	ldr.w	r2, [r7, #620]	@ 0x26c
 8001ef2:	4413      	add	r3, r2
 8001ef4:	f8c7 326c 	str.w	r3, [r7, #620]	@ 0x26c
 8001ef8:	e9d7 459a 	ldrd	r4, r5, [r7, #616]	@ 0x268
 8001efc:	4622      	mov	r2, r4
 8001efe:	462b      	mov	r3, r5
 8001f00:	1891      	adds	r1, r2, r2
 8001f02:	6039      	str	r1, [r7, #0]
 8001f04:	415b      	adcs	r3, r3
 8001f06:	607b      	str	r3, [r7, #4]
 8001f08:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001f0c:	4621      	mov	r1, r4
 8001f0e:	1851      	adds	r1, r2, r1
 8001f10:	f8c7 1108 	str.w	r1, [r7, #264]	@ 0x108
 8001f14:	4629      	mov	r1, r5
 8001f16:	eb43 0101 	adc.w	r1, r3, r1
 8001f1a:	f8c7 110c 	str.w	r1, [r7, #268]	@ 0x10c
 8001f1e:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 8001f22:	f04f 0300 	mov.w	r3, #0
 8001f26:	e9d7 0142 	ldrd	r0, r1, [r7, #264]	@ 0x108
 8001f2a:	f7fe fead 	bl	8000c88 <__aeabi_uldivmod>
 8001f2e:	4602      	mov	r2, r0
 8001f30:	460b      	mov	r3, r1
 8001f32:	f112 0196 	adds.w	r1, r2, #150	@ 0x96
 8001f36:	f8c7 10b0 	str.w	r1, [r7, #176]	@ 0xb0
 8001f3a:	f143 0300 	adc.w	r3, r3, #0
 8001f3e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8001f42:	4b35      	ldr	r3, [pc, #212]	@ (8002018 <Set_Random_Motion_Values+0xc9c>)
 8001f44:	685b      	ldr	r3, [r3, #4]
 8001f46:	461a      	mov	r2, r3
 8001f48:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8001f4c:	1ad3      	subs	r3, r2, r3
 8001f4e:	461a      	mov	r2, r3
 8001f50:	4b31      	ldr	r3, [pc, #196]	@ (8002018 <Set_Random_Motion_Values+0xc9c>)
 8001f52:	605a      	str	r2, [r3, #4]
    q_axes.AXIS_Z += (10  + ((uint64_t)rand()*5*cnt)/RAND_MAX);
 8001f54:	f008 fc68 	bl	800a828 <rand>
 8001f58:	4603      	mov	r3, r0
 8001f5a:	17da      	asrs	r2, r3, #31
 8001f5c:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8001f60:	f8c7 2104 	str.w	r2, [r7, #260]	@ 0x104
 8001f64:	f8d7 32e4 	ldr.w	r3, [r7, #740]	@ 0x2e4
 8001f68:	2200      	movs	r2, #0
 8001f6a:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8001f6e:	f8c7 20fc 	str.w	r2, [r7, #252]	@ 0xfc
 8001f72:	e9d7 4540 	ldrd	r4, r5, [r7, #256]	@ 0x100
 8001f76:	462b      	mov	r3, r5
 8001f78:	e9d7 893e 	ldrd	r8, r9, [r7, #248]	@ 0xf8
 8001f7c:	4642      	mov	r2, r8
 8001f7e:	fb02 f203 	mul.w	r2, r2, r3
 8001f82:	464b      	mov	r3, r9
 8001f84:	4621      	mov	r1, r4
 8001f86:	fb01 f303 	mul.w	r3, r1, r3
 8001f8a:	4413      	add	r3, r2
 8001f8c:	4622      	mov	r2, r4
 8001f8e:	4641      	mov	r1, r8
 8001f90:	fba2 1201 	umull	r1, r2, r2, r1
 8001f94:	f8c7 2264 	str.w	r2, [r7, #612]	@ 0x264
 8001f98:	460a      	mov	r2, r1
 8001f9a:	f8c7 2260 	str.w	r2, [r7, #608]	@ 0x260
 8001f9e:	f8d7 2264 	ldr.w	r2, [r7, #612]	@ 0x264
 8001fa2:	4413      	add	r3, r2
 8001fa4:	f8c7 3264 	str.w	r3, [r7, #612]	@ 0x264
 8001fa8:	e9d7 4598 	ldrd	r4, r5, [r7, #608]	@ 0x260
 8001fac:	4622      	mov	r2, r4
 8001fae:	462b      	mov	r3, r5
 8001fb0:	f04f 0000 	mov.w	r0, #0
 8001fb4:	f04f 0100 	mov.w	r1, #0
 8001fb8:	0099      	lsls	r1, r3, #2
 8001fba:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 8001fbe:	0090      	lsls	r0, r2, #2
 8001fc0:	4602      	mov	r2, r0
 8001fc2:	460b      	mov	r3, r1
 8001fc4:	4621      	mov	r1, r4
 8001fc6:	1851      	adds	r1, r2, r1
 8001fc8:	f8c7 10f0 	str.w	r1, [r7, #240]	@ 0xf0
 8001fcc:	4629      	mov	r1, r5
 8001fce:	eb43 0101 	adc.w	r1, r3, r1
 8001fd2:	f8c7 10f4 	str.w	r1, [r7, #244]	@ 0xf4
 8001fd6:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 8001fda:	f04f 0300 	mov.w	r3, #0
 8001fde:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	@ 0xf0
 8001fe2:	f7fe fe51 	bl	8000c88 <__aeabi_uldivmod>
 8001fe6:	4602      	mov	r2, r0
 8001fe8:	460b      	mov	r3, r1
 8001fea:	f112 010a 	adds.w	r1, r2, #10
 8001fee:	f8c7 10a8 	str.w	r1, [r7, #168]	@ 0xa8
 8001ff2:	f143 0300 	adc.w	r3, r3, #0
 8001ff6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8001ffa:	4b07      	ldr	r3, [pc, #28]	@ (8002018 <Set_Random_Motion_Values+0xc9c>)
 8001ffc:	689b      	ldr	r3, [r3, #8]
 8001ffe:	461a      	mov	r2, r3
 8002000:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002004:	4413      	add	r3, r2
 8002006:	461a      	mov	r2, r3
 8002008:	4b03      	ldr	r3, [pc, #12]	@ (8002018 <Set_Random_Motion_Values+0xc9c>)
 800200a:	609a      	str	r2, [r3, #8]
}
 800200c:	bf00      	nop
 800200e:	f507 773c 	add.w	r7, r7, #752	@ 0x2f0
 8002012:	46bd      	mov	sp, r7
 8002014:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002018:	200002b4 	.word	0x200002b4

0800201c <Reset_Motion_Values>:
 * @brief  Reset values for all motion sensor data
 * @param  None
 * @retval None
 */
static void Reset_Motion_Values(void)
{
 800201c:	b480      	push	{r7}
 800201e:	af00      	add	r7, sp, #0
  x_axes.AXIS_X = (x_axes.AXIS_X)%2000 == 0 ? -x_axes.AXIS_X : 10;
 8002020:	4b6e      	ldr	r3, [pc, #440]	@ (80021dc <Reset_Motion_Values+0x1c0>)
 8002022:	681a      	ldr	r2, [r3, #0]
 8002024:	4b6e      	ldr	r3, [pc, #440]	@ (80021e0 <Reset_Motion_Values+0x1c4>)
 8002026:	fb83 1302 	smull	r1, r3, r3, r2
 800202a:	11d9      	asrs	r1, r3, #7
 800202c:	17d3      	asrs	r3, r2, #31
 800202e:	1acb      	subs	r3, r1, r3
 8002030:	f44f 61fa 	mov.w	r1, #2000	@ 0x7d0
 8002034:	fb01 f303 	mul.w	r3, r1, r3
 8002038:	1ad3      	subs	r3, r2, r3
 800203a:	2b00      	cmp	r3, #0
 800203c:	d103      	bne.n	8002046 <Reset_Motion_Values+0x2a>
 800203e:	4b67      	ldr	r3, [pc, #412]	@ (80021dc <Reset_Motion_Values+0x1c0>)
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	425b      	negs	r3, r3
 8002044:	e000      	b.n	8002048 <Reset_Motion_Values+0x2c>
 8002046:	230a      	movs	r3, #10
 8002048:	4a64      	ldr	r2, [pc, #400]	@ (80021dc <Reset_Motion_Values+0x1c0>)
 800204a:	6013      	str	r3, [r2, #0]
  x_axes.AXIS_Y = (x_axes.AXIS_Y)%2000 == 0 ? -x_axes.AXIS_Y : -10;
 800204c:	4b63      	ldr	r3, [pc, #396]	@ (80021dc <Reset_Motion_Values+0x1c0>)
 800204e:	685a      	ldr	r2, [r3, #4]
 8002050:	4b63      	ldr	r3, [pc, #396]	@ (80021e0 <Reset_Motion_Values+0x1c4>)
 8002052:	fb83 1302 	smull	r1, r3, r3, r2
 8002056:	11d9      	asrs	r1, r3, #7
 8002058:	17d3      	asrs	r3, r2, #31
 800205a:	1acb      	subs	r3, r1, r3
 800205c:	f44f 61fa 	mov.w	r1, #2000	@ 0x7d0
 8002060:	fb01 f303 	mul.w	r3, r1, r3
 8002064:	1ad3      	subs	r3, r2, r3
 8002066:	2b00      	cmp	r3, #0
 8002068:	d103      	bne.n	8002072 <Reset_Motion_Values+0x56>
 800206a:	4b5c      	ldr	r3, [pc, #368]	@ (80021dc <Reset_Motion_Values+0x1c0>)
 800206c:	685b      	ldr	r3, [r3, #4]
 800206e:	425b      	negs	r3, r3
 8002070:	e001      	b.n	8002076 <Reset_Motion_Values+0x5a>
 8002072:	f06f 0309 	mvn.w	r3, #9
 8002076:	4a59      	ldr	r2, [pc, #356]	@ (80021dc <Reset_Motion_Values+0x1c0>)
 8002078:	6053      	str	r3, [r2, #4]
  x_axes.AXIS_Z = (x_axes.AXIS_Z)%2000 == 0 ? -x_axes.AXIS_Z : 10;
 800207a:	4b58      	ldr	r3, [pc, #352]	@ (80021dc <Reset_Motion_Values+0x1c0>)
 800207c:	689a      	ldr	r2, [r3, #8]
 800207e:	4b58      	ldr	r3, [pc, #352]	@ (80021e0 <Reset_Motion_Values+0x1c4>)
 8002080:	fb83 1302 	smull	r1, r3, r3, r2
 8002084:	11d9      	asrs	r1, r3, #7
 8002086:	17d3      	asrs	r3, r2, #31
 8002088:	1acb      	subs	r3, r1, r3
 800208a:	f44f 61fa 	mov.w	r1, #2000	@ 0x7d0
 800208e:	fb01 f303 	mul.w	r3, r1, r3
 8002092:	1ad3      	subs	r3, r2, r3
 8002094:	2b00      	cmp	r3, #0
 8002096:	d103      	bne.n	80020a0 <Reset_Motion_Values+0x84>
 8002098:	4b50      	ldr	r3, [pc, #320]	@ (80021dc <Reset_Motion_Values+0x1c0>)
 800209a:	689b      	ldr	r3, [r3, #8]
 800209c:	425b      	negs	r3, r3
 800209e:	e000      	b.n	80020a2 <Reset_Motion_Values+0x86>
 80020a0:	230a      	movs	r3, #10
 80020a2:	4a4e      	ldr	r2, [pc, #312]	@ (80021dc <Reset_Motion_Values+0x1c0>)
 80020a4:	6093      	str	r3, [r2, #8]
  g_axes.AXIS_X = (g_axes.AXIS_X)%2000 == 0 ? -g_axes.AXIS_X : 100;
 80020a6:	4b4f      	ldr	r3, [pc, #316]	@ (80021e4 <Reset_Motion_Values+0x1c8>)
 80020a8:	681a      	ldr	r2, [r3, #0]
 80020aa:	4b4d      	ldr	r3, [pc, #308]	@ (80021e0 <Reset_Motion_Values+0x1c4>)
 80020ac:	fb83 1302 	smull	r1, r3, r3, r2
 80020b0:	11d9      	asrs	r1, r3, #7
 80020b2:	17d3      	asrs	r3, r2, #31
 80020b4:	1acb      	subs	r3, r1, r3
 80020b6:	f44f 61fa 	mov.w	r1, #2000	@ 0x7d0
 80020ba:	fb01 f303 	mul.w	r3, r1, r3
 80020be:	1ad3      	subs	r3, r2, r3
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d103      	bne.n	80020cc <Reset_Motion_Values+0xb0>
 80020c4:	4b47      	ldr	r3, [pc, #284]	@ (80021e4 <Reset_Motion_Values+0x1c8>)
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	425b      	negs	r3, r3
 80020ca:	e000      	b.n	80020ce <Reset_Motion_Values+0xb2>
 80020cc:	2364      	movs	r3, #100	@ 0x64
 80020ce:	4a45      	ldr	r2, [pc, #276]	@ (80021e4 <Reset_Motion_Values+0x1c8>)
 80020d0:	6013      	str	r3, [r2, #0]
  g_axes.AXIS_Y = (g_axes.AXIS_Y)%2000 == 0 ? -g_axes.AXIS_Y : -100;
 80020d2:	4b44      	ldr	r3, [pc, #272]	@ (80021e4 <Reset_Motion_Values+0x1c8>)
 80020d4:	685a      	ldr	r2, [r3, #4]
 80020d6:	4b42      	ldr	r3, [pc, #264]	@ (80021e0 <Reset_Motion_Values+0x1c4>)
 80020d8:	fb83 1302 	smull	r1, r3, r3, r2
 80020dc:	11d9      	asrs	r1, r3, #7
 80020de:	17d3      	asrs	r3, r2, #31
 80020e0:	1acb      	subs	r3, r1, r3
 80020e2:	f44f 61fa 	mov.w	r1, #2000	@ 0x7d0
 80020e6:	fb01 f303 	mul.w	r3, r1, r3
 80020ea:	1ad3      	subs	r3, r2, r3
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d103      	bne.n	80020f8 <Reset_Motion_Values+0xdc>
 80020f0:	4b3c      	ldr	r3, [pc, #240]	@ (80021e4 <Reset_Motion_Values+0x1c8>)
 80020f2:	685b      	ldr	r3, [r3, #4]
 80020f4:	425b      	negs	r3, r3
 80020f6:	e001      	b.n	80020fc <Reset_Motion_Values+0xe0>
 80020f8:	f06f 0363 	mvn.w	r3, #99	@ 0x63
 80020fc:	4a39      	ldr	r2, [pc, #228]	@ (80021e4 <Reset_Motion_Values+0x1c8>)
 80020fe:	6053      	str	r3, [r2, #4]
  g_axes.AXIS_Z = (g_axes.AXIS_Z)%2000 == 0 ? -g_axes.AXIS_Z : 100;
 8002100:	4b38      	ldr	r3, [pc, #224]	@ (80021e4 <Reset_Motion_Values+0x1c8>)
 8002102:	689a      	ldr	r2, [r3, #8]
 8002104:	4b36      	ldr	r3, [pc, #216]	@ (80021e0 <Reset_Motion_Values+0x1c4>)
 8002106:	fb83 1302 	smull	r1, r3, r3, r2
 800210a:	11d9      	asrs	r1, r3, #7
 800210c:	17d3      	asrs	r3, r2, #31
 800210e:	1acb      	subs	r3, r1, r3
 8002110:	f44f 61fa 	mov.w	r1, #2000	@ 0x7d0
 8002114:	fb01 f303 	mul.w	r3, r1, r3
 8002118:	1ad3      	subs	r3, r2, r3
 800211a:	2b00      	cmp	r3, #0
 800211c:	d103      	bne.n	8002126 <Reset_Motion_Values+0x10a>
 800211e:	4b31      	ldr	r3, [pc, #196]	@ (80021e4 <Reset_Motion_Values+0x1c8>)
 8002120:	689b      	ldr	r3, [r3, #8]
 8002122:	425b      	negs	r3, r3
 8002124:	e000      	b.n	8002128 <Reset_Motion_Values+0x10c>
 8002126:	2364      	movs	r3, #100	@ 0x64
 8002128:	4a2e      	ldr	r2, [pc, #184]	@ (80021e4 <Reset_Motion_Values+0x1c8>)
 800212a:	6093      	str	r3, [r2, #8]
  m_axes.AXIS_X = (g_axes.AXIS_X)%2000 == 0 ? -m_axes.AXIS_X : 3;
 800212c:	4b2d      	ldr	r3, [pc, #180]	@ (80021e4 <Reset_Motion_Values+0x1c8>)
 800212e:	681a      	ldr	r2, [r3, #0]
 8002130:	4b2b      	ldr	r3, [pc, #172]	@ (80021e0 <Reset_Motion_Values+0x1c4>)
 8002132:	fb83 1302 	smull	r1, r3, r3, r2
 8002136:	11d9      	asrs	r1, r3, #7
 8002138:	17d3      	asrs	r3, r2, #31
 800213a:	1acb      	subs	r3, r1, r3
 800213c:	f44f 61fa 	mov.w	r1, #2000	@ 0x7d0
 8002140:	fb01 f303 	mul.w	r3, r1, r3
 8002144:	1ad3      	subs	r3, r2, r3
 8002146:	2b00      	cmp	r3, #0
 8002148:	d103      	bne.n	8002152 <Reset_Motion_Values+0x136>
 800214a:	4b27      	ldr	r3, [pc, #156]	@ (80021e8 <Reset_Motion_Values+0x1cc>)
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	425b      	negs	r3, r3
 8002150:	e000      	b.n	8002154 <Reset_Motion_Values+0x138>
 8002152:	2303      	movs	r3, #3
 8002154:	4a24      	ldr	r2, [pc, #144]	@ (80021e8 <Reset_Motion_Values+0x1cc>)
 8002156:	6013      	str	r3, [r2, #0]
  m_axes.AXIS_Y = (g_axes.AXIS_Y)%2000 == 0 ? -m_axes.AXIS_Y : -3;
 8002158:	4b22      	ldr	r3, [pc, #136]	@ (80021e4 <Reset_Motion_Values+0x1c8>)
 800215a:	685a      	ldr	r2, [r3, #4]
 800215c:	4b20      	ldr	r3, [pc, #128]	@ (80021e0 <Reset_Motion_Values+0x1c4>)
 800215e:	fb83 1302 	smull	r1, r3, r3, r2
 8002162:	11d9      	asrs	r1, r3, #7
 8002164:	17d3      	asrs	r3, r2, #31
 8002166:	1acb      	subs	r3, r1, r3
 8002168:	f44f 61fa 	mov.w	r1, #2000	@ 0x7d0
 800216c:	fb01 f303 	mul.w	r3, r1, r3
 8002170:	1ad3      	subs	r3, r2, r3
 8002172:	2b00      	cmp	r3, #0
 8002174:	d103      	bne.n	800217e <Reset_Motion_Values+0x162>
 8002176:	4b1c      	ldr	r3, [pc, #112]	@ (80021e8 <Reset_Motion_Values+0x1cc>)
 8002178:	685b      	ldr	r3, [r3, #4]
 800217a:	425b      	negs	r3, r3
 800217c:	e001      	b.n	8002182 <Reset_Motion_Values+0x166>
 800217e:	f06f 0302 	mvn.w	r3, #2
 8002182:	4a19      	ldr	r2, [pc, #100]	@ (80021e8 <Reset_Motion_Values+0x1cc>)
 8002184:	6053      	str	r3, [r2, #4]
  m_axes.AXIS_Z = (g_axes.AXIS_Z)%2000 == 0 ? -m_axes.AXIS_Z : 3;
 8002186:	4b17      	ldr	r3, [pc, #92]	@ (80021e4 <Reset_Motion_Values+0x1c8>)
 8002188:	689a      	ldr	r2, [r3, #8]
 800218a:	4b15      	ldr	r3, [pc, #84]	@ (80021e0 <Reset_Motion_Values+0x1c4>)
 800218c:	fb83 1302 	smull	r1, r3, r3, r2
 8002190:	11d9      	asrs	r1, r3, #7
 8002192:	17d3      	asrs	r3, r2, #31
 8002194:	1acb      	subs	r3, r1, r3
 8002196:	f44f 61fa 	mov.w	r1, #2000	@ 0x7d0
 800219a:	fb01 f303 	mul.w	r3, r1, r3
 800219e:	1ad3      	subs	r3, r2, r3
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d103      	bne.n	80021ac <Reset_Motion_Values+0x190>
 80021a4:	4b10      	ldr	r3, [pc, #64]	@ (80021e8 <Reset_Motion_Values+0x1cc>)
 80021a6:	689b      	ldr	r3, [r3, #8]
 80021a8:	425b      	negs	r3, r3
 80021aa:	e000      	b.n	80021ae <Reset_Motion_Values+0x192>
 80021ac:	2303      	movs	r3, #3
 80021ae:	4a0e      	ldr	r2, [pc, #56]	@ (80021e8 <Reset_Motion_Values+0x1cc>)
 80021b0:	6093      	str	r3, [r2, #8]
  q_axes.AXIS_X = -q_axes.AXIS_X;
 80021b2:	4b0e      	ldr	r3, [pc, #56]	@ (80021ec <Reset_Motion_Values+0x1d0>)
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	425b      	negs	r3, r3
 80021b8:	4a0c      	ldr	r2, [pc, #48]	@ (80021ec <Reset_Motion_Values+0x1d0>)
 80021ba:	6013      	str	r3, [r2, #0]
  q_axes.AXIS_Y = -q_axes.AXIS_Y;
 80021bc:	4b0b      	ldr	r3, [pc, #44]	@ (80021ec <Reset_Motion_Values+0x1d0>)
 80021be:	685b      	ldr	r3, [r3, #4]
 80021c0:	425b      	negs	r3, r3
 80021c2:	4a0a      	ldr	r2, [pc, #40]	@ (80021ec <Reset_Motion_Values+0x1d0>)
 80021c4:	6053      	str	r3, [r2, #4]
  q_axes.AXIS_Z = -q_axes.AXIS_Z;
 80021c6:	4b09      	ldr	r3, [pc, #36]	@ (80021ec <Reset_Motion_Values+0x1d0>)
 80021c8:	689b      	ldr	r3, [r3, #8]
 80021ca:	425b      	negs	r3, r3
 80021cc:	4a07      	ldr	r2, [pc, #28]	@ (80021ec <Reset_Motion_Values+0x1d0>)
 80021ce:	6093      	str	r3, [r2, #8]
}
 80021d0:	bf00      	nop
 80021d2:	46bd      	mov	sp, r7
 80021d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d8:	4770      	bx	lr
 80021da:	bf00      	nop
 80021dc:	20000290 	.word	0x20000290
 80021e0:	10624dd3 	.word	0x10624dd3
 80021e4:	2000029c 	.word	0x2000029c
 80021e8:	200002a8 	.word	0x200002a8
 80021ec:	200002b4 	.word	0x200002b4

080021f0 <BSP_PB_Callback>:
  * @brief  BSP Push Button callback
  * @param  Button Specifies the pin connected EXTI line
  * @retval None.
  */
void BSP_PB_Callback(Button_TypeDef Button)
{
 80021f0:	b480      	push	{r7}
 80021f2:	b083      	sub	sp, #12
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	4603      	mov	r3, r0
 80021f8:	71fb      	strb	r3, [r7, #7]
  /* Set the User Button flag */
  user_button_pressed = 1;
 80021fa:	4b04      	ldr	r3, [pc, #16]	@ (800220c <BSP_PB_Callback+0x1c>)
 80021fc:	2201      	movs	r2, #1
 80021fe:	701a      	strb	r2, [r3, #0]
}
 8002200:	bf00      	nop
 8002202:	370c      	adds	r7, #12
 8002204:	46bd      	mov	sp, r7
 8002206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220a:	4770      	bx	lr
 800220c:	20000246 	.word	0x20000246

08002210 <Add_HWServW2ST_Service>:
 * @brief  Add the 'HW' service (and the Environmental and AccGyr characteristics).
 * @param  None
 * @retval tBleStatus Status
 */
tBleStatus Add_HWServW2ST_Service(void)
{
 8002210:	b590      	push	{r4, r7, lr}
 8002212:	b08d      	sub	sp, #52	@ 0x34
 8002214:	af06      	add	r7, sp, #24
  tBleStatus ret;
  uint8_t uuid[16];

  /* Add_HWServW2ST_Service */
  COPY_HW_SENS_W2ST_SERVICE_UUID(uuid);
 8002216:	231b      	movs	r3, #27
 8002218:	713b      	strb	r3, [r7, #4]
 800221a:	23c5      	movs	r3, #197	@ 0xc5
 800221c:	717b      	strb	r3, [r7, #5]
 800221e:	23d5      	movs	r3, #213	@ 0xd5
 8002220:	71bb      	strb	r3, [r7, #6]
 8002222:	23a5      	movs	r3, #165	@ 0xa5
 8002224:	71fb      	strb	r3, [r7, #7]
 8002226:	2302      	movs	r3, #2
 8002228:	723b      	strb	r3, [r7, #8]
 800222a:	2300      	movs	r3, #0
 800222c:	727b      	strb	r3, [r7, #9]
 800222e:	23b4      	movs	r3, #180	@ 0xb4
 8002230:	72bb      	strb	r3, [r7, #10]
 8002232:	239a      	movs	r3, #154	@ 0x9a
 8002234:	72fb      	strb	r3, [r7, #11]
 8002236:	23e1      	movs	r3, #225	@ 0xe1
 8002238:	733b      	strb	r3, [r7, #12]
 800223a:	2311      	movs	r3, #17
 800223c:	737b      	strb	r3, [r7, #13]
 800223e:	2301      	movs	r3, #1
 8002240:	73bb      	strb	r3, [r7, #14]
 8002242:	2300      	movs	r3, #0
 8002244:	73fb      	strb	r3, [r7, #15]
 8002246:	2300      	movs	r3, #0
 8002248:	743b      	strb	r3, [r7, #16]
 800224a:	2300      	movs	r3, #0
 800224c:	747b      	strb	r3, [r7, #17]
 800224e:	2300      	movs	r3, #0
 8002250:	74bb      	strb	r3, [r7, #18]
 8002252:	2300      	movs	r3, #0
 8002254:	74fb      	strb	r3, [r7, #19]
  BLUENRG_memcpy(&service_uuid.Service_UUID_128, uuid, 16);
 8002256:	4b52      	ldr	r3, [pc, #328]	@ (80023a0 <Add_HWServW2ST_Service+0x190>)
 8002258:	461c      	mov	r4, r3
 800225a:	1d3b      	adds	r3, r7, #4
 800225c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800225e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  ret = aci_gatt_add_serv(UUID_TYPE_128, service_uuid.Service_UUID_128, PRIMARY_SERVICE,
 8002262:	4b50      	ldr	r3, [pc, #320]	@ (80023a4 <Add_HWServW2ST_Service+0x194>)
 8002264:	9300      	str	r3, [sp, #0]
 8002266:	2310      	movs	r3, #16
 8002268:	2201      	movs	r2, #1
 800226a:	494d      	ldr	r1, [pc, #308]	@ (80023a0 <Add_HWServW2ST_Service+0x190>)
 800226c:	2002      	movs	r0, #2
 800226e:	f007 fb2b 	bl	80098c8 <aci_gatt_add_serv>
 8002272:	4603      	mov	r3, r0
 8002274:	75fb      	strb	r3, [r7, #23]
                          1+3*5, &HWServW2STHandle);
  if (ret != BLE_STATUS_SUCCESS)
 8002276:	7dfb      	ldrb	r3, [r7, #23]
 8002278:	2b00      	cmp	r3, #0
 800227a:	d001      	beq.n	8002280 <Add_HWServW2ST_Service+0x70>
    return BLE_STATUS_ERROR;
 800227c:	2347      	movs	r3, #71	@ 0x47
 800227e:	e08a      	b.n	8002396 <Add_HWServW2ST_Service+0x186>

  /* Fill the Environmental BLE Characteristc */
  COPY_ENVIRONMENTAL_W2ST_CHAR_UUID(uuid);
 8002280:	231b      	movs	r3, #27
 8002282:	713b      	strb	r3, [r7, #4]
 8002284:	23c5      	movs	r3, #197	@ 0xc5
 8002286:	717b      	strb	r3, [r7, #5]
 8002288:	23d5      	movs	r3, #213	@ 0xd5
 800228a:	71bb      	strb	r3, [r7, #6]
 800228c:	23a5      	movs	r3, #165	@ 0xa5
 800228e:	71fb      	strb	r3, [r7, #7]
 8002290:	2302      	movs	r3, #2
 8002292:	723b      	strb	r3, [r7, #8]
 8002294:	2300      	movs	r3, #0
 8002296:	727b      	strb	r3, [r7, #9]
 8002298:	2336      	movs	r3, #54	@ 0x36
 800229a:	72bb      	strb	r3, [r7, #10]
 800229c:	23ac      	movs	r3, #172	@ 0xac
 800229e:	72fb      	strb	r3, [r7, #11]
 80022a0:	23e1      	movs	r3, #225	@ 0xe1
 80022a2:	733b      	strb	r3, [r7, #12]
 80022a4:	2311      	movs	r3, #17
 80022a6:	737b      	strb	r3, [r7, #13]
 80022a8:	2301      	movs	r3, #1
 80022aa:	73bb      	strb	r3, [r7, #14]
 80022ac:	2300      	movs	r3, #0
 80022ae:	73fb      	strb	r3, [r7, #15]
 80022b0:	2300      	movs	r3, #0
 80022b2:	743b      	strb	r3, [r7, #16]
 80022b4:	2300      	movs	r3, #0
 80022b6:	747b      	strb	r3, [r7, #17]
 80022b8:	2300      	movs	r3, #0
 80022ba:	74bb      	strb	r3, [r7, #18]
 80022bc:	2300      	movs	r3, #0
 80022be:	74fb      	strb	r3, [r7, #19]
  uuid[14] |= 0x04; /* One Temperature value*/
 80022c0:	7cbb      	ldrb	r3, [r7, #18]
 80022c2:	f043 0304 	orr.w	r3, r3, #4
 80022c6:	b2db      	uxtb	r3, r3
 80022c8:	74bb      	strb	r3, [r7, #18]
  uuid[14] |= 0x10; /* Pressure value*/
 80022ca:	7cbb      	ldrb	r3, [r7, #18]
 80022cc:	f043 0310 	orr.w	r3, r3, #16
 80022d0:	b2db      	uxtb	r3, r3
 80022d2:	74bb      	strb	r3, [r7, #18]
  BLUENRG_memcpy(&char_uuid.Char_UUID_128, uuid, 16);
 80022d4:	4b34      	ldr	r3, [pc, #208]	@ (80023a8 <Add_HWServW2ST_Service+0x198>)
 80022d6:	461c      	mov	r4, r3
 80022d8:	1d3b      	adds	r3, r7, #4
 80022da:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80022dc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  ret =  aci_gatt_add_char(HWServW2STHandle, UUID_TYPE_128, char_uuid.Char_UUID_128,
 80022e0:	4b30      	ldr	r3, [pc, #192]	@ (80023a4 <Add_HWServW2ST_Service+0x194>)
 80022e2:	8818      	ldrh	r0, [r3, #0]
 80022e4:	4b31      	ldr	r3, [pc, #196]	@ (80023ac <Add_HWServW2ST_Service+0x19c>)
 80022e6:	9305      	str	r3, [sp, #20]
 80022e8:	2300      	movs	r3, #0
 80022ea:	9304      	str	r3, [sp, #16]
 80022ec:	2310      	movs	r3, #16
 80022ee:	9303      	str	r3, [sp, #12]
 80022f0:	2304      	movs	r3, #4
 80022f2:	9302      	str	r3, [sp, #8]
 80022f4:	2300      	movs	r3, #0
 80022f6:	9301      	str	r3, [sp, #4]
 80022f8:	2312      	movs	r3, #18
 80022fa:	9300      	str	r3, [sp, #0]
 80022fc:	2308      	movs	r3, #8
 80022fe:	4a2a      	ldr	r2, [pc, #168]	@ (80023a8 <Add_HWServW2ST_Service+0x198>)
 8002300:	2102      	movs	r1, #2
 8002302:	f007 fb6a 	bl	80099da <aci_gatt_add_char>
 8002306:	4603      	mov	r3, r0
 8002308:	75fb      	strb	r3, [r7, #23]
                           2+2+4,
                           CHAR_PROP_NOTIFY|CHAR_PROP_READ,
                           ATTR_PERMISSION_NONE,
                           GATT_NOTIFY_READ_REQ_AND_WAIT_FOR_APPL_RESP,
                           16, 0, &EnvironmentalCharHandle);
  if (ret != BLE_STATUS_SUCCESS)
 800230a:	7dfb      	ldrb	r3, [r7, #23]
 800230c:	2b00      	cmp	r3, #0
 800230e:	d001      	beq.n	8002314 <Add_HWServW2ST_Service+0x104>
    return BLE_STATUS_ERROR;
 8002310:	2347      	movs	r3, #71	@ 0x47
 8002312:	e040      	b.n	8002396 <Add_HWServW2ST_Service+0x186>

  /* Fill the AccGyroMag BLE Characteristc */
  COPY_ACC_GYRO_MAG_W2ST_CHAR_UUID(uuid);
 8002314:	231b      	movs	r3, #27
 8002316:	713b      	strb	r3, [r7, #4]
 8002318:	23c5      	movs	r3, #197	@ 0xc5
 800231a:	717b      	strb	r3, [r7, #5]
 800231c:	23d5      	movs	r3, #213	@ 0xd5
 800231e:	71bb      	strb	r3, [r7, #6]
 8002320:	23a5      	movs	r3, #165	@ 0xa5
 8002322:	71fb      	strb	r3, [r7, #7]
 8002324:	2302      	movs	r3, #2
 8002326:	723b      	strb	r3, [r7, #8]
 8002328:	2300      	movs	r3, #0
 800232a:	727b      	strb	r3, [r7, #9]
 800232c:	2336      	movs	r3, #54	@ 0x36
 800232e:	72bb      	strb	r3, [r7, #10]
 8002330:	23ac      	movs	r3, #172	@ 0xac
 8002332:	72fb      	strb	r3, [r7, #11]
 8002334:	23e1      	movs	r3, #225	@ 0xe1
 8002336:	733b      	strb	r3, [r7, #12]
 8002338:	2311      	movs	r3, #17
 800233a:	737b      	strb	r3, [r7, #13]
 800233c:	2301      	movs	r3, #1
 800233e:	73bb      	strb	r3, [r7, #14]
 8002340:	2300      	movs	r3, #0
 8002342:	73fb      	strb	r3, [r7, #15]
 8002344:	2300      	movs	r3, #0
 8002346:	743b      	strb	r3, [r7, #16]
 8002348:	2300      	movs	r3, #0
 800234a:	747b      	strb	r3, [r7, #17]
 800234c:	23e0      	movs	r3, #224	@ 0xe0
 800234e:	74bb      	strb	r3, [r7, #18]
 8002350:	2300      	movs	r3, #0
 8002352:	74fb      	strb	r3, [r7, #19]
  BLUENRG_memcpy(&char_uuid.Char_UUID_128, uuid, 16);
 8002354:	4b14      	ldr	r3, [pc, #80]	@ (80023a8 <Add_HWServW2ST_Service+0x198>)
 8002356:	461c      	mov	r4, r3
 8002358:	1d3b      	adds	r3, r7, #4
 800235a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800235c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  ret =  aci_gatt_add_char(HWServW2STHandle, UUID_TYPE_128, char_uuid.Char_UUID_128,
 8002360:	4b10      	ldr	r3, [pc, #64]	@ (80023a4 <Add_HWServW2ST_Service+0x194>)
 8002362:	8818      	ldrh	r0, [r3, #0]
 8002364:	4b12      	ldr	r3, [pc, #72]	@ (80023b0 <Add_HWServW2ST_Service+0x1a0>)
 8002366:	9305      	str	r3, [sp, #20]
 8002368:	2300      	movs	r3, #0
 800236a:	9304      	str	r3, [sp, #16]
 800236c:	2310      	movs	r3, #16
 800236e:	9303      	str	r3, [sp, #12]
 8002370:	2304      	movs	r3, #4
 8002372:	9302      	str	r3, [sp, #8]
 8002374:	2300      	movs	r3, #0
 8002376:	9301      	str	r3, [sp, #4]
 8002378:	2310      	movs	r3, #16
 800237a:	9300      	str	r3, [sp, #0]
 800237c:	2314      	movs	r3, #20
 800237e:	4a0a      	ldr	r2, [pc, #40]	@ (80023a8 <Add_HWServW2ST_Service+0x198>)
 8002380:	2102      	movs	r1, #2
 8002382:	f007 fb2a 	bl	80099da <aci_gatt_add_char>
 8002386:	4603      	mov	r3, r0
 8002388:	75fb      	strb	r3, [r7, #23]
                           2+3*3*2,
                           CHAR_PROP_NOTIFY,
                           ATTR_PERMISSION_NONE,
                           GATT_NOTIFY_READ_REQ_AND_WAIT_FOR_APPL_RESP,
                           16, 0, &AccGyroMagCharHandle);
  if (ret != BLE_STATUS_SUCCESS)
 800238a:	7dfb      	ldrb	r3, [r7, #23]
 800238c:	2b00      	cmp	r3, #0
 800238e:	d001      	beq.n	8002394 <Add_HWServW2ST_Service+0x184>
    return BLE_STATUS_ERROR;
 8002390:	2347      	movs	r3, #71	@ 0x47
 8002392:	e000      	b.n	8002396 <Add_HWServW2ST_Service+0x186>

  return BLE_STATUS_SUCCESS;
 8002394:	2300      	movs	r3, #0
}
 8002396:	4618      	mov	r0, r3
 8002398:	371c      	adds	r7, #28
 800239a:	46bd      	mov	sp, r7
 800239c:	bd90      	pop	{r4, r7, pc}
 800239e:	bf00      	nop
 80023a0:	20000258 	.word	0x20000258
 80023a4:	2000024c 	.word	0x2000024c
 80023a8:	20000268 	.word	0x20000268
 80023ac:	2000024e 	.word	0x2000024e
 80023b0:	20000250 	.word	0x20000250

080023b4 <Add_SWServW2ST_Service>:
 * @brief  Add the SW Feature service using a vendor specific profile
 * @param  None
 * @retval tBleStatus Status
 */
tBleStatus Add_SWServW2ST_Service(void)
{
 80023b4:	b590      	push	{r4, r7, lr}
 80023b6:	b08d      	sub	sp, #52	@ 0x34
 80023b8:	af06      	add	r7, sp, #24
  tBleStatus ret;
  int32_t NumberOfRecords=2;
 80023ba:	2302      	movs	r3, #2
 80023bc:	617b      	str	r3, [r7, #20]
  uint8_t uuid[16];

  COPY_SW_SENS_W2ST_SERVICE_UUID(uuid);
 80023be:	231b      	movs	r3, #27
 80023c0:	703b      	strb	r3, [r7, #0]
 80023c2:	23c5      	movs	r3, #197	@ 0xc5
 80023c4:	707b      	strb	r3, [r7, #1]
 80023c6:	23d5      	movs	r3, #213	@ 0xd5
 80023c8:	70bb      	strb	r3, [r7, #2]
 80023ca:	23a5      	movs	r3, #165	@ 0xa5
 80023cc:	70fb      	strb	r3, [r7, #3]
 80023ce:	2302      	movs	r3, #2
 80023d0:	713b      	strb	r3, [r7, #4]
 80023d2:	2300      	movs	r3, #0
 80023d4:	717b      	strb	r3, [r7, #5]
 80023d6:	23b4      	movs	r3, #180	@ 0xb4
 80023d8:	71bb      	strb	r3, [r7, #6]
 80023da:	239a      	movs	r3, #154	@ 0x9a
 80023dc:	71fb      	strb	r3, [r7, #7]
 80023de:	23e1      	movs	r3, #225	@ 0xe1
 80023e0:	723b      	strb	r3, [r7, #8]
 80023e2:	2311      	movs	r3, #17
 80023e4:	727b      	strb	r3, [r7, #9]
 80023e6:	2302      	movs	r3, #2
 80023e8:	72bb      	strb	r3, [r7, #10]
 80023ea:	2300      	movs	r3, #0
 80023ec:	72fb      	strb	r3, [r7, #11]
 80023ee:	2300      	movs	r3, #0
 80023f0:	733b      	strb	r3, [r7, #12]
 80023f2:	2300      	movs	r3, #0
 80023f4:	737b      	strb	r3, [r7, #13]
 80023f6:	2300      	movs	r3, #0
 80023f8:	73bb      	strb	r3, [r7, #14]
 80023fa:	2300      	movs	r3, #0
 80023fc:	73fb      	strb	r3, [r7, #15]
  BLUENRG_memcpy(&service_uuid.Service_UUID_128, uuid, 16);
 80023fe:	4b51      	ldr	r3, [pc, #324]	@ (8002544 <Add_SWServW2ST_Service+0x190>)
 8002400:	461c      	mov	r4, r3
 8002402:	463b      	mov	r3, r7
 8002404:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002406:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  ret = aci_gatt_add_serv(UUID_TYPE_128, service_uuid.Service_UUID_128, PRIMARY_SERVICE,
 800240a:	697b      	ldr	r3, [r7, #20]
 800240c:	b2db      	uxtb	r3, r3
 800240e:	461a      	mov	r2, r3
 8002410:	0052      	lsls	r2, r2, #1
 8002412:	4413      	add	r3, r2
 8002414:	b2db      	uxtb	r3, r3
 8002416:	3301      	adds	r3, #1
 8002418:	b2db      	uxtb	r3, r3
 800241a:	4a4b      	ldr	r2, [pc, #300]	@ (8002548 <Add_SWServW2ST_Service+0x194>)
 800241c:	9200      	str	r2, [sp, #0]
 800241e:	2201      	movs	r2, #1
 8002420:	4948      	ldr	r1, [pc, #288]	@ (8002544 <Add_SWServW2ST_Service+0x190>)
 8002422:	2002      	movs	r0, #2
 8002424:	f007 fa50 	bl	80098c8 <aci_gatt_add_serv>
 8002428:	4603      	mov	r3, r0
 800242a:	74fb      	strb	r3, [r7, #19]
                          1+3*NumberOfRecords, &SWServW2STHandle);

  if (ret != BLE_STATUS_SUCCESS) {
 800242c:	7cfb      	ldrb	r3, [r7, #19]
 800242e:	2b00      	cmp	r3, #0
 8002430:	d17d      	bne.n	800252e <Add_SWServW2ST_Service+0x17a>
    goto fail;
  }

  COPY_QUATERNIONS_W2ST_CHAR_UUID(uuid);
 8002432:	231b      	movs	r3, #27
 8002434:	703b      	strb	r3, [r7, #0]
 8002436:	23c5      	movs	r3, #197	@ 0xc5
 8002438:	707b      	strb	r3, [r7, #1]
 800243a:	23d5      	movs	r3, #213	@ 0xd5
 800243c:	70bb      	strb	r3, [r7, #2]
 800243e:	23a5      	movs	r3, #165	@ 0xa5
 8002440:	70fb      	strb	r3, [r7, #3]
 8002442:	2302      	movs	r3, #2
 8002444:	713b      	strb	r3, [r7, #4]
 8002446:	2300      	movs	r3, #0
 8002448:	717b      	strb	r3, [r7, #5]
 800244a:	2336      	movs	r3, #54	@ 0x36
 800244c:	71bb      	strb	r3, [r7, #6]
 800244e:	23ac      	movs	r3, #172	@ 0xac
 8002450:	71fb      	strb	r3, [r7, #7]
 8002452:	23e1      	movs	r3, #225	@ 0xe1
 8002454:	723b      	strb	r3, [r7, #8]
 8002456:	2311      	movs	r3, #17
 8002458:	727b      	strb	r3, [r7, #9]
 800245a:	2301      	movs	r3, #1
 800245c:	72bb      	strb	r3, [r7, #10]
 800245e:	2300      	movs	r3, #0
 8002460:	72fb      	strb	r3, [r7, #11]
 8002462:	2300      	movs	r3, #0
 8002464:	733b      	strb	r3, [r7, #12]
 8002466:	2301      	movs	r3, #1
 8002468:	737b      	strb	r3, [r7, #13]
 800246a:	2300      	movs	r3, #0
 800246c:	73bb      	strb	r3, [r7, #14]
 800246e:	2300      	movs	r3, #0
 8002470:	73fb      	strb	r3, [r7, #15]
  BLUENRG_memcpy(&char_uuid.Char_UUID_128, uuid, 16);
 8002472:	4b36      	ldr	r3, [pc, #216]	@ (800254c <Add_SWServW2ST_Service+0x198>)
 8002474:	461c      	mov	r4, r3
 8002476:	463b      	mov	r3, r7
 8002478:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800247a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  ret =  aci_gatt_add_char(SWServW2STHandle, UUID_TYPE_128, char_uuid.Char_UUID_128,
 800247e:	4b32      	ldr	r3, [pc, #200]	@ (8002548 <Add_SWServW2ST_Service+0x194>)
 8002480:	8818      	ldrh	r0, [r3, #0]
 8002482:	4b33      	ldr	r3, [pc, #204]	@ (8002550 <Add_SWServW2ST_Service+0x19c>)
 8002484:	9305      	str	r3, [sp, #20]
 8002486:	2300      	movs	r3, #0
 8002488:	9304      	str	r3, [sp, #16]
 800248a:	2310      	movs	r3, #16
 800248c:	9303      	str	r3, [sp, #12]
 800248e:	2304      	movs	r3, #4
 8002490:	9302      	str	r3, [sp, #8]
 8002492:	2300      	movs	r3, #0
 8002494:	9301      	str	r3, [sp, #4]
 8002496:	2310      	movs	r3, #16
 8002498:	9300      	str	r3, [sp, #0]
 800249a:	2308      	movs	r3, #8
 800249c:	4a2b      	ldr	r2, [pc, #172]	@ (800254c <Add_SWServW2ST_Service+0x198>)
 800249e:	2102      	movs	r1, #2
 80024a0:	f007 fa9b 	bl	80099da <aci_gatt_add_char>
 80024a4:	4603      	mov	r3, r0
 80024a6:	74fb      	strb	r3, [r7, #19]
                           CHAR_PROP_NOTIFY,
                           ATTR_PERMISSION_NONE,
                           GATT_NOTIFY_READ_REQ_AND_WAIT_FOR_APPL_RESP,
                           16, 0, &QuaternionsCharHandle);

  if (ret != BLE_STATUS_SUCCESS) {
 80024a8:	7cfb      	ldrb	r3, [r7, #19]
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d141      	bne.n	8002532 <Add_SWServW2ST_Service+0x17e>
    goto fail;
  }

  COPY_USER_CHAR_UUID(uuid);
 80024ae:	230f      	movs	r3, #15
 80024b0:	703b      	strb	r3, [r7, #0]
 80024b2:	230e      	movs	r3, #14
 80024b4:	707b      	strb	r3, [r7, #1]
 80024b6:	230d      	movs	r3, #13
 80024b8:	70bb      	strb	r3, [r7, #2]
 80024ba:	230c      	movs	r3, #12
 80024bc:	70fb      	strb	r3, [r7, #3]
 80024be:	230b      	movs	r3, #11
 80024c0:	713b      	strb	r3, [r7, #4]
 80024c2:	230a      	movs	r3, #10
 80024c4:	717b      	strb	r3, [r7, #5]
 80024c6:	2309      	movs	r3, #9
 80024c8:	71bb      	strb	r3, [r7, #6]
 80024ca:	2308      	movs	r3, #8
 80024cc:	71fb      	strb	r3, [r7, #7]
 80024ce:	2307      	movs	r3, #7
 80024d0:	723b      	strb	r3, [r7, #8]
 80024d2:	2306      	movs	r3, #6
 80024d4:	727b      	strb	r3, [r7, #9]
 80024d6:	2305      	movs	r3, #5
 80024d8:	72bb      	strb	r3, [r7, #10]
 80024da:	2304      	movs	r3, #4
 80024dc:	72fb      	strb	r3, [r7, #11]
 80024de:	2303      	movs	r3, #3
 80024e0:	733b      	strb	r3, [r7, #12]
 80024e2:	2302      	movs	r3, #2
 80024e4:	737b      	strb	r3, [r7, #13]
 80024e6:	2301      	movs	r3, #1
 80024e8:	73bb      	strb	r3, [r7, #14]
 80024ea:	2300      	movs	r3, #0
 80024ec:	73fb      	strb	r3, [r7, #15]
  BLUENRG_memcpy(&user_char_uuid.Char_UUID_128, uuid, 16);
 80024ee:	4b19      	ldr	r3, [pc, #100]	@ (8002554 <Add_SWServW2ST_Service+0x1a0>)
 80024f0:	461c      	mov	r4, r3
 80024f2:	463b      	mov	r3, r7
 80024f4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80024f6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  ret = aci_gatt_add_char(SWServW2STHandle, UUID_TYPE_128, char_uuid.Char_UUID_128,
 80024fa:	4b13      	ldr	r3, [pc, #76]	@ (8002548 <Add_SWServW2ST_Service+0x194>)
 80024fc:	8818      	ldrh	r0, [r3, #0]
 80024fe:	4b16      	ldr	r3, [pc, #88]	@ (8002558 <Add_SWServW2ST_Service+0x1a4>)
 8002500:	9305      	str	r3, [sp, #20]
 8002502:	2300      	movs	r3, #0
 8002504:	9304      	str	r3, [sp, #16]
 8002506:	2310      	movs	r3, #16
 8002508:	9303      	str	r3, [sp, #12]
 800250a:	2301      	movs	r3, #1
 800250c:	9302      	str	r3, [sp, #8]
 800250e:	2300      	movs	r3, #0
 8002510:	9301      	str	r3, [sp, #4]
 8002512:	230c      	movs	r3, #12
 8002514:	9300      	str	r3, [sp, #0]
 8002516:	2301      	movs	r3, #1
 8002518:	4a0c      	ldr	r2, [pc, #48]	@ (800254c <Add_SWServW2ST_Service+0x198>)
 800251a:	2102      	movs	r1, #2
 800251c:	f007 fa5d 	bl	80099da <aci_gatt_add_char>
 8002520:	4603      	mov	r3, r0
 8002522:	74fb      	strb	r3, [r7, #19]
		  	  	  	  	  1,
						  CHAR_PROP_WRITE | CHAR_PROP_WRITE_WITHOUT_RESP,
						  ATTR_PERMISSION_NONE,
						  GATT_NOTIFY_ATTRIBUTE_WRITE,
						  16, 0, &UserCharHandle);
  if(ret != BLE_STATUS_SUCCESS){
 8002524:	7cfb      	ldrb	r3, [r7, #19]
 8002526:	2b00      	cmp	r3, #0
 8002528:	d105      	bne.n	8002536 <Add_SWServW2ST_Service+0x182>
	  goto fail;
  }
//
  return BLE_STATUS_SUCCESS;
 800252a:	2300      	movs	r3, #0
 800252c:	e005      	b.n	800253a <Add_SWServW2ST_Service+0x186>
    goto fail;
 800252e:	bf00      	nop
 8002530:	e002      	b.n	8002538 <Add_SWServW2ST_Service+0x184>
    goto fail;
 8002532:	bf00      	nop
 8002534:	e000      	b.n	8002538 <Add_SWServW2ST_Service+0x184>
	  goto fail;
 8002536:	bf00      	nop

fail:
  return BLE_STATUS_ERROR;
 8002538:	2347      	movs	r3, #71	@ 0x47
}
 800253a:	4618      	mov	r0, r3
 800253c:	371c      	adds	r7, #28
 800253e:	46bd      	mov	sp, r7
 8002540:	bd90      	pop	{r4, r7, pc}
 8002542:	bf00      	nop
 8002544:	20000258 	.word	0x20000258
 8002548:	20000252 	.word	0x20000252
 800254c:	20000268 	.word	0x20000268
 8002550:	20000254 	.word	0x20000254
 8002554:	20000278 	.word	0x20000278
 8002558:	20000256 	.word	0x20000256

0800255c <Acc_Update>:
 * @brief  Update acceleration characteristic value
 * @param  AxesRaw_t structure containing acceleration value in mg.
 * @retval tBleStatus Status
 */
tBleStatus Acc_Update(AxesRaw_t *x_axes, AxesRaw_t *g_axes, AxesRaw_t *m_axes)
{
 800255c:	b580      	push	{r7, lr}
 800255e:	b08c      	sub	sp, #48	@ 0x30
 8002560:	af02      	add	r7, sp, #8
 8002562:	60f8      	str	r0, [r7, #12]
 8002564:	60b9      	str	r1, [r7, #8]
 8002566:	607a      	str	r2, [r7, #4]
  uint8_t buff[2+2*3*3];
  tBleStatus ret;

  HOST_TO_LE_16(buff,(HAL_GetTick()>>3));
 8002568:	f002 f982 	bl	8004870 <HAL_GetTick>
 800256c:	4603      	mov	r3, r0
 800256e:	08db      	lsrs	r3, r3, #3
 8002570:	b2db      	uxtb	r3, r3
 8002572:	743b      	strb	r3, [r7, #16]
 8002574:	f002 f97c 	bl	8004870 <HAL_GetTick>
 8002578:	4603      	mov	r3, r0
 800257a:	0adb      	lsrs	r3, r3, #11
 800257c:	b2db      	uxtb	r3, r3
 800257e:	747b      	strb	r3, [r7, #17]

  HOST_TO_LE_16(buff+2,-x_axes->AXIS_Y);
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	685b      	ldr	r3, [r3, #4]
 8002584:	b2db      	uxtb	r3, r3
 8002586:	425b      	negs	r3, r3
 8002588:	b2db      	uxtb	r3, r3
 800258a:	74bb      	strb	r3, [r7, #18]
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	685b      	ldr	r3, [r3, #4]
 8002590:	425b      	negs	r3, r3
 8002592:	121b      	asrs	r3, r3, #8
 8002594:	b2db      	uxtb	r3, r3
 8002596:	74fb      	strb	r3, [r7, #19]
  HOST_TO_LE_16(buff+4, x_axes->AXIS_X);
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	b2db      	uxtb	r3, r3
 800259e:	753b      	strb	r3, [r7, #20]
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	121b      	asrs	r3, r3, #8
 80025a6:	b2db      	uxtb	r3, r3
 80025a8:	757b      	strb	r3, [r7, #21]
  HOST_TO_LE_16(buff+6,-x_axes->AXIS_Z);
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	689b      	ldr	r3, [r3, #8]
 80025ae:	b2db      	uxtb	r3, r3
 80025b0:	425b      	negs	r3, r3
 80025b2:	b2db      	uxtb	r3, r3
 80025b4:	75bb      	strb	r3, [r7, #22]
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	689b      	ldr	r3, [r3, #8]
 80025ba:	425b      	negs	r3, r3
 80025bc:	121b      	asrs	r3, r3, #8
 80025be:	b2db      	uxtb	r3, r3
 80025c0:	75fb      	strb	r3, [r7, #23]

  HOST_TO_LE_16(buff+8,g_axes->AXIS_Y);
 80025c2:	68bb      	ldr	r3, [r7, #8]
 80025c4:	685b      	ldr	r3, [r3, #4]
 80025c6:	b2db      	uxtb	r3, r3
 80025c8:	763b      	strb	r3, [r7, #24]
 80025ca:	68bb      	ldr	r3, [r7, #8]
 80025cc:	685b      	ldr	r3, [r3, #4]
 80025ce:	121b      	asrs	r3, r3, #8
 80025d0:	b2db      	uxtb	r3, r3
 80025d2:	767b      	strb	r3, [r7, #25]
  HOST_TO_LE_16(buff+10,g_axes->AXIS_X);
 80025d4:	68bb      	ldr	r3, [r7, #8]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	b2db      	uxtb	r3, r3
 80025da:	76bb      	strb	r3, [r7, #26]
 80025dc:	68bb      	ldr	r3, [r7, #8]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	121b      	asrs	r3, r3, #8
 80025e2:	b2db      	uxtb	r3, r3
 80025e4:	76fb      	strb	r3, [r7, #27]
  HOST_TO_LE_16(buff+12,g_axes->AXIS_Z);
 80025e6:	68bb      	ldr	r3, [r7, #8]
 80025e8:	689b      	ldr	r3, [r3, #8]
 80025ea:	b2db      	uxtb	r3, r3
 80025ec:	773b      	strb	r3, [r7, #28]
 80025ee:	68bb      	ldr	r3, [r7, #8]
 80025f0:	689b      	ldr	r3, [r3, #8]
 80025f2:	121b      	asrs	r3, r3, #8
 80025f4:	b2db      	uxtb	r3, r3
 80025f6:	777b      	strb	r3, [r7, #29]

  HOST_TO_LE_16(buff+14,m_axes->AXIS_Y);
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	685b      	ldr	r3, [r3, #4]
 80025fc:	b2db      	uxtb	r3, r3
 80025fe:	77bb      	strb	r3, [r7, #30]
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	685b      	ldr	r3, [r3, #4]
 8002604:	121b      	asrs	r3, r3, #8
 8002606:	b2db      	uxtb	r3, r3
 8002608:	77fb      	strb	r3, [r7, #31]
  HOST_TO_LE_16(buff+16,m_axes->AXIS_X);
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	b2db      	uxtb	r3, r3
 8002610:	f887 3020 	strb.w	r3, [r7, #32]
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	121b      	asrs	r3, r3, #8
 800261a:	b2db      	uxtb	r3, r3
 800261c:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
  HOST_TO_LE_16(buff+18,m_axes->AXIS_Z);
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	689b      	ldr	r3, [r3, #8]
 8002624:	b2db      	uxtb	r3, r3
 8002626:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	689b      	ldr	r3, [r3, #8]
 800262e:	121b      	asrs	r3, r3, #8
 8002630:	b2db      	uxtb	r3, r3
 8002632:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  ret = aci_gatt_update_char_value(HWServW2STHandle, AccGyroMagCharHandle,
 8002636:	4b0c      	ldr	r3, [pc, #48]	@ (8002668 <Acc_Update+0x10c>)
 8002638:	8818      	ldrh	r0, [r3, #0]
 800263a:	4b0c      	ldr	r3, [pc, #48]	@ (800266c <Acc_Update+0x110>)
 800263c:	8819      	ldrh	r1, [r3, #0]
 800263e:	f107 0310 	add.w	r3, r7, #16
 8002642:	9300      	str	r3, [sp, #0]
 8002644:	2314      	movs	r3, #20
 8002646:	2200      	movs	r2, #0
 8002648:	f007 fa92 	bl	8009b70 <aci_gatt_update_char_value>
 800264c:	4603      	mov	r3, r0
 800264e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				   0, 2+2*3*3, buff);
  if (ret != BLE_STATUS_SUCCESS){
 8002652:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002656:	2b00      	cmp	r3, #0
 8002658:	d001      	beq.n	800265e <Acc_Update+0x102>
    PRINTF("Error while updating Acceleration characteristic: 0x%02X\n",ret) ;
    return BLE_STATUS_ERROR ;
 800265a:	2347      	movs	r3, #71	@ 0x47
 800265c:	e000      	b.n	8002660 <Acc_Update+0x104>
  }

  return BLE_STATUS_SUCCESS;
 800265e:	2300      	movs	r3, #0
}
 8002660:	4618      	mov	r0, r3
 8002662:	3728      	adds	r7, #40	@ 0x28
 8002664:	46bd      	mov	sp, r7
 8002666:	bd80      	pop	{r7, pc}
 8002668:	2000024c 	.word	0x2000024c
 800266c:	20000250 	.word	0x20000250

08002670 <Quat_Update>:
 * @brief  Update quaternions characteristic value
 * @param  SensorAxes_t *data Structure containing the quaterions
 * @retval tBleStatus      Status
 */
tBleStatus Quat_Update(AxesRaw_t *data)
{
 8002670:	b580      	push	{r7, lr}
 8002672:	b088      	sub	sp, #32
 8002674:	af02      	add	r7, sp, #8
 8002676:	6078      	str	r0, [r7, #4]
  tBleStatus ret;
  uint8_t buff[2+6*SEND_N_QUATERNIONS];

  HOST_TO_LE_16(buff,(HAL_GetTick()>>3));
 8002678:	f002 f8fa 	bl	8004870 <HAL_GetTick>
 800267c:	4603      	mov	r3, r0
 800267e:	08db      	lsrs	r3, r3, #3
 8002680:	b2db      	uxtb	r3, r3
 8002682:	733b      	strb	r3, [r7, #12]
 8002684:	f002 f8f4 	bl	8004870 <HAL_GetTick>
 8002688:	4603      	mov	r3, r0
 800268a:	0adb      	lsrs	r3, r3, #11
 800268c:	b2db      	uxtb	r3, r3
 800268e:	737b      	strb	r3, [r7, #13]

#if SEND_N_QUATERNIONS == 1
  HOST_TO_LE_16(buff+2,data[0].AXIS_X);
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	b2db      	uxtb	r3, r3
 8002696:	73bb      	strb	r3, [r7, #14]
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	121b      	asrs	r3, r3, #8
 800269e:	b2db      	uxtb	r3, r3
 80026a0:	73fb      	strb	r3, [r7, #15]
  HOST_TO_LE_16(buff+4,data[0].AXIS_Y);
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	685b      	ldr	r3, [r3, #4]
 80026a6:	b2db      	uxtb	r3, r3
 80026a8:	743b      	strb	r3, [r7, #16]
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	685b      	ldr	r3, [r3, #4]
 80026ae:	121b      	asrs	r3, r3, #8
 80026b0:	b2db      	uxtb	r3, r3
 80026b2:	747b      	strb	r3, [r7, #17]
  HOST_TO_LE_16(buff+6,data[0].AXIS_Z);
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	689b      	ldr	r3, [r3, #8]
 80026b8:	b2db      	uxtb	r3, r3
 80026ba:	74bb      	strb	r3, [r7, #18]
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	689b      	ldr	r3, [r3, #8]
 80026c0:	121b      	asrs	r3, r3, #8
 80026c2:	b2db      	uxtb	r3, r3
 80026c4:	74fb      	strb	r3, [r7, #19]
  HOST_TO_LE_16(buff+18,data[2].AXIS_Z);
#else
#error SEND_N_QUATERNIONS could be only 1,2,3
#endif

  ret = aci_gatt_update_char_value(SWServW2STHandle, QuaternionsCharHandle,
 80026c6:	4b0b      	ldr	r3, [pc, #44]	@ (80026f4 <Quat_Update+0x84>)
 80026c8:	8818      	ldrh	r0, [r3, #0]
 80026ca:	4b0b      	ldr	r3, [pc, #44]	@ (80026f8 <Quat_Update+0x88>)
 80026cc:	8819      	ldrh	r1, [r3, #0]
 80026ce:	f107 030c 	add.w	r3, r7, #12
 80026d2:	9300      	str	r3, [sp, #0]
 80026d4:	2308      	movs	r3, #8
 80026d6:	2200      	movs	r2, #0
 80026d8:	f007 fa4a 	bl	8009b70 <aci_gatt_update_char_value>
 80026dc:	4603      	mov	r3, r0
 80026de:	75fb      	strb	r3, [r7, #23]
				   0, 2+6*SEND_N_QUATERNIONS, buff);
  if (ret != BLE_STATUS_SUCCESS){
 80026e0:	7dfb      	ldrb	r3, [r7, #23]
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d001      	beq.n	80026ea <Quat_Update+0x7a>
    PRINTF("Error while updating Sensor Fusion characteristic: 0x%02X\n",ret) ;
    return BLE_STATUS_ERROR ;
 80026e6:	2347      	movs	r3, #71	@ 0x47
 80026e8:	e000      	b.n	80026ec <Quat_Update+0x7c>
  }

  return BLE_STATUS_SUCCESS;
 80026ea:	2300      	movs	r3, #0
}
 80026ec:	4618      	mov	r0, r3
 80026ee:	3718      	adds	r7, #24
 80026f0:	46bd      	mov	sp, r7
 80026f2:	bd80      	pop	{r7, pc}
 80026f4:	20000252 	.word	0x20000252
 80026f8:	20000254 	.word	0x20000254

080026fc <Read_Request_CB>:
* Description    : Update the sensor values.
* Input          : Handle of the characteristic to update.
* Return         : None.
*******************************************************************************/
void Read_Request_CB(uint16_t handle)
{
 80026fc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002700:	b08e      	sub	sp, #56	@ 0x38
 8002702:	af00      	add	r7, sp, #0
 8002704:	4603      	mov	r3, r0
 8002706:	84fb      	strh	r3, [r7, #38]	@ 0x26
  tBleStatus ret;

  if(handle == AccGyroMagCharHandle + 1)
 8002708:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 800270a:	4b57      	ldr	r3, [pc, #348]	@ (8002868 <Read_Request_CB+0x16c>)
 800270c:	881b      	ldrh	r3, [r3, #0]
 800270e:	3301      	adds	r3, #1
 8002710:	429a      	cmp	r2, r3
 8002712:	d105      	bne.n	8002720 <Read_Request_CB+0x24>
  {
    Acc_Update(&x_axes, &g_axes, &m_axes);
 8002714:	4a55      	ldr	r2, [pc, #340]	@ (800286c <Read_Request_CB+0x170>)
 8002716:	4956      	ldr	r1, [pc, #344]	@ (8002870 <Read_Request_CB+0x174>)
 8002718:	4856      	ldr	r0, [pc, #344]	@ (8002874 <Read_Request_CB+0x178>)
 800271a:	f7ff ff1f 	bl	800255c <Acc_Update>
 800271e:	e091      	b.n	8002844 <Read_Request_CB+0x148>
  }
  else if (handle == EnvironmentalCharHandle + 1)
 8002720:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8002722:	4b55      	ldr	r3, [pc, #340]	@ (8002878 <Read_Request_CB+0x17c>)
 8002724:	881b      	ldrh	r3, [r3, #0]
 8002726:	3301      	adds	r3, #1
 8002728:	429a      	cmp	r2, r3
 800272a:	f040 808b 	bne.w	8002844 <Read_Request_CB+0x148>
  {
    float data_t, data_p;
    data_t = 27.0 + ((uint64_t)rand()*5)/RAND_MAX; //T sensor emulation
 800272e:	f008 f87b 	bl	800a828 <rand>
 8002732:	4603      	mov	r3, r0
 8002734:	17da      	asrs	r2, r3, #31
 8002736:	61bb      	str	r3, [r7, #24]
 8002738:	61fa      	str	r2, [r7, #28]
 800273a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800273e:	f04f 0000 	mov.w	r0, #0
 8002742:	f04f 0100 	mov.w	r1, #0
 8002746:	0099      	lsls	r1, r3, #2
 8002748:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 800274c:	0090      	lsls	r0, r2, #2
 800274e:	4602      	mov	r2, r0
 8002750:	460b      	mov	r3, r1
 8002752:	69b9      	ldr	r1, [r7, #24]
 8002754:	1851      	adds	r1, r2, r1
 8002756:	6139      	str	r1, [r7, #16]
 8002758:	69f9      	ldr	r1, [r7, #28]
 800275a:	eb43 0101 	adc.w	r1, r3, r1
 800275e:	6179      	str	r1, [r7, #20]
 8002760:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 8002764:	f04f 0300 	mov.w	r3, #0
 8002768:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800276c:	f7fe fa8c 	bl	8000c88 <__aeabi_uldivmod>
 8002770:	4602      	mov	r2, r0
 8002772:	460b      	mov	r3, r1
 8002774:	4610      	mov	r0, r2
 8002776:	4619      	mov	r1, r3
 8002778:	f7fd ff08 	bl	800058c <__aeabi_ul2d>
 800277c:	f04f 0200 	mov.w	r2, #0
 8002780:	4b3e      	ldr	r3, [pc, #248]	@ (800287c <Read_Request_CB+0x180>)
 8002782:	f7fd fd83 	bl	800028c <__adddf3>
 8002786:	4602      	mov	r2, r0
 8002788:	460b      	mov	r3, r1
 800278a:	4610      	mov	r0, r2
 800278c:	4619      	mov	r1, r3
 800278e:	f7fe fa2b 	bl	8000be8 <__aeabi_d2f>
 8002792:	4603      	mov	r3, r0
 8002794:	637b      	str	r3, [r7, #52]	@ 0x34
    data_p = 1000.0 + ((uint64_t)rand()*100)/RAND_MAX; //P sensor emulation
 8002796:	f008 f847 	bl	800a828 <rand>
 800279a:	4603      	mov	r3, r0
 800279c:	17da      	asrs	r2, r3, #31
 800279e:	4698      	mov	r8, r3
 80027a0:	4691      	mov	r9, r2
 80027a2:	4642      	mov	r2, r8
 80027a4:	464b      	mov	r3, r9
 80027a6:	1891      	adds	r1, r2, r2
 80027a8:	6039      	str	r1, [r7, #0]
 80027aa:	415b      	adcs	r3, r3
 80027ac:	607b      	str	r3, [r7, #4]
 80027ae:	e9d7 2300 	ldrd	r2, r3, [r7]
 80027b2:	eb12 0408 	adds.w	r4, r2, r8
 80027b6:	eb43 0509 	adc.w	r5, r3, r9
 80027ba:	f04f 0200 	mov.w	r2, #0
 80027be:	f04f 0300 	mov.w	r3, #0
 80027c2:	016b      	lsls	r3, r5, #5
 80027c4:	ea43 63d4 	orr.w	r3, r3, r4, lsr #27
 80027c8:	0162      	lsls	r2, r4, #5
 80027ca:	eb14 0a02 	adds.w	sl, r4, r2
 80027ce:	eb45 0b03 	adc.w	fp, r5, r3
 80027d2:	eb1a 0308 	adds.w	r3, sl, r8
 80027d6:	60bb      	str	r3, [r7, #8]
 80027d8:	eb4b 0309 	adc.w	r3, fp, r9
 80027dc:	60fb      	str	r3, [r7, #12]
 80027de:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 80027e2:	f04f 0300 	mov.w	r3, #0
 80027e6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80027ea:	f7fe fa4d 	bl	8000c88 <__aeabi_uldivmod>
 80027ee:	4602      	mov	r2, r0
 80027f0:	460b      	mov	r3, r1
 80027f2:	4610      	mov	r0, r2
 80027f4:	4619      	mov	r1, r3
 80027f6:	f7fd fec9 	bl	800058c <__aeabi_ul2d>
 80027fa:	f04f 0200 	mov.w	r2, #0
 80027fe:	4b20      	ldr	r3, [pc, #128]	@ (8002880 <Read_Request_CB+0x184>)
 8002800:	f7fd fd44 	bl	800028c <__adddf3>
 8002804:	4602      	mov	r2, r0
 8002806:	460b      	mov	r3, r1
 8002808:	4610      	mov	r0, r2
 800280a:	4619      	mov	r1, r3
 800280c:	f7fe f9ec 	bl	8000be8 <__aeabi_d2f>
 8002810:	4603      	mov	r3, r0
 8002812:	633b      	str	r3, [r7, #48]	@ 0x30
    BlueMS_Environmental_Update((int32_t)(data_p *100), (int16_t)(data_t * 10));
 8002814:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8002818:	ed9f 7a1a 	vldr	s14, [pc, #104]	@ 8002884 <Read_Request_CB+0x188>
 800281c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002820:	eefd 6ae7 	vcvt.s32.f32	s13, s15
 8002824:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8002828:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 800282c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002830:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002834:	ee17 3a90 	vmov	r3, s15
 8002838:	b21b      	sxth	r3, r3
 800283a:	4619      	mov	r1, r3
 800283c:	ee16 0a90 	vmov	r0, s13
 8002840:	f000 f824 	bl	800288c <BlueMS_Environmental_Update>
  }

  if(connection_handle !=0)
 8002844:	4b10      	ldr	r3, [pc, #64]	@ (8002888 <Read_Request_CB+0x18c>)
 8002846:	881b      	ldrh	r3, [r3, #0]
 8002848:	2b00      	cmp	r3, #0
 800284a:	d007      	beq.n	800285c <Read_Request_CB+0x160>
  {
    ret = aci_gatt_allow_read(connection_handle);
 800284c:	4b0e      	ldr	r3, [pc, #56]	@ (8002888 <Read_Request_CB+0x18c>)
 800284e:	881b      	ldrh	r3, [r3, #0]
 8002850:	4618      	mov	r0, r3
 8002852:	f007 fa1d 	bl	8009c90 <aci_gatt_allow_read>
 8002856:	4603      	mov	r3, r0
 8002858:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (ret != BLE_STATUS_SUCCESS)
    {
      PRINTF("aci_gatt_allow_read() failed: 0x%02x\r\n", ret);
    }
  }
}
 800285c:	bf00      	nop
 800285e:	3738      	adds	r7, #56	@ 0x38
 8002860:	46bd      	mov	sp, r7
 8002862:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002866:	bf00      	nop
 8002868:	20000250 	.word	0x20000250
 800286c:	200002a8 	.word	0x200002a8
 8002870:	2000029c 	.word	0x2000029c
 8002874:	20000290 	.word	0x20000290
 8002878:	2000024e 	.word	0x2000024e
 800287c:	403b0000 	.word	0x403b0000
 8002880:	408f4000 	.word	0x408f4000
 8002884:	42c80000 	.word	0x42c80000
 8002888:	20000288 	.word	0x20000288

0800288c <BlueMS_Environmental_Update>:

tBleStatus BlueMS_Environmental_Update(int32_t press, int16_t temp)
{
 800288c:	b580      	push	{r7, lr}
 800288e:	b088      	sub	sp, #32
 8002890:	af02      	add	r7, sp, #8
 8002892:	6078      	str	r0, [r7, #4]
 8002894:	460b      	mov	r3, r1
 8002896:	807b      	strh	r3, [r7, #2]
  tBleStatus ret;
  uint8_t buff[8];
  HOST_TO_LE_16(buff, HAL_GetTick()>>3);
 8002898:	f001 ffea 	bl	8004870 <HAL_GetTick>
 800289c:	4603      	mov	r3, r0
 800289e:	08db      	lsrs	r3, r3, #3
 80028a0:	b2db      	uxtb	r3, r3
 80028a2:	733b      	strb	r3, [r7, #12]
 80028a4:	f001 ffe4 	bl	8004870 <HAL_GetTick>
 80028a8:	4603      	mov	r3, r0
 80028aa:	0adb      	lsrs	r3, r3, #11
 80028ac:	b2db      	uxtb	r3, r3
 80028ae:	737b      	strb	r3, [r7, #13]

  HOST_TO_LE_32(buff+2,press);
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	b2db      	uxtb	r3, r3
 80028b4:	73bb      	strb	r3, [r7, #14]
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	121b      	asrs	r3, r3, #8
 80028ba:	b2db      	uxtb	r3, r3
 80028bc:	73fb      	strb	r3, [r7, #15]
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	141b      	asrs	r3, r3, #16
 80028c2:	b2db      	uxtb	r3, r3
 80028c4:	743b      	strb	r3, [r7, #16]
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	161b      	asrs	r3, r3, #24
 80028ca:	b2db      	uxtb	r3, r3
 80028cc:	747b      	strb	r3, [r7, #17]
  HOST_TO_LE_16(buff+6,temp);
 80028ce:	887b      	ldrh	r3, [r7, #2]
 80028d0:	b2db      	uxtb	r3, r3
 80028d2:	74bb      	strb	r3, [r7, #18]
 80028d4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80028d8:	121b      	asrs	r3, r3, #8
 80028da:	b21b      	sxth	r3, r3
 80028dc:	b2db      	uxtb	r3, r3
 80028de:	74fb      	strb	r3, [r7, #19]

  ret = aci_gatt_update_char_value(HWServW2STHandle, EnvironmentalCharHandle,
 80028e0:	4b0b      	ldr	r3, [pc, #44]	@ (8002910 <BlueMS_Environmental_Update+0x84>)
 80028e2:	8818      	ldrh	r0, [r3, #0]
 80028e4:	4b0b      	ldr	r3, [pc, #44]	@ (8002914 <BlueMS_Environmental_Update+0x88>)
 80028e6:	8819      	ldrh	r1, [r3, #0]
 80028e8:	f107 030c 	add.w	r3, r7, #12
 80028ec:	9300      	str	r3, [sp, #0]
 80028ee:	2308      	movs	r3, #8
 80028f0:	2200      	movs	r2, #0
 80028f2:	f007 f93d 	bl	8009b70 <aci_gatt_update_char_value>
 80028f6:	4603      	mov	r3, r0
 80028f8:	75fb      	strb	r3, [r7, #23]
                                   0, 8, buff);

  if (ret != BLE_STATUS_SUCCESS){
 80028fa:	7dfb      	ldrb	r3, [r7, #23]
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d001      	beq.n	8002904 <BlueMS_Environmental_Update+0x78>
    PRINTF("Error while updating TEMP characteristic: 0x%04X\n",ret) ;
    return BLE_STATUS_ERROR ;
 8002900:	2347      	movs	r3, #71	@ 0x47
 8002902:	e000      	b.n	8002906 <BlueMS_Environmental_Update+0x7a>
  }

  return BLE_STATUS_SUCCESS;
 8002904:	2300      	movs	r3, #0
}
 8002906:	4618      	mov	r0, r3
 8002908:	3718      	adds	r7, #24
 800290a:	46bd      	mov	sp, r7
 800290c:	bd80      	pop	{r7, pc}
 800290e:	bf00      	nop
 8002910:	2000024c 	.word	0x2000024c
 8002914:	2000024e 	.word	0x2000024e

08002918 <Write_Request_CB>:

void Write_Request_CB(uint16_t handle, uint8_t data_length, uint8_t *data){
 8002918:	b580      	push	{r7, lr}
 800291a:	b084      	sub	sp, #16
 800291c:	af00      	add	r7, sp, #0
 800291e:	4603      	mov	r3, r0
 8002920:	603a      	str	r2, [r7, #0]
 8002922:	80fb      	strh	r3, [r7, #6]
 8002924:	460b      	mov	r3, r1
 8002926:	717b      	strb	r3, [r7, #5]
//	uint8_t buff[1];
//	buff[0] = data[0];
//	sampling_delay = buff[0];
	if (handle == UserCharHandle + 1) // Check if the written handle matches the characteristic
 8002928:	88fa      	ldrh	r2, [r7, #6]
 800292a:	4b0b      	ldr	r3, [pc, #44]	@ (8002958 <Write_Request_CB+0x40>)
 800292c:	881b      	ldrh	r3, [r3, #0]
 800292e:	3301      	adds	r3, #1
 8002930:	429a      	cmp	r2, r3
 8002932:	d10d      	bne.n	8002950 <Write_Request_CB+0x38>
	    {
	        if (data_length > 0)
 8002934:	797b      	ldrb	r3, [r7, #5]
 8002936:	2b00      	cmp	r3, #0
 8002938:	d00a      	beq.n	8002950 <Write_Request_CB+0x38>
	        {
	            uint8_t attr_val[1];
	            uint16_t len;
	            aci_gatt_read_handle_value(handle, 1, &len, attr_val); // Read the value from the characteristic
 800293a:	f107 030c 	add.w	r3, r7, #12
 800293e:	f107 020a 	add.w	r2, r7, #10
 8002942:	88f8      	ldrh	r0, [r7, #6]
 8002944:	2101      	movs	r1, #1
 8002946:	f007 f9d0 	bl	8009cea <aci_gatt_read_handle_value>
	            sampling_delay = attr_val[0];
 800294a:	7b3a      	ldrb	r2, [r7, #12]
 800294c:	4b03      	ldr	r3, [pc, #12]	@ (800295c <Write_Request_CB+0x44>)
 800294e:	701a      	strb	r2, [r3, #0]
//	            update_interval = (attr_val[0] + 1) * 10; // Update the interval based on the written value
//	            if (update_interval < 10) update_interval = 10; // Minimum 10ms
	            PRINTF("Update interval set to: %d ms\n", update_interval);
	        }
	    }
}
 8002950:	bf00      	nop
 8002952:	3710      	adds	r7, #16
 8002954:	46bd      	mov	sp, r7
 8002956:	bd80      	pop	{r7, pc}
 8002958:	20000256 	.word	0x20000256
 800295c:	20000002 	.word	0x20000002

08002960 <Set_DeviceConnectable>:
 * Input          : None.
 * Output         : None.
 * Return         : None.
 *******************************************************************************/
void Set_DeviceConnectable(void)
{
 8002960:	b580      	push	{r7, lr}
 8002962:	b092      	sub	sp, #72	@ 0x48
 8002964:	af08      	add	r7, sp, #32
  uint8_t ret;
  const char local_name[] = {AD_TYPE_COMPLETE_LOCAL_NAME,SENSOR_DEMO_NAME};
 8002966:	4a36      	ldr	r2, [pc, #216]	@ (8002a40 <Set_DeviceConnectable+0xe0>)
 8002968:	f107 031c 	add.w	r3, r7, #28
 800296c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002970:	e883 0003 	stmia.w	r3, {r0, r1}

  uint8_t manuf_data[26] = {
 8002974:	2302      	movs	r3, #2
 8002976:	703b      	strb	r3, [r7, #0]
 8002978:	230a      	movs	r3, #10
 800297a:	707b      	strb	r3, [r7, #1]
 800297c:	2300      	movs	r3, #0
 800297e:	70bb      	strb	r3, [r7, #2]
 8002980:	2308      	movs	r3, #8
 8002982:	70fb      	strb	r3, [r7, #3]
 8002984:	2309      	movs	r3, #9
 8002986:	713b      	strb	r3, [r7, #4]
 8002988:	2342      	movs	r3, #66	@ 0x42
 800298a:	717b      	strb	r3, [r7, #5]
 800298c:	236c      	movs	r3, #108	@ 0x6c
 800298e:	71bb      	strb	r3, [r7, #6]
 8002990:	2375      	movs	r3, #117	@ 0x75
 8002992:	71fb      	strb	r3, [r7, #7]
 8002994:	2365      	movs	r3, #101	@ 0x65
 8002996:	723b      	strb	r3, [r7, #8]
 8002998:	234e      	movs	r3, #78	@ 0x4e
 800299a:	727b      	strb	r3, [r7, #9]
 800299c:	2352      	movs	r3, #82	@ 0x52
 800299e:	72bb      	strb	r3, [r7, #10]
 80029a0:	2347      	movs	r3, #71	@ 0x47
 80029a2:	72fb      	strb	r3, [r7, #11]
 80029a4:	230d      	movs	r3, #13
 80029a6:	733b      	strb	r3, [r7, #12]
 80029a8:	23ff      	movs	r3, #255	@ 0xff
 80029aa:	737b      	strb	r3, [r7, #13]
 80029ac:	2301      	movs	r3, #1
 80029ae:	73bb      	strb	r3, [r7, #14]
 80029b0:	2380      	movs	r3, #128	@ 0x80
 80029b2:	73fb      	strb	r3, [r7, #15]
 80029b4:	2300      	movs	r3, #0
 80029b6:	743b      	strb	r3, [r7, #16]
 80029b8:	23f4      	movs	r3, #244	@ 0xf4
 80029ba:	747b      	strb	r3, [r7, #17]
 80029bc:	2300      	movs	r3, #0
 80029be:	74bb      	strb	r3, [r7, #18]
 80029c0:	2300      	movs	r3, #0
 80029c2:	74fb      	strb	r3, [r7, #19]
    0x80,
    0x00,
    0xF4, /* ACC+Gyro+Mag 0xE0 | 0x04 Temp | 0x10 Pressure */
    0x00, /*  */
    0x00, /*  */
    bdaddr[5], /* BLE MAC start -MSB first- */
 80029c4:	4b1f      	ldr	r3, [pc, #124]	@ (8002a44 <Set_DeviceConnectable+0xe4>)
 80029c6:	795b      	ldrb	r3, [r3, #5]
  uint8_t manuf_data[26] = {
 80029c8:	753b      	strb	r3, [r7, #20]
    bdaddr[4],
 80029ca:	4b1e      	ldr	r3, [pc, #120]	@ (8002a44 <Set_DeviceConnectable+0xe4>)
 80029cc:	791b      	ldrb	r3, [r3, #4]
  uint8_t manuf_data[26] = {
 80029ce:	757b      	strb	r3, [r7, #21]
    bdaddr[3],
 80029d0:	4b1c      	ldr	r3, [pc, #112]	@ (8002a44 <Set_DeviceConnectable+0xe4>)
 80029d2:	78db      	ldrb	r3, [r3, #3]
  uint8_t manuf_data[26] = {
 80029d4:	75bb      	strb	r3, [r7, #22]
    bdaddr[2],
 80029d6:	4b1b      	ldr	r3, [pc, #108]	@ (8002a44 <Set_DeviceConnectable+0xe4>)
 80029d8:	789b      	ldrb	r3, [r3, #2]
  uint8_t manuf_data[26] = {
 80029da:	75fb      	strb	r3, [r7, #23]
    bdaddr[1],
 80029dc:	4b19      	ldr	r3, [pc, #100]	@ (8002a44 <Set_DeviceConnectable+0xe4>)
 80029de:	785b      	ldrb	r3, [r3, #1]
  uint8_t manuf_data[26] = {
 80029e0:	763b      	strb	r3, [r7, #24]
    bdaddr[0]  /* BLE MAC stop */
 80029e2:	4b18      	ldr	r3, [pc, #96]	@ (8002a44 <Set_DeviceConnectable+0xe4>)
 80029e4:	781b      	ldrb	r3, [r3, #0]
  uint8_t manuf_data[26] = {
 80029e6:	767b      	strb	r3, [r7, #25]
  };

  manuf_data[18] |= 0x01; /* Sensor Fusion */
 80029e8:	7cbb      	ldrb	r3, [r7, #18]
 80029ea:	f043 0301 	orr.w	r3, r3, #1
 80029ee:	b2db      	uxtb	r3, r3
 80029f0:	74bb      	strb	r3, [r7, #18]

  hci_le_set_scan_resp_data(0, NULL);
 80029f2:	2100      	movs	r1, #0
 80029f4:	2000      	movs	r0, #0
 80029f6:	f007 fb02 	bl	8009ffe <hci_le_set_scan_resp_data>

  PRINTF("Set General Discoverable Mode.\n");

  ret = aci_gap_set_discoverable(ADV_DATA_TYPE,
 80029fa:	2300      	movs	r3, #0
 80029fc:	9306      	str	r3, [sp, #24]
 80029fe:	2300      	movs	r3, #0
 8002a00:	9305      	str	r3, [sp, #20]
 8002a02:	2300      	movs	r3, #0
 8002a04:	9304      	str	r3, [sp, #16]
 8002a06:	2300      	movs	r3, #0
 8002a08:	9303      	str	r3, [sp, #12]
 8002a0a:	f107 031c 	add.w	r3, r7, #28
 8002a0e:	9302      	str	r3, [sp, #8]
 8002a10:	2308      	movs	r3, #8
 8002a12:	9301      	str	r3, [sp, #4]
 8002a14:	2300      	movs	r3, #0
 8002a16:	9300      	str	r3, [sp, #0]
 8002a18:	2301      	movs	r3, #1
 8002a1a:	f44f 62f0 	mov.w	r2, #1920	@ 0x780
 8002a1e:	f44f 61c8 	mov.w	r1, #1600	@ 0x640
 8002a22:	2000      	movs	r0, #0
 8002a24:	f006 fd9b 	bl	800955e <aci_gap_set_discoverable>
 8002a28:	4603      	mov	r3, r0
 8002a2a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
                                (ADV_INTERVAL_MIN_MS*1000)/625,(ADV_INTERVAL_MAX_MS*1000)/625,
                                 STATIC_RANDOM_ADDR, NO_WHITE_LIST_USE,
                                 sizeof(local_name), local_name, 0, NULL, 0, 0);

  aci_gap_update_adv_data(26, manuf_data);
 8002a2e:	463b      	mov	r3, r7
 8002a30:	4619      	mov	r1, r3
 8002a32:	201a      	movs	r0, #26
 8002a34:	f006 fed4 	bl	80097e0 <aci_gap_update_adv_data>
  {
    PRINTF("aci_gap_set_discoverable() failed: 0x%02x\r\n", ret);
  }
  else
    PRINTF("aci_gap_set_discoverable() --> SUCCESS\r\n");
}
 8002a38:	bf00      	nop
 8002a3a:	3728      	adds	r7, #40	@ 0x28
 8002a3c:	46bd      	mov	sp, r7
 8002a3e:	bd80      	pop	{r7, pc}
 8002a40:	0800ef90 	.word	0x0800ef90
 8002a44:	20000240 	.word	0x20000240

08002a48 <user_notify>:
 *         parsed.
 * @param  void* Pointer to the ACI packet
 * @retval None
 */
void user_notify(void * pData)
{
 8002a48:	b580      	push	{r7, lr}
 8002a4a:	b08a      	sub	sp, #40	@ 0x28
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	6078      	str	r0, [r7, #4]
  hci_uart_pckt *hci_pckt = pData;
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	627b      	str	r3, [r7, #36]	@ 0x24
  /* obtain event packet */
  hci_event_pckt *event_pckt = (hci_event_pckt*)hci_pckt->data;
 8002a54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a56:	3301      	adds	r3, #1
 8002a58:	623b      	str	r3, [r7, #32]

  if(hci_pckt->type != HCI_EVENT_PKT)
 8002a5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a5c:	781b      	ldrb	r3, [r3, #0]
 8002a5e:	2b04      	cmp	r3, #4
 8002a60:	d149      	bne.n	8002af6 <user_notify+0xae>
    return;

  switch(event_pckt->evt){
 8002a62:	6a3b      	ldr	r3, [r7, #32]
 8002a64:	781b      	ldrb	r3, [r3, #0]
 8002a66:	2bff      	cmp	r3, #255	@ 0xff
 8002a68:	d01f      	beq.n	8002aaa <user_notify+0x62>
 8002a6a:	2bff      	cmp	r3, #255	@ 0xff
 8002a6c:	dc46      	bgt.n	8002afc <user_notify+0xb4>
 8002a6e:	2b05      	cmp	r3, #5
 8002a70:	d002      	beq.n	8002a78 <user_notify+0x30>
 8002a72:	2b3e      	cmp	r3, #62	@ 0x3e
 8002a74:	d003      	beq.n	8002a7e <user_notify+0x36>
 8002a76:	e041      	b.n	8002afc <user_notify+0xb4>

  case EVT_DISCONN_COMPLETE:
    {
      GAP_DisconnectionComplete_CB();
 8002a78:	f000 f844 	bl	8002b04 <GAP_DisconnectionComplete_CB>
    }
    break;
 8002a7c:	e03e      	b.n	8002afc <user_notify+0xb4>

  case EVT_LE_META_EVENT:
    {
      evt_le_meta_event *evt = (void *)event_pckt->data;
 8002a7e:	6a3b      	ldr	r3, [r7, #32]
 8002a80:	3302      	adds	r3, #2
 8002a82:	613b      	str	r3, [r7, #16]

      switch(evt->subevent){
 8002a84:	693b      	ldr	r3, [r7, #16]
 8002a86:	781b      	ldrb	r3, [r3, #0]
 8002a88:	2b01      	cmp	r3, #1
 8002a8a:	d136      	bne.n	8002afa <user_notify+0xb2>
      case EVT_LE_CONN_COMPLETE:
        {
          evt_le_connection_complete *cc = (void *)evt->data;
 8002a8c:	693b      	ldr	r3, [r7, #16]
 8002a8e:	3301      	adds	r3, #1
 8002a90:	60fb      	str	r3, [r7, #12]
          GAP_ConnectionComplete_CB(cc->peer_bdaddr, cc->handle);
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	1d5a      	adds	r2, r3, #5
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8002a9c:	b29b      	uxth	r3, r3
 8002a9e:	4619      	mov	r1, r3
 8002aa0:	4610      	mov	r0, r2
 8002aa2:	f000 f845 	bl	8002b30 <GAP_ConnectionComplete_CB>
        }
        break;
 8002aa6:	bf00      	nop
      }
    }
    break;
 8002aa8:	e027      	b.n	8002afa <user_notify+0xb2>

  case EVT_VENDOR:
    {
      evt_blue_aci *blue_evt = (void*)event_pckt->data;
 8002aaa:	6a3b      	ldr	r3, [r7, #32]
 8002aac:	3302      	adds	r3, #2
 8002aae:	61fb      	str	r3, [r7, #28]
      switch(blue_evt->ecode){
 8002ab0:	69fb      	ldr	r3, [r7, #28]
 8002ab2:	881b      	ldrh	r3, [r3, #0]
 8002ab4:	b29b      	uxth	r3, r3
 8002ab6:	461a      	mov	r2, r3
 8002ab8:	f640 4314 	movw	r3, #3092	@ 0xc14
 8002abc:	429a      	cmp	r2, r3
 8002abe:	d109      	bne.n	8002ad4 <user_notify+0x8c>

      case EVT_BLUE_GATT_READ_PERMIT_REQ:
        {
          evt_gatt_read_permit_req *pr = (void*)blue_evt->data;
 8002ac0:	69fb      	ldr	r3, [r7, #28]
 8002ac2:	3302      	adds	r3, #2
 8002ac4:	61bb      	str	r3, [r7, #24]
          Read_Request_CB(pr->attr_handle);
 8002ac6:	69bb      	ldr	r3, [r7, #24]
 8002ac8:	885b      	ldrh	r3, [r3, #2]
 8002aca:	b29b      	uxth	r3, r3
 8002acc:	4618      	mov	r0, r3
 8002ace:	f7ff fe15 	bl	80026fc <Read_Request_CB>
        }
        break;
 8002ad2:	e00f      	b.n	8002af4 <user_notify+0xac>
//    	  Write_Request_CB(pw->data);
//      }
//      break;
      default:
      	  {
      		evt_gatt_write_permit_req *pw = (void*)blue_evt->data;
 8002ad4:	69fb      	ldr	r3, [r7, #28]
 8002ad6:	3302      	adds	r3, #2
 8002ad8:	617b      	str	r3, [r7, #20]
    	  Write_Request_CB(pw -> attr_handle, pw -> data_length, pw -> data);
 8002ada:	697b      	ldr	r3, [r7, #20]
 8002adc:	885b      	ldrh	r3, [r3, #2]
 8002ade:	b29b      	uxth	r3, r3
 8002ae0:	4618      	mov	r0, r3
 8002ae2:	697b      	ldr	r3, [r7, #20]
 8002ae4:	791b      	ldrb	r3, [r3, #4]
 8002ae6:	4619      	mov	r1, r3
 8002ae8:	697b      	ldr	r3, [r7, #20]
 8002aea:	3305      	adds	r3, #5
 8002aec:	461a      	mov	r2, r3
 8002aee:	f7ff ff13 	bl	8002918 <Write_Request_CB>
      	  }
      	  break;
 8002af2:	bf00      	nop

    }
    }
    break;
 8002af4:	e002      	b.n	8002afc <user_notify+0xb4>
    return;
 8002af6:	bf00      	nop
 8002af8:	e000      	b.n	8002afc <user_notify+0xb4>
    break;
 8002afa:	bf00      	nop
}
}
 8002afc:	3728      	adds	r7, #40	@ 0x28
 8002afe:	46bd      	mov	sp, r7
 8002b00:	bd80      	pop	{r7, pc}
	...

08002b04 <GAP_DisconnectionComplete_CB>:
 * @brief  This function is called when the peer device gets disconnected.
 * @param  None
 * @retval None
 */
void GAP_DisconnectionComplete_CB(void)
{
 8002b04:	b480      	push	{r7}
 8002b06:	af00      	add	r7, sp, #0
  connected = FALSE;
 8002b08:	4b06      	ldr	r3, [pc, #24]	@ (8002b24 <GAP_DisconnectionComplete_CB+0x20>)
 8002b0a:	2200      	movs	r2, #0
 8002b0c:	601a      	str	r2, [r3, #0]
  PRINTF("Disconnected\n");
  /* Make the device connectable again. */
  set_connectable = TRUE;
 8002b0e:	4b06      	ldr	r3, [pc, #24]	@ (8002b28 <GAP_DisconnectionComplete_CB+0x24>)
 8002b10:	2201      	movs	r2, #1
 8002b12:	701a      	strb	r2, [r3, #0]
  notification_enabled = FALSE;
 8002b14:	4b05      	ldr	r3, [pc, #20]	@ (8002b2c <GAP_DisconnectionComplete_CB+0x28>)
 8002b16:	2200      	movs	r2, #0
 8002b18:	701a      	strb	r2, [r3, #0]
}
 8002b1a:	bf00      	nop
 8002b1c:	46bd      	mov	sp, r7
 8002b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b22:	4770      	bx	lr
 8002b24:	2000028c 	.word	0x2000028c
 8002b28:	20000001 	.word	0x20000001
 8002b2c:	2000028a 	.word	0x2000028a

08002b30 <GAP_ConnectionComplete_CB>:
 * @param  uint8_t Address of peer device
 * @param  uint16_t Connection handle
 * @retval None
 */
void GAP_ConnectionComplete_CB(uint8_t addr[6], uint16_t handle)
{
 8002b30:	b480      	push	{r7}
 8002b32:	b085      	sub	sp, #20
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	6078      	str	r0, [r7, #4]
 8002b38:	460b      	mov	r3, r1
 8002b3a:	807b      	strh	r3, [r7, #2]
  connected = TRUE;
 8002b3c:	4b0a      	ldr	r3, [pc, #40]	@ (8002b68 <GAP_ConnectionComplete_CB+0x38>)
 8002b3e:	2201      	movs	r2, #1
 8002b40:	601a      	str	r2, [r3, #0]
  connection_handle = handle;
 8002b42:	4a0a      	ldr	r2, [pc, #40]	@ (8002b6c <GAP_ConnectionComplete_CB+0x3c>)
 8002b44:	887b      	ldrh	r3, [r7, #2]
 8002b46:	8013      	strh	r3, [r2, #0]

  PRINTF("Connected to device:");
  for(uint32_t i = 5; i > 0; i--){
 8002b48:	2305      	movs	r3, #5
 8002b4a:	60fb      	str	r3, [r7, #12]
 8002b4c:	e002      	b.n	8002b54 <GAP_ConnectionComplete_CB+0x24>
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	3b01      	subs	r3, #1
 8002b52:	60fb      	str	r3, [r7, #12]
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d1f9      	bne.n	8002b4e <GAP_ConnectionComplete_CB+0x1e>
    PRINTF("%02X-", addr[i]);
  }
  PRINTF("%02X\n", addr[0]);
}
 8002b5a:	bf00      	nop
 8002b5c:	bf00      	nop
 8002b5e:	3714      	adds	r7, #20
 8002b60:	46bd      	mov	sp, r7
 8002b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b66:	4770      	bx	lr
 8002b68:	2000028c 	.word	0x2000028c
 8002b6c:	20000288 	.word	0x20000288

08002b70 <HCI_TL_SPI_Init>:
 *
 * @param  void* Pointer to configuration struct
 * @retval int32_t Status
 */
int32_t HCI_TL_SPI_Init(void* pConf)
{
 8002b70:	b580      	push	{r7, lr}
 8002b72:	b088      	sub	sp, #32
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;

  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b78:	4b1f      	ldr	r3, [pc, #124]	@ (8002bf8 <HCI_TL_SPI_Init+0x88>)
 8002b7a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002b7c:	4a1e      	ldr	r2, [pc, #120]	@ (8002bf8 <HCI_TL_SPI_Init+0x88>)
 8002b7e:	f043 0301 	orr.w	r3, r3, #1
 8002b82:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002b84:	4b1c      	ldr	r3, [pc, #112]	@ (8002bf8 <HCI_TL_SPI_Init+0x88>)
 8002b86:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002b88:	f003 0301 	and.w	r3, r3, #1
 8002b8c:	60bb      	str	r3, [r7, #8]
 8002b8e:	68bb      	ldr	r3, [r7, #8]

  /* Configure EXTI Line */
  GPIO_InitStruct.Pin = HCI_TL_SPI_EXTI_PIN;
 8002b90:	2340      	movs	r3, #64	@ 0x40
 8002b92:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002b94:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8002b98:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b9a:	2300      	movs	r3, #0
 8002b9c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(HCI_TL_SPI_EXTI_PORT, &GPIO_InitStruct);
 8002b9e:	f107 030c 	add.w	r3, r7, #12
 8002ba2:	4619      	mov	r1, r3
 8002ba4:	4815      	ldr	r0, [pc, #84]	@ (8002bfc <HCI_TL_SPI_Init+0x8c>)
 8002ba6:	f002 f90f 	bl	8004dc8 <HAL_GPIO_Init>

  /* Configure RESET Line */
  GPIO_InitStruct.Pin =  HCI_TL_RST_PIN ;
 8002baa:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002bae:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002bb0:	2301      	movs	r3, #1
 8002bb2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bb4:	2300      	movs	r3, #0
 8002bb6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bb8:	2300      	movs	r3, #0
 8002bba:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(HCI_TL_RST_PORT, &GPIO_InitStruct);
 8002bbc:	f107 030c 	add.w	r3, r7, #12
 8002bc0:	4619      	mov	r1, r3
 8002bc2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002bc6:	f002 f8ff 	bl	8004dc8 <HAL_GPIO_Init>

  /* Configure CS */
  GPIO_InitStruct.Pin = HCI_TL_SPI_CS_PIN ;
 8002bca:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002bce:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002bd0:	2301      	movs	r3, #1
 8002bd2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bd4:	2300      	movs	r3, #0
 8002bd6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bd8:	2300      	movs	r3, #0
 8002bda:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(HCI_TL_SPI_CS_PORT, &GPIO_InitStruct);
 8002bdc:	f107 030c 	add.w	r3, r7, #12
 8002be0:	4619      	mov	r1, r3
 8002be2:	4807      	ldr	r0, [pc, #28]	@ (8002c00 <HCI_TL_SPI_Init+0x90>)
 8002be4:	f002 f8f0 	bl	8004dc8 <HAL_GPIO_Init>

  return BSP_SPI3_Init();
 8002be8:	f001 fb7a 	bl	80042e0 <BSP_SPI3_Init>
 8002bec:	4603      	mov	r3, r0
}
 8002bee:	4618      	mov	r0, r3
 8002bf0:	3720      	adds	r7, #32
 8002bf2:	46bd      	mov	sp, r7
 8002bf4:	bd80      	pop	{r7, pc}
 8002bf6:	bf00      	nop
 8002bf8:	40021000 	.word	0x40021000
 8002bfc:	48001000 	.word	0x48001000
 8002c00:	48000c00 	.word	0x48000c00

08002c04 <HCI_TL_SPI_DeInit>:
 *
 * @param  None
 * @retval int32_t 0
 */
int32_t HCI_TL_SPI_DeInit(void)
{
 8002c04:	b580      	push	{r7, lr}
 8002c06:	af00      	add	r7, sp, #0
  HAL_GPIO_DeInit(HCI_TL_SPI_EXTI_PORT, HCI_TL_SPI_EXTI_PIN);
 8002c08:	2140      	movs	r1, #64	@ 0x40
 8002c0a:	4808      	ldr	r0, [pc, #32]	@ (8002c2c <HCI_TL_SPI_DeInit+0x28>)
 8002c0c:	f002 fa86 	bl	800511c <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN);
 8002c10:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002c14:	4806      	ldr	r0, [pc, #24]	@ (8002c30 <HCI_TL_SPI_DeInit+0x2c>)
 8002c16:	f002 fa81 	bl	800511c <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(HCI_TL_RST_PORT, HCI_TL_RST_PIN);
 8002c1a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002c1e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002c22:	f002 fa7b 	bl	800511c <HAL_GPIO_DeInit>
  return 0;
 8002c26:	2300      	movs	r3, #0
}
 8002c28:	4618      	mov	r0, r3
 8002c2a:	bd80      	pop	{r7, pc}
 8002c2c:	48001000 	.word	0x48001000
 8002c30:	48000c00 	.word	0x48000c00

08002c34 <HCI_TL_SPI_Reset>:
 *
 * @param  None
 * @retval int32_t 0
 */
int32_t HCI_TL_SPI_Reset(void)
{
 8002c34:	b580      	push	{r7, lr}
 8002c36:	af00      	add	r7, sp, #0
  // Deselect CS PIN for BlueNRG to avoid spurious commands
  HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_SET);
 8002c38:	2201      	movs	r2, #1
 8002c3a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002c3e:	480d      	ldr	r0, [pc, #52]	@ (8002c74 <HCI_TL_SPI_Reset+0x40>)
 8002c40:	f002 fb78 	bl	8005334 <HAL_GPIO_WritePin>

  HAL_GPIO_WritePin(HCI_TL_RST_PORT, HCI_TL_RST_PIN, GPIO_PIN_RESET);
 8002c44:	2200      	movs	r2, #0
 8002c46:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002c4a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002c4e:	f002 fb71 	bl	8005334 <HAL_GPIO_WritePin>
  HAL_Delay(5);
 8002c52:	2005      	movs	r0, #5
 8002c54:	f001 fe18 	bl	8004888 <HAL_Delay>
  HAL_GPIO_WritePin(HCI_TL_RST_PORT, HCI_TL_RST_PIN, GPIO_PIN_SET);
 8002c58:	2201      	movs	r2, #1
 8002c5a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002c5e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002c62:	f002 fb67 	bl	8005334 <HAL_GPIO_WritePin>
  HAL_Delay(5);
 8002c66:	2005      	movs	r0, #5
 8002c68:	f001 fe0e 	bl	8004888 <HAL_Delay>
  return 0;
 8002c6c:	2300      	movs	r3, #0
}
 8002c6e:	4618      	mov	r0, r3
 8002c70:	bd80      	pop	{r7, pc}
 8002c72:	bf00      	nop
 8002c74:	48000c00 	.word	0x48000c00

08002c78 <HCI_TL_SPI_Receive>:
 * @param  buffer : Buffer where data from SPI are stored
 * @param  size   : Buffer size
 * @retval int32_t: Number of read bytes
 */
int32_t HCI_TL_SPI_Receive(uint8_t* buffer, uint16_t size)
{
 8002c78:	b580      	push	{r7, lr}
 8002c7a:	b088      	sub	sp, #32
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	6078      	str	r0, [r7, #4]
 8002c80:	460b      	mov	r3, r1
 8002c82:	807b      	strh	r3, [r7, #2]
  uint16_t byte_count;
  uint8_t len = 0;
 8002c84:	2300      	movs	r3, #0
 8002c86:	777b      	strb	r3, [r7, #29]
  uint8_t char_ff = 0xff;
 8002c88:	23ff      	movs	r3, #255	@ 0xff
 8002c8a:	773b      	strb	r3, [r7, #28]
  volatile uint8_t read_char;

  uint8_t header_master[HEADER_SIZE] = {0x0b, 0x00, 0x00, 0x00, 0x00};
 8002c8c:	230b      	movs	r3, #11
 8002c8e:	617b      	str	r3, [r7, #20]
 8002c90:	2300      	movs	r3, #0
 8002c92:	763b      	strb	r3, [r7, #24]
  uint8_t header_slave[HEADER_SIZE];

  /* CS reset */
  HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_RESET);
 8002c94:	2200      	movs	r2, #0
 8002c96:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002c9a:	4822      	ldr	r0, [pc, #136]	@ (8002d24 <HCI_TL_SPI_Receive+0xac>)
 8002c9c:	f002 fb4a 	bl	8005334 <HAL_GPIO_WritePin>

  /* Read the header */
  BSP_SPI3_SendRecv(header_master, header_slave, HEADER_SIZE);
 8002ca0:	f107 010c 	add.w	r1, r7, #12
 8002ca4:	f107 0314 	add.w	r3, r7, #20
 8002ca8:	2205      	movs	r2, #5
 8002caa:	4618      	mov	r0, r3
 8002cac:	f001 fb48 	bl	8004340 <BSP_SPI3_SendRecv>

  if(header_slave[0] == 0x02)
 8002cb0:	7b3b      	ldrb	r3, [r7, #12]
 8002cb2:	2b02      	cmp	r3, #2
 8002cb4:	d12a      	bne.n	8002d0c <HCI_TL_SPI_Receive+0x94>
  {
    /* device is ready */
    byte_count = (header_slave[4] << 8)| header_slave[3];
 8002cb6:	7c3b      	ldrb	r3, [r7, #16]
 8002cb8:	b21b      	sxth	r3, r3
 8002cba:	021b      	lsls	r3, r3, #8
 8002cbc:	b21a      	sxth	r2, r3
 8002cbe:	7bfb      	ldrb	r3, [r7, #15]
 8002cc0:	b21b      	sxth	r3, r3
 8002cc2:	4313      	orrs	r3, r2
 8002cc4:	b21b      	sxth	r3, r3
 8002cc6:	83fb      	strh	r3, [r7, #30]

    if(byte_count > 0)
 8002cc8:	8bfb      	ldrh	r3, [r7, #30]
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d01e      	beq.n	8002d0c <HCI_TL_SPI_Receive+0x94>
    {
      /* avoid to read more data than the size of the buffer */
      if (byte_count > size){
 8002cce:	8bfa      	ldrh	r2, [r7, #30]
 8002cd0:	887b      	ldrh	r3, [r7, #2]
 8002cd2:	429a      	cmp	r2, r3
 8002cd4:	d901      	bls.n	8002cda <HCI_TL_SPI_Receive+0x62>
        byte_count = size;
 8002cd6:	887b      	ldrh	r3, [r7, #2]
 8002cd8:	83fb      	strh	r3, [r7, #30]
      }

      for(len = 0; len < byte_count; len++)
 8002cda:	2300      	movs	r3, #0
 8002cdc:	777b      	strb	r3, [r7, #29]
 8002cde:	e010      	b.n	8002d02 <HCI_TL_SPI_Receive+0x8a>
      {
        BSP_SPI3_SendRecv(&char_ff, (uint8_t*)&read_char, 1);
 8002ce0:	f107 011b 	add.w	r1, r7, #27
 8002ce4:	f107 031c 	add.w	r3, r7, #28
 8002ce8:	2201      	movs	r2, #1
 8002cea:	4618      	mov	r0, r3
 8002cec:	f001 fb28 	bl	8004340 <BSP_SPI3_SendRecv>
        buffer[len] = read_char;
 8002cf0:	7f7b      	ldrb	r3, [r7, #29]
 8002cf2:	687a      	ldr	r2, [r7, #4]
 8002cf4:	4413      	add	r3, r2
 8002cf6:	7efa      	ldrb	r2, [r7, #27]
 8002cf8:	b2d2      	uxtb	r2, r2
 8002cfa:	701a      	strb	r2, [r3, #0]
      for(len = 0; len < byte_count; len++)
 8002cfc:	7f7b      	ldrb	r3, [r7, #29]
 8002cfe:	3301      	adds	r3, #1
 8002d00:	777b      	strb	r3, [r7, #29]
 8002d02:	7f7b      	ldrb	r3, [r7, #29]
 8002d04:	b29b      	uxth	r3, r3
 8002d06:	8bfa      	ldrh	r2, [r7, #30]
 8002d08:	429a      	cmp	r2, r3
 8002d0a:	d8e9      	bhi.n	8002ce0 <HCI_TL_SPI_Receive+0x68>
      }
    }
  }
  /* Release CS line */
  HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_SET);
 8002d0c:	2201      	movs	r2, #1
 8002d0e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002d12:	4804      	ldr	r0, [pc, #16]	@ (8002d24 <HCI_TL_SPI_Receive+0xac>)
 8002d14:	f002 fb0e 	bl	8005334 <HAL_GPIO_WritePin>
    }
    PRINT_CSV("\n");
  }
#endif

  return len;
 8002d18:	7f7b      	ldrb	r3, [r7, #29]
}
 8002d1a:	4618      	mov	r0, r3
 8002d1c:	3720      	adds	r7, #32
 8002d1e:	46bd      	mov	sp, r7
 8002d20:	bd80      	pop	{r7, pc}
 8002d22:	bf00      	nop
 8002d24:	48000c00 	.word	0x48000c00

08002d28 <HCI_TL_SPI_Send>:
 * @param  buffer : data buffer to be written
 * @param  size   : size of first data buffer to be written
 * @retval int32_t: Number of read bytes
 */
int32_t HCI_TL_SPI_Send(uint8_t* buffer, uint16_t size)
{
 8002d28:	b580      	push	{r7, lr}
 8002d2a:	b088      	sub	sp, #32
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	6078      	str	r0, [r7, #4]
 8002d30:	460b      	mov	r3, r1
 8002d32:	807b      	strh	r3, [r7, #2]
  int32_t result;

  uint8_t header_master[HEADER_SIZE] = {0x0a, 0x00, 0x00, 0x00, 0x00};
 8002d34:	230a      	movs	r3, #10
 8002d36:	613b      	str	r3, [r7, #16]
 8002d38:	2300      	movs	r3, #0
 8002d3a:	753b      	strb	r3, [r7, #20]
  uint8_t header_slave[HEADER_SIZE];

  static uint8_t read_char_buf[MAX_BUFFER_SIZE];
  uint32_t tickstart = HAL_GetTick();
 8002d3c:	f001 fd98 	bl	8004870 <HAL_GetTick>
 8002d40:	61b8      	str	r0, [r7, #24]

  do
  {
    result = 0;
 8002d42:	2300      	movs	r3, #0
 8002d44:	61fb      	str	r3, [r7, #28]

    /* CS reset */
    HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_RESET);
 8002d46:	2200      	movs	r2, #0
 8002d48:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002d4c:	481c      	ldr	r0, [pc, #112]	@ (8002dc0 <HCI_TL_SPI_Send+0x98>)
 8002d4e:	f002 faf1 	bl	8005334 <HAL_GPIO_WritePin>

    /* Read header */
    BSP_SPI3_SendRecv(header_master, header_slave, HEADER_SIZE);
 8002d52:	f107 0108 	add.w	r1, r7, #8
 8002d56:	f107 0310 	add.w	r3, r7, #16
 8002d5a:	2205      	movs	r2, #5
 8002d5c:	4618      	mov	r0, r3
 8002d5e:	f001 faef 	bl	8004340 <BSP_SPI3_SendRecv>

    if(header_slave[0] == 0x02)
 8002d62:	7a3b      	ldrb	r3, [r7, #8]
 8002d64:	2b02      	cmp	r3, #2
 8002d66:	d10f      	bne.n	8002d88 <HCI_TL_SPI_Send+0x60>
    {
      /* SPI is ready */
      if(header_slave[1] >= size)
 8002d68:	7a7b      	ldrb	r3, [r7, #9]
 8002d6a:	461a      	mov	r2, r3
 8002d6c:	887b      	ldrh	r3, [r7, #2]
 8002d6e:	4293      	cmp	r3, r2
 8002d70:	d806      	bhi.n	8002d80 <HCI_TL_SPI_Send+0x58>
      {
        BSP_SPI3_SendRecv(buffer, read_char_buf, size);
 8002d72:	887b      	ldrh	r3, [r7, #2]
 8002d74:	461a      	mov	r2, r3
 8002d76:	4913      	ldr	r1, [pc, #76]	@ (8002dc4 <HCI_TL_SPI_Send+0x9c>)
 8002d78:	6878      	ldr	r0, [r7, #4]
 8002d7a:	f001 fae1 	bl	8004340 <BSP_SPI3_SendRecv>
 8002d7e:	e006      	b.n	8002d8e <HCI_TL_SPI_Send+0x66>
      }
      else
      {
        /* Buffer is too small */
        result = -2;
 8002d80:	f06f 0301 	mvn.w	r3, #1
 8002d84:	61fb      	str	r3, [r7, #28]
 8002d86:	e002      	b.n	8002d8e <HCI_TL_SPI_Send+0x66>
      }
    } else {
      /* SPI is not ready */
      result = -1;
 8002d88:	f04f 33ff 	mov.w	r3, #4294967295
 8002d8c:	61fb      	str	r3, [r7, #28]
    }

    /* Release CS line */
    HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_SET);
 8002d8e:	2201      	movs	r2, #1
 8002d90:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002d94:	480a      	ldr	r0, [pc, #40]	@ (8002dc0 <HCI_TL_SPI_Send+0x98>)
 8002d96:	f002 facd 	bl	8005334 <HAL_GPIO_WritePin>

    if((HAL_GetTick() - tickstart) > TIMEOUT_DURATION)
 8002d9a:	f001 fd69 	bl	8004870 <HAL_GetTick>
 8002d9e:	4602      	mov	r2, r0
 8002da0:	69bb      	ldr	r3, [r7, #24]
 8002da2:	1ad3      	subs	r3, r2, r3
 8002da4:	2b0f      	cmp	r3, #15
 8002da6:	d903      	bls.n	8002db0 <HCI_TL_SPI_Send+0x88>
    {
      result = -3;
 8002da8:	f06f 0302 	mvn.w	r3, #2
 8002dac:	61fb      	str	r3, [r7, #28]
      break;
 8002dae:	e002      	b.n	8002db6 <HCI_TL_SPI_Send+0x8e>
    }
  } while(result < 0);
 8002db0:	69fb      	ldr	r3, [r7, #28]
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	dbc5      	blt.n	8002d42 <HCI_TL_SPI_Send+0x1a>

  return result;
 8002db6:	69fb      	ldr	r3, [r7, #28]
}
 8002db8:	4618      	mov	r0, r3
 8002dba:	3720      	adds	r7, #32
 8002dbc:	46bd      	mov	sp, r7
 8002dbe:	bd80      	pop	{r7, pc}
 8002dc0:	48000c00 	.word	0x48000c00
 8002dc4:	200002c8 	.word	0x200002c8

08002dc8 <IsDataAvailable>:
 *
 * @param  None
 * @retval int32_t: 1 if data are present, 0 otherwise
 */
static int32_t IsDataAvailable(void)
{
 8002dc8:	b580      	push	{r7, lr}
 8002dca:	af00      	add	r7, sp, #0
  return (HAL_GPIO_ReadPin(HCI_TL_SPI_EXTI_PORT, HCI_TL_SPI_EXTI_PIN) == GPIO_PIN_SET);
 8002dcc:	2140      	movs	r1, #64	@ 0x40
 8002dce:	4805      	ldr	r0, [pc, #20]	@ (8002de4 <IsDataAvailable+0x1c>)
 8002dd0:	f002 fa98 	bl	8005304 <HAL_GPIO_ReadPin>
 8002dd4:	4603      	mov	r3, r0
 8002dd6:	2b01      	cmp	r3, #1
 8002dd8:	bf0c      	ite	eq
 8002dda:	2301      	moveq	r3, #1
 8002ddc:	2300      	movne	r3, #0
 8002dde:	b2db      	uxtb	r3, r3
}
 8002de0:	4618      	mov	r0, r3
 8002de2:	bd80      	pop	{r7, pc}
 8002de4:	48001000 	.word	0x48001000

08002de8 <hci_tl_lowlevel_init>:
 *
 * @param  None
 * @retval None
 */
void hci_tl_lowlevel_init(void)
{
 8002de8:	b580      	push	{r7, lr}
 8002dea:	b088      	sub	sp, #32
 8002dec:	af00      	add	r7, sp, #0

  /* USER CODE END hci_tl_lowlevel_init 1 */
  tHciIO fops;

  /* Register IO bus services */
  fops.Init    = HCI_TL_SPI_Init;
 8002dee:	4b12      	ldr	r3, [pc, #72]	@ (8002e38 <hci_tl_lowlevel_init+0x50>)
 8002df0:	607b      	str	r3, [r7, #4]
  fops.DeInit  = HCI_TL_SPI_DeInit;
 8002df2:	4b12      	ldr	r3, [pc, #72]	@ (8002e3c <hci_tl_lowlevel_init+0x54>)
 8002df4:	60bb      	str	r3, [r7, #8]
  fops.Send    = HCI_TL_SPI_Send;
 8002df6:	4b12      	ldr	r3, [pc, #72]	@ (8002e40 <hci_tl_lowlevel_init+0x58>)
 8002df8:	617b      	str	r3, [r7, #20]
  fops.Receive = HCI_TL_SPI_Receive;
 8002dfa:	4b12      	ldr	r3, [pc, #72]	@ (8002e44 <hci_tl_lowlevel_init+0x5c>)
 8002dfc:	613b      	str	r3, [r7, #16]
  fops.Reset   = HCI_TL_SPI_Reset;
 8002dfe:	4b12      	ldr	r3, [pc, #72]	@ (8002e48 <hci_tl_lowlevel_init+0x60>)
 8002e00:	60fb      	str	r3, [r7, #12]
  fops.GetTick = BSP_GetTick;
 8002e02:	4b12      	ldr	r3, [pc, #72]	@ (8002e4c <hci_tl_lowlevel_init+0x64>)
 8002e04:	61fb      	str	r3, [r7, #28]

  hci_register_io_bus (&fops);
 8002e06:	1d3b      	adds	r3, r7, #4
 8002e08:	4618      	mov	r0, r3
 8002e0a:	f007 fa17 	bl	800a23c <hci_register_io_bus>
  /* USER CODE BEGIN hci_tl_lowlevel_init 2 */

  /* USER CODE END hci_tl_lowlevel_init 2 */

  /* Register event irq handler */
  HAL_EXTI_GetHandle(&hexti6, EXTI_LINE_6);
 8002e0e:	4910      	ldr	r1, [pc, #64]	@ (8002e50 <hci_tl_lowlevel_init+0x68>)
 8002e10:	4810      	ldr	r0, [pc, #64]	@ (8002e54 <hci_tl_lowlevel_init+0x6c>)
 8002e12:	f001 ff95 	bl	8004d40 <HAL_EXTI_GetHandle>
  HAL_EXTI_RegisterCallback(&hexti6, HAL_EXTI_COMMON_CB_ID, hci_tl_lowlevel_isr);
 8002e16:	4a10      	ldr	r2, [pc, #64]	@ (8002e58 <hci_tl_lowlevel_init+0x70>)
 8002e18:	2100      	movs	r1, #0
 8002e1a:	480e      	ldr	r0, [pc, #56]	@ (8002e54 <hci_tl_lowlevel_init+0x6c>)
 8002e1c:	f001 ff76 	bl	8004d0c <HAL_EXTI_RegisterCallback>
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8002e20:	2200      	movs	r2, #0
 8002e22:	2100      	movs	r1, #0
 8002e24:	2017      	movs	r0, #23
 8002e26:	f001 fe2e 	bl	8004a86 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8002e2a:	2017      	movs	r0, #23
 8002e2c:	f001 fe47 	bl	8004abe <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN hci_tl_lowlevel_init 3 */

  /* USER CODE END hci_tl_lowlevel_init 3 */

}
 8002e30:	bf00      	nop
 8002e32:	3720      	adds	r7, #32
 8002e34:	46bd      	mov	sp, r7
 8002e36:	bd80      	pop	{r7, pc}
 8002e38:	08002b71 	.word	0x08002b71
 8002e3c:	08002c05 	.word	0x08002c05
 8002e40:	08002d29 	.word	0x08002d29
 8002e44:	08002c79 	.word	0x08002c79
 8002e48:	08002c35 	.word	0x08002c35
 8002e4c:	08004381 	.word	0x08004381
 8002e50:	16000006 	.word	0x16000006
 8002e54:	200002c0 	.word	0x200002c0
 8002e58:	08002e5d 	.word	0x08002e5d

08002e5c <hci_tl_lowlevel_isr>:
  *
  * @param  None
  * @retval None
  */
void hci_tl_lowlevel_isr(void)
{
 8002e5c:	b580      	push	{r7, lr}
 8002e5e:	af00      	add	r7, sp, #0
  /* Call hci_notify_asynch_evt() */
  while(IsDataAvailable())
 8002e60:	e005      	b.n	8002e6e <hci_tl_lowlevel_isr+0x12>
  {
    if (hci_notify_asynch_evt(NULL))
 8002e62:	2000      	movs	r0, #0
 8002e64:	f007 fb4e 	bl	800a504 <hci_notify_asynch_evt>
 8002e68:	4603      	mov	r3, r0
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d105      	bne.n	8002e7a <hci_tl_lowlevel_isr+0x1e>
  while(IsDataAvailable())
 8002e6e:	f7ff ffab 	bl	8002dc8 <IsDataAvailable>
 8002e72:	4603      	mov	r3, r0
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d1f4      	bne.n	8002e62 <hci_tl_lowlevel_isr+0x6>
 8002e78:	e000      	b.n	8002e7c <hci_tl_lowlevel_isr+0x20>
    {
      return;
 8002e7a:	bf00      	nop
  }

  /* USER CODE BEGIN hci_tl_lowlevel_isr */

  /* USER CODE END hci_tl_lowlevel_isr */
}
 8002e7c:	bd80      	pop	{r7, pc}
	...

08002e80 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002e80:	b580      	push	{r7, lr}
 8002e82:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002e84:	f001 fc8c 	bl	80047a0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002e88:	f000 f826 	bl	8002ed8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002e8c:	f000 f980 	bl	8003190 <MX_GPIO_Init>
  MX_DFSDM1_Init();
 8002e90:	f000 f884 	bl	8002f9c <MX_DFSDM1_Init>
  MX_I2C2_Init();
 8002e94:	f000 f8ba 	bl	800300c <MX_I2C2_Init>
  MX_QUADSPI_Init();
 8002e98:	f000 f8f6 	bl	8003088 <MX_QUADSPI_Init>
  MX_USART3_UART_Init();
 8002e9c:	f000 f91a 	bl	80030d4 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8002ea0:	f000 f948 	bl	8003134 <MX_USB_OTG_FS_PCD_Init>
  MX_BlueNRG_MS_Init();
 8002ea4:	f7fe f8bc 	bl	8001020 <MX_BlueNRG_MS_Init>
  /* USER CODE BEGIN 2 */

  BSP_ACCELERO_Init();
 8002ea8:	f001 fb0c 	bl	80044c4 <BSP_ACCELERO_Init>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */

  MX_BlueNRG_MS_Process();
 8002eac:	f7fe f964 	bl	8001178 <MX_BlueNRG_MS_Process>
    /* USER CODE BEGIN 3 */

  BSP_ACCELERO_AccGetXYZ(pDataXYZ);
 8002eb0:	4807      	ldr	r0, [pc, #28]	@ (8002ed0 <main+0x50>)
 8002eb2:	f001 fb47 	bl	8004544 <BSP_ACCELERO_AccGetXYZ>
  HAL_Delay(sampling_delay*10);
 8002eb6:	4b07      	ldr	r3, [pc, #28]	@ (8002ed4 <main+0x54>)
 8002eb8:	781b      	ldrb	r3, [r3, #0]
 8002eba:	461a      	mov	r2, r3
 8002ebc:	4613      	mov	r3, r2
 8002ebe:	009b      	lsls	r3, r3, #2
 8002ec0:	4413      	add	r3, r2
 8002ec2:	005b      	lsls	r3, r3, #1
 8002ec4:	4618      	mov	r0, r3
 8002ec6:	f001 fcdf 	bl	8004888 <HAL_Delay>
  MX_BlueNRG_MS_Process();
 8002eca:	bf00      	nop
 8002ecc:	e7ee      	b.n	8002eac <main+0x2c>
 8002ece:	bf00      	nop
 8002ed0:	20000a04 	.word	0x20000a04
 8002ed4:	20000002 	.word	0x20000002

08002ed8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002ed8:	b580      	push	{r7, lr}
 8002eda:	b096      	sub	sp, #88	@ 0x58
 8002edc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002ede:	f107 0314 	add.w	r3, r7, #20
 8002ee2:	2244      	movs	r2, #68	@ 0x44
 8002ee4:	2100      	movs	r1, #0
 8002ee6:	4618      	mov	r0, r3
 8002ee8:	f008 fc67 	bl	800b7ba <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002eec:	463b      	mov	r3, r7
 8002eee:	2200      	movs	r2, #0
 8002ef0:	601a      	str	r2, [r3, #0]
 8002ef2:	605a      	str	r2, [r3, #4]
 8002ef4:	609a      	str	r2, [r3, #8]
 8002ef6:	60da      	str	r2, [r3, #12]
 8002ef8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8002efa:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8002efe:	f003 fa11 	bl	8006324 <HAL_PWREx_ControlVoltageScaling>
 8002f02:	4603      	mov	r3, r0
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d001      	beq.n	8002f0c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8002f08:	f000 fae4 	bl	80034d4 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8002f0c:	f003 f9ec 	bl	80062e8 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8002f10:	4b21      	ldr	r3, [pc, #132]	@ (8002f98 <SystemClock_Config+0xc0>)
 8002f12:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002f16:	4a20      	ldr	r2, [pc, #128]	@ (8002f98 <SystemClock_Config+0xc0>)
 8002f18:	f023 0318 	bic.w	r3, r3, #24
 8002f1c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8002f20:	2314      	movs	r3, #20
 8002f22:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8002f24:	2301      	movs	r3, #1
 8002f26:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8002f28:	2301      	movs	r3, #1
 8002f2a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8002f2c:	2300      	movs	r3, #0
 8002f2e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8002f30:	2360      	movs	r3, #96	@ 0x60
 8002f32:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002f34:	2302      	movs	r3, #2
 8002f36:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8002f38:	2301      	movs	r3, #1
 8002f3a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8002f3c:	2301      	movs	r3, #1
 8002f3e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 8002f40:	2328      	movs	r3, #40	@ 0x28
 8002f42:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8002f44:	2307      	movs	r3, #7
 8002f46:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8002f48:	2302      	movs	r3, #2
 8002f4a:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8002f4c:	2302      	movs	r3, #2
 8002f4e:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002f50:	f107 0314 	add.w	r3, r7, #20
 8002f54:	4618      	mov	r0, r3
 8002f56:	f003 fb07 	bl	8006568 <HAL_RCC_OscConfig>
 8002f5a:	4603      	mov	r3, r0
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d001      	beq.n	8002f64 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8002f60:	f000 fab8 	bl	80034d4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002f64:	230f      	movs	r3, #15
 8002f66:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002f68:	2303      	movs	r3, #3
 8002f6a:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002f6c:	2300      	movs	r3, #0
 8002f6e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002f70:	2300      	movs	r3, #0
 8002f72:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002f74:	2300      	movs	r3, #0
 8002f76:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8002f78:	463b      	mov	r3, r7
 8002f7a:	2104      	movs	r1, #4
 8002f7c:	4618      	mov	r0, r3
 8002f7e:	f003 fecf 	bl	8006d20 <HAL_RCC_ClockConfig>
 8002f82:	4603      	mov	r3, r0
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d001      	beq.n	8002f8c <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8002f88:	f000 faa4 	bl	80034d4 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8002f8c:	f004 fbd6 	bl	800773c <HAL_RCCEx_EnableMSIPLLMode>
}
 8002f90:	bf00      	nop
 8002f92:	3758      	adds	r7, #88	@ 0x58
 8002f94:	46bd      	mov	sp, r7
 8002f96:	bd80      	pop	{r7, pc}
 8002f98:	40021000 	.word	0x40021000

08002f9c <MX_DFSDM1_Init>:
  * @brief DFSDM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DFSDM1_Init(void)
{
 8002f9c:	b580      	push	{r7, lr}
 8002f9e:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */

  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_channel1.Instance = DFSDM1_Channel1;
 8002fa0:	4b18      	ldr	r3, [pc, #96]	@ (8003004 <MX_DFSDM1_Init+0x68>)
 8002fa2:	4a19      	ldr	r2, [pc, #100]	@ (8003008 <MX_DFSDM1_Init+0x6c>)
 8002fa4:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel1.Init.OutputClock.Activation = ENABLE;
 8002fa6:	4b17      	ldr	r3, [pc, #92]	@ (8003004 <MX_DFSDM1_Init+0x68>)
 8002fa8:	2201      	movs	r2, #1
 8002faa:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel1.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 8002fac:	4b15      	ldr	r3, [pc, #84]	@ (8003004 <MX_DFSDM1_Init+0x68>)
 8002fae:	2200      	movs	r2, #0
 8002fb0:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel1.Init.OutputClock.Divider = 2;
 8002fb2:	4b14      	ldr	r3, [pc, #80]	@ (8003004 <MX_DFSDM1_Init+0x68>)
 8002fb4:	2202      	movs	r2, #2
 8002fb6:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel1.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 8002fb8:	4b12      	ldr	r3, [pc, #72]	@ (8003004 <MX_DFSDM1_Init+0x68>)
 8002fba:	2200      	movs	r2, #0
 8002fbc:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel1.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 8002fbe:	4b11      	ldr	r3, [pc, #68]	@ (8003004 <MX_DFSDM1_Init+0x68>)
 8002fc0:	2200      	movs	r2, #0
 8002fc2:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel1.Init.Input.Pins = DFSDM_CHANNEL_FOLLOWING_CHANNEL_PINS;
 8002fc4:	4b0f      	ldr	r3, [pc, #60]	@ (8003004 <MX_DFSDM1_Init+0x68>)
 8002fc6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002fca:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel1.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 8002fcc:	4b0d      	ldr	r3, [pc, #52]	@ (8003004 <MX_DFSDM1_Init+0x68>)
 8002fce:	2200      	movs	r2, #0
 8002fd0:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel1.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 8002fd2:	4b0c      	ldr	r3, [pc, #48]	@ (8003004 <MX_DFSDM1_Init+0x68>)
 8002fd4:	2204      	movs	r2, #4
 8002fd6:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel1.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 8002fd8:	4b0a      	ldr	r3, [pc, #40]	@ (8003004 <MX_DFSDM1_Init+0x68>)
 8002fda:	2200      	movs	r2, #0
 8002fdc:	625a      	str	r2, [r3, #36]	@ 0x24
  hdfsdm1_channel1.Init.Awd.Oversampling = 1;
 8002fde:	4b09      	ldr	r3, [pc, #36]	@ (8003004 <MX_DFSDM1_Init+0x68>)
 8002fe0:	2201      	movs	r2, #1
 8002fe2:	629a      	str	r2, [r3, #40]	@ 0x28
  hdfsdm1_channel1.Init.Offset = 0;
 8002fe4:	4b07      	ldr	r3, [pc, #28]	@ (8003004 <MX_DFSDM1_Init+0x68>)
 8002fe6:	2200      	movs	r2, #0
 8002fe8:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdfsdm1_channel1.Init.RightBitShift = 0x00;
 8002fea:	4b06      	ldr	r3, [pc, #24]	@ (8003004 <MX_DFSDM1_Init+0x68>)
 8002fec:	2200      	movs	r2, #0
 8002fee:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel1) != HAL_OK)
 8002ff0:	4804      	ldr	r0, [pc, #16]	@ (8003004 <MX_DFSDM1_Init+0x68>)
 8002ff2:	f001 fd7f 	bl	8004af4 <HAL_DFSDM_ChannelInit>
 8002ff6:	4603      	mov	r3, r0
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d001      	beq.n	8003000 <MX_DFSDM1_Init+0x64>
  {
    Error_Handler();
 8002ffc:	f000 fa6a 	bl	80034d4 <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM1_Init 2 */

  /* USER CODE END DFSDM1_Init 2 */

}
 8003000:	bf00      	nop
 8003002:	bd80      	pop	{r7, pc}
 8003004:	200003c8 	.word	0x200003c8
 8003008:	40016020 	.word	0x40016020

0800300c <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 800300c:	b580      	push	{r7, lr}
 800300e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8003010:	4b1b      	ldr	r3, [pc, #108]	@ (8003080 <MX_I2C2_Init+0x74>)
 8003012:	4a1c      	ldr	r2, [pc, #112]	@ (8003084 <MX_I2C2_Init+0x78>)
 8003014:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00000E14;
 8003016:	4b1a      	ldr	r3, [pc, #104]	@ (8003080 <MX_I2C2_Init+0x74>)
 8003018:	f640 6214 	movw	r2, #3604	@ 0xe14
 800301c:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 800301e:	4b18      	ldr	r3, [pc, #96]	@ (8003080 <MX_I2C2_Init+0x74>)
 8003020:	2200      	movs	r2, #0
 8003022:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003024:	4b16      	ldr	r3, [pc, #88]	@ (8003080 <MX_I2C2_Init+0x74>)
 8003026:	2201      	movs	r2, #1
 8003028:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800302a:	4b15      	ldr	r3, [pc, #84]	@ (8003080 <MX_I2C2_Init+0x74>)
 800302c:	2200      	movs	r2, #0
 800302e:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8003030:	4b13      	ldr	r3, [pc, #76]	@ (8003080 <MX_I2C2_Init+0x74>)
 8003032:	2200      	movs	r2, #0
 8003034:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8003036:	4b12      	ldr	r3, [pc, #72]	@ (8003080 <MX_I2C2_Init+0x74>)
 8003038:	2200      	movs	r2, #0
 800303a:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800303c:	4b10      	ldr	r3, [pc, #64]	@ (8003080 <MX_I2C2_Init+0x74>)
 800303e:	2200      	movs	r2, #0
 8003040:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003042:	4b0f      	ldr	r3, [pc, #60]	@ (8003080 <MX_I2C2_Init+0x74>)
 8003044:	2200      	movs	r2, #0
 8003046:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8003048:	480d      	ldr	r0, [pc, #52]	@ (8003080 <MX_I2C2_Init+0x74>)
 800304a:	f002 f9c8 	bl	80053de <HAL_I2C_Init>
 800304e:	4603      	mov	r3, r0
 8003050:	2b00      	cmp	r3, #0
 8003052:	d001      	beq.n	8003058 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8003054:	f000 fa3e 	bl	80034d4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8003058:	2100      	movs	r1, #0
 800305a:	4809      	ldr	r0, [pc, #36]	@ (8003080 <MX_I2C2_Init+0x74>)
 800305c:	f002 ff7a 	bl	8005f54 <HAL_I2CEx_ConfigAnalogFilter>
 8003060:	4603      	mov	r3, r0
 8003062:	2b00      	cmp	r3, #0
 8003064:	d001      	beq.n	800306a <MX_I2C2_Init+0x5e>
  {
    Error_Handler();
 8003066:	f000 fa35 	bl	80034d4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 800306a:	2100      	movs	r1, #0
 800306c:	4804      	ldr	r0, [pc, #16]	@ (8003080 <MX_I2C2_Init+0x74>)
 800306e:	f002 ffbc 	bl	8005fea <HAL_I2CEx_ConfigDigitalFilter>
 8003072:	4603      	mov	r3, r0
 8003074:	2b00      	cmp	r3, #0
 8003076:	d001      	beq.n	800307c <MX_I2C2_Init+0x70>
  {
    Error_Handler();
 8003078:	f000 fa2c 	bl	80034d4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800307c:	bf00      	nop
 800307e:	bd80      	pop	{r7, pc}
 8003080:	20000400 	.word	0x20000400
 8003084:	40005800 	.word	0x40005800

08003088 <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 8003088:	b580      	push	{r7, lr}
 800308a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 800308c:	4b0f      	ldr	r3, [pc, #60]	@ (80030cc <MX_QUADSPI_Init+0x44>)
 800308e:	4a10      	ldr	r2, [pc, #64]	@ (80030d0 <MX_QUADSPI_Init+0x48>)
 8003090:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 2;
 8003092:	4b0e      	ldr	r3, [pc, #56]	@ (80030cc <MX_QUADSPI_Init+0x44>)
 8003094:	2202      	movs	r2, #2
 8003096:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 4;
 8003098:	4b0c      	ldr	r3, [pc, #48]	@ (80030cc <MX_QUADSPI_Init+0x44>)
 800309a:	2204      	movs	r2, #4
 800309c:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 800309e:	4b0b      	ldr	r3, [pc, #44]	@ (80030cc <MX_QUADSPI_Init+0x44>)
 80030a0:	2210      	movs	r2, #16
 80030a2:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 23;
 80030a4:	4b09      	ldr	r3, [pc, #36]	@ (80030cc <MX_QUADSPI_Init+0x44>)
 80030a6:	2217      	movs	r2, #23
 80030a8:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 80030aa:	4b08      	ldr	r3, [pc, #32]	@ (80030cc <MX_QUADSPI_Init+0x44>)
 80030ac:	2200      	movs	r2, #0
 80030ae:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 80030b0:	4b06      	ldr	r3, [pc, #24]	@ (80030cc <MX_QUADSPI_Init+0x44>)
 80030b2:	2200      	movs	r2, #0
 80030b4:	619a      	str	r2, [r3, #24]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 80030b6:	4805      	ldr	r0, [pc, #20]	@ (80030cc <MX_QUADSPI_Init+0x44>)
 80030b8:	f003 f99a 	bl	80063f0 <HAL_QSPI_Init>
 80030bc:	4603      	mov	r3, r0
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d001      	beq.n	80030c6 <MX_QUADSPI_Init+0x3e>
  {
    Error_Handler();
 80030c2:	f000 fa07 	bl	80034d4 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 80030c6:	bf00      	nop
 80030c8:	bd80      	pop	{r7, pc}
 80030ca:	bf00      	nop
 80030cc:	20000454 	.word	0x20000454
 80030d0:	a0001000 	.word	0xa0001000

080030d4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80030d4:	b580      	push	{r7, lr}
 80030d6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80030d8:	4b14      	ldr	r3, [pc, #80]	@ (800312c <MX_USART3_UART_Init+0x58>)
 80030da:	4a15      	ldr	r2, [pc, #84]	@ (8003130 <MX_USART3_UART_Init+0x5c>)
 80030dc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80030de:	4b13      	ldr	r3, [pc, #76]	@ (800312c <MX_USART3_UART_Init+0x58>)
 80030e0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80030e4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80030e6:	4b11      	ldr	r3, [pc, #68]	@ (800312c <MX_USART3_UART_Init+0x58>)
 80030e8:	2200      	movs	r2, #0
 80030ea:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80030ec:	4b0f      	ldr	r3, [pc, #60]	@ (800312c <MX_USART3_UART_Init+0x58>)
 80030ee:	2200      	movs	r2, #0
 80030f0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80030f2:	4b0e      	ldr	r3, [pc, #56]	@ (800312c <MX_USART3_UART_Init+0x58>)
 80030f4:	2200      	movs	r2, #0
 80030f6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80030f8:	4b0c      	ldr	r3, [pc, #48]	@ (800312c <MX_USART3_UART_Init+0x58>)
 80030fa:	220c      	movs	r2, #12
 80030fc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80030fe:	4b0b      	ldr	r3, [pc, #44]	@ (800312c <MX_USART3_UART_Init+0x58>)
 8003100:	2200      	movs	r2, #0
 8003102:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8003104:	4b09      	ldr	r3, [pc, #36]	@ (800312c <MX_USART3_UART_Init+0x58>)
 8003106:	2200      	movs	r2, #0
 8003108:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800310a:	4b08      	ldr	r3, [pc, #32]	@ (800312c <MX_USART3_UART_Init+0x58>)
 800310c:	2200      	movs	r2, #0
 800310e:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003110:	4b06      	ldr	r3, [pc, #24]	@ (800312c <MX_USART3_UART_Init+0x58>)
 8003112:	2200      	movs	r2, #0
 8003114:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8003116:	4805      	ldr	r0, [pc, #20]	@ (800312c <MX_USART3_UART_Init+0x58>)
 8003118:	f005 f930 	bl	800837c <HAL_UART_Init>
 800311c:	4603      	mov	r3, r0
 800311e:	2b00      	cmp	r3, #0
 8003120:	d001      	beq.n	8003126 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8003122:	f000 f9d7 	bl	80034d4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8003126:	bf00      	nop
 8003128:	bd80      	pop	{r7, pc}
 800312a:	bf00      	nop
 800312c:	20000498 	.word	0x20000498
 8003130:	40004800 	.word	0x40004800

08003134 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8003134:	b580      	push	{r7, lr}
 8003136:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8003138:	4b14      	ldr	r3, [pc, #80]	@ (800318c <MX_USB_OTG_FS_PCD_Init+0x58>)
 800313a:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800313e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8003140:	4b12      	ldr	r3, [pc, #72]	@ (800318c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8003142:	2206      	movs	r2, #6
 8003144:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8003146:	4b11      	ldr	r3, [pc, #68]	@ (800318c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8003148:	2202      	movs	r2, #2
 800314a:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800314c:	4b0f      	ldr	r3, [pc, #60]	@ (800318c <MX_USB_OTG_FS_PCD_Init+0x58>)
 800314e:	2202      	movs	r2, #2
 8003150:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8003152:	4b0e      	ldr	r3, [pc, #56]	@ (800318c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8003154:	2200      	movs	r2, #0
 8003156:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8003158:	4b0c      	ldr	r3, [pc, #48]	@ (800318c <MX_USB_OTG_FS_PCD_Init+0x58>)
 800315a:	2200      	movs	r2, #0
 800315c:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800315e:	4b0b      	ldr	r3, [pc, #44]	@ (800318c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8003160:	2200      	movs	r2, #0
 8003162:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 8003164:	4b09      	ldr	r3, [pc, #36]	@ (800318c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8003166:	2200      	movs	r2, #0
 8003168:	735a      	strb	r2, [r3, #13]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800316a:	4b08      	ldr	r3, [pc, #32]	@ (800318c <MX_USB_OTG_FS_PCD_Init+0x58>)
 800316c:	2200      	movs	r2, #0
 800316e:	73da      	strb	r2, [r3, #15]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8003170:	4b06      	ldr	r3, [pc, #24]	@ (800318c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8003172:	2200      	movs	r2, #0
 8003174:	739a      	strb	r2, [r3, #14]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8003176:	4805      	ldr	r0, [pc, #20]	@ (800318c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8003178:	f002 ff83 	bl	8006082 <HAL_PCD_Init>
 800317c:	4603      	mov	r3, r0
 800317e:	2b00      	cmp	r3, #0
 8003180:	d001      	beq.n	8003186 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8003182:	f000 f9a7 	bl	80034d4 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8003186:	bf00      	nop
 8003188:	bd80      	pop	{r7, pc}
 800318a:	bf00      	nop
 800318c:	20000520 	.word	0x20000520

08003190 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003190:	b580      	push	{r7, lr}
 8003192:	b08a      	sub	sp, #40	@ 0x28
 8003194:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003196:	f107 0314 	add.w	r3, r7, #20
 800319a:	2200      	movs	r2, #0
 800319c:	601a      	str	r2, [r3, #0]
 800319e:	605a      	str	r2, [r3, #4]
 80031a0:	609a      	str	r2, [r3, #8]
 80031a2:	60da      	str	r2, [r3, #12]
 80031a4:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80031a6:	4bbd      	ldr	r3, [pc, #756]	@ (800349c <MX_GPIO_Init+0x30c>)
 80031a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80031aa:	4abc      	ldr	r2, [pc, #752]	@ (800349c <MX_GPIO_Init+0x30c>)
 80031ac:	f043 0310 	orr.w	r3, r3, #16
 80031b0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80031b2:	4bba      	ldr	r3, [pc, #744]	@ (800349c <MX_GPIO_Init+0x30c>)
 80031b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80031b6:	f003 0310 	and.w	r3, r3, #16
 80031ba:	613b      	str	r3, [r7, #16]
 80031bc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80031be:	4bb7      	ldr	r3, [pc, #732]	@ (800349c <MX_GPIO_Init+0x30c>)
 80031c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80031c2:	4ab6      	ldr	r2, [pc, #728]	@ (800349c <MX_GPIO_Init+0x30c>)
 80031c4:	f043 0304 	orr.w	r3, r3, #4
 80031c8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80031ca:	4bb4      	ldr	r3, [pc, #720]	@ (800349c <MX_GPIO_Init+0x30c>)
 80031cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80031ce:	f003 0304 	and.w	r3, r3, #4
 80031d2:	60fb      	str	r3, [r7, #12]
 80031d4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80031d6:	4bb1      	ldr	r3, [pc, #708]	@ (800349c <MX_GPIO_Init+0x30c>)
 80031d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80031da:	4ab0      	ldr	r2, [pc, #704]	@ (800349c <MX_GPIO_Init+0x30c>)
 80031dc:	f043 0301 	orr.w	r3, r3, #1
 80031e0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80031e2:	4bae      	ldr	r3, [pc, #696]	@ (800349c <MX_GPIO_Init+0x30c>)
 80031e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80031e6:	f003 0301 	and.w	r3, r3, #1
 80031ea:	60bb      	str	r3, [r7, #8]
 80031ec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80031ee:	4bab      	ldr	r3, [pc, #684]	@ (800349c <MX_GPIO_Init+0x30c>)
 80031f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80031f2:	4aaa      	ldr	r2, [pc, #680]	@ (800349c <MX_GPIO_Init+0x30c>)
 80031f4:	f043 0302 	orr.w	r3, r3, #2
 80031f8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80031fa:	4ba8      	ldr	r3, [pc, #672]	@ (800349c <MX_GPIO_Init+0x30c>)
 80031fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80031fe:	f003 0302 	and.w	r3, r3, #2
 8003202:	607b      	str	r3, [r7, #4]
 8003204:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003206:	4ba5      	ldr	r3, [pc, #660]	@ (800349c <MX_GPIO_Init+0x30c>)
 8003208:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800320a:	4aa4      	ldr	r2, [pc, #656]	@ (800349c <MX_GPIO_Init+0x30c>)
 800320c:	f043 0308 	orr.w	r3, r3, #8
 8003210:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003212:	4ba2      	ldr	r3, [pc, #648]	@ (800349c <MX_GPIO_Init+0x30c>)
 8003214:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003216:	f003 0308 	and.w	r3, r3, #8
 800321a:	603b      	str	r3, [r7, #0]
 800321c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin, GPIO_PIN_RESET);
 800321e:	2200      	movs	r2, #0
 8003220:	f44f 718a 	mov.w	r1, #276	@ 0x114
 8003224:	489e      	ldr	r0, [pc, #632]	@ (80034a0 <MX_GPIO_Init+0x310>)
 8003226:	f002 f885 	bl	8005334 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ARD_D10_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin, GPIO_PIN_RESET);
 800322a:	2200      	movs	r2, #0
 800322c:	f248 1104 	movw	r1, #33028	@ 0x8104
 8003230:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003234:	f002 f87e 	bl	8005334 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|SPSGRF_915_SDN_Pin
 8003238:	2200      	movs	r2, #0
 800323a:	f24b 0114 	movw	r1, #45076	@ 0xb014
 800323e:	4899      	ldr	r0, [pc, #612]	@ (80034a4 <MX_GPIO_Init+0x314>)
 8003240:	f002 f878 	bl	8005334 <HAL_GPIO_WritePin>
                          |ARD_D5_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, USB_OTG_FS_PWR_EN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin, GPIO_PIN_RESET);
 8003244:	2200      	movs	r2, #0
 8003246:	f241 0181 	movw	r1, #4225	@ 0x1081
 800324a:	4897      	ldr	r0, [pc, #604]	@ (80034a8 <MX_GPIO_Init+0x318>)
 800324c:	f002 f872 	bl	8005334 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPBTLE_RF_SPI3_CSN_GPIO_Port, SPBTLE_RF_SPI3_CSN_Pin, GPIO_PIN_SET);
 8003250:	2201      	movs	r2, #1
 8003252:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8003256:	4894      	ldr	r0, [pc, #592]	@ (80034a8 <MX_GPIO_Init+0x318>)
 8003258:	f002 f86c 	bl	8005334 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin, GPIO_PIN_RESET);
 800325c:	2200      	movs	r2, #0
 800325e:	f44f 7110 	mov.w	r1, #576	@ 0x240
 8003262:	4892      	ldr	r0, [pc, #584]	@ (80034ac <MX_GPIO_Init+0x31c>)
 8003264:	f002 f866 	bl	8005334 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPSGRF_915_SPI3_CSN_GPIO_Port, SPSGRF_915_SPI3_CSN_Pin, GPIO_PIN_SET);
 8003268:	2201      	movs	r2, #1
 800326a:	2120      	movs	r1, #32
 800326c:	488d      	ldr	r0, [pc, #564]	@ (80034a4 <MX_GPIO_Init+0x314>)
 800326e:	f002 f861 	bl	8005334 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ISM43362_SPI3_CSN_GPIO_Port, ISM43362_SPI3_CSN_Pin, GPIO_PIN_SET);
 8003272:	2201      	movs	r2, #1
 8003274:	2101      	movs	r1, #1
 8003276:	488a      	ldr	r0, [pc, #552]	@ (80034a0 <MX_GPIO_Init+0x310>)
 8003278:	f002 f85c 	bl	8005334 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : M24SR64_Y_RF_DISABLE_Pin M24SR64_Y_GPO_Pin ISM43362_RST_Pin ISM43362_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin|ISM43362_SPI3_CSN_Pin;
 800327c:	f240 1315 	movw	r3, #277	@ 0x115
 8003280:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003282:	2301      	movs	r3, #1
 8003284:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003286:	2300      	movs	r3, #0
 8003288:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800328a:	2300      	movs	r3, #0
 800328c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800328e:	f107 0314 	add.w	r3, r7, #20
 8003292:	4619      	mov	r1, r3
 8003294:	4882      	ldr	r0, [pc, #520]	@ (80034a0 <MX_GPIO_Init+0x310>)
 8003296:	f001 fd97 	bl	8004dc8 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_OVRCR_EXTI3_Pin SPSGRF_915_GPIO3_EXTI5_Pin SPBTLE_RF_IRQ_EXTI6_Pin ISM43362_DRDY_EXTI1_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVRCR_EXTI3_Pin|SPSGRF_915_GPIO3_EXTI5_Pin|SPBTLE_RF_IRQ_EXTI6_Pin|ISM43362_DRDY_EXTI1_Pin;
 800329a:	236a      	movs	r3, #106	@ 0x6a
 800329c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800329e:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80032a2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032a4:	2300      	movs	r3, #0
 80032a6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80032a8:	f107 0314 	add.w	r3, r7, #20
 80032ac:	4619      	mov	r1, r3
 80032ae:	487c      	ldr	r0, [pc, #496]	@ (80034a0 <MX_GPIO_Init+0x310>)
 80032b0:	f001 fd8a 	bl	8004dc8 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_A5_Pin ARD_A4_Pin ARD_A3_Pin ARD_A2_Pin
                           ARD_A1_Pin ARD_A0_Pin */
  GPIO_InitStruct.Pin = ARD_A5_Pin|ARD_A4_Pin|ARD_A3_Pin|ARD_A2_Pin
 80032b4:	233f      	movs	r3, #63	@ 0x3f
 80032b6:	617b      	str	r3, [r7, #20]
                          |ARD_A1_Pin|ARD_A0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80032b8:	230b      	movs	r3, #11
 80032ba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032bc:	2300      	movs	r3, #0
 80032be:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80032c0:	f107 0314 	add.w	r3, r7, #20
 80032c4:	4619      	mov	r1, r3
 80032c6:	4879      	ldr	r0, [pc, #484]	@ (80034ac <MX_GPIO_Init+0x31c>)
 80032c8:	f001 fd7e 	bl	8004dc8 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D1_Pin ARD_D0_Pin */
  GPIO_InitStruct.Pin = ARD_D1_Pin|ARD_D0_Pin;
 80032cc:	2303      	movs	r3, #3
 80032ce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032d0:	2302      	movs	r3, #2
 80032d2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032d4:	2300      	movs	r3, #0
 80032d6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80032d8:	2303      	movs	r3, #3
 80032da:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80032dc:	2308      	movs	r3, #8
 80032de:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80032e0:	f107 0314 	add.w	r3, r7, #20
 80032e4:	4619      	mov	r1, r3
 80032e6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80032ea:	f001 fd6d 	bl	8004dc8 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D10_Pin SPBTLE_RF_RST_Pin ARD_D9_Pin */
  GPIO_InitStruct.Pin = ARD_D10_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin;
 80032ee:	f248 1304 	movw	r3, #33028	@ 0x8104
 80032f2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80032f4:	2301      	movs	r3, #1
 80032f6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032f8:	2300      	movs	r3, #0
 80032fa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80032fc:	2300      	movs	r3, #0
 80032fe:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003300:	f107 0314 	add.w	r3, r7, #20
 8003304:	4619      	mov	r1, r3
 8003306:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800330a:	f001 fd5d 	bl	8004dc8 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D4_Pin */
  GPIO_InitStruct.Pin = ARD_D4_Pin;
 800330e:	2308      	movs	r3, #8
 8003310:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003312:	2302      	movs	r3, #2
 8003314:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003316:	2300      	movs	r3, #0
 8003318:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800331a:	2300      	movs	r3, #0
 800331c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800331e:	2301      	movs	r3, #1
 8003320:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(ARD_D4_GPIO_Port, &GPIO_InitStruct);
 8003322:	f107 0314 	add.w	r3, r7, #20
 8003326:	4619      	mov	r1, r3
 8003328:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800332c:	f001 fd4c 	bl	8004dc8 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D7_Pin */
  GPIO_InitStruct.Pin = ARD_D7_Pin;
 8003330:	2310      	movs	r3, #16
 8003332:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8003334:	230b      	movs	r3, #11
 8003336:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003338:	2300      	movs	r3, #0
 800333a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D7_GPIO_Port, &GPIO_InitStruct);
 800333c:	f107 0314 	add.w	r3, r7, #20
 8003340:	4619      	mov	r1, r3
 8003342:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003346:	f001 fd3f 	bl	8004dc8 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D13_Pin ARD_D12_Pin ARD_D11_Pin */
  GPIO_InitStruct.Pin = ARD_D13_Pin|ARD_D12_Pin|ARD_D11_Pin;
 800334a:	23e0      	movs	r3, #224	@ 0xe0
 800334c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800334e:	2302      	movs	r3, #2
 8003350:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003352:	2300      	movs	r3, #0
 8003354:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003356:	2303      	movs	r3, #3
 8003358:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800335a:	2305      	movs	r3, #5
 800335c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800335e:	f107 0314 	add.w	r3, r7, #20
 8003362:	4619      	mov	r1, r3
 8003364:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003368:	f001 fd2e 	bl	8004dc8 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D3_Pin */
  GPIO_InitStruct.Pin = ARD_D3_Pin;
 800336c:	2301      	movs	r3, #1
 800336e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003370:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8003374:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003376:	2300      	movs	r3, #0
 8003378:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D3_GPIO_Port, &GPIO_InitStruct);
 800337a:	f107 0314 	add.w	r3, r7, #20
 800337e:	4619      	mov	r1, r3
 8003380:	4848      	ldr	r0, [pc, #288]	@ (80034a4 <MX_GPIO_Init+0x314>)
 8003382:	f001 fd21 	bl	8004dc8 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D6_Pin */
  GPIO_InitStruct.Pin = ARD_D6_Pin;
 8003386:	2302      	movs	r3, #2
 8003388:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 800338a:	230b      	movs	r3, #11
 800338c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800338e:	2300      	movs	r3, #0
 8003390:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D6_GPIO_Port, &GPIO_InitStruct);
 8003392:	f107 0314 	add.w	r3, r7, #20
 8003396:	4619      	mov	r1, r3
 8003398:	4842      	ldr	r0, [pc, #264]	@ (80034a4 <MX_GPIO_Init+0x314>)
 800339a:	f001 fd15 	bl	8004dc8 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D8_Pin ISM43362_BOOT0_Pin ISM43362_WAKEUP_Pin SPSGRF_915_SDN_Pin
                           ARD_D5_Pin SPSGRF_915_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|SPSGRF_915_SDN_Pin
 800339e:	f24b 0334 	movw	r3, #45108	@ 0xb034
 80033a2:	617b      	str	r3, [r7, #20]
                          |ARD_D5_Pin|SPSGRF_915_SPI3_CSN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80033a4:	2301      	movs	r3, #1
 80033a6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033a8:	2300      	movs	r3, #0
 80033aa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80033ac:	2300      	movs	r3, #0
 80033ae:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80033b0:	f107 0314 	add.w	r3, r7, #20
 80033b4:	4619      	mov	r1, r3
 80033b6:	483b      	ldr	r0, [pc, #236]	@ (80034a4 <MX_GPIO_Init+0x314>)
 80033b8:	f001 fd06 	bl	8004dc8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LPS22HB_INT_DRDY_EXTI0_Pin LSM6DSL_INT1_EXTI11_Pin ARD_D2_Pin HTS221_DRDY_EXTI15_Pin
                           PMOD_IRQ_EXTI12_Pin */
  GPIO_InitStruct.Pin = LPS22HB_INT_DRDY_EXTI0_Pin|LSM6DSL_INT1_EXTI11_Pin|ARD_D2_Pin|HTS221_DRDY_EXTI15_Pin
 80033bc:	f64c 4304 	movw	r3, #52228	@ 0xcc04
 80033c0:	617b      	str	r3, [r7, #20]
                          |PMOD_IRQ_EXTI12_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80033c2:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80033c6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033c8:	2300      	movs	r3, #0
 80033ca:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80033cc:	f107 0314 	add.w	r3, r7, #20
 80033d0:	4619      	mov	r1, r3
 80033d2:	4835      	ldr	r0, [pc, #212]	@ (80034a8 <MX_GPIO_Init+0x318>)
 80033d4:	f001 fcf8 	bl	8004dc8 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_PWR_EN_Pin SPBTLE_RF_SPI3_CSN_Pin PMOD_RESET_Pin STSAFE_A100_RESET_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin|SPBTLE_RF_SPI3_CSN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin;
 80033d8:	f243 0381 	movw	r3, #12417	@ 0x3081
 80033dc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80033de:	2301      	movs	r3, #1
 80033e0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033e2:	2300      	movs	r3, #0
 80033e4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80033e6:	2300      	movs	r3, #0
 80033e8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80033ea:	f107 0314 	add.w	r3, r7, #20
 80033ee:	4619      	mov	r1, r3
 80033f0:	482d      	ldr	r0, [pc, #180]	@ (80034a8 <MX_GPIO_Init+0x318>)
 80033f2:	f001 fce9 	bl	8004dc8 <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_XSHUT_Pin LED3_WIFI__LED4_BLE_Pin */
  GPIO_InitStruct.Pin = VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin;
 80033f6:	f44f 7310 	mov.w	r3, #576	@ 0x240
 80033fa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80033fc:	2301      	movs	r3, #1
 80033fe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003400:	2300      	movs	r3, #0
 8003402:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003404:	2300      	movs	r3, #0
 8003406:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003408:	f107 0314 	add.w	r3, r7, #20
 800340c:	4619      	mov	r1, r3
 800340e:	4827      	ldr	r0, [pc, #156]	@ (80034ac <MX_GPIO_Init+0x31c>)
 8003410:	f001 fcda 	bl	8004dc8 <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_GPIO1_EXTI7_Pin LSM3MDL_DRDY_EXTI8_Pin */
  GPIO_InitStruct.Pin = VL53L0X_GPIO1_EXTI7_Pin|LSM3MDL_DRDY_EXTI8_Pin;
 8003414:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8003418:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800341a:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800341e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003420:	2300      	movs	r3, #0
 8003422:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003424:	f107 0314 	add.w	r3, r7, #20
 8003428:	4619      	mov	r1, r3
 800342a:	4820      	ldr	r0, [pc, #128]	@ (80034ac <MX_GPIO_Init+0x31c>)
 800342c:	f001 fccc 	bl	8004dc8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PMOD_SPI2_SCK_Pin */
  GPIO_InitStruct.Pin = PMOD_SPI2_SCK_Pin;
 8003430:	2302      	movs	r3, #2
 8003432:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003434:	2302      	movs	r3, #2
 8003436:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003438:	2300      	movs	r3, #0
 800343a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800343c:	2303      	movs	r3, #3
 800343e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003440:	2305      	movs	r3, #5
 8003442:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(PMOD_SPI2_SCK_GPIO_Port, &GPIO_InitStruct);
 8003444:	f107 0314 	add.w	r3, r7, #20
 8003448:	4619      	mov	r1, r3
 800344a:	4817      	ldr	r0, [pc, #92]	@ (80034a8 <MX_GPIO_Init+0x318>)
 800344c:	f001 fcbc 	bl	8004dc8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PMOD_UART2_CTS_Pin PMOD_UART2_RTS_Pin PMOD_UART2_TX_Pin PMOD_UART2_RX_Pin */
  GPIO_InitStruct.Pin = PMOD_UART2_CTS_Pin|PMOD_UART2_RTS_Pin|PMOD_UART2_TX_Pin|PMOD_UART2_RX_Pin;
 8003450:	2378      	movs	r3, #120	@ 0x78
 8003452:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003454:	2302      	movs	r3, #2
 8003456:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003458:	2300      	movs	r3, #0
 800345a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800345c:	2303      	movs	r3, #3
 800345e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003460:	2307      	movs	r3, #7
 8003462:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003464:	f107 0314 	add.w	r3, r7, #20
 8003468:	4619      	mov	r1, r3
 800346a:	480f      	ldr	r0, [pc, #60]	@ (80034a8 <MX_GPIO_Init+0x318>)
 800346c:	f001 fcac 	bl	8004dc8 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D15_Pin ARD_D14_Pin */
  GPIO_InitStruct.Pin = ARD_D15_Pin|ARD_D14_Pin;
 8003470:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8003474:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003476:	2312      	movs	r3, #18
 8003478:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800347a:	2300      	movs	r3, #0
 800347c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800347e:	2303      	movs	r3, #3
 8003480:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003482:	2304      	movs	r3, #4
 8003484:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003486:	f107 0314 	add.w	r3, r7, #20
 800348a:	4619      	mov	r1, r3
 800348c:	4805      	ldr	r0, [pc, #20]	@ (80034a4 <MX_GPIO_Init+0x314>)
 800348e:	f001 fc9b 	bl	8004dc8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8003492:	2200      	movs	r2, #0
 8003494:	2100      	movs	r1, #0
 8003496:	2017      	movs	r0, #23
 8003498:	e00a      	b.n	80034b0 <MX_GPIO_Init+0x320>
 800349a:	bf00      	nop
 800349c:	40021000 	.word	0x40021000
 80034a0:	48001000 	.word	0x48001000
 80034a4:	48000400 	.word	0x48000400
 80034a8:	48000c00 	.word	0x48000c00
 80034ac:	48000800 	.word	0x48000800
 80034b0:	f001 fae9 	bl	8004a86 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80034b4:	2017      	movs	r0, #23
 80034b6:	f001 fb02 	bl	8004abe <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80034ba:	2200      	movs	r2, #0
 80034bc:	2100      	movs	r1, #0
 80034be:	2028      	movs	r0, #40	@ 0x28
 80034c0:	f001 fae1 	bl	8004a86 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80034c4:	2028      	movs	r0, #40	@ 0x28
 80034c6:	f001 fafa 	bl	8004abe <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80034ca:	bf00      	nop
 80034cc:	3728      	adds	r7, #40	@ 0x28
 80034ce:	46bd      	mov	sp, r7
 80034d0:	bd80      	pop	{r7, pc}
 80034d2:	bf00      	nop

080034d4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80034d4:	b480      	push	{r7}
 80034d6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80034d8:	b672      	cpsid	i
}
 80034da:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80034dc:	bf00      	nop
 80034de:	e7fd      	b.n	80034dc <Error_Handler+0x8>

080034e0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80034e0:	b480      	push	{r7}
 80034e2:	b083      	sub	sp, #12
 80034e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80034e6:	4b0f      	ldr	r3, [pc, #60]	@ (8003524 <HAL_MspInit+0x44>)
 80034e8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80034ea:	4a0e      	ldr	r2, [pc, #56]	@ (8003524 <HAL_MspInit+0x44>)
 80034ec:	f043 0301 	orr.w	r3, r3, #1
 80034f0:	6613      	str	r3, [r2, #96]	@ 0x60
 80034f2:	4b0c      	ldr	r3, [pc, #48]	@ (8003524 <HAL_MspInit+0x44>)
 80034f4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80034f6:	f003 0301 	and.w	r3, r3, #1
 80034fa:	607b      	str	r3, [r7, #4]
 80034fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80034fe:	4b09      	ldr	r3, [pc, #36]	@ (8003524 <HAL_MspInit+0x44>)
 8003500:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003502:	4a08      	ldr	r2, [pc, #32]	@ (8003524 <HAL_MspInit+0x44>)
 8003504:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003508:	6593      	str	r3, [r2, #88]	@ 0x58
 800350a:	4b06      	ldr	r3, [pc, #24]	@ (8003524 <HAL_MspInit+0x44>)
 800350c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800350e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003512:	603b      	str	r3, [r7, #0]
 8003514:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003516:	bf00      	nop
 8003518:	370c      	adds	r7, #12
 800351a:	46bd      	mov	sp, r7
 800351c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003520:	4770      	bx	lr
 8003522:	bf00      	nop
 8003524:	40021000 	.word	0x40021000

08003528 <HAL_DFSDM_ChannelMspInit>:
  * This function configures the hardware resources used in this example
  * @param hdfsdm_channel: DFSDM_Channel handle pointer
  * @retval None
  */
void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* hdfsdm_channel)
{
 8003528:	b580      	push	{r7, lr}
 800352a:	b0ac      	sub	sp, #176	@ 0xb0
 800352c:	af00      	add	r7, sp, #0
 800352e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003530:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8003534:	2200      	movs	r2, #0
 8003536:	601a      	str	r2, [r3, #0]
 8003538:	605a      	str	r2, [r3, #4]
 800353a:	609a      	str	r2, [r3, #8]
 800353c:	60da      	str	r2, [r3, #12]
 800353e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003540:	f107 0314 	add.w	r3, r7, #20
 8003544:	2288      	movs	r2, #136	@ 0x88
 8003546:	2100      	movs	r1, #0
 8003548:	4618      	mov	r0, r3
 800354a:	f008 f936 	bl	800b7ba <memset>
  if(DFSDM1_Init == 0)
 800354e:	4b25      	ldr	r3, [pc, #148]	@ (80035e4 <HAL_DFSDM_ChannelMspInit+0xbc>)
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	2b00      	cmp	r3, #0
 8003554:	d142      	bne.n	80035dc <HAL_DFSDM_ChannelMspInit+0xb4>

    /* USER CODE END DFSDM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1;
 8003556:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800355a:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 800355c:	2300      	movs	r3, #0
 800355e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003562:	f107 0314 	add.w	r3, r7, #20
 8003566:	4618      	mov	r0, r3
 8003568:	f003 fdfe 	bl	8007168 <HAL_RCCEx_PeriphCLKConfig>
 800356c:	4603      	mov	r3, r0
 800356e:	2b00      	cmp	r3, #0
 8003570:	d001      	beq.n	8003576 <HAL_DFSDM_ChannelMspInit+0x4e>
    {
      Error_Handler();
 8003572:	f7ff ffaf 	bl	80034d4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_DFSDM1_CLK_ENABLE();
 8003576:	4b1c      	ldr	r3, [pc, #112]	@ (80035e8 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8003578:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800357a:	4a1b      	ldr	r2, [pc, #108]	@ (80035e8 <HAL_DFSDM_ChannelMspInit+0xc0>)
 800357c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003580:	6613      	str	r3, [r2, #96]	@ 0x60
 8003582:	4b19      	ldr	r3, [pc, #100]	@ (80035e8 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8003584:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003586:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800358a:	613b      	str	r3, [r7, #16]
 800358c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800358e:	4b16      	ldr	r3, [pc, #88]	@ (80035e8 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8003590:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003592:	4a15      	ldr	r2, [pc, #84]	@ (80035e8 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8003594:	f043 0310 	orr.w	r3, r3, #16
 8003598:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800359a:	4b13      	ldr	r3, [pc, #76]	@ (80035e8 <HAL_DFSDM_ChannelMspInit+0xc0>)
 800359c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800359e:	f003 0310 	and.w	r3, r3, #16
 80035a2:	60fb      	str	r3, [r7, #12]
 80035a4:	68fb      	ldr	r3, [r7, #12]
    /**DFSDM1 GPIO Configuration
    PE7     ------> DFSDM1_DATIN2
    PE9     ------> DFSDM1_CKOUT
    */
    GPIO_InitStruct.Pin = DFSDM1_DATIN2_Pin|DFSDM1_CKOUT_Pin;
 80035a6:	f44f 7320 	mov.w	r3, #640	@ 0x280
 80035aa:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035ae:	2302      	movs	r3, #2
 80035b0:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035b4:	2300      	movs	r3, #0
 80035b6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80035ba:	2300      	movs	r3, #0
 80035bc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 80035c0:	2306      	movs	r3, #6
 80035c2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80035c6:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80035ca:	4619      	mov	r1, r3
 80035cc:	4807      	ldr	r0, [pc, #28]	@ (80035ec <HAL_DFSDM_ChannelMspInit+0xc4>)
 80035ce:	f001 fbfb 	bl	8004dc8 <HAL_GPIO_Init>

    /* USER CODE BEGIN DFSDM1_MspInit 1 */

    /* USER CODE END DFSDM1_MspInit 1 */

  DFSDM1_Init++;
 80035d2:	4b04      	ldr	r3, [pc, #16]	@ (80035e4 <HAL_DFSDM_ChannelMspInit+0xbc>)
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	3301      	adds	r3, #1
 80035d8:	4a02      	ldr	r2, [pc, #8]	@ (80035e4 <HAL_DFSDM_ChannelMspInit+0xbc>)
 80035da:	6013      	str	r3, [r2, #0]
  }

}
 80035dc:	bf00      	nop
 80035de:	37b0      	adds	r7, #176	@ 0xb0
 80035e0:	46bd      	mov	sp, r7
 80035e2:	bd80      	pop	{r7, pc}
 80035e4:	20000a0c 	.word	0x20000a0c
 80035e8:	40021000 	.word	0x40021000
 80035ec:	48001000 	.word	0x48001000

080035f0 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80035f0:	b580      	push	{r7, lr}
 80035f2:	b0ac      	sub	sp, #176	@ 0xb0
 80035f4:	af00      	add	r7, sp, #0
 80035f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80035f8:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80035fc:	2200      	movs	r2, #0
 80035fe:	601a      	str	r2, [r3, #0]
 8003600:	605a      	str	r2, [r3, #4]
 8003602:	609a      	str	r2, [r3, #8]
 8003604:	60da      	str	r2, [r3, #12]
 8003606:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003608:	f107 0314 	add.w	r3, r7, #20
 800360c:	2288      	movs	r2, #136	@ 0x88
 800360e:	2100      	movs	r1, #0
 8003610:	4618      	mov	r0, r3
 8003612:	f008 f8d2 	bl	800b7ba <memset>
  if(hi2c->Instance==I2C2)
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	4a21      	ldr	r2, [pc, #132]	@ (80036a0 <HAL_I2C_MspInit+0xb0>)
 800361c:	4293      	cmp	r3, r2
 800361e:	d13b      	bne.n	8003698 <HAL_I2C_MspInit+0xa8>

    /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8003620:	2380      	movs	r3, #128	@ 0x80
 8003622:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8003624:	2300      	movs	r3, #0
 8003626:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003628:	f107 0314 	add.w	r3, r7, #20
 800362c:	4618      	mov	r0, r3
 800362e:	f003 fd9b 	bl	8007168 <HAL_RCCEx_PeriphCLKConfig>
 8003632:	4603      	mov	r3, r0
 8003634:	2b00      	cmp	r3, #0
 8003636:	d001      	beq.n	800363c <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8003638:	f7ff ff4c 	bl	80034d4 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800363c:	4b19      	ldr	r3, [pc, #100]	@ (80036a4 <HAL_I2C_MspInit+0xb4>)
 800363e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003640:	4a18      	ldr	r2, [pc, #96]	@ (80036a4 <HAL_I2C_MspInit+0xb4>)
 8003642:	f043 0302 	orr.w	r3, r3, #2
 8003646:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003648:	4b16      	ldr	r3, [pc, #88]	@ (80036a4 <HAL_I2C_MspInit+0xb4>)
 800364a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800364c:	f003 0302 	and.w	r3, r3, #2
 8003650:	613b      	str	r3, [r7, #16]
 8003652:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = INTERNAL_I2C2_SCL_Pin|INTERNAL_I2C2_SDA_Pin;
 8003654:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8003658:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800365c:	2312      	movs	r3, #18
 800365e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003662:	2301      	movs	r3, #1
 8003664:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003668:	2303      	movs	r3, #3
 800366a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800366e:	2304      	movs	r3, #4
 8003670:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003674:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8003678:	4619      	mov	r1, r3
 800367a:	480b      	ldr	r0, [pc, #44]	@ (80036a8 <HAL_I2C_MspInit+0xb8>)
 800367c:	f001 fba4 	bl	8004dc8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8003680:	4b08      	ldr	r3, [pc, #32]	@ (80036a4 <HAL_I2C_MspInit+0xb4>)
 8003682:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003684:	4a07      	ldr	r2, [pc, #28]	@ (80036a4 <HAL_I2C_MspInit+0xb4>)
 8003686:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800368a:	6593      	str	r3, [r2, #88]	@ 0x58
 800368c:	4b05      	ldr	r3, [pc, #20]	@ (80036a4 <HAL_I2C_MspInit+0xb4>)
 800368e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003690:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003694:	60fb      	str	r3, [r7, #12]
 8003696:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C2_MspInit 1 */

  }

}
 8003698:	bf00      	nop
 800369a:	37b0      	adds	r7, #176	@ 0xb0
 800369c:	46bd      	mov	sp, r7
 800369e:	bd80      	pop	{r7, pc}
 80036a0:	40005800 	.word	0x40005800
 80036a4:	40021000 	.word	0x40021000
 80036a8:	48000400 	.word	0x48000400

080036ac <HAL_I2C_MspDeInit>:
  * This function freeze the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 80036ac:	b580      	push	{r7, lr}
 80036ae:	b082      	sub	sp, #8
 80036b0:	af00      	add	r7, sp, #0
 80036b2:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C2)
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	4a0b      	ldr	r2, [pc, #44]	@ (80036e8 <HAL_I2C_MspDeInit+0x3c>)
 80036ba:	4293      	cmp	r3, r2
 80036bc:	d10f      	bne.n	80036de <HAL_I2C_MspDeInit+0x32>
  {
    /* USER CODE BEGIN I2C2_MspDeInit 0 */

    /* USER CODE END I2C2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C2_CLK_DISABLE();
 80036be:	4b0b      	ldr	r3, [pc, #44]	@ (80036ec <HAL_I2C_MspDeInit+0x40>)
 80036c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80036c2:	4a0a      	ldr	r2, [pc, #40]	@ (80036ec <HAL_I2C_MspDeInit+0x40>)
 80036c4:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 80036c8:	6593      	str	r3, [r2, #88]	@ 0x58

    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    HAL_GPIO_DeInit(INTERNAL_I2C2_SCL_GPIO_Port, INTERNAL_I2C2_SCL_Pin);
 80036ca:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80036ce:	4808      	ldr	r0, [pc, #32]	@ (80036f0 <HAL_I2C_MspDeInit+0x44>)
 80036d0:	f001 fd24 	bl	800511c <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(INTERNAL_I2C2_SDA_GPIO_Port, INTERNAL_I2C2_SDA_Pin);
 80036d4:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80036d8:	4805      	ldr	r0, [pc, #20]	@ (80036f0 <HAL_I2C_MspDeInit+0x44>)
 80036da:	f001 fd1f 	bl	800511c <HAL_GPIO_DeInit>
    /* USER CODE BEGIN I2C2_MspDeInit 1 */

    /* USER CODE END I2C2_MspDeInit 1 */
  }

}
 80036de:	bf00      	nop
 80036e0:	3708      	adds	r7, #8
 80036e2:	46bd      	mov	sp, r7
 80036e4:	bd80      	pop	{r7, pc}
 80036e6:	bf00      	nop
 80036e8:	40005800 	.word	0x40005800
 80036ec:	40021000 	.word	0x40021000
 80036f0:	48000400 	.word	0x48000400

080036f4 <HAL_QSPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hqspi: QSPI handle pointer
  * @retval None
  */
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 80036f4:	b580      	push	{r7, lr}
 80036f6:	b08a      	sub	sp, #40	@ 0x28
 80036f8:	af00      	add	r7, sp, #0
 80036fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80036fc:	f107 0314 	add.w	r3, r7, #20
 8003700:	2200      	movs	r2, #0
 8003702:	601a      	str	r2, [r3, #0]
 8003704:	605a      	str	r2, [r3, #4]
 8003706:	609a      	str	r2, [r3, #8]
 8003708:	60da      	str	r2, [r3, #12]
 800370a:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	4a17      	ldr	r2, [pc, #92]	@ (8003770 <HAL_QSPI_MspInit+0x7c>)
 8003712:	4293      	cmp	r3, r2
 8003714:	d128      	bne.n	8003768 <HAL_QSPI_MspInit+0x74>
  {
    /* USER CODE BEGIN QUADSPI_MspInit 0 */

    /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8003716:	4b17      	ldr	r3, [pc, #92]	@ (8003774 <HAL_QSPI_MspInit+0x80>)
 8003718:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800371a:	4a16      	ldr	r2, [pc, #88]	@ (8003774 <HAL_QSPI_MspInit+0x80>)
 800371c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003720:	6513      	str	r3, [r2, #80]	@ 0x50
 8003722:	4b14      	ldr	r3, [pc, #80]	@ (8003774 <HAL_QSPI_MspInit+0x80>)
 8003724:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003726:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800372a:	613b      	str	r3, [r7, #16]
 800372c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800372e:	4b11      	ldr	r3, [pc, #68]	@ (8003774 <HAL_QSPI_MspInit+0x80>)
 8003730:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003732:	4a10      	ldr	r2, [pc, #64]	@ (8003774 <HAL_QSPI_MspInit+0x80>)
 8003734:	f043 0310 	orr.w	r3, r3, #16
 8003738:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800373a:	4b0e      	ldr	r3, [pc, #56]	@ (8003774 <HAL_QSPI_MspInit+0x80>)
 800373c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800373e:	f003 0310 	and.w	r3, r3, #16
 8003742:	60fb      	str	r3, [r7, #12]
 8003744:	68fb      	ldr	r3, [r7, #12]
    PE12     ------> QUADSPI_BK1_IO0
    PE13     ------> QUADSPI_BK1_IO1
    PE14     ------> QUADSPI_BK1_IO2
    PE15     ------> QUADSPI_BK1_IO3
    */
    GPIO_InitStruct.Pin = QUADSPI_CLK_Pin|QUADSPI_NCS_Pin|OQUADSPI_BK1_IO0_Pin|QUADSPI_BK1_IO1_Pin
 8003746:	f44f 437c 	mov.w	r3, #64512	@ 0xfc00
 800374a:	617b      	str	r3, [r7, #20]
                          |QUAD_SPI_BK1_IO2_Pin|QUAD_SPI_BK1_IO3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800374c:	2302      	movs	r3, #2
 800374e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003750:	2300      	movs	r3, #0
 8003752:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003754:	2303      	movs	r3, #3
 8003756:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8003758:	230a      	movs	r3, #10
 800375a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800375c:	f107 0314 	add.w	r3, r7, #20
 8003760:	4619      	mov	r1, r3
 8003762:	4805      	ldr	r0, [pc, #20]	@ (8003778 <HAL_QSPI_MspInit+0x84>)
 8003764:	f001 fb30 	bl	8004dc8 <HAL_GPIO_Init>

    /* USER CODE END QUADSPI_MspInit 1 */

  }

}
 8003768:	bf00      	nop
 800376a:	3728      	adds	r7, #40	@ 0x28
 800376c:	46bd      	mov	sp, r7
 800376e:	bd80      	pop	{r7, pc}
 8003770:	a0001000 	.word	0xa0001000
 8003774:	40021000 	.word	0x40021000
 8003778:	48001000 	.word	0x48001000

0800377c <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800377c:	b580      	push	{r7, lr}
 800377e:	b0ac      	sub	sp, #176	@ 0xb0
 8003780:	af00      	add	r7, sp, #0
 8003782:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003784:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8003788:	2200      	movs	r2, #0
 800378a:	601a      	str	r2, [r3, #0]
 800378c:	605a      	str	r2, [r3, #4]
 800378e:	609a      	str	r2, [r3, #8]
 8003790:	60da      	str	r2, [r3, #12]
 8003792:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003794:	f107 0314 	add.w	r3, r7, #20
 8003798:	2288      	movs	r2, #136	@ 0x88
 800379a:	2100      	movs	r1, #0
 800379c:	4618      	mov	r0, r3
 800379e:	f008 f80c 	bl	800b7ba <memset>
  if(huart->Instance==USART3)
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	4a21      	ldr	r2, [pc, #132]	@ (800382c <HAL_UART_MspInit+0xb0>)
 80037a8:	4293      	cmp	r3, r2
 80037aa:	d13b      	bne.n	8003824 <HAL_UART_MspInit+0xa8>

    /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80037ac:	2304      	movs	r3, #4
 80037ae:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80037b0:	2300      	movs	r3, #0
 80037b2:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80037b4:	f107 0314 	add.w	r3, r7, #20
 80037b8:	4618      	mov	r0, r3
 80037ba:	f003 fcd5 	bl	8007168 <HAL_RCCEx_PeriphCLKConfig>
 80037be:	4603      	mov	r3, r0
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d001      	beq.n	80037c8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80037c4:	f7ff fe86 	bl	80034d4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80037c8:	4b19      	ldr	r3, [pc, #100]	@ (8003830 <HAL_UART_MspInit+0xb4>)
 80037ca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80037cc:	4a18      	ldr	r2, [pc, #96]	@ (8003830 <HAL_UART_MspInit+0xb4>)
 80037ce:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80037d2:	6593      	str	r3, [r2, #88]	@ 0x58
 80037d4:	4b16      	ldr	r3, [pc, #88]	@ (8003830 <HAL_UART_MspInit+0xb4>)
 80037d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80037d8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80037dc:	613b      	str	r3, [r7, #16]
 80037de:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80037e0:	4b13      	ldr	r3, [pc, #76]	@ (8003830 <HAL_UART_MspInit+0xb4>)
 80037e2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80037e4:	4a12      	ldr	r2, [pc, #72]	@ (8003830 <HAL_UART_MspInit+0xb4>)
 80037e6:	f043 0308 	orr.w	r3, r3, #8
 80037ea:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80037ec:	4b10      	ldr	r3, [pc, #64]	@ (8003830 <HAL_UART_MspInit+0xb4>)
 80037ee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80037f0:	f003 0308 	and.w	r3, r3, #8
 80037f4:	60fb      	str	r3, [r7, #12]
 80037f6:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = INTERNAL_UART3_TX_Pin|INTERNAL_UART3_RX_Pin;
 80037f8:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80037fc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003800:	2302      	movs	r3, #2
 8003802:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003806:	2300      	movs	r3, #0
 8003808:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800380c:	2303      	movs	r3, #3
 800380e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8003812:	2307      	movs	r3, #7
 8003814:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003818:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800381c:	4619      	mov	r1, r3
 800381e:	4805      	ldr	r0, [pc, #20]	@ (8003834 <HAL_UART_MspInit+0xb8>)
 8003820:	f001 fad2 	bl	8004dc8 <HAL_GPIO_Init>

    /* USER CODE END USART3_MspInit 1 */

  }

}
 8003824:	bf00      	nop
 8003826:	37b0      	adds	r7, #176	@ 0xb0
 8003828:	46bd      	mov	sp, r7
 800382a:	bd80      	pop	{r7, pc}
 800382c:	40004800 	.word	0x40004800
 8003830:	40021000 	.word	0x40021000
 8003834:	48000c00 	.word	0x48000c00

08003838 <HAL_PCD_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hpcd: PCD handle pointer
  * @retval None
  */
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8003838:	b580      	push	{r7, lr}
 800383a:	b0ac      	sub	sp, #176	@ 0xb0
 800383c:	af00      	add	r7, sp, #0
 800383e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003840:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8003844:	2200      	movs	r2, #0
 8003846:	601a      	str	r2, [r3, #0]
 8003848:	605a      	str	r2, [r3, #4]
 800384a:	609a      	str	r2, [r3, #8]
 800384c:	60da      	str	r2, [r3, #12]
 800384e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003850:	f107 0314 	add.w	r3, r7, #20
 8003854:	2288      	movs	r2, #136	@ 0x88
 8003856:	2100      	movs	r1, #0
 8003858:	4618      	mov	r0, r3
 800385a:	f007 ffae 	bl	800b7ba <memset>
  if(hpcd->Instance==USB_OTG_FS)
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003866:	d17c      	bne.n	8003962 <HAL_PCD_MspInit+0x12a>

    /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8003868:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800386c:	617b      	str	r3, [r7, #20]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 800386e:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8003872:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8003876:	2301      	movs	r3, #1
 8003878:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 800387a:	2301      	movs	r3, #1
 800387c:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 800387e:	2318      	movs	r3, #24
 8003880:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8003882:	2307      	movs	r3, #7
 8003884:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8003886:	2302      	movs	r3, #2
 8003888:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 800388a:	2302      	movs	r3, #2
 800388c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 800388e:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8003892:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003894:	f107 0314 	add.w	r3, r7, #20
 8003898:	4618      	mov	r0, r3
 800389a:	f003 fc65 	bl	8007168 <HAL_RCCEx_PeriphCLKConfig>
 800389e:	4603      	mov	r3, r0
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d001      	beq.n	80038a8 <HAL_PCD_MspInit+0x70>
    {
      Error_Handler();
 80038a4:	f7ff fe16 	bl	80034d4 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80038a8:	4b30      	ldr	r3, [pc, #192]	@ (800396c <HAL_PCD_MspInit+0x134>)
 80038aa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80038ac:	4a2f      	ldr	r2, [pc, #188]	@ (800396c <HAL_PCD_MspInit+0x134>)
 80038ae:	f043 0301 	orr.w	r3, r3, #1
 80038b2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80038b4:	4b2d      	ldr	r3, [pc, #180]	@ (800396c <HAL_PCD_MspInit+0x134>)
 80038b6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80038b8:	f003 0301 	and.w	r3, r3, #1
 80038bc:	613b      	str	r3, [r7, #16]
 80038be:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_OTG_FS_VBUS_Pin;
 80038c0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80038c4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80038c8:	2300      	movs	r3, #0
 80038ca:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038ce:	2300      	movs	r3, #0
 80038d0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(USB_OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 80038d4:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80038d8:	4619      	mov	r1, r3
 80038da:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80038de:	f001 fa73 	bl	8004dc8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_OTG_FS_ID_Pin|USB_OTG_FS_DM_Pin|USB_OTG_FS_DP_Pin;
 80038e2:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 80038e6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80038ea:	2302      	movs	r3, #2
 80038ec:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038f0:	2300      	movs	r3, #0
 80038f2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80038f6:	2303      	movs	r3, #3
 80038f8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80038fc:	230a      	movs	r3, #10
 80038fe:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003902:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8003906:	4619      	mov	r1, r3
 8003908:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800390c:	f001 fa5c 	bl	8004dc8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8003910:	4b16      	ldr	r3, [pc, #88]	@ (800396c <HAL_PCD_MspInit+0x134>)
 8003912:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003914:	4a15      	ldr	r2, [pc, #84]	@ (800396c <HAL_PCD_MspInit+0x134>)
 8003916:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800391a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800391c:	4b13      	ldr	r3, [pc, #76]	@ (800396c <HAL_PCD_MspInit+0x134>)
 800391e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003920:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003924:	60fb      	str	r3, [r7, #12]
 8003926:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003928:	4b10      	ldr	r3, [pc, #64]	@ (800396c <HAL_PCD_MspInit+0x134>)
 800392a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800392c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003930:	2b00      	cmp	r3, #0
 8003932:	d114      	bne.n	800395e <HAL_PCD_MspInit+0x126>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003934:	4b0d      	ldr	r3, [pc, #52]	@ (800396c <HAL_PCD_MspInit+0x134>)
 8003936:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003938:	4a0c      	ldr	r2, [pc, #48]	@ (800396c <HAL_PCD_MspInit+0x134>)
 800393a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800393e:	6593      	str	r3, [r2, #88]	@ 0x58
 8003940:	4b0a      	ldr	r3, [pc, #40]	@ (800396c <HAL_PCD_MspInit+0x134>)
 8003942:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003944:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003948:	60bb      	str	r3, [r7, #8]
 800394a:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 800394c:	f002 fd40 	bl	80063d0 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 8003950:	4b06      	ldr	r3, [pc, #24]	@ (800396c <HAL_PCD_MspInit+0x134>)
 8003952:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003954:	4a05      	ldr	r2, [pc, #20]	@ (800396c <HAL_PCD_MspInit+0x134>)
 8003956:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800395a:	6593      	str	r3, [r2, #88]	@ 0x58

    /* USER CODE END USB_OTG_FS_MspInit 1 */

  }

}
 800395c:	e001      	b.n	8003962 <HAL_PCD_MspInit+0x12a>
      HAL_PWREx_EnableVddUSB();
 800395e:	f002 fd37 	bl	80063d0 <HAL_PWREx_EnableVddUSB>
}
 8003962:	bf00      	nop
 8003964:	37b0      	adds	r7, #176	@ 0xb0
 8003966:	46bd      	mov	sp, r7
 8003968:	bd80      	pop	{r7, pc}
 800396a:	bf00      	nop
 800396c:	40021000 	.word	0x40021000

08003970 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003970:	b480      	push	{r7}
 8003972:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003974:	bf00      	nop
 8003976:	e7fd      	b.n	8003974 <NMI_Handler+0x4>

08003978 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003978:	b480      	push	{r7}
 800397a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800397c:	bf00      	nop
 800397e:	e7fd      	b.n	800397c <HardFault_Handler+0x4>

08003980 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003980:	b480      	push	{r7}
 8003982:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003984:	bf00      	nop
 8003986:	e7fd      	b.n	8003984 <MemManage_Handler+0x4>

08003988 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003988:	b480      	push	{r7}
 800398a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800398c:	bf00      	nop
 800398e:	e7fd      	b.n	800398c <BusFault_Handler+0x4>

08003990 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003990:	b480      	push	{r7}
 8003992:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003994:	bf00      	nop
 8003996:	e7fd      	b.n	8003994 <UsageFault_Handler+0x4>

08003998 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003998:	b480      	push	{r7}
 800399a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800399c:	bf00      	nop
 800399e:	46bd      	mov	sp, r7
 80039a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a4:	4770      	bx	lr

080039a6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80039a6:	b480      	push	{r7}
 80039a8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80039aa:	bf00      	nop
 80039ac:	46bd      	mov	sp, r7
 80039ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b2:	4770      	bx	lr

080039b4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80039b4:	b480      	push	{r7}
 80039b6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80039b8:	bf00      	nop
 80039ba:	46bd      	mov	sp, r7
 80039bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c0:	4770      	bx	lr

080039c2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80039c2:	b580      	push	{r7, lr}
 80039c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80039c6:	f000 ff3f 	bl	8004848 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80039ca:	bf00      	nop
 80039cc:	bd80      	pop	{r7, pc}
	...

080039d0 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80039d0:	b580      	push	{r7, lr}
 80039d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SPSGRF_915_GPIO3_EXTI5_Pin);
 80039d4:	2020      	movs	r0, #32
 80039d6:	f001 fcdf 	bl	8005398 <HAL_GPIO_EXTI_IRQHandler>
  HAL_EXTI_IRQHandler(&H_EXTI_6);
 80039da:	4806      	ldr	r0, [pc, #24]	@ (80039f4 <EXTI9_5_IRQHandler+0x24>)
 80039dc:	f001 f9c4 	bl	8004d68 <HAL_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(VL53L0X_GPIO1_EXTI7_Pin);
 80039e0:	2080      	movs	r0, #128	@ 0x80
 80039e2:	f001 fcd9 	bl	8005398 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM3MDL_DRDY_EXTI8_Pin);
 80039e6:	f44f 7080 	mov.w	r0, #256	@ 0x100
 80039ea:	f001 fcd5 	bl	8005398 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80039ee:	bf00      	nop
 80039f0:	bd80      	pop	{r7, pc}
 80039f2:	bf00      	nop
 80039f4:	200002c0 	.word	0x200002c0

080039f8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80039f8:	b580      	push	{r7, lr}
 80039fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LPS22HB_INT_DRDY_EXTI0_Pin);
 80039fc:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8003a00:	f001 fcca 	bl	8005398 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM6DSL_INT1_EXTI11_Pin);
 8003a04:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8003a08:	f001 fcc6 	bl	8005398 <HAL_GPIO_EXTI_IRQHandler>
  HAL_EXTI_IRQHandler(&H_EXTI_13);
 8003a0c:	4806      	ldr	r0, [pc, #24]	@ (8003a28 <EXTI15_10_IRQHandler+0x30>)
 8003a0e:	f001 f9ab 	bl	8004d68 <HAL_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ARD_D2_Pin);
 8003a12:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8003a16:	f001 fcbf 	bl	8005398 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(HTS221_DRDY_EXTI15_Pin);
 8003a1a:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8003a1e:	f001 fcbb 	bl	8005398 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8003a22:	bf00      	nop
 8003a24:	bd80      	pop	{r7, pc}
 8003a26:	bf00      	nop
 8003a28:	20000010 	.word	0x20000010

08003a2c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003a2c:	b480      	push	{r7}
 8003a2e:	af00      	add	r7, sp, #0
  return 1;
 8003a30:	2301      	movs	r3, #1
}
 8003a32:	4618      	mov	r0, r3
 8003a34:	46bd      	mov	sp, r7
 8003a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a3a:	4770      	bx	lr

08003a3c <_kill>:

int _kill(int pid, int sig)
{
 8003a3c:	b580      	push	{r7, lr}
 8003a3e:	b082      	sub	sp, #8
 8003a40:	af00      	add	r7, sp, #0
 8003a42:	6078      	str	r0, [r7, #4]
 8003a44:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003a46:	f007 ff0b 	bl	800b860 <__errno>
 8003a4a:	4603      	mov	r3, r0
 8003a4c:	2216      	movs	r2, #22
 8003a4e:	601a      	str	r2, [r3, #0]
  return -1;
 8003a50:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003a54:	4618      	mov	r0, r3
 8003a56:	3708      	adds	r7, #8
 8003a58:	46bd      	mov	sp, r7
 8003a5a:	bd80      	pop	{r7, pc}

08003a5c <_exit>:

void _exit (int status)
{
 8003a5c:	b580      	push	{r7, lr}
 8003a5e:	b082      	sub	sp, #8
 8003a60:	af00      	add	r7, sp, #0
 8003a62:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003a64:	f04f 31ff 	mov.w	r1, #4294967295
 8003a68:	6878      	ldr	r0, [r7, #4]
 8003a6a:	f7ff ffe7 	bl	8003a3c <_kill>
  while (1) {}    /* Make sure we hang here */
 8003a6e:	bf00      	nop
 8003a70:	e7fd      	b.n	8003a6e <_exit+0x12>

08003a72 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003a72:	b580      	push	{r7, lr}
 8003a74:	b086      	sub	sp, #24
 8003a76:	af00      	add	r7, sp, #0
 8003a78:	60f8      	str	r0, [r7, #12]
 8003a7a:	60b9      	str	r1, [r7, #8]
 8003a7c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003a7e:	2300      	movs	r3, #0
 8003a80:	617b      	str	r3, [r7, #20]
 8003a82:	e00a      	b.n	8003a9a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003a84:	f3af 8000 	nop.w
 8003a88:	4601      	mov	r1, r0
 8003a8a:	68bb      	ldr	r3, [r7, #8]
 8003a8c:	1c5a      	adds	r2, r3, #1
 8003a8e:	60ba      	str	r2, [r7, #8]
 8003a90:	b2ca      	uxtb	r2, r1
 8003a92:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003a94:	697b      	ldr	r3, [r7, #20]
 8003a96:	3301      	adds	r3, #1
 8003a98:	617b      	str	r3, [r7, #20]
 8003a9a:	697a      	ldr	r2, [r7, #20]
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	429a      	cmp	r2, r3
 8003aa0:	dbf0      	blt.n	8003a84 <_read+0x12>
  }

  return len;
 8003aa2:	687b      	ldr	r3, [r7, #4]
}
 8003aa4:	4618      	mov	r0, r3
 8003aa6:	3718      	adds	r7, #24
 8003aa8:	46bd      	mov	sp, r7
 8003aaa:	bd80      	pop	{r7, pc}

08003aac <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003aac:	b580      	push	{r7, lr}
 8003aae:	b086      	sub	sp, #24
 8003ab0:	af00      	add	r7, sp, #0
 8003ab2:	60f8      	str	r0, [r7, #12]
 8003ab4:	60b9      	str	r1, [r7, #8]
 8003ab6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003ab8:	2300      	movs	r3, #0
 8003aba:	617b      	str	r3, [r7, #20]
 8003abc:	e009      	b.n	8003ad2 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003abe:	68bb      	ldr	r3, [r7, #8]
 8003ac0:	1c5a      	adds	r2, r3, #1
 8003ac2:	60ba      	str	r2, [r7, #8]
 8003ac4:	781b      	ldrb	r3, [r3, #0]
 8003ac6:	4618      	mov	r0, r3
 8003ac8:	f000 fa3e 	bl	8003f48 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003acc:	697b      	ldr	r3, [r7, #20]
 8003ace:	3301      	adds	r3, #1
 8003ad0:	617b      	str	r3, [r7, #20]
 8003ad2:	697a      	ldr	r2, [r7, #20]
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	429a      	cmp	r2, r3
 8003ad8:	dbf1      	blt.n	8003abe <_write+0x12>
  }
  return len;
 8003ada:	687b      	ldr	r3, [r7, #4]
}
 8003adc:	4618      	mov	r0, r3
 8003ade:	3718      	adds	r7, #24
 8003ae0:	46bd      	mov	sp, r7
 8003ae2:	bd80      	pop	{r7, pc}

08003ae4 <_close>:

int _close(int file)
{
 8003ae4:	b480      	push	{r7}
 8003ae6:	b083      	sub	sp, #12
 8003ae8:	af00      	add	r7, sp, #0
 8003aea:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003aec:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003af0:	4618      	mov	r0, r3
 8003af2:	370c      	adds	r7, #12
 8003af4:	46bd      	mov	sp, r7
 8003af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003afa:	4770      	bx	lr

08003afc <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003afc:	b480      	push	{r7}
 8003afe:	b083      	sub	sp, #12
 8003b00:	af00      	add	r7, sp, #0
 8003b02:	6078      	str	r0, [r7, #4]
 8003b04:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003b06:	683b      	ldr	r3, [r7, #0]
 8003b08:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003b0c:	605a      	str	r2, [r3, #4]
  return 0;
 8003b0e:	2300      	movs	r3, #0
}
 8003b10:	4618      	mov	r0, r3
 8003b12:	370c      	adds	r7, #12
 8003b14:	46bd      	mov	sp, r7
 8003b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b1a:	4770      	bx	lr

08003b1c <_isatty>:

int _isatty(int file)
{
 8003b1c:	b480      	push	{r7}
 8003b1e:	b083      	sub	sp, #12
 8003b20:	af00      	add	r7, sp, #0
 8003b22:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003b24:	2301      	movs	r3, #1
}
 8003b26:	4618      	mov	r0, r3
 8003b28:	370c      	adds	r7, #12
 8003b2a:	46bd      	mov	sp, r7
 8003b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b30:	4770      	bx	lr

08003b32 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003b32:	b480      	push	{r7}
 8003b34:	b085      	sub	sp, #20
 8003b36:	af00      	add	r7, sp, #0
 8003b38:	60f8      	str	r0, [r7, #12]
 8003b3a:	60b9      	str	r1, [r7, #8]
 8003b3c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003b3e:	2300      	movs	r3, #0
}
 8003b40:	4618      	mov	r0, r3
 8003b42:	3714      	adds	r7, #20
 8003b44:	46bd      	mov	sp, r7
 8003b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b4a:	4770      	bx	lr

08003b4c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003b4c:	b580      	push	{r7, lr}
 8003b4e:	b086      	sub	sp, #24
 8003b50:	af00      	add	r7, sp, #0
 8003b52:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003b54:	4a14      	ldr	r2, [pc, #80]	@ (8003ba8 <_sbrk+0x5c>)
 8003b56:	4b15      	ldr	r3, [pc, #84]	@ (8003bac <_sbrk+0x60>)
 8003b58:	1ad3      	subs	r3, r2, r3
 8003b5a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003b5c:	697b      	ldr	r3, [r7, #20]
 8003b5e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003b60:	4b13      	ldr	r3, [pc, #76]	@ (8003bb0 <_sbrk+0x64>)
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d102      	bne.n	8003b6e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003b68:	4b11      	ldr	r3, [pc, #68]	@ (8003bb0 <_sbrk+0x64>)
 8003b6a:	4a12      	ldr	r2, [pc, #72]	@ (8003bb4 <_sbrk+0x68>)
 8003b6c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003b6e:	4b10      	ldr	r3, [pc, #64]	@ (8003bb0 <_sbrk+0x64>)
 8003b70:	681a      	ldr	r2, [r3, #0]
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	4413      	add	r3, r2
 8003b76:	693a      	ldr	r2, [r7, #16]
 8003b78:	429a      	cmp	r2, r3
 8003b7a:	d207      	bcs.n	8003b8c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003b7c:	f007 fe70 	bl	800b860 <__errno>
 8003b80:	4603      	mov	r3, r0
 8003b82:	220c      	movs	r2, #12
 8003b84:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003b86:	f04f 33ff 	mov.w	r3, #4294967295
 8003b8a:	e009      	b.n	8003ba0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003b8c:	4b08      	ldr	r3, [pc, #32]	@ (8003bb0 <_sbrk+0x64>)
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003b92:	4b07      	ldr	r3, [pc, #28]	@ (8003bb0 <_sbrk+0x64>)
 8003b94:	681a      	ldr	r2, [r3, #0]
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	4413      	add	r3, r2
 8003b9a:	4a05      	ldr	r2, [pc, #20]	@ (8003bb0 <_sbrk+0x64>)
 8003b9c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003b9e:	68fb      	ldr	r3, [r7, #12]
}
 8003ba0:	4618      	mov	r0, r3
 8003ba2:	3718      	adds	r7, #24
 8003ba4:	46bd      	mov	sp, r7
 8003ba6:	bd80      	pop	{r7, pc}
 8003ba8:	20018000 	.word	0x20018000
 8003bac:	00000400 	.word	0x00000400
 8003bb0:	20000a10 	.word	0x20000a10
 8003bb4:	20000fc0 	.word	0x20000fc0

08003bb8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8003bb8:	b480      	push	{r7}
 8003bba:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8003bbc:	4b06      	ldr	r3, [pc, #24]	@ (8003bd8 <SystemInit+0x20>)
 8003bbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003bc2:	4a05      	ldr	r2, [pc, #20]	@ (8003bd8 <SystemInit+0x20>)
 8003bc4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003bc8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8003bcc:	bf00      	nop
 8003bce:	46bd      	mov	sp, r7
 8003bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd4:	4770      	bx	lr
 8003bd6:	bf00      	nop
 8003bd8:	e000ed00 	.word	0xe000ed00

08003bdc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8003bdc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8003c14 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8003be0:	f7ff ffea 	bl	8003bb8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003be4:	480c      	ldr	r0, [pc, #48]	@ (8003c18 <LoopForever+0x6>)
  ldr r1, =_edata
 8003be6:	490d      	ldr	r1, [pc, #52]	@ (8003c1c <LoopForever+0xa>)
  ldr r2, =_sidata
 8003be8:	4a0d      	ldr	r2, [pc, #52]	@ (8003c20 <LoopForever+0xe>)
  movs r3, #0
 8003bea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003bec:	e002      	b.n	8003bf4 <LoopCopyDataInit>

08003bee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003bee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003bf0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003bf2:	3304      	adds	r3, #4

08003bf4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003bf4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003bf6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003bf8:	d3f9      	bcc.n	8003bee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003bfa:	4a0a      	ldr	r2, [pc, #40]	@ (8003c24 <LoopForever+0x12>)
  ldr r4, =_ebss
 8003bfc:	4c0a      	ldr	r4, [pc, #40]	@ (8003c28 <LoopForever+0x16>)
  movs r3, #0
 8003bfe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003c00:	e001      	b.n	8003c06 <LoopFillZerobss>

08003c02 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003c02:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003c04:	3204      	adds	r2, #4

08003c06 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003c06:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003c08:	d3fb      	bcc.n	8003c02 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003c0a:	f007 fe2f 	bl	800b86c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8003c0e:	f7ff f937 	bl	8002e80 <main>

08003c12 <LoopForever>:

LoopForever:
    b LoopForever
 8003c12:	e7fe      	b.n	8003c12 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8003c14:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8003c18:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003c1c:	20000220 	.word	0x20000220
  ldr r2, =_sidata
 8003c20:	0800f484 	.word	0x0800f484
  ldr r2, =_sbss
 8003c24:	20000220 	.word	0x20000220
  ldr r4, =_ebss
 8003c28:	20000fc0 	.word	0x20000fc0

08003c2c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003c2c:	e7fe      	b.n	8003c2c <ADC1_2_IRQHandler>
	...

08003c30 <BSP_LED_Init>:
 *              This parameter can be one of the following values:
 *              @arg  LED2, LED4, ...
 * @retval HAL status
 */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 8003c30:	b580      	push	{r7, lr}
 8003c32:	b082      	sub	sp, #8
 8003c34:	af00      	add	r7, sp, #0
 8003c36:	4603      	mov	r3, r0
 8003c38:	71fb      	strb	r3, [r7, #7]
  static const BSP_LED_GPIO_Init LedGpioInit[LEDn] = {LED_USER_GPIO_Init};
  LedGpioInit[Led]();
 8003c3a:	79fb      	ldrb	r3, [r7, #7]
 8003c3c:	4a04      	ldr	r2, [pc, #16]	@ (8003c50 <BSP_LED_Init+0x20>)
 8003c3e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003c42:	4798      	blx	r3
  return BSP_ERROR_NONE;
 8003c44:	2300      	movs	r3, #0
}
 8003c46:	4618      	mov	r0, r3
 8003c48:	3708      	adds	r7, #8
 8003c4a:	46bd      	mov	sp, r7
 8003c4c:	bd80      	pop	{r7, pc}
 8003c4e:	bf00      	nop
 8003c50:	0800efe0 	.word	0x0800efe0

08003c54 <BSP_LED_Toggle>:
 *              @arg  LED3
 *              @arg  LED4
 * @retval HAL status
 */
int32_t BSP_LED_Toggle(Led_TypeDef Led)
{
 8003c54:	b580      	push	{r7, lr}
 8003c56:	b082      	sub	sp, #8
 8003c58:	af00      	add	r7, sp, #0
 8003c5a:	4603      	mov	r3, r0
 8003c5c:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_TogglePin(LED_PORT[Led], LED_PIN[Led]);
 8003c5e:	79fb      	ldrb	r3, [r7, #7]
 8003c60:	4a06      	ldr	r2, [pc, #24]	@ (8003c7c <BSP_LED_Toggle+0x28>)
 8003c62:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003c66:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8003c6a:	4611      	mov	r1, r2
 8003c6c:	4618      	mov	r0, r3
 8003c6e:	f001 fb79 	bl	8005364 <HAL_GPIO_TogglePin>

  return BSP_ERROR_NONE;
 8003c72:	2300      	movs	r3, #0
}
 8003c74:	4618      	mov	r0, r3
 8003c76:	3708      	adds	r7, #8
 8003c78:	46bd      	mov	sp, r7
 8003c7a:	bd80      	pop	{r7, pc}
 8003c7c:	20000008 	.word	0x20000008

08003c80 <LED_USER_GPIO_Init>:
}
/**
  * @brief
  * @retval None
  */
static void LED_USER_GPIO_Init(void) {
 8003c80:	b580      	push	{r7, lr}
 8003c82:	b088      	sub	sp, #32
 8003c84:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003c86:	4b1c      	ldr	r3, [pc, #112]	@ (8003cf8 <LED_USER_GPIO_Init+0x78>)
 8003c88:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003c8a:	4a1b      	ldr	r2, [pc, #108]	@ (8003cf8 <LED_USER_GPIO_Init+0x78>)
 8003c8c:	f043 0302 	orr.w	r3, r3, #2
 8003c90:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003c92:	4b19      	ldr	r3, [pc, #100]	@ (8003cf8 <LED_USER_GPIO_Init+0x78>)
 8003c94:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003c96:	f003 0302 	and.w	r3, r3, #2
 8003c9a:	60bb      	str	r3, [r7, #8]
 8003c9c:	68bb      	ldr	r3, [r7, #8]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003c9e:	f107 030c 	add.w	r3, r7, #12
 8003ca2:	2200      	movs	r2, #0
 8003ca4:	601a      	str	r2, [r3, #0]
 8003ca6:	605a      	str	r2, [r3, #4]
 8003ca8:	609a      	str	r2, [r3, #8]
 8003caa:	60da      	str	r2, [r3, #12]
 8003cac:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003cae:	4b12      	ldr	r3, [pc, #72]	@ (8003cf8 <LED_USER_GPIO_Init+0x78>)
 8003cb0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003cb2:	4a11      	ldr	r2, [pc, #68]	@ (8003cf8 <LED_USER_GPIO_Init+0x78>)
 8003cb4:	f043 0302 	orr.w	r3, r3, #2
 8003cb8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003cba:	4b0f      	ldr	r3, [pc, #60]	@ (8003cf8 <LED_USER_GPIO_Init+0x78>)
 8003cbc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003cbe:	f003 0302 	and.w	r3, r3, #2
 8003cc2:	607b      	str	r3, [r7, #4]
 8003cc4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BUS_BSP_LED_GPIO_PORT, BUS_BSP_LED_GPIO_PIN, GPIO_PIN_RESET);
 8003cc6:	2200      	movs	r2, #0
 8003cc8:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8003ccc:	480b      	ldr	r0, [pc, #44]	@ (8003cfc <LED_USER_GPIO_Init+0x7c>)
 8003cce:	f001 fb31 	bl	8005334 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PTPIN */
  GPIO_InitStruct.Pin = BUS_BSP_LED_GPIO_PIN;
 8003cd2:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8003cd6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003cd8:	2301      	movs	r3, #1
 8003cda:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003cdc:	2300      	movs	r3, #0
 8003cde:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003ce0:	2300      	movs	r3, #0
 8003ce2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(BUS_BSP_LED_GPIO_PORT, &GPIO_InitStruct);
 8003ce4:	f107 030c 	add.w	r3, r7, #12
 8003ce8:	4619      	mov	r1, r3
 8003cea:	4804      	ldr	r0, [pc, #16]	@ (8003cfc <LED_USER_GPIO_Init+0x7c>)
 8003cec:	f001 f86c 	bl	8004dc8 <HAL_GPIO_Init>

}
 8003cf0:	bf00      	nop
 8003cf2:	3720      	adds	r7, #32
 8003cf4:	46bd      	mov	sp, r7
 8003cf6:	bd80      	pop	{r7, pc}
 8003cf8:	40021000 	.word	0x40021000
 8003cfc:	48000400 	.word	0x48000400

08003d00 <BSP_PB_Init>:
  *                    @arg  BUTTON_MODE_EXTI: Button will be connected to EXTI line
  *                                            with interrupt generation capability
  * @retval BSP status
  */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8003d00:	b580      	push	{r7, lr}
 8003d02:	b084      	sub	sp, #16
 8003d04:	af00      	add	r7, sp, #0
 8003d06:	4603      	mov	r3, r0
 8003d08:	460a      	mov	r2, r1
 8003d0a:	71fb      	strb	r3, [r7, #7]
 8003d0c:	4613      	mov	r3, r2
 8003d0e:	71bb      	strb	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 8003d10:	2300      	movs	r3, #0
 8003d12:	60fb      	str	r3, [r7, #12]
  static const BSP_EXTI_LineCallback ButtonCallback[BUTTONn] ={BUTTON_USER_EXTI_Callback};
  static const uint32_t  BSP_BUTTON_PRIO [BUTTONn] ={BSP_BUTTON_USER_IT_PRIORITY};
  static const uint32_t BUTTON_EXTI_LINE[BUTTONn] ={USER_BUTTON_EXTI_LINE};
  static const BSP_BUTTON_GPIO_Init ButtonGpioInit[BUTTONn] = {BUTTON_USER_GPIO_Init};

  ButtonGpioInit[Button]();
 8003d14:	79fb      	ldrb	r3, [r7, #7]
 8003d16:	4a1f      	ldr	r2, [pc, #124]	@ (8003d94 <BSP_PB_Init+0x94>)
 8003d18:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d1c:	4798      	blx	r3

  if (ButtonMode == BUTTON_MODE_EXTI)
 8003d1e:	79bb      	ldrb	r3, [r7, #6]
 8003d20:	2b01      	cmp	r3, #1
 8003d22:	d132      	bne.n	8003d8a <BSP_PB_Init+0x8a>
  {
    if(HAL_EXTI_GetHandle(&hpb_exti[Button], BUTTON_EXTI_LINE[Button]) != HAL_OK)
 8003d24:	79fb      	ldrb	r3, [r7, #7]
 8003d26:	00db      	lsls	r3, r3, #3
 8003d28:	4a1b      	ldr	r2, [pc, #108]	@ (8003d98 <BSP_PB_Init+0x98>)
 8003d2a:	441a      	add	r2, r3
 8003d2c:	79fb      	ldrb	r3, [r7, #7]
 8003d2e:	491b      	ldr	r1, [pc, #108]	@ (8003d9c <BSP_PB_Init+0x9c>)
 8003d30:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003d34:	4619      	mov	r1, r3
 8003d36:	4610      	mov	r0, r2
 8003d38:	f001 f802 	bl	8004d40 <HAL_EXTI_GetHandle>
 8003d3c:	4603      	mov	r3, r0
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d003      	beq.n	8003d4a <BSP_PB_Init+0x4a>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8003d42:	f06f 0303 	mvn.w	r3, #3
 8003d46:	60fb      	str	r3, [r7, #12]
 8003d48:	e01f      	b.n	8003d8a <BSP_PB_Init+0x8a>
    }
    else if (HAL_EXTI_RegisterCallback(&hpb_exti[Button],  HAL_EXTI_COMMON_CB_ID, ButtonCallback[Button]) != HAL_OK)
 8003d4a:	79fb      	ldrb	r3, [r7, #7]
 8003d4c:	00db      	lsls	r3, r3, #3
 8003d4e:	4a12      	ldr	r2, [pc, #72]	@ (8003d98 <BSP_PB_Init+0x98>)
 8003d50:	1898      	adds	r0, r3, r2
 8003d52:	79fb      	ldrb	r3, [r7, #7]
 8003d54:	4a12      	ldr	r2, [pc, #72]	@ (8003da0 <BSP_PB_Init+0xa0>)
 8003d56:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d5a:	461a      	mov	r2, r3
 8003d5c:	2100      	movs	r1, #0
 8003d5e:	f000 ffd5 	bl	8004d0c <HAL_EXTI_RegisterCallback>
 8003d62:	4603      	mov	r3, r0
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d003      	beq.n	8003d70 <BSP_PB_Init+0x70>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8003d68:	f06f 0303 	mvn.w	r3, #3
 8003d6c:	60fb      	str	r3, [r7, #12]
 8003d6e:	e00c      	b.n	8003d8a <BSP_PB_Init+0x8a>
    }
	else
    {
      /* Enable and set Button EXTI Interrupt to the lowest priority */
      HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), BSP_BUTTON_PRIO[Button], 0x00);
 8003d70:	2028      	movs	r0, #40	@ 0x28
 8003d72:	79fb      	ldrb	r3, [r7, #7]
 8003d74:	4a0b      	ldr	r2, [pc, #44]	@ (8003da4 <BSP_PB_Init+0xa4>)
 8003d76:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d7a:	2200      	movs	r2, #0
 8003d7c:	4619      	mov	r1, r3
 8003d7e:	f000 fe82 	bl	8004a86 <HAL_NVIC_SetPriority>
      HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
 8003d82:	2328      	movs	r3, #40	@ 0x28
 8003d84:	4618      	mov	r0, r3
 8003d86:	f000 fe9a 	bl	8004abe <HAL_NVIC_EnableIRQ>
    }
  }

  return ret;
 8003d8a:	68fb      	ldr	r3, [r7, #12]
}
 8003d8c:	4618      	mov	r0, r3
 8003d8e:	3710      	adds	r7, #16
 8003d90:	46bd      	mov	sp, r7
 8003d92:	bd80      	pop	{r7, pc}
 8003d94:	0800efe4 	.word	0x0800efe4
 8003d98:	20000010 	.word	0x20000010
 8003d9c:	0800efe8 	.word	0x0800efe8
 8003da0:	0800efec 	.word	0x0800efec
 8003da4:	0800eff0 	.word	0x0800eff0

08003da8 <BSP_PB_GetState>:
 *                This parameter can be one of the following values:
 *                @arg  BUTTON_USER
 * @retval The Button GPIO pin value (GPIO_PIN_RESET = button pressed)
 */
int32_t BSP_PB_GetState(Button_TypeDef Button)
{
 8003da8:	b580      	push	{r7, lr}
 8003daa:	b082      	sub	sp, #8
 8003dac:	af00      	add	r7, sp, #0
 8003dae:	4603      	mov	r3, r0
 8003db0:	71fb      	strb	r3, [r7, #7]
  return (int32_t)(HAL_GPIO_ReadPin(BUTTON_PORT[Button], BUTTON_PIN[Button]) == GPIO_PIN_RESET);
 8003db2:	79fb      	ldrb	r3, [r7, #7]
 8003db4:	4a09      	ldr	r2, [pc, #36]	@ (8003ddc <BSP_PB_GetState+0x34>)
 8003db6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003dba:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003dbe:	4611      	mov	r1, r2
 8003dc0:	4618      	mov	r0, r3
 8003dc2:	f001 fa9f 	bl	8005304 <HAL_GPIO_ReadPin>
 8003dc6:	4603      	mov	r3, r0
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	bf0c      	ite	eq
 8003dcc:	2301      	moveq	r3, #1
 8003dce:	2300      	movne	r3, #0
 8003dd0:	b2db      	uxtb	r3, r3
}
 8003dd2:	4618      	mov	r0, r3
 8003dd4:	3708      	adds	r7, #8
 8003dd6:	46bd      	mov	sp, r7
 8003dd8:	bd80      	pop	{r7, pc}
 8003dda:	bf00      	nop
 8003ddc:	2000000c 	.word	0x2000000c

08003de0 <BUTTON_USER_EXTI_Callback>:
/**
  * @brief  User EXTI line detection callbacks.
  * @retval None
  */
static void BUTTON_USER_EXTI_Callback(void)
{
 8003de0:	b580      	push	{r7, lr}
 8003de2:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_USER);
 8003de4:	2000      	movs	r0, #0
 8003de6:	f7fe fa03 	bl	80021f0 <BSP_PB_Callback>
}
 8003dea:	bf00      	nop
 8003dec:	bd80      	pop	{r7, pc}
	...

08003df0 <BUTTON_USER_GPIO_Init>:

/**
  * @brief
  * @retval None
  */
static void BUTTON_USER_GPIO_Init(void) {
 8003df0:	b580      	push	{r7, lr}
 8003df2:	b088      	sub	sp, #32
 8003df4:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003df6:	4b19      	ldr	r3, [pc, #100]	@ (8003e5c <BUTTON_USER_GPIO_Init+0x6c>)
 8003df8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003dfa:	4a18      	ldr	r2, [pc, #96]	@ (8003e5c <BUTTON_USER_GPIO_Init+0x6c>)
 8003dfc:	f043 0304 	orr.w	r3, r3, #4
 8003e00:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003e02:	4b16      	ldr	r3, [pc, #88]	@ (8003e5c <BUTTON_USER_GPIO_Init+0x6c>)
 8003e04:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003e06:	f003 0304 	and.w	r3, r3, #4
 8003e0a:	60bb      	str	r3, [r7, #8]
 8003e0c:	68bb      	ldr	r3, [r7, #8]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003e0e:	f107 030c 	add.w	r3, r7, #12
 8003e12:	2200      	movs	r2, #0
 8003e14:	601a      	str	r2, [r3, #0]
 8003e16:	605a      	str	r2, [r3, #4]
 8003e18:	609a      	str	r2, [r3, #8]
 8003e1a:	60da      	str	r2, [r3, #12]
 8003e1c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003e1e:	4b0f      	ldr	r3, [pc, #60]	@ (8003e5c <BUTTON_USER_GPIO_Init+0x6c>)
 8003e20:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003e22:	4a0e      	ldr	r2, [pc, #56]	@ (8003e5c <BUTTON_USER_GPIO_Init+0x6c>)
 8003e24:	f043 0304 	orr.w	r3, r3, #4
 8003e28:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003e2a:	4b0c      	ldr	r3, [pc, #48]	@ (8003e5c <BUTTON_USER_GPIO_Init+0x6c>)
 8003e2c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003e2e:	f003 0304 	and.w	r3, r3, #4
 8003e32:	607b      	str	r3, [r7, #4]
 8003e34:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : PTPIN */
  GPIO_InitStruct.Pin = BUS_BSP_BUTTON_GPIO_PIN;
 8003e36:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003e3a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8003e3c:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8003e40:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e42:	2300      	movs	r3, #0
 8003e44:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(BUS_BSP_BUTTON_GPIO_PORT, &GPIO_InitStruct);
 8003e46:	f107 030c 	add.w	r3, r7, #12
 8003e4a:	4619      	mov	r1, r3
 8003e4c:	4804      	ldr	r0, [pc, #16]	@ (8003e60 <BUTTON_USER_GPIO_Init+0x70>)
 8003e4e:	f000 ffbb 	bl	8004dc8 <HAL_GPIO_Init>

}
 8003e52:	bf00      	nop
 8003e54:	3720      	adds	r7, #32
 8003e56:	46bd      	mov	sp, r7
 8003e58:	bd80      	pop	{r7, pc}
 8003e5a:	bf00      	nop
 8003e5c:	40021000 	.word	0x40021000
 8003e60:	48000800 	.word	0x48000800

08003e64 <BSP_COM_Init>:
 * @param  UART_Init: Pointer to a UART_HandleTypeDef structure that contains the
 *                    configuration information for the specified USART peripheral.
 * @retval BSP error code
 */
int32_t BSP_COM_Init(COM_TypeDef COM)
{
 8003e64:	b580      	push	{r7, lr}
 8003e66:	b084      	sub	sp, #16
 8003e68:	af00      	add	r7, sp, #0
 8003e6a:	4603      	mov	r3, r0
 8003e6c:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8003e6e:	2300      	movs	r3, #0
 8003e70:	60fb      	str	r3, [r7, #12]

  if(COM > COMn)
 8003e72:	79fb      	ldrb	r3, [r7, #7]
 8003e74:	2b01      	cmp	r3, #1
 8003e76:	d903      	bls.n	8003e80 <BSP_COM_Init+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8003e78:	f06f 0301 	mvn.w	r3, #1
 8003e7c:	60fb      	str	r3, [r7, #12]
 8003e7e:	e025      	b.n	8003ecc <BSP_COM_Init+0x68>
  }
  else
  {
     hcom_uart[COM].Instance = COM_USART[COM];
 8003e80:	79fb      	ldrb	r3, [r7, #7]
 8003e82:	79fa      	ldrb	r2, [r7, #7]
 8003e84:	4914      	ldr	r1, [pc, #80]	@ (8003ed8 <BSP_COM_Init+0x74>)
 8003e86:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8003e8a:	4814      	ldr	r0, [pc, #80]	@ (8003edc <BSP_COM_Init+0x78>)
 8003e8c:	4613      	mov	r3, r2
 8003e8e:	011b      	lsls	r3, r3, #4
 8003e90:	4413      	add	r3, r2
 8003e92:	00db      	lsls	r3, r3, #3
 8003e94:	4403      	add	r3, r0
 8003e96:	6019      	str	r1, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 0U)
    /* Init the UART Msp */
    USART1_MspInit(&hcom_uart[COM]);
 8003e98:	79fa      	ldrb	r2, [r7, #7]
 8003e9a:	4613      	mov	r3, r2
 8003e9c:	011b      	lsls	r3, r3, #4
 8003e9e:	4413      	add	r3, r2
 8003ea0:	00db      	lsls	r3, r3, #3
 8003ea2:	4a0e      	ldr	r2, [pc, #56]	@ (8003edc <BSP_COM_Init+0x78>)
 8003ea4:	4413      	add	r3, r2
 8003ea6:	4618      	mov	r0, r3
 8003ea8:	f000 f86a 	bl	8003f80 <USART1_MspInit>
      {
        return BSP_ERROR_MSP_FAILURE;
      }
    }
#endif
    if (MX_USART1_UART_Init(&hcom_uart[COM]))
 8003eac:	79fa      	ldrb	r2, [r7, #7]
 8003eae:	4613      	mov	r3, r2
 8003eb0:	011b      	lsls	r3, r3, #4
 8003eb2:	4413      	add	r3, r2
 8003eb4:	00db      	lsls	r3, r3, #3
 8003eb6:	4a09      	ldr	r2, [pc, #36]	@ (8003edc <BSP_COM_Init+0x78>)
 8003eb8:	4413      	add	r3, r2
 8003eba:	4618      	mov	r0, r3
 8003ebc:	f000 f810 	bl	8003ee0 <MX_USART1_UART_Init>
 8003ec0:	4603      	mov	r3, r0
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d002      	beq.n	8003ecc <BSP_COM_Init+0x68>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8003ec6:	f06f 0303 	mvn.w	r3, #3
 8003eca:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8003ecc:	68fb      	ldr	r3, [r7, #12]
}
 8003ece:	4618      	mov	r0, r3
 8003ed0:	3710      	adds	r7, #16
 8003ed2:	46bd      	mov	sp, r7
 8003ed4:	bd80      	pop	{r7, pc}
 8003ed6:	bf00      	nop
 8003ed8:	20000018 	.word	0x20000018
 8003edc:	20000a14 	.word	0x20000a14

08003ee0 <MX_USART1_UART_Init>:
 */

/* USART1 init function */

__weak HAL_StatusTypeDef MX_USART1_UART_Init(UART_HandleTypeDef* huart)
{
 8003ee0:	b580      	push	{r7, lr}
 8003ee2:	b084      	sub	sp, #16
 8003ee4:	af00      	add	r7, sp, #0
 8003ee6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8003ee8:	2300      	movs	r3, #0
 8003eea:	73fb      	strb	r3, [r7, #15]

  huart->Instance = USART1;
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	4a15      	ldr	r2, [pc, #84]	@ (8003f44 <MX_USART1_UART_Init+0x64>)
 8003ef0:	601a      	str	r2, [r3, #0]
  huart->Init.BaudRate = 115200;
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8003ef8:	605a      	str	r2, [r3, #4]
  huart->Init.WordLength = UART_WORDLENGTH_8B;
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	2200      	movs	r2, #0
 8003efe:	609a      	str	r2, [r3, #8]
  huart->Init.StopBits = UART_STOPBITS_1;
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	2200      	movs	r2, #0
 8003f04:	60da      	str	r2, [r3, #12]
  huart->Init.Parity = UART_PARITY_NONE;
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	2200      	movs	r2, #0
 8003f0a:	611a      	str	r2, [r3, #16]
  huart->Init.Mode = UART_MODE_TX_RX;
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	220c      	movs	r2, #12
 8003f10:	615a      	str	r2, [r3, #20]
  huart->Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	2200      	movs	r2, #0
 8003f16:	619a      	str	r2, [r3, #24]
  huart->Init.OverSampling = UART_OVERSAMPLING_16;
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	2200      	movs	r2, #0
 8003f1c:	61da      	str	r2, [r3, #28]
  huart->Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	2200      	movs	r2, #0
 8003f22:	621a      	str	r2, [r3, #32]
  huart->AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	2200      	movs	r2, #0
 8003f28:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(huart) != HAL_OK)
 8003f2a:	6878      	ldr	r0, [r7, #4]
 8003f2c:	f004 fa26 	bl	800837c <HAL_UART_Init>
 8003f30:	4603      	mov	r3, r0
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d001      	beq.n	8003f3a <MX_USART1_UART_Init+0x5a>
  {
    ret = HAL_ERROR;
 8003f36:	2301      	movs	r3, #1
 8003f38:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8003f3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f3c:	4618      	mov	r0, r3
 8003f3e:	3710      	adds	r7, #16
 8003f40:	46bd      	mov	sp, r7
 8003f42:	bd80      	pop	{r7, pc}
 8003f44:	40013800 	.word	0x40013800

08003f48 <__io_putchar>:
  (void)HAL_UART_Transmit(&hcom_uart[COM_ActiveLogPort], (uint8_t *)&ch, 1, COM_POLL_TIMEOUT);
  return ch;
}
#else /* For GCC Toolchains */
int __io_putchar (int ch)
{
 8003f48:	b580      	push	{r7, lr}
 8003f4a:	b082      	sub	sp, #8
 8003f4c:	af00      	add	r7, sp, #0
 8003f4e:	6078      	str	r0, [r7, #4]
  (void)HAL_UART_Transmit(&hcom_uart[COM_ActiveLogPort], (uint8_t *)&ch, 1, COM_POLL_TIMEOUT);
 8003f50:	4b09      	ldr	r3, [pc, #36]	@ (8003f78 <__io_putchar+0x30>)
 8003f52:	781b      	ldrb	r3, [r3, #0]
 8003f54:	461a      	mov	r2, r3
 8003f56:	4613      	mov	r3, r2
 8003f58:	011b      	lsls	r3, r3, #4
 8003f5a:	4413      	add	r3, r2
 8003f5c:	00db      	lsls	r3, r3, #3
 8003f5e:	4a07      	ldr	r2, [pc, #28]	@ (8003f7c <__io_putchar+0x34>)
 8003f60:	1898      	adds	r0, r3, r2
 8003f62:	1d39      	adds	r1, r7, #4
 8003f64:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003f68:	2201      	movs	r2, #1
 8003f6a:	f004 fa55 	bl	8008418 <HAL_UART_Transmit>
  return ch;
 8003f6e:	687b      	ldr	r3, [r7, #4]
}
 8003f70:	4618      	mov	r0, r3
 8003f72:	3708      	adds	r7, #8
 8003f74:	46bd      	mov	sp, r7
 8003f76:	bd80      	pop	{r7, pc}
 8003f78:	20000a9c 	.word	0x20000a9c
 8003f7c:	20000a14 	.word	0x20000a14

08003f80 <USART1_MspInit>:
 * @param  huart USART1 handle
 * @retval None
 */

static void USART1_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003f80:	b580      	push	{r7, lr}
 8003f82:	b0ac      	sub	sp, #176	@ 0xb0
 8003f84:	af00      	add	r7, sp, #0
 8003f86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003f88:	f107 0314 	add.w	r3, r7, #20
 8003f8c:	2288      	movs	r2, #136	@ 0x88
 8003f8e:	2100      	movs	r1, #0
 8003f90:	4618      	mov	r0, r3
 8003f92:	f007 fc12 	bl	800b7ba <memset>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8003f96:	2301      	movs	r3, #1
 8003f98:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8003f9a:	2300      	movs	r3, #0
 8003f9c:	64fb      	str	r3, [r7, #76]	@ 0x4c
    HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit);
 8003f9e:	f107 0314 	add.w	r3, r7, #20
 8003fa2:	4618      	mov	r0, r3
 8003fa4:	f003 f8e0 	bl	8007168 <HAL_RCCEx_PeriphCLKConfig>

    /* Enable Peripheral clock */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003fa8:	4b22      	ldr	r3, [pc, #136]	@ (8004034 <USART1_MspInit+0xb4>)
 8003faa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003fac:	4a21      	ldr	r2, [pc, #132]	@ (8004034 <USART1_MspInit+0xb4>)
 8003fae:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003fb2:	6613      	str	r3, [r2, #96]	@ 0x60
 8003fb4:	4b1f      	ldr	r3, [pc, #124]	@ (8004034 <USART1_MspInit+0xb4>)
 8003fb6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003fb8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003fbc:	613b      	str	r3, [r7, #16]
 8003fbe:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003fc0:	4b1c      	ldr	r3, [pc, #112]	@ (8004034 <USART1_MspInit+0xb4>)
 8003fc2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003fc4:	4a1b      	ldr	r2, [pc, #108]	@ (8004034 <USART1_MspInit+0xb4>)
 8003fc6:	f043 0302 	orr.w	r3, r3, #2
 8003fca:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003fcc:	4b19      	ldr	r3, [pc, #100]	@ (8004034 <USART1_MspInit+0xb4>)
 8003fce:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003fd0:	f003 0302 	and.w	r3, r3, #2
 8003fd4:	60fb      	str	r3, [r7, #12]
 8003fd6:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = BUS_USART1_TX_GPIO_PIN;
 8003fd8:	2340      	movs	r3, #64	@ 0x40
 8003fda:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003fde:	2302      	movs	r3, #2
 8003fe0:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003fe4:	2300      	movs	r3, #0
 8003fe6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003fea:	2303      	movs	r3, #3
 8003fec:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = BUS_USART1_TX_GPIO_AF;
 8003ff0:	2307      	movs	r3, #7
 8003ff2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(BUS_USART1_TX_GPIO_PORT, &GPIO_InitStruct);
 8003ff6:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8003ffa:	4619      	mov	r1, r3
 8003ffc:	480e      	ldr	r0, [pc, #56]	@ (8004038 <USART1_MspInit+0xb8>)
 8003ffe:	f000 fee3 	bl	8004dc8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_USART1_RX_GPIO_PIN;
 8004002:	2380      	movs	r3, #128	@ 0x80
 8004004:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004008:	2302      	movs	r3, #2
 800400a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800400e:	2300      	movs	r3, #0
 8004010:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004014:	2303      	movs	r3, #3
 8004016:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = BUS_USART1_RX_GPIO_AF;
 800401a:	2307      	movs	r3, #7
 800401c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(BUS_USART1_RX_GPIO_PORT, &GPIO_InitStruct);
 8004020:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8004024:	4619      	mov	r1, r3
 8004026:	4804      	ldr	r0, [pc, #16]	@ (8004038 <USART1_MspInit+0xb8>)
 8004028:	f000 fece 	bl	8004dc8 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
}
 800402c:	bf00      	nop
 800402e:	37b0      	adds	r7, #176	@ 0xb0
 8004030:	46bd      	mov	sp, r7
 8004032:	bd80      	pop	{r7, pc}
 8004034:	40021000 	.word	0x40021000
 8004038:	48000400 	.word	0x48000400

0800403c <I2Cx_MspInit>:
 */

I2C_HandleTypeDef hI2cHandler;

static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 800403c:	b580      	push	{r7, lr}
 800403e:	b08a      	sub	sp, #40	@ 0x28
 8004040:	af00      	add	r7, sp, #0
 8004042:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;

  /*** Configure the GPIOs ***/
  /* Enable GPIO clock */
  DISCOVERY_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8004044:	4b27      	ldr	r3, [pc, #156]	@ (80040e4 <I2Cx_MspInit+0xa8>)
 8004046:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004048:	4a26      	ldr	r2, [pc, #152]	@ (80040e4 <I2Cx_MspInit+0xa8>)
 800404a:	f043 0302 	orr.w	r3, r3, #2
 800404e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004050:	4b24      	ldr	r3, [pc, #144]	@ (80040e4 <I2Cx_MspInit+0xa8>)
 8004052:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004054:	f003 0302 	and.w	r3, r3, #2
 8004058:	613b      	str	r3, [r7, #16]
 800405a:	693b      	ldr	r3, [r7, #16]

  /* Configure I2C Tx, Rx as alternate function */
  gpio_init_structure.Pin = DISCOVERY_I2Cx_SCL_PIN | DISCOVERY_I2Cx_SDA_PIN;
 800405c:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8004060:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8004062:	2312      	movs	r3, #18
 8004064:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull = GPIO_PULLUP;
 8004066:	2301      	movs	r3, #1
 8004068:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800406a:	2303      	movs	r3, #3
 800406c:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate = DISCOVERY_I2Cx_SCL_SDA_AF;
 800406e:	2304      	movs	r3, #4
 8004070:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8004072:	f107 0314 	add.w	r3, r7, #20
 8004076:	4619      	mov	r1, r3
 8004078:	481b      	ldr	r0, [pc, #108]	@ (80040e8 <I2Cx_MspInit+0xac>)
 800407a:	f000 fea5 	bl	8004dc8 <HAL_GPIO_Init>

  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 800407e:	f107 0314 	add.w	r3, r7, #20
 8004082:	4619      	mov	r1, r3
 8004084:	4818      	ldr	r0, [pc, #96]	@ (80040e8 <I2Cx_MspInit+0xac>)
 8004086:	f000 fe9f 	bl	8004dc8 <HAL_GPIO_Init>

  /*** Configure the I2C peripheral ***/
  /* Enable I2C clock */
  DISCOVERY_I2Cx_CLK_ENABLE();
 800408a:	4b16      	ldr	r3, [pc, #88]	@ (80040e4 <I2Cx_MspInit+0xa8>)
 800408c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800408e:	4a15      	ldr	r2, [pc, #84]	@ (80040e4 <I2Cx_MspInit+0xa8>)
 8004090:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8004094:	6593      	str	r3, [r2, #88]	@ 0x58
 8004096:	4b13      	ldr	r3, [pc, #76]	@ (80040e4 <I2Cx_MspInit+0xa8>)
 8004098:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800409a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800409e:	60fb      	str	r3, [r7, #12]
 80040a0:	68fb      	ldr	r3, [r7, #12]

  /* Force the I2C peripheral clock reset */
  DISCOVERY_I2Cx_FORCE_RESET();
 80040a2:	4b10      	ldr	r3, [pc, #64]	@ (80040e4 <I2Cx_MspInit+0xa8>)
 80040a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80040a6:	4a0f      	ldr	r2, [pc, #60]	@ (80040e4 <I2Cx_MspInit+0xa8>)
 80040a8:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80040ac:	6393      	str	r3, [r2, #56]	@ 0x38

  /* Release the I2C peripheral clock reset */
  DISCOVERY_I2Cx_RELEASE_RESET();
 80040ae:	4b0d      	ldr	r3, [pc, #52]	@ (80040e4 <I2Cx_MspInit+0xa8>)
 80040b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80040b2:	4a0c      	ldr	r2, [pc, #48]	@ (80040e4 <I2Cx_MspInit+0xa8>)
 80040b4:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 80040b8:	6393      	str	r3, [r2, #56]	@ 0x38

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_EV_IRQn, 0x0F, 0);
 80040ba:	2200      	movs	r2, #0
 80040bc:	210f      	movs	r1, #15
 80040be:	2021      	movs	r0, #33	@ 0x21
 80040c0:	f000 fce1 	bl	8004a86 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_EV_IRQn);
 80040c4:	2021      	movs	r0, #33	@ 0x21
 80040c6:	f000 fcfa 	bl	8004abe <HAL_NVIC_EnableIRQ>

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_ER_IRQn, 0x0F, 0);
 80040ca:	2200      	movs	r2, #0
 80040cc:	210f      	movs	r1, #15
 80040ce:	2022      	movs	r0, #34	@ 0x22
 80040d0:	f000 fcd9 	bl	8004a86 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_ER_IRQn);
 80040d4:	2022      	movs	r0, #34	@ 0x22
 80040d6:	f000 fcf2 	bl	8004abe <HAL_NVIC_EnableIRQ>
}
 80040da:	bf00      	nop
 80040dc:	3728      	adds	r7, #40	@ 0x28
 80040de:	46bd      	mov	sp, r7
 80040e0:	bd80      	pop	{r7, pc}
 80040e2:	bf00      	nop
 80040e4:	40021000 	.word	0x40021000
 80040e8:	48000400 	.word	0x48000400

080040ec <I2Cx_Init>:

static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 80040ec:	b580      	push	{r7, lr}
 80040ee:	b082      	sub	sp, #8
 80040f0:	af00      	add	r7, sp, #0
 80040f2:	6078      	str	r0, [r7, #4]
  /* I2C configuration */
  i2c_handler->Instance              = DISCOVERY_I2Cx;
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	4a12      	ldr	r2, [pc, #72]	@ (8004140 <I2Cx_Init+0x54>)
 80040f8:	601a      	str	r2, [r3, #0]
  i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	4a11      	ldr	r2, [pc, #68]	@ (8004144 <I2Cx_Init+0x58>)
 80040fe:	605a      	str	r2, [r3, #4]
  i2c_handler->Init.OwnAddress1      = 0;
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	2200      	movs	r2, #0
 8004104:	609a      	str	r2, [r3, #8]
  i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	2201      	movs	r2, #1
 800410a:	60da      	str	r2, [r3, #12]
  i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	2200      	movs	r2, #0
 8004110:	611a      	str	r2, [r3, #16]
  i2c_handler->Init.OwnAddress2      = 0;
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	2200      	movs	r2, #0
 8004116:	615a      	str	r2, [r3, #20]
  i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	2200      	movs	r2, #0
 800411c:	61da      	str	r2, [r3, #28]
  i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	2200      	movs	r2, #0
 8004122:	621a      	str	r2, [r3, #32]

  /* Init the I2C */
  I2Cx_MspInit(i2c_handler);
 8004124:	6878      	ldr	r0, [r7, #4]
 8004126:	f7ff ff89 	bl	800403c <I2Cx_MspInit>
  HAL_I2C_Init(i2c_handler);
 800412a:	6878      	ldr	r0, [r7, #4]
 800412c:	f001 f957 	bl	80053de <HAL_I2C_Init>

  /**Configure Analogue filter */
  HAL_I2CEx_ConfigAnalogFilter(i2c_handler, I2C_ANALOGFILTER_ENABLE);
 8004130:	2100      	movs	r1, #0
 8004132:	6878      	ldr	r0, [r7, #4]
 8004134:	f001 ff0e 	bl	8005f54 <HAL_I2CEx_ConfigAnalogFilter>
}
 8004138:	bf00      	nop
 800413a:	3708      	adds	r7, #8
 800413c:	46bd      	mov	sp, r7
 800413e:	bd80      	pop	{r7, pc}
 8004140:	40005800 	.word	0x40005800
 8004144:	00702681 	.word	0x00702681

08004148 <I2Cx_Error>:

static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 8004148:	b580      	push	{r7, lr}
 800414a:	b082      	sub	sp, #8
 800414c:	af00      	add	r7, sp, #0
 800414e:	6078      	str	r0, [r7, #4]
 8004150:	460b      	mov	r3, r1
 8004152:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 8004154:	6878      	ldr	r0, [r7, #4]
 8004156:	f001 f9dd 	bl	8005514 <HAL_I2C_DeInit>

  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 800415a:	6878      	ldr	r0, [r7, #4]
 800415c:	f7ff ffc6 	bl	80040ec <I2Cx_Init>
}
 8004160:	bf00      	nop
 8004162:	3708      	adds	r7, #8
 8004164:	46bd      	mov	sp, r7
 8004166:	bd80      	pop	{r7, pc}

08004168 <I2Cx_ReadMultiple>:

static HAL_StatusTypeDef I2Cx_ReadMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 8004168:	b580      	push	{r7, lr}
 800416a:	b08a      	sub	sp, #40	@ 0x28
 800416c:	af04      	add	r7, sp, #16
 800416e:	60f8      	str	r0, [r7, #12]
 8004170:	4608      	mov	r0, r1
 8004172:	4611      	mov	r1, r2
 8004174:	461a      	mov	r2, r3
 8004176:	4603      	mov	r3, r0
 8004178:	72fb      	strb	r3, [r7, #11]
 800417a:	460b      	mov	r3, r1
 800417c:	813b      	strh	r3, [r7, #8]
 800417e:	4613      	mov	r3, r2
 8004180:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8004182:	2300      	movs	r3, #0
 8004184:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8004186:	7afb      	ldrb	r3, [r7, #11]
 8004188:	b299      	uxth	r1, r3
 800418a:	88f8      	ldrh	r0, [r7, #6]
 800418c:	893a      	ldrh	r2, [r7, #8]
 800418e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004192:	9302      	str	r3, [sp, #8]
 8004194:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8004196:	9301      	str	r3, [sp, #4]
 8004198:	6a3b      	ldr	r3, [r7, #32]
 800419a:	9300      	str	r3, [sp, #0]
 800419c:	4603      	mov	r3, r0
 800419e:	68f8      	ldr	r0, [r7, #12]
 80041a0:	f001 fafc 	bl	800579c <HAL_I2C_Mem_Read>
 80041a4:	4603      	mov	r3, r0
 80041a6:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 80041a8:	7dfb      	ldrb	r3, [r7, #23]
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d004      	beq.n	80041b8 <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occurred */
    I2Cx_Error(i2c_handler, Addr);
 80041ae:	7afb      	ldrb	r3, [r7, #11]
 80041b0:	4619      	mov	r1, r3
 80041b2:	68f8      	ldr	r0, [r7, #12]
 80041b4:	f7ff ffc8 	bl	8004148 <I2Cx_Error>
  }
  return status;
 80041b8:	7dfb      	ldrb	r3, [r7, #23]
}
 80041ba:	4618      	mov	r0, r3
 80041bc:	3718      	adds	r7, #24
 80041be:	46bd      	mov	sp, r7
 80041c0:	bd80      	pop	{r7, pc}
	...

080041c4 <SENSOR_IO_Read>:


uint8_t SENSOR_IO_Read(uint8_t Addr, uint8_t Reg)
{
 80041c4:	b580      	push	{r7, lr}
 80041c6:	b086      	sub	sp, #24
 80041c8:	af02      	add	r7, sp, #8
 80041ca:	4603      	mov	r3, r0
 80041cc:	460a      	mov	r2, r1
 80041ce:	71fb      	strb	r3, [r7, #7]
 80041d0:	4613      	mov	r3, r2
 80041d2:	71bb      	strb	r3, [r7, #6]
  uint8_t read_value = 0;
 80041d4:	2300      	movs	r3, #0
 80041d6:	73fb      	strb	r3, [r7, #15]

  I2Cx_ReadMultiple(&hI2cHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 80041d8:	79bb      	ldrb	r3, [r7, #6]
 80041da:	b29a      	uxth	r2, r3
 80041dc:	79f9      	ldrb	r1, [r7, #7]
 80041de:	2301      	movs	r3, #1
 80041e0:	9301      	str	r3, [sp, #4]
 80041e2:	f107 030f 	add.w	r3, r7, #15
 80041e6:	9300      	str	r3, [sp, #0]
 80041e8:	2301      	movs	r3, #1
 80041ea:	4804      	ldr	r0, [pc, #16]	@ (80041fc <SENSOR_IO_Read+0x38>)
 80041ec:	f7ff ffbc 	bl	8004168 <I2Cx_ReadMultiple>

  return read_value;
 80041f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80041f2:	4618      	mov	r0, r3
 80041f4:	3710      	adds	r7, #16
 80041f6:	46bd      	mov	sp, r7
 80041f8:	bd80      	pop	{r7, pc}
 80041fa:	bf00      	nop
 80041fc:	20000aa0 	.word	0x20000aa0

08004200 <I2Cx_WriteMultiple>:

static HAL_StatusTypeDef I2Cx_WriteMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 8004200:	b580      	push	{r7, lr}
 8004202:	b08a      	sub	sp, #40	@ 0x28
 8004204:	af04      	add	r7, sp, #16
 8004206:	60f8      	str	r0, [r7, #12]
 8004208:	4608      	mov	r0, r1
 800420a:	4611      	mov	r1, r2
 800420c:	461a      	mov	r2, r3
 800420e:	4603      	mov	r3, r0
 8004210:	72fb      	strb	r3, [r7, #11]
 8004212:	460b      	mov	r3, r1
 8004214:	813b      	strh	r3, [r7, #8]
 8004216:	4613      	mov	r3, r2
 8004218:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 800421a:	2300      	movs	r3, #0
 800421c:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 800421e:	7afb      	ldrb	r3, [r7, #11]
 8004220:	b299      	uxth	r1, r3
 8004222:	88f8      	ldrh	r0, [r7, #6]
 8004224:	893a      	ldrh	r2, [r7, #8]
 8004226:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800422a:	9302      	str	r3, [sp, #8]
 800422c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800422e:	9301      	str	r3, [sp, #4]
 8004230:	6a3b      	ldr	r3, [r7, #32]
 8004232:	9300      	str	r3, [sp, #0]
 8004234:	4603      	mov	r3, r0
 8004236:	68f8      	ldr	r0, [r7, #12]
 8004238:	f001 f99c 	bl	8005574 <HAL_I2C_Mem_Write>
 800423c:	4603      	mov	r3, r0
 800423e:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 8004240:	7dfb      	ldrb	r3, [r7, #23]
 8004242:	2b00      	cmp	r3, #0
 8004244:	d004      	beq.n	8004250 <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 8004246:	7afb      	ldrb	r3, [r7, #11]
 8004248:	4619      	mov	r1, r3
 800424a:	68f8      	ldr	r0, [r7, #12]
 800424c:	f7ff ff7c 	bl	8004148 <I2Cx_Error>
  }
  return status;
 8004250:	7dfb      	ldrb	r3, [r7, #23]
}
 8004252:	4618      	mov	r0, r3
 8004254:	3718      	adds	r7, #24
 8004256:	46bd      	mov	sp, r7
 8004258:	bd80      	pop	{r7, pc}
	...

0800425c <SENSOR_IO_Write>:

void SENSOR_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 800425c:	b580      	push	{r7, lr}
 800425e:	b084      	sub	sp, #16
 8004260:	af02      	add	r7, sp, #8
 8004262:	4603      	mov	r3, r0
 8004264:	71fb      	strb	r3, [r7, #7]
 8004266:	460b      	mov	r3, r1
 8004268:	71bb      	strb	r3, [r7, #6]
 800426a:	4613      	mov	r3, r2
 800426c:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 800426e:	79bb      	ldrb	r3, [r7, #6]
 8004270:	b29a      	uxth	r2, r3
 8004272:	79f9      	ldrb	r1, [r7, #7]
 8004274:	2301      	movs	r3, #1
 8004276:	9301      	str	r3, [sp, #4]
 8004278:	1d7b      	adds	r3, r7, #5
 800427a:	9300      	str	r3, [sp, #0]
 800427c:	2301      	movs	r3, #1
 800427e:	4803      	ldr	r0, [pc, #12]	@ (800428c <SENSOR_IO_Write+0x30>)
 8004280:	f7ff ffbe 	bl	8004200 <I2Cx_WriteMultiple>
}
 8004284:	bf00      	nop
 8004286:	3708      	adds	r7, #8
 8004288:	46bd      	mov	sp, r7
 800428a:	bd80      	pop	{r7, pc}
 800428c:	20000aa0 	.word	0x20000aa0

08004290 <SENSOR_IO_Init>:

void SENSOR_IO_Init(void)
{
 8004290:	b580      	push	{r7, lr}
 8004292:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cHandler);
 8004294:	4802      	ldr	r0, [pc, #8]	@ (80042a0 <SENSOR_IO_Init+0x10>)
 8004296:	f7ff ff29 	bl	80040ec <I2Cx_Init>
}
 800429a:	bf00      	nop
 800429c:	bd80      	pop	{r7, pc}
 800429e:	bf00      	nop
 80042a0:	20000aa0 	.word	0x20000aa0

080042a4 <SENSOR_IO_ReadMultiple>:

uint16_t SENSOR_IO_ReadMultiple(uint8_t Addr, uint8_t Reg, uint8_t *Buffer, uint16_t Length)
{
 80042a4:	b580      	push	{r7, lr}
 80042a6:	b084      	sub	sp, #16
 80042a8:	af02      	add	r7, sp, #8
 80042aa:	603a      	str	r2, [r7, #0]
 80042ac:	461a      	mov	r2, r3
 80042ae:	4603      	mov	r3, r0
 80042b0:	71fb      	strb	r3, [r7, #7]
 80042b2:	460b      	mov	r3, r1
 80042b4:	71bb      	strb	r3, [r7, #6]
 80042b6:	4613      	mov	r3, r2
 80042b8:	80bb      	strh	r3, [r7, #4]
 return I2Cx_ReadMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, Buffer, Length);
 80042ba:	79bb      	ldrb	r3, [r7, #6]
 80042bc:	b29a      	uxth	r2, r3
 80042be:	79f9      	ldrb	r1, [r7, #7]
 80042c0:	88bb      	ldrh	r3, [r7, #4]
 80042c2:	9301      	str	r3, [sp, #4]
 80042c4:	683b      	ldr	r3, [r7, #0]
 80042c6:	9300      	str	r3, [sp, #0]
 80042c8:	2301      	movs	r3, #1
 80042ca:	4804      	ldr	r0, [pc, #16]	@ (80042dc <SENSOR_IO_ReadMultiple+0x38>)
 80042cc:	f7ff ff4c 	bl	8004168 <I2Cx_ReadMultiple>
 80042d0:	4603      	mov	r3, r0
}
 80042d2:	4618      	mov	r0, r3
 80042d4:	3708      	adds	r7, #8
 80042d6:	46bd      	mov	sp, r7
 80042d8:	bd80      	pop	{r7, pc}
 80042da:	bf00      	nop
 80042dc:	20000aa0 	.word	0x20000aa0

080042e0 <BSP_SPI3_Init>:
/**
  * @brief  Initializes SPI HAL.
  * @retval BSP status
  */
int32_t BSP_SPI3_Init(void)
{
 80042e0:	b580      	push	{r7, lr}
 80042e2:	b082      	sub	sp, #8
 80042e4:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 80042e6:	2300      	movs	r3, #0
 80042e8:	607b      	str	r3, [r7, #4]

  hspi3.Instance  = SPI3;
 80042ea:	4b12      	ldr	r3, [pc, #72]	@ (8004334 <BSP_SPI3_Init+0x54>)
 80042ec:	4a12      	ldr	r2, [pc, #72]	@ (8004338 <BSP_SPI3_Init+0x58>)
 80042ee:	601a      	str	r2, [r3, #0]

  if(SPI3InitCounter++ == 0)
 80042f0:	4b12      	ldr	r3, [pc, #72]	@ (800433c <BSP_SPI3_Init+0x5c>)
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	1c5a      	adds	r2, r3, #1
 80042f6:	4911      	ldr	r1, [pc, #68]	@ (800433c <BSP_SPI3_Init+0x5c>)
 80042f8:	600a      	str	r2, [r1, #0]
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d114      	bne.n	8004328 <BSP_SPI3_Init+0x48>
  {
    if (HAL_SPI_GetState(&hspi3) == HAL_SPI_STATE_RESET)
 80042fe:	480d      	ldr	r0, [pc, #52]	@ (8004334 <BSP_SPI3_Init+0x54>)
 8004300:	f003 feca 	bl	8008098 <HAL_SPI_GetState>
 8004304:	4603      	mov	r3, r0
 8004306:	2b00      	cmp	r3, #0
 8004308:	d10e      	bne.n	8004328 <BSP_SPI3_Init+0x48>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 0U)
        /* Init the SPI Msp */
        SPI3_MspInit(&hspi3);
 800430a:	480a      	ldr	r0, [pc, #40]	@ (8004334 <BSP_SPI3_Init+0x54>)
 800430c:	f000 f882 	bl	8004414 <SPI3_MspInit>
            {
                return BSP_ERROR_MSP_FAILURE;
            }
        }
#endif
        if(ret == BSP_ERROR_NONE)
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	2b00      	cmp	r3, #0
 8004314:	d108      	bne.n	8004328 <BSP_SPI3_Init+0x48>
        {
            /* Init the SPI */
            if (MX_SPI3_Init(&hspi3) != HAL_OK)
 8004316:	4807      	ldr	r0, [pc, #28]	@ (8004334 <BSP_SPI3_Init+0x54>)
 8004318:	f000 f83a 	bl	8004390 <MX_SPI3_Init>
 800431c:	4603      	mov	r3, r0
 800431e:	2b00      	cmp	r3, #0
 8004320:	d002      	beq.n	8004328 <BSP_SPI3_Init+0x48>
            {
                ret = BSP_ERROR_BUS_FAILURE;
 8004322:	f06f 0307 	mvn.w	r3, #7
 8004326:	607b      	str	r3, [r7, #4]
            }
        }
    }
  }

  return ret;
 8004328:	687b      	ldr	r3, [r7, #4]
}
 800432a:	4618      	mov	r0, r3
 800432c:	3708      	adds	r7, #8
 800432e:	46bd      	mov	sp, r7
 8004330:	bd80      	pop	{r7, pc}
 8004332:	bf00      	nop
 8004334:	20000af4 	.word	0x20000af4
 8004338:	40003c00 	.word	0x40003c00
 800433c:	20000b58 	.word	0x20000b58

08004340 <BSP_SPI3_SendRecv>:
  * @param  pData: Pointer to data buffer to send/receive
  * @param  Length: Length of data in byte
  * @retval BSP status
  */
int32_t BSP_SPI3_SendRecv(uint8_t *pTxData, uint8_t *pRxData, uint16_t Length)
{
 8004340:	b580      	push	{r7, lr}
 8004342:	b088      	sub	sp, #32
 8004344:	af02      	add	r7, sp, #8
 8004346:	60f8      	str	r0, [r7, #12]
 8004348:	60b9      	str	r1, [r7, #8]
 800434a:	4613      	mov	r3, r2
 800434c:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 800434e:	2300      	movs	r3, #0
 8004350:	617b      	str	r3, [r7, #20]

  if(HAL_SPI_TransmitReceive(&hspi3, pTxData, pRxData, Length, BUS_SPI3_POLL_TIMEOUT) != HAL_OK)
 8004352:	88fb      	ldrh	r3, [r7, #6]
 8004354:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8004358:	9200      	str	r2, [sp, #0]
 800435a:	68ba      	ldr	r2, [r7, #8]
 800435c:	68f9      	ldr	r1, [r7, #12]
 800435e:	4807      	ldr	r0, [pc, #28]	@ (800437c <BSP_SPI3_SendRecv+0x3c>)
 8004360:	f003 fc7b 	bl	8007c5a <HAL_SPI_TransmitReceive>
 8004364:	4603      	mov	r3, r0
 8004366:	2b00      	cmp	r3, #0
 8004368:	d002      	beq.n	8004370 <BSP_SPI3_SendRecv+0x30>
  {
      ret = BSP_ERROR_UNKNOWN_FAILURE;
 800436a:	f06f 0305 	mvn.w	r3, #5
 800436e:	617b      	str	r3, [r7, #20]
  }
  return ret;
 8004370:	697b      	ldr	r3, [r7, #20]
}
 8004372:	4618      	mov	r0, r3
 8004374:	3718      	adds	r7, #24
 8004376:	46bd      	mov	sp, r7
 8004378:	bd80      	pop	{r7, pc}
 800437a:	bf00      	nop
 800437c:	20000af4 	.word	0x20000af4

08004380 <BSP_GetTick>:

/**
  * @brief  Return system tick in ms
  * @retval Current HAL time base time stamp
  */
int32_t BSP_GetTick(void) {
 8004380:	b580      	push	{r7, lr}
 8004382:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8004384:	f000 fa74 	bl	8004870 <HAL_GetTick>
 8004388:	4603      	mov	r3, r0
}
 800438a:	4618      	mov	r0, r3
 800438c:	bd80      	pop	{r7, pc}
	...

08004390 <MX_SPI3_Init>:

/* SPI3 init function */

__weak HAL_StatusTypeDef MX_SPI3_Init(SPI_HandleTypeDef* hspi)
{
 8004390:	b580      	push	{r7, lr}
 8004392:	b084      	sub	sp, #16
 8004394:	af00      	add	r7, sp, #0
 8004396:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8004398:	2300      	movs	r3, #0
 800439a:	73fb      	strb	r3, [r7, #15]

  hspi->Instance = SPI3;
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	4a1c      	ldr	r2, [pc, #112]	@ (8004410 <MX_SPI3_Init+0x80>)
 80043a0:	601a      	str	r2, [r3, #0]
  hspi->Init.Mode = SPI_MODE_MASTER;
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80043a8:	605a      	str	r2, [r3, #4]
  hspi->Init.Direction = SPI_DIRECTION_2LINES;
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	2200      	movs	r2, #0
 80043ae:	609a      	str	r2, [r3, #8]
  hspi->Init.DataSize = SPI_DATASIZE_8BIT;
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 80043b6:	60da      	str	r2, [r3, #12]
  hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	2200      	movs	r2, #0
 80043bc:	611a      	str	r2, [r3, #16]
  hspi->Init.CLKPhase = SPI_PHASE_1EDGE;
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	2200      	movs	r2, #0
 80043c2:	615a      	str	r2, [r3, #20]
  hspi->Init.NSS = SPI_NSS_SOFT;
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80043ca:	619a      	str	r2, [r3, #24]
  hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	2200      	movs	r2, #0
 80043d0:	61da      	str	r2, [r3, #28]
  hspi->Init.FirstBit = SPI_FIRSTBIT_MSB;
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	2200      	movs	r2, #0
 80043d6:	621a      	str	r2, [r3, #32]
  hspi->Init.TIMode = SPI_TIMODE_DISABLE;
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	2200      	movs	r2, #0
 80043dc:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	2200      	movs	r2, #0
 80043e2:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi->Init.CRCPolynomial = 7;
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	2207      	movs	r2, #7
 80043e8:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi->Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	2200      	movs	r2, #0
 80043ee:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	2208      	movs	r2, #8
 80043f4:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(hspi) != HAL_OK)
 80043f6:	6878      	ldr	r0, [r7, #4]
 80043f8:	f003 fb82 	bl	8007b00 <HAL_SPI_Init>
 80043fc:	4603      	mov	r3, r0
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d001      	beq.n	8004406 <MX_SPI3_Init+0x76>
  {
    ret = HAL_ERROR;
 8004402:	2301      	movs	r3, #1
 8004404:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8004406:	7bfb      	ldrb	r3, [r7, #15]
}
 8004408:	4618      	mov	r0, r3
 800440a:	3710      	adds	r7, #16
 800440c:	46bd      	mov	sp, r7
 800440e:	bd80      	pop	{r7, pc}
 8004410:	40003c00 	.word	0x40003c00

08004414 <SPI3_MspInit>:

static void SPI3_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8004414:	b580      	push	{r7, lr}
 8004416:	b08a      	sub	sp, #40	@ 0x28
 8004418:	af00      	add	r7, sp, #0
 800441a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_SPI3_CLK_ENABLE();
 800441c:	4b27      	ldr	r3, [pc, #156]	@ (80044bc <SPI3_MspInit+0xa8>)
 800441e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004420:	4a26      	ldr	r2, [pc, #152]	@ (80044bc <SPI3_MspInit+0xa8>)
 8004422:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004426:	6593      	str	r3, [r2, #88]	@ 0x58
 8004428:	4b24      	ldr	r3, [pc, #144]	@ (80044bc <SPI3_MspInit+0xa8>)
 800442a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800442c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004430:	613b      	str	r3, [r7, #16]
 8004432:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004434:	4b21      	ldr	r3, [pc, #132]	@ (80044bc <SPI3_MspInit+0xa8>)
 8004436:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004438:	4a20      	ldr	r2, [pc, #128]	@ (80044bc <SPI3_MspInit+0xa8>)
 800443a:	f043 0304 	orr.w	r3, r3, #4
 800443e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004440:	4b1e      	ldr	r3, [pc, #120]	@ (80044bc <SPI3_MspInit+0xa8>)
 8004442:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004444:	f003 0304 	and.w	r3, r3, #4
 8004448:	60fb      	str	r3, [r7, #12]
 800444a:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = BUS_SPI3_SCK_GPIO_PIN;
 800444c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004450:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004452:	2302      	movs	r3, #2
 8004454:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004456:	2300      	movs	r3, #0
 8004458:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800445a:	2303      	movs	r3, #3
 800445c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_SPI3_SCK_GPIO_AF;
 800445e:	2306      	movs	r3, #6
 8004460:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(BUS_SPI3_SCK_GPIO_PORT, &GPIO_InitStruct);
 8004462:	f107 0314 	add.w	r3, r7, #20
 8004466:	4619      	mov	r1, r3
 8004468:	4815      	ldr	r0, [pc, #84]	@ (80044c0 <SPI3_MspInit+0xac>)
 800446a:	f000 fcad 	bl	8004dc8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_SPI3_MISO_GPIO_PIN;
 800446e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8004472:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004474:	2302      	movs	r3, #2
 8004476:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004478:	2300      	movs	r3, #0
 800447a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800447c:	2303      	movs	r3, #3
 800447e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_SPI3_MISO_GPIO_AF;
 8004480:	2306      	movs	r3, #6
 8004482:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(BUS_SPI3_MISO_GPIO_PORT, &GPIO_InitStruct);
 8004484:	f107 0314 	add.w	r3, r7, #20
 8004488:	4619      	mov	r1, r3
 800448a:	480d      	ldr	r0, [pc, #52]	@ (80044c0 <SPI3_MspInit+0xac>)
 800448c:	f000 fc9c 	bl	8004dc8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_SPI3_MOSI_GPIO_PIN;
 8004490:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004494:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004496:	2302      	movs	r3, #2
 8004498:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800449a:	2300      	movs	r3, #0
 800449c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800449e:	2303      	movs	r3, #3
 80044a0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_SPI3_MOSI_GPIO_AF;
 80044a2:	2306      	movs	r3, #6
 80044a4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(BUS_SPI3_MOSI_GPIO_PORT, &GPIO_InitStruct);
 80044a6:	f107 0314 	add.w	r3, r7, #20
 80044aa:	4619      	mov	r1, r3
 80044ac:	4804      	ldr	r0, [pc, #16]	@ (80044c0 <SPI3_MspInit+0xac>)
 80044ae:	f000 fc8b 	bl	8004dc8 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
}
 80044b2:	bf00      	nop
 80044b4:	3728      	adds	r7, #40	@ 0x28
 80044b6:	46bd      	mov	sp, r7
 80044b8:	bd80      	pop	{r7, pc}
 80044ba:	bf00      	nop
 80044bc:	40021000 	.word	0x40021000
 80044c0:	48000800 	.word	0x48000800

080044c4 <BSP_ACCELERO_Init>:
/**
  * @brief  Initialize the ACCELERO.
  * @retval ACCELERO_OK or ACCELERO_ERROR
  */
ACCELERO_StatusTypeDef BSP_ACCELERO_Init(void)
{  
 80044c4:	b580      	push	{r7, lr}
 80044c6:	b084      	sub	sp, #16
 80044c8:	af00      	add	r7, sp, #0
  ACCELERO_StatusTypeDef ret = ACCELERO_OK;
 80044ca:	2300      	movs	r3, #0
 80044cc:	73fb      	strb	r3, [r7, #15]
  uint16_t ctrl = 0x0000;
 80044ce:	2300      	movs	r3, #0
 80044d0:	81bb      	strh	r3, [r7, #12]
  ACCELERO_InitTypeDef LSM6DSL_InitStructure;

  if(Lsm6dslAccDrv.ReadID() != LSM6DSL_ACC_GYRO_WHO_AM_I)
 80044d2:	4b1a      	ldr	r3, [pc, #104]	@ (800453c <BSP_ACCELERO_Init+0x78>)
 80044d4:	689b      	ldr	r3, [r3, #8]
 80044d6:	4798      	blx	r3
 80044d8:	4603      	mov	r3, r0
 80044da:	2b6a      	cmp	r3, #106	@ 0x6a
 80044dc:	d002      	beq.n	80044e4 <BSP_ACCELERO_Init+0x20>
  {
    ret = ACCELERO_ERROR;
 80044de:	2301      	movs	r3, #1
 80044e0:	73fb      	strb	r3, [r7, #15]
 80044e2:	e025      	b.n	8004530 <BSP_ACCELERO_Init+0x6c>
  }
  else
  {
    /* Initialize the ACCELERO accelerometer driver structure */
    AccelerometerDrv = &Lsm6dslAccDrv;
 80044e4:	4b16      	ldr	r3, [pc, #88]	@ (8004540 <BSP_ACCELERO_Init+0x7c>)
 80044e6:	4a15      	ldr	r2, [pc, #84]	@ (800453c <BSP_ACCELERO_Init+0x78>)
 80044e8:	601a      	str	r2, [r3, #0]
  
    /* MEMS configuration ------------------------------------------------------*/
    /* Fill the ACCELERO accelerometer structure */
    LSM6DSL_InitStructure.AccOutput_DataRate = LSM6DSL_ODR_52Hz;
 80044ea:	2330      	movs	r3, #48	@ 0x30
 80044ec:	717b      	strb	r3, [r7, #5]
    LSM6DSL_InitStructure.Axes_Enable = 0;
 80044ee:	2300      	movs	r3, #0
 80044f0:	71bb      	strb	r3, [r7, #6]
    LSM6DSL_InitStructure.AccFull_Scale = LSM6DSL_ACC_FULLSCALE_2G;
 80044f2:	2300      	movs	r3, #0
 80044f4:	72bb      	strb	r3, [r7, #10]
    LSM6DSL_InitStructure.BlockData_Update = LSM6DSL_BDU_BLOCK_UPDATE;
 80044f6:	2340      	movs	r3, #64	@ 0x40
 80044f8:	723b      	strb	r3, [r7, #8]
    LSM6DSL_InitStructure.High_Resolution = 0;
 80044fa:	2300      	movs	r3, #0
 80044fc:	71fb      	strb	r3, [r7, #7]
    LSM6DSL_InitStructure.Communication_Mode = 0;
 80044fe:	2300      	movs	r3, #0
 8004500:	72fb      	strb	r3, [r7, #11]
        
    /* Configure MEMS: data rate, full scale  */
    ctrl =  (LSM6DSL_InitStructure.AccOutput_DataRate | LSM6DSL_InitStructure.AccFull_Scale);
 8004502:	797a      	ldrb	r2, [r7, #5]
 8004504:	7abb      	ldrb	r3, [r7, #10]
 8004506:	4313      	orrs	r3, r2
 8004508:	b2db      	uxtb	r3, r3
 800450a:	81bb      	strh	r3, [r7, #12]
    
    /* Configure MEMS: BDU and Auto-increment for multi read/write */
    ctrl |= ((LSM6DSL_InitStructure.BlockData_Update | LSM6DSL_ACC_GYRO_IF_INC_ENABLED) << 8);
 800450c:	7a3b      	ldrb	r3, [r7, #8]
 800450e:	f043 0304 	orr.w	r3, r3, #4
 8004512:	b2db      	uxtb	r3, r3
 8004514:	b21b      	sxth	r3, r3
 8004516:	021b      	lsls	r3, r3, #8
 8004518:	b21a      	sxth	r2, r3
 800451a:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800451e:	4313      	orrs	r3, r2
 8004520:	b21b      	sxth	r3, r3
 8004522:	81bb      	strh	r3, [r7, #12]

    /* Configure the ACCELERO accelerometer main parameters */
    AccelerometerDrv->Init(ctrl);
 8004524:	4b06      	ldr	r3, [pc, #24]	@ (8004540 <BSP_ACCELERO_Init+0x7c>)
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	89ba      	ldrh	r2, [r7, #12]
 800452c:	4610      	mov	r0, r2
 800452e:	4798      	blx	r3
  }  

  return ret;
 8004530:	7bfb      	ldrb	r3, [r7, #15]
}
 8004532:	4618      	mov	r0, r3
 8004534:	3710      	adds	r7, #16
 8004536:	46bd      	mov	sp, r7
 8004538:	bd80      	pop	{r7, pc}
 800453a:	bf00      	nop
 800453c:	2000001c 	.word	0x2000001c
 8004540:	20000b5c 	.word	0x20000b5c

08004544 <BSP_ACCELERO_AccGetXYZ>:
  * @param  pDataXYZ Pointer on 3 angular accelerations table with  
  *                  pDataXYZ[0] = X axis, pDataXYZ[1] = Y axis, pDataXYZ[2] = Z axis
  * @retval None
  */
void BSP_ACCELERO_AccGetXYZ(int16_t *pDataXYZ)
{
 8004544:	b580      	push	{r7, lr}
 8004546:	b082      	sub	sp, #8
 8004548:	af00      	add	r7, sp, #0
 800454a:	6078      	str	r0, [r7, #4]
  if(AccelerometerDrv != NULL)
 800454c:	4b08      	ldr	r3, [pc, #32]	@ (8004570 <BSP_ACCELERO_AccGetXYZ+0x2c>)
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	2b00      	cmp	r3, #0
 8004552:	d009      	beq.n	8004568 <BSP_ACCELERO_AccGetXYZ+0x24>
  {
    if(AccelerometerDrv->GetXYZ != NULL)
 8004554:	4b06      	ldr	r3, [pc, #24]	@ (8004570 <BSP_ACCELERO_AccGetXYZ+0x2c>)
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800455a:	2b00      	cmp	r3, #0
 800455c:	d004      	beq.n	8004568 <BSP_ACCELERO_AccGetXYZ+0x24>
    {   
      AccelerometerDrv->GetXYZ(pDataXYZ);
 800455e:	4b04      	ldr	r3, [pc, #16]	@ (8004570 <BSP_ACCELERO_AccGetXYZ+0x2c>)
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004564:	6878      	ldr	r0, [r7, #4]
 8004566:	4798      	blx	r3
    }
  }
}
 8004568:	bf00      	nop
 800456a:	3708      	adds	r7, #8
 800456c:	46bd      	mov	sp, r7
 800456e:	bd80      	pop	{r7, pc}
 8004570:	20000b5c 	.word	0x20000b5c

08004574 <LSM6DSL_AccInit>:
/**
  * @brief  Set LSM6DSL Accelerometer Initialization.
  * @param  InitStruct: Init parameters
  */
void LSM6DSL_AccInit(uint16_t InitStruct)
{  
 8004574:	b580      	push	{r7, lr}
 8004576:	b084      	sub	sp, #16
 8004578:	af00      	add	r7, sp, #0
 800457a:	4603      	mov	r3, r0
 800457c:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 800457e:	2300      	movs	r3, #0
 8004580:	73fb      	strb	r3, [r7, #15]
  uint8_t tmp;

  /* Read CTRL1_XL */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 8004582:	2110      	movs	r1, #16
 8004584:	20d4      	movs	r0, #212	@ 0xd4
 8004586:	f7ff fe1d 	bl	80041c4 <SENSOR_IO_Read>
 800458a:	4603      	mov	r3, r0
 800458c:	73bb      	strb	r3, [r7, #14]

  /* Write value to ACC MEMS CTRL1_XL register: FS and Data Rate */
  ctrl = (uint8_t) InitStruct;
 800458e:	88fb      	ldrh	r3, [r7, #6]
 8004590:	73fb      	strb	r3, [r7, #15]
  tmp &= ~(0xFC);
 8004592:	7bbb      	ldrb	r3, [r7, #14]
 8004594:	f003 0303 	and.w	r3, r3, #3
 8004598:	73bb      	strb	r3, [r7, #14]
  tmp |= ctrl;
 800459a:	7bba      	ldrb	r2, [r7, #14]
 800459c:	7bfb      	ldrb	r3, [r7, #15]
 800459e:	4313      	orrs	r3, r2
 80045a0:	73bb      	strb	r3, [r7, #14]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL, tmp);
 80045a2:	7bbb      	ldrb	r3, [r7, #14]
 80045a4:	461a      	mov	r2, r3
 80045a6:	2110      	movs	r1, #16
 80045a8:	20d4      	movs	r0, #212	@ 0xd4
 80045aa:	f7ff fe57 	bl	800425c <SENSOR_IO_Write>

  /* Read CTRL3_C */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C);
 80045ae:	2112      	movs	r1, #18
 80045b0:	20d4      	movs	r0, #212	@ 0xd4
 80045b2:	f7ff fe07 	bl	80041c4 <SENSOR_IO_Read>
 80045b6:	4603      	mov	r3, r0
 80045b8:	73bb      	strb	r3, [r7, #14]

  /* Write value to ACC MEMS CTRL3_C register: BDU and Auto-increment */
  ctrl = ((uint8_t) (InitStruct >> 8));
 80045ba:	88fb      	ldrh	r3, [r7, #6]
 80045bc:	0a1b      	lsrs	r3, r3, #8
 80045be:	b29b      	uxth	r3, r3
 80045c0:	73fb      	strb	r3, [r7, #15]
  tmp &= ~(0x44);
 80045c2:	7bbb      	ldrb	r3, [r7, #14]
 80045c4:	f023 0344 	bic.w	r3, r3, #68	@ 0x44
 80045c8:	73bb      	strb	r3, [r7, #14]
  tmp |= ctrl; 
 80045ca:	7bba      	ldrb	r2, [r7, #14]
 80045cc:	7bfb      	ldrb	r3, [r7, #15]
 80045ce:	4313      	orrs	r3, r2
 80045d0:	73bb      	strb	r3, [r7, #14]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C, tmp);
 80045d2:	7bbb      	ldrb	r3, [r7, #14]
 80045d4:	461a      	mov	r2, r3
 80045d6:	2112      	movs	r1, #18
 80045d8:	20d4      	movs	r0, #212	@ 0xd4
 80045da:	f7ff fe3f 	bl	800425c <SENSOR_IO_Write>
}
 80045de:	bf00      	nop
 80045e0:	3710      	adds	r7, #16
 80045e2:	46bd      	mov	sp, r7
 80045e4:	bd80      	pop	{r7, pc}

080045e6 <LSM6DSL_AccDeInit>:

/**
  * @brief  LSM6DSL Accelerometer De-initialization.
  */
void LSM6DSL_AccDeInit(void)
{
 80045e6:	b580      	push	{r7, lr}
 80045e8:	b082      	sub	sp, #8
 80045ea:	af00      	add	r7, sp, #0
  uint8_t ctrl = 0x00;
 80045ec:	2300      	movs	r3, #0
 80045ee:	71fb      	strb	r3, [r7, #7]
  
  /* Read control register 1 value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 80045f0:	2110      	movs	r1, #16
 80045f2:	20d4      	movs	r0, #212	@ 0xd4
 80045f4:	f7ff fde6 	bl	80041c4 <SENSOR_IO_Read>
 80045f8:	4603      	mov	r3, r0
 80045fa:	71fb      	strb	r3, [r7, #7]

  /* Clear ODR bits */
  ctrl &= ~(LSM6DSL_ODR_BITPOSITION);
 80045fc:	79fb      	ldrb	r3, [r7, #7]
 80045fe:	f003 030f 	and.w	r3, r3, #15
 8004602:	71fb      	strb	r3, [r7, #7]

  /* Set Power down */
  ctrl |= LSM6DSL_ODR_POWER_DOWN;
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL, ctrl);
 8004604:	79fb      	ldrb	r3, [r7, #7]
 8004606:	461a      	mov	r2, r3
 8004608:	2110      	movs	r1, #16
 800460a:	20d4      	movs	r0, #212	@ 0xd4
 800460c:	f7ff fe26 	bl	800425c <SENSOR_IO_Write>
}
 8004610:	bf00      	nop
 8004612:	3708      	adds	r7, #8
 8004614:	46bd      	mov	sp, r7
 8004616:	bd80      	pop	{r7, pc}

08004618 <LSM6DSL_AccReadID>:
/**
  * @brief  Read LSM6DSL ID.
  * @retval ID 
  */
uint8_t LSM6DSL_AccReadID(void)
{  
 8004618:	b580      	push	{r7, lr}
 800461a:	af00      	add	r7, sp, #0
  /* IO interface initialization */
  SENSOR_IO_Init();
 800461c:	f7ff fe38 	bl	8004290 <SENSOR_IO_Init>
  /* Read value at Who am I register address */
  return (SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_WHO_AM_I_REG));
 8004620:	210f      	movs	r1, #15
 8004622:	20d4      	movs	r0, #212	@ 0xd4
 8004624:	f7ff fdce 	bl	80041c4 <SENSOR_IO_Read>
 8004628:	4603      	mov	r3, r0
}
 800462a:	4618      	mov	r0, r3
 800462c:	bd80      	pop	{r7, pc}

0800462e <LSM6DSL_AccLowPower>:
/**
  * @brief  Set/Unset Accelerometer in low power mode.
  * @param  status 0 means disable Low Power Mode, otherwise Low Power Mode is enabled
  */
void LSM6DSL_AccLowPower(uint16_t status)
{
 800462e:	b580      	push	{r7, lr}
 8004630:	b084      	sub	sp, #16
 8004632:	af00      	add	r7, sp, #0
 8004634:	4603      	mov	r3, r0
 8004636:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8004638:	2300      	movs	r3, #0
 800463a:	73fb      	strb	r3, [r7, #15]
  
  /* Read CTRL6_C value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL6_C);
 800463c:	2115      	movs	r1, #21
 800463e:	20d4      	movs	r0, #212	@ 0xd4
 8004640:	f7ff fdc0 	bl	80041c4 <SENSOR_IO_Read>
 8004644:	4603      	mov	r3, r0
 8004646:	73fb      	strb	r3, [r7, #15]

  /* Clear Low Power Mode bit */
  ctrl &= ~(0x10);
 8004648:	7bfb      	ldrb	r3, [r7, #15]
 800464a:	f023 0310 	bic.w	r3, r3, #16
 800464e:	73fb      	strb	r3, [r7, #15]

  /* Set Low Power Mode */
  if(status)
 8004650:	88fb      	ldrh	r3, [r7, #6]
 8004652:	2b00      	cmp	r3, #0
 8004654:	d003      	beq.n	800465e <LSM6DSL_AccLowPower+0x30>
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_XL_ENABLED;
 8004656:	7bfb      	ldrb	r3, [r7, #15]
 8004658:	f043 0310 	orr.w	r3, r3, #16
 800465c:	73fb      	strb	r3, [r7, #15]
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_XL_DISABLED;
  }
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL6_C, ctrl);
 800465e:	7bfb      	ldrb	r3, [r7, #15]
 8004660:	461a      	mov	r2, r3
 8004662:	2115      	movs	r1, #21
 8004664:	20d4      	movs	r0, #212	@ 0xd4
 8004666:	f7ff fdf9 	bl	800425c <SENSOR_IO_Write>
}
 800466a:	bf00      	nop
 800466c:	3710      	adds	r7, #16
 800466e:	46bd      	mov	sp, r7
 8004670:	bd80      	pop	{r7, pc}
	...

08004674 <LSM6DSL_AccReadXYZ>:
/**
  * @brief  Read X, Y & Z Acceleration values 
  * @param  pData: Data out pointer
  */
void LSM6DSL_AccReadXYZ(int16_t* pData)
{
 8004674:	b580      	push	{r7, lr}
 8004676:	b088      	sub	sp, #32
 8004678:	af00      	add	r7, sp, #0
 800467a:	6078      	str	r0, [r7, #4]
  int16_t pnRawData[3];
  uint8_t ctrlx= 0;
 800467c:	2300      	movs	r3, #0
 800467e:	75fb      	strb	r3, [r7, #23]
  uint8_t buffer[6];
  uint8_t i = 0;
 8004680:	2300      	movs	r3, #0
 8004682:	77fb      	strb	r3, [r7, #31]
  float sensitivity = 0;
 8004684:	f04f 0300 	mov.w	r3, #0
 8004688:	61bb      	str	r3, [r7, #24]
  
  /* Read the acceleration control register content */
  ctrlx = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 800468a:	2110      	movs	r1, #16
 800468c:	20d4      	movs	r0, #212	@ 0xd4
 800468e:	f7ff fd99 	bl	80041c4 <SENSOR_IO_Read>
 8004692:	4603      	mov	r3, r0
 8004694:	75fb      	strb	r3, [r7, #23]
  
  /* Read output register X, Y & Z acceleration */
  SENSOR_IO_ReadMultiple(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_OUTX_L_XL, buffer, 6);
 8004696:	f107 0208 	add.w	r2, r7, #8
 800469a:	2306      	movs	r3, #6
 800469c:	2128      	movs	r1, #40	@ 0x28
 800469e:	20d4      	movs	r0, #212	@ 0xd4
 80046a0:	f7ff fe00 	bl	80042a4 <SENSOR_IO_ReadMultiple>
  
  for(i=0; i<3; i++)
 80046a4:	2300      	movs	r3, #0
 80046a6:	77fb      	strb	r3, [r7, #31]
 80046a8:	e01a      	b.n	80046e0 <LSM6DSL_AccReadXYZ+0x6c>
  {
    pnRawData[i]=((((uint16_t)buffer[2*i+1]) << 8) + (uint16_t)buffer[2*i]);
 80046aa:	7ffb      	ldrb	r3, [r7, #31]
 80046ac:	005b      	lsls	r3, r3, #1
 80046ae:	3301      	adds	r3, #1
 80046b0:	3320      	adds	r3, #32
 80046b2:	443b      	add	r3, r7
 80046b4:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 80046b8:	021b      	lsls	r3, r3, #8
 80046ba:	b29b      	uxth	r3, r3
 80046bc:	7ffa      	ldrb	r2, [r7, #31]
 80046be:	0052      	lsls	r2, r2, #1
 80046c0:	3220      	adds	r2, #32
 80046c2:	443a      	add	r2, r7
 80046c4:	f812 2c18 	ldrb.w	r2, [r2, #-24]
 80046c8:	4413      	add	r3, r2
 80046ca:	b29a      	uxth	r2, r3
 80046cc:	7ffb      	ldrb	r3, [r7, #31]
 80046ce:	b212      	sxth	r2, r2
 80046d0:	005b      	lsls	r3, r3, #1
 80046d2:	3320      	adds	r3, #32
 80046d4:	443b      	add	r3, r7
 80046d6:	f823 2c10 	strh.w	r2, [r3, #-16]
  for(i=0; i<3; i++)
 80046da:	7ffb      	ldrb	r3, [r7, #31]
 80046dc:	3301      	adds	r3, #1
 80046de:	77fb      	strb	r3, [r7, #31]
 80046e0:	7ffb      	ldrb	r3, [r7, #31]
 80046e2:	2b02      	cmp	r3, #2
 80046e4:	d9e1      	bls.n	80046aa <LSM6DSL_AccReadXYZ+0x36>
  }
  
  /* Normal mode */
  /* Switch the sensitivity value set in the CRTL1_XL */
  switch(ctrlx & 0x0C)
 80046e6:	7dfb      	ldrb	r3, [r7, #23]
 80046e8:	f003 030c 	and.w	r3, r3, #12
 80046ec:	2b0c      	cmp	r3, #12
 80046ee:	d829      	bhi.n	8004744 <LSM6DSL_AccReadXYZ+0xd0>
 80046f0:	a201      	add	r2, pc, #4	@ (adr r2, 80046f8 <LSM6DSL_AccReadXYZ+0x84>)
 80046f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046f6:	bf00      	nop
 80046f8:	0800472d 	.word	0x0800472d
 80046fc:	08004745 	.word	0x08004745
 8004700:	08004745 	.word	0x08004745
 8004704:	08004745 	.word	0x08004745
 8004708:	0800473f 	.word	0x0800473f
 800470c:	08004745 	.word	0x08004745
 8004710:	08004745 	.word	0x08004745
 8004714:	08004745 	.word	0x08004745
 8004718:	08004733 	.word	0x08004733
 800471c:	08004745 	.word	0x08004745
 8004720:	08004745 	.word	0x08004745
 8004724:	08004745 	.word	0x08004745
 8004728:	08004739 	.word	0x08004739
  {
  case LSM6DSL_ACC_FULLSCALE_2G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_2G;
 800472c:	4b18      	ldr	r3, [pc, #96]	@ (8004790 <LSM6DSL_AccReadXYZ+0x11c>)
 800472e:	61bb      	str	r3, [r7, #24]
    break;
 8004730:	e008      	b.n	8004744 <LSM6DSL_AccReadXYZ+0xd0>
  case LSM6DSL_ACC_FULLSCALE_4G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_4G;
 8004732:	4b18      	ldr	r3, [pc, #96]	@ (8004794 <LSM6DSL_AccReadXYZ+0x120>)
 8004734:	61bb      	str	r3, [r7, #24]
    break;
 8004736:	e005      	b.n	8004744 <LSM6DSL_AccReadXYZ+0xd0>
  case LSM6DSL_ACC_FULLSCALE_8G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_8G;
 8004738:	4b17      	ldr	r3, [pc, #92]	@ (8004798 <LSM6DSL_AccReadXYZ+0x124>)
 800473a:	61bb      	str	r3, [r7, #24]
    break;
 800473c:	e002      	b.n	8004744 <LSM6DSL_AccReadXYZ+0xd0>
  case LSM6DSL_ACC_FULLSCALE_16G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_16G;
 800473e:	4b17      	ldr	r3, [pc, #92]	@ (800479c <LSM6DSL_AccReadXYZ+0x128>)
 8004740:	61bb      	str	r3, [r7, #24]
    break;    
 8004742:	bf00      	nop
  }
  
  /* Obtain the mg value for the three axis */
  for(i=0; i<3; i++)
 8004744:	2300      	movs	r3, #0
 8004746:	77fb      	strb	r3, [r7, #31]
 8004748:	e01a      	b.n	8004780 <LSM6DSL_AccReadXYZ+0x10c>
  {
    pData[i]=( int16_t )(pnRawData[i] * sensitivity);
 800474a:	7ffb      	ldrb	r3, [r7, #31]
 800474c:	005b      	lsls	r3, r3, #1
 800474e:	3320      	adds	r3, #32
 8004750:	443b      	add	r3, r7
 8004752:	f933 3c10 	ldrsh.w	r3, [r3, #-16]
 8004756:	ee07 3a90 	vmov	s15, r3
 800475a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800475e:	edd7 7a06 	vldr	s15, [r7, #24]
 8004762:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004766:	7ffb      	ldrb	r3, [r7, #31]
 8004768:	005b      	lsls	r3, r3, #1
 800476a:	687a      	ldr	r2, [r7, #4]
 800476c:	4413      	add	r3, r2
 800476e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004772:	ee17 2a90 	vmov	r2, s15
 8004776:	b212      	sxth	r2, r2
 8004778:	801a      	strh	r2, [r3, #0]
  for(i=0; i<3; i++)
 800477a:	7ffb      	ldrb	r3, [r7, #31]
 800477c:	3301      	adds	r3, #1
 800477e:	77fb      	strb	r3, [r7, #31]
 8004780:	7ffb      	ldrb	r3, [r7, #31]
 8004782:	2b02      	cmp	r3, #2
 8004784:	d9e1      	bls.n	800474a <LSM6DSL_AccReadXYZ+0xd6>
  }
}
 8004786:	bf00      	nop
 8004788:	bf00      	nop
 800478a:	3720      	adds	r7, #32
 800478c:	46bd      	mov	sp, r7
 800478e:	bd80      	pop	{r7, pc}
 8004790:	3d79db23 	.word	0x3d79db23
 8004794:	3df9db23 	.word	0x3df9db23
 8004798:	3e79db23 	.word	0x3e79db23
 800479c:	3ef9db23 	.word	0x3ef9db23

080047a0 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80047a0:	b580      	push	{r7, lr}
 80047a2:	b082      	sub	sp, #8
 80047a4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80047a6:	2300      	movs	r3, #0
 80047a8:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80047aa:	2003      	movs	r0, #3
 80047ac:	f000 f960 	bl	8004a70 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80047b0:	2000      	movs	r0, #0
 80047b2:	f000 f80d 	bl	80047d0 <HAL_InitTick>
 80047b6:	4603      	mov	r3, r0
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d002      	beq.n	80047c2 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80047bc:	2301      	movs	r3, #1
 80047be:	71fb      	strb	r3, [r7, #7]
 80047c0:	e001      	b.n	80047c6 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80047c2:	f7fe fe8d 	bl	80034e0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80047c6:	79fb      	ldrb	r3, [r7, #7]
}
 80047c8:	4618      	mov	r0, r3
 80047ca:	3708      	adds	r7, #8
 80047cc:	46bd      	mov	sp, r7
 80047ce:	bd80      	pop	{r7, pc}

080047d0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80047d0:	b580      	push	{r7, lr}
 80047d2:	b084      	sub	sp, #16
 80047d4:	af00      	add	r7, sp, #0
 80047d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80047d8:	2300      	movs	r3, #0
 80047da:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80047dc:	4b17      	ldr	r3, [pc, #92]	@ (800483c <HAL_InitTick+0x6c>)
 80047de:	781b      	ldrb	r3, [r3, #0]
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d023      	beq.n	800482c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80047e4:	4b16      	ldr	r3, [pc, #88]	@ (8004840 <HAL_InitTick+0x70>)
 80047e6:	681a      	ldr	r2, [r3, #0]
 80047e8:	4b14      	ldr	r3, [pc, #80]	@ (800483c <HAL_InitTick+0x6c>)
 80047ea:	781b      	ldrb	r3, [r3, #0]
 80047ec:	4619      	mov	r1, r3
 80047ee:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80047f2:	fbb3 f3f1 	udiv	r3, r3, r1
 80047f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80047fa:	4618      	mov	r0, r3
 80047fc:	f000 f96d 	bl	8004ada <HAL_SYSTICK_Config>
 8004800:	4603      	mov	r3, r0
 8004802:	2b00      	cmp	r3, #0
 8004804:	d10f      	bne.n	8004826 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	2b0f      	cmp	r3, #15
 800480a:	d809      	bhi.n	8004820 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800480c:	2200      	movs	r2, #0
 800480e:	6879      	ldr	r1, [r7, #4]
 8004810:	f04f 30ff 	mov.w	r0, #4294967295
 8004814:	f000 f937 	bl	8004a86 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8004818:	4a0a      	ldr	r2, [pc, #40]	@ (8004844 <HAL_InitTick+0x74>)
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	6013      	str	r3, [r2, #0]
 800481e:	e007      	b.n	8004830 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8004820:	2301      	movs	r3, #1
 8004822:	73fb      	strb	r3, [r7, #15]
 8004824:	e004      	b.n	8004830 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8004826:	2301      	movs	r3, #1
 8004828:	73fb      	strb	r3, [r7, #15]
 800482a:	e001      	b.n	8004830 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 800482c:	2301      	movs	r3, #1
 800482e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8004830:	7bfb      	ldrb	r3, [r7, #15]
}
 8004832:	4618      	mov	r0, r3
 8004834:	3710      	adds	r7, #16
 8004836:	46bd      	mov	sp, r7
 8004838:	bd80      	pop	{r7, pc}
 800483a:	bf00      	nop
 800483c:	20000054 	.word	0x20000054
 8004840:	20000004 	.word	0x20000004
 8004844:	20000050 	.word	0x20000050

08004848 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004848:	b480      	push	{r7}
 800484a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800484c:	4b06      	ldr	r3, [pc, #24]	@ (8004868 <HAL_IncTick+0x20>)
 800484e:	781b      	ldrb	r3, [r3, #0]
 8004850:	461a      	mov	r2, r3
 8004852:	4b06      	ldr	r3, [pc, #24]	@ (800486c <HAL_IncTick+0x24>)
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	4413      	add	r3, r2
 8004858:	4a04      	ldr	r2, [pc, #16]	@ (800486c <HAL_IncTick+0x24>)
 800485a:	6013      	str	r3, [r2, #0]
}
 800485c:	bf00      	nop
 800485e:	46bd      	mov	sp, r7
 8004860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004864:	4770      	bx	lr
 8004866:	bf00      	nop
 8004868:	20000054 	.word	0x20000054
 800486c:	20000b60 	.word	0x20000b60

08004870 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004870:	b480      	push	{r7}
 8004872:	af00      	add	r7, sp, #0
  return uwTick;
 8004874:	4b03      	ldr	r3, [pc, #12]	@ (8004884 <HAL_GetTick+0x14>)
 8004876:	681b      	ldr	r3, [r3, #0]
}
 8004878:	4618      	mov	r0, r3
 800487a:	46bd      	mov	sp, r7
 800487c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004880:	4770      	bx	lr
 8004882:	bf00      	nop
 8004884:	20000b60 	.word	0x20000b60

08004888 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004888:	b580      	push	{r7, lr}
 800488a:	b084      	sub	sp, #16
 800488c:	af00      	add	r7, sp, #0
 800488e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004890:	f7ff ffee 	bl	8004870 <HAL_GetTick>
 8004894:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048a0:	d005      	beq.n	80048ae <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80048a2:	4b0a      	ldr	r3, [pc, #40]	@ (80048cc <HAL_Delay+0x44>)
 80048a4:	781b      	ldrb	r3, [r3, #0]
 80048a6:	461a      	mov	r2, r3
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	4413      	add	r3, r2
 80048ac:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80048ae:	bf00      	nop
 80048b0:	f7ff ffde 	bl	8004870 <HAL_GetTick>
 80048b4:	4602      	mov	r2, r0
 80048b6:	68bb      	ldr	r3, [r7, #8]
 80048b8:	1ad3      	subs	r3, r2, r3
 80048ba:	68fa      	ldr	r2, [r7, #12]
 80048bc:	429a      	cmp	r2, r3
 80048be:	d8f7      	bhi.n	80048b0 <HAL_Delay+0x28>
  {
  }
}
 80048c0:	bf00      	nop
 80048c2:	bf00      	nop
 80048c4:	3710      	adds	r7, #16
 80048c6:	46bd      	mov	sp, r7
 80048c8:	bd80      	pop	{r7, pc}
 80048ca:	bf00      	nop
 80048cc:	20000054 	.word	0x20000054

080048d0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80048d0:	b480      	push	{r7}
 80048d2:	b085      	sub	sp, #20
 80048d4:	af00      	add	r7, sp, #0
 80048d6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	f003 0307 	and.w	r3, r3, #7
 80048de:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80048e0:	4b0c      	ldr	r3, [pc, #48]	@ (8004914 <__NVIC_SetPriorityGrouping+0x44>)
 80048e2:	68db      	ldr	r3, [r3, #12]
 80048e4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80048e6:	68ba      	ldr	r2, [r7, #8]
 80048e8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80048ec:	4013      	ands	r3, r2
 80048ee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80048f4:	68bb      	ldr	r3, [r7, #8]
 80048f6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80048f8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80048fc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004900:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004902:	4a04      	ldr	r2, [pc, #16]	@ (8004914 <__NVIC_SetPriorityGrouping+0x44>)
 8004904:	68bb      	ldr	r3, [r7, #8]
 8004906:	60d3      	str	r3, [r2, #12]
}
 8004908:	bf00      	nop
 800490a:	3714      	adds	r7, #20
 800490c:	46bd      	mov	sp, r7
 800490e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004912:	4770      	bx	lr
 8004914:	e000ed00 	.word	0xe000ed00

08004918 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004918:	b480      	push	{r7}
 800491a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800491c:	4b04      	ldr	r3, [pc, #16]	@ (8004930 <__NVIC_GetPriorityGrouping+0x18>)
 800491e:	68db      	ldr	r3, [r3, #12]
 8004920:	0a1b      	lsrs	r3, r3, #8
 8004922:	f003 0307 	and.w	r3, r3, #7
}
 8004926:	4618      	mov	r0, r3
 8004928:	46bd      	mov	sp, r7
 800492a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800492e:	4770      	bx	lr
 8004930:	e000ed00 	.word	0xe000ed00

08004934 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004934:	b480      	push	{r7}
 8004936:	b083      	sub	sp, #12
 8004938:	af00      	add	r7, sp, #0
 800493a:	4603      	mov	r3, r0
 800493c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800493e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004942:	2b00      	cmp	r3, #0
 8004944:	db0b      	blt.n	800495e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004946:	79fb      	ldrb	r3, [r7, #7]
 8004948:	f003 021f 	and.w	r2, r3, #31
 800494c:	4907      	ldr	r1, [pc, #28]	@ (800496c <__NVIC_EnableIRQ+0x38>)
 800494e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004952:	095b      	lsrs	r3, r3, #5
 8004954:	2001      	movs	r0, #1
 8004956:	fa00 f202 	lsl.w	r2, r0, r2
 800495a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800495e:	bf00      	nop
 8004960:	370c      	adds	r7, #12
 8004962:	46bd      	mov	sp, r7
 8004964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004968:	4770      	bx	lr
 800496a:	bf00      	nop
 800496c:	e000e100 	.word	0xe000e100

08004970 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004970:	b480      	push	{r7}
 8004972:	b083      	sub	sp, #12
 8004974:	af00      	add	r7, sp, #0
 8004976:	4603      	mov	r3, r0
 8004978:	6039      	str	r1, [r7, #0]
 800497a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800497c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004980:	2b00      	cmp	r3, #0
 8004982:	db0a      	blt.n	800499a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004984:	683b      	ldr	r3, [r7, #0]
 8004986:	b2da      	uxtb	r2, r3
 8004988:	490c      	ldr	r1, [pc, #48]	@ (80049bc <__NVIC_SetPriority+0x4c>)
 800498a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800498e:	0112      	lsls	r2, r2, #4
 8004990:	b2d2      	uxtb	r2, r2
 8004992:	440b      	add	r3, r1
 8004994:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004998:	e00a      	b.n	80049b0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800499a:	683b      	ldr	r3, [r7, #0]
 800499c:	b2da      	uxtb	r2, r3
 800499e:	4908      	ldr	r1, [pc, #32]	@ (80049c0 <__NVIC_SetPriority+0x50>)
 80049a0:	79fb      	ldrb	r3, [r7, #7]
 80049a2:	f003 030f 	and.w	r3, r3, #15
 80049a6:	3b04      	subs	r3, #4
 80049a8:	0112      	lsls	r2, r2, #4
 80049aa:	b2d2      	uxtb	r2, r2
 80049ac:	440b      	add	r3, r1
 80049ae:	761a      	strb	r2, [r3, #24]
}
 80049b0:	bf00      	nop
 80049b2:	370c      	adds	r7, #12
 80049b4:	46bd      	mov	sp, r7
 80049b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ba:	4770      	bx	lr
 80049bc:	e000e100 	.word	0xe000e100
 80049c0:	e000ed00 	.word	0xe000ed00

080049c4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80049c4:	b480      	push	{r7}
 80049c6:	b089      	sub	sp, #36	@ 0x24
 80049c8:	af00      	add	r7, sp, #0
 80049ca:	60f8      	str	r0, [r7, #12]
 80049cc:	60b9      	str	r1, [r7, #8]
 80049ce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	f003 0307 	and.w	r3, r3, #7
 80049d6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80049d8:	69fb      	ldr	r3, [r7, #28]
 80049da:	f1c3 0307 	rsb	r3, r3, #7
 80049de:	2b04      	cmp	r3, #4
 80049e0:	bf28      	it	cs
 80049e2:	2304      	movcs	r3, #4
 80049e4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80049e6:	69fb      	ldr	r3, [r7, #28]
 80049e8:	3304      	adds	r3, #4
 80049ea:	2b06      	cmp	r3, #6
 80049ec:	d902      	bls.n	80049f4 <NVIC_EncodePriority+0x30>
 80049ee:	69fb      	ldr	r3, [r7, #28]
 80049f0:	3b03      	subs	r3, #3
 80049f2:	e000      	b.n	80049f6 <NVIC_EncodePriority+0x32>
 80049f4:	2300      	movs	r3, #0
 80049f6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80049f8:	f04f 32ff 	mov.w	r2, #4294967295
 80049fc:	69bb      	ldr	r3, [r7, #24]
 80049fe:	fa02 f303 	lsl.w	r3, r2, r3
 8004a02:	43da      	mvns	r2, r3
 8004a04:	68bb      	ldr	r3, [r7, #8]
 8004a06:	401a      	ands	r2, r3
 8004a08:	697b      	ldr	r3, [r7, #20]
 8004a0a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004a0c:	f04f 31ff 	mov.w	r1, #4294967295
 8004a10:	697b      	ldr	r3, [r7, #20]
 8004a12:	fa01 f303 	lsl.w	r3, r1, r3
 8004a16:	43d9      	mvns	r1, r3
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004a1c:	4313      	orrs	r3, r2
         );
}
 8004a1e:	4618      	mov	r0, r3
 8004a20:	3724      	adds	r7, #36	@ 0x24
 8004a22:	46bd      	mov	sp, r7
 8004a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a28:	4770      	bx	lr
	...

08004a2c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004a2c:	b580      	push	{r7, lr}
 8004a2e:	b082      	sub	sp, #8
 8004a30:	af00      	add	r7, sp, #0
 8004a32:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	3b01      	subs	r3, #1
 8004a38:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004a3c:	d301      	bcc.n	8004a42 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004a3e:	2301      	movs	r3, #1
 8004a40:	e00f      	b.n	8004a62 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004a42:	4a0a      	ldr	r2, [pc, #40]	@ (8004a6c <SysTick_Config+0x40>)
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	3b01      	subs	r3, #1
 8004a48:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004a4a:	210f      	movs	r1, #15
 8004a4c:	f04f 30ff 	mov.w	r0, #4294967295
 8004a50:	f7ff ff8e 	bl	8004970 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004a54:	4b05      	ldr	r3, [pc, #20]	@ (8004a6c <SysTick_Config+0x40>)
 8004a56:	2200      	movs	r2, #0
 8004a58:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004a5a:	4b04      	ldr	r3, [pc, #16]	@ (8004a6c <SysTick_Config+0x40>)
 8004a5c:	2207      	movs	r2, #7
 8004a5e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004a60:	2300      	movs	r3, #0
}
 8004a62:	4618      	mov	r0, r3
 8004a64:	3708      	adds	r7, #8
 8004a66:	46bd      	mov	sp, r7
 8004a68:	bd80      	pop	{r7, pc}
 8004a6a:	bf00      	nop
 8004a6c:	e000e010 	.word	0xe000e010

08004a70 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004a70:	b580      	push	{r7, lr}
 8004a72:	b082      	sub	sp, #8
 8004a74:	af00      	add	r7, sp, #0
 8004a76:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004a78:	6878      	ldr	r0, [r7, #4]
 8004a7a:	f7ff ff29 	bl	80048d0 <__NVIC_SetPriorityGrouping>
}
 8004a7e:	bf00      	nop
 8004a80:	3708      	adds	r7, #8
 8004a82:	46bd      	mov	sp, r7
 8004a84:	bd80      	pop	{r7, pc}

08004a86 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004a86:	b580      	push	{r7, lr}
 8004a88:	b086      	sub	sp, #24
 8004a8a:	af00      	add	r7, sp, #0
 8004a8c:	4603      	mov	r3, r0
 8004a8e:	60b9      	str	r1, [r7, #8]
 8004a90:	607a      	str	r2, [r7, #4]
 8004a92:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8004a94:	2300      	movs	r3, #0
 8004a96:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004a98:	f7ff ff3e 	bl	8004918 <__NVIC_GetPriorityGrouping>
 8004a9c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004a9e:	687a      	ldr	r2, [r7, #4]
 8004aa0:	68b9      	ldr	r1, [r7, #8]
 8004aa2:	6978      	ldr	r0, [r7, #20]
 8004aa4:	f7ff ff8e 	bl	80049c4 <NVIC_EncodePriority>
 8004aa8:	4602      	mov	r2, r0
 8004aaa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004aae:	4611      	mov	r1, r2
 8004ab0:	4618      	mov	r0, r3
 8004ab2:	f7ff ff5d 	bl	8004970 <__NVIC_SetPriority>
}
 8004ab6:	bf00      	nop
 8004ab8:	3718      	adds	r7, #24
 8004aba:	46bd      	mov	sp, r7
 8004abc:	bd80      	pop	{r7, pc}

08004abe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004abe:	b580      	push	{r7, lr}
 8004ac0:	b082      	sub	sp, #8
 8004ac2:	af00      	add	r7, sp, #0
 8004ac4:	4603      	mov	r3, r0
 8004ac6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004ac8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004acc:	4618      	mov	r0, r3
 8004ace:	f7ff ff31 	bl	8004934 <__NVIC_EnableIRQ>
}
 8004ad2:	bf00      	nop
 8004ad4:	3708      	adds	r7, #8
 8004ad6:	46bd      	mov	sp, r7
 8004ad8:	bd80      	pop	{r7, pc}

08004ada <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004ada:	b580      	push	{r7, lr}
 8004adc:	b082      	sub	sp, #8
 8004ade:	af00      	add	r7, sp, #0
 8004ae0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004ae2:	6878      	ldr	r0, [r7, #4]
 8004ae4:	f7ff ffa2 	bl	8004a2c <SysTick_Config>
 8004ae8:	4603      	mov	r3, r0
}
 8004aea:	4618      	mov	r0, r3
 8004aec:	3708      	adds	r7, #8
 8004aee:	46bd      	mov	sp, r7
 8004af0:	bd80      	pop	{r7, pc}
	...

08004af4 <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 8004af4:	b580      	push	{r7, lr}
 8004af6:	b082      	sub	sp, #8
 8004af8:	af00      	add	r7, sp, #0
 8004afa:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_channel == NULL)
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d101      	bne.n	8004b06 <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 8004b02:	2301      	movs	r3, #1
 8004b04:	e0ac      	b.n	8004c60 <HAL_DFSDM_ChannelInit+0x16c>
  assert_param(IS_DFSDM_CHANNEL_FILTER_OVS_RATIO(hdfsdm_channel->Init.Awd.Oversampling));
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));

  /* Check that channel has not been already initialized */
  if (a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	4618      	mov	r0, r3
 8004b0c:	f000 f8b2 	bl	8004c74 <DFSDM_GetChannelFromInstance>
 8004b10:	4603      	mov	r3, r0
 8004b12:	4a55      	ldr	r2, [pc, #340]	@ (8004c68 <HAL_DFSDM_ChannelInit+0x174>)
 8004b14:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d001      	beq.n	8004b20 <HAL_DFSDM_ChannelInit+0x2c>
  {
    return HAL_ERROR;
 8004b1c:	2301      	movs	r3, #1
 8004b1e:	e09f      	b.n	8004c60 <HAL_DFSDM_ChannelInit+0x16c>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 8004b20:	6878      	ldr	r0, [r7, #4]
 8004b22:	f7fe fd01 	bl	8003528 <HAL_DFSDM_ChannelMspInit>
#endif

  /* Update the channel counter */
  v_dfsdm1ChannelCounter++;
 8004b26:	4b51      	ldr	r3, [pc, #324]	@ (8004c6c <HAL_DFSDM_ChannelInit+0x178>)
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	3301      	adds	r3, #1
 8004b2c:	4a4f      	ldr	r2, [pc, #316]	@ (8004c6c <HAL_DFSDM_ChannelInit+0x178>)
 8004b2e:	6013      	str	r3, [r2, #0]

  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if (v_dfsdm1ChannelCounter == 1U)
 8004b30:	4b4e      	ldr	r3, [pc, #312]	@ (8004c6c <HAL_DFSDM_ChannelInit+0x178>)
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	2b01      	cmp	r3, #1
 8004b36:	d125      	bne.n	8004b84 <HAL_DFSDM_ChannelInit+0x90>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 8004b38:	4b4d      	ldr	r3, [pc, #308]	@ (8004c70 <HAL_DFSDM_ChannelInit+0x17c>)
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	4a4c      	ldr	r2, [pc, #304]	@ (8004c70 <HAL_DFSDM_ChannelInit+0x17c>)
 8004b3e:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8004b42:	6013      	str	r3, [r2, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 8004b44:	4b4a      	ldr	r3, [pc, #296]	@ (8004c70 <HAL_DFSDM_ChannelInit+0x17c>)
 8004b46:	681a      	ldr	r2, [r3, #0]
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	689b      	ldr	r3, [r3, #8]
 8004b4c:	4948      	ldr	r1, [pc, #288]	@ (8004c70 <HAL_DFSDM_ChannelInit+0x17c>)
 8004b4e:	4313      	orrs	r3, r2
 8004b50:	600b      	str	r3, [r1, #0]

    /* Reset clock divider */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 8004b52:	4b47      	ldr	r3, [pc, #284]	@ (8004c70 <HAL_DFSDM_ChannelInit+0x17c>)
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	4a46      	ldr	r2, [pc, #280]	@ (8004c70 <HAL_DFSDM_ChannelInit+0x17c>)
 8004b58:	f423 037f 	bic.w	r3, r3, #16711680	@ 0xff0000
 8004b5c:	6013      	str	r3, [r2, #0]
    if (hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	791b      	ldrb	r3, [r3, #4]
 8004b62:	2b01      	cmp	r3, #1
 8004b64:	d108      	bne.n	8004b78 <HAL_DFSDM_ChannelInit+0x84>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t)((hdfsdm_channel->Init.OutputClock.Divider - 1U) <<
 8004b66:	4b42      	ldr	r3, [pc, #264]	@ (8004c70 <HAL_DFSDM_ChannelInit+0x17c>)
 8004b68:	681a      	ldr	r2, [r3, #0]
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	68db      	ldr	r3, [r3, #12]
 8004b6e:	3b01      	subs	r3, #1
 8004b70:	041b      	lsls	r3, r3, #16
 8004b72:	493f      	ldr	r1, [pc, #252]	@ (8004c70 <HAL_DFSDM_ChannelInit+0x17c>)
 8004b74:	4313      	orrs	r3, r2
 8004b76:	600b      	str	r3, [r1, #0]
                                             DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }

    /* enable the DFSDM global interface */
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 8004b78:	4b3d      	ldr	r3, [pc, #244]	@ (8004c70 <HAL_DFSDM_ChannelInit+0x17c>)
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	4a3c      	ldr	r2, [pc, #240]	@ (8004c70 <HAL_DFSDM_ChannelInit+0x17c>)
 8004b7e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8004b82:	6013      	str	r3, [r2, #0]
  }

  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	681a      	ldr	r2, [r3, #0]
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	f422 4271 	bic.w	r2, r2, #61696	@ 0xf100
 8004b92:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	6819      	ldr	r1, [r3, #0]
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8004ba2:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8004ba8:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	430a      	orrs	r2, r1
 8004bb0:	601a      	str	r2, [r3, #0]

  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	681a      	ldr	r2, [r3, #0]
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	f022 020f 	bic.w	r2, r2, #15
 8004bc0:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	6819      	ldr	r1, [r3, #0]
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8004bd0:	431a      	orrs	r2, r3
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	430a      	orrs	r2, r1
 8004bd8:	601a      	str	r2, [r3, #0]

  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	689a      	ldr	r2, [r3, #8]
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	f422 025f 	bic.w	r2, r2, #14614528	@ 0xdf0000
 8004be8:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	6899      	ldr	r1, [r3, #8]
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004bf8:	3b01      	subs	r3, #1
 8004bfa:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8004bfc:	431a      	orrs	r2, r3
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	430a      	orrs	r2, r1
 8004c04:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	685a      	ldr	r2, [r3, #4]
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	f002 0207 	and.w	r2, r2, #7
 8004c14:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	6859      	ldr	r1, [r3, #4]
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c20:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c26:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8004c28:	431a      	orrs	r2, r3
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	430a      	orrs	r2, r1
 8004c30:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	681a      	ldr	r2, [r3, #0]
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8004c40:	601a      	str	r2, [r3, #0]

  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	2201      	movs	r2, #1
 8004c46:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	4618      	mov	r0, r3
 8004c50:	f000 f810 	bl	8004c74 <DFSDM_GetChannelFromInstance>
 8004c54:	4602      	mov	r2, r0
 8004c56:	4904      	ldr	r1, [pc, #16]	@ (8004c68 <HAL_DFSDM_ChannelInit+0x174>)
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

  return HAL_OK;
 8004c5e:	2300      	movs	r3, #0
}
 8004c60:	4618      	mov	r0, r3
 8004c62:	3708      	adds	r7, #8
 8004c64:	46bd      	mov	sp, r7
 8004c66:	bd80      	pop	{r7, pc}
 8004c68:	20000b68 	.word	0x20000b68
 8004c6c:	20000b64 	.word	0x20000b64
 8004c70:	40016000 	.word	0x40016000

08004c74 <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef *Instance)
{
 8004c74:	b480      	push	{r7}
 8004c76:	b085      	sub	sp, #20
 8004c78:	af00      	add	r7, sp, #0
 8004c7a:	6078      	str	r0, [r7, #4]
  uint32_t channel;

  /* Get channel from instance */
  if (Instance == DFSDM1_Channel0)
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	4a1c      	ldr	r2, [pc, #112]	@ (8004cf0 <DFSDM_GetChannelFromInstance+0x7c>)
 8004c80:	4293      	cmp	r3, r2
 8004c82:	d102      	bne.n	8004c8a <DFSDM_GetChannelFromInstance+0x16>
  {
    channel = 0;
 8004c84:	2300      	movs	r3, #0
 8004c86:	60fb      	str	r3, [r7, #12]
 8004c88:	e02b      	b.n	8004ce2 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel1)
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	4a19      	ldr	r2, [pc, #100]	@ (8004cf4 <DFSDM_GetChannelFromInstance+0x80>)
 8004c8e:	4293      	cmp	r3, r2
 8004c90:	d102      	bne.n	8004c98 <DFSDM_GetChannelFromInstance+0x24>
  {
    channel = 1;
 8004c92:	2301      	movs	r3, #1
 8004c94:	60fb      	str	r3, [r7, #12]
 8004c96:	e024      	b.n	8004ce2 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel2)
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	4a17      	ldr	r2, [pc, #92]	@ (8004cf8 <DFSDM_GetChannelFromInstance+0x84>)
 8004c9c:	4293      	cmp	r3, r2
 8004c9e:	d102      	bne.n	8004ca6 <DFSDM_GetChannelFromInstance+0x32>
  {
    channel = 2;
 8004ca0:	2302      	movs	r3, #2
 8004ca2:	60fb      	str	r3, [r7, #12]
 8004ca4:	e01d      	b.n	8004ce2 <DFSDM_GetChannelFromInstance+0x6e>
  }
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else if (Instance == DFSDM1_Channel4)
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	4a14      	ldr	r2, [pc, #80]	@ (8004cfc <DFSDM_GetChannelFromInstance+0x88>)
 8004caa:	4293      	cmp	r3, r2
 8004cac:	d102      	bne.n	8004cb4 <DFSDM_GetChannelFromInstance+0x40>
  {
    channel = 4;
 8004cae:	2304      	movs	r3, #4
 8004cb0:	60fb      	str	r3, [r7, #12]
 8004cb2:	e016      	b.n	8004ce2 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel5)
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	4a12      	ldr	r2, [pc, #72]	@ (8004d00 <DFSDM_GetChannelFromInstance+0x8c>)
 8004cb8:	4293      	cmp	r3, r2
 8004cba:	d102      	bne.n	8004cc2 <DFSDM_GetChannelFromInstance+0x4e>
  {
    channel = 5;
 8004cbc:	2305      	movs	r3, #5
 8004cbe:	60fb      	str	r3, [r7, #12]
 8004cc0:	e00f      	b.n	8004ce2 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel6)
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	4a0f      	ldr	r2, [pc, #60]	@ (8004d04 <DFSDM_GetChannelFromInstance+0x90>)
 8004cc6:	4293      	cmp	r3, r2
 8004cc8:	d102      	bne.n	8004cd0 <DFSDM_GetChannelFromInstance+0x5c>
  {
    channel = 6;
 8004cca:	2306      	movs	r3, #6
 8004ccc:	60fb      	str	r3, [r7, #12]
 8004cce:	e008      	b.n	8004ce2 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel7)
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	4a0d      	ldr	r2, [pc, #52]	@ (8004d08 <DFSDM_GetChannelFromInstance+0x94>)
 8004cd4:	4293      	cmp	r3, r2
 8004cd6:	d102      	bne.n	8004cde <DFSDM_GetChannelFromInstance+0x6a>
  {
    channel = 7;
 8004cd8:	2307      	movs	r3, #7
 8004cda:	60fb      	str	r3, [r7, #12]
 8004cdc:	e001      	b.n	8004ce2 <DFSDM_GetChannelFromInstance+0x6e>
  }
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx || STM32L496xx || STM32L4A6xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else /* DFSDM1_Channel3 */
  {
    channel = 3;
 8004cde:	2303      	movs	r3, #3
 8004ce0:	60fb      	str	r3, [r7, #12]
  }

  return channel;
 8004ce2:	68fb      	ldr	r3, [r7, #12]
}
 8004ce4:	4618      	mov	r0, r3
 8004ce6:	3714      	adds	r7, #20
 8004ce8:	46bd      	mov	sp, r7
 8004cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cee:	4770      	bx	lr
 8004cf0:	40016000 	.word	0x40016000
 8004cf4:	40016020 	.word	0x40016020
 8004cf8:	40016040 	.word	0x40016040
 8004cfc:	40016080 	.word	0x40016080
 8004d00:	400160a0 	.word	0x400160a0
 8004d04:	400160c0 	.word	0x400160c0
 8004d08:	400160e0 	.word	0x400160e0

08004d0c <HAL_EXTI_RegisterCallback>:
  *         This parameter can be one of @arg @ref EXTI_CallbackIDTypeDef values.
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
 8004d0c:	b480      	push	{r7}
 8004d0e:	b087      	sub	sp, #28
 8004d10:	af00      	add	r7, sp, #0
 8004d12:	60f8      	str	r0, [r7, #12]
 8004d14:	460b      	mov	r3, r1
 8004d16:	607a      	str	r2, [r7, #4]
 8004d18:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8004d1a:	2300      	movs	r3, #0
 8004d1c:	75fb      	strb	r3, [r7, #23]

  switch (CallbackID)
 8004d1e:	7afb      	ldrb	r3, [r7, #11]
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d103      	bne.n	8004d2c <HAL_EXTI_RegisterCallback+0x20>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->PendingCallback = pPendingCbfn;
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	687a      	ldr	r2, [r7, #4]
 8004d28:	605a      	str	r2, [r3, #4]
      break;
 8004d2a:	e002      	b.n	8004d32 <HAL_EXTI_RegisterCallback+0x26>

    default:
      status = HAL_ERROR;
 8004d2c:	2301      	movs	r3, #1
 8004d2e:	75fb      	strb	r3, [r7, #23]
      break;
 8004d30:	bf00      	nop
  }

  return status;
 8004d32:	7dfb      	ldrb	r3, [r7, #23]
}
 8004d34:	4618      	mov	r0, r3
 8004d36:	371c      	adds	r7, #28
 8004d38:	46bd      	mov	sp, r7
 8004d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d3e:	4770      	bx	lr

08004d40 <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 8004d40:	b480      	push	{r7}
 8004d42:	b083      	sub	sp, #12
 8004d44:	af00      	add	r7, sp, #0
 8004d46:	6078      	str	r0, [r7, #4]
 8004d48:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d101      	bne.n	8004d54 <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 8004d50:	2301      	movs	r3, #1
 8004d52:	e003      	b.n	8004d5c <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	683a      	ldr	r2, [r7, #0]
 8004d58:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8004d5a:	2300      	movs	r3, #0
  }
}
 8004d5c:	4618      	mov	r0, r3
 8004d5e:	370c      	adds	r7, #12
 8004d60:	46bd      	mov	sp, r7
 8004d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d66:	4770      	bx	lr

08004d68 <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(EXTI_HandleTypeDef *hexti)
{
 8004d68:	b580      	push	{r7, lr}
 8004d6a:	b086      	sub	sp, #24
 8004d6c:	af00      	add	r7, sp, #0
 8004d6e:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t maskline;
  uint32_t offset;

  /* Compute line register offset and line mask */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	0c1b      	lsrs	r3, r3, #16
 8004d76:	f003 0301 	and.w	r3, r3, #1
 8004d7a:	617b      	str	r3, [r7, #20]
  maskline = (1uL << (hexti->Line & EXTI_PIN_MASK));
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	f003 031f 	and.w	r3, r3, #31
 8004d84:	2201      	movs	r2, #1
 8004d86:	fa02 f303 	lsl.w	r3, r2, r3
 8004d8a:	613b      	str	r3, [r7, #16]

  /* Get pending bit  */
  regaddr = (&EXTI->PR1 + (EXTI_CONFIG_OFFSET * offset));
 8004d8c:	697b      	ldr	r3, [r7, #20]
 8004d8e:	015a      	lsls	r2, r3, #5
 8004d90:	4b0c      	ldr	r3, [pc, #48]	@ (8004dc4 <HAL_EXTI_IRQHandler+0x5c>)
 8004d92:	4413      	add	r3, r2
 8004d94:	60fb      	str	r3, [r7, #12]
  regval = (*regaddr & maskline);
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	693a      	ldr	r2, [r7, #16]
 8004d9c:	4013      	ands	r3, r2
 8004d9e:	60bb      	str	r3, [r7, #8]

  if (regval != 0x00u)
 8004da0:	68bb      	ldr	r3, [r7, #8]
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d009      	beq.n	8004dba <HAL_EXTI_IRQHandler+0x52>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	693a      	ldr	r2, [r7, #16]
 8004daa:	601a      	str	r2, [r3, #0]

    /* Call callback */
    if (hexti->PendingCallback != NULL)
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	685b      	ldr	r3, [r3, #4]
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d002      	beq.n	8004dba <HAL_EXTI_IRQHandler+0x52>
    {
      hexti->PendingCallback();
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	685b      	ldr	r3, [r3, #4]
 8004db8:	4798      	blx	r3
    }
  }
}
 8004dba:	bf00      	nop
 8004dbc:	3718      	adds	r7, #24
 8004dbe:	46bd      	mov	sp, r7
 8004dc0:	bd80      	pop	{r7, pc}
 8004dc2:	bf00      	nop
 8004dc4:	40010414 	.word	0x40010414

08004dc8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004dc8:	b480      	push	{r7}
 8004dca:	b087      	sub	sp, #28
 8004dcc:	af00      	add	r7, sp, #0
 8004dce:	6078      	str	r0, [r7, #4]
 8004dd0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004dd2:	2300      	movs	r3, #0
 8004dd4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004dd6:	e17f      	b.n	80050d8 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004dd8:	683b      	ldr	r3, [r7, #0]
 8004dda:	681a      	ldr	r2, [r3, #0]
 8004ddc:	2101      	movs	r1, #1
 8004dde:	697b      	ldr	r3, [r7, #20]
 8004de0:	fa01 f303 	lsl.w	r3, r1, r3
 8004de4:	4013      	ands	r3, r2
 8004de6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	f000 8171 	beq.w	80050d2 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004df0:	683b      	ldr	r3, [r7, #0]
 8004df2:	685b      	ldr	r3, [r3, #4]
 8004df4:	f003 0303 	and.w	r3, r3, #3
 8004df8:	2b01      	cmp	r3, #1
 8004dfa:	d005      	beq.n	8004e08 <HAL_GPIO_Init+0x40>
 8004dfc:	683b      	ldr	r3, [r7, #0]
 8004dfe:	685b      	ldr	r3, [r3, #4]
 8004e00:	f003 0303 	and.w	r3, r3, #3
 8004e04:	2b02      	cmp	r3, #2
 8004e06:	d130      	bne.n	8004e6a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	689b      	ldr	r3, [r3, #8]
 8004e0c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8004e0e:	697b      	ldr	r3, [r7, #20]
 8004e10:	005b      	lsls	r3, r3, #1
 8004e12:	2203      	movs	r2, #3
 8004e14:	fa02 f303 	lsl.w	r3, r2, r3
 8004e18:	43db      	mvns	r3, r3
 8004e1a:	693a      	ldr	r2, [r7, #16]
 8004e1c:	4013      	ands	r3, r2
 8004e1e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004e20:	683b      	ldr	r3, [r7, #0]
 8004e22:	68da      	ldr	r2, [r3, #12]
 8004e24:	697b      	ldr	r3, [r7, #20]
 8004e26:	005b      	lsls	r3, r3, #1
 8004e28:	fa02 f303 	lsl.w	r3, r2, r3
 8004e2c:	693a      	ldr	r2, [r7, #16]
 8004e2e:	4313      	orrs	r3, r2
 8004e30:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	693a      	ldr	r2, [r7, #16]
 8004e36:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	685b      	ldr	r3, [r3, #4]
 8004e3c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004e3e:	2201      	movs	r2, #1
 8004e40:	697b      	ldr	r3, [r7, #20]
 8004e42:	fa02 f303 	lsl.w	r3, r2, r3
 8004e46:	43db      	mvns	r3, r3
 8004e48:	693a      	ldr	r2, [r7, #16]
 8004e4a:	4013      	ands	r3, r2
 8004e4c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004e4e:	683b      	ldr	r3, [r7, #0]
 8004e50:	685b      	ldr	r3, [r3, #4]
 8004e52:	091b      	lsrs	r3, r3, #4
 8004e54:	f003 0201 	and.w	r2, r3, #1
 8004e58:	697b      	ldr	r3, [r7, #20]
 8004e5a:	fa02 f303 	lsl.w	r3, r2, r3
 8004e5e:	693a      	ldr	r2, [r7, #16]
 8004e60:	4313      	orrs	r3, r2
 8004e62:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	693a      	ldr	r2, [r7, #16]
 8004e68:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8004e6a:	683b      	ldr	r3, [r7, #0]
 8004e6c:	685b      	ldr	r3, [r3, #4]
 8004e6e:	f003 0303 	and.w	r3, r3, #3
 8004e72:	2b03      	cmp	r3, #3
 8004e74:	d118      	bne.n	8004ea8 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e7a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8004e7c:	2201      	movs	r2, #1
 8004e7e:	697b      	ldr	r3, [r7, #20]
 8004e80:	fa02 f303 	lsl.w	r3, r2, r3
 8004e84:	43db      	mvns	r3, r3
 8004e86:	693a      	ldr	r2, [r7, #16]
 8004e88:	4013      	ands	r3, r2
 8004e8a:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8004e8c:	683b      	ldr	r3, [r7, #0]
 8004e8e:	685b      	ldr	r3, [r3, #4]
 8004e90:	08db      	lsrs	r3, r3, #3
 8004e92:	f003 0201 	and.w	r2, r3, #1
 8004e96:	697b      	ldr	r3, [r7, #20]
 8004e98:	fa02 f303 	lsl.w	r3, r2, r3
 8004e9c:	693a      	ldr	r2, [r7, #16]
 8004e9e:	4313      	orrs	r3, r2
 8004ea0:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	693a      	ldr	r2, [r7, #16]
 8004ea6:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004ea8:	683b      	ldr	r3, [r7, #0]
 8004eaa:	685b      	ldr	r3, [r3, #4]
 8004eac:	f003 0303 	and.w	r3, r3, #3
 8004eb0:	2b03      	cmp	r3, #3
 8004eb2:	d017      	beq.n	8004ee4 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	68db      	ldr	r3, [r3, #12]
 8004eb8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004eba:	697b      	ldr	r3, [r7, #20]
 8004ebc:	005b      	lsls	r3, r3, #1
 8004ebe:	2203      	movs	r2, #3
 8004ec0:	fa02 f303 	lsl.w	r3, r2, r3
 8004ec4:	43db      	mvns	r3, r3
 8004ec6:	693a      	ldr	r2, [r7, #16]
 8004ec8:	4013      	ands	r3, r2
 8004eca:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004ecc:	683b      	ldr	r3, [r7, #0]
 8004ece:	689a      	ldr	r2, [r3, #8]
 8004ed0:	697b      	ldr	r3, [r7, #20]
 8004ed2:	005b      	lsls	r3, r3, #1
 8004ed4:	fa02 f303 	lsl.w	r3, r2, r3
 8004ed8:	693a      	ldr	r2, [r7, #16]
 8004eda:	4313      	orrs	r3, r2
 8004edc:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	693a      	ldr	r2, [r7, #16]
 8004ee2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004ee4:	683b      	ldr	r3, [r7, #0]
 8004ee6:	685b      	ldr	r3, [r3, #4]
 8004ee8:	f003 0303 	and.w	r3, r3, #3
 8004eec:	2b02      	cmp	r3, #2
 8004eee:	d123      	bne.n	8004f38 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8004ef0:	697b      	ldr	r3, [r7, #20]
 8004ef2:	08da      	lsrs	r2, r3, #3
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	3208      	adds	r2, #8
 8004ef8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004efc:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8004efe:	697b      	ldr	r3, [r7, #20]
 8004f00:	f003 0307 	and.w	r3, r3, #7
 8004f04:	009b      	lsls	r3, r3, #2
 8004f06:	220f      	movs	r2, #15
 8004f08:	fa02 f303 	lsl.w	r3, r2, r3
 8004f0c:	43db      	mvns	r3, r3
 8004f0e:	693a      	ldr	r2, [r7, #16]
 8004f10:	4013      	ands	r3, r2
 8004f12:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8004f14:	683b      	ldr	r3, [r7, #0]
 8004f16:	691a      	ldr	r2, [r3, #16]
 8004f18:	697b      	ldr	r3, [r7, #20]
 8004f1a:	f003 0307 	and.w	r3, r3, #7
 8004f1e:	009b      	lsls	r3, r3, #2
 8004f20:	fa02 f303 	lsl.w	r3, r2, r3
 8004f24:	693a      	ldr	r2, [r7, #16]
 8004f26:	4313      	orrs	r3, r2
 8004f28:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004f2a:	697b      	ldr	r3, [r7, #20]
 8004f2c:	08da      	lsrs	r2, r3, #3
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	3208      	adds	r2, #8
 8004f32:	6939      	ldr	r1, [r7, #16]
 8004f34:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8004f3e:	697b      	ldr	r3, [r7, #20]
 8004f40:	005b      	lsls	r3, r3, #1
 8004f42:	2203      	movs	r2, #3
 8004f44:	fa02 f303 	lsl.w	r3, r2, r3
 8004f48:	43db      	mvns	r3, r3
 8004f4a:	693a      	ldr	r2, [r7, #16]
 8004f4c:	4013      	ands	r3, r2
 8004f4e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8004f50:	683b      	ldr	r3, [r7, #0]
 8004f52:	685b      	ldr	r3, [r3, #4]
 8004f54:	f003 0203 	and.w	r2, r3, #3
 8004f58:	697b      	ldr	r3, [r7, #20]
 8004f5a:	005b      	lsls	r3, r3, #1
 8004f5c:	fa02 f303 	lsl.w	r3, r2, r3
 8004f60:	693a      	ldr	r2, [r7, #16]
 8004f62:	4313      	orrs	r3, r2
 8004f64:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	693a      	ldr	r2, [r7, #16]
 8004f6a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004f6c:	683b      	ldr	r3, [r7, #0]
 8004f6e:	685b      	ldr	r3, [r3, #4]
 8004f70:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	f000 80ac 	beq.w	80050d2 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004f7a:	4b5f      	ldr	r3, [pc, #380]	@ (80050f8 <HAL_GPIO_Init+0x330>)
 8004f7c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004f7e:	4a5e      	ldr	r2, [pc, #376]	@ (80050f8 <HAL_GPIO_Init+0x330>)
 8004f80:	f043 0301 	orr.w	r3, r3, #1
 8004f84:	6613      	str	r3, [r2, #96]	@ 0x60
 8004f86:	4b5c      	ldr	r3, [pc, #368]	@ (80050f8 <HAL_GPIO_Init+0x330>)
 8004f88:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004f8a:	f003 0301 	and.w	r3, r3, #1
 8004f8e:	60bb      	str	r3, [r7, #8]
 8004f90:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8004f92:	4a5a      	ldr	r2, [pc, #360]	@ (80050fc <HAL_GPIO_Init+0x334>)
 8004f94:	697b      	ldr	r3, [r7, #20]
 8004f96:	089b      	lsrs	r3, r3, #2
 8004f98:	3302      	adds	r3, #2
 8004f9a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004f9e:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8004fa0:	697b      	ldr	r3, [r7, #20]
 8004fa2:	f003 0303 	and.w	r3, r3, #3
 8004fa6:	009b      	lsls	r3, r3, #2
 8004fa8:	220f      	movs	r2, #15
 8004faa:	fa02 f303 	lsl.w	r3, r2, r3
 8004fae:	43db      	mvns	r3, r3
 8004fb0:	693a      	ldr	r2, [r7, #16]
 8004fb2:	4013      	ands	r3, r2
 8004fb4:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8004fbc:	d025      	beq.n	800500a <HAL_GPIO_Init+0x242>
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	4a4f      	ldr	r2, [pc, #316]	@ (8005100 <HAL_GPIO_Init+0x338>)
 8004fc2:	4293      	cmp	r3, r2
 8004fc4:	d01f      	beq.n	8005006 <HAL_GPIO_Init+0x23e>
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	4a4e      	ldr	r2, [pc, #312]	@ (8005104 <HAL_GPIO_Init+0x33c>)
 8004fca:	4293      	cmp	r3, r2
 8004fcc:	d019      	beq.n	8005002 <HAL_GPIO_Init+0x23a>
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	4a4d      	ldr	r2, [pc, #308]	@ (8005108 <HAL_GPIO_Init+0x340>)
 8004fd2:	4293      	cmp	r3, r2
 8004fd4:	d013      	beq.n	8004ffe <HAL_GPIO_Init+0x236>
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	4a4c      	ldr	r2, [pc, #304]	@ (800510c <HAL_GPIO_Init+0x344>)
 8004fda:	4293      	cmp	r3, r2
 8004fdc:	d00d      	beq.n	8004ffa <HAL_GPIO_Init+0x232>
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	4a4b      	ldr	r2, [pc, #300]	@ (8005110 <HAL_GPIO_Init+0x348>)
 8004fe2:	4293      	cmp	r3, r2
 8004fe4:	d007      	beq.n	8004ff6 <HAL_GPIO_Init+0x22e>
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	4a4a      	ldr	r2, [pc, #296]	@ (8005114 <HAL_GPIO_Init+0x34c>)
 8004fea:	4293      	cmp	r3, r2
 8004fec:	d101      	bne.n	8004ff2 <HAL_GPIO_Init+0x22a>
 8004fee:	2306      	movs	r3, #6
 8004ff0:	e00c      	b.n	800500c <HAL_GPIO_Init+0x244>
 8004ff2:	2307      	movs	r3, #7
 8004ff4:	e00a      	b.n	800500c <HAL_GPIO_Init+0x244>
 8004ff6:	2305      	movs	r3, #5
 8004ff8:	e008      	b.n	800500c <HAL_GPIO_Init+0x244>
 8004ffa:	2304      	movs	r3, #4
 8004ffc:	e006      	b.n	800500c <HAL_GPIO_Init+0x244>
 8004ffe:	2303      	movs	r3, #3
 8005000:	e004      	b.n	800500c <HAL_GPIO_Init+0x244>
 8005002:	2302      	movs	r3, #2
 8005004:	e002      	b.n	800500c <HAL_GPIO_Init+0x244>
 8005006:	2301      	movs	r3, #1
 8005008:	e000      	b.n	800500c <HAL_GPIO_Init+0x244>
 800500a:	2300      	movs	r3, #0
 800500c:	697a      	ldr	r2, [r7, #20]
 800500e:	f002 0203 	and.w	r2, r2, #3
 8005012:	0092      	lsls	r2, r2, #2
 8005014:	4093      	lsls	r3, r2
 8005016:	693a      	ldr	r2, [r7, #16]
 8005018:	4313      	orrs	r3, r2
 800501a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800501c:	4937      	ldr	r1, [pc, #220]	@ (80050fc <HAL_GPIO_Init+0x334>)
 800501e:	697b      	ldr	r3, [r7, #20]
 8005020:	089b      	lsrs	r3, r3, #2
 8005022:	3302      	adds	r3, #2
 8005024:	693a      	ldr	r2, [r7, #16]
 8005026:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800502a:	4b3b      	ldr	r3, [pc, #236]	@ (8005118 <HAL_GPIO_Init+0x350>)
 800502c:	689b      	ldr	r3, [r3, #8]
 800502e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	43db      	mvns	r3, r3
 8005034:	693a      	ldr	r2, [r7, #16]
 8005036:	4013      	ands	r3, r2
 8005038:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800503a:	683b      	ldr	r3, [r7, #0]
 800503c:	685b      	ldr	r3, [r3, #4]
 800503e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005042:	2b00      	cmp	r3, #0
 8005044:	d003      	beq.n	800504e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8005046:	693a      	ldr	r2, [r7, #16]
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	4313      	orrs	r3, r2
 800504c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800504e:	4a32      	ldr	r2, [pc, #200]	@ (8005118 <HAL_GPIO_Init+0x350>)
 8005050:	693b      	ldr	r3, [r7, #16]
 8005052:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8005054:	4b30      	ldr	r3, [pc, #192]	@ (8005118 <HAL_GPIO_Init+0x350>)
 8005056:	68db      	ldr	r3, [r3, #12]
 8005058:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	43db      	mvns	r3, r3
 800505e:	693a      	ldr	r2, [r7, #16]
 8005060:	4013      	ands	r3, r2
 8005062:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8005064:	683b      	ldr	r3, [r7, #0]
 8005066:	685b      	ldr	r3, [r3, #4]
 8005068:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800506c:	2b00      	cmp	r3, #0
 800506e:	d003      	beq.n	8005078 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8005070:	693a      	ldr	r2, [r7, #16]
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	4313      	orrs	r3, r2
 8005076:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8005078:	4a27      	ldr	r2, [pc, #156]	@ (8005118 <HAL_GPIO_Init+0x350>)
 800507a:	693b      	ldr	r3, [r7, #16]
 800507c:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800507e:	4b26      	ldr	r3, [pc, #152]	@ (8005118 <HAL_GPIO_Init+0x350>)
 8005080:	685b      	ldr	r3, [r3, #4]
 8005082:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	43db      	mvns	r3, r3
 8005088:	693a      	ldr	r2, [r7, #16]
 800508a:	4013      	ands	r3, r2
 800508c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800508e:	683b      	ldr	r3, [r7, #0]
 8005090:	685b      	ldr	r3, [r3, #4]
 8005092:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005096:	2b00      	cmp	r3, #0
 8005098:	d003      	beq.n	80050a2 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800509a:	693a      	ldr	r2, [r7, #16]
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	4313      	orrs	r3, r2
 80050a0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80050a2:	4a1d      	ldr	r2, [pc, #116]	@ (8005118 <HAL_GPIO_Init+0x350>)
 80050a4:	693b      	ldr	r3, [r7, #16]
 80050a6:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80050a8:	4b1b      	ldr	r3, [pc, #108]	@ (8005118 <HAL_GPIO_Init+0x350>)
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	43db      	mvns	r3, r3
 80050b2:	693a      	ldr	r2, [r7, #16]
 80050b4:	4013      	ands	r3, r2
 80050b6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80050b8:	683b      	ldr	r3, [r7, #0]
 80050ba:	685b      	ldr	r3, [r3, #4]
 80050bc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d003      	beq.n	80050cc <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80050c4:	693a      	ldr	r2, [r7, #16]
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	4313      	orrs	r3, r2
 80050ca:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80050cc:	4a12      	ldr	r2, [pc, #72]	@ (8005118 <HAL_GPIO_Init+0x350>)
 80050ce:	693b      	ldr	r3, [r7, #16]
 80050d0:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80050d2:	697b      	ldr	r3, [r7, #20]
 80050d4:	3301      	adds	r3, #1
 80050d6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80050d8:	683b      	ldr	r3, [r7, #0]
 80050da:	681a      	ldr	r2, [r3, #0]
 80050dc:	697b      	ldr	r3, [r7, #20]
 80050de:	fa22 f303 	lsr.w	r3, r2, r3
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	f47f ae78 	bne.w	8004dd8 <HAL_GPIO_Init+0x10>
  }
}
 80050e8:	bf00      	nop
 80050ea:	bf00      	nop
 80050ec:	371c      	adds	r7, #28
 80050ee:	46bd      	mov	sp, r7
 80050f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f4:	4770      	bx	lr
 80050f6:	bf00      	nop
 80050f8:	40021000 	.word	0x40021000
 80050fc:	40010000 	.word	0x40010000
 8005100:	48000400 	.word	0x48000400
 8005104:	48000800 	.word	0x48000800
 8005108:	48000c00 	.word	0x48000c00
 800510c:	48001000 	.word	0x48001000
 8005110:	48001400 	.word	0x48001400
 8005114:	48001800 	.word	0x48001800
 8005118:	40010400 	.word	0x40010400

0800511c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800511c:	b480      	push	{r7}
 800511e:	b087      	sub	sp, #28
 8005120:	af00      	add	r7, sp, #0
 8005122:	6078      	str	r0, [r7, #4]
 8005124:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8005126:	2300      	movs	r3, #0
 8005128:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 800512a:	e0cd      	b.n	80052c8 <HAL_GPIO_DeInit+0x1ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 800512c:	2201      	movs	r2, #1
 800512e:	697b      	ldr	r3, [r7, #20]
 8005130:	fa02 f303 	lsl.w	r3, r2, r3
 8005134:	683a      	ldr	r2, [r7, #0]
 8005136:	4013      	ands	r3, r2
 8005138:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 800513a:	693b      	ldr	r3, [r7, #16]
 800513c:	2b00      	cmp	r3, #0
 800513e:	f000 80c0 	beq.w	80052c2 <HAL_GPIO_DeInit+0x1a6>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 8005142:	4a68      	ldr	r2, [pc, #416]	@ (80052e4 <HAL_GPIO_DeInit+0x1c8>)
 8005144:	697b      	ldr	r3, [r7, #20]
 8005146:	089b      	lsrs	r3, r3, #2
 8005148:	3302      	adds	r3, #2
 800514a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800514e:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8005150:	697b      	ldr	r3, [r7, #20]
 8005152:	f003 0303 	and.w	r3, r3, #3
 8005156:	009b      	lsls	r3, r3, #2
 8005158:	220f      	movs	r2, #15
 800515a:	fa02 f303 	lsl.w	r3, r2, r3
 800515e:	68fa      	ldr	r2, [r7, #12]
 8005160:	4013      	ands	r3, r2
 8005162:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800516a:	d025      	beq.n	80051b8 <HAL_GPIO_DeInit+0x9c>
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	4a5e      	ldr	r2, [pc, #376]	@ (80052e8 <HAL_GPIO_DeInit+0x1cc>)
 8005170:	4293      	cmp	r3, r2
 8005172:	d01f      	beq.n	80051b4 <HAL_GPIO_DeInit+0x98>
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	4a5d      	ldr	r2, [pc, #372]	@ (80052ec <HAL_GPIO_DeInit+0x1d0>)
 8005178:	4293      	cmp	r3, r2
 800517a:	d019      	beq.n	80051b0 <HAL_GPIO_DeInit+0x94>
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	4a5c      	ldr	r2, [pc, #368]	@ (80052f0 <HAL_GPIO_DeInit+0x1d4>)
 8005180:	4293      	cmp	r3, r2
 8005182:	d013      	beq.n	80051ac <HAL_GPIO_DeInit+0x90>
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	4a5b      	ldr	r2, [pc, #364]	@ (80052f4 <HAL_GPIO_DeInit+0x1d8>)
 8005188:	4293      	cmp	r3, r2
 800518a:	d00d      	beq.n	80051a8 <HAL_GPIO_DeInit+0x8c>
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	4a5a      	ldr	r2, [pc, #360]	@ (80052f8 <HAL_GPIO_DeInit+0x1dc>)
 8005190:	4293      	cmp	r3, r2
 8005192:	d007      	beq.n	80051a4 <HAL_GPIO_DeInit+0x88>
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	4a59      	ldr	r2, [pc, #356]	@ (80052fc <HAL_GPIO_DeInit+0x1e0>)
 8005198:	4293      	cmp	r3, r2
 800519a:	d101      	bne.n	80051a0 <HAL_GPIO_DeInit+0x84>
 800519c:	2306      	movs	r3, #6
 800519e:	e00c      	b.n	80051ba <HAL_GPIO_DeInit+0x9e>
 80051a0:	2307      	movs	r3, #7
 80051a2:	e00a      	b.n	80051ba <HAL_GPIO_DeInit+0x9e>
 80051a4:	2305      	movs	r3, #5
 80051a6:	e008      	b.n	80051ba <HAL_GPIO_DeInit+0x9e>
 80051a8:	2304      	movs	r3, #4
 80051aa:	e006      	b.n	80051ba <HAL_GPIO_DeInit+0x9e>
 80051ac:	2303      	movs	r3, #3
 80051ae:	e004      	b.n	80051ba <HAL_GPIO_DeInit+0x9e>
 80051b0:	2302      	movs	r3, #2
 80051b2:	e002      	b.n	80051ba <HAL_GPIO_DeInit+0x9e>
 80051b4:	2301      	movs	r3, #1
 80051b6:	e000      	b.n	80051ba <HAL_GPIO_DeInit+0x9e>
 80051b8:	2300      	movs	r3, #0
 80051ba:	697a      	ldr	r2, [r7, #20]
 80051bc:	f002 0203 	and.w	r2, r2, #3
 80051c0:	0092      	lsls	r2, r2, #2
 80051c2:	4093      	lsls	r3, r2
 80051c4:	68fa      	ldr	r2, [r7, #12]
 80051c6:	429a      	cmp	r2, r3
 80051c8:	d132      	bne.n	8005230 <HAL_GPIO_DeInit+0x114>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 80051ca:	4b4d      	ldr	r3, [pc, #308]	@ (8005300 <HAL_GPIO_DeInit+0x1e4>)
 80051cc:	681a      	ldr	r2, [r3, #0]
 80051ce:	693b      	ldr	r3, [r7, #16]
 80051d0:	43db      	mvns	r3, r3
 80051d2:	494b      	ldr	r1, [pc, #300]	@ (8005300 <HAL_GPIO_DeInit+0x1e4>)
 80051d4:	4013      	ands	r3, r2
 80051d6:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 80051d8:	4b49      	ldr	r3, [pc, #292]	@ (8005300 <HAL_GPIO_DeInit+0x1e4>)
 80051da:	685a      	ldr	r2, [r3, #4]
 80051dc:	693b      	ldr	r3, [r7, #16]
 80051de:	43db      	mvns	r3, r3
 80051e0:	4947      	ldr	r1, [pc, #284]	@ (8005300 <HAL_GPIO_DeInit+0x1e4>)
 80051e2:	4013      	ands	r3, r2
 80051e4:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 80051e6:	4b46      	ldr	r3, [pc, #280]	@ (8005300 <HAL_GPIO_DeInit+0x1e4>)
 80051e8:	68da      	ldr	r2, [r3, #12]
 80051ea:	693b      	ldr	r3, [r7, #16]
 80051ec:	43db      	mvns	r3, r3
 80051ee:	4944      	ldr	r1, [pc, #272]	@ (8005300 <HAL_GPIO_DeInit+0x1e4>)
 80051f0:	4013      	ands	r3, r2
 80051f2:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR1 &= ~(iocurrent);
 80051f4:	4b42      	ldr	r3, [pc, #264]	@ (8005300 <HAL_GPIO_DeInit+0x1e4>)
 80051f6:	689a      	ldr	r2, [r3, #8]
 80051f8:	693b      	ldr	r3, [r7, #16]
 80051fa:	43db      	mvns	r3, r3
 80051fc:	4940      	ldr	r1, [pc, #256]	@ (8005300 <HAL_GPIO_DeInit+0x1e4>)
 80051fe:	4013      	ands	r3, r2
 8005200:	608b      	str	r3, [r1, #8]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 8005202:	697b      	ldr	r3, [r7, #20]
 8005204:	f003 0303 	and.w	r3, r3, #3
 8005208:	009b      	lsls	r3, r3, #2
 800520a:	220f      	movs	r2, #15
 800520c:	fa02 f303 	lsl.w	r3, r2, r3
 8005210:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8005212:	4a34      	ldr	r2, [pc, #208]	@ (80052e4 <HAL_GPIO_DeInit+0x1c8>)
 8005214:	697b      	ldr	r3, [r7, #20]
 8005216:	089b      	lsrs	r3, r3, #2
 8005218:	3302      	adds	r3, #2
 800521a:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	43da      	mvns	r2, r3
 8005222:	4830      	ldr	r0, [pc, #192]	@ (80052e4 <HAL_GPIO_DeInit+0x1c8>)
 8005224:	697b      	ldr	r3, [r7, #20]
 8005226:	089b      	lsrs	r3, r3, #2
 8005228:	400a      	ands	r2, r1
 800522a:	3302      	adds	r3, #2
 800522c:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681a      	ldr	r2, [r3, #0]
 8005234:	697b      	ldr	r3, [r7, #20]
 8005236:	005b      	lsls	r3, r3, #1
 8005238:	2103      	movs	r1, #3
 800523a:	fa01 f303 	lsl.w	r3, r1, r3
 800523e:	431a      	orrs	r2, r3
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 8005244:	697b      	ldr	r3, [r7, #20]
 8005246:	08da      	lsrs	r2, r3, #3
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	3208      	adds	r2, #8
 800524c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005250:	697b      	ldr	r3, [r7, #20]
 8005252:	f003 0307 	and.w	r3, r3, #7
 8005256:	009b      	lsls	r3, r3, #2
 8005258:	220f      	movs	r2, #15
 800525a:	fa02 f303 	lsl.w	r3, r2, r3
 800525e:	43db      	mvns	r3, r3
 8005260:	697a      	ldr	r2, [r7, #20]
 8005262:	08d2      	lsrs	r2, r2, #3
 8005264:	4019      	ands	r1, r3
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	3208      	adds	r2, #8
 800526a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	689a      	ldr	r2, [r3, #8]
 8005272:	697b      	ldr	r3, [r7, #20]
 8005274:	005b      	lsls	r3, r3, #1
 8005276:	2103      	movs	r1, #3
 8005278:	fa01 f303 	lsl.w	r3, r1, r3
 800527c:	43db      	mvns	r3, r3
 800527e:	401a      	ands	r2, r3
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	685a      	ldr	r2, [r3, #4]
 8005288:	2101      	movs	r1, #1
 800528a:	697b      	ldr	r3, [r7, #20]
 800528c:	fa01 f303 	lsl.w	r3, r1, r3
 8005290:	43db      	mvns	r3, r3
 8005292:	401a      	ands	r2, r3
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	68da      	ldr	r2, [r3, #12]
 800529c:	697b      	ldr	r3, [r7, #20]
 800529e:	005b      	lsls	r3, r3, #1
 80052a0:	2103      	movs	r1, #3
 80052a2:	fa01 f303 	lsl.w	r3, r1, r3
 80052a6:	43db      	mvns	r3, r3
 80052a8:	401a      	ands	r2, r3
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	60da      	str	r2, [r3, #12]

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80052b2:	2101      	movs	r1, #1
 80052b4:	697b      	ldr	r3, [r7, #20]
 80052b6:	fa01 f303 	lsl.w	r3, r1, r3
 80052ba:	43db      	mvns	r3, r3
 80052bc:	401a      	ands	r2, r3
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 80052c2:	697b      	ldr	r3, [r7, #20]
 80052c4:	3301      	adds	r3, #1
 80052c6:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 80052c8:	683a      	ldr	r2, [r7, #0]
 80052ca:	697b      	ldr	r3, [r7, #20]
 80052cc:	fa22 f303 	lsr.w	r3, r2, r3
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	f47f af2b 	bne.w	800512c <HAL_GPIO_DeInit+0x10>
  }
}
 80052d6:	bf00      	nop
 80052d8:	bf00      	nop
 80052da:	371c      	adds	r7, #28
 80052dc:	46bd      	mov	sp, r7
 80052de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e2:	4770      	bx	lr
 80052e4:	40010000 	.word	0x40010000
 80052e8:	48000400 	.word	0x48000400
 80052ec:	48000800 	.word	0x48000800
 80052f0:	48000c00 	.word	0x48000c00
 80052f4:	48001000 	.word	0x48001000
 80052f8:	48001400 	.word	0x48001400
 80052fc:	48001800 	.word	0x48001800
 8005300:	40010400 	.word	0x40010400

08005304 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005304:	b480      	push	{r7}
 8005306:	b085      	sub	sp, #20
 8005308:	af00      	add	r7, sp, #0
 800530a:	6078      	str	r0, [r7, #4]
 800530c:	460b      	mov	r3, r1
 800530e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	691a      	ldr	r2, [r3, #16]
 8005314:	887b      	ldrh	r3, [r7, #2]
 8005316:	4013      	ands	r3, r2
 8005318:	2b00      	cmp	r3, #0
 800531a:	d002      	beq.n	8005322 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800531c:	2301      	movs	r3, #1
 800531e:	73fb      	strb	r3, [r7, #15]
 8005320:	e001      	b.n	8005326 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005322:	2300      	movs	r3, #0
 8005324:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005326:	7bfb      	ldrb	r3, [r7, #15]
}
 8005328:	4618      	mov	r0, r3
 800532a:	3714      	adds	r7, #20
 800532c:	46bd      	mov	sp, r7
 800532e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005332:	4770      	bx	lr

08005334 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005334:	b480      	push	{r7}
 8005336:	b083      	sub	sp, #12
 8005338:	af00      	add	r7, sp, #0
 800533a:	6078      	str	r0, [r7, #4]
 800533c:	460b      	mov	r3, r1
 800533e:	807b      	strh	r3, [r7, #2]
 8005340:	4613      	mov	r3, r2
 8005342:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005344:	787b      	ldrb	r3, [r7, #1]
 8005346:	2b00      	cmp	r3, #0
 8005348:	d003      	beq.n	8005352 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800534a:	887a      	ldrh	r2, [r7, #2]
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8005350:	e002      	b.n	8005358 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8005352:	887a      	ldrh	r2, [r7, #2]
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8005358:	bf00      	nop
 800535a:	370c      	adds	r7, #12
 800535c:	46bd      	mov	sp, r7
 800535e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005362:	4770      	bx	lr

08005364 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005364:	b480      	push	{r7}
 8005366:	b085      	sub	sp, #20
 8005368:	af00      	add	r7, sp, #0
 800536a:	6078      	str	r0, [r7, #4]
 800536c:	460b      	mov	r3, r1
 800536e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	695b      	ldr	r3, [r3, #20]
 8005374:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8005376:	887a      	ldrh	r2, [r7, #2]
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	4013      	ands	r3, r2
 800537c:	041a      	lsls	r2, r3, #16
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	43d9      	mvns	r1, r3
 8005382:	887b      	ldrh	r3, [r7, #2]
 8005384:	400b      	ands	r3, r1
 8005386:	431a      	orrs	r2, r3
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	619a      	str	r2, [r3, #24]
}
 800538c:	bf00      	nop
 800538e:	3714      	adds	r7, #20
 8005390:	46bd      	mov	sp, r7
 8005392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005396:	4770      	bx	lr

08005398 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005398:	b580      	push	{r7, lr}
 800539a:	b082      	sub	sp, #8
 800539c:	af00      	add	r7, sp, #0
 800539e:	4603      	mov	r3, r0
 80053a0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80053a2:	4b08      	ldr	r3, [pc, #32]	@ (80053c4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80053a4:	695a      	ldr	r2, [r3, #20]
 80053a6:	88fb      	ldrh	r3, [r7, #6]
 80053a8:	4013      	ands	r3, r2
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d006      	beq.n	80053bc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80053ae:	4a05      	ldr	r2, [pc, #20]	@ (80053c4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80053b0:	88fb      	ldrh	r3, [r7, #6]
 80053b2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80053b4:	88fb      	ldrh	r3, [r7, #6]
 80053b6:	4618      	mov	r0, r3
 80053b8:	f000 f806 	bl	80053c8 <HAL_GPIO_EXTI_Callback>
  }
}
 80053bc:	bf00      	nop
 80053be:	3708      	adds	r7, #8
 80053c0:	46bd      	mov	sp, r7
 80053c2:	bd80      	pop	{r7, pc}
 80053c4:	40010400 	.word	0x40010400

080053c8 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80053c8:	b480      	push	{r7}
 80053ca:	b083      	sub	sp, #12
 80053cc:	af00      	add	r7, sp, #0
 80053ce:	4603      	mov	r3, r0
 80053d0:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80053d2:	bf00      	nop
 80053d4:	370c      	adds	r7, #12
 80053d6:	46bd      	mov	sp, r7
 80053d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053dc:	4770      	bx	lr

080053de <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80053de:	b580      	push	{r7, lr}
 80053e0:	b082      	sub	sp, #8
 80053e2:	af00      	add	r7, sp, #0
 80053e4:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d101      	bne.n	80053f0 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80053ec:	2301      	movs	r3, #1
 80053ee:	e08d      	b.n	800550c <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80053f6:	b2db      	uxtb	r3, r3
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d106      	bne.n	800540a <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	2200      	movs	r2, #0
 8005400:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8005404:	6878      	ldr	r0, [r7, #4]
 8005406:	f7fe f8f3 	bl	80035f0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	2224      	movs	r2, #36	@ 0x24
 800540e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	681a      	ldr	r2, [r3, #0]
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	f022 0201 	bic.w	r2, r2, #1
 8005420:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	685a      	ldr	r2, [r3, #4]
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800542e:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	689a      	ldr	r2, [r3, #8]
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800543e:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	68db      	ldr	r3, [r3, #12]
 8005444:	2b01      	cmp	r3, #1
 8005446:	d107      	bne.n	8005458 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	689a      	ldr	r2, [r3, #8]
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005454:	609a      	str	r2, [r3, #8]
 8005456:	e006      	b.n	8005466 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	689a      	ldr	r2, [r3, #8]
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8005464:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	68db      	ldr	r3, [r3, #12]
 800546a:	2b02      	cmp	r3, #2
 800546c:	d108      	bne.n	8005480 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	685a      	ldr	r2, [r3, #4]
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800547c:	605a      	str	r2, [r3, #4]
 800547e:	e007      	b.n	8005490 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	685a      	ldr	r2, [r3, #4]
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800548e:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	685b      	ldr	r3, [r3, #4]
 8005496:	687a      	ldr	r2, [r7, #4]
 8005498:	6812      	ldr	r2, [r2, #0]
 800549a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800549e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80054a2:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	68da      	ldr	r2, [r3, #12]
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80054b2:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	691a      	ldr	r2, [r3, #16]
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	695b      	ldr	r3, [r3, #20]
 80054bc:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	699b      	ldr	r3, [r3, #24]
 80054c4:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	430a      	orrs	r2, r1
 80054cc:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	69d9      	ldr	r1, [r3, #28]
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	6a1a      	ldr	r2, [r3, #32]
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	430a      	orrs	r2, r1
 80054dc:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	681a      	ldr	r2, [r3, #0]
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	f042 0201 	orr.w	r2, r2, #1
 80054ec:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	2200      	movs	r2, #0
 80054f2:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	2220      	movs	r2, #32
 80054f8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	2200      	movs	r2, #0
 8005500:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	2200      	movs	r2, #0
 8005506:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 800550a:	2300      	movs	r3, #0
}
 800550c:	4618      	mov	r0, r3
 800550e:	3708      	adds	r7, #8
 8005510:	46bd      	mov	sp, r7
 8005512:	bd80      	pop	{r7, pc}

08005514 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8005514:	b580      	push	{r7, lr}
 8005516:	b082      	sub	sp, #8
 8005518:	af00      	add	r7, sp, #0
 800551a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	2b00      	cmp	r3, #0
 8005520:	d101      	bne.n	8005526 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8005522:	2301      	movs	r3, #1
 8005524:	e021      	b.n	800556a <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	2224      	movs	r2, #36	@ 0x24
 800552a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	681a      	ldr	r2, [r3, #0]
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	f022 0201 	bic.w	r2, r2, #1
 800553c:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 800553e:	6878      	ldr	r0, [r7, #4]
 8005540:	f7fe f8b4 	bl	80036ac <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	2200      	movs	r2, #0
 8005548:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	2200      	movs	r2, #0
 800554e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	2200      	movs	r2, #0
 8005556:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	2200      	movs	r2, #0
 800555c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	2200      	movs	r2, #0
 8005564:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8005568:	2300      	movs	r3, #0
}
 800556a:	4618      	mov	r0, r3
 800556c:	3708      	adds	r7, #8
 800556e:	46bd      	mov	sp, r7
 8005570:	bd80      	pop	{r7, pc}
	...

08005574 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005574:	b580      	push	{r7, lr}
 8005576:	b088      	sub	sp, #32
 8005578:	af02      	add	r7, sp, #8
 800557a:	60f8      	str	r0, [r7, #12]
 800557c:	4608      	mov	r0, r1
 800557e:	4611      	mov	r1, r2
 8005580:	461a      	mov	r2, r3
 8005582:	4603      	mov	r3, r0
 8005584:	817b      	strh	r3, [r7, #10]
 8005586:	460b      	mov	r3, r1
 8005588:	813b      	strh	r3, [r7, #8]
 800558a:	4613      	mov	r3, r2
 800558c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005594:	b2db      	uxtb	r3, r3
 8005596:	2b20      	cmp	r3, #32
 8005598:	f040 80f9 	bne.w	800578e <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 800559c:	6a3b      	ldr	r3, [r7, #32]
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d002      	beq.n	80055a8 <HAL_I2C_Mem_Write+0x34>
 80055a2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d105      	bne.n	80055b4 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80055ae:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 80055b0:	2301      	movs	r3, #1
 80055b2:	e0ed      	b.n	8005790 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80055ba:	2b01      	cmp	r3, #1
 80055bc:	d101      	bne.n	80055c2 <HAL_I2C_Mem_Write+0x4e>
 80055be:	2302      	movs	r3, #2
 80055c0:	e0e6      	b.n	8005790 <HAL_I2C_Mem_Write+0x21c>
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	2201      	movs	r2, #1
 80055c6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80055ca:	f7ff f951 	bl	8004870 <HAL_GetTick>
 80055ce:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80055d0:	697b      	ldr	r3, [r7, #20]
 80055d2:	9300      	str	r3, [sp, #0]
 80055d4:	2319      	movs	r3, #25
 80055d6:	2201      	movs	r2, #1
 80055d8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80055dc:	68f8      	ldr	r0, [r7, #12]
 80055de:	f000 fac3 	bl	8005b68 <I2C_WaitOnFlagUntilTimeout>
 80055e2:	4603      	mov	r3, r0
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d001      	beq.n	80055ec <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80055e8:	2301      	movs	r3, #1
 80055ea:	e0d1      	b.n	8005790 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	2221      	movs	r2, #33	@ 0x21
 80055f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	2240      	movs	r2, #64	@ 0x40
 80055f8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	2200      	movs	r2, #0
 8005600:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	6a3a      	ldr	r2, [r7, #32]
 8005606:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800560c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	2200      	movs	r2, #0
 8005612:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005614:	88f8      	ldrh	r0, [r7, #6]
 8005616:	893a      	ldrh	r2, [r7, #8]
 8005618:	8979      	ldrh	r1, [r7, #10]
 800561a:	697b      	ldr	r3, [r7, #20]
 800561c:	9301      	str	r3, [sp, #4]
 800561e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005620:	9300      	str	r3, [sp, #0]
 8005622:	4603      	mov	r3, r0
 8005624:	68f8      	ldr	r0, [r7, #12]
 8005626:	f000 f9d3 	bl	80059d0 <I2C_RequestMemoryWrite>
 800562a:	4603      	mov	r3, r0
 800562c:	2b00      	cmp	r3, #0
 800562e:	d005      	beq.n	800563c <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	2200      	movs	r2, #0
 8005634:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8005638:	2301      	movs	r3, #1
 800563a:	e0a9      	b.n	8005790 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005640:	b29b      	uxth	r3, r3
 8005642:	2bff      	cmp	r3, #255	@ 0xff
 8005644:	d90e      	bls.n	8005664 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	22ff      	movs	r2, #255	@ 0xff
 800564a:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005650:	b2da      	uxtb	r2, r3
 8005652:	8979      	ldrh	r1, [r7, #10]
 8005654:	2300      	movs	r3, #0
 8005656:	9300      	str	r3, [sp, #0]
 8005658:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800565c:	68f8      	ldr	r0, [r7, #12]
 800565e:	f000 fc47 	bl	8005ef0 <I2C_TransferConfig>
 8005662:	e00f      	b.n	8005684 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005668:	b29a      	uxth	r2, r3
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005672:	b2da      	uxtb	r2, r3
 8005674:	8979      	ldrh	r1, [r7, #10]
 8005676:	2300      	movs	r3, #0
 8005678:	9300      	str	r3, [sp, #0]
 800567a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800567e:	68f8      	ldr	r0, [r7, #12]
 8005680:	f000 fc36 	bl	8005ef0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005684:	697a      	ldr	r2, [r7, #20]
 8005686:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005688:	68f8      	ldr	r0, [r7, #12]
 800568a:	f000 fac6 	bl	8005c1a <I2C_WaitOnTXISFlagUntilTimeout>
 800568e:	4603      	mov	r3, r0
 8005690:	2b00      	cmp	r3, #0
 8005692:	d001      	beq.n	8005698 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8005694:	2301      	movs	r3, #1
 8005696:	e07b      	b.n	8005790 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800569c:	781a      	ldrb	r2, [r3, #0]
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80056a8:	1c5a      	adds	r2, r3, #1
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80056b2:	b29b      	uxth	r3, r3
 80056b4:	3b01      	subs	r3, #1
 80056b6:	b29a      	uxth	r2, r3
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80056c0:	3b01      	subs	r3, #1
 80056c2:	b29a      	uxth	r2, r3
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80056cc:	b29b      	uxth	r3, r3
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d034      	beq.n	800573c <HAL_I2C_Mem_Write+0x1c8>
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d130      	bne.n	800573c <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80056da:	697b      	ldr	r3, [r7, #20]
 80056dc:	9300      	str	r3, [sp, #0]
 80056de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80056e0:	2200      	movs	r2, #0
 80056e2:	2180      	movs	r1, #128	@ 0x80
 80056e4:	68f8      	ldr	r0, [r7, #12]
 80056e6:	f000 fa3f 	bl	8005b68 <I2C_WaitOnFlagUntilTimeout>
 80056ea:	4603      	mov	r3, r0
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d001      	beq.n	80056f4 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80056f0:	2301      	movs	r3, #1
 80056f2:	e04d      	b.n	8005790 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80056f8:	b29b      	uxth	r3, r3
 80056fa:	2bff      	cmp	r3, #255	@ 0xff
 80056fc:	d90e      	bls.n	800571c <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	22ff      	movs	r2, #255	@ 0xff
 8005702:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005708:	b2da      	uxtb	r2, r3
 800570a:	8979      	ldrh	r1, [r7, #10]
 800570c:	2300      	movs	r3, #0
 800570e:	9300      	str	r3, [sp, #0]
 8005710:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005714:	68f8      	ldr	r0, [r7, #12]
 8005716:	f000 fbeb 	bl	8005ef0 <I2C_TransferConfig>
 800571a:	e00f      	b.n	800573c <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005720:	b29a      	uxth	r2, r3
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800572a:	b2da      	uxtb	r2, r3
 800572c:	8979      	ldrh	r1, [r7, #10]
 800572e:	2300      	movs	r3, #0
 8005730:	9300      	str	r3, [sp, #0]
 8005732:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005736:	68f8      	ldr	r0, [r7, #12]
 8005738:	f000 fbda 	bl	8005ef0 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005740:	b29b      	uxth	r3, r3
 8005742:	2b00      	cmp	r3, #0
 8005744:	d19e      	bne.n	8005684 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005746:	697a      	ldr	r2, [r7, #20]
 8005748:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800574a:	68f8      	ldr	r0, [r7, #12]
 800574c:	f000 faac 	bl	8005ca8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8005750:	4603      	mov	r3, r0
 8005752:	2b00      	cmp	r3, #0
 8005754:	d001      	beq.n	800575a <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8005756:	2301      	movs	r3, #1
 8005758:	e01a      	b.n	8005790 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	2220      	movs	r2, #32
 8005760:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	6859      	ldr	r1, [r3, #4]
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	681a      	ldr	r2, [r3, #0]
 800576c:	4b0a      	ldr	r3, [pc, #40]	@ (8005798 <HAL_I2C_Mem_Write+0x224>)
 800576e:	400b      	ands	r3, r1
 8005770:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	2220      	movs	r2, #32
 8005776:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	2200      	movs	r2, #0
 800577e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	2200      	movs	r2, #0
 8005786:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800578a:	2300      	movs	r3, #0
 800578c:	e000      	b.n	8005790 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800578e:	2302      	movs	r3, #2
  }
}
 8005790:	4618      	mov	r0, r3
 8005792:	3718      	adds	r7, #24
 8005794:	46bd      	mov	sp, r7
 8005796:	bd80      	pop	{r7, pc}
 8005798:	fe00e800 	.word	0xfe00e800

0800579c <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800579c:	b580      	push	{r7, lr}
 800579e:	b088      	sub	sp, #32
 80057a0:	af02      	add	r7, sp, #8
 80057a2:	60f8      	str	r0, [r7, #12]
 80057a4:	4608      	mov	r0, r1
 80057a6:	4611      	mov	r1, r2
 80057a8:	461a      	mov	r2, r3
 80057aa:	4603      	mov	r3, r0
 80057ac:	817b      	strh	r3, [r7, #10]
 80057ae:	460b      	mov	r3, r1
 80057b0:	813b      	strh	r3, [r7, #8]
 80057b2:	4613      	mov	r3, r2
 80057b4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80057bc:	b2db      	uxtb	r3, r3
 80057be:	2b20      	cmp	r3, #32
 80057c0:	f040 80fd 	bne.w	80059be <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 80057c4:	6a3b      	ldr	r3, [r7, #32]
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d002      	beq.n	80057d0 <HAL_I2C_Mem_Read+0x34>
 80057ca:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d105      	bne.n	80057dc <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80057d6:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 80057d8:	2301      	movs	r3, #1
 80057da:	e0f1      	b.n	80059c0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80057e2:	2b01      	cmp	r3, #1
 80057e4:	d101      	bne.n	80057ea <HAL_I2C_Mem_Read+0x4e>
 80057e6:	2302      	movs	r3, #2
 80057e8:	e0ea      	b.n	80059c0 <HAL_I2C_Mem_Read+0x224>
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	2201      	movs	r2, #1
 80057ee:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80057f2:	f7ff f83d 	bl	8004870 <HAL_GetTick>
 80057f6:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80057f8:	697b      	ldr	r3, [r7, #20]
 80057fa:	9300      	str	r3, [sp, #0]
 80057fc:	2319      	movs	r3, #25
 80057fe:	2201      	movs	r2, #1
 8005800:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005804:	68f8      	ldr	r0, [r7, #12]
 8005806:	f000 f9af 	bl	8005b68 <I2C_WaitOnFlagUntilTimeout>
 800580a:	4603      	mov	r3, r0
 800580c:	2b00      	cmp	r3, #0
 800580e:	d001      	beq.n	8005814 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8005810:	2301      	movs	r3, #1
 8005812:	e0d5      	b.n	80059c0 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	2222      	movs	r2, #34	@ 0x22
 8005818:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	2240      	movs	r2, #64	@ 0x40
 8005820:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	2200      	movs	r2, #0
 8005828:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	6a3a      	ldr	r2, [r7, #32]
 800582e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8005834:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	2200      	movs	r2, #0
 800583a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800583c:	88f8      	ldrh	r0, [r7, #6]
 800583e:	893a      	ldrh	r2, [r7, #8]
 8005840:	8979      	ldrh	r1, [r7, #10]
 8005842:	697b      	ldr	r3, [r7, #20]
 8005844:	9301      	str	r3, [sp, #4]
 8005846:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005848:	9300      	str	r3, [sp, #0]
 800584a:	4603      	mov	r3, r0
 800584c:	68f8      	ldr	r0, [r7, #12]
 800584e:	f000 f913 	bl	8005a78 <I2C_RequestMemoryRead>
 8005852:	4603      	mov	r3, r0
 8005854:	2b00      	cmp	r3, #0
 8005856:	d005      	beq.n	8005864 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	2200      	movs	r2, #0
 800585c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8005860:	2301      	movs	r3, #1
 8005862:	e0ad      	b.n	80059c0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005868:	b29b      	uxth	r3, r3
 800586a:	2bff      	cmp	r3, #255	@ 0xff
 800586c:	d90e      	bls.n	800588c <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = 1U;
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	2201      	movs	r2, #1
 8005872:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005878:	b2da      	uxtb	r2, r3
 800587a:	8979      	ldrh	r1, [r7, #10]
 800587c:	4b52      	ldr	r3, [pc, #328]	@ (80059c8 <HAL_I2C_Mem_Read+0x22c>)
 800587e:	9300      	str	r3, [sp, #0]
 8005880:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005884:	68f8      	ldr	r0, [r7, #12]
 8005886:	f000 fb33 	bl	8005ef0 <I2C_TransferConfig>
 800588a:	e00f      	b.n	80058ac <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005890:	b29a      	uxth	r2, r3
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800589a:	b2da      	uxtb	r2, r3
 800589c:	8979      	ldrh	r1, [r7, #10]
 800589e:	4b4a      	ldr	r3, [pc, #296]	@ (80059c8 <HAL_I2C_Mem_Read+0x22c>)
 80058a0:	9300      	str	r3, [sp, #0]
 80058a2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80058a6:	68f8      	ldr	r0, [r7, #12]
 80058a8:	f000 fb22 	bl	8005ef0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80058ac:	697b      	ldr	r3, [r7, #20]
 80058ae:	9300      	str	r3, [sp, #0]
 80058b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80058b2:	2200      	movs	r2, #0
 80058b4:	2104      	movs	r1, #4
 80058b6:	68f8      	ldr	r0, [r7, #12]
 80058b8:	f000 f956 	bl	8005b68 <I2C_WaitOnFlagUntilTimeout>
 80058bc:	4603      	mov	r3, r0
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d001      	beq.n	80058c6 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80058c2:	2301      	movs	r3, #1
 80058c4:	e07c      	b.n	80059c0 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058d0:	b2d2      	uxtb	r2, r2
 80058d2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058d8:	1c5a      	adds	r2, r3, #1
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80058e2:	3b01      	subs	r3, #1
 80058e4:	b29a      	uxth	r2, r3
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80058ee:	b29b      	uxth	r3, r3
 80058f0:	3b01      	subs	r3, #1
 80058f2:	b29a      	uxth	r2, r3
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80058fc:	b29b      	uxth	r3, r3
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d034      	beq.n	800596c <HAL_I2C_Mem_Read+0x1d0>
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005906:	2b00      	cmp	r3, #0
 8005908:	d130      	bne.n	800596c <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800590a:	697b      	ldr	r3, [r7, #20]
 800590c:	9300      	str	r3, [sp, #0]
 800590e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005910:	2200      	movs	r2, #0
 8005912:	2180      	movs	r1, #128	@ 0x80
 8005914:	68f8      	ldr	r0, [r7, #12]
 8005916:	f000 f927 	bl	8005b68 <I2C_WaitOnFlagUntilTimeout>
 800591a:	4603      	mov	r3, r0
 800591c:	2b00      	cmp	r3, #0
 800591e:	d001      	beq.n	8005924 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8005920:	2301      	movs	r3, #1
 8005922:	e04d      	b.n	80059c0 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005928:	b29b      	uxth	r3, r3
 800592a:	2bff      	cmp	r3, #255	@ 0xff
 800592c:	d90e      	bls.n	800594c <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = 1U;
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	2201      	movs	r2, #1
 8005932:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005938:	b2da      	uxtb	r2, r3
 800593a:	8979      	ldrh	r1, [r7, #10]
 800593c:	2300      	movs	r3, #0
 800593e:	9300      	str	r3, [sp, #0]
 8005940:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005944:	68f8      	ldr	r0, [r7, #12]
 8005946:	f000 fad3 	bl	8005ef0 <I2C_TransferConfig>
 800594a:	e00f      	b.n	800596c <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005950:	b29a      	uxth	r2, r3
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800595a:	b2da      	uxtb	r2, r3
 800595c:	8979      	ldrh	r1, [r7, #10]
 800595e:	2300      	movs	r3, #0
 8005960:	9300      	str	r3, [sp, #0]
 8005962:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005966:	68f8      	ldr	r0, [r7, #12]
 8005968:	f000 fac2 	bl	8005ef0 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005970:	b29b      	uxth	r3, r3
 8005972:	2b00      	cmp	r3, #0
 8005974:	d19a      	bne.n	80058ac <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005976:	697a      	ldr	r2, [r7, #20]
 8005978:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800597a:	68f8      	ldr	r0, [r7, #12]
 800597c:	f000 f994 	bl	8005ca8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8005980:	4603      	mov	r3, r0
 8005982:	2b00      	cmp	r3, #0
 8005984:	d001      	beq.n	800598a <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8005986:	2301      	movs	r3, #1
 8005988:	e01a      	b.n	80059c0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	2220      	movs	r2, #32
 8005990:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	6859      	ldr	r1, [r3, #4]
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	681a      	ldr	r2, [r3, #0]
 800599c:	4b0b      	ldr	r3, [pc, #44]	@ (80059cc <HAL_I2C_Mem_Read+0x230>)
 800599e:	400b      	ands	r3, r1
 80059a0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	2220      	movs	r2, #32
 80059a6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	2200      	movs	r2, #0
 80059ae:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	2200      	movs	r2, #0
 80059b6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80059ba:	2300      	movs	r3, #0
 80059bc:	e000      	b.n	80059c0 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 80059be:	2302      	movs	r3, #2
  }
}
 80059c0:	4618      	mov	r0, r3
 80059c2:	3718      	adds	r7, #24
 80059c4:	46bd      	mov	sp, r7
 80059c6:	bd80      	pop	{r7, pc}
 80059c8:	80002400 	.word	0x80002400
 80059cc:	fe00e800 	.word	0xfe00e800

080059d0 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 80059d0:	b580      	push	{r7, lr}
 80059d2:	b086      	sub	sp, #24
 80059d4:	af02      	add	r7, sp, #8
 80059d6:	60f8      	str	r0, [r7, #12]
 80059d8:	4608      	mov	r0, r1
 80059da:	4611      	mov	r1, r2
 80059dc:	461a      	mov	r2, r3
 80059de:	4603      	mov	r3, r0
 80059e0:	817b      	strh	r3, [r7, #10]
 80059e2:	460b      	mov	r3, r1
 80059e4:	813b      	strh	r3, [r7, #8]
 80059e6:	4613      	mov	r3, r2
 80059e8:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80059ea:	88fb      	ldrh	r3, [r7, #6]
 80059ec:	b2da      	uxtb	r2, r3
 80059ee:	8979      	ldrh	r1, [r7, #10]
 80059f0:	4b20      	ldr	r3, [pc, #128]	@ (8005a74 <I2C_RequestMemoryWrite+0xa4>)
 80059f2:	9300      	str	r3, [sp, #0]
 80059f4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80059f8:	68f8      	ldr	r0, [r7, #12]
 80059fa:	f000 fa79 	bl	8005ef0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80059fe:	69fa      	ldr	r2, [r7, #28]
 8005a00:	69b9      	ldr	r1, [r7, #24]
 8005a02:	68f8      	ldr	r0, [r7, #12]
 8005a04:	f000 f909 	bl	8005c1a <I2C_WaitOnTXISFlagUntilTimeout>
 8005a08:	4603      	mov	r3, r0
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d001      	beq.n	8005a12 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8005a0e:	2301      	movs	r3, #1
 8005a10:	e02c      	b.n	8005a6c <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005a12:	88fb      	ldrh	r3, [r7, #6]
 8005a14:	2b01      	cmp	r3, #1
 8005a16:	d105      	bne.n	8005a24 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005a18:	893b      	ldrh	r3, [r7, #8]
 8005a1a:	b2da      	uxtb	r2, r3
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	629a      	str	r2, [r3, #40]	@ 0x28
 8005a22:	e015      	b.n	8005a50 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8005a24:	893b      	ldrh	r3, [r7, #8]
 8005a26:	0a1b      	lsrs	r3, r3, #8
 8005a28:	b29b      	uxth	r3, r3
 8005a2a:	b2da      	uxtb	r2, r3
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005a32:	69fa      	ldr	r2, [r7, #28]
 8005a34:	69b9      	ldr	r1, [r7, #24]
 8005a36:	68f8      	ldr	r0, [r7, #12]
 8005a38:	f000 f8ef 	bl	8005c1a <I2C_WaitOnTXISFlagUntilTimeout>
 8005a3c:	4603      	mov	r3, r0
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d001      	beq.n	8005a46 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8005a42:	2301      	movs	r3, #1
 8005a44:	e012      	b.n	8005a6c <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005a46:	893b      	ldrh	r3, [r7, #8]
 8005a48:	b2da      	uxtb	r2, r3
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8005a50:	69fb      	ldr	r3, [r7, #28]
 8005a52:	9300      	str	r3, [sp, #0]
 8005a54:	69bb      	ldr	r3, [r7, #24]
 8005a56:	2200      	movs	r2, #0
 8005a58:	2180      	movs	r1, #128	@ 0x80
 8005a5a:	68f8      	ldr	r0, [r7, #12]
 8005a5c:	f000 f884 	bl	8005b68 <I2C_WaitOnFlagUntilTimeout>
 8005a60:	4603      	mov	r3, r0
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d001      	beq.n	8005a6a <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8005a66:	2301      	movs	r3, #1
 8005a68:	e000      	b.n	8005a6c <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8005a6a:	2300      	movs	r3, #0
}
 8005a6c:	4618      	mov	r0, r3
 8005a6e:	3710      	adds	r7, #16
 8005a70:	46bd      	mov	sp, r7
 8005a72:	bd80      	pop	{r7, pc}
 8005a74:	80002000 	.word	0x80002000

08005a78 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8005a78:	b580      	push	{r7, lr}
 8005a7a:	b086      	sub	sp, #24
 8005a7c:	af02      	add	r7, sp, #8
 8005a7e:	60f8      	str	r0, [r7, #12]
 8005a80:	4608      	mov	r0, r1
 8005a82:	4611      	mov	r1, r2
 8005a84:	461a      	mov	r2, r3
 8005a86:	4603      	mov	r3, r0
 8005a88:	817b      	strh	r3, [r7, #10]
 8005a8a:	460b      	mov	r3, r1
 8005a8c:	813b      	strh	r3, [r7, #8]
 8005a8e:	4613      	mov	r3, r2
 8005a90:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8005a92:	88fb      	ldrh	r3, [r7, #6]
 8005a94:	b2da      	uxtb	r2, r3
 8005a96:	8979      	ldrh	r1, [r7, #10]
 8005a98:	4b20      	ldr	r3, [pc, #128]	@ (8005b1c <I2C_RequestMemoryRead+0xa4>)
 8005a9a:	9300      	str	r3, [sp, #0]
 8005a9c:	2300      	movs	r3, #0
 8005a9e:	68f8      	ldr	r0, [r7, #12]
 8005aa0:	f000 fa26 	bl	8005ef0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005aa4:	69fa      	ldr	r2, [r7, #28]
 8005aa6:	69b9      	ldr	r1, [r7, #24]
 8005aa8:	68f8      	ldr	r0, [r7, #12]
 8005aaa:	f000 f8b6 	bl	8005c1a <I2C_WaitOnTXISFlagUntilTimeout>
 8005aae:	4603      	mov	r3, r0
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d001      	beq.n	8005ab8 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8005ab4:	2301      	movs	r3, #1
 8005ab6:	e02c      	b.n	8005b12 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005ab8:	88fb      	ldrh	r3, [r7, #6]
 8005aba:	2b01      	cmp	r3, #1
 8005abc:	d105      	bne.n	8005aca <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005abe:	893b      	ldrh	r3, [r7, #8]
 8005ac0:	b2da      	uxtb	r2, r3
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	629a      	str	r2, [r3, #40]	@ 0x28
 8005ac8:	e015      	b.n	8005af6 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8005aca:	893b      	ldrh	r3, [r7, #8]
 8005acc:	0a1b      	lsrs	r3, r3, #8
 8005ace:	b29b      	uxth	r3, r3
 8005ad0:	b2da      	uxtb	r2, r3
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005ad8:	69fa      	ldr	r2, [r7, #28]
 8005ada:	69b9      	ldr	r1, [r7, #24]
 8005adc:	68f8      	ldr	r0, [r7, #12]
 8005ade:	f000 f89c 	bl	8005c1a <I2C_WaitOnTXISFlagUntilTimeout>
 8005ae2:	4603      	mov	r3, r0
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d001      	beq.n	8005aec <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8005ae8:	2301      	movs	r3, #1
 8005aea:	e012      	b.n	8005b12 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005aec:	893b      	ldrh	r3, [r7, #8]
 8005aee:	b2da      	uxtb	r2, r3
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8005af6:	69fb      	ldr	r3, [r7, #28]
 8005af8:	9300      	str	r3, [sp, #0]
 8005afa:	69bb      	ldr	r3, [r7, #24]
 8005afc:	2200      	movs	r2, #0
 8005afe:	2140      	movs	r1, #64	@ 0x40
 8005b00:	68f8      	ldr	r0, [r7, #12]
 8005b02:	f000 f831 	bl	8005b68 <I2C_WaitOnFlagUntilTimeout>
 8005b06:	4603      	mov	r3, r0
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d001      	beq.n	8005b10 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8005b0c:	2301      	movs	r3, #1
 8005b0e:	e000      	b.n	8005b12 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8005b10:	2300      	movs	r3, #0
}
 8005b12:	4618      	mov	r0, r3
 8005b14:	3710      	adds	r7, #16
 8005b16:	46bd      	mov	sp, r7
 8005b18:	bd80      	pop	{r7, pc}
 8005b1a:	bf00      	nop
 8005b1c:	80002000 	.word	0x80002000

08005b20 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8005b20:	b480      	push	{r7}
 8005b22:	b083      	sub	sp, #12
 8005b24:	af00      	add	r7, sp, #0
 8005b26:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	699b      	ldr	r3, [r3, #24]
 8005b2e:	f003 0302 	and.w	r3, r3, #2
 8005b32:	2b02      	cmp	r3, #2
 8005b34:	d103      	bne.n	8005b3e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	2200      	movs	r2, #0
 8005b3c:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	699b      	ldr	r3, [r3, #24]
 8005b44:	f003 0301 	and.w	r3, r3, #1
 8005b48:	2b01      	cmp	r3, #1
 8005b4a:	d007      	beq.n	8005b5c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	699a      	ldr	r2, [r3, #24]
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	f042 0201 	orr.w	r2, r2, #1
 8005b5a:	619a      	str	r2, [r3, #24]
  }
}
 8005b5c:	bf00      	nop
 8005b5e:	370c      	adds	r7, #12
 8005b60:	46bd      	mov	sp, r7
 8005b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b66:	4770      	bx	lr

08005b68 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8005b68:	b580      	push	{r7, lr}
 8005b6a:	b084      	sub	sp, #16
 8005b6c:	af00      	add	r7, sp, #0
 8005b6e:	60f8      	str	r0, [r7, #12]
 8005b70:	60b9      	str	r1, [r7, #8]
 8005b72:	603b      	str	r3, [r7, #0]
 8005b74:	4613      	mov	r3, r2
 8005b76:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005b78:	e03b      	b.n	8005bf2 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005b7a:	69ba      	ldr	r2, [r7, #24]
 8005b7c:	6839      	ldr	r1, [r7, #0]
 8005b7e:	68f8      	ldr	r0, [r7, #12]
 8005b80:	f000 f8d6 	bl	8005d30 <I2C_IsErrorOccurred>
 8005b84:	4603      	mov	r3, r0
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d001      	beq.n	8005b8e <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8005b8a:	2301      	movs	r3, #1
 8005b8c:	e041      	b.n	8005c12 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005b8e:	683b      	ldr	r3, [r7, #0]
 8005b90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b94:	d02d      	beq.n	8005bf2 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005b96:	f7fe fe6b 	bl	8004870 <HAL_GetTick>
 8005b9a:	4602      	mov	r2, r0
 8005b9c:	69bb      	ldr	r3, [r7, #24]
 8005b9e:	1ad3      	subs	r3, r2, r3
 8005ba0:	683a      	ldr	r2, [r7, #0]
 8005ba2:	429a      	cmp	r2, r3
 8005ba4:	d302      	bcc.n	8005bac <I2C_WaitOnFlagUntilTimeout+0x44>
 8005ba6:	683b      	ldr	r3, [r7, #0]
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d122      	bne.n	8005bf2 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	699a      	ldr	r2, [r3, #24]
 8005bb2:	68bb      	ldr	r3, [r7, #8]
 8005bb4:	4013      	ands	r3, r2
 8005bb6:	68ba      	ldr	r2, [r7, #8]
 8005bb8:	429a      	cmp	r2, r3
 8005bba:	bf0c      	ite	eq
 8005bbc:	2301      	moveq	r3, #1
 8005bbe:	2300      	movne	r3, #0
 8005bc0:	b2db      	uxtb	r3, r3
 8005bc2:	461a      	mov	r2, r3
 8005bc4:	79fb      	ldrb	r3, [r7, #7]
 8005bc6:	429a      	cmp	r2, r3
 8005bc8:	d113      	bne.n	8005bf2 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005bce:	f043 0220 	orr.w	r2, r3, #32
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	2220      	movs	r2, #32
 8005bda:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	2200      	movs	r2, #0
 8005be2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	2200      	movs	r2, #0
 8005bea:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8005bee:	2301      	movs	r3, #1
 8005bf0:	e00f      	b.n	8005c12 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	699a      	ldr	r2, [r3, #24]
 8005bf8:	68bb      	ldr	r3, [r7, #8]
 8005bfa:	4013      	ands	r3, r2
 8005bfc:	68ba      	ldr	r2, [r7, #8]
 8005bfe:	429a      	cmp	r2, r3
 8005c00:	bf0c      	ite	eq
 8005c02:	2301      	moveq	r3, #1
 8005c04:	2300      	movne	r3, #0
 8005c06:	b2db      	uxtb	r3, r3
 8005c08:	461a      	mov	r2, r3
 8005c0a:	79fb      	ldrb	r3, [r7, #7]
 8005c0c:	429a      	cmp	r2, r3
 8005c0e:	d0b4      	beq.n	8005b7a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005c10:	2300      	movs	r3, #0
}
 8005c12:	4618      	mov	r0, r3
 8005c14:	3710      	adds	r7, #16
 8005c16:	46bd      	mov	sp, r7
 8005c18:	bd80      	pop	{r7, pc}

08005c1a <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005c1a:	b580      	push	{r7, lr}
 8005c1c:	b084      	sub	sp, #16
 8005c1e:	af00      	add	r7, sp, #0
 8005c20:	60f8      	str	r0, [r7, #12]
 8005c22:	60b9      	str	r1, [r7, #8]
 8005c24:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005c26:	e033      	b.n	8005c90 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005c28:	687a      	ldr	r2, [r7, #4]
 8005c2a:	68b9      	ldr	r1, [r7, #8]
 8005c2c:	68f8      	ldr	r0, [r7, #12]
 8005c2e:	f000 f87f 	bl	8005d30 <I2C_IsErrorOccurred>
 8005c32:	4603      	mov	r3, r0
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d001      	beq.n	8005c3c <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005c38:	2301      	movs	r3, #1
 8005c3a:	e031      	b.n	8005ca0 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005c3c:	68bb      	ldr	r3, [r7, #8]
 8005c3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c42:	d025      	beq.n	8005c90 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005c44:	f7fe fe14 	bl	8004870 <HAL_GetTick>
 8005c48:	4602      	mov	r2, r0
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	1ad3      	subs	r3, r2, r3
 8005c4e:	68ba      	ldr	r2, [r7, #8]
 8005c50:	429a      	cmp	r2, r3
 8005c52:	d302      	bcc.n	8005c5a <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8005c54:	68bb      	ldr	r3, [r7, #8]
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d11a      	bne.n	8005c90 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	699b      	ldr	r3, [r3, #24]
 8005c60:	f003 0302 	and.w	r3, r3, #2
 8005c64:	2b02      	cmp	r3, #2
 8005c66:	d013      	beq.n	8005c90 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005c6c:	f043 0220 	orr.w	r2, r3, #32
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	2220      	movs	r2, #32
 8005c78:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	2200      	movs	r2, #0
 8005c80:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	2200      	movs	r2, #0
 8005c88:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8005c8c:	2301      	movs	r3, #1
 8005c8e:	e007      	b.n	8005ca0 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	699b      	ldr	r3, [r3, #24]
 8005c96:	f003 0302 	and.w	r3, r3, #2
 8005c9a:	2b02      	cmp	r3, #2
 8005c9c:	d1c4      	bne.n	8005c28 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8005c9e:	2300      	movs	r3, #0
}
 8005ca0:	4618      	mov	r0, r3
 8005ca2:	3710      	adds	r7, #16
 8005ca4:	46bd      	mov	sp, r7
 8005ca6:	bd80      	pop	{r7, pc}

08005ca8 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005ca8:	b580      	push	{r7, lr}
 8005caa:	b084      	sub	sp, #16
 8005cac:	af00      	add	r7, sp, #0
 8005cae:	60f8      	str	r0, [r7, #12]
 8005cb0:	60b9      	str	r1, [r7, #8]
 8005cb2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005cb4:	e02f      	b.n	8005d16 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005cb6:	687a      	ldr	r2, [r7, #4]
 8005cb8:	68b9      	ldr	r1, [r7, #8]
 8005cba:	68f8      	ldr	r0, [r7, #12]
 8005cbc:	f000 f838 	bl	8005d30 <I2C_IsErrorOccurred>
 8005cc0:	4603      	mov	r3, r0
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d001      	beq.n	8005cca <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005cc6:	2301      	movs	r3, #1
 8005cc8:	e02d      	b.n	8005d26 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005cca:	f7fe fdd1 	bl	8004870 <HAL_GetTick>
 8005cce:	4602      	mov	r2, r0
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	1ad3      	subs	r3, r2, r3
 8005cd4:	68ba      	ldr	r2, [r7, #8]
 8005cd6:	429a      	cmp	r2, r3
 8005cd8:	d302      	bcc.n	8005ce0 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8005cda:	68bb      	ldr	r3, [r7, #8]
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d11a      	bne.n	8005d16 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	699b      	ldr	r3, [r3, #24]
 8005ce6:	f003 0320 	and.w	r3, r3, #32
 8005cea:	2b20      	cmp	r3, #32
 8005cec:	d013      	beq.n	8005d16 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005cf2:	f043 0220 	orr.w	r2, r3, #32
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	2220      	movs	r2, #32
 8005cfe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	2200      	movs	r2, #0
 8005d06:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	2200      	movs	r2, #0
 8005d0e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8005d12:	2301      	movs	r3, #1
 8005d14:	e007      	b.n	8005d26 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	699b      	ldr	r3, [r3, #24]
 8005d1c:	f003 0320 	and.w	r3, r3, #32
 8005d20:	2b20      	cmp	r3, #32
 8005d22:	d1c8      	bne.n	8005cb6 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005d24:	2300      	movs	r3, #0
}
 8005d26:	4618      	mov	r0, r3
 8005d28:	3710      	adds	r7, #16
 8005d2a:	46bd      	mov	sp, r7
 8005d2c:	bd80      	pop	{r7, pc}
	...

08005d30 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005d30:	b580      	push	{r7, lr}
 8005d32:	b08a      	sub	sp, #40	@ 0x28
 8005d34:	af00      	add	r7, sp, #0
 8005d36:	60f8      	str	r0, [r7, #12]
 8005d38:	60b9      	str	r1, [r7, #8]
 8005d3a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005d3c:	2300      	movs	r3, #0
 8005d3e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	699b      	ldr	r3, [r3, #24]
 8005d48:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8005d4a:	2300      	movs	r3, #0
 8005d4c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8005d52:	69bb      	ldr	r3, [r7, #24]
 8005d54:	f003 0310 	and.w	r3, r3, #16
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d068      	beq.n	8005e2e <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	2210      	movs	r2, #16
 8005d62:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005d64:	e049      	b.n	8005dfa <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8005d66:	68bb      	ldr	r3, [r7, #8]
 8005d68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d6c:	d045      	beq.n	8005dfa <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8005d6e:	f7fe fd7f 	bl	8004870 <HAL_GetTick>
 8005d72:	4602      	mov	r2, r0
 8005d74:	69fb      	ldr	r3, [r7, #28]
 8005d76:	1ad3      	subs	r3, r2, r3
 8005d78:	68ba      	ldr	r2, [r7, #8]
 8005d7a:	429a      	cmp	r2, r3
 8005d7c:	d302      	bcc.n	8005d84 <I2C_IsErrorOccurred+0x54>
 8005d7e:	68bb      	ldr	r3, [r7, #8]
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d13a      	bne.n	8005dfa <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	685b      	ldr	r3, [r3, #4]
 8005d8a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005d8e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005d96:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	699b      	ldr	r3, [r3, #24]
 8005d9e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005da2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005da6:	d121      	bne.n	8005dec <I2C_IsErrorOccurred+0xbc>
 8005da8:	697b      	ldr	r3, [r7, #20]
 8005daa:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005dae:	d01d      	beq.n	8005dec <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8005db0:	7cfb      	ldrb	r3, [r7, #19]
 8005db2:	2b20      	cmp	r3, #32
 8005db4:	d01a      	beq.n	8005dec <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	685a      	ldr	r2, [r3, #4]
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005dc4:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8005dc6:	f7fe fd53 	bl	8004870 <HAL_GetTick>
 8005dca:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005dcc:	e00e      	b.n	8005dec <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8005dce:	f7fe fd4f 	bl	8004870 <HAL_GetTick>
 8005dd2:	4602      	mov	r2, r0
 8005dd4:	69fb      	ldr	r3, [r7, #28]
 8005dd6:	1ad3      	subs	r3, r2, r3
 8005dd8:	2b19      	cmp	r3, #25
 8005dda:	d907      	bls.n	8005dec <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8005ddc:	6a3b      	ldr	r3, [r7, #32]
 8005dde:	f043 0320 	orr.w	r3, r3, #32
 8005de2:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8005de4:	2301      	movs	r3, #1
 8005de6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8005dea:	e006      	b.n	8005dfa <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	699b      	ldr	r3, [r3, #24]
 8005df2:	f003 0320 	and.w	r3, r3, #32
 8005df6:	2b20      	cmp	r3, #32
 8005df8:	d1e9      	bne.n	8005dce <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	699b      	ldr	r3, [r3, #24]
 8005e00:	f003 0320 	and.w	r3, r3, #32
 8005e04:	2b20      	cmp	r3, #32
 8005e06:	d003      	beq.n	8005e10 <I2C_IsErrorOccurred+0xe0>
 8005e08:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d0aa      	beq.n	8005d66 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8005e10:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d103      	bne.n	8005e20 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	2220      	movs	r2, #32
 8005e1e:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8005e20:	6a3b      	ldr	r3, [r7, #32]
 8005e22:	f043 0304 	orr.w	r3, r3, #4
 8005e26:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8005e28:	2301      	movs	r3, #1
 8005e2a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	699b      	ldr	r3, [r3, #24]
 8005e34:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8005e36:	69bb      	ldr	r3, [r7, #24]
 8005e38:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d00b      	beq.n	8005e58 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8005e40:	6a3b      	ldr	r3, [r7, #32]
 8005e42:	f043 0301 	orr.w	r3, r3, #1
 8005e46:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005e50:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005e52:	2301      	movs	r3, #1
 8005e54:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8005e58:	69bb      	ldr	r3, [r7, #24]
 8005e5a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d00b      	beq.n	8005e7a <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8005e62:	6a3b      	ldr	r3, [r7, #32]
 8005e64:	f043 0308 	orr.w	r3, r3, #8
 8005e68:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8005e72:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005e74:	2301      	movs	r3, #1
 8005e76:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8005e7a:	69bb      	ldr	r3, [r7, #24]
 8005e7c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d00b      	beq.n	8005e9c <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8005e84:	6a3b      	ldr	r3, [r7, #32]
 8005e86:	f043 0302 	orr.w	r3, r3, #2
 8005e8a:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005e94:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005e96:	2301      	movs	r3, #1
 8005e98:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8005e9c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d01c      	beq.n	8005ede <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8005ea4:	68f8      	ldr	r0, [r7, #12]
 8005ea6:	f7ff fe3b 	bl	8005b20 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	6859      	ldr	r1, [r3, #4]
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	681a      	ldr	r2, [r3, #0]
 8005eb4:	4b0d      	ldr	r3, [pc, #52]	@ (8005eec <I2C_IsErrorOccurred+0x1bc>)
 8005eb6:	400b      	ands	r3, r1
 8005eb8:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005ebe:	6a3b      	ldr	r3, [r7, #32]
 8005ec0:	431a      	orrs	r2, r3
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	2220      	movs	r2, #32
 8005eca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	2200      	movs	r2, #0
 8005ed2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	2200      	movs	r2, #0
 8005eda:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8005ede:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8005ee2:	4618      	mov	r0, r3
 8005ee4:	3728      	adds	r7, #40	@ 0x28
 8005ee6:	46bd      	mov	sp, r7
 8005ee8:	bd80      	pop	{r7, pc}
 8005eea:	bf00      	nop
 8005eec:	fe00e800 	.word	0xfe00e800

08005ef0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8005ef0:	b480      	push	{r7}
 8005ef2:	b087      	sub	sp, #28
 8005ef4:	af00      	add	r7, sp, #0
 8005ef6:	60f8      	str	r0, [r7, #12]
 8005ef8:	607b      	str	r3, [r7, #4]
 8005efa:	460b      	mov	r3, r1
 8005efc:	817b      	strh	r3, [r7, #10]
 8005efe:	4613      	mov	r3, r2
 8005f00:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005f02:	897b      	ldrh	r3, [r7, #10]
 8005f04:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8005f08:	7a7b      	ldrb	r3, [r7, #9]
 8005f0a:	041b      	lsls	r3, r3, #16
 8005f0c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005f10:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005f16:	6a3b      	ldr	r3, [r7, #32]
 8005f18:	4313      	orrs	r3, r2
 8005f1a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8005f1e:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	685a      	ldr	r2, [r3, #4]
 8005f26:	6a3b      	ldr	r3, [r7, #32]
 8005f28:	0d5b      	lsrs	r3, r3, #21
 8005f2a:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8005f2e:	4b08      	ldr	r3, [pc, #32]	@ (8005f50 <I2C_TransferConfig+0x60>)
 8005f30:	430b      	orrs	r3, r1
 8005f32:	43db      	mvns	r3, r3
 8005f34:	ea02 0103 	and.w	r1, r2, r3
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	697a      	ldr	r2, [r7, #20]
 8005f3e:	430a      	orrs	r2, r1
 8005f40:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8005f42:	bf00      	nop
 8005f44:	371c      	adds	r7, #28
 8005f46:	46bd      	mov	sp, r7
 8005f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f4c:	4770      	bx	lr
 8005f4e:	bf00      	nop
 8005f50:	03ff63ff 	.word	0x03ff63ff

08005f54 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005f54:	b480      	push	{r7}
 8005f56:	b083      	sub	sp, #12
 8005f58:	af00      	add	r7, sp, #0
 8005f5a:	6078      	str	r0, [r7, #4]
 8005f5c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005f64:	b2db      	uxtb	r3, r3
 8005f66:	2b20      	cmp	r3, #32
 8005f68:	d138      	bne.n	8005fdc <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005f70:	2b01      	cmp	r3, #1
 8005f72:	d101      	bne.n	8005f78 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8005f74:	2302      	movs	r3, #2
 8005f76:	e032      	b.n	8005fde <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	2201      	movs	r2, #1
 8005f7c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	2224      	movs	r2, #36	@ 0x24
 8005f84:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	681a      	ldr	r2, [r3, #0]
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	f022 0201 	bic.w	r2, r2, #1
 8005f96:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	681a      	ldr	r2, [r3, #0]
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8005fa6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	6819      	ldr	r1, [r3, #0]
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	683a      	ldr	r2, [r7, #0]
 8005fb4:	430a      	orrs	r2, r1
 8005fb6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	681a      	ldr	r2, [r3, #0]
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	f042 0201 	orr.w	r2, r2, #1
 8005fc6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	2220      	movs	r2, #32
 8005fcc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	2200      	movs	r2, #0
 8005fd4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8005fd8:	2300      	movs	r3, #0
 8005fda:	e000      	b.n	8005fde <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005fdc:	2302      	movs	r3, #2
  }
}
 8005fde:	4618      	mov	r0, r3
 8005fe0:	370c      	adds	r7, #12
 8005fe2:	46bd      	mov	sp, r7
 8005fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fe8:	4770      	bx	lr

08005fea <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005fea:	b480      	push	{r7}
 8005fec:	b085      	sub	sp, #20
 8005fee:	af00      	add	r7, sp, #0
 8005ff0:	6078      	str	r0, [r7, #4]
 8005ff2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005ffa:	b2db      	uxtb	r3, r3
 8005ffc:	2b20      	cmp	r3, #32
 8005ffe:	d139      	bne.n	8006074 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006006:	2b01      	cmp	r3, #1
 8006008:	d101      	bne.n	800600e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800600a:	2302      	movs	r3, #2
 800600c:	e033      	b.n	8006076 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	2201      	movs	r2, #1
 8006012:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	2224      	movs	r2, #36	@ 0x24
 800601a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	681a      	ldr	r2, [r3, #0]
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	f022 0201 	bic.w	r2, r2, #1
 800602c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800603c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800603e:	683b      	ldr	r3, [r7, #0]
 8006040:	021b      	lsls	r3, r3, #8
 8006042:	68fa      	ldr	r2, [r7, #12]
 8006044:	4313      	orrs	r3, r2
 8006046:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	68fa      	ldr	r2, [r7, #12]
 800604e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	681a      	ldr	r2, [r3, #0]
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	f042 0201 	orr.w	r2, r2, #1
 800605e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	2220      	movs	r2, #32
 8006064:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	2200      	movs	r2, #0
 800606c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8006070:	2300      	movs	r3, #0
 8006072:	e000      	b.n	8006076 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8006074:	2302      	movs	r3, #2
  }
}
 8006076:	4618      	mov	r0, r3
 8006078:	3714      	adds	r7, #20
 800607a:	46bd      	mov	sp, r7
 800607c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006080:	4770      	bx	lr

08006082 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8006082:	b580      	push	{r7, lr}
 8006084:	b086      	sub	sp, #24
 8006086:	af02      	add	r7, sp, #8
 8006088:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	2b00      	cmp	r3, #0
 800608e:	d101      	bne.n	8006094 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8006090:	2301      	movs	r3, #1
 8006092:	e101      	b.n	8006298 <HAL_PCD_Init+0x216>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 800609a:	b2db      	uxtb	r3, r3
 800609c:	2b00      	cmp	r3, #0
 800609e:	d106      	bne.n	80060ae <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	2200      	movs	r2, #0
 80060a4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80060a8:	6878      	ldr	r0, [r7, #4]
 80060aa:	f7fd fbc5 	bl	8003838 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	2203      	movs	r2, #3
 80060b2:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Disable DMA mode for FS instance */
  hpcd->Init.dma_enable = 0U;
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	2200      	movs	r2, #0
 80060ba:	719a      	strb	r2, [r3, #6]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	4618      	mov	r0, r3
 80060c2:	f002 ff33 	bl	8008f2c <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	6818      	ldr	r0, [r3, #0]
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	7c1a      	ldrb	r2, [r3, #16]
 80060ce:	f88d 2000 	strb.w	r2, [sp]
 80060d2:	3304      	adds	r3, #4
 80060d4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80060d6:	f002 fefc 	bl	8008ed2 <USB_CoreInit>
 80060da:	4603      	mov	r3, r0
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d005      	beq.n	80060ec <HAL_PCD_Init+0x6a>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	2202      	movs	r2, #2
 80060e4:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80060e8:	2301      	movs	r3, #1
 80060ea:	e0d5      	b.n	8006298 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	2100      	movs	r1, #0
 80060f2:	4618      	mov	r0, r3
 80060f4:	f002 ff2b 	bl	8008f4e <USB_SetCurrentMode>
 80060f8:	4603      	mov	r3, r0
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d005      	beq.n	800610a <HAL_PCD_Init+0x88>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	2202      	movs	r2, #2
 8006102:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8006106:	2301      	movs	r3, #1
 8006108:	e0c6      	b.n	8006298 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800610a:	2300      	movs	r3, #0
 800610c:	73fb      	strb	r3, [r7, #15]
 800610e:	e04a      	b.n	80061a6 <HAL_PCD_Init+0x124>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8006110:	7bfa      	ldrb	r2, [r7, #15]
 8006112:	6879      	ldr	r1, [r7, #4]
 8006114:	4613      	mov	r3, r2
 8006116:	00db      	lsls	r3, r3, #3
 8006118:	4413      	add	r3, r2
 800611a:	009b      	lsls	r3, r3, #2
 800611c:	440b      	add	r3, r1
 800611e:	3315      	adds	r3, #21
 8006120:	2201      	movs	r2, #1
 8006122:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8006124:	7bfa      	ldrb	r2, [r7, #15]
 8006126:	6879      	ldr	r1, [r7, #4]
 8006128:	4613      	mov	r3, r2
 800612a:	00db      	lsls	r3, r3, #3
 800612c:	4413      	add	r3, r2
 800612e:	009b      	lsls	r3, r3, #2
 8006130:	440b      	add	r3, r1
 8006132:	3314      	adds	r3, #20
 8006134:	7bfa      	ldrb	r2, [r7, #15]
 8006136:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
 8006138:	7bfa      	ldrb	r2, [r7, #15]
 800613a:	7bfb      	ldrb	r3, [r7, #15]
 800613c:	b298      	uxth	r0, r3
 800613e:	6879      	ldr	r1, [r7, #4]
 8006140:	4613      	mov	r3, r2
 8006142:	00db      	lsls	r3, r3, #3
 8006144:	4413      	add	r3, r2
 8006146:	009b      	lsls	r3, r3, #2
 8006148:	440b      	add	r3, r1
 800614a:	332e      	adds	r3, #46	@ 0x2e
 800614c:	4602      	mov	r2, r0
 800614e:	801a      	strh	r2, [r3, #0]
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8006150:	7bfa      	ldrb	r2, [r7, #15]
 8006152:	6879      	ldr	r1, [r7, #4]
 8006154:	4613      	mov	r3, r2
 8006156:	00db      	lsls	r3, r3, #3
 8006158:	4413      	add	r3, r2
 800615a:	009b      	lsls	r3, r3, #2
 800615c:	440b      	add	r3, r1
 800615e:	3318      	adds	r3, #24
 8006160:	2200      	movs	r2, #0
 8006162:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8006164:	7bfa      	ldrb	r2, [r7, #15]
 8006166:	6879      	ldr	r1, [r7, #4]
 8006168:	4613      	mov	r3, r2
 800616a:	00db      	lsls	r3, r3, #3
 800616c:	4413      	add	r3, r2
 800616e:	009b      	lsls	r3, r3, #2
 8006170:	440b      	add	r3, r1
 8006172:	331c      	adds	r3, #28
 8006174:	2200      	movs	r2, #0
 8006176:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8006178:	7bfa      	ldrb	r2, [r7, #15]
 800617a:	6879      	ldr	r1, [r7, #4]
 800617c:	4613      	mov	r3, r2
 800617e:	00db      	lsls	r3, r3, #3
 8006180:	4413      	add	r3, r2
 8006182:	009b      	lsls	r3, r3, #2
 8006184:	440b      	add	r3, r1
 8006186:	3320      	adds	r3, #32
 8006188:	2200      	movs	r2, #0
 800618a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800618c:	7bfa      	ldrb	r2, [r7, #15]
 800618e:	6879      	ldr	r1, [r7, #4]
 8006190:	4613      	mov	r3, r2
 8006192:	00db      	lsls	r3, r3, #3
 8006194:	4413      	add	r3, r2
 8006196:	009b      	lsls	r3, r3, #2
 8006198:	440b      	add	r3, r1
 800619a:	3324      	adds	r3, #36	@ 0x24
 800619c:	2200      	movs	r2, #0
 800619e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80061a0:	7bfb      	ldrb	r3, [r7, #15]
 80061a2:	3301      	adds	r3, #1
 80061a4:	73fb      	strb	r3, [r7, #15]
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	791b      	ldrb	r3, [r3, #4]
 80061aa:	7bfa      	ldrb	r2, [r7, #15]
 80061ac:	429a      	cmp	r2, r3
 80061ae:	d3af      	bcc.n	8006110 <HAL_PCD_Init+0x8e>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80061b0:	2300      	movs	r3, #0
 80061b2:	73fb      	strb	r3, [r7, #15]
 80061b4:	e044      	b.n	8006240 <HAL_PCD_Init+0x1be>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80061b6:	7bfa      	ldrb	r2, [r7, #15]
 80061b8:	6879      	ldr	r1, [r7, #4]
 80061ba:	4613      	mov	r3, r2
 80061bc:	00db      	lsls	r3, r3, #3
 80061be:	4413      	add	r3, r2
 80061c0:	009b      	lsls	r3, r3, #2
 80061c2:	440b      	add	r3, r1
 80061c4:	f203 2355 	addw	r3, r3, #597	@ 0x255
 80061c8:	2200      	movs	r2, #0
 80061ca:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80061cc:	7bfa      	ldrb	r2, [r7, #15]
 80061ce:	6879      	ldr	r1, [r7, #4]
 80061d0:	4613      	mov	r3, r2
 80061d2:	00db      	lsls	r3, r3, #3
 80061d4:	4413      	add	r3, r2
 80061d6:	009b      	lsls	r3, r3, #2
 80061d8:	440b      	add	r3, r1
 80061da:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 80061de:	7bfa      	ldrb	r2, [r7, #15]
 80061e0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80061e2:	7bfa      	ldrb	r2, [r7, #15]
 80061e4:	6879      	ldr	r1, [r7, #4]
 80061e6:	4613      	mov	r3, r2
 80061e8:	00db      	lsls	r3, r3, #3
 80061ea:	4413      	add	r3, r2
 80061ec:	009b      	lsls	r3, r3, #2
 80061ee:	440b      	add	r3, r1
 80061f0:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80061f4:	2200      	movs	r2, #0
 80061f6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80061f8:	7bfa      	ldrb	r2, [r7, #15]
 80061fa:	6879      	ldr	r1, [r7, #4]
 80061fc:	4613      	mov	r3, r2
 80061fe:	00db      	lsls	r3, r3, #3
 8006200:	4413      	add	r3, r2
 8006202:	009b      	lsls	r3, r3, #2
 8006204:	440b      	add	r3, r1
 8006206:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 800620a:	2200      	movs	r2, #0
 800620c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800620e:	7bfa      	ldrb	r2, [r7, #15]
 8006210:	6879      	ldr	r1, [r7, #4]
 8006212:	4613      	mov	r3, r2
 8006214:	00db      	lsls	r3, r3, #3
 8006216:	4413      	add	r3, r2
 8006218:	009b      	lsls	r3, r3, #2
 800621a:	440b      	add	r3, r1
 800621c:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8006220:	2200      	movs	r2, #0
 8006222:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8006224:	7bfa      	ldrb	r2, [r7, #15]
 8006226:	6879      	ldr	r1, [r7, #4]
 8006228:	4613      	mov	r3, r2
 800622a:	00db      	lsls	r3, r3, #3
 800622c:	4413      	add	r3, r2
 800622e:	009b      	lsls	r3, r3, #2
 8006230:	440b      	add	r3, r1
 8006232:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8006236:	2200      	movs	r2, #0
 8006238:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800623a:	7bfb      	ldrb	r3, [r7, #15]
 800623c:	3301      	adds	r3, #1
 800623e:	73fb      	strb	r3, [r7, #15]
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	791b      	ldrb	r3, [r3, #4]
 8006244:	7bfa      	ldrb	r2, [r7, #15]
 8006246:	429a      	cmp	r2, r3
 8006248:	d3b5      	bcc.n	80061b6 <HAL_PCD_Init+0x134>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	6818      	ldr	r0, [r3, #0]
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	7c1a      	ldrb	r2, [r3, #16]
 8006252:	f88d 2000 	strb.w	r2, [sp]
 8006256:	3304      	adds	r3, #4
 8006258:	cb0e      	ldmia	r3, {r1, r2, r3}
 800625a:	f002 fec5 	bl	8008fe8 <USB_DevInit>
 800625e:	4603      	mov	r3, r0
 8006260:	2b00      	cmp	r3, #0
 8006262:	d005      	beq.n	8006270 <HAL_PCD_Init+0x1ee>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	2202      	movs	r2, #2
 8006268:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800626c:	2301      	movs	r3, #1
 800626e:	e013      	b.n	8006298 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	2200      	movs	r2, #0
 8006274:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	2201      	movs	r2, #1
 800627a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	7b1b      	ldrb	r3, [r3, #12]
 8006282:	2b01      	cmp	r3, #1
 8006284:	d102      	bne.n	800628c <HAL_PCD_Init+0x20a>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8006286:	6878      	ldr	r0, [r7, #4]
 8006288:	f000 f80a 	bl	80062a0 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	4618      	mov	r0, r3
 8006292:	f003 f86a 	bl	800936a <USB_DevDisconnect>

  return HAL_OK;
 8006296:	2300      	movs	r3, #0
}
 8006298:	4618      	mov	r0, r3
 800629a:	3710      	adds	r7, #16
 800629c:	46bd      	mov	sp, r7
 800629e:	bd80      	pop	{r7, pc}

080062a0 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80062a0:	b480      	push	{r7}
 80062a2:	b085      	sub	sp, #20
 80062a4:	af00      	add	r7, sp, #0
 80062a6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	2201      	movs	r2, #1
 80062b2:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	2200      	movs	r2, #0
 80062ba:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	699b      	ldr	r3, [r3, #24]
 80062c2:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80062ce:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80062d2:	f043 0303 	orr.w	r3, r3, #3
 80062d6:	68fa      	ldr	r2, [r7, #12]
 80062d8:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 80062da:	2300      	movs	r3, #0
}
 80062dc:	4618      	mov	r0, r3
 80062de:	3714      	adds	r7, #20
 80062e0:	46bd      	mov	sp, r7
 80062e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062e6:	4770      	bx	lr

080062e8 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80062e8:	b480      	push	{r7}
 80062ea:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80062ec:	4b05      	ldr	r3, [pc, #20]	@ (8006304 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	4a04      	ldr	r2, [pc, #16]	@ (8006304 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80062f2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80062f6:	6013      	str	r3, [r2, #0]
}
 80062f8:	bf00      	nop
 80062fa:	46bd      	mov	sp, r7
 80062fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006300:	4770      	bx	lr
 8006302:	bf00      	nop
 8006304:	40007000 	.word	0x40007000

08006308 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8006308:	b480      	push	{r7}
 800630a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800630c:	4b04      	ldr	r3, [pc, #16]	@ (8006320 <HAL_PWREx_GetVoltageRange+0x18>)
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8006314:	4618      	mov	r0, r3
 8006316:	46bd      	mov	sp, r7
 8006318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800631c:	4770      	bx	lr
 800631e:	bf00      	nop
 8006320:	40007000 	.word	0x40007000

08006324 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8006324:	b480      	push	{r7}
 8006326:	b085      	sub	sp, #20
 8006328:	af00      	add	r7, sp, #0
 800632a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006332:	d130      	bne.n	8006396 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8006334:	4b23      	ldr	r3, [pc, #140]	@ (80063c4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800633c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006340:	d038      	beq.n	80063b4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8006342:	4b20      	ldr	r3, [pc, #128]	@ (80063c4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800634a:	4a1e      	ldr	r2, [pc, #120]	@ (80063c4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800634c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8006350:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8006352:	4b1d      	ldr	r3, [pc, #116]	@ (80063c8 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	2232      	movs	r2, #50	@ 0x32
 8006358:	fb02 f303 	mul.w	r3, r2, r3
 800635c:	4a1b      	ldr	r2, [pc, #108]	@ (80063cc <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800635e:	fba2 2303 	umull	r2, r3, r2, r3
 8006362:	0c9b      	lsrs	r3, r3, #18
 8006364:	3301      	adds	r3, #1
 8006366:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006368:	e002      	b.n	8006370 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	3b01      	subs	r3, #1
 800636e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006370:	4b14      	ldr	r3, [pc, #80]	@ (80063c4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006372:	695b      	ldr	r3, [r3, #20]
 8006374:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006378:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800637c:	d102      	bne.n	8006384 <HAL_PWREx_ControlVoltageScaling+0x60>
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	2b00      	cmp	r3, #0
 8006382:	d1f2      	bne.n	800636a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8006384:	4b0f      	ldr	r3, [pc, #60]	@ (80063c4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006386:	695b      	ldr	r3, [r3, #20]
 8006388:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800638c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006390:	d110      	bne.n	80063b4 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8006392:	2303      	movs	r3, #3
 8006394:	e00f      	b.n	80063b6 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8006396:	4b0b      	ldr	r3, [pc, #44]	@ (80063c4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800639e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80063a2:	d007      	beq.n	80063b4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80063a4:	4b07      	ldr	r3, [pc, #28]	@ (80063c4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80063ac:	4a05      	ldr	r2, [pc, #20]	@ (80063c4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80063ae:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80063b2:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80063b4:	2300      	movs	r3, #0
}
 80063b6:	4618      	mov	r0, r3
 80063b8:	3714      	adds	r7, #20
 80063ba:	46bd      	mov	sp, r7
 80063bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063c0:	4770      	bx	lr
 80063c2:	bf00      	nop
 80063c4:	40007000 	.word	0x40007000
 80063c8:	20000004 	.word	0x20000004
 80063cc:	431bde83 	.word	0x431bde83

080063d0 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 80063d0:	b480      	push	{r7}
 80063d2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 80063d4:	4b05      	ldr	r3, [pc, #20]	@ (80063ec <HAL_PWREx_EnableVddUSB+0x1c>)
 80063d6:	685b      	ldr	r3, [r3, #4]
 80063d8:	4a04      	ldr	r2, [pc, #16]	@ (80063ec <HAL_PWREx_EnableVddUSB+0x1c>)
 80063da:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80063de:	6053      	str	r3, [r2, #4]
}
 80063e0:	bf00      	nop
 80063e2:	46bd      	mov	sp, r7
 80063e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063e8:	4770      	bx	lr
 80063ea:	bf00      	nop
 80063ec:	40007000 	.word	0x40007000

080063f0 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 80063f0:	b580      	push	{r7, lr}
 80063f2:	b086      	sub	sp, #24
 80063f4:	af02      	add	r7, sp, #8
 80063f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 80063f8:	f7fe fa3a 	bl	8004870 <HAL_GetTick>
 80063fc:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	2b00      	cmp	r3, #0
 8006402:	d101      	bne.n	8006408 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8006404:	2301      	movs	r3, #1
 8006406:	e063      	b.n	80064d0 <HAL_QSPI_Init+0xe0>
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }
#endif

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 800640e:	b2db      	uxtb	r3, r3
 8006410:	2b00      	cmp	r3, #0
 8006412:	d10b      	bne.n	800642c <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	2200      	movs	r2, #0
 8006418:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 800641c:	6878      	ldr	r0, [r7, #4]
 800641e:	f7fd f969 	bl	80036f4 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 8006422:	f241 3188 	movw	r1, #5000	@ 0x1388
 8006426:	6878      	ldr	r0, [r7, #4]
 8006428:	f000 f858 	bl	80064dc <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	f423 6170 	bic.w	r1, r3, #3840	@ 0xf00
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	689b      	ldr	r3, [r3, #8]
 800643a:	3b01      	subs	r3, #1
 800643c:	021a      	lsls	r2, r3, #8
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	430a      	orrs	r2, r1
 8006444:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800644a:	9300      	str	r3, [sp, #0]
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	2200      	movs	r2, #0
 8006450:	2120      	movs	r1, #32
 8006452:	6878      	ldr	r0, [r7, #4]
 8006454:	f000 f850 	bl	80064f8 <QSPI_WaitFlagStateUntilTimeout>
 8006458:	4603      	mov	r3, r0
 800645a:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 800645c:	7afb      	ldrb	r3, [r7, #11]
 800645e:	2b00      	cmp	r3, #0
 8006460:	d131      	bne.n	80064c6 <HAL_QSPI_Init+0xd6>
#if defined(QUADSPI_CR_DFM)
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));
#else
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT),
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800646c:	f023 0310 	bic.w	r3, r3, #16
 8006470:	687a      	ldr	r2, [r7, #4]
 8006472:	6852      	ldr	r2, [r2, #4]
 8006474:	0611      	lsls	r1, r2, #24
 8006476:	687a      	ldr	r2, [r7, #4]
 8006478:	68d2      	ldr	r2, [r2, #12]
 800647a:	4311      	orrs	r1, r2
 800647c:	687a      	ldr	r2, [r7, #4]
 800647e:	6812      	ldr	r2, [r2, #0]
 8006480:	430b      	orrs	r3, r1
 8006482:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting));
#endif

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	685a      	ldr	r2, [r3, #4]
 800648a:	4b13      	ldr	r3, [pc, #76]	@ (80064d8 <HAL_QSPI_Init+0xe8>)
 800648c:	4013      	ands	r3, r2
 800648e:	687a      	ldr	r2, [r7, #4]
 8006490:	6912      	ldr	r2, [r2, #16]
 8006492:	0411      	lsls	r1, r2, #16
 8006494:	687a      	ldr	r2, [r7, #4]
 8006496:	6952      	ldr	r2, [r2, #20]
 8006498:	4311      	orrs	r1, r2
 800649a:	687a      	ldr	r2, [r7, #4]
 800649c:	6992      	ldr	r2, [r2, #24]
 800649e:	4311      	orrs	r1, r2
 80064a0:	687a      	ldr	r2, [r7, #4]
 80064a2:	6812      	ldr	r2, [r2, #0]
 80064a4:	430b      	orrs	r3, r1
 80064a6:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	681a      	ldr	r2, [r3, #0]
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	f042 0201 	orr.w	r2, r2, #1
 80064b6:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	2200      	movs	r2, #0
 80064bc:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	2201      	movs	r2, #1
 80064c2:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	2200      	movs	r2, #0
 80064ca:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  /* Return function status */
  return status;
 80064ce:	7afb      	ldrb	r3, [r7, #11]
}
 80064d0:	4618      	mov	r0, r3
 80064d2:	3710      	adds	r7, #16
 80064d4:	46bd      	mov	sp, r7
 80064d6:	bd80      	pop	{r7, pc}
 80064d8:	ffe0f8fe 	.word	0xffe0f8fe

080064dc <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 80064dc:	b480      	push	{r7}
 80064de:	b083      	sub	sp, #12
 80064e0:	af00      	add	r7, sp, #0
 80064e2:	6078      	str	r0, [r7, #4]
 80064e4:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	683a      	ldr	r2, [r7, #0]
 80064ea:	641a      	str	r2, [r3, #64]	@ 0x40
}
 80064ec:	bf00      	nop
 80064ee:	370c      	adds	r7, #12
 80064f0:	46bd      	mov	sp, r7
 80064f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064f6:	4770      	bx	lr

080064f8 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 80064f8:	b580      	push	{r7, lr}
 80064fa:	b084      	sub	sp, #16
 80064fc:	af00      	add	r7, sp, #0
 80064fe:	60f8      	str	r0, [r7, #12]
 8006500:	60b9      	str	r1, [r7, #8]
 8006502:	603b      	str	r3, [r7, #0]
 8006504:	4613      	mov	r3, r2
 8006506:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8006508:	e01a      	b.n	8006540 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800650a:	69bb      	ldr	r3, [r7, #24]
 800650c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006510:	d016      	beq.n	8006540 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006512:	f7fe f9ad 	bl	8004870 <HAL_GetTick>
 8006516:	4602      	mov	r2, r0
 8006518:	683b      	ldr	r3, [r7, #0]
 800651a:	1ad3      	subs	r3, r2, r3
 800651c:	69ba      	ldr	r2, [r7, #24]
 800651e:	429a      	cmp	r2, r3
 8006520:	d302      	bcc.n	8006528 <QSPI_WaitFlagStateUntilTimeout+0x30>
 8006522:	69bb      	ldr	r3, [r7, #24]
 8006524:	2b00      	cmp	r3, #0
 8006526:	d10b      	bne.n	8006540 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	2204      	movs	r2, #4
 800652c:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006534:	f043 0201 	orr.w	r2, r3, #1
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	63da      	str	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800653c:	2301      	movs	r3, #1
 800653e:	e00e      	b.n	800655e <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	689a      	ldr	r2, [r3, #8]
 8006546:	68bb      	ldr	r3, [r7, #8]
 8006548:	4013      	ands	r3, r2
 800654a:	2b00      	cmp	r3, #0
 800654c:	bf14      	ite	ne
 800654e:	2301      	movne	r3, #1
 8006550:	2300      	moveq	r3, #0
 8006552:	b2db      	uxtb	r3, r3
 8006554:	461a      	mov	r2, r3
 8006556:	79fb      	ldrb	r3, [r7, #7]
 8006558:	429a      	cmp	r2, r3
 800655a:	d1d6      	bne.n	800650a <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800655c:	2300      	movs	r3, #0
}
 800655e:	4618      	mov	r0, r3
 8006560:	3710      	adds	r7, #16
 8006562:	46bd      	mov	sp, r7
 8006564:	bd80      	pop	{r7, pc}
	...

08006568 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006568:	b580      	push	{r7, lr}
 800656a:	b088      	sub	sp, #32
 800656c:	af00      	add	r7, sp, #0
 800656e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	2b00      	cmp	r3, #0
 8006574:	d101      	bne.n	800657a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006576:	2301      	movs	r3, #1
 8006578:	e3ca      	b.n	8006d10 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800657a:	4b97      	ldr	r3, [pc, #604]	@ (80067d8 <HAL_RCC_OscConfig+0x270>)
 800657c:	689b      	ldr	r3, [r3, #8]
 800657e:	f003 030c 	and.w	r3, r3, #12
 8006582:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006584:	4b94      	ldr	r3, [pc, #592]	@ (80067d8 <HAL_RCC_OscConfig+0x270>)
 8006586:	68db      	ldr	r3, [r3, #12]
 8006588:	f003 0303 	and.w	r3, r3, #3
 800658c:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	f003 0310 	and.w	r3, r3, #16
 8006596:	2b00      	cmp	r3, #0
 8006598:	f000 80e4 	beq.w	8006764 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800659c:	69bb      	ldr	r3, [r7, #24]
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d007      	beq.n	80065b2 <HAL_RCC_OscConfig+0x4a>
 80065a2:	69bb      	ldr	r3, [r7, #24]
 80065a4:	2b0c      	cmp	r3, #12
 80065a6:	f040 808b 	bne.w	80066c0 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80065aa:	697b      	ldr	r3, [r7, #20]
 80065ac:	2b01      	cmp	r3, #1
 80065ae:	f040 8087 	bne.w	80066c0 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80065b2:	4b89      	ldr	r3, [pc, #548]	@ (80067d8 <HAL_RCC_OscConfig+0x270>)
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	f003 0302 	and.w	r3, r3, #2
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d005      	beq.n	80065ca <HAL_RCC_OscConfig+0x62>
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	699b      	ldr	r3, [r3, #24]
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d101      	bne.n	80065ca <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80065c6:	2301      	movs	r3, #1
 80065c8:	e3a2      	b.n	8006d10 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	6a1a      	ldr	r2, [r3, #32]
 80065ce:	4b82      	ldr	r3, [pc, #520]	@ (80067d8 <HAL_RCC_OscConfig+0x270>)
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	f003 0308 	and.w	r3, r3, #8
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d004      	beq.n	80065e4 <HAL_RCC_OscConfig+0x7c>
 80065da:	4b7f      	ldr	r3, [pc, #508]	@ (80067d8 <HAL_RCC_OscConfig+0x270>)
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80065e2:	e005      	b.n	80065f0 <HAL_RCC_OscConfig+0x88>
 80065e4:	4b7c      	ldr	r3, [pc, #496]	@ (80067d8 <HAL_RCC_OscConfig+0x270>)
 80065e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80065ea:	091b      	lsrs	r3, r3, #4
 80065ec:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80065f0:	4293      	cmp	r3, r2
 80065f2:	d223      	bcs.n	800663c <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	6a1b      	ldr	r3, [r3, #32]
 80065f8:	4618      	mov	r0, r3
 80065fa:	f000 fd55 	bl	80070a8 <RCC_SetFlashLatencyFromMSIRange>
 80065fe:	4603      	mov	r3, r0
 8006600:	2b00      	cmp	r3, #0
 8006602:	d001      	beq.n	8006608 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8006604:	2301      	movs	r3, #1
 8006606:	e383      	b.n	8006d10 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006608:	4b73      	ldr	r3, [pc, #460]	@ (80067d8 <HAL_RCC_OscConfig+0x270>)
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	4a72      	ldr	r2, [pc, #456]	@ (80067d8 <HAL_RCC_OscConfig+0x270>)
 800660e:	f043 0308 	orr.w	r3, r3, #8
 8006612:	6013      	str	r3, [r2, #0]
 8006614:	4b70      	ldr	r3, [pc, #448]	@ (80067d8 <HAL_RCC_OscConfig+0x270>)
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	6a1b      	ldr	r3, [r3, #32]
 8006620:	496d      	ldr	r1, [pc, #436]	@ (80067d8 <HAL_RCC_OscConfig+0x270>)
 8006622:	4313      	orrs	r3, r2
 8006624:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006626:	4b6c      	ldr	r3, [pc, #432]	@ (80067d8 <HAL_RCC_OscConfig+0x270>)
 8006628:	685b      	ldr	r3, [r3, #4]
 800662a:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	69db      	ldr	r3, [r3, #28]
 8006632:	021b      	lsls	r3, r3, #8
 8006634:	4968      	ldr	r1, [pc, #416]	@ (80067d8 <HAL_RCC_OscConfig+0x270>)
 8006636:	4313      	orrs	r3, r2
 8006638:	604b      	str	r3, [r1, #4]
 800663a:	e025      	b.n	8006688 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800663c:	4b66      	ldr	r3, [pc, #408]	@ (80067d8 <HAL_RCC_OscConfig+0x270>)
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	4a65      	ldr	r2, [pc, #404]	@ (80067d8 <HAL_RCC_OscConfig+0x270>)
 8006642:	f043 0308 	orr.w	r3, r3, #8
 8006646:	6013      	str	r3, [r2, #0]
 8006648:	4b63      	ldr	r3, [pc, #396]	@ (80067d8 <HAL_RCC_OscConfig+0x270>)
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	6a1b      	ldr	r3, [r3, #32]
 8006654:	4960      	ldr	r1, [pc, #384]	@ (80067d8 <HAL_RCC_OscConfig+0x270>)
 8006656:	4313      	orrs	r3, r2
 8006658:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800665a:	4b5f      	ldr	r3, [pc, #380]	@ (80067d8 <HAL_RCC_OscConfig+0x270>)
 800665c:	685b      	ldr	r3, [r3, #4]
 800665e:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	69db      	ldr	r3, [r3, #28]
 8006666:	021b      	lsls	r3, r3, #8
 8006668:	495b      	ldr	r1, [pc, #364]	@ (80067d8 <HAL_RCC_OscConfig+0x270>)
 800666a:	4313      	orrs	r3, r2
 800666c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800666e:	69bb      	ldr	r3, [r7, #24]
 8006670:	2b00      	cmp	r3, #0
 8006672:	d109      	bne.n	8006688 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	6a1b      	ldr	r3, [r3, #32]
 8006678:	4618      	mov	r0, r3
 800667a:	f000 fd15 	bl	80070a8 <RCC_SetFlashLatencyFromMSIRange>
 800667e:	4603      	mov	r3, r0
 8006680:	2b00      	cmp	r3, #0
 8006682:	d001      	beq.n	8006688 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8006684:	2301      	movs	r3, #1
 8006686:	e343      	b.n	8006d10 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8006688:	f000 fc4a 	bl	8006f20 <HAL_RCC_GetSysClockFreq>
 800668c:	4602      	mov	r2, r0
 800668e:	4b52      	ldr	r3, [pc, #328]	@ (80067d8 <HAL_RCC_OscConfig+0x270>)
 8006690:	689b      	ldr	r3, [r3, #8]
 8006692:	091b      	lsrs	r3, r3, #4
 8006694:	f003 030f 	and.w	r3, r3, #15
 8006698:	4950      	ldr	r1, [pc, #320]	@ (80067dc <HAL_RCC_OscConfig+0x274>)
 800669a:	5ccb      	ldrb	r3, [r1, r3]
 800669c:	f003 031f 	and.w	r3, r3, #31
 80066a0:	fa22 f303 	lsr.w	r3, r2, r3
 80066a4:	4a4e      	ldr	r2, [pc, #312]	@ (80067e0 <HAL_RCC_OscConfig+0x278>)
 80066a6:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80066a8:	4b4e      	ldr	r3, [pc, #312]	@ (80067e4 <HAL_RCC_OscConfig+0x27c>)
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	4618      	mov	r0, r3
 80066ae:	f7fe f88f 	bl	80047d0 <HAL_InitTick>
 80066b2:	4603      	mov	r3, r0
 80066b4:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80066b6:	7bfb      	ldrb	r3, [r7, #15]
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d052      	beq.n	8006762 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80066bc:	7bfb      	ldrb	r3, [r7, #15]
 80066be:	e327      	b.n	8006d10 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	699b      	ldr	r3, [r3, #24]
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d032      	beq.n	800672e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80066c8:	4b43      	ldr	r3, [pc, #268]	@ (80067d8 <HAL_RCC_OscConfig+0x270>)
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	4a42      	ldr	r2, [pc, #264]	@ (80067d8 <HAL_RCC_OscConfig+0x270>)
 80066ce:	f043 0301 	orr.w	r3, r3, #1
 80066d2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80066d4:	f7fe f8cc 	bl	8004870 <HAL_GetTick>
 80066d8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80066da:	e008      	b.n	80066ee <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80066dc:	f7fe f8c8 	bl	8004870 <HAL_GetTick>
 80066e0:	4602      	mov	r2, r0
 80066e2:	693b      	ldr	r3, [r7, #16]
 80066e4:	1ad3      	subs	r3, r2, r3
 80066e6:	2b02      	cmp	r3, #2
 80066e8:	d901      	bls.n	80066ee <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80066ea:	2303      	movs	r3, #3
 80066ec:	e310      	b.n	8006d10 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80066ee:	4b3a      	ldr	r3, [pc, #232]	@ (80067d8 <HAL_RCC_OscConfig+0x270>)
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	f003 0302 	and.w	r3, r3, #2
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d0f0      	beq.n	80066dc <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80066fa:	4b37      	ldr	r3, [pc, #220]	@ (80067d8 <HAL_RCC_OscConfig+0x270>)
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	4a36      	ldr	r2, [pc, #216]	@ (80067d8 <HAL_RCC_OscConfig+0x270>)
 8006700:	f043 0308 	orr.w	r3, r3, #8
 8006704:	6013      	str	r3, [r2, #0]
 8006706:	4b34      	ldr	r3, [pc, #208]	@ (80067d8 <HAL_RCC_OscConfig+0x270>)
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	6a1b      	ldr	r3, [r3, #32]
 8006712:	4931      	ldr	r1, [pc, #196]	@ (80067d8 <HAL_RCC_OscConfig+0x270>)
 8006714:	4313      	orrs	r3, r2
 8006716:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006718:	4b2f      	ldr	r3, [pc, #188]	@ (80067d8 <HAL_RCC_OscConfig+0x270>)
 800671a:	685b      	ldr	r3, [r3, #4]
 800671c:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	69db      	ldr	r3, [r3, #28]
 8006724:	021b      	lsls	r3, r3, #8
 8006726:	492c      	ldr	r1, [pc, #176]	@ (80067d8 <HAL_RCC_OscConfig+0x270>)
 8006728:	4313      	orrs	r3, r2
 800672a:	604b      	str	r3, [r1, #4]
 800672c:	e01a      	b.n	8006764 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800672e:	4b2a      	ldr	r3, [pc, #168]	@ (80067d8 <HAL_RCC_OscConfig+0x270>)
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	4a29      	ldr	r2, [pc, #164]	@ (80067d8 <HAL_RCC_OscConfig+0x270>)
 8006734:	f023 0301 	bic.w	r3, r3, #1
 8006738:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800673a:	f7fe f899 	bl	8004870 <HAL_GetTick>
 800673e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8006740:	e008      	b.n	8006754 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8006742:	f7fe f895 	bl	8004870 <HAL_GetTick>
 8006746:	4602      	mov	r2, r0
 8006748:	693b      	ldr	r3, [r7, #16]
 800674a:	1ad3      	subs	r3, r2, r3
 800674c:	2b02      	cmp	r3, #2
 800674e:	d901      	bls.n	8006754 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8006750:	2303      	movs	r3, #3
 8006752:	e2dd      	b.n	8006d10 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8006754:	4b20      	ldr	r3, [pc, #128]	@ (80067d8 <HAL_RCC_OscConfig+0x270>)
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	f003 0302 	and.w	r3, r3, #2
 800675c:	2b00      	cmp	r3, #0
 800675e:	d1f0      	bne.n	8006742 <HAL_RCC_OscConfig+0x1da>
 8006760:	e000      	b.n	8006764 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8006762:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	f003 0301 	and.w	r3, r3, #1
 800676c:	2b00      	cmp	r3, #0
 800676e:	d074      	beq.n	800685a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8006770:	69bb      	ldr	r3, [r7, #24]
 8006772:	2b08      	cmp	r3, #8
 8006774:	d005      	beq.n	8006782 <HAL_RCC_OscConfig+0x21a>
 8006776:	69bb      	ldr	r3, [r7, #24]
 8006778:	2b0c      	cmp	r3, #12
 800677a:	d10e      	bne.n	800679a <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800677c:	697b      	ldr	r3, [r7, #20]
 800677e:	2b03      	cmp	r3, #3
 8006780:	d10b      	bne.n	800679a <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006782:	4b15      	ldr	r3, [pc, #84]	@ (80067d8 <HAL_RCC_OscConfig+0x270>)
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800678a:	2b00      	cmp	r3, #0
 800678c:	d064      	beq.n	8006858 <HAL_RCC_OscConfig+0x2f0>
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	685b      	ldr	r3, [r3, #4]
 8006792:	2b00      	cmp	r3, #0
 8006794:	d160      	bne.n	8006858 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8006796:	2301      	movs	r3, #1
 8006798:	e2ba      	b.n	8006d10 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	685b      	ldr	r3, [r3, #4]
 800679e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80067a2:	d106      	bne.n	80067b2 <HAL_RCC_OscConfig+0x24a>
 80067a4:	4b0c      	ldr	r3, [pc, #48]	@ (80067d8 <HAL_RCC_OscConfig+0x270>)
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	4a0b      	ldr	r2, [pc, #44]	@ (80067d8 <HAL_RCC_OscConfig+0x270>)
 80067aa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80067ae:	6013      	str	r3, [r2, #0]
 80067b0:	e026      	b.n	8006800 <HAL_RCC_OscConfig+0x298>
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	685b      	ldr	r3, [r3, #4]
 80067b6:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80067ba:	d115      	bne.n	80067e8 <HAL_RCC_OscConfig+0x280>
 80067bc:	4b06      	ldr	r3, [pc, #24]	@ (80067d8 <HAL_RCC_OscConfig+0x270>)
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	4a05      	ldr	r2, [pc, #20]	@ (80067d8 <HAL_RCC_OscConfig+0x270>)
 80067c2:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80067c6:	6013      	str	r3, [r2, #0]
 80067c8:	4b03      	ldr	r3, [pc, #12]	@ (80067d8 <HAL_RCC_OscConfig+0x270>)
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	4a02      	ldr	r2, [pc, #8]	@ (80067d8 <HAL_RCC_OscConfig+0x270>)
 80067ce:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80067d2:	6013      	str	r3, [r2, #0]
 80067d4:	e014      	b.n	8006800 <HAL_RCC_OscConfig+0x298>
 80067d6:	bf00      	nop
 80067d8:	40021000 	.word	0x40021000
 80067dc:	0800ef98 	.word	0x0800ef98
 80067e0:	20000004 	.word	0x20000004
 80067e4:	20000050 	.word	0x20000050
 80067e8:	4ba0      	ldr	r3, [pc, #640]	@ (8006a6c <HAL_RCC_OscConfig+0x504>)
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	4a9f      	ldr	r2, [pc, #636]	@ (8006a6c <HAL_RCC_OscConfig+0x504>)
 80067ee:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80067f2:	6013      	str	r3, [r2, #0]
 80067f4:	4b9d      	ldr	r3, [pc, #628]	@ (8006a6c <HAL_RCC_OscConfig+0x504>)
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	4a9c      	ldr	r2, [pc, #624]	@ (8006a6c <HAL_RCC_OscConfig+0x504>)
 80067fa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80067fe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	685b      	ldr	r3, [r3, #4]
 8006804:	2b00      	cmp	r3, #0
 8006806:	d013      	beq.n	8006830 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006808:	f7fe f832 	bl	8004870 <HAL_GetTick>
 800680c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800680e:	e008      	b.n	8006822 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006810:	f7fe f82e 	bl	8004870 <HAL_GetTick>
 8006814:	4602      	mov	r2, r0
 8006816:	693b      	ldr	r3, [r7, #16]
 8006818:	1ad3      	subs	r3, r2, r3
 800681a:	2b64      	cmp	r3, #100	@ 0x64
 800681c:	d901      	bls.n	8006822 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800681e:	2303      	movs	r3, #3
 8006820:	e276      	b.n	8006d10 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006822:	4b92      	ldr	r3, [pc, #584]	@ (8006a6c <HAL_RCC_OscConfig+0x504>)
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800682a:	2b00      	cmp	r3, #0
 800682c:	d0f0      	beq.n	8006810 <HAL_RCC_OscConfig+0x2a8>
 800682e:	e014      	b.n	800685a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006830:	f7fe f81e 	bl	8004870 <HAL_GetTick>
 8006834:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006836:	e008      	b.n	800684a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006838:	f7fe f81a 	bl	8004870 <HAL_GetTick>
 800683c:	4602      	mov	r2, r0
 800683e:	693b      	ldr	r3, [r7, #16]
 8006840:	1ad3      	subs	r3, r2, r3
 8006842:	2b64      	cmp	r3, #100	@ 0x64
 8006844:	d901      	bls.n	800684a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8006846:	2303      	movs	r3, #3
 8006848:	e262      	b.n	8006d10 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800684a:	4b88      	ldr	r3, [pc, #544]	@ (8006a6c <HAL_RCC_OscConfig+0x504>)
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006852:	2b00      	cmp	r3, #0
 8006854:	d1f0      	bne.n	8006838 <HAL_RCC_OscConfig+0x2d0>
 8006856:	e000      	b.n	800685a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006858:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	f003 0302 	and.w	r3, r3, #2
 8006862:	2b00      	cmp	r3, #0
 8006864:	d060      	beq.n	8006928 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8006866:	69bb      	ldr	r3, [r7, #24]
 8006868:	2b04      	cmp	r3, #4
 800686a:	d005      	beq.n	8006878 <HAL_RCC_OscConfig+0x310>
 800686c:	69bb      	ldr	r3, [r7, #24]
 800686e:	2b0c      	cmp	r3, #12
 8006870:	d119      	bne.n	80068a6 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8006872:	697b      	ldr	r3, [r7, #20]
 8006874:	2b02      	cmp	r3, #2
 8006876:	d116      	bne.n	80068a6 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006878:	4b7c      	ldr	r3, [pc, #496]	@ (8006a6c <HAL_RCC_OscConfig+0x504>)
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006880:	2b00      	cmp	r3, #0
 8006882:	d005      	beq.n	8006890 <HAL_RCC_OscConfig+0x328>
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	68db      	ldr	r3, [r3, #12]
 8006888:	2b00      	cmp	r3, #0
 800688a:	d101      	bne.n	8006890 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800688c:	2301      	movs	r3, #1
 800688e:	e23f      	b.n	8006d10 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006890:	4b76      	ldr	r3, [pc, #472]	@ (8006a6c <HAL_RCC_OscConfig+0x504>)
 8006892:	685b      	ldr	r3, [r3, #4]
 8006894:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	691b      	ldr	r3, [r3, #16]
 800689c:	061b      	lsls	r3, r3, #24
 800689e:	4973      	ldr	r1, [pc, #460]	@ (8006a6c <HAL_RCC_OscConfig+0x504>)
 80068a0:	4313      	orrs	r3, r2
 80068a2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80068a4:	e040      	b.n	8006928 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	68db      	ldr	r3, [r3, #12]
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d023      	beq.n	80068f6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80068ae:	4b6f      	ldr	r3, [pc, #444]	@ (8006a6c <HAL_RCC_OscConfig+0x504>)
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	4a6e      	ldr	r2, [pc, #440]	@ (8006a6c <HAL_RCC_OscConfig+0x504>)
 80068b4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80068b8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80068ba:	f7fd ffd9 	bl	8004870 <HAL_GetTick>
 80068be:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80068c0:	e008      	b.n	80068d4 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80068c2:	f7fd ffd5 	bl	8004870 <HAL_GetTick>
 80068c6:	4602      	mov	r2, r0
 80068c8:	693b      	ldr	r3, [r7, #16]
 80068ca:	1ad3      	subs	r3, r2, r3
 80068cc:	2b02      	cmp	r3, #2
 80068ce:	d901      	bls.n	80068d4 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80068d0:	2303      	movs	r3, #3
 80068d2:	e21d      	b.n	8006d10 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80068d4:	4b65      	ldr	r3, [pc, #404]	@ (8006a6c <HAL_RCC_OscConfig+0x504>)
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d0f0      	beq.n	80068c2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80068e0:	4b62      	ldr	r3, [pc, #392]	@ (8006a6c <HAL_RCC_OscConfig+0x504>)
 80068e2:	685b      	ldr	r3, [r3, #4]
 80068e4:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	691b      	ldr	r3, [r3, #16]
 80068ec:	061b      	lsls	r3, r3, #24
 80068ee:	495f      	ldr	r1, [pc, #380]	@ (8006a6c <HAL_RCC_OscConfig+0x504>)
 80068f0:	4313      	orrs	r3, r2
 80068f2:	604b      	str	r3, [r1, #4]
 80068f4:	e018      	b.n	8006928 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80068f6:	4b5d      	ldr	r3, [pc, #372]	@ (8006a6c <HAL_RCC_OscConfig+0x504>)
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	4a5c      	ldr	r2, [pc, #368]	@ (8006a6c <HAL_RCC_OscConfig+0x504>)
 80068fc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006900:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006902:	f7fd ffb5 	bl	8004870 <HAL_GetTick>
 8006906:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006908:	e008      	b.n	800691c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800690a:	f7fd ffb1 	bl	8004870 <HAL_GetTick>
 800690e:	4602      	mov	r2, r0
 8006910:	693b      	ldr	r3, [r7, #16]
 8006912:	1ad3      	subs	r3, r2, r3
 8006914:	2b02      	cmp	r3, #2
 8006916:	d901      	bls.n	800691c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8006918:	2303      	movs	r3, #3
 800691a:	e1f9      	b.n	8006d10 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800691c:	4b53      	ldr	r3, [pc, #332]	@ (8006a6c <HAL_RCC_OscConfig+0x504>)
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006924:	2b00      	cmp	r3, #0
 8006926:	d1f0      	bne.n	800690a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	f003 0308 	and.w	r3, r3, #8
 8006930:	2b00      	cmp	r3, #0
 8006932:	d03c      	beq.n	80069ae <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	695b      	ldr	r3, [r3, #20]
 8006938:	2b00      	cmp	r3, #0
 800693a:	d01c      	beq.n	8006976 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800693c:	4b4b      	ldr	r3, [pc, #300]	@ (8006a6c <HAL_RCC_OscConfig+0x504>)
 800693e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006942:	4a4a      	ldr	r2, [pc, #296]	@ (8006a6c <HAL_RCC_OscConfig+0x504>)
 8006944:	f043 0301 	orr.w	r3, r3, #1
 8006948:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800694c:	f7fd ff90 	bl	8004870 <HAL_GetTick>
 8006950:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006952:	e008      	b.n	8006966 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006954:	f7fd ff8c 	bl	8004870 <HAL_GetTick>
 8006958:	4602      	mov	r2, r0
 800695a:	693b      	ldr	r3, [r7, #16]
 800695c:	1ad3      	subs	r3, r2, r3
 800695e:	2b02      	cmp	r3, #2
 8006960:	d901      	bls.n	8006966 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8006962:	2303      	movs	r3, #3
 8006964:	e1d4      	b.n	8006d10 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006966:	4b41      	ldr	r3, [pc, #260]	@ (8006a6c <HAL_RCC_OscConfig+0x504>)
 8006968:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800696c:	f003 0302 	and.w	r3, r3, #2
 8006970:	2b00      	cmp	r3, #0
 8006972:	d0ef      	beq.n	8006954 <HAL_RCC_OscConfig+0x3ec>
 8006974:	e01b      	b.n	80069ae <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006976:	4b3d      	ldr	r3, [pc, #244]	@ (8006a6c <HAL_RCC_OscConfig+0x504>)
 8006978:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800697c:	4a3b      	ldr	r2, [pc, #236]	@ (8006a6c <HAL_RCC_OscConfig+0x504>)
 800697e:	f023 0301 	bic.w	r3, r3, #1
 8006982:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006986:	f7fd ff73 	bl	8004870 <HAL_GetTick>
 800698a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800698c:	e008      	b.n	80069a0 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800698e:	f7fd ff6f 	bl	8004870 <HAL_GetTick>
 8006992:	4602      	mov	r2, r0
 8006994:	693b      	ldr	r3, [r7, #16]
 8006996:	1ad3      	subs	r3, r2, r3
 8006998:	2b02      	cmp	r3, #2
 800699a:	d901      	bls.n	80069a0 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800699c:	2303      	movs	r3, #3
 800699e:	e1b7      	b.n	8006d10 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80069a0:	4b32      	ldr	r3, [pc, #200]	@ (8006a6c <HAL_RCC_OscConfig+0x504>)
 80069a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80069a6:	f003 0302 	and.w	r3, r3, #2
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d1ef      	bne.n	800698e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	f003 0304 	and.w	r3, r3, #4
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	f000 80a6 	beq.w	8006b08 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80069bc:	2300      	movs	r3, #0
 80069be:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80069c0:	4b2a      	ldr	r3, [pc, #168]	@ (8006a6c <HAL_RCC_OscConfig+0x504>)
 80069c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80069c4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d10d      	bne.n	80069e8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80069cc:	4b27      	ldr	r3, [pc, #156]	@ (8006a6c <HAL_RCC_OscConfig+0x504>)
 80069ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80069d0:	4a26      	ldr	r2, [pc, #152]	@ (8006a6c <HAL_RCC_OscConfig+0x504>)
 80069d2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80069d6:	6593      	str	r3, [r2, #88]	@ 0x58
 80069d8:	4b24      	ldr	r3, [pc, #144]	@ (8006a6c <HAL_RCC_OscConfig+0x504>)
 80069da:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80069dc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80069e0:	60bb      	str	r3, [r7, #8]
 80069e2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80069e4:	2301      	movs	r3, #1
 80069e6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80069e8:	4b21      	ldr	r3, [pc, #132]	@ (8006a70 <HAL_RCC_OscConfig+0x508>)
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d118      	bne.n	8006a26 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80069f4:	4b1e      	ldr	r3, [pc, #120]	@ (8006a70 <HAL_RCC_OscConfig+0x508>)
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	4a1d      	ldr	r2, [pc, #116]	@ (8006a70 <HAL_RCC_OscConfig+0x508>)
 80069fa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80069fe:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006a00:	f7fd ff36 	bl	8004870 <HAL_GetTick>
 8006a04:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006a06:	e008      	b.n	8006a1a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006a08:	f7fd ff32 	bl	8004870 <HAL_GetTick>
 8006a0c:	4602      	mov	r2, r0
 8006a0e:	693b      	ldr	r3, [r7, #16]
 8006a10:	1ad3      	subs	r3, r2, r3
 8006a12:	2b02      	cmp	r3, #2
 8006a14:	d901      	bls.n	8006a1a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8006a16:	2303      	movs	r3, #3
 8006a18:	e17a      	b.n	8006d10 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006a1a:	4b15      	ldr	r3, [pc, #84]	@ (8006a70 <HAL_RCC_OscConfig+0x508>)
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d0f0      	beq.n	8006a08 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	689b      	ldr	r3, [r3, #8]
 8006a2a:	2b01      	cmp	r3, #1
 8006a2c:	d108      	bne.n	8006a40 <HAL_RCC_OscConfig+0x4d8>
 8006a2e:	4b0f      	ldr	r3, [pc, #60]	@ (8006a6c <HAL_RCC_OscConfig+0x504>)
 8006a30:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006a34:	4a0d      	ldr	r2, [pc, #52]	@ (8006a6c <HAL_RCC_OscConfig+0x504>)
 8006a36:	f043 0301 	orr.w	r3, r3, #1
 8006a3a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8006a3e:	e029      	b.n	8006a94 <HAL_RCC_OscConfig+0x52c>
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	689b      	ldr	r3, [r3, #8]
 8006a44:	2b05      	cmp	r3, #5
 8006a46:	d115      	bne.n	8006a74 <HAL_RCC_OscConfig+0x50c>
 8006a48:	4b08      	ldr	r3, [pc, #32]	@ (8006a6c <HAL_RCC_OscConfig+0x504>)
 8006a4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006a4e:	4a07      	ldr	r2, [pc, #28]	@ (8006a6c <HAL_RCC_OscConfig+0x504>)
 8006a50:	f043 0304 	orr.w	r3, r3, #4
 8006a54:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8006a58:	4b04      	ldr	r3, [pc, #16]	@ (8006a6c <HAL_RCC_OscConfig+0x504>)
 8006a5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006a5e:	4a03      	ldr	r2, [pc, #12]	@ (8006a6c <HAL_RCC_OscConfig+0x504>)
 8006a60:	f043 0301 	orr.w	r3, r3, #1
 8006a64:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8006a68:	e014      	b.n	8006a94 <HAL_RCC_OscConfig+0x52c>
 8006a6a:	bf00      	nop
 8006a6c:	40021000 	.word	0x40021000
 8006a70:	40007000 	.word	0x40007000
 8006a74:	4b9c      	ldr	r3, [pc, #624]	@ (8006ce8 <HAL_RCC_OscConfig+0x780>)
 8006a76:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006a7a:	4a9b      	ldr	r2, [pc, #620]	@ (8006ce8 <HAL_RCC_OscConfig+0x780>)
 8006a7c:	f023 0301 	bic.w	r3, r3, #1
 8006a80:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8006a84:	4b98      	ldr	r3, [pc, #608]	@ (8006ce8 <HAL_RCC_OscConfig+0x780>)
 8006a86:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006a8a:	4a97      	ldr	r2, [pc, #604]	@ (8006ce8 <HAL_RCC_OscConfig+0x780>)
 8006a8c:	f023 0304 	bic.w	r3, r3, #4
 8006a90:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	689b      	ldr	r3, [r3, #8]
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d016      	beq.n	8006aca <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006a9c:	f7fd fee8 	bl	8004870 <HAL_GetTick>
 8006aa0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006aa2:	e00a      	b.n	8006aba <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006aa4:	f7fd fee4 	bl	8004870 <HAL_GetTick>
 8006aa8:	4602      	mov	r2, r0
 8006aaa:	693b      	ldr	r3, [r7, #16]
 8006aac:	1ad3      	subs	r3, r2, r3
 8006aae:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006ab2:	4293      	cmp	r3, r2
 8006ab4:	d901      	bls.n	8006aba <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8006ab6:	2303      	movs	r3, #3
 8006ab8:	e12a      	b.n	8006d10 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006aba:	4b8b      	ldr	r3, [pc, #556]	@ (8006ce8 <HAL_RCC_OscConfig+0x780>)
 8006abc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006ac0:	f003 0302 	and.w	r3, r3, #2
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d0ed      	beq.n	8006aa4 <HAL_RCC_OscConfig+0x53c>
 8006ac8:	e015      	b.n	8006af6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006aca:	f7fd fed1 	bl	8004870 <HAL_GetTick>
 8006ace:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006ad0:	e00a      	b.n	8006ae8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006ad2:	f7fd fecd 	bl	8004870 <HAL_GetTick>
 8006ad6:	4602      	mov	r2, r0
 8006ad8:	693b      	ldr	r3, [r7, #16]
 8006ada:	1ad3      	subs	r3, r2, r3
 8006adc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006ae0:	4293      	cmp	r3, r2
 8006ae2:	d901      	bls.n	8006ae8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8006ae4:	2303      	movs	r3, #3
 8006ae6:	e113      	b.n	8006d10 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006ae8:	4b7f      	ldr	r3, [pc, #508]	@ (8006ce8 <HAL_RCC_OscConfig+0x780>)
 8006aea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006aee:	f003 0302 	and.w	r3, r3, #2
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	d1ed      	bne.n	8006ad2 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006af6:	7ffb      	ldrb	r3, [r7, #31]
 8006af8:	2b01      	cmp	r3, #1
 8006afa:	d105      	bne.n	8006b08 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006afc:	4b7a      	ldr	r3, [pc, #488]	@ (8006ce8 <HAL_RCC_OscConfig+0x780>)
 8006afe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006b00:	4a79      	ldr	r2, [pc, #484]	@ (8006ce8 <HAL_RCC_OscConfig+0x780>)
 8006b02:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006b06:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	f000 80fe 	beq.w	8006d0e <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b16:	2b02      	cmp	r3, #2
 8006b18:	f040 80d0 	bne.w	8006cbc <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8006b1c:	4b72      	ldr	r3, [pc, #456]	@ (8006ce8 <HAL_RCC_OscConfig+0x780>)
 8006b1e:	68db      	ldr	r3, [r3, #12]
 8006b20:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8006b22:	697b      	ldr	r3, [r7, #20]
 8006b24:	f003 0203 	and.w	r2, r3, #3
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b2c:	429a      	cmp	r2, r3
 8006b2e:	d130      	bne.n	8006b92 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006b30:	697b      	ldr	r3, [r7, #20]
 8006b32:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006b3a:	3b01      	subs	r3, #1
 8006b3c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8006b3e:	429a      	cmp	r2, r3
 8006b40:	d127      	bne.n	8006b92 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006b42:	697b      	ldr	r3, [r7, #20]
 8006b44:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006b4c:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006b4e:	429a      	cmp	r2, r3
 8006b50:	d11f      	bne.n	8006b92 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8006b52:	697b      	ldr	r3, [r7, #20]
 8006b54:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006b58:	687a      	ldr	r2, [r7, #4]
 8006b5a:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8006b5c:	2a07      	cmp	r2, #7
 8006b5e:	bf14      	ite	ne
 8006b60:	2201      	movne	r2, #1
 8006b62:	2200      	moveq	r2, #0
 8006b64:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006b66:	4293      	cmp	r3, r2
 8006b68:	d113      	bne.n	8006b92 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006b6a:	697b      	ldr	r3, [r7, #20]
 8006b6c:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006b74:	085b      	lsrs	r3, r3, #1
 8006b76:	3b01      	subs	r3, #1
 8006b78:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8006b7a:	429a      	cmp	r2, r3
 8006b7c:	d109      	bne.n	8006b92 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8006b7e:	697b      	ldr	r3, [r7, #20]
 8006b80:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006b88:	085b      	lsrs	r3, r3, #1
 8006b8a:	3b01      	subs	r3, #1
 8006b8c:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006b8e:	429a      	cmp	r2, r3
 8006b90:	d06e      	beq.n	8006c70 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8006b92:	69bb      	ldr	r3, [r7, #24]
 8006b94:	2b0c      	cmp	r3, #12
 8006b96:	d069      	beq.n	8006c6c <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8006b98:	4b53      	ldr	r3, [pc, #332]	@ (8006ce8 <HAL_RCC_OscConfig+0x780>)
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d105      	bne.n	8006bb0 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8006ba4:	4b50      	ldr	r3, [pc, #320]	@ (8006ce8 <HAL_RCC_OscConfig+0x780>)
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d001      	beq.n	8006bb4 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8006bb0:	2301      	movs	r3, #1
 8006bb2:	e0ad      	b.n	8006d10 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8006bb4:	4b4c      	ldr	r3, [pc, #304]	@ (8006ce8 <HAL_RCC_OscConfig+0x780>)
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	4a4b      	ldr	r2, [pc, #300]	@ (8006ce8 <HAL_RCC_OscConfig+0x780>)
 8006bba:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006bbe:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8006bc0:	f7fd fe56 	bl	8004870 <HAL_GetTick>
 8006bc4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006bc6:	e008      	b.n	8006bda <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006bc8:	f7fd fe52 	bl	8004870 <HAL_GetTick>
 8006bcc:	4602      	mov	r2, r0
 8006bce:	693b      	ldr	r3, [r7, #16]
 8006bd0:	1ad3      	subs	r3, r2, r3
 8006bd2:	2b02      	cmp	r3, #2
 8006bd4:	d901      	bls.n	8006bda <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8006bd6:	2303      	movs	r3, #3
 8006bd8:	e09a      	b.n	8006d10 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006bda:	4b43      	ldr	r3, [pc, #268]	@ (8006ce8 <HAL_RCC_OscConfig+0x780>)
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d1f0      	bne.n	8006bc8 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006be6:	4b40      	ldr	r3, [pc, #256]	@ (8006ce8 <HAL_RCC_OscConfig+0x780>)
 8006be8:	68da      	ldr	r2, [r3, #12]
 8006bea:	4b40      	ldr	r3, [pc, #256]	@ (8006cec <HAL_RCC_OscConfig+0x784>)
 8006bec:	4013      	ands	r3, r2
 8006bee:	687a      	ldr	r2, [r7, #4]
 8006bf0:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8006bf2:	687a      	ldr	r2, [r7, #4]
 8006bf4:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8006bf6:	3a01      	subs	r2, #1
 8006bf8:	0112      	lsls	r2, r2, #4
 8006bfa:	4311      	orrs	r1, r2
 8006bfc:	687a      	ldr	r2, [r7, #4]
 8006bfe:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8006c00:	0212      	lsls	r2, r2, #8
 8006c02:	4311      	orrs	r1, r2
 8006c04:	687a      	ldr	r2, [r7, #4]
 8006c06:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8006c08:	0852      	lsrs	r2, r2, #1
 8006c0a:	3a01      	subs	r2, #1
 8006c0c:	0552      	lsls	r2, r2, #21
 8006c0e:	4311      	orrs	r1, r2
 8006c10:	687a      	ldr	r2, [r7, #4]
 8006c12:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8006c14:	0852      	lsrs	r2, r2, #1
 8006c16:	3a01      	subs	r2, #1
 8006c18:	0652      	lsls	r2, r2, #25
 8006c1a:	4311      	orrs	r1, r2
 8006c1c:	687a      	ldr	r2, [r7, #4]
 8006c1e:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8006c20:	0912      	lsrs	r2, r2, #4
 8006c22:	0452      	lsls	r2, r2, #17
 8006c24:	430a      	orrs	r2, r1
 8006c26:	4930      	ldr	r1, [pc, #192]	@ (8006ce8 <HAL_RCC_OscConfig+0x780>)
 8006c28:	4313      	orrs	r3, r2
 8006c2a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8006c2c:	4b2e      	ldr	r3, [pc, #184]	@ (8006ce8 <HAL_RCC_OscConfig+0x780>)
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	4a2d      	ldr	r2, [pc, #180]	@ (8006ce8 <HAL_RCC_OscConfig+0x780>)
 8006c32:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006c36:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006c38:	4b2b      	ldr	r3, [pc, #172]	@ (8006ce8 <HAL_RCC_OscConfig+0x780>)
 8006c3a:	68db      	ldr	r3, [r3, #12]
 8006c3c:	4a2a      	ldr	r2, [pc, #168]	@ (8006ce8 <HAL_RCC_OscConfig+0x780>)
 8006c3e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006c42:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8006c44:	f7fd fe14 	bl	8004870 <HAL_GetTick>
 8006c48:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006c4a:	e008      	b.n	8006c5e <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006c4c:	f7fd fe10 	bl	8004870 <HAL_GetTick>
 8006c50:	4602      	mov	r2, r0
 8006c52:	693b      	ldr	r3, [r7, #16]
 8006c54:	1ad3      	subs	r3, r2, r3
 8006c56:	2b02      	cmp	r3, #2
 8006c58:	d901      	bls.n	8006c5e <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8006c5a:	2303      	movs	r3, #3
 8006c5c:	e058      	b.n	8006d10 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006c5e:	4b22      	ldr	r3, [pc, #136]	@ (8006ce8 <HAL_RCC_OscConfig+0x780>)
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d0f0      	beq.n	8006c4c <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8006c6a:	e050      	b.n	8006d0e <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8006c6c:	2301      	movs	r3, #1
 8006c6e:	e04f      	b.n	8006d10 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006c70:	4b1d      	ldr	r3, [pc, #116]	@ (8006ce8 <HAL_RCC_OscConfig+0x780>)
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	d148      	bne.n	8006d0e <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8006c7c:	4b1a      	ldr	r3, [pc, #104]	@ (8006ce8 <HAL_RCC_OscConfig+0x780>)
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	4a19      	ldr	r2, [pc, #100]	@ (8006ce8 <HAL_RCC_OscConfig+0x780>)
 8006c82:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006c86:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006c88:	4b17      	ldr	r3, [pc, #92]	@ (8006ce8 <HAL_RCC_OscConfig+0x780>)
 8006c8a:	68db      	ldr	r3, [r3, #12]
 8006c8c:	4a16      	ldr	r2, [pc, #88]	@ (8006ce8 <HAL_RCC_OscConfig+0x780>)
 8006c8e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006c92:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8006c94:	f7fd fdec 	bl	8004870 <HAL_GetTick>
 8006c98:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006c9a:	e008      	b.n	8006cae <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006c9c:	f7fd fde8 	bl	8004870 <HAL_GetTick>
 8006ca0:	4602      	mov	r2, r0
 8006ca2:	693b      	ldr	r3, [r7, #16]
 8006ca4:	1ad3      	subs	r3, r2, r3
 8006ca6:	2b02      	cmp	r3, #2
 8006ca8:	d901      	bls.n	8006cae <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8006caa:	2303      	movs	r3, #3
 8006cac:	e030      	b.n	8006d10 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006cae:	4b0e      	ldr	r3, [pc, #56]	@ (8006ce8 <HAL_RCC_OscConfig+0x780>)
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d0f0      	beq.n	8006c9c <HAL_RCC_OscConfig+0x734>
 8006cba:	e028      	b.n	8006d0e <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8006cbc:	69bb      	ldr	r3, [r7, #24]
 8006cbe:	2b0c      	cmp	r3, #12
 8006cc0:	d023      	beq.n	8006d0a <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006cc2:	4b09      	ldr	r3, [pc, #36]	@ (8006ce8 <HAL_RCC_OscConfig+0x780>)
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	4a08      	ldr	r2, [pc, #32]	@ (8006ce8 <HAL_RCC_OscConfig+0x780>)
 8006cc8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006ccc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006cce:	f7fd fdcf 	bl	8004870 <HAL_GetTick>
 8006cd2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006cd4:	e00c      	b.n	8006cf0 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006cd6:	f7fd fdcb 	bl	8004870 <HAL_GetTick>
 8006cda:	4602      	mov	r2, r0
 8006cdc:	693b      	ldr	r3, [r7, #16]
 8006cde:	1ad3      	subs	r3, r2, r3
 8006ce0:	2b02      	cmp	r3, #2
 8006ce2:	d905      	bls.n	8006cf0 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8006ce4:	2303      	movs	r3, #3
 8006ce6:	e013      	b.n	8006d10 <HAL_RCC_OscConfig+0x7a8>
 8006ce8:	40021000 	.word	0x40021000
 8006cec:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006cf0:	4b09      	ldr	r3, [pc, #36]	@ (8006d18 <HAL_RCC_OscConfig+0x7b0>)
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	d1ec      	bne.n	8006cd6 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8006cfc:	4b06      	ldr	r3, [pc, #24]	@ (8006d18 <HAL_RCC_OscConfig+0x7b0>)
 8006cfe:	68da      	ldr	r2, [r3, #12]
 8006d00:	4905      	ldr	r1, [pc, #20]	@ (8006d18 <HAL_RCC_OscConfig+0x7b0>)
 8006d02:	4b06      	ldr	r3, [pc, #24]	@ (8006d1c <HAL_RCC_OscConfig+0x7b4>)
 8006d04:	4013      	ands	r3, r2
 8006d06:	60cb      	str	r3, [r1, #12]
 8006d08:	e001      	b.n	8006d0e <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8006d0a:	2301      	movs	r3, #1
 8006d0c:	e000      	b.n	8006d10 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8006d0e:	2300      	movs	r3, #0
}
 8006d10:	4618      	mov	r0, r3
 8006d12:	3720      	adds	r7, #32
 8006d14:	46bd      	mov	sp, r7
 8006d16:	bd80      	pop	{r7, pc}
 8006d18:	40021000 	.word	0x40021000
 8006d1c:	feeefffc 	.word	0xfeeefffc

08006d20 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006d20:	b580      	push	{r7, lr}
 8006d22:	b084      	sub	sp, #16
 8006d24:	af00      	add	r7, sp, #0
 8006d26:	6078      	str	r0, [r7, #4]
 8006d28:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	d101      	bne.n	8006d34 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006d30:	2301      	movs	r3, #1
 8006d32:	e0e7      	b.n	8006f04 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006d34:	4b75      	ldr	r3, [pc, #468]	@ (8006f0c <HAL_RCC_ClockConfig+0x1ec>)
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	f003 0307 	and.w	r3, r3, #7
 8006d3c:	683a      	ldr	r2, [r7, #0]
 8006d3e:	429a      	cmp	r2, r3
 8006d40:	d910      	bls.n	8006d64 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006d42:	4b72      	ldr	r3, [pc, #456]	@ (8006f0c <HAL_RCC_ClockConfig+0x1ec>)
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	f023 0207 	bic.w	r2, r3, #7
 8006d4a:	4970      	ldr	r1, [pc, #448]	@ (8006f0c <HAL_RCC_ClockConfig+0x1ec>)
 8006d4c:	683b      	ldr	r3, [r7, #0]
 8006d4e:	4313      	orrs	r3, r2
 8006d50:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006d52:	4b6e      	ldr	r3, [pc, #440]	@ (8006f0c <HAL_RCC_ClockConfig+0x1ec>)
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	f003 0307 	and.w	r3, r3, #7
 8006d5a:	683a      	ldr	r2, [r7, #0]
 8006d5c:	429a      	cmp	r2, r3
 8006d5e:	d001      	beq.n	8006d64 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8006d60:	2301      	movs	r3, #1
 8006d62:	e0cf      	b.n	8006f04 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	f003 0302 	and.w	r3, r3, #2
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d010      	beq.n	8006d92 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	689a      	ldr	r2, [r3, #8]
 8006d74:	4b66      	ldr	r3, [pc, #408]	@ (8006f10 <HAL_RCC_ClockConfig+0x1f0>)
 8006d76:	689b      	ldr	r3, [r3, #8]
 8006d78:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006d7c:	429a      	cmp	r2, r3
 8006d7e:	d908      	bls.n	8006d92 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006d80:	4b63      	ldr	r3, [pc, #396]	@ (8006f10 <HAL_RCC_ClockConfig+0x1f0>)
 8006d82:	689b      	ldr	r3, [r3, #8]
 8006d84:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	689b      	ldr	r3, [r3, #8]
 8006d8c:	4960      	ldr	r1, [pc, #384]	@ (8006f10 <HAL_RCC_ClockConfig+0x1f0>)
 8006d8e:	4313      	orrs	r3, r2
 8006d90:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	f003 0301 	and.w	r3, r3, #1
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d04c      	beq.n	8006e38 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	685b      	ldr	r3, [r3, #4]
 8006da2:	2b03      	cmp	r3, #3
 8006da4:	d107      	bne.n	8006db6 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006da6:	4b5a      	ldr	r3, [pc, #360]	@ (8006f10 <HAL_RCC_ClockConfig+0x1f0>)
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	d121      	bne.n	8006df6 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8006db2:	2301      	movs	r3, #1
 8006db4:	e0a6      	b.n	8006f04 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	685b      	ldr	r3, [r3, #4]
 8006dba:	2b02      	cmp	r3, #2
 8006dbc:	d107      	bne.n	8006dce <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006dbe:	4b54      	ldr	r3, [pc, #336]	@ (8006f10 <HAL_RCC_ClockConfig+0x1f0>)
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d115      	bne.n	8006df6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8006dca:	2301      	movs	r3, #1
 8006dcc:	e09a      	b.n	8006f04 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	685b      	ldr	r3, [r3, #4]
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d107      	bne.n	8006de6 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8006dd6:	4b4e      	ldr	r3, [pc, #312]	@ (8006f10 <HAL_RCC_ClockConfig+0x1f0>)
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	f003 0302 	and.w	r3, r3, #2
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d109      	bne.n	8006df6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8006de2:	2301      	movs	r3, #1
 8006de4:	e08e      	b.n	8006f04 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006de6:	4b4a      	ldr	r3, [pc, #296]	@ (8006f10 <HAL_RCC_ClockConfig+0x1f0>)
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d101      	bne.n	8006df6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8006df2:	2301      	movs	r3, #1
 8006df4:	e086      	b.n	8006f04 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006df6:	4b46      	ldr	r3, [pc, #280]	@ (8006f10 <HAL_RCC_ClockConfig+0x1f0>)
 8006df8:	689b      	ldr	r3, [r3, #8]
 8006dfa:	f023 0203 	bic.w	r2, r3, #3
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	685b      	ldr	r3, [r3, #4]
 8006e02:	4943      	ldr	r1, [pc, #268]	@ (8006f10 <HAL_RCC_ClockConfig+0x1f0>)
 8006e04:	4313      	orrs	r3, r2
 8006e06:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006e08:	f7fd fd32 	bl	8004870 <HAL_GetTick>
 8006e0c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006e0e:	e00a      	b.n	8006e26 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006e10:	f7fd fd2e 	bl	8004870 <HAL_GetTick>
 8006e14:	4602      	mov	r2, r0
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	1ad3      	subs	r3, r2, r3
 8006e1a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006e1e:	4293      	cmp	r3, r2
 8006e20:	d901      	bls.n	8006e26 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8006e22:	2303      	movs	r3, #3
 8006e24:	e06e      	b.n	8006f04 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006e26:	4b3a      	ldr	r3, [pc, #232]	@ (8006f10 <HAL_RCC_ClockConfig+0x1f0>)
 8006e28:	689b      	ldr	r3, [r3, #8]
 8006e2a:	f003 020c 	and.w	r2, r3, #12
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	685b      	ldr	r3, [r3, #4]
 8006e32:	009b      	lsls	r3, r3, #2
 8006e34:	429a      	cmp	r2, r3
 8006e36:	d1eb      	bne.n	8006e10 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	f003 0302 	and.w	r3, r3, #2
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	d010      	beq.n	8006e66 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	689a      	ldr	r2, [r3, #8]
 8006e48:	4b31      	ldr	r3, [pc, #196]	@ (8006f10 <HAL_RCC_ClockConfig+0x1f0>)
 8006e4a:	689b      	ldr	r3, [r3, #8]
 8006e4c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006e50:	429a      	cmp	r2, r3
 8006e52:	d208      	bcs.n	8006e66 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006e54:	4b2e      	ldr	r3, [pc, #184]	@ (8006f10 <HAL_RCC_ClockConfig+0x1f0>)
 8006e56:	689b      	ldr	r3, [r3, #8]
 8006e58:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	689b      	ldr	r3, [r3, #8]
 8006e60:	492b      	ldr	r1, [pc, #172]	@ (8006f10 <HAL_RCC_ClockConfig+0x1f0>)
 8006e62:	4313      	orrs	r3, r2
 8006e64:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006e66:	4b29      	ldr	r3, [pc, #164]	@ (8006f0c <HAL_RCC_ClockConfig+0x1ec>)
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	f003 0307 	and.w	r3, r3, #7
 8006e6e:	683a      	ldr	r2, [r7, #0]
 8006e70:	429a      	cmp	r2, r3
 8006e72:	d210      	bcs.n	8006e96 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006e74:	4b25      	ldr	r3, [pc, #148]	@ (8006f0c <HAL_RCC_ClockConfig+0x1ec>)
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	f023 0207 	bic.w	r2, r3, #7
 8006e7c:	4923      	ldr	r1, [pc, #140]	@ (8006f0c <HAL_RCC_ClockConfig+0x1ec>)
 8006e7e:	683b      	ldr	r3, [r7, #0]
 8006e80:	4313      	orrs	r3, r2
 8006e82:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006e84:	4b21      	ldr	r3, [pc, #132]	@ (8006f0c <HAL_RCC_ClockConfig+0x1ec>)
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	f003 0307 	and.w	r3, r3, #7
 8006e8c:	683a      	ldr	r2, [r7, #0]
 8006e8e:	429a      	cmp	r2, r3
 8006e90:	d001      	beq.n	8006e96 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8006e92:	2301      	movs	r3, #1
 8006e94:	e036      	b.n	8006f04 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	f003 0304 	and.w	r3, r3, #4
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	d008      	beq.n	8006eb4 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006ea2:	4b1b      	ldr	r3, [pc, #108]	@ (8006f10 <HAL_RCC_ClockConfig+0x1f0>)
 8006ea4:	689b      	ldr	r3, [r3, #8]
 8006ea6:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	68db      	ldr	r3, [r3, #12]
 8006eae:	4918      	ldr	r1, [pc, #96]	@ (8006f10 <HAL_RCC_ClockConfig+0x1f0>)
 8006eb0:	4313      	orrs	r3, r2
 8006eb2:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	f003 0308 	and.w	r3, r3, #8
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	d009      	beq.n	8006ed4 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006ec0:	4b13      	ldr	r3, [pc, #76]	@ (8006f10 <HAL_RCC_ClockConfig+0x1f0>)
 8006ec2:	689b      	ldr	r3, [r3, #8]
 8006ec4:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	691b      	ldr	r3, [r3, #16]
 8006ecc:	00db      	lsls	r3, r3, #3
 8006ece:	4910      	ldr	r1, [pc, #64]	@ (8006f10 <HAL_RCC_ClockConfig+0x1f0>)
 8006ed0:	4313      	orrs	r3, r2
 8006ed2:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8006ed4:	f000 f824 	bl	8006f20 <HAL_RCC_GetSysClockFreq>
 8006ed8:	4602      	mov	r2, r0
 8006eda:	4b0d      	ldr	r3, [pc, #52]	@ (8006f10 <HAL_RCC_ClockConfig+0x1f0>)
 8006edc:	689b      	ldr	r3, [r3, #8]
 8006ede:	091b      	lsrs	r3, r3, #4
 8006ee0:	f003 030f 	and.w	r3, r3, #15
 8006ee4:	490b      	ldr	r1, [pc, #44]	@ (8006f14 <HAL_RCC_ClockConfig+0x1f4>)
 8006ee6:	5ccb      	ldrb	r3, [r1, r3]
 8006ee8:	f003 031f 	and.w	r3, r3, #31
 8006eec:	fa22 f303 	lsr.w	r3, r2, r3
 8006ef0:	4a09      	ldr	r2, [pc, #36]	@ (8006f18 <HAL_RCC_ClockConfig+0x1f8>)
 8006ef2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8006ef4:	4b09      	ldr	r3, [pc, #36]	@ (8006f1c <HAL_RCC_ClockConfig+0x1fc>)
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	4618      	mov	r0, r3
 8006efa:	f7fd fc69 	bl	80047d0 <HAL_InitTick>
 8006efe:	4603      	mov	r3, r0
 8006f00:	72fb      	strb	r3, [r7, #11]

  return status;
 8006f02:	7afb      	ldrb	r3, [r7, #11]
}
 8006f04:	4618      	mov	r0, r3
 8006f06:	3710      	adds	r7, #16
 8006f08:	46bd      	mov	sp, r7
 8006f0a:	bd80      	pop	{r7, pc}
 8006f0c:	40022000 	.word	0x40022000
 8006f10:	40021000 	.word	0x40021000
 8006f14:	0800ef98 	.word	0x0800ef98
 8006f18:	20000004 	.word	0x20000004
 8006f1c:	20000050 	.word	0x20000050

08006f20 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006f20:	b480      	push	{r7}
 8006f22:	b089      	sub	sp, #36	@ 0x24
 8006f24:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8006f26:	2300      	movs	r3, #0
 8006f28:	61fb      	str	r3, [r7, #28]
 8006f2a:	2300      	movs	r3, #0
 8006f2c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006f2e:	4b3e      	ldr	r3, [pc, #248]	@ (8007028 <HAL_RCC_GetSysClockFreq+0x108>)
 8006f30:	689b      	ldr	r3, [r3, #8]
 8006f32:	f003 030c 	and.w	r3, r3, #12
 8006f36:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006f38:	4b3b      	ldr	r3, [pc, #236]	@ (8007028 <HAL_RCC_GetSysClockFreq+0x108>)
 8006f3a:	68db      	ldr	r3, [r3, #12]
 8006f3c:	f003 0303 	and.w	r3, r3, #3
 8006f40:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8006f42:	693b      	ldr	r3, [r7, #16]
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	d005      	beq.n	8006f54 <HAL_RCC_GetSysClockFreq+0x34>
 8006f48:	693b      	ldr	r3, [r7, #16]
 8006f4a:	2b0c      	cmp	r3, #12
 8006f4c:	d121      	bne.n	8006f92 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	2b01      	cmp	r3, #1
 8006f52:	d11e      	bne.n	8006f92 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8006f54:	4b34      	ldr	r3, [pc, #208]	@ (8007028 <HAL_RCC_GetSysClockFreq+0x108>)
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	f003 0308 	and.w	r3, r3, #8
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	d107      	bne.n	8006f70 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8006f60:	4b31      	ldr	r3, [pc, #196]	@ (8007028 <HAL_RCC_GetSysClockFreq+0x108>)
 8006f62:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006f66:	0a1b      	lsrs	r3, r3, #8
 8006f68:	f003 030f 	and.w	r3, r3, #15
 8006f6c:	61fb      	str	r3, [r7, #28]
 8006f6e:	e005      	b.n	8006f7c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8006f70:	4b2d      	ldr	r3, [pc, #180]	@ (8007028 <HAL_RCC_GetSysClockFreq+0x108>)
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	091b      	lsrs	r3, r3, #4
 8006f76:	f003 030f 	and.w	r3, r3, #15
 8006f7a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8006f7c:	4a2b      	ldr	r2, [pc, #172]	@ (800702c <HAL_RCC_GetSysClockFreq+0x10c>)
 8006f7e:	69fb      	ldr	r3, [r7, #28]
 8006f80:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006f84:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8006f86:	693b      	ldr	r3, [r7, #16]
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	d10d      	bne.n	8006fa8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8006f8c:	69fb      	ldr	r3, [r7, #28]
 8006f8e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8006f90:	e00a      	b.n	8006fa8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8006f92:	693b      	ldr	r3, [r7, #16]
 8006f94:	2b04      	cmp	r3, #4
 8006f96:	d102      	bne.n	8006f9e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8006f98:	4b25      	ldr	r3, [pc, #148]	@ (8007030 <HAL_RCC_GetSysClockFreq+0x110>)
 8006f9a:	61bb      	str	r3, [r7, #24]
 8006f9c:	e004      	b.n	8006fa8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8006f9e:	693b      	ldr	r3, [r7, #16]
 8006fa0:	2b08      	cmp	r3, #8
 8006fa2:	d101      	bne.n	8006fa8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8006fa4:	4b23      	ldr	r3, [pc, #140]	@ (8007034 <HAL_RCC_GetSysClockFreq+0x114>)
 8006fa6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8006fa8:	693b      	ldr	r3, [r7, #16]
 8006faa:	2b0c      	cmp	r3, #12
 8006fac:	d134      	bne.n	8007018 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8006fae:	4b1e      	ldr	r3, [pc, #120]	@ (8007028 <HAL_RCC_GetSysClockFreq+0x108>)
 8006fb0:	68db      	ldr	r3, [r3, #12]
 8006fb2:	f003 0303 	and.w	r3, r3, #3
 8006fb6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8006fb8:	68bb      	ldr	r3, [r7, #8]
 8006fba:	2b02      	cmp	r3, #2
 8006fbc:	d003      	beq.n	8006fc6 <HAL_RCC_GetSysClockFreq+0xa6>
 8006fbe:	68bb      	ldr	r3, [r7, #8]
 8006fc0:	2b03      	cmp	r3, #3
 8006fc2:	d003      	beq.n	8006fcc <HAL_RCC_GetSysClockFreq+0xac>
 8006fc4:	e005      	b.n	8006fd2 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8006fc6:	4b1a      	ldr	r3, [pc, #104]	@ (8007030 <HAL_RCC_GetSysClockFreq+0x110>)
 8006fc8:	617b      	str	r3, [r7, #20]
      break;
 8006fca:	e005      	b.n	8006fd8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8006fcc:	4b19      	ldr	r3, [pc, #100]	@ (8007034 <HAL_RCC_GetSysClockFreq+0x114>)
 8006fce:	617b      	str	r3, [r7, #20]
      break;
 8006fd0:	e002      	b.n	8006fd8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8006fd2:	69fb      	ldr	r3, [r7, #28]
 8006fd4:	617b      	str	r3, [r7, #20]
      break;
 8006fd6:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006fd8:	4b13      	ldr	r3, [pc, #76]	@ (8007028 <HAL_RCC_GetSysClockFreq+0x108>)
 8006fda:	68db      	ldr	r3, [r3, #12]
 8006fdc:	091b      	lsrs	r3, r3, #4
 8006fde:	f003 0307 	and.w	r3, r3, #7
 8006fe2:	3301      	adds	r3, #1
 8006fe4:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8006fe6:	4b10      	ldr	r3, [pc, #64]	@ (8007028 <HAL_RCC_GetSysClockFreq+0x108>)
 8006fe8:	68db      	ldr	r3, [r3, #12]
 8006fea:	0a1b      	lsrs	r3, r3, #8
 8006fec:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006ff0:	697a      	ldr	r2, [r7, #20]
 8006ff2:	fb03 f202 	mul.w	r2, r3, r2
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	fbb2 f3f3 	udiv	r3, r2, r3
 8006ffc:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006ffe:	4b0a      	ldr	r3, [pc, #40]	@ (8007028 <HAL_RCC_GetSysClockFreq+0x108>)
 8007000:	68db      	ldr	r3, [r3, #12]
 8007002:	0e5b      	lsrs	r3, r3, #25
 8007004:	f003 0303 	and.w	r3, r3, #3
 8007008:	3301      	adds	r3, #1
 800700a:	005b      	lsls	r3, r3, #1
 800700c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800700e:	697a      	ldr	r2, [r7, #20]
 8007010:	683b      	ldr	r3, [r7, #0]
 8007012:	fbb2 f3f3 	udiv	r3, r2, r3
 8007016:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8007018:	69bb      	ldr	r3, [r7, #24]
}
 800701a:	4618      	mov	r0, r3
 800701c:	3724      	adds	r7, #36	@ 0x24
 800701e:	46bd      	mov	sp, r7
 8007020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007024:	4770      	bx	lr
 8007026:	bf00      	nop
 8007028:	40021000 	.word	0x40021000
 800702c:	0800efb0 	.word	0x0800efb0
 8007030:	00f42400 	.word	0x00f42400
 8007034:	007a1200 	.word	0x007a1200

08007038 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007038:	b480      	push	{r7}
 800703a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800703c:	4b03      	ldr	r3, [pc, #12]	@ (800704c <HAL_RCC_GetHCLKFreq+0x14>)
 800703e:	681b      	ldr	r3, [r3, #0]
}
 8007040:	4618      	mov	r0, r3
 8007042:	46bd      	mov	sp, r7
 8007044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007048:	4770      	bx	lr
 800704a:	bf00      	nop
 800704c:	20000004 	.word	0x20000004

08007050 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007050:	b580      	push	{r7, lr}
 8007052:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8007054:	f7ff fff0 	bl	8007038 <HAL_RCC_GetHCLKFreq>
 8007058:	4602      	mov	r2, r0
 800705a:	4b06      	ldr	r3, [pc, #24]	@ (8007074 <HAL_RCC_GetPCLK1Freq+0x24>)
 800705c:	689b      	ldr	r3, [r3, #8]
 800705e:	0a1b      	lsrs	r3, r3, #8
 8007060:	f003 0307 	and.w	r3, r3, #7
 8007064:	4904      	ldr	r1, [pc, #16]	@ (8007078 <HAL_RCC_GetPCLK1Freq+0x28>)
 8007066:	5ccb      	ldrb	r3, [r1, r3]
 8007068:	f003 031f 	and.w	r3, r3, #31
 800706c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007070:	4618      	mov	r0, r3
 8007072:	bd80      	pop	{r7, pc}
 8007074:	40021000 	.word	0x40021000
 8007078:	0800efa8 	.word	0x0800efa8

0800707c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800707c:	b580      	push	{r7, lr}
 800707e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8007080:	f7ff ffda 	bl	8007038 <HAL_RCC_GetHCLKFreq>
 8007084:	4602      	mov	r2, r0
 8007086:	4b06      	ldr	r3, [pc, #24]	@ (80070a0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007088:	689b      	ldr	r3, [r3, #8]
 800708a:	0adb      	lsrs	r3, r3, #11
 800708c:	f003 0307 	and.w	r3, r3, #7
 8007090:	4904      	ldr	r1, [pc, #16]	@ (80070a4 <HAL_RCC_GetPCLK2Freq+0x28>)
 8007092:	5ccb      	ldrb	r3, [r1, r3]
 8007094:	f003 031f 	and.w	r3, r3, #31
 8007098:	fa22 f303 	lsr.w	r3, r2, r3
}
 800709c:	4618      	mov	r0, r3
 800709e:	bd80      	pop	{r7, pc}
 80070a0:	40021000 	.word	0x40021000
 80070a4:	0800efa8 	.word	0x0800efa8

080070a8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80070a8:	b580      	push	{r7, lr}
 80070aa:	b086      	sub	sp, #24
 80070ac:	af00      	add	r7, sp, #0
 80070ae:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80070b0:	2300      	movs	r3, #0
 80070b2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80070b4:	4b2a      	ldr	r3, [pc, #168]	@ (8007160 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80070b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80070b8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80070bc:	2b00      	cmp	r3, #0
 80070be:	d003      	beq.n	80070c8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80070c0:	f7ff f922 	bl	8006308 <HAL_PWREx_GetVoltageRange>
 80070c4:	6178      	str	r0, [r7, #20]
 80070c6:	e014      	b.n	80070f2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80070c8:	4b25      	ldr	r3, [pc, #148]	@ (8007160 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80070ca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80070cc:	4a24      	ldr	r2, [pc, #144]	@ (8007160 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80070ce:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80070d2:	6593      	str	r3, [r2, #88]	@ 0x58
 80070d4:	4b22      	ldr	r3, [pc, #136]	@ (8007160 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80070d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80070d8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80070dc:	60fb      	str	r3, [r7, #12]
 80070de:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80070e0:	f7ff f912 	bl	8006308 <HAL_PWREx_GetVoltageRange>
 80070e4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80070e6:	4b1e      	ldr	r3, [pc, #120]	@ (8007160 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80070e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80070ea:	4a1d      	ldr	r2, [pc, #116]	@ (8007160 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80070ec:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80070f0:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80070f2:	697b      	ldr	r3, [r7, #20]
 80070f4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80070f8:	d10b      	bne.n	8007112 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	2b80      	cmp	r3, #128	@ 0x80
 80070fe:	d919      	bls.n	8007134 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	2ba0      	cmp	r3, #160	@ 0xa0
 8007104:	d902      	bls.n	800710c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8007106:	2302      	movs	r3, #2
 8007108:	613b      	str	r3, [r7, #16]
 800710a:	e013      	b.n	8007134 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800710c:	2301      	movs	r3, #1
 800710e:	613b      	str	r3, [r7, #16]
 8007110:	e010      	b.n	8007134 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	2b80      	cmp	r3, #128	@ 0x80
 8007116:	d902      	bls.n	800711e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8007118:	2303      	movs	r3, #3
 800711a:	613b      	str	r3, [r7, #16]
 800711c:	e00a      	b.n	8007134 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	2b80      	cmp	r3, #128	@ 0x80
 8007122:	d102      	bne.n	800712a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8007124:	2302      	movs	r3, #2
 8007126:	613b      	str	r3, [r7, #16]
 8007128:	e004      	b.n	8007134 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	2b70      	cmp	r3, #112	@ 0x70
 800712e:	d101      	bne.n	8007134 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8007130:	2301      	movs	r3, #1
 8007132:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8007134:	4b0b      	ldr	r3, [pc, #44]	@ (8007164 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	f023 0207 	bic.w	r2, r3, #7
 800713c:	4909      	ldr	r1, [pc, #36]	@ (8007164 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800713e:	693b      	ldr	r3, [r7, #16]
 8007140:	4313      	orrs	r3, r2
 8007142:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8007144:	4b07      	ldr	r3, [pc, #28]	@ (8007164 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	f003 0307 	and.w	r3, r3, #7
 800714c:	693a      	ldr	r2, [r7, #16]
 800714e:	429a      	cmp	r2, r3
 8007150:	d001      	beq.n	8007156 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8007152:	2301      	movs	r3, #1
 8007154:	e000      	b.n	8007158 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8007156:	2300      	movs	r3, #0
}
 8007158:	4618      	mov	r0, r3
 800715a:	3718      	adds	r7, #24
 800715c:	46bd      	mov	sp, r7
 800715e:	bd80      	pop	{r7, pc}
 8007160:	40021000 	.word	0x40021000
 8007164:	40022000 	.word	0x40022000

08007168 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007168:	b580      	push	{r7, lr}
 800716a:	b086      	sub	sp, #24
 800716c:	af00      	add	r7, sp, #0
 800716e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8007170:	2300      	movs	r3, #0
 8007172:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8007174:	2300      	movs	r3, #0
 8007176:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007180:	2b00      	cmp	r3, #0
 8007182:	d041      	beq.n	8007208 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007188:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800718c:	d02a      	beq.n	80071e4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800718e:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8007192:	d824      	bhi.n	80071de <HAL_RCCEx_PeriphCLKConfig+0x76>
 8007194:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8007198:	d008      	beq.n	80071ac <HAL_RCCEx_PeriphCLKConfig+0x44>
 800719a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800719e:	d81e      	bhi.n	80071de <HAL_RCCEx_PeriphCLKConfig+0x76>
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	d00a      	beq.n	80071ba <HAL_RCCEx_PeriphCLKConfig+0x52>
 80071a4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80071a8:	d010      	beq.n	80071cc <HAL_RCCEx_PeriphCLKConfig+0x64>
 80071aa:	e018      	b.n	80071de <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80071ac:	4b86      	ldr	r3, [pc, #536]	@ (80073c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80071ae:	68db      	ldr	r3, [r3, #12]
 80071b0:	4a85      	ldr	r2, [pc, #532]	@ (80073c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80071b2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80071b6:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80071b8:	e015      	b.n	80071e6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	3304      	adds	r3, #4
 80071be:	2100      	movs	r1, #0
 80071c0:	4618      	mov	r0, r3
 80071c2:	f000 facb 	bl	800775c <RCCEx_PLLSAI1_Config>
 80071c6:	4603      	mov	r3, r0
 80071c8:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80071ca:	e00c      	b.n	80071e6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	3320      	adds	r3, #32
 80071d0:	2100      	movs	r1, #0
 80071d2:	4618      	mov	r0, r3
 80071d4:	f000 fbb6 	bl	8007944 <RCCEx_PLLSAI2_Config>
 80071d8:	4603      	mov	r3, r0
 80071da:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80071dc:	e003      	b.n	80071e6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80071de:	2301      	movs	r3, #1
 80071e0:	74fb      	strb	r3, [r7, #19]
      break;
 80071e2:	e000      	b.n	80071e6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80071e4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80071e6:	7cfb      	ldrb	r3, [r7, #19]
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	d10b      	bne.n	8007204 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80071ec:	4b76      	ldr	r3, [pc, #472]	@ (80073c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80071ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80071f2:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80071fa:	4973      	ldr	r1, [pc, #460]	@ (80073c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80071fc:	4313      	orrs	r3, r2
 80071fe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8007202:	e001      	b.n	8007208 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007204:	7cfb      	ldrb	r3, [r7, #19]
 8007206:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8007210:	2b00      	cmp	r3, #0
 8007212:	d041      	beq.n	8007298 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007218:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800721c:	d02a      	beq.n	8007274 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800721e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8007222:	d824      	bhi.n	800726e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8007224:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007228:	d008      	beq.n	800723c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800722a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800722e:	d81e      	bhi.n	800726e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8007230:	2b00      	cmp	r3, #0
 8007232:	d00a      	beq.n	800724a <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8007234:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007238:	d010      	beq.n	800725c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800723a:	e018      	b.n	800726e <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800723c:	4b62      	ldr	r3, [pc, #392]	@ (80073c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800723e:	68db      	ldr	r3, [r3, #12]
 8007240:	4a61      	ldr	r2, [pc, #388]	@ (80073c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007242:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007246:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8007248:	e015      	b.n	8007276 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	3304      	adds	r3, #4
 800724e:	2100      	movs	r1, #0
 8007250:	4618      	mov	r0, r3
 8007252:	f000 fa83 	bl	800775c <RCCEx_PLLSAI1_Config>
 8007256:	4603      	mov	r3, r0
 8007258:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800725a:	e00c      	b.n	8007276 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	3320      	adds	r3, #32
 8007260:	2100      	movs	r1, #0
 8007262:	4618      	mov	r0, r3
 8007264:	f000 fb6e 	bl	8007944 <RCCEx_PLLSAI2_Config>
 8007268:	4603      	mov	r3, r0
 800726a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800726c:	e003      	b.n	8007276 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800726e:	2301      	movs	r3, #1
 8007270:	74fb      	strb	r3, [r7, #19]
      break;
 8007272:	e000      	b.n	8007276 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8007274:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007276:	7cfb      	ldrb	r3, [r7, #19]
 8007278:	2b00      	cmp	r3, #0
 800727a:	d10b      	bne.n	8007294 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800727c:	4b52      	ldr	r3, [pc, #328]	@ (80073c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800727e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007282:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800728a:	494f      	ldr	r1, [pc, #316]	@ (80073c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800728c:	4313      	orrs	r3, r2
 800728e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8007292:	e001      	b.n	8007298 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007294:	7cfb      	ldrb	r3, [r7, #19]
 8007296:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	f000 80a0 	beq.w	80073e6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80072a6:	2300      	movs	r3, #0
 80072a8:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80072aa:	4b47      	ldr	r3, [pc, #284]	@ (80073c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80072ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80072ae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	d101      	bne.n	80072ba <HAL_RCCEx_PeriphCLKConfig+0x152>
 80072b6:	2301      	movs	r3, #1
 80072b8:	e000      	b.n	80072bc <HAL_RCCEx_PeriphCLKConfig+0x154>
 80072ba:	2300      	movs	r3, #0
 80072bc:	2b00      	cmp	r3, #0
 80072be:	d00d      	beq.n	80072dc <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80072c0:	4b41      	ldr	r3, [pc, #260]	@ (80073c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80072c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80072c4:	4a40      	ldr	r2, [pc, #256]	@ (80073c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80072c6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80072ca:	6593      	str	r3, [r2, #88]	@ 0x58
 80072cc:	4b3e      	ldr	r3, [pc, #248]	@ (80073c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80072ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80072d0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80072d4:	60bb      	str	r3, [r7, #8]
 80072d6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80072d8:	2301      	movs	r3, #1
 80072da:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80072dc:	4b3b      	ldr	r3, [pc, #236]	@ (80073cc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	4a3a      	ldr	r2, [pc, #232]	@ (80073cc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80072e2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80072e6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80072e8:	f7fd fac2 	bl	8004870 <HAL_GetTick>
 80072ec:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80072ee:	e009      	b.n	8007304 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80072f0:	f7fd fabe 	bl	8004870 <HAL_GetTick>
 80072f4:	4602      	mov	r2, r0
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	1ad3      	subs	r3, r2, r3
 80072fa:	2b02      	cmp	r3, #2
 80072fc:	d902      	bls.n	8007304 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80072fe:	2303      	movs	r3, #3
 8007300:	74fb      	strb	r3, [r7, #19]
        break;
 8007302:	e005      	b.n	8007310 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8007304:	4b31      	ldr	r3, [pc, #196]	@ (80073cc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800730c:	2b00      	cmp	r3, #0
 800730e:	d0ef      	beq.n	80072f0 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8007310:	7cfb      	ldrb	r3, [r7, #19]
 8007312:	2b00      	cmp	r3, #0
 8007314:	d15c      	bne.n	80073d0 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8007316:	4b2c      	ldr	r3, [pc, #176]	@ (80073c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007318:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800731c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007320:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8007322:	697b      	ldr	r3, [r7, #20]
 8007324:	2b00      	cmp	r3, #0
 8007326:	d01f      	beq.n	8007368 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800732e:	697a      	ldr	r2, [r7, #20]
 8007330:	429a      	cmp	r2, r3
 8007332:	d019      	beq.n	8007368 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8007334:	4b24      	ldr	r3, [pc, #144]	@ (80073c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007336:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800733a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800733e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007340:	4b21      	ldr	r3, [pc, #132]	@ (80073c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007342:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007346:	4a20      	ldr	r2, [pc, #128]	@ (80073c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007348:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800734c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007350:	4b1d      	ldr	r3, [pc, #116]	@ (80073c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007352:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007356:	4a1c      	ldr	r2, [pc, #112]	@ (80073c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007358:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800735c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8007360:	4a19      	ldr	r2, [pc, #100]	@ (80073c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007362:	697b      	ldr	r3, [r7, #20]
 8007364:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8007368:	697b      	ldr	r3, [r7, #20]
 800736a:	f003 0301 	and.w	r3, r3, #1
 800736e:	2b00      	cmp	r3, #0
 8007370:	d016      	beq.n	80073a0 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007372:	f7fd fa7d 	bl	8004870 <HAL_GetTick>
 8007376:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007378:	e00b      	b.n	8007392 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800737a:	f7fd fa79 	bl	8004870 <HAL_GetTick>
 800737e:	4602      	mov	r2, r0
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	1ad3      	subs	r3, r2, r3
 8007384:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007388:	4293      	cmp	r3, r2
 800738a:	d902      	bls.n	8007392 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 800738c:	2303      	movs	r3, #3
 800738e:	74fb      	strb	r3, [r7, #19]
            break;
 8007390:	e006      	b.n	80073a0 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007392:	4b0d      	ldr	r3, [pc, #52]	@ (80073c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007394:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007398:	f003 0302 	and.w	r3, r3, #2
 800739c:	2b00      	cmp	r3, #0
 800739e:	d0ec      	beq.n	800737a <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80073a0:	7cfb      	ldrb	r3, [r7, #19]
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	d10c      	bne.n	80073c0 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80073a6:	4b08      	ldr	r3, [pc, #32]	@ (80073c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80073a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80073ac:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80073b6:	4904      	ldr	r1, [pc, #16]	@ (80073c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80073b8:	4313      	orrs	r3, r2
 80073ba:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80073be:	e009      	b.n	80073d4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80073c0:	7cfb      	ldrb	r3, [r7, #19]
 80073c2:	74bb      	strb	r3, [r7, #18]
 80073c4:	e006      	b.n	80073d4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80073c6:	bf00      	nop
 80073c8:	40021000 	.word	0x40021000
 80073cc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80073d0:	7cfb      	ldrb	r3, [r7, #19]
 80073d2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80073d4:	7c7b      	ldrb	r3, [r7, #17]
 80073d6:	2b01      	cmp	r3, #1
 80073d8:	d105      	bne.n	80073e6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80073da:	4b9e      	ldr	r3, [pc, #632]	@ (8007654 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80073dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80073de:	4a9d      	ldr	r2, [pc, #628]	@ (8007654 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80073e0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80073e4:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	f003 0301 	and.w	r3, r3, #1
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	d00a      	beq.n	8007408 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80073f2:	4b98      	ldr	r3, [pc, #608]	@ (8007654 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80073f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80073f8:	f023 0203 	bic.w	r2, r3, #3
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007400:	4994      	ldr	r1, [pc, #592]	@ (8007654 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007402:	4313      	orrs	r3, r2
 8007404:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	f003 0302 	and.w	r3, r3, #2
 8007410:	2b00      	cmp	r3, #0
 8007412:	d00a      	beq.n	800742a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8007414:	4b8f      	ldr	r3, [pc, #572]	@ (8007654 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007416:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800741a:	f023 020c 	bic.w	r2, r3, #12
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007422:	498c      	ldr	r1, [pc, #560]	@ (8007654 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007424:	4313      	orrs	r3, r2
 8007426:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	f003 0304 	and.w	r3, r3, #4
 8007432:	2b00      	cmp	r3, #0
 8007434:	d00a      	beq.n	800744c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8007436:	4b87      	ldr	r3, [pc, #540]	@ (8007654 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007438:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800743c:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007444:	4983      	ldr	r1, [pc, #524]	@ (8007654 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007446:	4313      	orrs	r3, r2
 8007448:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	f003 0308 	and.w	r3, r3, #8
 8007454:	2b00      	cmp	r3, #0
 8007456:	d00a      	beq.n	800746e <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8007458:	4b7e      	ldr	r3, [pc, #504]	@ (8007654 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800745a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800745e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007466:	497b      	ldr	r1, [pc, #492]	@ (8007654 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007468:	4313      	orrs	r3, r2
 800746a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	f003 0310 	and.w	r3, r3, #16
 8007476:	2b00      	cmp	r3, #0
 8007478:	d00a      	beq.n	8007490 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800747a:	4b76      	ldr	r3, [pc, #472]	@ (8007654 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800747c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007480:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007488:	4972      	ldr	r1, [pc, #456]	@ (8007654 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800748a:	4313      	orrs	r3, r2
 800748c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	f003 0320 	and.w	r3, r3, #32
 8007498:	2b00      	cmp	r3, #0
 800749a:	d00a      	beq.n	80074b2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800749c:	4b6d      	ldr	r3, [pc, #436]	@ (8007654 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800749e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80074a2:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80074aa:	496a      	ldr	r1, [pc, #424]	@ (8007654 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80074ac:	4313      	orrs	r3, r2
 80074ae:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	d00a      	beq.n	80074d4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80074be:	4b65      	ldr	r3, [pc, #404]	@ (8007654 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80074c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80074c4:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80074cc:	4961      	ldr	r1, [pc, #388]	@ (8007654 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80074ce:	4313      	orrs	r3, r2
 80074d0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80074dc:	2b00      	cmp	r3, #0
 80074de:	d00a      	beq.n	80074f6 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80074e0:	4b5c      	ldr	r3, [pc, #368]	@ (8007654 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80074e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80074e6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80074ee:	4959      	ldr	r1, [pc, #356]	@ (8007654 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80074f0:	4313      	orrs	r3, r2
 80074f2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80074fe:	2b00      	cmp	r3, #0
 8007500:	d00a      	beq.n	8007518 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8007502:	4b54      	ldr	r3, [pc, #336]	@ (8007654 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007504:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007508:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007510:	4950      	ldr	r1, [pc, #320]	@ (8007654 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007512:	4313      	orrs	r3, r2
 8007514:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007520:	2b00      	cmp	r3, #0
 8007522:	d00a      	beq.n	800753a <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8007524:	4b4b      	ldr	r3, [pc, #300]	@ (8007654 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007526:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800752a:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007532:	4948      	ldr	r1, [pc, #288]	@ (8007654 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007534:	4313      	orrs	r3, r2
 8007536:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007542:	2b00      	cmp	r3, #0
 8007544:	d00a      	beq.n	800755c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8007546:	4b43      	ldr	r3, [pc, #268]	@ (8007654 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007548:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800754c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007554:	493f      	ldr	r1, [pc, #252]	@ (8007654 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007556:	4313      	orrs	r3, r2
 8007558:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007564:	2b00      	cmp	r3, #0
 8007566:	d028      	beq.n	80075ba <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007568:	4b3a      	ldr	r3, [pc, #232]	@ (8007654 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800756a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800756e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007576:	4937      	ldr	r1, [pc, #220]	@ (8007654 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007578:	4313      	orrs	r3, r2
 800757a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007582:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007586:	d106      	bne.n	8007596 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007588:	4b32      	ldr	r3, [pc, #200]	@ (8007654 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800758a:	68db      	ldr	r3, [r3, #12]
 800758c:	4a31      	ldr	r2, [pc, #196]	@ (8007654 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800758e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007592:	60d3      	str	r3, [r2, #12]
 8007594:	e011      	b.n	80075ba <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800759a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800759e:	d10c      	bne.n	80075ba <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	3304      	adds	r3, #4
 80075a4:	2101      	movs	r1, #1
 80075a6:	4618      	mov	r0, r3
 80075a8:	f000 f8d8 	bl	800775c <RCCEx_PLLSAI1_Config>
 80075ac:	4603      	mov	r3, r0
 80075ae:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80075b0:	7cfb      	ldrb	r3, [r7, #19]
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	d001      	beq.n	80075ba <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80075b6:	7cfb      	ldrb	r3, [r7, #19]
 80075b8:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	d028      	beq.n	8007618 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80075c6:	4b23      	ldr	r3, [pc, #140]	@ (8007654 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80075c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80075cc:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80075d4:	491f      	ldr	r1, [pc, #124]	@ (8007654 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80075d6:	4313      	orrs	r3, r2
 80075d8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80075e0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80075e4:	d106      	bne.n	80075f4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80075e6:	4b1b      	ldr	r3, [pc, #108]	@ (8007654 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80075e8:	68db      	ldr	r3, [r3, #12]
 80075ea:	4a1a      	ldr	r2, [pc, #104]	@ (8007654 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80075ec:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80075f0:	60d3      	str	r3, [r2, #12]
 80075f2:	e011      	b.n	8007618 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80075f8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80075fc:	d10c      	bne.n	8007618 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	3304      	adds	r3, #4
 8007602:	2101      	movs	r1, #1
 8007604:	4618      	mov	r0, r3
 8007606:	f000 f8a9 	bl	800775c <RCCEx_PLLSAI1_Config>
 800760a:	4603      	mov	r3, r0
 800760c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800760e:	7cfb      	ldrb	r3, [r7, #19]
 8007610:	2b00      	cmp	r3, #0
 8007612:	d001      	beq.n	8007618 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8007614:	7cfb      	ldrb	r3, [r7, #19]
 8007616:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8007620:	2b00      	cmp	r3, #0
 8007622:	d02b      	beq.n	800767c <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007624:	4b0b      	ldr	r3, [pc, #44]	@ (8007654 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007626:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800762a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007632:	4908      	ldr	r1, [pc, #32]	@ (8007654 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007634:	4313      	orrs	r3, r2
 8007636:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800763e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007642:	d109      	bne.n	8007658 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007644:	4b03      	ldr	r3, [pc, #12]	@ (8007654 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007646:	68db      	ldr	r3, [r3, #12]
 8007648:	4a02      	ldr	r2, [pc, #8]	@ (8007654 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800764a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800764e:	60d3      	str	r3, [r2, #12]
 8007650:	e014      	b.n	800767c <HAL_RCCEx_PeriphCLKConfig+0x514>
 8007652:	bf00      	nop
 8007654:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800765c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8007660:	d10c      	bne.n	800767c <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	3304      	adds	r3, #4
 8007666:	2101      	movs	r1, #1
 8007668:	4618      	mov	r0, r3
 800766a:	f000 f877 	bl	800775c <RCCEx_PLLSAI1_Config>
 800766e:	4603      	mov	r3, r0
 8007670:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8007672:	7cfb      	ldrb	r3, [r7, #19]
 8007674:	2b00      	cmp	r3, #0
 8007676:	d001      	beq.n	800767c <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8007678:	7cfb      	ldrb	r3, [r7, #19]
 800767a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007684:	2b00      	cmp	r3, #0
 8007686:	d02f      	beq.n	80076e8 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007688:	4b2b      	ldr	r3, [pc, #172]	@ (8007738 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800768a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800768e:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007696:	4928      	ldr	r1, [pc, #160]	@ (8007738 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8007698:	4313      	orrs	r3, r2
 800769a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80076a2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80076a6:	d10d      	bne.n	80076c4 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	3304      	adds	r3, #4
 80076ac:	2102      	movs	r1, #2
 80076ae:	4618      	mov	r0, r3
 80076b0:	f000 f854 	bl	800775c <RCCEx_PLLSAI1_Config>
 80076b4:	4603      	mov	r3, r0
 80076b6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80076b8:	7cfb      	ldrb	r3, [r7, #19]
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	d014      	beq.n	80076e8 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80076be:	7cfb      	ldrb	r3, [r7, #19]
 80076c0:	74bb      	strb	r3, [r7, #18]
 80076c2:	e011      	b.n	80076e8 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80076c8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80076cc:	d10c      	bne.n	80076e8 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	3320      	adds	r3, #32
 80076d2:	2102      	movs	r1, #2
 80076d4:	4618      	mov	r0, r3
 80076d6:	f000 f935 	bl	8007944 <RCCEx_PLLSAI2_Config>
 80076da:	4603      	mov	r3, r0
 80076dc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80076de:	7cfb      	ldrb	r3, [r7, #19]
 80076e0:	2b00      	cmp	r3, #0
 80076e2:	d001      	beq.n	80076e8 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80076e4:	7cfb      	ldrb	r3, [r7, #19]
 80076e6:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80076f0:	2b00      	cmp	r3, #0
 80076f2:	d00a      	beq.n	800770a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80076f4:	4b10      	ldr	r3, [pc, #64]	@ (8007738 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80076f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80076fa:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007702:	490d      	ldr	r1, [pc, #52]	@ (8007738 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8007704:	4313      	orrs	r3, r2
 8007706:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007712:	2b00      	cmp	r3, #0
 8007714:	d00b      	beq.n	800772e <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8007716:	4b08      	ldr	r3, [pc, #32]	@ (8007738 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8007718:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800771c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007726:	4904      	ldr	r1, [pc, #16]	@ (8007738 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8007728:	4313      	orrs	r3, r2
 800772a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800772e:	7cbb      	ldrb	r3, [r7, #18]
}
 8007730:	4618      	mov	r0, r3
 8007732:	3718      	adds	r7, #24
 8007734:	46bd      	mov	sp, r7
 8007736:	bd80      	pop	{r7, pc}
 8007738:	40021000 	.word	0x40021000

0800773c <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 800773c:	b480      	push	{r7}
 800773e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8007740:	4b05      	ldr	r3, [pc, #20]	@ (8007758 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	4a04      	ldr	r2, [pc, #16]	@ (8007758 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8007746:	f043 0304 	orr.w	r3, r3, #4
 800774a:	6013      	str	r3, [r2, #0]
}
 800774c:	bf00      	nop
 800774e:	46bd      	mov	sp, r7
 8007750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007754:	4770      	bx	lr
 8007756:	bf00      	nop
 8007758:	40021000 	.word	0x40021000

0800775c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800775c:	b580      	push	{r7, lr}
 800775e:	b084      	sub	sp, #16
 8007760:	af00      	add	r7, sp, #0
 8007762:	6078      	str	r0, [r7, #4]
 8007764:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007766:	2300      	movs	r3, #0
 8007768:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800776a:	4b75      	ldr	r3, [pc, #468]	@ (8007940 <RCCEx_PLLSAI1_Config+0x1e4>)
 800776c:	68db      	ldr	r3, [r3, #12]
 800776e:	f003 0303 	and.w	r3, r3, #3
 8007772:	2b00      	cmp	r3, #0
 8007774:	d018      	beq.n	80077a8 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8007776:	4b72      	ldr	r3, [pc, #456]	@ (8007940 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007778:	68db      	ldr	r3, [r3, #12]
 800777a:	f003 0203 	and.w	r2, r3, #3
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	429a      	cmp	r2, r3
 8007784:	d10d      	bne.n	80077a2 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	681b      	ldr	r3, [r3, #0]
       ||
 800778a:	2b00      	cmp	r3, #0
 800778c:	d009      	beq.n	80077a2 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800778e:	4b6c      	ldr	r3, [pc, #432]	@ (8007940 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007790:	68db      	ldr	r3, [r3, #12]
 8007792:	091b      	lsrs	r3, r3, #4
 8007794:	f003 0307 	and.w	r3, r3, #7
 8007798:	1c5a      	adds	r2, r3, #1
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	685b      	ldr	r3, [r3, #4]
       ||
 800779e:	429a      	cmp	r2, r3
 80077a0:	d047      	beq.n	8007832 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80077a2:	2301      	movs	r3, #1
 80077a4:	73fb      	strb	r3, [r7, #15]
 80077a6:	e044      	b.n	8007832 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	2b03      	cmp	r3, #3
 80077ae:	d018      	beq.n	80077e2 <RCCEx_PLLSAI1_Config+0x86>
 80077b0:	2b03      	cmp	r3, #3
 80077b2:	d825      	bhi.n	8007800 <RCCEx_PLLSAI1_Config+0xa4>
 80077b4:	2b01      	cmp	r3, #1
 80077b6:	d002      	beq.n	80077be <RCCEx_PLLSAI1_Config+0x62>
 80077b8:	2b02      	cmp	r3, #2
 80077ba:	d009      	beq.n	80077d0 <RCCEx_PLLSAI1_Config+0x74>
 80077bc:	e020      	b.n	8007800 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80077be:	4b60      	ldr	r3, [pc, #384]	@ (8007940 <RCCEx_PLLSAI1_Config+0x1e4>)
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	f003 0302 	and.w	r3, r3, #2
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	d11d      	bne.n	8007806 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80077ca:	2301      	movs	r3, #1
 80077cc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80077ce:	e01a      	b.n	8007806 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80077d0:	4b5b      	ldr	r3, [pc, #364]	@ (8007940 <RCCEx_PLLSAI1_Config+0x1e4>)
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80077d8:	2b00      	cmp	r3, #0
 80077da:	d116      	bne.n	800780a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80077dc:	2301      	movs	r3, #1
 80077de:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80077e0:	e013      	b.n	800780a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80077e2:	4b57      	ldr	r3, [pc, #348]	@ (8007940 <RCCEx_PLLSAI1_Config+0x1e4>)
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	d10f      	bne.n	800780e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80077ee:	4b54      	ldr	r3, [pc, #336]	@ (8007940 <RCCEx_PLLSAI1_Config+0x1e4>)
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	d109      	bne.n	800780e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80077fa:	2301      	movs	r3, #1
 80077fc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80077fe:	e006      	b.n	800780e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8007800:	2301      	movs	r3, #1
 8007802:	73fb      	strb	r3, [r7, #15]
      break;
 8007804:	e004      	b.n	8007810 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8007806:	bf00      	nop
 8007808:	e002      	b.n	8007810 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800780a:	bf00      	nop
 800780c:	e000      	b.n	8007810 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800780e:	bf00      	nop
    }

    if(status == HAL_OK)
 8007810:	7bfb      	ldrb	r3, [r7, #15]
 8007812:	2b00      	cmp	r3, #0
 8007814:	d10d      	bne.n	8007832 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8007816:	4b4a      	ldr	r3, [pc, #296]	@ (8007940 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007818:	68db      	ldr	r3, [r3, #12]
 800781a:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	6819      	ldr	r1, [r3, #0]
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	685b      	ldr	r3, [r3, #4]
 8007826:	3b01      	subs	r3, #1
 8007828:	011b      	lsls	r3, r3, #4
 800782a:	430b      	orrs	r3, r1
 800782c:	4944      	ldr	r1, [pc, #272]	@ (8007940 <RCCEx_PLLSAI1_Config+0x1e4>)
 800782e:	4313      	orrs	r3, r2
 8007830:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8007832:	7bfb      	ldrb	r3, [r7, #15]
 8007834:	2b00      	cmp	r3, #0
 8007836:	d17d      	bne.n	8007934 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8007838:	4b41      	ldr	r3, [pc, #260]	@ (8007940 <RCCEx_PLLSAI1_Config+0x1e4>)
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	4a40      	ldr	r2, [pc, #256]	@ (8007940 <RCCEx_PLLSAI1_Config+0x1e4>)
 800783e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8007842:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007844:	f7fd f814 	bl	8004870 <HAL_GetTick>
 8007848:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800784a:	e009      	b.n	8007860 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800784c:	f7fd f810 	bl	8004870 <HAL_GetTick>
 8007850:	4602      	mov	r2, r0
 8007852:	68bb      	ldr	r3, [r7, #8]
 8007854:	1ad3      	subs	r3, r2, r3
 8007856:	2b02      	cmp	r3, #2
 8007858:	d902      	bls.n	8007860 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800785a:	2303      	movs	r3, #3
 800785c:	73fb      	strb	r3, [r7, #15]
        break;
 800785e:	e005      	b.n	800786c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8007860:	4b37      	ldr	r3, [pc, #220]	@ (8007940 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007868:	2b00      	cmp	r3, #0
 800786a:	d1ef      	bne.n	800784c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800786c:	7bfb      	ldrb	r3, [r7, #15]
 800786e:	2b00      	cmp	r3, #0
 8007870:	d160      	bne.n	8007934 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8007872:	683b      	ldr	r3, [r7, #0]
 8007874:	2b00      	cmp	r3, #0
 8007876:	d111      	bne.n	800789c <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8007878:	4b31      	ldr	r3, [pc, #196]	@ (8007940 <RCCEx_PLLSAI1_Config+0x1e4>)
 800787a:	691b      	ldr	r3, [r3, #16]
 800787c:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8007880:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007884:	687a      	ldr	r2, [r7, #4]
 8007886:	6892      	ldr	r2, [r2, #8]
 8007888:	0211      	lsls	r1, r2, #8
 800788a:	687a      	ldr	r2, [r7, #4]
 800788c:	68d2      	ldr	r2, [r2, #12]
 800788e:	0912      	lsrs	r2, r2, #4
 8007890:	0452      	lsls	r2, r2, #17
 8007892:	430a      	orrs	r2, r1
 8007894:	492a      	ldr	r1, [pc, #168]	@ (8007940 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007896:	4313      	orrs	r3, r2
 8007898:	610b      	str	r3, [r1, #16]
 800789a:	e027      	b.n	80078ec <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800789c:	683b      	ldr	r3, [r7, #0]
 800789e:	2b01      	cmp	r3, #1
 80078a0:	d112      	bne.n	80078c8 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80078a2:	4b27      	ldr	r3, [pc, #156]	@ (8007940 <RCCEx_PLLSAI1_Config+0x1e4>)
 80078a4:	691b      	ldr	r3, [r3, #16]
 80078a6:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 80078aa:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80078ae:	687a      	ldr	r2, [r7, #4]
 80078b0:	6892      	ldr	r2, [r2, #8]
 80078b2:	0211      	lsls	r1, r2, #8
 80078b4:	687a      	ldr	r2, [r7, #4]
 80078b6:	6912      	ldr	r2, [r2, #16]
 80078b8:	0852      	lsrs	r2, r2, #1
 80078ba:	3a01      	subs	r2, #1
 80078bc:	0552      	lsls	r2, r2, #21
 80078be:	430a      	orrs	r2, r1
 80078c0:	491f      	ldr	r1, [pc, #124]	@ (8007940 <RCCEx_PLLSAI1_Config+0x1e4>)
 80078c2:	4313      	orrs	r3, r2
 80078c4:	610b      	str	r3, [r1, #16]
 80078c6:	e011      	b.n	80078ec <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80078c8:	4b1d      	ldr	r3, [pc, #116]	@ (8007940 <RCCEx_PLLSAI1_Config+0x1e4>)
 80078ca:	691b      	ldr	r3, [r3, #16]
 80078cc:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 80078d0:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80078d4:	687a      	ldr	r2, [r7, #4]
 80078d6:	6892      	ldr	r2, [r2, #8]
 80078d8:	0211      	lsls	r1, r2, #8
 80078da:	687a      	ldr	r2, [r7, #4]
 80078dc:	6952      	ldr	r2, [r2, #20]
 80078de:	0852      	lsrs	r2, r2, #1
 80078e0:	3a01      	subs	r2, #1
 80078e2:	0652      	lsls	r2, r2, #25
 80078e4:	430a      	orrs	r2, r1
 80078e6:	4916      	ldr	r1, [pc, #88]	@ (8007940 <RCCEx_PLLSAI1_Config+0x1e4>)
 80078e8:	4313      	orrs	r3, r2
 80078ea:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80078ec:	4b14      	ldr	r3, [pc, #80]	@ (8007940 <RCCEx_PLLSAI1_Config+0x1e4>)
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	4a13      	ldr	r2, [pc, #76]	@ (8007940 <RCCEx_PLLSAI1_Config+0x1e4>)
 80078f2:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80078f6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80078f8:	f7fc ffba 	bl	8004870 <HAL_GetTick>
 80078fc:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80078fe:	e009      	b.n	8007914 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8007900:	f7fc ffb6 	bl	8004870 <HAL_GetTick>
 8007904:	4602      	mov	r2, r0
 8007906:	68bb      	ldr	r3, [r7, #8]
 8007908:	1ad3      	subs	r3, r2, r3
 800790a:	2b02      	cmp	r3, #2
 800790c:	d902      	bls.n	8007914 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 800790e:	2303      	movs	r3, #3
 8007910:	73fb      	strb	r3, [r7, #15]
          break;
 8007912:	e005      	b.n	8007920 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8007914:	4b0a      	ldr	r3, [pc, #40]	@ (8007940 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800791c:	2b00      	cmp	r3, #0
 800791e:	d0ef      	beq.n	8007900 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8007920:	7bfb      	ldrb	r3, [r7, #15]
 8007922:	2b00      	cmp	r3, #0
 8007924:	d106      	bne.n	8007934 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8007926:	4b06      	ldr	r3, [pc, #24]	@ (8007940 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007928:	691a      	ldr	r2, [r3, #16]
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	699b      	ldr	r3, [r3, #24]
 800792e:	4904      	ldr	r1, [pc, #16]	@ (8007940 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007930:	4313      	orrs	r3, r2
 8007932:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8007934:	7bfb      	ldrb	r3, [r7, #15]
}
 8007936:	4618      	mov	r0, r3
 8007938:	3710      	adds	r7, #16
 800793a:	46bd      	mov	sp, r7
 800793c:	bd80      	pop	{r7, pc}
 800793e:	bf00      	nop
 8007940:	40021000 	.word	0x40021000

08007944 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8007944:	b580      	push	{r7, lr}
 8007946:	b084      	sub	sp, #16
 8007948:	af00      	add	r7, sp, #0
 800794a:	6078      	str	r0, [r7, #4]
 800794c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800794e:	2300      	movs	r3, #0
 8007950:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8007952:	4b6a      	ldr	r3, [pc, #424]	@ (8007afc <RCCEx_PLLSAI2_Config+0x1b8>)
 8007954:	68db      	ldr	r3, [r3, #12]
 8007956:	f003 0303 	and.w	r3, r3, #3
 800795a:	2b00      	cmp	r3, #0
 800795c:	d018      	beq.n	8007990 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800795e:	4b67      	ldr	r3, [pc, #412]	@ (8007afc <RCCEx_PLLSAI2_Config+0x1b8>)
 8007960:	68db      	ldr	r3, [r3, #12]
 8007962:	f003 0203 	and.w	r2, r3, #3
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	429a      	cmp	r2, r3
 800796c:	d10d      	bne.n	800798a <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	681b      	ldr	r3, [r3, #0]
       ||
 8007972:	2b00      	cmp	r3, #0
 8007974:	d009      	beq.n	800798a <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8007976:	4b61      	ldr	r3, [pc, #388]	@ (8007afc <RCCEx_PLLSAI2_Config+0x1b8>)
 8007978:	68db      	ldr	r3, [r3, #12]
 800797a:	091b      	lsrs	r3, r3, #4
 800797c:	f003 0307 	and.w	r3, r3, #7
 8007980:	1c5a      	adds	r2, r3, #1
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	685b      	ldr	r3, [r3, #4]
       ||
 8007986:	429a      	cmp	r2, r3
 8007988:	d047      	beq.n	8007a1a <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800798a:	2301      	movs	r3, #1
 800798c:	73fb      	strb	r3, [r7, #15]
 800798e:	e044      	b.n	8007a1a <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	2b03      	cmp	r3, #3
 8007996:	d018      	beq.n	80079ca <RCCEx_PLLSAI2_Config+0x86>
 8007998:	2b03      	cmp	r3, #3
 800799a:	d825      	bhi.n	80079e8 <RCCEx_PLLSAI2_Config+0xa4>
 800799c:	2b01      	cmp	r3, #1
 800799e:	d002      	beq.n	80079a6 <RCCEx_PLLSAI2_Config+0x62>
 80079a0:	2b02      	cmp	r3, #2
 80079a2:	d009      	beq.n	80079b8 <RCCEx_PLLSAI2_Config+0x74>
 80079a4:	e020      	b.n	80079e8 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80079a6:	4b55      	ldr	r3, [pc, #340]	@ (8007afc <RCCEx_PLLSAI2_Config+0x1b8>)
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	f003 0302 	and.w	r3, r3, #2
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	d11d      	bne.n	80079ee <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80079b2:	2301      	movs	r3, #1
 80079b4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80079b6:	e01a      	b.n	80079ee <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80079b8:	4b50      	ldr	r3, [pc, #320]	@ (8007afc <RCCEx_PLLSAI2_Config+0x1b8>)
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80079c0:	2b00      	cmp	r3, #0
 80079c2:	d116      	bne.n	80079f2 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80079c4:	2301      	movs	r3, #1
 80079c6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80079c8:	e013      	b.n	80079f2 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80079ca:	4b4c      	ldr	r3, [pc, #304]	@ (8007afc <RCCEx_PLLSAI2_Config+0x1b8>)
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80079d2:	2b00      	cmp	r3, #0
 80079d4:	d10f      	bne.n	80079f6 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80079d6:	4b49      	ldr	r3, [pc, #292]	@ (8007afc <RCCEx_PLLSAI2_Config+0x1b8>)
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80079de:	2b00      	cmp	r3, #0
 80079e0:	d109      	bne.n	80079f6 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80079e2:	2301      	movs	r3, #1
 80079e4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80079e6:	e006      	b.n	80079f6 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80079e8:	2301      	movs	r3, #1
 80079ea:	73fb      	strb	r3, [r7, #15]
      break;
 80079ec:	e004      	b.n	80079f8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80079ee:	bf00      	nop
 80079f0:	e002      	b.n	80079f8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80079f2:	bf00      	nop
 80079f4:	e000      	b.n	80079f8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80079f6:	bf00      	nop
    }

    if(status == HAL_OK)
 80079f8:	7bfb      	ldrb	r3, [r7, #15]
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	d10d      	bne.n	8007a1a <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80079fe:	4b3f      	ldr	r3, [pc, #252]	@ (8007afc <RCCEx_PLLSAI2_Config+0x1b8>)
 8007a00:	68db      	ldr	r3, [r3, #12]
 8007a02:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	6819      	ldr	r1, [r3, #0]
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	685b      	ldr	r3, [r3, #4]
 8007a0e:	3b01      	subs	r3, #1
 8007a10:	011b      	lsls	r3, r3, #4
 8007a12:	430b      	orrs	r3, r1
 8007a14:	4939      	ldr	r1, [pc, #228]	@ (8007afc <RCCEx_PLLSAI2_Config+0x1b8>)
 8007a16:	4313      	orrs	r3, r2
 8007a18:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8007a1a:	7bfb      	ldrb	r3, [r7, #15]
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	d167      	bne.n	8007af0 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8007a20:	4b36      	ldr	r3, [pc, #216]	@ (8007afc <RCCEx_PLLSAI2_Config+0x1b8>)
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	4a35      	ldr	r2, [pc, #212]	@ (8007afc <RCCEx_PLLSAI2_Config+0x1b8>)
 8007a26:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007a2a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007a2c:	f7fc ff20 	bl	8004870 <HAL_GetTick>
 8007a30:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8007a32:	e009      	b.n	8007a48 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8007a34:	f7fc ff1c 	bl	8004870 <HAL_GetTick>
 8007a38:	4602      	mov	r2, r0
 8007a3a:	68bb      	ldr	r3, [r7, #8]
 8007a3c:	1ad3      	subs	r3, r2, r3
 8007a3e:	2b02      	cmp	r3, #2
 8007a40:	d902      	bls.n	8007a48 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8007a42:	2303      	movs	r3, #3
 8007a44:	73fb      	strb	r3, [r7, #15]
        break;
 8007a46:	e005      	b.n	8007a54 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8007a48:	4b2c      	ldr	r3, [pc, #176]	@ (8007afc <RCCEx_PLLSAI2_Config+0x1b8>)
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007a50:	2b00      	cmp	r3, #0
 8007a52:	d1ef      	bne.n	8007a34 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8007a54:	7bfb      	ldrb	r3, [r7, #15]
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	d14a      	bne.n	8007af0 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8007a5a:	683b      	ldr	r3, [r7, #0]
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	d111      	bne.n	8007a84 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8007a60:	4b26      	ldr	r3, [pc, #152]	@ (8007afc <RCCEx_PLLSAI2_Config+0x1b8>)
 8007a62:	695b      	ldr	r3, [r3, #20]
 8007a64:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8007a68:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007a6c:	687a      	ldr	r2, [r7, #4]
 8007a6e:	6892      	ldr	r2, [r2, #8]
 8007a70:	0211      	lsls	r1, r2, #8
 8007a72:	687a      	ldr	r2, [r7, #4]
 8007a74:	68d2      	ldr	r2, [r2, #12]
 8007a76:	0912      	lsrs	r2, r2, #4
 8007a78:	0452      	lsls	r2, r2, #17
 8007a7a:	430a      	orrs	r2, r1
 8007a7c:	491f      	ldr	r1, [pc, #124]	@ (8007afc <RCCEx_PLLSAI2_Config+0x1b8>)
 8007a7e:	4313      	orrs	r3, r2
 8007a80:	614b      	str	r3, [r1, #20]
 8007a82:	e011      	b.n	8007aa8 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8007a84:	4b1d      	ldr	r3, [pc, #116]	@ (8007afc <RCCEx_PLLSAI2_Config+0x1b8>)
 8007a86:	695b      	ldr	r3, [r3, #20]
 8007a88:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8007a8c:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8007a90:	687a      	ldr	r2, [r7, #4]
 8007a92:	6892      	ldr	r2, [r2, #8]
 8007a94:	0211      	lsls	r1, r2, #8
 8007a96:	687a      	ldr	r2, [r7, #4]
 8007a98:	6912      	ldr	r2, [r2, #16]
 8007a9a:	0852      	lsrs	r2, r2, #1
 8007a9c:	3a01      	subs	r2, #1
 8007a9e:	0652      	lsls	r2, r2, #25
 8007aa0:	430a      	orrs	r2, r1
 8007aa2:	4916      	ldr	r1, [pc, #88]	@ (8007afc <RCCEx_PLLSAI2_Config+0x1b8>)
 8007aa4:	4313      	orrs	r3, r2
 8007aa6:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8007aa8:	4b14      	ldr	r3, [pc, #80]	@ (8007afc <RCCEx_PLLSAI2_Config+0x1b8>)
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	4a13      	ldr	r2, [pc, #76]	@ (8007afc <RCCEx_PLLSAI2_Config+0x1b8>)
 8007aae:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007ab2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007ab4:	f7fc fedc 	bl	8004870 <HAL_GetTick>
 8007ab8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8007aba:	e009      	b.n	8007ad0 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8007abc:	f7fc fed8 	bl	8004870 <HAL_GetTick>
 8007ac0:	4602      	mov	r2, r0
 8007ac2:	68bb      	ldr	r3, [r7, #8]
 8007ac4:	1ad3      	subs	r3, r2, r3
 8007ac6:	2b02      	cmp	r3, #2
 8007ac8:	d902      	bls.n	8007ad0 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8007aca:	2303      	movs	r3, #3
 8007acc:	73fb      	strb	r3, [r7, #15]
          break;
 8007ace:	e005      	b.n	8007adc <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8007ad0:	4b0a      	ldr	r3, [pc, #40]	@ (8007afc <RCCEx_PLLSAI2_Config+0x1b8>)
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	d0ef      	beq.n	8007abc <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8007adc:	7bfb      	ldrb	r3, [r7, #15]
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	d106      	bne.n	8007af0 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8007ae2:	4b06      	ldr	r3, [pc, #24]	@ (8007afc <RCCEx_PLLSAI2_Config+0x1b8>)
 8007ae4:	695a      	ldr	r2, [r3, #20]
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	695b      	ldr	r3, [r3, #20]
 8007aea:	4904      	ldr	r1, [pc, #16]	@ (8007afc <RCCEx_PLLSAI2_Config+0x1b8>)
 8007aec:	4313      	orrs	r3, r2
 8007aee:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8007af0:	7bfb      	ldrb	r3, [r7, #15]
}
 8007af2:	4618      	mov	r0, r3
 8007af4:	3710      	adds	r7, #16
 8007af6:	46bd      	mov	sp, r7
 8007af8:	bd80      	pop	{r7, pc}
 8007afa:	bf00      	nop
 8007afc:	40021000 	.word	0x40021000

08007b00 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007b00:	b580      	push	{r7, lr}
 8007b02:	b084      	sub	sp, #16
 8007b04:	af00      	add	r7, sp, #0
 8007b06:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	d101      	bne.n	8007b12 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007b0e:	2301      	movs	r3, #1
 8007b10:	e095      	b.n	8007c3e <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	d108      	bne.n	8007b2c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	685b      	ldr	r3, [r3, #4]
 8007b1e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007b22:	d009      	beq.n	8007b38 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	2200      	movs	r2, #0
 8007b28:	61da      	str	r2, [r3, #28]
 8007b2a:	e005      	b.n	8007b38 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	2200      	movs	r2, #0
 8007b30:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	2200      	movs	r2, #0
 8007b36:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	2200      	movs	r2, #0
 8007b3c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8007b44:	b2db      	uxtb	r3, r3
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	d106      	bne.n	8007b58 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	2200      	movs	r2, #0
 8007b4e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007b52:	6878      	ldr	r0, [r7, #4]
 8007b54:	f000 f877 	bl	8007c46 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	2202      	movs	r2, #2
 8007b5c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	681a      	ldr	r2, [r3, #0]
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007b6e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	68db      	ldr	r3, [r3, #12]
 8007b74:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8007b78:	d902      	bls.n	8007b80 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8007b7a:	2300      	movs	r3, #0
 8007b7c:	60fb      	str	r3, [r7, #12]
 8007b7e:	e002      	b.n	8007b86 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8007b80:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8007b84:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	68db      	ldr	r3, [r3, #12]
 8007b8a:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8007b8e:	d007      	beq.n	8007ba0 <HAL_SPI_Init+0xa0>
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	68db      	ldr	r3, [r3, #12]
 8007b94:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8007b98:	d002      	beq.n	8007ba0 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	2200      	movs	r2, #0
 8007b9e:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	685b      	ldr	r3, [r3, #4]
 8007ba4:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	689b      	ldr	r3, [r3, #8]
 8007bac:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8007bb0:	431a      	orrs	r2, r3
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	691b      	ldr	r3, [r3, #16]
 8007bb6:	f003 0302 	and.w	r3, r3, #2
 8007bba:	431a      	orrs	r2, r3
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	695b      	ldr	r3, [r3, #20]
 8007bc0:	f003 0301 	and.w	r3, r3, #1
 8007bc4:	431a      	orrs	r2, r3
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	699b      	ldr	r3, [r3, #24]
 8007bca:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007bce:	431a      	orrs	r2, r3
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	69db      	ldr	r3, [r3, #28]
 8007bd4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007bd8:	431a      	orrs	r2, r3
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	6a1b      	ldr	r3, [r3, #32]
 8007bde:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007be2:	ea42 0103 	orr.w	r1, r2, r3
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007bea:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	430a      	orrs	r2, r1
 8007bf4:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	699b      	ldr	r3, [r3, #24]
 8007bfa:	0c1b      	lsrs	r3, r3, #16
 8007bfc:	f003 0204 	and.w	r2, r3, #4
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007c04:	f003 0310 	and.w	r3, r3, #16
 8007c08:	431a      	orrs	r2, r3
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007c0e:	f003 0308 	and.w	r3, r3, #8
 8007c12:	431a      	orrs	r2, r3
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	68db      	ldr	r3, [r3, #12]
 8007c18:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8007c1c:	ea42 0103 	orr.w	r1, r2, r3
 8007c20:	68fb      	ldr	r3, [r7, #12]
 8007c22:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	430a      	orrs	r2, r1
 8007c2c:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	2200      	movs	r2, #0
 8007c32:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	2201      	movs	r2, #1
 8007c38:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8007c3c:	2300      	movs	r3, #0
}
 8007c3e:	4618      	mov	r0, r3
 8007c40:	3710      	adds	r7, #16
 8007c42:	46bd      	mov	sp, r7
 8007c44:	bd80      	pop	{r7, pc}

08007c46 <HAL_SPI_MspInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_MspInit(SPI_HandleTypeDef *hspi)
{
 8007c46:	b480      	push	{r7}
 8007c48:	b083      	sub	sp, #12
 8007c4a:	af00      	add	r7, sp, #0
 8007c4c:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_MspInit should be implemented in the user file
   */
}
 8007c4e:	bf00      	nop
 8007c50:	370c      	adds	r7, #12
 8007c52:	46bd      	mov	sp, r7
 8007c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c58:	4770      	bx	lr

08007c5a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8007c5a:	b580      	push	{r7, lr}
 8007c5c:	b08a      	sub	sp, #40	@ 0x28
 8007c5e:	af00      	add	r7, sp, #0
 8007c60:	60f8      	str	r0, [r7, #12]
 8007c62:	60b9      	str	r1, [r7, #8]
 8007c64:	607a      	str	r2, [r7, #4]
 8007c66:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8007c68:	2301      	movs	r3, #1
 8007c6a:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007c6c:	f7fc fe00 	bl	8004870 <HAL_GetTick>
 8007c70:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8007c72:	68fb      	ldr	r3, [r7, #12]
 8007c74:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8007c78:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8007c7a:	68fb      	ldr	r3, [r7, #12]
 8007c7c:	685b      	ldr	r3, [r3, #4]
 8007c7e:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8007c80:	887b      	ldrh	r3, [r7, #2]
 8007c82:	82fb      	strh	r3, [r7, #22]
  initial_RxXferCount = Size;
 8007c84:	887b      	ldrh	r3, [r7, #2]
 8007c86:	82bb      	strh	r3, [r7, #20]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8007c88:	7ffb      	ldrb	r3, [r7, #31]
 8007c8a:	2b01      	cmp	r3, #1
 8007c8c:	d00c      	beq.n	8007ca8 <HAL_SPI_TransmitReceive+0x4e>
 8007c8e:	69bb      	ldr	r3, [r7, #24]
 8007c90:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007c94:	d106      	bne.n	8007ca4 <HAL_SPI_TransmitReceive+0x4a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8007c96:	68fb      	ldr	r3, [r7, #12]
 8007c98:	689b      	ldr	r3, [r3, #8]
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	d102      	bne.n	8007ca4 <HAL_SPI_TransmitReceive+0x4a>
 8007c9e:	7ffb      	ldrb	r3, [r7, #31]
 8007ca0:	2b04      	cmp	r3, #4
 8007ca2:	d001      	beq.n	8007ca8 <HAL_SPI_TransmitReceive+0x4e>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8007ca4:	2302      	movs	r3, #2
 8007ca6:	e1f3      	b.n	8008090 <HAL_SPI_TransmitReceive+0x436>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8007ca8:	68bb      	ldr	r3, [r7, #8]
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	d005      	beq.n	8007cba <HAL_SPI_TransmitReceive+0x60>
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	2b00      	cmp	r3, #0
 8007cb2:	d002      	beq.n	8007cba <HAL_SPI_TransmitReceive+0x60>
 8007cb4:	887b      	ldrh	r3, [r7, #2]
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	d101      	bne.n	8007cbe <HAL_SPI_TransmitReceive+0x64>
  {
    return HAL_ERROR;
 8007cba:	2301      	movs	r3, #1
 8007cbc:	e1e8      	b.n	8008090 <HAL_SPI_TransmitReceive+0x436>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007cbe:	68fb      	ldr	r3, [r7, #12]
 8007cc0:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8007cc4:	2b01      	cmp	r3, #1
 8007cc6:	d101      	bne.n	8007ccc <HAL_SPI_TransmitReceive+0x72>
 8007cc8:	2302      	movs	r3, #2
 8007cca:	e1e1      	b.n	8008090 <HAL_SPI_TransmitReceive+0x436>
 8007ccc:	68fb      	ldr	r3, [r7, #12]
 8007cce:	2201      	movs	r2, #1
 8007cd0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007cd4:	68fb      	ldr	r3, [r7, #12]
 8007cd6:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8007cda:	b2db      	uxtb	r3, r3
 8007cdc:	2b04      	cmp	r3, #4
 8007cde:	d003      	beq.n	8007ce8 <HAL_SPI_TransmitReceive+0x8e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8007ce0:	68fb      	ldr	r3, [r7, #12]
 8007ce2:	2205      	movs	r2, #5
 8007ce4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007ce8:	68fb      	ldr	r3, [r7, #12]
 8007cea:	2200      	movs	r2, #0
 8007cec:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8007cee:	68fb      	ldr	r3, [r7, #12]
 8007cf0:	687a      	ldr	r2, [r7, #4]
 8007cf2:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 8007cf4:	68fb      	ldr	r3, [r7, #12]
 8007cf6:	887a      	ldrh	r2, [r7, #2]
 8007cf8:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 8007cfc:	68fb      	ldr	r3, [r7, #12]
 8007cfe:	887a      	ldrh	r2, [r7, #2]
 8007d00:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8007d04:	68fb      	ldr	r3, [r7, #12]
 8007d06:	68ba      	ldr	r2, [r7, #8]
 8007d08:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 8007d0a:	68fb      	ldr	r3, [r7, #12]
 8007d0c:	887a      	ldrh	r2, [r7, #2]
 8007d0e:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 8007d10:	68fb      	ldr	r3, [r7, #12]
 8007d12:	887a      	ldrh	r2, [r7, #2]
 8007d14:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8007d16:	68fb      	ldr	r3, [r7, #12]
 8007d18:	2200      	movs	r2, #0
 8007d1a:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	2200      	movs	r2, #0
 8007d20:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8007d22:	68fb      	ldr	r3, [r7, #12]
 8007d24:	68db      	ldr	r3, [r3, #12]
 8007d26:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8007d2a:	d802      	bhi.n	8007d32 <HAL_SPI_TransmitReceive+0xd8>
 8007d2c:	8abb      	ldrh	r3, [r7, #20]
 8007d2e:	2b01      	cmp	r3, #1
 8007d30:	d908      	bls.n	8007d44 <HAL_SPI_TransmitReceive+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007d32:	68fb      	ldr	r3, [r7, #12]
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	685a      	ldr	r2, [r3, #4]
 8007d38:	68fb      	ldr	r3, [r7, #12]
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8007d40:	605a      	str	r2, [r3, #4]
 8007d42:	e007      	b.n	8007d54 <HAL_SPI_TransmitReceive+0xfa>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007d44:	68fb      	ldr	r3, [r7, #12]
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	685a      	ldr	r2, [r3, #4]
 8007d4a:	68fb      	ldr	r3, [r7, #12]
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8007d52:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007d54:	68fb      	ldr	r3, [r7, #12]
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007d5e:	2b40      	cmp	r3, #64	@ 0x40
 8007d60:	d007      	beq.n	8007d72 <HAL_SPI_TransmitReceive+0x118>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007d62:	68fb      	ldr	r3, [r7, #12]
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	681a      	ldr	r2, [r3, #0]
 8007d68:	68fb      	ldr	r3, [r7, #12]
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007d70:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007d72:	68fb      	ldr	r3, [r7, #12]
 8007d74:	68db      	ldr	r3, [r3, #12]
 8007d76:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8007d7a:	f240 8083 	bls.w	8007e84 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007d7e:	68fb      	ldr	r3, [r7, #12]
 8007d80:	685b      	ldr	r3, [r3, #4]
 8007d82:	2b00      	cmp	r3, #0
 8007d84:	d002      	beq.n	8007d8c <HAL_SPI_TransmitReceive+0x132>
 8007d86:	8afb      	ldrh	r3, [r7, #22]
 8007d88:	2b01      	cmp	r3, #1
 8007d8a:	d16f      	bne.n	8007e6c <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8007d8c:	68fb      	ldr	r3, [r7, #12]
 8007d8e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007d90:	881a      	ldrh	r2, [r3, #0]
 8007d92:	68fb      	ldr	r3, [r7, #12]
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007d98:	68fb      	ldr	r3, [r7, #12]
 8007d9a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007d9c:	1c9a      	adds	r2, r3, #2
 8007d9e:	68fb      	ldr	r3, [r7, #12]
 8007da0:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8007da2:	68fb      	ldr	r3, [r7, #12]
 8007da4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007da6:	b29b      	uxth	r3, r3
 8007da8:	3b01      	subs	r3, #1
 8007daa:	b29a      	uxth	r2, r3
 8007dac:	68fb      	ldr	r3, [r7, #12]
 8007dae:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007db0:	e05c      	b.n	8007e6c <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007db2:	68fb      	ldr	r3, [r7, #12]
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	689b      	ldr	r3, [r3, #8]
 8007db8:	f003 0302 	and.w	r3, r3, #2
 8007dbc:	2b02      	cmp	r3, #2
 8007dbe:	d11b      	bne.n	8007df8 <HAL_SPI_TransmitReceive+0x19e>
 8007dc0:	68fb      	ldr	r3, [r7, #12]
 8007dc2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007dc4:	b29b      	uxth	r3, r3
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	d016      	beq.n	8007df8 <HAL_SPI_TransmitReceive+0x19e>
 8007dca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007dcc:	2b01      	cmp	r3, #1
 8007dce:	d113      	bne.n	8007df8 <HAL_SPI_TransmitReceive+0x19e>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8007dd0:	68fb      	ldr	r3, [r7, #12]
 8007dd2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007dd4:	881a      	ldrh	r2, [r3, #0]
 8007dd6:	68fb      	ldr	r3, [r7, #12]
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007ddc:	68fb      	ldr	r3, [r7, #12]
 8007dde:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007de0:	1c9a      	adds	r2, r3, #2
 8007de2:	68fb      	ldr	r3, [r7, #12]
 8007de4:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8007de6:	68fb      	ldr	r3, [r7, #12]
 8007de8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007dea:	b29b      	uxth	r3, r3
 8007dec:	3b01      	subs	r3, #1
 8007dee:	b29a      	uxth	r2, r3
 8007df0:	68fb      	ldr	r3, [r7, #12]
 8007df2:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007df4:	2300      	movs	r3, #0
 8007df6:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007df8:	68fb      	ldr	r3, [r7, #12]
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	689b      	ldr	r3, [r3, #8]
 8007dfe:	f003 0301 	and.w	r3, r3, #1
 8007e02:	2b01      	cmp	r3, #1
 8007e04:	d11c      	bne.n	8007e40 <HAL_SPI_TransmitReceive+0x1e6>
 8007e06:	68fb      	ldr	r3, [r7, #12]
 8007e08:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007e0c:	b29b      	uxth	r3, r3
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	d016      	beq.n	8007e40 <HAL_SPI_TransmitReceive+0x1e6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007e12:	68fb      	ldr	r3, [r7, #12]
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	68da      	ldr	r2, [r3, #12]
 8007e18:	68fb      	ldr	r3, [r7, #12]
 8007e1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007e1c:	b292      	uxth	r2, r2
 8007e1e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007e20:	68fb      	ldr	r3, [r7, #12]
 8007e22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007e24:	1c9a      	adds	r2, r3, #2
 8007e26:	68fb      	ldr	r3, [r7, #12]
 8007e28:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8007e2a:	68fb      	ldr	r3, [r7, #12]
 8007e2c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007e30:	b29b      	uxth	r3, r3
 8007e32:	3b01      	subs	r3, #1
 8007e34:	b29a      	uxth	r2, r3
 8007e36:	68fb      	ldr	r3, [r7, #12]
 8007e38:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007e3c:	2301      	movs	r3, #1
 8007e3e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8007e40:	f7fc fd16 	bl	8004870 <HAL_GetTick>
 8007e44:	4602      	mov	r2, r0
 8007e46:	6a3b      	ldr	r3, [r7, #32]
 8007e48:	1ad3      	subs	r3, r2, r3
 8007e4a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007e4c:	429a      	cmp	r2, r3
 8007e4e:	d80d      	bhi.n	8007e6c <HAL_SPI_TransmitReceive+0x212>
 8007e50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e56:	d009      	beq.n	8007e6c <HAL_SPI_TransmitReceive+0x212>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8007e58:	68fb      	ldr	r3, [r7, #12]
 8007e5a:	2201      	movs	r2, #1
 8007e5c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 8007e60:	68fb      	ldr	r3, [r7, #12]
 8007e62:	2200      	movs	r2, #0
 8007e64:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 8007e68:	2303      	movs	r3, #3
 8007e6a:	e111      	b.n	8008090 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007e6c:	68fb      	ldr	r3, [r7, #12]
 8007e6e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007e70:	b29b      	uxth	r3, r3
 8007e72:	2b00      	cmp	r3, #0
 8007e74:	d19d      	bne.n	8007db2 <HAL_SPI_TransmitReceive+0x158>
 8007e76:	68fb      	ldr	r3, [r7, #12]
 8007e78:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007e7c:	b29b      	uxth	r3, r3
 8007e7e:	2b00      	cmp	r3, #0
 8007e80:	d197      	bne.n	8007db2 <HAL_SPI_TransmitReceive+0x158>
 8007e82:	e0e5      	b.n	8008050 <HAL_SPI_TransmitReceive+0x3f6>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007e84:	68fb      	ldr	r3, [r7, #12]
 8007e86:	685b      	ldr	r3, [r3, #4]
 8007e88:	2b00      	cmp	r3, #0
 8007e8a:	d003      	beq.n	8007e94 <HAL_SPI_TransmitReceive+0x23a>
 8007e8c:	8afb      	ldrh	r3, [r7, #22]
 8007e8e:	2b01      	cmp	r3, #1
 8007e90:	f040 80d1 	bne.w	8008036 <HAL_SPI_TransmitReceive+0x3dc>
    {
      if (hspi->TxXferCount > 1U)
 8007e94:	68fb      	ldr	r3, [r7, #12]
 8007e96:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007e98:	b29b      	uxth	r3, r3
 8007e9a:	2b01      	cmp	r3, #1
 8007e9c:	d912      	bls.n	8007ec4 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8007e9e:	68fb      	ldr	r3, [r7, #12]
 8007ea0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007ea2:	881a      	ldrh	r2, [r3, #0]
 8007ea4:	68fb      	ldr	r3, [r7, #12]
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007eaa:	68fb      	ldr	r3, [r7, #12]
 8007eac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007eae:	1c9a      	adds	r2, r3, #2
 8007eb0:	68fb      	ldr	r3, [r7, #12]
 8007eb2:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8007eb4:	68fb      	ldr	r3, [r7, #12]
 8007eb6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007eb8:	b29b      	uxth	r3, r3
 8007eba:	3b02      	subs	r3, #2
 8007ebc:	b29a      	uxth	r2, r3
 8007ebe:	68fb      	ldr	r3, [r7, #12]
 8007ec0:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8007ec2:	e0b8      	b.n	8008036 <HAL_SPI_TransmitReceive+0x3dc>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8007ec4:	68fb      	ldr	r3, [r7, #12]
 8007ec6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007ec8:	68fb      	ldr	r3, [r7, #12]
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	330c      	adds	r3, #12
 8007ece:	7812      	ldrb	r2, [r2, #0]
 8007ed0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8007ed2:	68fb      	ldr	r3, [r7, #12]
 8007ed4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007ed6:	1c5a      	adds	r2, r3, #1
 8007ed8:	68fb      	ldr	r3, [r7, #12]
 8007eda:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8007edc:	68fb      	ldr	r3, [r7, #12]
 8007ede:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007ee0:	b29b      	uxth	r3, r3
 8007ee2:	3b01      	subs	r3, #1
 8007ee4:	b29a      	uxth	r2, r3
 8007ee6:	68fb      	ldr	r3, [r7, #12]
 8007ee8:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007eea:	e0a4      	b.n	8008036 <HAL_SPI_TransmitReceive+0x3dc>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007eec:	68fb      	ldr	r3, [r7, #12]
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	689b      	ldr	r3, [r3, #8]
 8007ef2:	f003 0302 	and.w	r3, r3, #2
 8007ef6:	2b02      	cmp	r3, #2
 8007ef8:	d134      	bne.n	8007f64 <HAL_SPI_TransmitReceive+0x30a>
 8007efa:	68fb      	ldr	r3, [r7, #12]
 8007efc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007efe:	b29b      	uxth	r3, r3
 8007f00:	2b00      	cmp	r3, #0
 8007f02:	d02f      	beq.n	8007f64 <HAL_SPI_TransmitReceive+0x30a>
 8007f04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f06:	2b01      	cmp	r3, #1
 8007f08:	d12c      	bne.n	8007f64 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8007f0a:	68fb      	ldr	r3, [r7, #12]
 8007f0c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007f0e:	b29b      	uxth	r3, r3
 8007f10:	2b01      	cmp	r3, #1
 8007f12:	d912      	bls.n	8007f3a <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8007f14:	68fb      	ldr	r3, [r7, #12]
 8007f16:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007f18:	881a      	ldrh	r2, [r3, #0]
 8007f1a:	68fb      	ldr	r3, [r7, #12]
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8007f20:	68fb      	ldr	r3, [r7, #12]
 8007f22:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007f24:	1c9a      	adds	r2, r3, #2
 8007f26:	68fb      	ldr	r3, [r7, #12]
 8007f28:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8007f2a:	68fb      	ldr	r3, [r7, #12]
 8007f2c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007f2e:	b29b      	uxth	r3, r3
 8007f30:	3b02      	subs	r3, #2
 8007f32:	b29a      	uxth	r2, r3
 8007f34:	68fb      	ldr	r3, [r7, #12]
 8007f36:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8007f38:	e012      	b.n	8007f60 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8007f3a:	68fb      	ldr	r3, [r7, #12]
 8007f3c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007f3e:	68fb      	ldr	r3, [r7, #12]
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	330c      	adds	r3, #12
 8007f44:	7812      	ldrb	r2, [r2, #0]
 8007f46:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8007f48:	68fb      	ldr	r3, [r7, #12]
 8007f4a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007f4c:	1c5a      	adds	r2, r3, #1
 8007f4e:	68fb      	ldr	r3, [r7, #12]
 8007f50:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8007f52:	68fb      	ldr	r3, [r7, #12]
 8007f54:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007f56:	b29b      	uxth	r3, r3
 8007f58:	3b01      	subs	r3, #1
 8007f5a:	b29a      	uxth	r2, r3
 8007f5c:	68fb      	ldr	r3, [r7, #12]
 8007f5e:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007f60:	2300      	movs	r3, #0
 8007f62:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	689b      	ldr	r3, [r3, #8]
 8007f6a:	f003 0301 	and.w	r3, r3, #1
 8007f6e:	2b01      	cmp	r3, #1
 8007f70:	d148      	bne.n	8008004 <HAL_SPI_TransmitReceive+0x3aa>
 8007f72:	68fb      	ldr	r3, [r7, #12]
 8007f74:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007f78:	b29b      	uxth	r3, r3
 8007f7a:	2b00      	cmp	r3, #0
 8007f7c:	d042      	beq.n	8008004 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8007f7e:	68fb      	ldr	r3, [r7, #12]
 8007f80:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007f84:	b29b      	uxth	r3, r3
 8007f86:	2b01      	cmp	r3, #1
 8007f88:	d923      	bls.n	8007fd2 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007f8a:	68fb      	ldr	r3, [r7, #12]
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	68da      	ldr	r2, [r3, #12]
 8007f90:	68fb      	ldr	r3, [r7, #12]
 8007f92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007f94:	b292      	uxth	r2, r2
 8007f96:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8007f98:	68fb      	ldr	r3, [r7, #12]
 8007f9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007f9c:	1c9a      	adds	r2, r3, #2
 8007f9e:	68fb      	ldr	r3, [r7, #12]
 8007fa0:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 8007fa2:	68fb      	ldr	r3, [r7, #12]
 8007fa4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007fa8:	b29b      	uxth	r3, r3
 8007faa:	3b02      	subs	r3, #2
 8007fac:	b29a      	uxth	r2, r3
 8007fae:	68fb      	ldr	r3, [r7, #12]
 8007fb0:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 8007fb4:	68fb      	ldr	r3, [r7, #12]
 8007fb6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007fba:	b29b      	uxth	r3, r3
 8007fbc:	2b01      	cmp	r3, #1
 8007fbe:	d81f      	bhi.n	8008000 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007fc0:	68fb      	ldr	r3, [r7, #12]
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	685a      	ldr	r2, [r3, #4]
 8007fc6:	68fb      	ldr	r3, [r7, #12]
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8007fce:	605a      	str	r2, [r3, #4]
 8007fd0:	e016      	b.n	8008000 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8007fd2:	68fb      	ldr	r3, [r7, #12]
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	f103 020c 	add.w	r2, r3, #12
 8007fda:	68fb      	ldr	r3, [r7, #12]
 8007fdc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007fde:	7812      	ldrb	r2, [r2, #0]
 8007fe0:	b2d2      	uxtb	r2, r2
 8007fe2:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8007fe4:	68fb      	ldr	r3, [r7, #12]
 8007fe6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007fe8:	1c5a      	adds	r2, r3, #1
 8007fea:	68fb      	ldr	r3, [r7, #12]
 8007fec:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 8007fee:	68fb      	ldr	r3, [r7, #12]
 8007ff0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007ff4:	b29b      	uxth	r3, r3
 8007ff6:	3b01      	subs	r3, #1
 8007ff8:	b29a      	uxth	r2, r3
 8007ffa:	68fb      	ldr	r3, [r7, #12]
 8007ffc:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8008000:	2301      	movs	r3, #1
 8008002:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8008004:	f7fc fc34 	bl	8004870 <HAL_GetTick>
 8008008:	4602      	mov	r2, r0
 800800a:	6a3b      	ldr	r3, [r7, #32]
 800800c:	1ad3      	subs	r3, r2, r3
 800800e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008010:	429a      	cmp	r2, r3
 8008012:	d803      	bhi.n	800801c <HAL_SPI_TransmitReceive+0x3c2>
 8008014:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008016:	f1b3 3fff 	cmp.w	r3, #4294967295
 800801a:	d102      	bne.n	8008022 <HAL_SPI_TransmitReceive+0x3c8>
 800801c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800801e:	2b00      	cmp	r3, #0
 8008020:	d109      	bne.n	8008036 <HAL_SPI_TransmitReceive+0x3dc>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8008022:	68fb      	ldr	r3, [r7, #12]
 8008024:	2201      	movs	r2, #1
 8008026:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 800802a:	68fb      	ldr	r3, [r7, #12]
 800802c:	2200      	movs	r2, #0
 800802e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 8008032:	2303      	movs	r3, #3
 8008034:	e02c      	b.n	8008090 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008036:	68fb      	ldr	r3, [r7, #12]
 8008038:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800803a:	b29b      	uxth	r3, r3
 800803c:	2b00      	cmp	r3, #0
 800803e:	f47f af55 	bne.w	8007eec <HAL_SPI_TransmitReceive+0x292>
 8008042:	68fb      	ldr	r3, [r7, #12]
 8008044:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8008048:	b29b      	uxth	r3, r3
 800804a:	2b00      	cmp	r3, #0
 800804c:	f47f af4e 	bne.w	8007eec <HAL_SPI_TransmitReceive+0x292>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008050:	6a3a      	ldr	r2, [r7, #32]
 8008052:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8008054:	68f8      	ldr	r0, [r7, #12]
 8008056:	f000 f94b 	bl	80082f0 <SPI_EndRxTxTransaction>
 800805a:	4603      	mov	r3, r0
 800805c:	2b00      	cmp	r3, #0
 800805e:	d008      	beq.n	8008072 <HAL_SPI_TransmitReceive+0x418>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008060:	68fb      	ldr	r3, [r7, #12]
 8008062:	2220      	movs	r2, #32
 8008064:	661a      	str	r2, [r3, #96]	@ 0x60
    __HAL_UNLOCK(hspi);
 8008066:	68fb      	ldr	r3, [r7, #12]
 8008068:	2200      	movs	r2, #0
 800806a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 800806e:	2301      	movs	r3, #1
 8008070:	e00e      	b.n	8008090 <HAL_SPI_TransmitReceive+0x436>
  }


  hspi->State = HAL_SPI_STATE_READY;
 8008072:	68fb      	ldr	r3, [r7, #12]
 8008074:	2201      	movs	r2, #1
 8008076:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800807a:	68fb      	ldr	r3, [r7, #12]
 800807c:	2200      	movs	r2, #0
 800807e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008082:	68fb      	ldr	r3, [r7, #12]
 8008084:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008086:	2b00      	cmp	r3, #0
 8008088:	d001      	beq.n	800808e <HAL_SPI_TransmitReceive+0x434>
  {
    return HAL_ERROR;
 800808a:	2301      	movs	r3, #1
 800808c:	e000      	b.n	8008090 <HAL_SPI_TransmitReceive+0x436>
  }
  else
  {
    return HAL_OK;
 800808e:	2300      	movs	r3, #0
  }
}
 8008090:	4618      	mov	r0, r3
 8008092:	3728      	adds	r7, #40	@ 0x28
 8008094:	46bd      	mov	sp, r7
 8008096:	bd80      	pop	{r7, pc}

08008098 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(const SPI_HandleTypeDef *hspi)
{
 8008098:	b480      	push	{r7}
 800809a:	b083      	sub	sp, #12
 800809c:	af00      	add	r7, sp, #0
 800809e:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80080a6:	b2db      	uxtb	r3, r3
}
 80080a8:	4618      	mov	r0, r3
 80080aa:	370c      	adds	r7, #12
 80080ac:	46bd      	mov	sp, r7
 80080ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080b2:	4770      	bx	lr

080080b4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80080b4:	b580      	push	{r7, lr}
 80080b6:	b088      	sub	sp, #32
 80080b8:	af00      	add	r7, sp, #0
 80080ba:	60f8      	str	r0, [r7, #12]
 80080bc:	60b9      	str	r1, [r7, #8]
 80080be:	603b      	str	r3, [r7, #0]
 80080c0:	4613      	mov	r3, r2
 80080c2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80080c4:	f7fc fbd4 	bl	8004870 <HAL_GetTick>
 80080c8:	4602      	mov	r2, r0
 80080ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80080cc:	1a9b      	subs	r3, r3, r2
 80080ce:	683a      	ldr	r2, [r7, #0]
 80080d0:	4413      	add	r3, r2
 80080d2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80080d4:	f7fc fbcc 	bl	8004870 <HAL_GetTick>
 80080d8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80080da:	4b39      	ldr	r3, [pc, #228]	@ (80081c0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	015b      	lsls	r3, r3, #5
 80080e0:	0d1b      	lsrs	r3, r3, #20
 80080e2:	69fa      	ldr	r2, [r7, #28]
 80080e4:	fb02 f303 	mul.w	r3, r2, r3
 80080e8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80080ea:	e054      	b.n	8008196 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80080ec:	683b      	ldr	r3, [r7, #0]
 80080ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80080f2:	d050      	beq.n	8008196 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80080f4:	f7fc fbbc 	bl	8004870 <HAL_GetTick>
 80080f8:	4602      	mov	r2, r0
 80080fa:	69bb      	ldr	r3, [r7, #24]
 80080fc:	1ad3      	subs	r3, r2, r3
 80080fe:	69fa      	ldr	r2, [r7, #28]
 8008100:	429a      	cmp	r2, r3
 8008102:	d902      	bls.n	800810a <SPI_WaitFlagStateUntilTimeout+0x56>
 8008104:	69fb      	ldr	r3, [r7, #28]
 8008106:	2b00      	cmp	r3, #0
 8008108:	d13d      	bne.n	8008186 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800810a:	68fb      	ldr	r3, [r7, #12]
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	685a      	ldr	r2, [r3, #4]
 8008110:	68fb      	ldr	r3, [r7, #12]
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8008118:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800811a:	68fb      	ldr	r3, [r7, #12]
 800811c:	685b      	ldr	r3, [r3, #4]
 800811e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8008122:	d111      	bne.n	8008148 <SPI_WaitFlagStateUntilTimeout+0x94>
 8008124:	68fb      	ldr	r3, [r7, #12]
 8008126:	689b      	ldr	r3, [r3, #8]
 8008128:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800812c:	d004      	beq.n	8008138 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800812e:	68fb      	ldr	r3, [r7, #12]
 8008130:	689b      	ldr	r3, [r3, #8]
 8008132:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008136:	d107      	bne.n	8008148 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8008138:	68fb      	ldr	r3, [r7, #12]
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	681a      	ldr	r2, [r3, #0]
 800813e:	68fb      	ldr	r3, [r7, #12]
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008146:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008148:	68fb      	ldr	r3, [r7, #12]
 800814a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800814c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008150:	d10f      	bne.n	8008172 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8008152:	68fb      	ldr	r3, [r7, #12]
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	681a      	ldr	r2, [r3, #0]
 8008158:	68fb      	ldr	r3, [r7, #12]
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8008160:	601a      	str	r2, [r3, #0]
 8008162:	68fb      	ldr	r3, [r7, #12]
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	681a      	ldr	r2, [r3, #0]
 8008168:	68fb      	ldr	r3, [r7, #12]
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8008170:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8008172:	68fb      	ldr	r3, [r7, #12]
 8008174:	2201      	movs	r2, #1
 8008176:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800817a:	68fb      	ldr	r3, [r7, #12]
 800817c:	2200      	movs	r2, #0
 800817e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8008182:	2303      	movs	r3, #3
 8008184:	e017      	b.n	80081b6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8008186:	697b      	ldr	r3, [r7, #20]
 8008188:	2b00      	cmp	r3, #0
 800818a:	d101      	bne.n	8008190 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800818c:	2300      	movs	r3, #0
 800818e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8008190:	697b      	ldr	r3, [r7, #20]
 8008192:	3b01      	subs	r3, #1
 8008194:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008196:	68fb      	ldr	r3, [r7, #12]
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	689a      	ldr	r2, [r3, #8]
 800819c:	68bb      	ldr	r3, [r7, #8]
 800819e:	4013      	ands	r3, r2
 80081a0:	68ba      	ldr	r2, [r7, #8]
 80081a2:	429a      	cmp	r2, r3
 80081a4:	bf0c      	ite	eq
 80081a6:	2301      	moveq	r3, #1
 80081a8:	2300      	movne	r3, #0
 80081aa:	b2db      	uxtb	r3, r3
 80081ac:	461a      	mov	r2, r3
 80081ae:	79fb      	ldrb	r3, [r7, #7]
 80081b0:	429a      	cmp	r2, r3
 80081b2:	d19b      	bne.n	80080ec <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80081b4:	2300      	movs	r3, #0
}
 80081b6:	4618      	mov	r0, r3
 80081b8:	3720      	adds	r7, #32
 80081ba:	46bd      	mov	sp, r7
 80081bc:	bd80      	pop	{r7, pc}
 80081be:	bf00      	nop
 80081c0:	20000004 	.word	0x20000004

080081c4 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80081c4:	b580      	push	{r7, lr}
 80081c6:	b08a      	sub	sp, #40	@ 0x28
 80081c8:	af00      	add	r7, sp, #0
 80081ca:	60f8      	str	r0, [r7, #12]
 80081cc:	60b9      	str	r1, [r7, #8]
 80081ce:	607a      	str	r2, [r7, #4]
 80081d0:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80081d2:	2300      	movs	r3, #0
 80081d4:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80081d6:	f7fc fb4b 	bl	8004870 <HAL_GetTick>
 80081da:	4602      	mov	r2, r0
 80081dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80081de:	1a9b      	subs	r3, r3, r2
 80081e0:	683a      	ldr	r2, [r7, #0]
 80081e2:	4413      	add	r3, r2
 80081e4:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 80081e6:	f7fc fb43 	bl	8004870 <HAL_GetTick>
 80081ea:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80081ec:	68fb      	ldr	r3, [r7, #12]
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	330c      	adds	r3, #12
 80081f2:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80081f4:	4b3d      	ldr	r3, [pc, #244]	@ (80082ec <SPI_WaitFifoStateUntilTimeout+0x128>)
 80081f6:	681a      	ldr	r2, [r3, #0]
 80081f8:	4613      	mov	r3, r2
 80081fa:	009b      	lsls	r3, r3, #2
 80081fc:	4413      	add	r3, r2
 80081fe:	00da      	lsls	r2, r3, #3
 8008200:	1ad3      	subs	r3, r2, r3
 8008202:	0d1b      	lsrs	r3, r3, #20
 8008204:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008206:	fb02 f303 	mul.w	r3, r2, r3
 800820a:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800820c:	e060      	b.n	80082d0 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800820e:	68bb      	ldr	r3, [r7, #8]
 8008210:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8008214:	d107      	bne.n	8008226 <SPI_WaitFifoStateUntilTimeout+0x62>
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	2b00      	cmp	r3, #0
 800821a:	d104      	bne.n	8008226 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800821c:	69fb      	ldr	r3, [r7, #28]
 800821e:	781b      	ldrb	r3, [r3, #0]
 8008220:	b2db      	uxtb	r3, r3
 8008222:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8008224:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8008226:	683b      	ldr	r3, [r7, #0]
 8008228:	f1b3 3fff 	cmp.w	r3, #4294967295
 800822c:	d050      	beq.n	80082d0 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800822e:	f7fc fb1f 	bl	8004870 <HAL_GetTick>
 8008232:	4602      	mov	r2, r0
 8008234:	6a3b      	ldr	r3, [r7, #32]
 8008236:	1ad3      	subs	r3, r2, r3
 8008238:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800823a:	429a      	cmp	r2, r3
 800823c:	d902      	bls.n	8008244 <SPI_WaitFifoStateUntilTimeout+0x80>
 800823e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008240:	2b00      	cmp	r3, #0
 8008242:	d13d      	bne.n	80082c0 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8008244:	68fb      	ldr	r3, [r7, #12]
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	685a      	ldr	r2, [r3, #4]
 800824a:	68fb      	ldr	r3, [r7, #12]
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8008252:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008254:	68fb      	ldr	r3, [r7, #12]
 8008256:	685b      	ldr	r3, [r3, #4]
 8008258:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800825c:	d111      	bne.n	8008282 <SPI_WaitFifoStateUntilTimeout+0xbe>
 800825e:	68fb      	ldr	r3, [r7, #12]
 8008260:	689b      	ldr	r3, [r3, #8]
 8008262:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008266:	d004      	beq.n	8008272 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008268:	68fb      	ldr	r3, [r7, #12]
 800826a:	689b      	ldr	r3, [r3, #8]
 800826c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008270:	d107      	bne.n	8008282 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8008272:	68fb      	ldr	r3, [r7, #12]
 8008274:	681b      	ldr	r3, [r3, #0]
 8008276:	681a      	ldr	r2, [r3, #0]
 8008278:	68fb      	ldr	r3, [r7, #12]
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008280:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008282:	68fb      	ldr	r3, [r7, #12]
 8008284:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008286:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800828a:	d10f      	bne.n	80082ac <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 800828c:	68fb      	ldr	r3, [r7, #12]
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	681a      	ldr	r2, [r3, #0]
 8008292:	68fb      	ldr	r3, [r7, #12]
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800829a:	601a      	str	r2, [r3, #0]
 800829c:	68fb      	ldr	r3, [r7, #12]
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	681a      	ldr	r2, [r3, #0]
 80082a2:	68fb      	ldr	r3, [r7, #12]
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80082aa:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80082ac:	68fb      	ldr	r3, [r7, #12]
 80082ae:	2201      	movs	r2, #1
 80082b0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80082b4:	68fb      	ldr	r3, [r7, #12]
 80082b6:	2200      	movs	r2, #0
 80082b8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 80082bc:	2303      	movs	r3, #3
 80082be:	e010      	b.n	80082e2 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80082c0:	69bb      	ldr	r3, [r7, #24]
 80082c2:	2b00      	cmp	r3, #0
 80082c4:	d101      	bne.n	80082ca <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 80082c6:	2300      	movs	r3, #0
 80082c8:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 80082ca:	69bb      	ldr	r3, [r7, #24]
 80082cc:	3b01      	subs	r3, #1
 80082ce:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80082d0:	68fb      	ldr	r3, [r7, #12]
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	689a      	ldr	r2, [r3, #8]
 80082d6:	68bb      	ldr	r3, [r7, #8]
 80082d8:	4013      	ands	r3, r2
 80082da:	687a      	ldr	r2, [r7, #4]
 80082dc:	429a      	cmp	r2, r3
 80082de:	d196      	bne.n	800820e <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 80082e0:	2300      	movs	r3, #0
}
 80082e2:	4618      	mov	r0, r3
 80082e4:	3728      	adds	r7, #40	@ 0x28
 80082e6:	46bd      	mov	sp, r7
 80082e8:	bd80      	pop	{r7, pc}
 80082ea:	bf00      	nop
 80082ec:	20000004 	.word	0x20000004

080082f0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80082f0:	b580      	push	{r7, lr}
 80082f2:	b086      	sub	sp, #24
 80082f4:	af02      	add	r7, sp, #8
 80082f6:	60f8      	str	r0, [r7, #12]
 80082f8:	60b9      	str	r1, [r7, #8]
 80082fa:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	9300      	str	r3, [sp, #0]
 8008300:	68bb      	ldr	r3, [r7, #8]
 8008302:	2200      	movs	r2, #0
 8008304:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8008308:	68f8      	ldr	r0, [r7, #12]
 800830a:	f7ff ff5b 	bl	80081c4 <SPI_WaitFifoStateUntilTimeout>
 800830e:	4603      	mov	r3, r0
 8008310:	2b00      	cmp	r3, #0
 8008312:	d007      	beq.n	8008324 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008314:	68fb      	ldr	r3, [r7, #12]
 8008316:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008318:	f043 0220 	orr.w	r2, r3, #32
 800831c:	68fb      	ldr	r3, [r7, #12]
 800831e:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8008320:	2303      	movs	r3, #3
 8008322:	e027      	b.n	8008374 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	9300      	str	r3, [sp, #0]
 8008328:	68bb      	ldr	r3, [r7, #8]
 800832a:	2200      	movs	r2, #0
 800832c:	2180      	movs	r1, #128	@ 0x80
 800832e:	68f8      	ldr	r0, [r7, #12]
 8008330:	f7ff fec0 	bl	80080b4 <SPI_WaitFlagStateUntilTimeout>
 8008334:	4603      	mov	r3, r0
 8008336:	2b00      	cmp	r3, #0
 8008338:	d007      	beq.n	800834a <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800833a:	68fb      	ldr	r3, [r7, #12]
 800833c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800833e:	f043 0220 	orr.w	r2, r3, #32
 8008342:	68fb      	ldr	r3, [r7, #12]
 8008344:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8008346:	2303      	movs	r3, #3
 8008348:	e014      	b.n	8008374 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	9300      	str	r3, [sp, #0]
 800834e:	68bb      	ldr	r3, [r7, #8]
 8008350:	2200      	movs	r2, #0
 8008352:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8008356:	68f8      	ldr	r0, [r7, #12]
 8008358:	f7ff ff34 	bl	80081c4 <SPI_WaitFifoStateUntilTimeout>
 800835c:	4603      	mov	r3, r0
 800835e:	2b00      	cmp	r3, #0
 8008360:	d007      	beq.n	8008372 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008362:	68fb      	ldr	r3, [r7, #12]
 8008364:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008366:	f043 0220 	orr.w	r2, r3, #32
 800836a:	68fb      	ldr	r3, [r7, #12]
 800836c:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800836e:	2303      	movs	r3, #3
 8008370:	e000      	b.n	8008374 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8008372:	2300      	movs	r3, #0
}
 8008374:	4618      	mov	r0, r3
 8008376:	3710      	adds	r7, #16
 8008378:	46bd      	mov	sp, r7
 800837a:	bd80      	pop	{r7, pc}

0800837c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800837c:	b580      	push	{r7, lr}
 800837e:	b082      	sub	sp, #8
 8008380:	af00      	add	r7, sp, #0
 8008382:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	2b00      	cmp	r3, #0
 8008388:	d101      	bne.n	800838e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800838a:	2301      	movs	r3, #1
 800838c:	e040      	b.n	8008410 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008392:	2b00      	cmp	r3, #0
 8008394:	d106      	bne.n	80083a4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	2200      	movs	r2, #0
 800839a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800839e:	6878      	ldr	r0, [r7, #4]
 80083a0:	f7fb f9ec 	bl	800377c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	2224      	movs	r2, #36	@ 0x24
 80083a8:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	681a      	ldr	r2, [r3, #0]
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	f022 0201 	bic.w	r2, r2, #1
 80083b8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80083be:	2b00      	cmp	r3, #0
 80083c0:	d002      	beq.n	80083c8 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80083c2:	6878      	ldr	r0, [r7, #4]
 80083c4:	f000 fb6a 	bl	8008a9c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80083c8:	6878      	ldr	r0, [r7, #4]
 80083ca:	f000 f8af 	bl	800852c <UART_SetConfig>
 80083ce:	4603      	mov	r3, r0
 80083d0:	2b01      	cmp	r3, #1
 80083d2:	d101      	bne.n	80083d8 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80083d4:	2301      	movs	r3, #1
 80083d6:	e01b      	b.n	8008410 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	685a      	ldr	r2, [r3, #4]
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80083e6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	689a      	ldr	r2, [r3, #8]
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80083f6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	681a      	ldr	r2, [r3, #0]
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	f042 0201 	orr.w	r2, r2, #1
 8008406:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008408:	6878      	ldr	r0, [r7, #4]
 800840a:	f000 fbe9 	bl	8008be0 <UART_CheckIdleState>
 800840e:	4603      	mov	r3, r0
}
 8008410:	4618      	mov	r0, r3
 8008412:	3708      	adds	r7, #8
 8008414:	46bd      	mov	sp, r7
 8008416:	bd80      	pop	{r7, pc}

08008418 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008418:	b580      	push	{r7, lr}
 800841a:	b08a      	sub	sp, #40	@ 0x28
 800841c:	af02      	add	r7, sp, #8
 800841e:	60f8      	str	r0, [r7, #12]
 8008420:	60b9      	str	r1, [r7, #8]
 8008422:	603b      	str	r3, [r7, #0]
 8008424:	4613      	mov	r3, r2
 8008426:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008428:	68fb      	ldr	r3, [r7, #12]
 800842a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800842c:	2b20      	cmp	r3, #32
 800842e:	d177      	bne.n	8008520 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8008430:	68bb      	ldr	r3, [r7, #8]
 8008432:	2b00      	cmp	r3, #0
 8008434:	d002      	beq.n	800843c <HAL_UART_Transmit+0x24>
 8008436:	88fb      	ldrh	r3, [r7, #6]
 8008438:	2b00      	cmp	r3, #0
 800843a:	d101      	bne.n	8008440 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 800843c:	2301      	movs	r3, #1
 800843e:	e070      	b.n	8008522 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008440:	68fb      	ldr	r3, [r7, #12]
 8008442:	2200      	movs	r2, #0
 8008444:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008448:	68fb      	ldr	r3, [r7, #12]
 800844a:	2221      	movs	r2, #33	@ 0x21
 800844c:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800844e:	f7fc fa0f 	bl	8004870 <HAL_GetTick>
 8008452:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8008454:	68fb      	ldr	r3, [r7, #12]
 8008456:	88fa      	ldrh	r2, [r7, #6]
 8008458:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 800845c:	68fb      	ldr	r3, [r7, #12]
 800845e:	88fa      	ldrh	r2, [r7, #6]
 8008460:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008464:	68fb      	ldr	r3, [r7, #12]
 8008466:	689b      	ldr	r3, [r3, #8]
 8008468:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800846c:	d108      	bne.n	8008480 <HAL_UART_Transmit+0x68>
 800846e:	68fb      	ldr	r3, [r7, #12]
 8008470:	691b      	ldr	r3, [r3, #16]
 8008472:	2b00      	cmp	r3, #0
 8008474:	d104      	bne.n	8008480 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8008476:	2300      	movs	r3, #0
 8008478:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800847a:	68bb      	ldr	r3, [r7, #8]
 800847c:	61bb      	str	r3, [r7, #24]
 800847e:	e003      	b.n	8008488 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8008480:	68bb      	ldr	r3, [r7, #8]
 8008482:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008484:	2300      	movs	r3, #0
 8008486:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8008488:	e02f      	b.n	80084ea <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800848a:	683b      	ldr	r3, [r7, #0]
 800848c:	9300      	str	r3, [sp, #0]
 800848e:	697b      	ldr	r3, [r7, #20]
 8008490:	2200      	movs	r2, #0
 8008492:	2180      	movs	r1, #128	@ 0x80
 8008494:	68f8      	ldr	r0, [r7, #12]
 8008496:	f000 fc4b 	bl	8008d30 <UART_WaitOnFlagUntilTimeout>
 800849a:	4603      	mov	r3, r0
 800849c:	2b00      	cmp	r3, #0
 800849e:	d004      	beq.n	80084aa <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 80084a0:	68fb      	ldr	r3, [r7, #12]
 80084a2:	2220      	movs	r2, #32
 80084a4:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 80084a6:	2303      	movs	r3, #3
 80084a8:	e03b      	b.n	8008522 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 80084aa:	69fb      	ldr	r3, [r7, #28]
 80084ac:	2b00      	cmp	r3, #0
 80084ae:	d10b      	bne.n	80084c8 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80084b0:	69bb      	ldr	r3, [r7, #24]
 80084b2:	881a      	ldrh	r2, [r3, #0]
 80084b4:	68fb      	ldr	r3, [r7, #12]
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80084bc:	b292      	uxth	r2, r2
 80084be:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80084c0:	69bb      	ldr	r3, [r7, #24]
 80084c2:	3302      	adds	r3, #2
 80084c4:	61bb      	str	r3, [r7, #24]
 80084c6:	e007      	b.n	80084d8 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80084c8:	69fb      	ldr	r3, [r7, #28]
 80084ca:	781a      	ldrb	r2, [r3, #0]
 80084cc:	68fb      	ldr	r3, [r7, #12]
 80084ce:	681b      	ldr	r3, [r3, #0]
 80084d0:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80084d2:	69fb      	ldr	r3, [r7, #28]
 80084d4:	3301      	adds	r3, #1
 80084d6:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80084d8:	68fb      	ldr	r3, [r7, #12]
 80084da:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80084de:	b29b      	uxth	r3, r3
 80084e0:	3b01      	subs	r3, #1
 80084e2:	b29a      	uxth	r2, r3
 80084e4:	68fb      	ldr	r3, [r7, #12]
 80084e6:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 80084ea:	68fb      	ldr	r3, [r7, #12]
 80084ec:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80084f0:	b29b      	uxth	r3, r3
 80084f2:	2b00      	cmp	r3, #0
 80084f4:	d1c9      	bne.n	800848a <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80084f6:	683b      	ldr	r3, [r7, #0]
 80084f8:	9300      	str	r3, [sp, #0]
 80084fa:	697b      	ldr	r3, [r7, #20]
 80084fc:	2200      	movs	r2, #0
 80084fe:	2140      	movs	r1, #64	@ 0x40
 8008500:	68f8      	ldr	r0, [r7, #12]
 8008502:	f000 fc15 	bl	8008d30 <UART_WaitOnFlagUntilTimeout>
 8008506:	4603      	mov	r3, r0
 8008508:	2b00      	cmp	r3, #0
 800850a:	d004      	beq.n	8008516 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 800850c:	68fb      	ldr	r3, [r7, #12]
 800850e:	2220      	movs	r2, #32
 8008510:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8008512:	2303      	movs	r3, #3
 8008514:	e005      	b.n	8008522 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008516:	68fb      	ldr	r3, [r7, #12]
 8008518:	2220      	movs	r2, #32
 800851a:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 800851c:	2300      	movs	r3, #0
 800851e:	e000      	b.n	8008522 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8008520:	2302      	movs	r3, #2
  }
}
 8008522:	4618      	mov	r0, r3
 8008524:	3720      	adds	r7, #32
 8008526:	46bd      	mov	sp, r7
 8008528:	bd80      	pop	{r7, pc}
	...

0800852c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800852c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008530:	b08a      	sub	sp, #40	@ 0x28
 8008532:	af00      	add	r7, sp, #0
 8008534:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008536:	2300      	movs	r3, #0
 8008538:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800853c:	68fb      	ldr	r3, [r7, #12]
 800853e:	689a      	ldr	r2, [r3, #8]
 8008540:	68fb      	ldr	r3, [r7, #12]
 8008542:	691b      	ldr	r3, [r3, #16]
 8008544:	431a      	orrs	r2, r3
 8008546:	68fb      	ldr	r3, [r7, #12]
 8008548:	695b      	ldr	r3, [r3, #20]
 800854a:	431a      	orrs	r2, r3
 800854c:	68fb      	ldr	r3, [r7, #12]
 800854e:	69db      	ldr	r3, [r3, #28]
 8008550:	4313      	orrs	r3, r2
 8008552:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008554:	68fb      	ldr	r3, [r7, #12]
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	681a      	ldr	r2, [r3, #0]
 800855a:	4ba4      	ldr	r3, [pc, #656]	@ (80087ec <UART_SetConfig+0x2c0>)
 800855c:	4013      	ands	r3, r2
 800855e:	68fa      	ldr	r2, [r7, #12]
 8008560:	6812      	ldr	r2, [r2, #0]
 8008562:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8008564:	430b      	orrs	r3, r1
 8008566:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008568:	68fb      	ldr	r3, [r7, #12]
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	685b      	ldr	r3, [r3, #4]
 800856e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8008572:	68fb      	ldr	r3, [r7, #12]
 8008574:	68da      	ldr	r2, [r3, #12]
 8008576:	68fb      	ldr	r3, [r7, #12]
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	430a      	orrs	r2, r1
 800857c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800857e:	68fb      	ldr	r3, [r7, #12]
 8008580:	699b      	ldr	r3, [r3, #24]
 8008582:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008584:	68fb      	ldr	r3, [r7, #12]
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	4a99      	ldr	r2, [pc, #612]	@ (80087f0 <UART_SetConfig+0x2c4>)
 800858a:	4293      	cmp	r3, r2
 800858c:	d004      	beq.n	8008598 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800858e:	68fb      	ldr	r3, [r7, #12]
 8008590:	6a1b      	ldr	r3, [r3, #32]
 8008592:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008594:	4313      	orrs	r3, r2
 8008596:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008598:	68fb      	ldr	r3, [r7, #12]
 800859a:	681b      	ldr	r3, [r3, #0]
 800859c:	689b      	ldr	r3, [r3, #8]
 800859e:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 80085a2:	68fb      	ldr	r3, [r7, #12]
 80085a4:	681b      	ldr	r3, [r3, #0]
 80085a6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80085a8:	430a      	orrs	r2, r1
 80085aa:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80085ac:	68fb      	ldr	r3, [r7, #12]
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	4a90      	ldr	r2, [pc, #576]	@ (80087f4 <UART_SetConfig+0x2c8>)
 80085b2:	4293      	cmp	r3, r2
 80085b4:	d126      	bne.n	8008604 <UART_SetConfig+0xd8>
 80085b6:	4b90      	ldr	r3, [pc, #576]	@ (80087f8 <UART_SetConfig+0x2cc>)
 80085b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80085bc:	f003 0303 	and.w	r3, r3, #3
 80085c0:	2b03      	cmp	r3, #3
 80085c2:	d81b      	bhi.n	80085fc <UART_SetConfig+0xd0>
 80085c4:	a201      	add	r2, pc, #4	@ (adr r2, 80085cc <UART_SetConfig+0xa0>)
 80085c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80085ca:	bf00      	nop
 80085cc:	080085dd 	.word	0x080085dd
 80085d0:	080085ed 	.word	0x080085ed
 80085d4:	080085e5 	.word	0x080085e5
 80085d8:	080085f5 	.word	0x080085f5
 80085dc:	2301      	movs	r3, #1
 80085de:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80085e2:	e116      	b.n	8008812 <UART_SetConfig+0x2e6>
 80085e4:	2302      	movs	r3, #2
 80085e6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80085ea:	e112      	b.n	8008812 <UART_SetConfig+0x2e6>
 80085ec:	2304      	movs	r3, #4
 80085ee:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80085f2:	e10e      	b.n	8008812 <UART_SetConfig+0x2e6>
 80085f4:	2308      	movs	r3, #8
 80085f6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80085fa:	e10a      	b.n	8008812 <UART_SetConfig+0x2e6>
 80085fc:	2310      	movs	r3, #16
 80085fe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008602:	e106      	b.n	8008812 <UART_SetConfig+0x2e6>
 8008604:	68fb      	ldr	r3, [r7, #12]
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	4a7c      	ldr	r2, [pc, #496]	@ (80087fc <UART_SetConfig+0x2d0>)
 800860a:	4293      	cmp	r3, r2
 800860c:	d138      	bne.n	8008680 <UART_SetConfig+0x154>
 800860e:	4b7a      	ldr	r3, [pc, #488]	@ (80087f8 <UART_SetConfig+0x2cc>)
 8008610:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008614:	f003 030c 	and.w	r3, r3, #12
 8008618:	2b0c      	cmp	r3, #12
 800861a:	d82d      	bhi.n	8008678 <UART_SetConfig+0x14c>
 800861c:	a201      	add	r2, pc, #4	@ (adr r2, 8008624 <UART_SetConfig+0xf8>)
 800861e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008622:	bf00      	nop
 8008624:	08008659 	.word	0x08008659
 8008628:	08008679 	.word	0x08008679
 800862c:	08008679 	.word	0x08008679
 8008630:	08008679 	.word	0x08008679
 8008634:	08008669 	.word	0x08008669
 8008638:	08008679 	.word	0x08008679
 800863c:	08008679 	.word	0x08008679
 8008640:	08008679 	.word	0x08008679
 8008644:	08008661 	.word	0x08008661
 8008648:	08008679 	.word	0x08008679
 800864c:	08008679 	.word	0x08008679
 8008650:	08008679 	.word	0x08008679
 8008654:	08008671 	.word	0x08008671
 8008658:	2300      	movs	r3, #0
 800865a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800865e:	e0d8      	b.n	8008812 <UART_SetConfig+0x2e6>
 8008660:	2302      	movs	r3, #2
 8008662:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008666:	e0d4      	b.n	8008812 <UART_SetConfig+0x2e6>
 8008668:	2304      	movs	r3, #4
 800866a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800866e:	e0d0      	b.n	8008812 <UART_SetConfig+0x2e6>
 8008670:	2308      	movs	r3, #8
 8008672:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008676:	e0cc      	b.n	8008812 <UART_SetConfig+0x2e6>
 8008678:	2310      	movs	r3, #16
 800867a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800867e:	e0c8      	b.n	8008812 <UART_SetConfig+0x2e6>
 8008680:	68fb      	ldr	r3, [r7, #12]
 8008682:	681b      	ldr	r3, [r3, #0]
 8008684:	4a5e      	ldr	r2, [pc, #376]	@ (8008800 <UART_SetConfig+0x2d4>)
 8008686:	4293      	cmp	r3, r2
 8008688:	d125      	bne.n	80086d6 <UART_SetConfig+0x1aa>
 800868a:	4b5b      	ldr	r3, [pc, #364]	@ (80087f8 <UART_SetConfig+0x2cc>)
 800868c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008690:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8008694:	2b30      	cmp	r3, #48	@ 0x30
 8008696:	d016      	beq.n	80086c6 <UART_SetConfig+0x19a>
 8008698:	2b30      	cmp	r3, #48	@ 0x30
 800869a:	d818      	bhi.n	80086ce <UART_SetConfig+0x1a2>
 800869c:	2b20      	cmp	r3, #32
 800869e:	d00a      	beq.n	80086b6 <UART_SetConfig+0x18a>
 80086a0:	2b20      	cmp	r3, #32
 80086a2:	d814      	bhi.n	80086ce <UART_SetConfig+0x1a2>
 80086a4:	2b00      	cmp	r3, #0
 80086a6:	d002      	beq.n	80086ae <UART_SetConfig+0x182>
 80086a8:	2b10      	cmp	r3, #16
 80086aa:	d008      	beq.n	80086be <UART_SetConfig+0x192>
 80086ac:	e00f      	b.n	80086ce <UART_SetConfig+0x1a2>
 80086ae:	2300      	movs	r3, #0
 80086b0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80086b4:	e0ad      	b.n	8008812 <UART_SetConfig+0x2e6>
 80086b6:	2302      	movs	r3, #2
 80086b8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80086bc:	e0a9      	b.n	8008812 <UART_SetConfig+0x2e6>
 80086be:	2304      	movs	r3, #4
 80086c0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80086c4:	e0a5      	b.n	8008812 <UART_SetConfig+0x2e6>
 80086c6:	2308      	movs	r3, #8
 80086c8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80086cc:	e0a1      	b.n	8008812 <UART_SetConfig+0x2e6>
 80086ce:	2310      	movs	r3, #16
 80086d0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80086d4:	e09d      	b.n	8008812 <UART_SetConfig+0x2e6>
 80086d6:	68fb      	ldr	r3, [r7, #12]
 80086d8:	681b      	ldr	r3, [r3, #0]
 80086da:	4a4a      	ldr	r2, [pc, #296]	@ (8008804 <UART_SetConfig+0x2d8>)
 80086dc:	4293      	cmp	r3, r2
 80086de:	d125      	bne.n	800872c <UART_SetConfig+0x200>
 80086e0:	4b45      	ldr	r3, [pc, #276]	@ (80087f8 <UART_SetConfig+0x2cc>)
 80086e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80086e6:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80086ea:	2bc0      	cmp	r3, #192	@ 0xc0
 80086ec:	d016      	beq.n	800871c <UART_SetConfig+0x1f0>
 80086ee:	2bc0      	cmp	r3, #192	@ 0xc0
 80086f0:	d818      	bhi.n	8008724 <UART_SetConfig+0x1f8>
 80086f2:	2b80      	cmp	r3, #128	@ 0x80
 80086f4:	d00a      	beq.n	800870c <UART_SetConfig+0x1e0>
 80086f6:	2b80      	cmp	r3, #128	@ 0x80
 80086f8:	d814      	bhi.n	8008724 <UART_SetConfig+0x1f8>
 80086fa:	2b00      	cmp	r3, #0
 80086fc:	d002      	beq.n	8008704 <UART_SetConfig+0x1d8>
 80086fe:	2b40      	cmp	r3, #64	@ 0x40
 8008700:	d008      	beq.n	8008714 <UART_SetConfig+0x1e8>
 8008702:	e00f      	b.n	8008724 <UART_SetConfig+0x1f8>
 8008704:	2300      	movs	r3, #0
 8008706:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800870a:	e082      	b.n	8008812 <UART_SetConfig+0x2e6>
 800870c:	2302      	movs	r3, #2
 800870e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008712:	e07e      	b.n	8008812 <UART_SetConfig+0x2e6>
 8008714:	2304      	movs	r3, #4
 8008716:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800871a:	e07a      	b.n	8008812 <UART_SetConfig+0x2e6>
 800871c:	2308      	movs	r3, #8
 800871e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008722:	e076      	b.n	8008812 <UART_SetConfig+0x2e6>
 8008724:	2310      	movs	r3, #16
 8008726:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800872a:	e072      	b.n	8008812 <UART_SetConfig+0x2e6>
 800872c:	68fb      	ldr	r3, [r7, #12]
 800872e:	681b      	ldr	r3, [r3, #0]
 8008730:	4a35      	ldr	r2, [pc, #212]	@ (8008808 <UART_SetConfig+0x2dc>)
 8008732:	4293      	cmp	r3, r2
 8008734:	d12a      	bne.n	800878c <UART_SetConfig+0x260>
 8008736:	4b30      	ldr	r3, [pc, #192]	@ (80087f8 <UART_SetConfig+0x2cc>)
 8008738:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800873c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008740:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008744:	d01a      	beq.n	800877c <UART_SetConfig+0x250>
 8008746:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800874a:	d81b      	bhi.n	8008784 <UART_SetConfig+0x258>
 800874c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008750:	d00c      	beq.n	800876c <UART_SetConfig+0x240>
 8008752:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008756:	d815      	bhi.n	8008784 <UART_SetConfig+0x258>
 8008758:	2b00      	cmp	r3, #0
 800875a:	d003      	beq.n	8008764 <UART_SetConfig+0x238>
 800875c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008760:	d008      	beq.n	8008774 <UART_SetConfig+0x248>
 8008762:	e00f      	b.n	8008784 <UART_SetConfig+0x258>
 8008764:	2300      	movs	r3, #0
 8008766:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800876a:	e052      	b.n	8008812 <UART_SetConfig+0x2e6>
 800876c:	2302      	movs	r3, #2
 800876e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008772:	e04e      	b.n	8008812 <UART_SetConfig+0x2e6>
 8008774:	2304      	movs	r3, #4
 8008776:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800877a:	e04a      	b.n	8008812 <UART_SetConfig+0x2e6>
 800877c:	2308      	movs	r3, #8
 800877e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008782:	e046      	b.n	8008812 <UART_SetConfig+0x2e6>
 8008784:	2310      	movs	r3, #16
 8008786:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800878a:	e042      	b.n	8008812 <UART_SetConfig+0x2e6>
 800878c:	68fb      	ldr	r3, [r7, #12]
 800878e:	681b      	ldr	r3, [r3, #0]
 8008790:	4a17      	ldr	r2, [pc, #92]	@ (80087f0 <UART_SetConfig+0x2c4>)
 8008792:	4293      	cmp	r3, r2
 8008794:	d13a      	bne.n	800880c <UART_SetConfig+0x2e0>
 8008796:	4b18      	ldr	r3, [pc, #96]	@ (80087f8 <UART_SetConfig+0x2cc>)
 8008798:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800879c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80087a0:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80087a4:	d01a      	beq.n	80087dc <UART_SetConfig+0x2b0>
 80087a6:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80087aa:	d81b      	bhi.n	80087e4 <UART_SetConfig+0x2b8>
 80087ac:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80087b0:	d00c      	beq.n	80087cc <UART_SetConfig+0x2a0>
 80087b2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80087b6:	d815      	bhi.n	80087e4 <UART_SetConfig+0x2b8>
 80087b8:	2b00      	cmp	r3, #0
 80087ba:	d003      	beq.n	80087c4 <UART_SetConfig+0x298>
 80087bc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80087c0:	d008      	beq.n	80087d4 <UART_SetConfig+0x2a8>
 80087c2:	e00f      	b.n	80087e4 <UART_SetConfig+0x2b8>
 80087c4:	2300      	movs	r3, #0
 80087c6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80087ca:	e022      	b.n	8008812 <UART_SetConfig+0x2e6>
 80087cc:	2302      	movs	r3, #2
 80087ce:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80087d2:	e01e      	b.n	8008812 <UART_SetConfig+0x2e6>
 80087d4:	2304      	movs	r3, #4
 80087d6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80087da:	e01a      	b.n	8008812 <UART_SetConfig+0x2e6>
 80087dc:	2308      	movs	r3, #8
 80087de:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80087e2:	e016      	b.n	8008812 <UART_SetConfig+0x2e6>
 80087e4:	2310      	movs	r3, #16
 80087e6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80087ea:	e012      	b.n	8008812 <UART_SetConfig+0x2e6>
 80087ec:	efff69f3 	.word	0xefff69f3
 80087f0:	40008000 	.word	0x40008000
 80087f4:	40013800 	.word	0x40013800
 80087f8:	40021000 	.word	0x40021000
 80087fc:	40004400 	.word	0x40004400
 8008800:	40004800 	.word	0x40004800
 8008804:	40004c00 	.word	0x40004c00
 8008808:	40005000 	.word	0x40005000
 800880c:	2310      	movs	r3, #16
 800880e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008812:	68fb      	ldr	r3, [r7, #12]
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	4a9f      	ldr	r2, [pc, #636]	@ (8008a94 <UART_SetConfig+0x568>)
 8008818:	4293      	cmp	r3, r2
 800881a:	d17a      	bne.n	8008912 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800881c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8008820:	2b08      	cmp	r3, #8
 8008822:	d824      	bhi.n	800886e <UART_SetConfig+0x342>
 8008824:	a201      	add	r2, pc, #4	@ (adr r2, 800882c <UART_SetConfig+0x300>)
 8008826:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800882a:	bf00      	nop
 800882c:	08008851 	.word	0x08008851
 8008830:	0800886f 	.word	0x0800886f
 8008834:	08008859 	.word	0x08008859
 8008838:	0800886f 	.word	0x0800886f
 800883c:	0800885f 	.word	0x0800885f
 8008840:	0800886f 	.word	0x0800886f
 8008844:	0800886f 	.word	0x0800886f
 8008848:	0800886f 	.word	0x0800886f
 800884c:	08008867 	.word	0x08008867
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008850:	f7fe fbfe 	bl	8007050 <HAL_RCC_GetPCLK1Freq>
 8008854:	61f8      	str	r0, [r7, #28]
        break;
 8008856:	e010      	b.n	800887a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008858:	4b8f      	ldr	r3, [pc, #572]	@ (8008a98 <UART_SetConfig+0x56c>)
 800885a:	61fb      	str	r3, [r7, #28]
        break;
 800885c:	e00d      	b.n	800887a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800885e:	f7fe fb5f 	bl	8006f20 <HAL_RCC_GetSysClockFreq>
 8008862:	61f8      	str	r0, [r7, #28]
        break;
 8008864:	e009      	b.n	800887a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008866:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800886a:	61fb      	str	r3, [r7, #28]
        break;
 800886c:	e005      	b.n	800887a <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 800886e:	2300      	movs	r3, #0
 8008870:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8008872:	2301      	movs	r3, #1
 8008874:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8008878:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800887a:	69fb      	ldr	r3, [r7, #28]
 800887c:	2b00      	cmp	r3, #0
 800887e:	f000 80fb 	beq.w	8008a78 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8008882:	68fb      	ldr	r3, [r7, #12]
 8008884:	685a      	ldr	r2, [r3, #4]
 8008886:	4613      	mov	r3, r2
 8008888:	005b      	lsls	r3, r3, #1
 800888a:	4413      	add	r3, r2
 800888c:	69fa      	ldr	r2, [r7, #28]
 800888e:	429a      	cmp	r2, r3
 8008890:	d305      	bcc.n	800889e <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8008892:	68fb      	ldr	r3, [r7, #12]
 8008894:	685b      	ldr	r3, [r3, #4]
 8008896:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8008898:	69fa      	ldr	r2, [r7, #28]
 800889a:	429a      	cmp	r2, r3
 800889c:	d903      	bls.n	80088a6 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 800889e:	2301      	movs	r3, #1
 80088a0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80088a4:	e0e8      	b.n	8008a78 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80088a6:	69fb      	ldr	r3, [r7, #28]
 80088a8:	2200      	movs	r2, #0
 80088aa:	461c      	mov	r4, r3
 80088ac:	4615      	mov	r5, r2
 80088ae:	f04f 0200 	mov.w	r2, #0
 80088b2:	f04f 0300 	mov.w	r3, #0
 80088b6:	022b      	lsls	r3, r5, #8
 80088b8:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80088bc:	0222      	lsls	r2, r4, #8
 80088be:	68f9      	ldr	r1, [r7, #12]
 80088c0:	6849      	ldr	r1, [r1, #4]
 80088c2:	0849      	lsrs	r1, r1, #1
 80088c4:	2000      	movs	r0, #0
 80088c6:	4688      	mov	r8, r1
 80088c8:	4681      	mov	r9, r0
 80088ca:	eb12 0a08 	adds.w	sl, r2, r8
 80088ce:	eb43 0b09 	adc.w	fp, r3, r9
 80088d2:	68fb      	ldr	r3, [r7, #12]
 80088d4:	685b      	ldr	r3, [r3, #4]
 80088d6:	2200      	movs	r2, #0
 80088d8:	603b      	str	r3, [r7, #0]
 80088da:	607a      	str	r2, [r7, #4]
 80088dc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80088e0:	4650      	mov	r0, sl
 80088e2:	4659      	mov	r1, fp
 80088e4:	f7f8 f9d0 	bl	8000c88 <__aeabi_uldivmod>
 80088e8:	4602      	mov	r2, r0
 80088ea:	460b      	mov	r3, r1
 80088ec:	4613      	mov	r3, r2
 80088ee:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80088f0:	69bb      	ldr	r3, [r7, #24]
 80088f2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80088f6:	d308      	bcc.n	800890a <UART_SetConfig+0x3de>
 80088f8:	69bb      	ldr	r3, [r7, #24]
 80088fa:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80088fe:	d204      	bcs.n	800890a <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8008900:	68fb      	ldr	r3, [r7, #12]
 8008902:	681b      	ldr	r3, [r3, #0]
 8008904:	69ba      	ldr	r2, [r7, #24]
 8008906:	60da      	str	r2, [r3, #12]
 8008908:	e0b6      	b.n	8008a78 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 800890a:	2301      	movs	r3, #1
 800890c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8008910:	e0b2      	b.n	8008a78 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008912:	68fb      	ldr	r3, [r7, #12]
 8008914:	69db      	ldr	r3, [r3, #28]
 8008916:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800891a:	d15e      	bne.n	80089da <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 800891c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8008920:	2b08      	cmp	r3, #8
 8008922:	d828      	bhi.n	8008976 <UART_SetConfig+0x44a>
 8008924:	a201      	add	r2, pc, #4	@ (adr r2, 800892c <UART_SetConfig+0x400>)
 8008926:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800892a:	bf00      	nop
 800892c:	08008951 	.word	0x08008951
 8008930:	08008959 	.word	0x08008959
 8008934:	08008961 	.word	0x08008961
 8008938:	08008977 	.word	0x08008977
 800893c:	08008967 	.word	0x08008967
 8008940:	08008977 	.word	0x08008977
 8008944:	08008977 	.word	0x08008977
 8008948:	08008977 	.word	0x08008977
 800894c:	0800896f 	.word	0x0800896f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008950:	f7fe fb7e 	bl	8007050 <HAL_RCC_GetPCLK1Freq>
 8008954:	61f8      	str	r0, [r7, #28]
        break;
 8008956:	e014      	b.n	8008982 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008958:	f7fe fb90 	bl	800707c <HAL_RCC_GetPCLK2Freq>
 800895c:	61f8      	str	r0, [r7, #28]
        break;
 800895e:	e010      	b.n	8008982 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008960:	4b4d      	ldr	r3, [pc, #308]	@ (8008a98 <UART_SetConfig+0x56c>)
 8008962:	61fb      	str	r3, [r7, #28]
        break;
 8008964:	e00d      	b.n	8008982 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008966:	f7fe fadb 	bl	8006f20 <HAL_RCC_GetSysClockFreq>
 800896a:	61f8      	str	r0, [r7, #28]
        break;
 800896c:	e009      	b.n	8008982 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800896e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008972:	61fb      	str	r3, [r7, #28]
        break;
 8008974:	e005      	b.n	8008982 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8008976:	2300      	movs	r3, #0
 8008978:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800897a:	2301      	movs	r3, #1
 800897c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8008980:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008982:	69fb      	ldr	r3, [r7, #28]
 8008984:	2b00      	cmp	r3, #0
 8008986:	d077      	beq.n	8008a78 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8008988:	69fb      	ldr	r3, [r7, #28]
 800898a:	005a      	lsls	r2, r3, #1
 800898c:	68fb      	ldr	r3, [r7, #12]
 800898e:	685b      	ldr	r3, [r3, #4]
 8008990:	085b      	lsrs	r3, r3, #1
 8008992:	441a      	add	r2, r3
 8008994:	68fb      	ldr	r3, [r7, #12]
 8008996:	685b      	ldr	r3, [r3, #4]
 8008998:	fbb2 f3f3 	udiv	r3, r2, r3
 800899c:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800899e:	69bb      	ldr	r3, [r7, #24]
 80089a0:	2b0f      	cmp	r3, #15
 80089a2:	d916      	bls.n	80089d2 <UART_SetConfig+0x4a6>
 80089a4:	69bb      	ldr	r3, [r7, #24]
 80089a6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80089aa:	d212      	bcs.n	80089d2 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80089ac:	69bb      	ldr	r3, [r7, #24]
 80089ae:	b29b      	uxth	r3, r3
 80089b0:	f023 030f 	bic.w	r3, r3, #15
 80089b4:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80089b6:	69bb      	ldr	r3, [r7, #24]
 80089b8:	085b      	lsrs	r3, r3, #1
 80089ba:	b29b      	uxth	r3, r3
 80089bc:	f003 0307 	and.w	r3, r3, #7
 80089c0:	b29a      	uxth	r2, r3
 80089c2:	8afb      	ldrh	r3, [r7, #22]
 80089c4:	4313      	orrs	r3, r2
 80089c6:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80089c8:	68fb      	ldr	r3, [r7, #12]
 80089ca:	681b      	ldr	r3, [r3, #0]
 80089cc:	8afa      	ldrh	r2, [r7, #22]
 80089ce:	60da      	str	r2, [r3, #12]
 80089d0:	e052      	b.n	8008a78 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80089d2:	2301      	movs	r3, #1
 80089d4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80089d8:	e04e      	b.n	8008a78 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80089da:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80089de:	2b08      	cmp	r3, #8
 80089e0:	d827      	bhi.n	8008a32 <UART_SetConfig+0x506>
 80089e2:	a201      	add	r2, pc, #4	@ (adr r2, 80089e8 <UART_SetConfig+0x4bc>)
 80089e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80089e8:	08008a0d 	.word	0x08008a0d
 80089ec:	08008a15 	.word	0x08008a15
 80089f0:	08008a1d 	.word	0x08008a1d
 80089f4:	08008a33 	.word	0x08008a33
 80089f8:	08008a23 	.word	0x08008a23
 80089fc:	08008a33 	.word	0x08008a33
 8008a00:	08008a33 	.word	0x08008a33
 8008a04:	08008a33 	.word	0x08008a33
 8008a08:	08008a2b 	.word	0x08008a2b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008a0c:	f7fe fb20 	bl	8007050 <HAL_RCC_GetPCLK1Freq>
 8008a10:	61f8      	str	r0, [r7, #28]
        break;
 8008a12:	e014      	b.n	8008a3e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008a14:	f7fe fb32 	bl	800707c <HAL_RCC_GetPCLK2Freq>
 8008a18:	61f8      	str	r0, [r7, #28]
        break;
 8008a1a:	e010      	b.n	8008a3e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008a1c:	4b1e      	ldr	r3, [pc, #120]	@ (8008a98 <UART_SetConfig+0x56c>)
 8008a1e:	61fb      	str	r3, [r7, #28]
        break;
 8008a20:	e00d      	b.n	8008a3e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008a22:	f7fe fa7d 	bl	8006f20 <HAL_RCC_GetSysClockFreq>
 8008a26:	61f8      	str	r0, [r7, #28]
        break;
 8008a28:	e009      	b.n	8008a3e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008a2a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008a2e:	61fb      	str	r3, [r7, #28]
        break;
 8008a30:	e005      	b.n	8008a3e <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8008a32:	2300      	movs	r3, #0
 8008a34:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8008a36:	2301      	movs	r3, #1
 8008a38:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8008a3c:	bf00      	nop
    }

    if (pclk != 0U)
 8008a3e:	69fb      	ldr	r3, [r7, #28]
 8008a40:	2b00      	cmp	r3, #0
 8008a42:	d019      	beq.n	8008a78 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8008a44:	68fb      	ldr	r3, [r7, #12]
 8008a46:	685b      	ldr	r3, [r3, #4]
 8008a48:	085a      	lsrs	r2, r3, #1
 8008a4a:	69fb      	ldr	r3, [r7, #28]
 8008a4c:	441a      	add	r2, r3
 8008a4e:	68fb      	ldr	r3, [r7, #12]
 8008a50:	685b      	ldr	r3, [r3, #4]
 8008a52:	fbb2 f3f3 	udiv	r3, r2, r3
 8008a56:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008a58:	69bb      	ldr	r3, [r7, #24]
 8008a5a:	2b0f      	cmp	r3, #15
 8008a5c:	d909      	bls.n	8008a72 <UART_SetConfig+0x546>
 8008a5e:	69bb      	ldr	r3, [r7, #24]
 8008a60:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008a64:	d205      	bcs.n	8008a72 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008a66:	69bb      	ldr	r3, [r7, #24]
 8008a68:	b29a      	uxth	r2, r3
 8008a6a:	68fb      	ldr	r3, [r7, #12]
 8008a6c:	681b      	ldr	r3, [r3, #0]
 8008a6e:	60da      	str	r2, [r3, #12]
 8008a70:	e002      	b.n	8008a78 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8008a72:	2301      	movs	r3, #1
 8008a74:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008a78:	68fb      	ldr	r3, [r7, #12]
 8008a7a:	2200      	movs	r2, #0
 8008a7c:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8008a7e:	68fb      	ldr	r3, [r7, #12]
 8008a80:	2200      	movs	r2, #0
 8008a82:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8008a84:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8008a88:	4618      	mov	r0, r3
 8008a8a:	3728      	adds	r7, #40	@ 0x28
 8008a8c:	46bd      	mov	sp, r7
 8008a8e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008a92:	bf00      	nop
 8008a94:	40008000 	.word	0x40008000
 8008a98:	00f42400 	.word	0x00f42400

08008a9c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008a9c:	b480      	push	{r7}
 8008a9e:	b083      	sub	sp, #12
 8008aa0:	af00      	add	r7, sp, #0
 8008aa2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008aa8:	f003 0308 	and.w	r3, r3, #8
 8008aac:	2b00      	cmp	r3, #0
 8008aae:	d00a      	beq.n	8008ac6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	681b      	ldr	r3, [r3, #0]
 8008ab4:	685b      	ldr	r3, [r3, #4]
 8008ab6:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	681b      	ldr	r3, [r3, #0]
 8008ac2:	430a      	orrs	r2, r1
 8008ac4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008aca:	f003 0301 	and.w	r3, r3, #1
 8008ace:	2b00      	cmp	r3, #0
 8008ad0:	d00a      	beq.n	8008ae8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	681b      	ldr	r3, [r3, #0]
 8008ad6:	685b      	ldr	r3, [r3, #4]
 8008ad8:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	681b      	ldr	r3, [r3, #0]
 8008ae4:	430a      	orrs	r2, r1
 8008ae6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008aec:	f003 0302 	and.w	r3, r3, #2
 8008af0:	2b00      	cmp	r3, #0
 8008af2:	d00a      	beq.n	8008b0a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	681b      	ldr	r3, [r3, #0]
 8008af8:	685b      	ldr	r3, [r3, #4]
 8008afa:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	681b      	ldr	r3, [r3, #0]
 8008b06:	430a      	orrs	r2, r1
 8008b08:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008b0e:	f003 0304 	and.w	r3, r3, #4
 8008b12:	2b00      	cmp	r3, #0
 8008b14:	d00a      	beq.n	8008b2c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	681b      	ldr	r3, [r3, #0]
 8008b1a:	685b      	ldr	r3, [r3, #4]
 8008b1c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	681b      	ldr	r3, [r3, #0]
 8008b28:	430a      	orrs	r2, r1
 8008b2a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008b30:	f003 0310 	and.w	r3, r3, #16
 8008b34:	2b00      	cmp	r3, #0
 8008b36:	d00a      	beq.n	8008b4e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	681b      	ldr	r3, [r3, #0]
 8008b3c:	689b      	ldr	r3, [r3, #8]
 8008b3e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	681b      	ldr	r3, [r3, #0]
 8008b4a:	430a      	orrs	r2, r1
 8008b4c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008b52:	f003 0320 	and.w	r3, r3, #32
 8008b56:	2b00      	cmp	r3, #0
 8008b58:	d00a      	beq.n	8008b70 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	681b      	ldr	r3, [r3, #0]
 8008b5e:	689b      	ldr	r3, [r3, #8]
 8008b60:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	681b      	ldr	r3, [r3, #0]
 8008b6c:	430a      	orrs	r2, r1
 8008b6e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008b74:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008b78:	2b00      	cmp	r3, #0
 8008b7a:	d01a      	beq.n	8008bb2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	681b      	ldr	r3, [r3, #0]
 8008b80:	685b      	ldr	r3, [r3, #4]
 8008b82:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	681b      	ldr	r3, [r3, #0]
 8008b8e:	430a      	orrs	r2, r1
 8008b90:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008b96:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008b9a:	d10a      	bne.n	8008bb2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	681b      	ldr	r3, [r3, #0]
 8008ba0:	685b      	ldr	r3, [r3, #4]
 8008ba2:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	681b      	ldr	r3, [r3, #0]
 8008bae:	430a      	orrs	r2, r1
 8008bb0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008bb6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008bba:	2b00      	cmp	r3, #0
 8008bbc:	d00a      	beq.n	8008bd4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	681b      	ldr	r3, [r3, #0]
 8008bc2:	685b      	ldr	r3, [r3, #4]
 8008bc4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	681b      	ldr	r3, [r3, #0]
 8008bd0:	430a      	orrs	r2, r1
 8008bd2:	605a      	str	r2, [r3, #4]
  }
}
 8008bd4:	bf00      	nop
 8008bd6:	370c      	adds	r7, #12
 8008bd8:	46bd      	mov	sp, r7
 8008bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bde:	4770      	bx	lr

08008be0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008be0:	b580      	push	{r7, lr}
 8008be2:	b098      	sub	sp, #96	@ 0x60
 8008be4:	af02      	add	r7, sp, #8
 8008be6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	2200      	movs	r2, #0
 8008bec:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008bf0:	f7fb fe3e 	bl	8004870 <HAL_GetTick>
 8008bf4:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	681b      	ldr	r3, [r3, #0]
 8008bfa:	681b      	ldr	r3, [r3, #0]
 8008bfc:	f003 0308 	and.w	r3, r3, #8
 8008c00:	2b08      	cmp	r3, #8
 8008c02:	d12e      	bne.n	8008c62 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008c04:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8008c08:	9300      	str	r3, [sp, #0]
 8008c0a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008c0c:	2200      	movs	r2, #0
 8008c0e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8008c12:	6878      	ldr	r0, [r7, #4]
 8008c14:	f000 f88c 	bl	8008d30 <UART_WaitOnFlagUntilTimeout>
 8008c18:	4603      	mov	r3, r0
 8008c1a:	2b00      	cmp	r3, #0
 8008c1c:	d021      	beq.n	8008c62 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	681b      	ldr	r3, [r3, #0]
 8008c22:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c26:	e853 3f00 	ldrex	r3, [r3]
 8008c2a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008c2c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008c2e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008c32:	653b      	str	r3, [r7, #80]	@ 0x50
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	681b      	ldr	r3, [r3, #0]
 8008c38:	461a      	mov	r2, r3
 8008c3a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008c3c:	647b      	str	r3, [r7, #68]	@ 0x44
 8008c3e:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c40:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008c42:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008c44:	e841 2300 	strex	r3, r2, [r1]
 8008c48:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008c4a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008c4c:	2b00      	cmp	r3, #0
 8008c4e:	d1e6      	bne.n	8008c1e <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	2220      	movs	r2, #32
 8008c54:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	2200      	movs	r2, #0
 8008c5a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008c5e:	2303      	movs	r3, #3
 8008c60:	e062      	b.n	8008d28 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	681b      	ldr	r3, [r3, #0]
 8008c66:	681b      	ldr	r3, [r3, #0]
 8008c68:	f003 0304 	and.w	r3, r3, #4
 8008c6c:	2b04      	cmp	r3, #4
 8008c6e:	d149      	bne.n	8008d04 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008c70:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8008c74:	9300      	str	r3, [sp, #0]
 8008c76:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008c78:	2200      	movs	r2, #0
 8008c7a:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8008c7e:	6878      	ldr	r0, [r7, #4]
 8008c80:	f000 f856 	bl	8008d30 <UART_WaitOnFlagUntilTimeout>
 8008c84:	4603      	mov	r3, r0
 8008c86:	2b00      	cmp	r3, #0
 8008c88:	d03c      	beq.n	8008d04 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	681b      	ldr	r3, [r3, #0]
 8008c8e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c92:	e853 3f00 	ldrex	r3, [r3]
 8008c96:	623b      	str	r3, [r7, #32]
   return(result);
 8008c98:	6a3b      	ldr	r3, [r7, #32]
 8008c9a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008c9e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	681b      	ldr	r3, [r3, #0]
 8008ca4:	461a      	mov	r2, r3
 8008ca6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008ca8:	633b      	str	r3, [r7, #48]	@ 0x30
 8008caa:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008cac:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008cae:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008cb0:	e841 2300 	strex	r3, r2, [r1]
 8008cb4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008cb6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008cb8:	2b00      	cmp	r3, #0
 8008cba:	d1e6      	bne.n	8008c8a <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	681b      	ldr	r3, [r3, #0]
 8008cc0:	3308      	adds	r3, #8
 8008cc2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008cc4:	693b      	ldr	r3, [r7, #16]
 8008cc6:	e853 3f00 	ldrex	r3, [r3]
 8008cca:	60fb      	str	r3, [r7, #12]
   return(result);
 8008ccc:	68fb      	ldr	r3, [r7, #12]
 8008cce:	f023 0301 	bic.w	r3, r3, #1
 8008cd2:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	681b      	ldr	r3, [r3, #0]
 8008cd8:	3308      	adds	r3, #8
 8008cda:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008cdc:	61fa      	str	r2, [r7, #28]
 8008cde:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ce0:	69b9      	ldr	r1, [r7, #24]
 8008ce2:	69fa      	ldr	r2, [r7, #28]
 8008ce4:	e841 2300 	strex	r3, r2, [r1]
 8008ce8:	617b      	str	r3, [r7, #20]
   return(result);
 8008cea:	697b      	ldr	r3, [r7, #20]
 8008cec:	2b00      	cmp	r3, #0
 8008cee:	d1e5      	bne.n	8008cbc <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	2220      	movs	r2, #32
 8008cf4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	2200      	movs	r2, #0
 8008cfc:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008d00:	2303      	movs	r3, #3
 8008d02:	e011      	b.n	8008d28 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	2220      	movs	r2, #32
 8008d08:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	2220      	movs	r2, #32
 8008d0e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	2200      	movs	r2, #0
 8008d16:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	2200      	movs	r2, #0
 8008d1c:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	2200      	movs	r2, #0
 8008d22:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8008d26:	2300      	movs	r3, #0
}
 8008d28:	4618      	mov	r0, r3
 8008d2a:	3758      	adds	r7, #88	@ 0x58
 8008d2c:	46bd      	mov	sp, r7
 8008d2e:	bd80      	pop	{r7, pc}

08008d30 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008d30:	b580      	push	{r7, lr}
 8008d32:	b084      	sub	sp, #16
 8008d34:	af00      	add	r7, sp, #0
 8008d36:	60f8      	str	r0, [r7, #12]
 8008d38:	60b9      	str	r1, [r7, #8]
 8008d3a:	603b      	str	r3, [r7, #0]
 8008d3c:	4613      	mov	r3, r2
 8008d3e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008d40:	e04f      	b.n	8008de2 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008d42:	69bb      	ldr	r3, [r7, #24]
 8008d44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d48:	d04b      	beq.n	8008de2 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008d4a:	f7fb fd91 	bl	8004870 <HAL_GetTick>
 8008d4e:	4602      	mov	r2, r0
 8008d50:	683b      	ldr	r3, [r7, #0]
 8008d52:	1ad3      	subs	r3, r2, r3
 8008d54:	69ba      	ldr	r2, [r7, #24]
 8008d56:	429a      	cmp	r2, r3
 8008d58:	d302      	bcc.n	8008d60 <UART_WaitOnFlagUntilTimeout+0x30>
 8008d5a:	69bb      	ldr	r3, [r7, #24]
 8008d5c:	2b00      	cmp	r3, #0
 8008d5e:	d101      	bne.n	8008d64 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8008d60:	2303      	movs	r3, #3
 8008d62:	e04e      	b.n	8008e02 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8008d64:	68fb      	ldr	r3, [r7, #12]
 8008d66:	681b      	ldr	r3, [r3, #0]
 8008d68:	681b      	ldr	r3, [r3, #0]
 8008d6a:	f003 0304 	and.w	r3, r3, #4
 8008d6e:	2b00      	cmp	r3, #0
 8008d70:	d037      	beq.n	8008de2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8008d72:	68bb      	ldr	r3, [r7, #8]
 8008d74:	2b80      	cmp	r3, #128	@ 0x80
 8008d76:	d034      	beq.n	8008de2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8008d78:	68bb      	ldr	r3, [r7, #8]
 8008d7a:	2b40      	cmp	r3, #64	@ 0x40
 8008d7c:	d031      	beq.n	8008de2 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8008d7e:	68fb      	ldr	r3, [r7, #12]
 8008d80:	681b      	ldr	r3, [r3, #0]
 8008d82:	69db      	ldr	r3, [r3, #28]
 8008d84:	f003 0308 	and.w	r3, r3, #8
 8008d88:	2b08      	cmp	r3, #8
 8008d8a:	d110      	bne.n	8008dae <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008d8c:	68fb      	ldr	r3, [r7, #12]
 8008d8e:	681b      	ldr	r3, [r3, #0]
 8008d90:	2208      	movs	r2, #8
 8008d92:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008d94:	68f8      	ldr	r0, [r7, #12]
 8008d96:	f000 f838 	bl	8008e0a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8008d9a:	68fb      	ldr	r3, [r7, #12]
 8008d9c:	2208      	movs	r2, #8
 8008d9e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008da2:	68fb      	ldr	r3, [r7, #12]
 8008da4:	2200      	movs	r2, #0
 8008da6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8008daa:	2301      	movs	r3, #1
 8008dac:	e029      	b.n	8008e02 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008dae:	68fb      	ldr	r3, [r7, #12]
 8008db0:	681b      	ldr	r3, [r3, #0]
 8008db2:	69db      	ldr	r3, [r3, #28]
 8008db4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008db8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008dbc:	d111      	bne.n	8008de2 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008dbe:	68fb      	ldr	r3, [r7, #12]
 8008dc0:	681b      	ldr	r3, [r3, #0]
 8008dc2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8008dc6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008dc8:	68f8      	ldr	r0, [r7, #12]
 8008dca:	f000 f81e 	bl	8008e0a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008dce:	68fb      	ldr	r3, [r7, #12]
 8008dd0:	2220      	movs	r2, #32
 8008dd2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008dd6:	68fb      	ldr	r3, [r7, #12]
 8008dd8:	2200      	movs	r2, #0
 8008dda:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8008dde:	2303      	movs	r3, #3
 8008de0:	e00f      	b.n	8008e02 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008de2:	68fb      	ldr	r3, [r7, #12]
 8008de4:	681b      	ldr	r3, [r3, #0]
 8008de6:	69da      	ldr	r2, [r3, #28]
 8008de8:	68bb      	ldr	r3, [r7, #8]
 8008dea:	4013      	ands	r3, r2
 8008dec:	68ba      	ldr	r2, [r7, #8]
 8008dee:	429a      	cmp	r2, r3
 8008df0:	bf0c      	ite	eq
 8008df2:	2301      	moveq	r3, #1
 8008df4:	2300      	movne	r3, #0
 8008df6:	b2db      	uxtb	r3, r3
 8008df8:	461a      	mov	r2, r3
 8008dfa:	79fb      	ldrb	r3, [r7, #7]
 8008dfc:	429a      	cmp	r2, r3
 8008dfe:	d0a0      	beq.n	8008d42 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008e00:	2300      	movs	r3, #0
}
 8008e02:	4618      	mov	r0, r3
 8008e04:	3710      	adds	r7, #16
 8008e06:	46bd      	mov	sp, r7
 8008e08:	bd80      	pop	{r7, pc}

08008e0a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008e0a:	b480      	push	{r7}
 8008e0c:	b095      	sub	sp, #84	@ 0x54
 8008e0e:	af00      	add	r7, sp, #0
 8008e10:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	681b      	ldr	r3, [r3, #0]
 8008e16:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e18:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008e1a:	e853 3f00 	ldrex	r3, [r3]
 8008e1e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008e20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e22:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008e26:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	681b      	ldr	r3, [r3, #0]
 8008e2c:	461a      	mov	r2, r3
 8008e2e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008e30:	643b      	str	r3, [r7, #64]	@ 0x40
 8008e32:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e34:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008e36:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008e38:	e841 2300 	strex	r3, r2, [r1]
 8008e3c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008e3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e40:	2b00      	cmp	r3, #0
 8008e42:	d1e6      	bne.n	8008e12 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	681b      	ldr	r3, [r3, #0]
 8008e48:	3308      	adds	r3, #8
 8008e4a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e4c:	6a3b      	ldr	r3, [r7, #32]
 8008e4e:	e853 3f00 	ldrex	r3, [r3]
 8008e52:	61fb      	str	r3, [r7, #28]
   return(result);
 8008e54:	69fb      	ldr	r3, [r7, #28]
 8008e56:	f023 0301 	bic.w	r3, r3, #1
 8008e5a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	681b      	ldr	r3, [r3, #0]
 8008e60:	3308      	adds	r3, #8
 8008e62:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008e64:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008e66:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e68:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008e6a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008e6c:	e841 2300 	strex	r3, r2, [r1]
 8008e70:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008e72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e74:	2b00      	cmp	r3, #0
 8008e76:	d1e5      	bne.n	8008e44 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008e7c:	2b01      	cmp	r3, #1
 8008e7e:	d118      	bne.n	8008eb2 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	681b      	ldr	r3, [r3, #0]
 8008e84:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e86:	68fb      	ldr	r3, [r7, #12]
 8008e88:	e853 3f00 	ldrex	r3, [r3]
 8008e8c:	60bb      	str	r3, [r7, #8]
   return(result);
 8008e8e:	68bb      	ldr	r3, [r7, #8]
 8008e90:	f023 0310 	bic.w	r3, r3, #16
 8008e94:	647b      	str	r3, [r7, #68]	@ 0x44
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	681b      	ldr	r3, [r3, #0]
 8008e9a:	461a      	mov	r2, r3
 8008e9c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008e9e:	61bb      	str	r3, [r7, #24]
 8008ea0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ea2:	6979      	ldr	r1, [r7, #20]
 8008ea4:	69ba      	ldr	r2, [r7, #24]
 8008ea6:	e841 2300 	strex	r3, r2, [r1]
 8008eaa:	613b      	str	r3, [r7, #16]
   return(result);
 8008eac:	693b      	ldr	r3, [r7, #16]
 8008eae:	2b00      	cmp	r3, #0
 8008eb0:	d1e6      	bne.n	8008e80 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	2220      	movs	r2, #32
 8008eb6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	2200      	movs	r2, #0
 8008ebe:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	2200      	movs	r2, #0
 8008ec4:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8008ec6:	bf00      	nop
 8008ec8:	3754      	adds	r7, #84	@ 0x54
 8008eca:	46bd      	mov	sp, r7
 8008ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ed0:	4770      	bx	lr

08008ed2 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008ed2:	b084      	sub	sp, #16
 8008ed4:	b580      	push	{r7, lr}
 8008ed6:	b084      	sub	sp, #16
 8008ed8:	af00      	add	r7, sp, #0
 8008eda:	6078      	str	r0, [r7, #4]
 8008edc:	f107 001c 	add.w	r0, r7, #28
 8008ee0:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	68db      	ldr	r3, [r3, #12]
 8008ee8:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 8008ef0:	6878      	ldr	r0, [r7, #4]
 8008ef2:	f000 fa69 	bl	80093c8 <USB_CoreReset>
 8008ef6:	4603      	mov	r3, r0
 8008ef8:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 8008efa:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8008efe:	2b00      	cmp	r3, #0
 8008f00:	d106      	bne.n	8008f10 <USB_CoreInit+0x3e>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008f06:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	639a      	str	r2, [r3, #56]	@ 0x38
 8008f0e:	e005      	b.n	8008f1c <USB_CoreInit+0x4a>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008f14:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return ret;
 8008f1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f1e:	4618      	mov	r0, r3
 8008f20:	3710      	adds	r7, #16
 8008f22:	46bd      	mov	sp, r7
 8008f24:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008f28:	b004      	add	sp, #16
 8008f2a:	4770      	bx	lr

08008f2c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008f2c:	b480      	push	{r7}
 8008f2e:	b083      	sub	sp, #12
 8008f30:	af00      	add	r7, sp, #0
 8008f32:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	689b      	ldr	r3, [r3, #8]
 8008f38:	f023 0201 	bic.w	r2, r3, #1
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008f40:	2300      	movs	r3, #0
}
 8008f42:	4618      	mov	r0, r3
 8008f44:	370c      	adds	r7, #12
 8008f46:	46bd      	mov	sp, r7
 8008f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f4c:	4770      	bx	lr

08008f4e <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 8008f4e:	b580      	push	{r7, lr}
 8008f50:	b084      	sub	sp, #16
 8008f52:	af00      	add	r7, sp, #0
 8008f54:	6078      	str	r0, [r7, #4]
 8008f56:	460b      	mov	r3, r1
 8008f58:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8008f5a:	2300      	movs	r3, #0
 8008f5c:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	68db      	ldr	r3, [r3, #12]
 8008f62:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8008f6a:	78fb      	ldrb	r3, [r7, #3]
 8008f6c:	2b01      	cmp	r3, #1
 8008f6e:	d115      	bne.n	8008f9c <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	68db      	ldr	r3, [r3, #12]
 8008f74:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8008f7c:	200a      	movs	r0, #10
 8008f7e:	f7fb fc83 	bl	8004888 <HAL_Delay>
      ms += 10U;
 8008f82:	68fb      	ldr	r3, [r7, #12]
 8008f84:	330a      	adds	r3, #10
 8008f86:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8008f88:	6878      	ldr	r0, [r7, #4]
 8008f8a:	f000 fa0f 	bl	80093ac <USB_GetMode>
 8008f8e:	4603      	mov	r3, r0
 8008f90:	2b01      	cmp	r3, #1
 8008f92:	d01e      	beq.n	8008fd2 <USB_SetCurrentMode+0x84>
 8008f94:	68fb      	ldr	r3, [r7, #12]
 8008f96:	2bc7      	cmp	r3, #199	@ 0xc7
 8008f98:	d9f0      	bls.n	8008f7c <USB_SetCurrentMode+0x2e>
 8008f9a:	e01a      	b.n	8008fd2 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8008f9c:	78fb      	ldrb	r3, [r7, #3]
 8008f9e:	2b00      	cmp	r3, #0
 8008fa0:	d115      	bne.n	8008fce <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	68db      	ldr	r3, [r3, #12]
 8008fa6:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8008fae:	200a      	movs	r0, #10
 8008fb0:	f7fb fc6a 	bl	8004888 <HAL_Delay>
      ms += 10U;
 8008fb4:	68fb      	ldr	r3, [r7, #12]
 8008fb6:	330a      	adds	r3, #10
 8008fb8:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8008fba:	6878      	ldr	r0, [r7, #4]
 8008fbc:	f000 f9f6 	bl	80093ac <USB_GetMode>
 8008fc0:	4603      	mov	r3, r0
 8008fc2:	2b00      	cmp	r3, #0
 8008fc4:	d005      	beq.n	8008fd2 <USB_SetCurrentMode+0x84>
 8008fc6:	68fb      	ldr	r3, [r7, #12]
 8008fc8:	2bc7      	cmp	r3, #199	@ 0xc7
 8008fca:	d9f0      	bls.n	8008fae <USB_SetCurrentMode+0x60>
 8008fcc:	e001      	b.n	8008fd2 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8008fce:	2301      	movs	r3, #1
 8008fd0:	e005      	b.n	8008fde <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8008fd2:	68fb      	ldr	r3, [r7, #12]
 8008fd4:	2bc8      	cmp	r3, #200	@ 0xc8
 8008fd6:	d101      	bne.n	8008fdc <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8008fd8:	2301      	movs	r3, #1
 8008fda:	e000      	b.n	8008fde <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8008fdc:	2300      	movs	r3, #0
}
 8008fde:	4618      	mov	r0, r3
 8008fe0:	3710      	adds	r7, #16
 8008fe2:	46bd      	mov	sp, r7
 8008fe4:	bd80      	pop	{r7, pc}
	...

08008fe8 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008fe8:	b084      	sub	sp, #16
 8008fea:	b580      	push	{r7, lr}
 8008fec:	b086      	sub	sp, #24
 8008fee:	af00      	add	r7, sp, #0
 8008ff0:	6078      	str	r0, [r7, #4]
 8008ff2:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8008ff6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8008ffa:	2300      	movs	r3, #0
 8008ffc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8009002:	2300      	movs	r3, #0
 8009004:	613b      	str	r3, [r7, #16]
 8009006:	e009      	b.n	800901c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8009008:	687a      	ldr	r2, [r7, #4]
 800900a:	693b      	ldr	r3, [r7, #16]
 800900c:	3340      	adds	r3, #64	@ 0x40
 800900e:	009b      	lsls	r3, r3, #2
 8009010:	4413      	add	r3, r2
 8009012:	2200      	movs	r2, #0
 8009014:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8009016:	693b      	ldr	r3, [r7, #16]
 8009018:	3301      	adds	r3, #1
 800901a:	613b      	str	r3, [r7, #16]
 800901c:	693b      	ldr	r3, [r7, #16]
 800901e:	2b0e      	cmp	r3, #14
 8009020:	d9f2      	bls.n	8009008 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8009022:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8009026:	2b00      	cmp	r3, #0
 8009028:	d11c      	bne.n	8009064 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800902a:	68fb      	ldr	r3, [r7, #12]
 800902c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009030:	685b      	ldr	r3, [r3, #4]
 8009032:	68fa      	ldr	r2, [r7, #12]
 8009034:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8009038:	f043 0302 	orr.w	r3, r3, #2
 800903c:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009042:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	681b      	ldr	r3, [r3, #0]
 800904e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	681b      	ldr	r3, [r3, #0]
 800905a:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	601a      	str	r2, [r3, #0]
 8009062:	e005      	b.n	8009070 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009068:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8009070:	68fb      	ldr	r3, [r7, #12]
 8009072:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8009076:	461a      	mov	r2, r3
 8009078:	2300      	movs	r3, #0
 800907a:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800907c:	2103      	movs	r1, #3
 800907e:	6878      	ldr	r0, [r7, #4]
 8009080:	f000 f95a 	bl	8009338 <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8009084:	2110      	movs	r1, #16
 8009086:	6878      	ldr	r0, [r7, #4]
 8009088:	f000 f8f6 	bl	8009278 <USB_FlushTxFifo>
 800908c:	4603      	mov	r3, r0
 800908e:	2b00      	cmp	r3, #0
 8009090:	d001      	beq.n	8009096 <USB_DevInit+0xae>
  {
    ret = HAL_ERROR;
 8009092:	2301      	movs	r3, #1
 8009094:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8009096:	6878      	ldr	r0, [r7, #4]
 8009098:	f000 f920 	bl	80092dc <USB_FlushRxFifo>
 800909c:	4603      	mov	r3, r0
 800909e:	2b00      	cmp	r3, #0
 80090a0:	d001      	beq.n	80090a6 <USB_DevInit+0xbe>
  {
    ret = HAL_ERROR;
 80090a2:	2301      	movs	r3, #1
 80090a4:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80090a6:	68fb      	ldr	r3, [r7, #12]
 80090a8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80090ac:	461a      	mov	r2, r3
 80090ae:	2300      	movs	r3, #0
 80090b0:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80090b2:	68fb      	ldr	r3, [r7, #12]
 80090b4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80090b8:	461a      	mov	r2, r3
 80090ba:	2300      	movs	r3, #0
 80090bc:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80090be:	68fb      	ldr	r3, [r7, #12]
 80090c0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80090c4:	461a      	mov	r2, r3
 80090c6:	2300      	movs	r3, #0
 80090c8:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80090ca:	2300      	movs	r3, #0
 80090cc:	613b      	str	r3, [r7, #16]
 80090ce:	e043      	b.n	8009158 <USB_DevInit+0x170>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80090d0:	693b      	ldr	r3, [r7, #16]
 80090d2:	015a      	lsls	r2, r3, #5
 80090d4:	68fb      	ldr	r3, [r7, #12]
 80090d6:	4413      	add	r3, r2
 80090d8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80090dc:	681b      	ldr	r3, [r3, #0]
 80090de:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80090e2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80090e6:	d118      	bne.n	800911a <USB_DevInit+0x132>
    {
      if (i == 0U)
 80090e8:	693b      	ldr	r3, [r7, #16]
 80090ea:	2b00      	cmp	r3, #0
 80090ec:	d10a      	bne.n	8009104 <USB_DevInit+0x11c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80090ee:	693b      	ldr	r3, [r7, #16]
 80090f0:	015a      	lsls	r2, r3, #5
 80090f2:	68fb      	ldr	r3, [r7, #12]
 80090f4:	4413      	add	r3, r2
 80090f6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80090fa:	461a      	mov	r2, r3
 80090fc:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8009100:	6013      	str	r3, [r2, #0]
 8009102:	e013      	b.n	800912c <USB_DevInit+0x144>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8009104:	693b      	ldr	r3, [r7, #16]
 8009106:	015a      	lsls	r2, r3, #5
 8009108:	68fb      	ldr	r3, [r7, #12]
 800910a:	4413      	add	r3, r2
 800910c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009110:	461a      	mov	r2, r3
 8009112:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8009116:	6013      	str	r3, [r2, #0]
 8009118:	e008      	b.n	800912c <USB_DevInit+0x144>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800911a:	693b      	ldr	r3, [r7, #16]
 800911c:	015a      	lsls	r2, r3, #5
 800911e:	68fb      	ldr	r3, [r7, #12]
 8009120:	4413      	add	r3, r2
 8009122:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009126:	461a      	mov	r2, r3
 8009128:	2300      	movs	r3, #0
 800912a:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800912c:	693b      	ldr	r3, [r7, #16]
 800912e:	015a      	lsls	r2, r3, #5
 8009130:	68fb      	ldr	r3, [r7, #12]
 8009132:	4413      	add	r3, r2
 8009134:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009138:	461a      	mov	r2, r3
 800913a:	2300      	movs	r3, #0
 800913c:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800913e:	693b      	ldr	r3, [r7, #16]
 8009140:	015a      	lsls	r2, r3, #5
 8009142:	68fb      	ldr	r3, [r7, #12]
 8009144:	4413      	add	r3, r2
 8009146:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800914a:	461a      	mov	r2, r3
 800914c:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8009150:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009152:	693b      	ldr	r3, [r7, #16]
 8009154:	3301      	adds	r3, #1
 8009156:	613b      	str	r3, [r7, #16]
 8009158:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800915c:	461a      	mov	r2, r3
 800915e:	693b      	ldr	r3, [r7, #16]
 8009160:	4293      	cmp	r3, r2
 8009162:	d3b5      	bcc.n	80090d0 <USB_DevInit+0xe8>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009164:	2300      	movs	r3, #0
 8009166:	613b      	str	r3, [r7, #16]
 8009168:	e043      	b.n	80091f2 <USB_DevInit+0x20a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800916a:	693b      	ldr	r3, [r7, #16]
 800916c:	015a      	lsls	r2, r3, #5
 800916e:	68fb      	ldr	r3, [r7, #12]
 8009170:	4413      	add	r3, r2
 8009172:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009176:	681b      	ldr	r3, [r3, #0]
 8009178:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800917c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009180:	d118      	bne.n	80091b4 <USB_DevInit+0x1cc>
    {
      if (i == 0U)
 8009182:	693b      	ldr	r3, [r7, #16]
 8009184:	2b00      	cmp	r3, #0
 8009186:	d10a      	bne.n	800919e <USB_DevInit+0x1b6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8009188:	693b      	ldr	r3, [r7, #16]
 800918a:	015a      	lsls	r2, r3, #5
 800918c:	68fb      	ldr	r3, [r7, #12]
 800918e:	4413      	add	r3, r2
 8009190:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009194:	461a      	mov	r2, r3
 8009196:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800919a:	6013      	str	r3, [r2, #0]
 800919c:	e013      	b.n	80091c6 <USB_DevInit+0x1de>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800919e:	693b      	ldr	r3, [r7, #16]
 80091a0:	015a      	lsls	r2, r3, #5
 80091a2:	68fb      	ldr	r3, [r7, #12]
 80091a4:	4413      	add	r3, r2
 80091a6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80091aa:	461a      	mov	r2, r3
 80091ac:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80091b0:	6013      	str	r3, [r2, #0]
 80091b2:	e008      	b.n	80091c6 <USB_DevInit+0x1de>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80091b4:	693b      	ldr	r3, [r7, #16]
 80091b6:	015a      	lsls	r2, r3, #5
 80091b8:	68fb      	ldr	r3, [r7, #12]
 80091ba:	4413      	add	r3, r2
 80091bc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80091c0:	461a      	mov	r2, r3
 80091c2:	2300      	movs	r3, #0
 80091c4:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80091c6:	693b      	ldr	r3, [r7, #16]
 80091c8:	015a      	lsls	r2, r3, #5
 80091ca:	68fb      	ldr	r3, [r7, #12]
 80091cc:	4413      	add	r3, r2
 80091ce:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80091d2:	461a      	mov	r2, r3
 80091d4:	2300      	movs	r3, #0
 80091d6:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80091d8:	693b      	ldr	r3, [r7, #16]
 80091da:	015a      	lsls	r2, r3, #5
 80091dc:	68fb      	ldr	r3, [r7, #12]
 80091de:	4413      	add	r3, r2
 80091e0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80091e4:	461a      	mov	r2, r3
 80091e6:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80091ea:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80091ec:	693b      	ldr	r3, [r7, #16]
 80091ee:	3301      	adds	r3, #1
 80091f0:	613b      	str	r3, [r7, #16]
 80091f2:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80091f6:	461a      	mov	r2, r3
 80091f8:	693b      	ldr	r3, [r7, #16]
 80091fa:	4293      	cmp	r3, r2
 80091fc:	d3b5      	bcc.n	800916a <USB_DevInit+0x182>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80091fe:	68fb      	ldr	r3, [r7, #12]
 8009200:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009204:	691b      	ldr	r3, [r3, #16]
 8009206:	68fa      	ldr	r2, [r7, #12]
 8009208:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800920c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009210:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	2200      	movs	r2, #0
 8009216:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 800921e:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	699b      	ldr	r3, [r3, #24]
 8009224:	f043 0210 	orr.w	r2, r3, #16
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	699a      	ldr	r2, [r3, #24]
 8009230:	4b10      	ldr	r3, [pc, #64]	@ (8009274 <USB_DevInit+0x28c>)
 8009232:	4313      	orrs	r3, r2
 8009234:	687a      	ldr	r2, [r7, #4]
 8009236:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8009238:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 800923c:	2b00      	cmp	r3, #0
 800923e:	d005      	beq.n	800924c <USB_DevInit+0x264>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	699b      	ldr	r3, [r3, #24]
 8009244:	f043 0208 	orr.w	r2, r3, #8
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800924c:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8009250:	2b01      	cmp	r3, #1
 8009252:	d107      	bne.n	8009264 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	699b      	ldr	r3, [r3, #24]
 8009258:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800925c:	f043 0304 	orr.w	r3, r3, #4
 8009260:	687a      	ldr	r2, [r7, #4]
 8009262:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8009264:	7dfb      	ldrb	r3, [r7, #23]
}
 8009266:	4618      	mov	r0, r3
 8009268:	3718      	adds	r7, #24
 800926a:	46bd      	mov	sp, r7
 800926c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009270:	b004      	add	sp, #16
 8009272:	4770      	bx	lr
 8009274:	803c3800 	.word	0x803c3800

08009278 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8009278:	b480      	push	{r7}
 800927a:	b085      	sub	sp, #20
 800927c:	af00      	add	r7, sp, #0
 800927e:	6078      	str	r0, [r7, #4]
 8009280:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8009282:	2300      	movs	r3, #0
 8009284:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009286:	68fb      	ldr	r3, [r7, #12]
 8009288:	3301      	adds	r3, #1
 800928a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800928c:	68fb      	ldr	r3, [r7, #12]
 800928e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8009292:	d901      	bls.n	8009298 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8009294:	2303      	movs	r3, #3
 8009296:	e01b      	b.n	80092d0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	691b      	ldr	r3, [r3, #16]
 800929c:	2b00      	cmp	r3, #0
 800929e:	daf2      	bge.n	8009286 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80092a0:	2300      	movs	r3, #0
 80092a2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80092a4:	683b      	ldr	r3, [r7, #0]
 80092a6:	019b      	lsls	r3, r3, #6
 80092a8:	f043 0220 	orr.w	r2, r3, #32
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80092b0:	68fb      	ldr	r3, [r7, #12]
 80092b2:	3301      	adds	r3, #1
 80092b4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80092b6:	68fb      	ldr	r3, [r7, #12]
 80092b8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80092bc:	d901      	bls.n	80092c2 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80092be:	2303      	movs	r3, #3
 80092c0:	e006      	b.n	80092d0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	691b      	ldr	r3, [r3, #16]
 80092c6:	f003 0320 	and.w	r3, r3, #32
 80092ca:	2b20      	cmp	r3, #32
 80092cc:	d0f0      	beq.n	80092b0 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80092ce:	2300      	movs	r3, #0
}
 80092d0:	4618      	mov	r0, r3
 80092d2:	3714      	adds	r7, #20
 80092d4:	46bd      	mov	sp, r7
 80092d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092da:	4770      	bx	lr

080092dc <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80092dc:	b480      	push	{r7}
 80092de:	b085      	sub	sp, #20
 80092e0:	af00      	add	r7, sp, #0
 80092e2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80092e4:	2300      	movs	r3, #0
 80092e6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80092e8:	68fb      	ldr	r3, [r7, #12]
 80092ea:	3301      	adds	r3, #1
 80092ec:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80092ee:	68fb      	ldr	r3, [r7, #12]
 80092f0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80092f4:	d901      	bls.n	80092fa <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80092f6:	2303      	movs	r3, #3
 80092f8:	e018      	b.n	800932c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	691b      	ldr	r3, [r3, #16]
 80092fe:	2b00      	cmp	r3, #0
 8009300:	daf2      	bge.n	80092e8 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8009302:	2300      	movs	r3, #0
 8009304:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	2210      	movs	r2, #16
 800930a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800930c:	68fb      	ldr	r3, [r7, #12]
 800930e:	3301      	adds	r3, #1
 8009310:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009312:	68fb      	ldr	r3, [r7, #12]
 8009314:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8009318:	d901      	bls.n	800931e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800931a:	2303      	movs	r3, #3
 800931c:	e006      	b.n	800932c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	691b      	ldr	r3, [r3, #16]
 8009322:	f003 0310 	and.w	r3, r3, #16
 8009326:	2b10      	cmp	r3, #16
 8009328:	d0f0      	beq.n	800930c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800932a:	2300      	movs	r3, #0
}
 800932c:	4618      	mov	r0, r3
 800932e:	3714      	adds	r7, #20
 8009330:	46bd      	mov	sp, r7
 8009332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009336:	4770      	bx	lr

08009338 <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8009338:	b480      	push	{r7}
 800933a:	b085      	sub	sp, #20
 800933c:	af00      	add	r7, sp, #0
 800933e:	6078      	str	r0, [r7, #4]
 8009340:	460b      	mov	r3, r1
 8009342:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8009348:	68fb      	ldr	r3, [r7, #12]
 800934a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800934e:	681a      	ldr	r2, [r3, #0]
 8009350:	78fb      	ldrb	r3, [r7, #3]
 8009352:	68f9      	ldr	r1, [r7, #12]
 8009354:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009358:	4313      	orrs	r3, r2
 800935a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800935c:	2300      	movs	r3, #0
}
 800935e:	4618      	mov	r0, r3
 8009360:	3714      	adds	r7, #20
 8009362:	46bd      	mov	sp, r7
 8009364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009368:	4770      	bx	lr

0800936a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800936a:	b480      	push	{r7}
 800936c:	b085      	sub	sp, #20
 800936e:	af00      	add	r7, sp, #0
 8009370:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8009376:	68fb      	ldr	r3, [r7, #12]
 8009378:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800937c:	681b      	ldr	r3, [r3, #0]
 800937e:	68fa      	ldr	r2, [r7, #12]
 8009380:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8009384:	f023 0303 	bic.w	r3, r3, #3
 8009388:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800938a:	68fb      	ldr	r3, [r7, #12]
 800938c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009390:	685b      	ldr	r3, [r3, #4]
 8009392:	68fa      	ldr	r2, [r7, #12]
 8009394:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8009398:	f043 0302 	orr.w	r3, r3, #2
 800939c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800939e:	2300      	movs	r3, #0
}
 80093a0:	4618      	mov	r0, r3
 80093a2:	3714      	adds	r7, #20
 80093a4:	46bd      	mov	sp, r7
 80093a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093aa:	4770      	bx	lr

080093ac <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 80093ac:	b480      	push	{r7}
 80093ae:	b083      	sub	sp, #12
 80093b0:	af00      	add	r7, sp, #0
 80093b2:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	695b      	ldr	r3, [r3, #20]
 80093b8:	f003 0301 	and.w	r3, r3, #1
}
 80093bc:	4618      	mov	r0, r3
 80093be:	370c      	adds	r7, #12
 80093c0:	46bd      	mov	sp, r7
 80093c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093c6:	4770      	bx	lr

080093c8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80093c8:	b480      	push	{r7}
 80093ca:	b085      	sub	sp, #20
 80093cc:	af00      	add	r7, sp, #0
 80093ce:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80093d0:	2300      	movs	r3, #0
 80093d2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80093d4:	68fb      	ldr	r3, [r7, #12]
 80093d6:	3301      	adds	r3, #1
 80093d8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80093da:	68fb      	ldr	r3, [r7, #12]
 80093dc:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80093e0:	d901      	bls.n	80093e6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80093e2:	2303      	movs	r3, #3
 80093e4:	e01b      	b.n	800941e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	691b      	ldr	r3, [r3, #16]
 80093ea:	2b00      	cmp	r3, #0
 80093ec:	daf2      	bge.n	80093d4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80093ee:	2300      	movs	r3, #0
 80093f0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	691b      	ldr	r3, [r3, #16]
 80093f6:	f043 0201 	orr.w	r2, r3, #1
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80093fe:	68fb      	ldr	r3, [r7, #12]
 8009400:	3301      	adds	r3, #1
 8009402:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009404:	68fb      	ldr	r3, [r7, #12]
 8009406:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800940a:	d901      	bls.n	8009410 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800940c:	2303      	movs	r3, #3
 800940e:	e006      	b.n	800941e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	691b      	ldr	r3, [r3, #16]
 8009414:	f003 0301 	and.w	r3, r3, #1
 8009418:	2b01      	cmp	r3, #1
 800941a:	d0f0      	beq.n	80093fe <USB_CoreReset+0x36>

  return HAL_OK;
 800941c:	2300      	movs	r3, #0
}
 800941e:	4618      	mov	r0, r3
 8009420:	3714      	adds	r7, #20
 8009422:	46bd      	mov	sp, r7
 8009424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009428:	4770      	bx	lr

0800942a <aci_gap_init_IDB05A1>:

#define MIN(a,b)            ((a) < (b) )? (a) : (b)
#define MAX(a,b)            ((a) > (b) )? (a) : (b)

tBleStatus aci_gap_init_IDB05A1(uint8_t role, uint8_t privacy_enabled, uint8_t device_name_char_len, uint16_t* service_handle, uint16_t* dev_name_char_handle, uint16_t* appearance_char_handle)
{
 800942a:	b580      	push	{r7, lr}
 800942c:	b08c      	sub	sp, #48	@ 0x30
 800942e:	af00      	add	r7, sp, #0
 8009430:	603b      	str	r3, [r7, #0]
 8009432:	4603      	mov	r3, r0
 8009434:	71fb      	strb	r3, [r7, #7]
 8009436:	460b      	mov	r3, r1
 8009438:	71bb      	strb	r3, [r7, #6]
 800943a:	4613      	mov	r3, r2
 800943c:	717b      	strb	r3, [r7, #5]
  struct hci_request rq;
  gap_init_cp_IDB05A1 cp;
  gap_init_rp resp;
 
  cp.role = role;
 800943e:	79fb      	ldrb	r3, [r7, #7]
 8009440:	753b      	strb	r3, [r7, #20]
  cp.privacy_enabled = privacy_enabled;
 8009442:	79bb      	ldrb	r3, [r7, #6]
 8009444:	757b      	strb	r3, [r7, #21]
  cp.device_name_char_len = device_name_char_len;
 8009446:	797b      	ldrb	r3, [r7, #5]
 8009448:	75bb      	strb	r3, [r7, #22]
    
  BLUENRG_memset(&resp, 0, sizeof(resp));
 800944a:	f107 030c 	add.w	r3, r7, #12
 800944e:	2207      	movs	r2, #7
 8009450:	2100      	movs	r1, #0
 8009452:	4618      	mov	r0, r3
 8009454:	f002 f9b1 	bl	800b7ba <memset>
  
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8009458:	f107 0318 	add.w	r3, r7, #24
 800945c:	2218      	movs	r2, #24
 800945e:	2100      	movs	r1, #0
 8009460:	4618      	mov	r0, r3
 8009462:	f002 f9aa 	bl	800b7ba <memset>
  rq.ogf = OGF_VENDOR_CMD;
 8009466:	233f      	movs	r3, #63	@ 0x3f
 8009468:	833b      	strh	r3, [r7, #24]
  rq.ocf = OCF_GAP_INIT;
 800946a:	238a      	movs	r3, #138	@ 0x8a
 800946c:	837b      	strh	r3, [r7, #26]
  rq.cparam = &cp;
 800946e:	f107 0314 	add.w	r3, r7, #20
 8009472:	623b      	str	r3, [r7, #32]
  rq.clen = sizeof(cp);
 8009474:	2303      	movs	r3, #3
 8009476:	627b      	str	r3, [r7, #36]	@ 0x24
  rq.rparam = &resp;
 8009478:	f107 030c 	add.w	r3, r7, #12
 800947c:	62bb      	str	r3, [r7, #40]	@ 0x28
  rq.rlen = GAP_INIT_RP_SIZE;
 800947e:	2307      	movs	r3, #7
 8009480:	62fb      	str	r3, [r7, #44]	@ 0x2c
  
  if (hci_send_req(&rq, FALSE) < 0)
 8009482:	f107 0318 	add.w	r3, r7, #24
 8009486:	2100      	movs	r1, #0
 8009488:	4618      	mov	r0, r3
 800948a:	f000 fef7 	bl	800a27c <hci_send_req>
 800948e:	4603      	mov	r3, r0
 8009490:	2b00      	cmp	r3, #0
 8009492:	da01      	bge.n	8009498 <aci_gap_init_IDB05A1+0x6e>
    return BLE_STATUS_TIMEOUT;
 8009494:	23ff      	movs	r3, #255	@ 0xff
 8009496:	e014      	b.n	80094c2 <aci_gap_init_IDB05A1+0x98>
  
  if (resp.status) {
 8009498:	7b3b      	ldrb	r3, [r7, #12]
 800949a:	2b00      	cmp	r3, #0
 800949c:	d001      	beq.n	80094a2 <aci_gap_init_IDB05A1+0x78>
    return resp.status;
 800949e:	7b3b      	ldrb	r3, [r7, #12]
 80094a0:	e00f      	b.n	80094c2 <aci_gap_init_IDB05A1+0x98>
  }
  
  *service_handle = btohs(resp.service_handle);
 80094a2:	f8b7 300d 	ldrh.w	r3, [r7, #13]
 80094a6:	b29a      	uxth	r2, r3
 80094a8:	683b      	ldr	r3, [r7, #0]
 80094aa:	801a      	strh	r2, [r3, #0]
  *dev_name_char_handle = btohs(resp.dev_name_char_handle);
 80094ac:	f8b7 300f 	ldrh.w	r3, [r7, #15]
 80094b0:	b29a      	uxth	r2, r3
 80094b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80094b4:	801a      	strh	r2, [r3, #0]
  *appearance_char_handle = btohs(resp.appearance_char_handle);
 80094b6:	f8b7 3011 	ldrh.w	r3, [r7, #17]
 80094ba:	b29a      	uxth	r2, r3
 80094bc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80094be:	801a      	strh	r2, [r3, #0]
  
  return 0;
 80094c0:	2300      	movs	r3, #0
}
 80094c2:	4618      	mov	r0, r3
 80094c4:	3730      	adds	r7, #48	@ 0x30
 80094c6:	46bd      	mov	sp, r7
 80094c8:	bd80      	pop	{r7, pc}

080094ca <aci_gap_init_IDB04A1>:

tBleStatus aci_gap_init_IDB04A1(uint8_t role, uint16_t* service_handle, uint16_t* dev_name_char_handle, uint16_t* appearance_char_handle)
{
 80094ca:	b580      	push	{r7, lr}
 80094cc:	b08e      	sub	sp, #56	@ 0x38
 80094ce:	af00      	add	r7, sp, #0
 80094d0:	60b9      	str	r1, [r7, #8]
 80094d2:	607a      	str	r2, [r7, #4]
 80094d4:	603b      	str	r3, [r7, #0]
 80094d6:	4603      	mov	r3, r0
 80094d8:	73fb      	strb	r3, [r7, #15]
  struct hci_request rq;
  gap_init_cp_IDB04A1 cp;
  gap_init_rp resp;

  cp.role = role;
 80094da:	7bfb      	ldrb	r3, [r7, #15]
 80094dc:	773b      	strb	r3, [r7, #28]
    
  BLUENRG_memset(&resp, 0, sizeof(resp));
 80094de:	f107 0314 	add.w	r3, r7, #20
 80094e2:	2207      	movs	r2, #7
 80094e4:	2100      	movs	r1, #0
 80094e6:	4618      	mov	r0, r3
 80094e8:	f002 f967 	bl	800b7ba <memset>
  
  BLUENRG_memset(&rq, 0, sizeof(rq));
 80094ec:	f107 0320 	add.w	r3, r7, #32
 80094f0:	2218      	movs	r2, #24
 80094f2:	2100      	movs	r1, #0
 80094f4:	4618      	mov	r0, r3
 80094f6:	f002 f960 	bl	800b7ba <memset>
  rq.ogf = OGF_VENDOR_CMD;
 80094fa:	233f      	movs	r3, #63	@ 0x3f
 80094fc:	843b      	strh	r3, [r7, #32]
  rq.ocf = OCF_GAP_INIT;
 80094fe:	238a      	movs	r3, #138	@ 0x8a
 8009500:	847b      	strh	r3, [r7, #34]	@ 0x22
  rq.cparam = &cp;
 8009502:	f107 031c 	add.w	r3, r7, #28
 8009506:	62bb      	str	r3, [r7, #40]	@ 0x28
  rq.clen = sizeof(cp);
 8009508:	2301      	movs	r3, #1
 800950a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  rq.rparam = &resp;
 800950c:	f107 0314 	add.w	r3, r7, #20
 8009510:	633b      	str	r3, [r7, #48]	@ 0x30
  rq.rlen = GAP_INIT_RP_SIZE;
 8009512:	2307      	movs	r3, #7
 8009514:	637b      	str	r3, [r7, #52]	@ 0x34
  
  if (hci_send_req(&rq, FALSE) < 0)
 8009516:	f107 0320 	add.w	r3, r7, #32
 800951a:	2100      	movs	r1, #0
 800951c:	4618      	mov	r0, r3
 800951e:	f000 fead 	bl	800a27c <hci_send_req>
 8009522:	4603      	mov	r3, r0
 8009524:	2b00      	cmp	r3, #0
 8009526:	da01      	bge.n	800952c <aci_gap_init_IDB04A1+0x62>
    return BLE_STATUS_TIMEOUT;
 8009528:	23ff      	movs	r3, #255	@ 0xff
 800952a:	e014      	b.n	8009556 <aci_gap_init_IDB04A1+0x8c>
  
  if (resp.status) {
 800952c:	7d3b      	ldrb	r3, [r7, #20]
 800952e:	2b00      	cmp	r3, #0
 8009530:	d001      	beq.n	8009536 <aci_gap_init_IDB04A1+0x6c>
    return resp.status;
 8009532:	7d3b      	ldrb	r3, [r7, #20]
 8009534:	e00f      	b.n	8009556 <aci_gap_init_IDB04A1+0x8c>
  }
  
  *service_handle = btohs(resp.service_handle);
 8009536:	f8b7 3015 	ldrh.w	r3, [r7, #21]
 800953a:	b29a      	uxth	r2, r3
 800953c:	68bb      	ldr	r3, [r7, #8]
 800953e:	801a      	strh	r2, [r3, #0]
  *dev_name_char_handle = btohs(resp.dev_name_char_handle);
 8009540:	f8b7 3017 	ldrh.w	r3, [r7, #23]
 8009544:	b29a      	uxth	r2, r3
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	801a      	strh	r2, [r3, #0]
  *appearance_char_handle = btohs(resp.appearance_char_handle);
 800954a:	f8b7 3019 	ldrh.w	r3, [r7, #25]
 800954e:	b29a      	uxth	r2, r3
 8009550:	683b      	ldr	r3, [r7, #0]
 8009552:	801a      	strh	r2, [r3, #0]
  
  return 0;
 8009554:	2300      	movs	r3, #0
}
 8009556:	4618      	mov	r0, r3
 8009558:	3738      	adds	r7, #56	@ 0x38
 800955a:	46bd      	mov	sp, r7
 800955c:	bd80      	pop	{r7, pc}

0800955e <aci_gap_set_discoverable>:

tBleStatus aci_gap_set_discoverable(uint8_t AdvType, uint16_t AdvIntervMin, uint16_t AdvIntervMax,
                             uint8_t OwnAddrType, uint8_t AdvFilterPolicy, uint8_t LocalNameLen,
                             const char *LocalName, uint8_t ServiceUUIDLen, uint8_t* ServiceUUIDList,
                             uint16_t SlaveConnIntervMin, uint16_t SlaveConnIntervMax)
{
 800955e:	b590      	push	{r4, r7, lr}
 8009560:	b095      	sub	sp, #84	@ 0x54
 8009562:	af00      	add	r7, sp, #0
 8009564:	4604      	mov	r4, r0
 8009566:	4608      	mov	r0, r1
 8009568:	4611      	mov	r1, r2
 800956a:	461a      	mov	r2, r3
 800956c:	4623      	mov	r3, r4
 800956e:	71fb      	strb	r3, [r7, #7]
 8009570:	4603      	mov	r3, r0
 8009572:	80bb      	strh	r3, [r7, #4]
 8009574:	460b      	mov	r3, r1
 8009576:	807b      	strh	r3, [r7, #2]
 8009578:	4613      	mov	r3, r2
 800957a:	71bb      	strb	r3, [r7, #6]
  struct hci_request rq;
  uint8_t status;    
  uint8_t buffer[40];
  uint8_t indx = 0;
 800957c:	2300      	movs	r3, #0
 800957e:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
  
  if ((LocalNameLen+ServiceUUIDLen+14) > sizeof(buffer))
 8009582:	f897 2064 	ldrb.w	r2, [r7, #100]	@ 0x64
 8009586:	f897 306c 	ldrb.w	r3, [r7, #108]	@ 0x6c
 800958a:	4413      	add	r3, r2
 800958c:	330e      	adds	r3, #14
 800958e:	2b28      	cmp	r3, #40	@ 0x28
 8009590:	d901      	bls.n	8009596 <aci_gap_set_discoverable+0x38>
    return BLE_STATUS_INVALID_PARAMS;
 8009592:	2342      	movs	r3, #66	@ 0x42
 8009594:	e0c9      	b.n	800972a <aci_gap_set_discoverable+0x1cc>

  buffer[indx] = AdvType;
 8009596:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800959a:	3350      	adds	r3, #80	@ 0x50
 800959c:	443b      	add	r3, r7
 800959e:	79fa      	ldrb	r2, [r7, #7]
 80095a0:	f803 2c48 	strb.w	r2, [r3, #-72]
  indx++;
 80095a4:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80095a8:	3301      	adds	r3, #1
 80095aa:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
  
  AdvIntervMin = htobs(AdvIntervMin);
 80095ae:	88bb      	ldrh	r3, [r7, #4]
 80095b0:	80bb      	strh	r3, [r7, #4]
  BLUENRG_memcpy(buffer + indx, &AdvIntervMin, 2);
 80095b2:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80095b6:	f107 0208 	add.w	r2, r7, #8
 80095ba:	4413      	add	r3, r2
 80095bc:	88ba      	ldrh	r2, [r7, #4]
 80095be:	801a      	strh	r2, [r3, #0]
  indx +=  2;
 80095c0:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80095c4:	3302      	adds	r3, #2
 80095c6:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
    
  AdvIntervMax = htobs(AdvIntervMax);
 80095ca:	887b      	ldrh	r3, [r7, #2]
 80095cc:	807b      	strh	r3, [r7, #2]
  BLUENRG_memcpy(buffer + indx, &AdvIntervMax, 2);
 80095ce:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80095d2:	f107 0208 	add.w	r2, r7, #8
 80095d6:	4413      	add	r3, r2
 80095d8:	887a      	ldrh	r2, [r7, #2]
 80095da:	801a      	strh	r2, [r3, #0]
  indx +=  2;
 80095dc:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80095e0:	3302      	adds	r3, #2
 80095e2:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
    
  buffer[indx] = OwnAddrType;
 80095e6:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80095ea:	3350      	adds	r3, #80	@ 0x50
 80095ec:	443b      	add	r3, r7
 80095ee:	79ba      	ldrb	r2, [r7, #6]
 80095f0:	f803 2c48 	strb.w	r2, [r3, #-72]
  indx++;
 80095f4:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80095f8:	3301      	adds	r3, #1
 80095fa:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
    
  buffer[indx] = AdvFilterPolicy;
 80095fe:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8009602:	3350      	adds	r3, #80	@ 0x50
 8009604:	443b      	add	r3, r7
 8009606:	f897 2060 	ldrb.w	r2, [r7, #96]	@ 0x60
 800960a:	f803 2c48 	strb.w	r2, [r3, #-72]
  indx++;
 800960e:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8009612:	3301      	adds	r3, #1
 8009614:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
    
  buffer[indx] = LocalNameLen;
 8009618:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800961c:	3350      	adds	r3, #80	@ 0x50
 800961e:	443b      	add	r3, r7
 8009620:	f897 2064 	ldrb.w	r2, [r7, #100]	@ 0x64
 8009624:	f803 2c48 	strb.w	r2, [r3, #-72]
  indx++;
 8009628:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800962c:	3301      	adds	r3, #1
 800962e:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
    
  BLUENRG_memcpy(buffer + indx, LocalName, LocalNameLen);
 8009632:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8009636:	f107 0208 	add.w	r2, r7, #8
 800963a:	4413      	add	r3, r2
 800963c:	f897 2064 	ldrb.w	r2, [r7, #100]	@ 0x64
 8009640:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8009642:	4618      	mov	r0, r3
 8009644:	f002 f939 	bl	800b8ba <memcpy>
  indx +=  LocalNameLen;
 8009648:	f897 204f 	ldrb.w	r2, [r7, #79]	@ 0x4f
 800964c:	f897 3064 	ldrb.w	r3, [r7, #100]	@ 0x64
 8009650:	4413      	add	r3, r2
 8009652:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
  
  buffer[indx] = ServiceUUIDLen;
 8009656:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800965a:	3350      	adds	r3, #80	@ 0x50
 800965c:	443b      	add	r3, r7
 800965e:	f897 206c 	ldrb.w	r2, [r7, #108]	@ 0x6c
 8009662:	f803 2c48 	strb.w	r2, [r3, #-72]
  indx++;
 8009666:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800966a:	3301      	adds	r3, #1
 800966c:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f

  BLUENRG_memcpy(buffer + indx, ServiceUUIDList, ServiceUUIDLen);
 8009670:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8009674:	f107 0208 	add.w	r2, r7, #8
 8009678:	4413      	add	r3, r2
 800967a:	f897 206c 	ldrb.w	r2, [r7, #108]	@ 0x6c
 800967e:	6f39      	ldr	r1, [r7, #112]	@ 0x70
 8009680:	4618      	mov	r0, r3
 8009682:	f002 f91a 	bl	800b8ba <memcpy>
  indx +=  ServiceUUIDLen;  
 8009686:	f897 204f 	ldrb.w	r2, [r7, #79]	@ 0x4f
 800968a:	f897 306c 	ldrb.w	r3, [r7, #108]	@ 0x6c
 800968e:	4413      	add	r3, r2
 8009690:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f

  SlaveConnIntervMin = htobs(SlaveConnIntervMin);
 8009694:	f8b7 3074 	ldrh.w	r3, [r7, #116]	@ 0x74
 8009698:	f8a7 3074 	strh.w	r3, [r7, #116]	@ 0x74
  BLUENRG_memcpy(buffer + indx, &SlaveConnIntervMin, 2);
 800969c:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80096a0:	f107 0208 	add.w	r2, r7, #8
 80096a4:	4413      	add	r3, r2
 80096a6:	f8b7 2074 	ldrh.w	r2, [r7, #116]	@ 0x74
 80096aa:	801a      	strh	r2, [r3, #0]
  indx +=  2;
 80096ac:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80096b0:	3302      	adds	r3, #2
 80096b2:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
  
  SlaveConnIntervMax = htobs(SlaveConnIntervMax);
 80096b6:	f8b7 3078 	ldrh.w	r3, [r7, #120]	@ 0x78
 80096ba:	f8a7 3078 	strh.w	r3, [r7, #120]	@ 0x78
  BLUENRG_memcpy(buffer + indx, &SlaveConnIntervMax, 2);
 80096be:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80096c2:	f107 0208 	add.w	r2, r7, #8
 80096c6:	4413      	add	r3, r2
 80096c8:	f8b7 2078 	ldrh.w	r2, [r7, #120]	@ 0x78
 80096cc:	801a      	strh	r2, [r3, #0]
  indx +=  2;    
 80096ce:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80096d2:	3302      	adds	r3, #2
 80096d4:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f

  BLUENRG_memset(&rq, 0, sizeof(rq));
 80096d8:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80096dc:	2218      	movs	r2, #24
 80096de:	2100      	movs	r1, #0
 80096e0:	4618      	mov	r0, r3
 80096e2:	f002 f86a 	bl	800b7ba <memset>
  rq.ogf = OGF_VENDOR_CMD;
 80096e6:	233f      	movs	r3, #63	@ 0x3f
 80096e8:	86bb      	strh	r3, [r7, #52]	@ 0x34
  rq.ocf = OCF_GAP_SET_DISCOVERABLE;
 80096ea:	2383      	movs	r3, #131	@ 0x83
 80096ec:	86fb      	strh	r3, [r7, #54]	@ 0x36
  rq.cparam = (void *)buffer;
 80096ee:	f107 0308 	add.w	r3, r7, #8
 80096f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  rq.clen = indx;
 80096f4:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80096f8:	643b      	str	r3, [r7, #64]	@ 0x40
  rq.rparam = &status;
 80096fa:	f107 0333 	add.w	r3, r7, #51	@ 0x33
 80096fe:	647b      	str	r3, [r7, #68]	@ 0x44
  rq.rlen = 1;
 8009700:	2301      	movs	r3, #1
 8009702:	64bb      	str	r3, [r7, #72]	@ 0x48

  if (hci_send_req(&rq, FALSE) < 0)
 8009704:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8009708:	2100      	movs	r1, #0
 800970a:	4618      	mov	r0, r3
 800970c:	f000 fdb6 	bl	800a27c <hci_send_req>
 8009710:	4603      	mov	r3, r0
 8009712:	2b00      	cmp	r3, #0
 8009714:	da01      	bge.n	800971a <aci_gap_set_discoverable+0x1bc>
    return BLE_STATUS_TIMEOUT;
 8009716:	23ff      	movs	r3, #255	@ 0xff
 8009718:	e007      	b.n	800972a <aci_gap_set_discoverable+0x1cc>

  if (status) {
 800971a:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800971e:	2b00      	cmp	r3, #0
 8009720:	d002      	beq.n	8009728 <aci_gap_set_discoverable+0x1ca>
    return status;
 8009722:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8009726:	e000      	b.n	800972a <aci_gap_set_discoverable+0x1cc>
  }

  return 0;
 8009728:	2300      	movs	r3, #0
}
 800972a:	4618      	mov	r0, r3
 800972c:	3754      	adds	r7, #84	@ 0x54
 800972e:	46bd      	mov	sp, r7
 8009730:	bd90      	pop	{r4, r7, pc}

08009732 <aci_gap_set_auth_requirement>:
                                        uint8_t min_encryption_key_size,
                                        uint8_t max_encryption_key_size,
                                        uint8_t use_fixed_pin,
                                        uint32_t fixed_pin,
                                        uint8_t bonding_mode)
{
 8009732:	b590      	push	{r4, r7, lr}
 8009734:	b091      	sub	sp, #68	@ 0x44
 8009736:	af00      	add	r7, sp, #0
 8009738:	603a      	str	r2, [r7, #0]
 800973a:	461a      	mov	r2, r3
 800973c:	4603      	mov	r3, r0
 800973e:	71fb      	strb	r3, [r7, #7]
 8009740:	460b      	mov	r3, r1
 8009742:	71bb      	strb	r3, [r7, #6]
 8009744:	4613      	mov	r3, r2
 8009746:	717b      	strb	r3, [r7, #5]
  struct hci_request rq;
  gap_set_auth_requirement_cp cp;    
  uint8_t status;
    
  cp.mitm_mode = mitm_mode;
 8009748:	79fb      	ldrb	r3, [r7, #7]
 800974a:	733b      	strb	r3, [r7, #12]
  cp.oob_enable = oob_enable;
 800974c:	79bb      	ldrb	r3, [r7, #6]
 800974e:	737b      	strb	r3, [r7, #13]
  /* FIX: check on oob_enable introduced to fix issue in projects for Cortex-M33 */
  if (oob_enable) {
 8009750:	79bb      	ldrb	r3, [r7, #6]
 8009752:	2b00      	cmp	r3, #0
 8009754:	d00a      	beq.n	800976c <aci_gap_set_auth_requirement+0x3a>
    BLUENRG_memcpy(cp.oob_data, oob_data, 16);
 8009756:	683a      	ldr	r2, [r7, #0]
 8009758:	f107 030e 	add.w	r3, r7, #14
 800975c:	6814      	ldr	r4, [r2, #0]
 800975e:	6850      	ldr	r0, [r2, #4]
 8009760:	6891      	ldr	r1, [r2, #8]
 8009762:	68d2      	ldr	r2, [r2, #12]
 8009764:	601c      	str	r4, [r3, #0]
 8009766:	6058      	str	r0, [r3, #4]
 8009768:	6099      	str	r1, [r3, #8]
 800976a:	60da      	str	r2, [r3, #12]
  }
  cp.min_encryption_key_size = min_encryption_key_size;
 800976c:	797b      	ldrb	r3, [r7, #5]
 800976e:	77bb      	strb	r3, [r7, #30]
  cp.max_encryption_key_size = max_encryption_key_size;
 8009770:	f897 3050 	ldrb.w	r3, [r7, #80]	@ 0x50
 8009774:	77fb      	strb	r3, [r7, #31]
  cp.use_fixed_pin = use_fixed_pin;
 8009776:	f897 3054 	ldrb.w	r3, [r7, #84]	@ 0x54
 800977a:	f887 3020 	strb.w	r3, [r7, #32]
  cp.fixed_pin = htobl(fixed_pin);
 800977e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8009780:	f8c7 3021 	str.w	r3, [r7, #33]	@ 0x21
  cp.bonding_mode = bonding_mode;
 8009784:	f897 305c 	ldrb.w	r3, [r7, #92]	@ 0x5c
 8009788:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

  BLUENRG_memset(&rq, 0, sizeof(rq));
 800978c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8009790:	2218      	movs	r2, #24
 8009792:	2100      	movs	r1, #0
 8009794:	4618      	mov	r0, r3
 8009796:	f002 f810 	bl	800b7ba <memset>
  rq.ogf = OGF_VENDOR_CMD;
 800979a:	233f      	movs	r3, #63	@ 0x3f
 800979c:	853b      	strh	r3, [r7, #40]	@ 0x28
  rq.ocf = OCF_GAP_SET_AUTH_REQUIREMENT;
 800979e:	2386      	movs	r3, #134	@ 0x86
 80097a0:	857b      	strh	r3, [r7, #42]	@ 0x2a
  rq.cparam = &cp;
 80097a2:	f107 030c 	add.w	r3, r7, #12
 80097a6:	633b      	str	r3, [r7, #48]	@ 0x30
  rq.clen = sizeof(cp);
 80097a8:	231a      	movs	r3, #26
 80097aa:	637b      	str	r3, [r7, #52]	@ 0x34
  rq.rparam = &status;
 80097ac:	f107 030b 	add.w	r3, r7, #11
 80097b0:	63bb      	str	r3, [r7, #56]	@ 0x38
  rq.rlen = 1;
 80097b2:	2301      	movs	r3, #1
 80097b4:	63fb      	str	r3, [r7, #60]	@ 0x3c

  if (hci_send_req(&rq, FALSE) < 0)
 80097b6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80097ba:	2100      	movs	r1, #0
 80097bc:	4618      	mov	r0, r3
 80097be:	f000 fd5d 	bl	800a27c <hci_send_req>
 80097c2:	4603      	mov	r3, r0
 80097c4:	2b00      	cmp	r3, #0
 80097c6:	da01      	bge.n	80097cc <aci_gap_set_auth_requirement+0x9a>
    return BLE_STATUS_TIMEOUT;
 80097c8:	23ff      	movs	r3, #255	@ 0xff
 80097ca:	e005      	b.n	80097d8 <aci_gap_set_auth_requirement+0xa6>

  if (status) {
 80097cc:	7afb      	ldrb	r3, [r7, #11]
 80097ce:	2b00      	cmp	r3, #0
 80097d0:	d001      	beq.n	80097d6 <aci_gap_set_auth_requirement+0xa4>
    return status;
 80097d2:	7afb      	ldrb	r3, [r7, #11]
 80097d4:	e000      	b.n	80097d8 <aci_gap_set_auth_requirement+0xa6>
  }
    
  return 0;
 80097d6:	2300      	movs	r3, #0
}
 80097d8:	4618      	mov	r0, r3
 80097da:	3744      	adds	r7, #68	@ 0x44
 80097dc:	46bd      	mov	sp, r7
 80097de:	bd90      	pop	{r4, r7, pc}

080097e0 <aci_gap_update_adv_data>:
  return status;

}

tBleStatus aci_gap_update_adv_data(uint8_t AdvLen, const uint8_t *AdvData)
{
 80097e0:	b580      	push	{r7, lr}
 80097e2:	b092      	sub	sp, #72	@ 0x48
 80097e4:	af00      	add	r7, sp, #0
 80097e6:	4603      	mov	r3, r0
 80097e8:	6039      	str	r1, [r7, #0]
 80097ea:	71fb      	strb	r3, [r7, #7]
  struct hci_request rq;
  uint8_t status;
  uint8_t buffer[32];
  uint8_t indx = 0;
 80097ec:	2300      	movs	r3, #0
 80097ee:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  if (AdvLen > (sizeof(buffer)-1))
 80097f2:	79fb      	ldrb	r3, [r7, #7]
 80097f4:	2b1f      	cmp	r3, #31
 80097f6:	d901      	bls.n	80097fc <aci_gap_update_adv_data+0x1c>
    return BLE_STATUS_INVALID_PARAMS;
 80097f8:	2342      	movs	r3, #66	@ 0x42
 80097fa:	e03e      	b.n	800987a <aci_gap_update_adv_data+0x9a>

  buffer[indx] = AdvLen;
 80097fc:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8009800:	3348      	adds	r3, #72	@ 0x48
 8009802:	443b      	add	r3, r7
 8009804:	79fa      	ldrb	r2, [r7, #7]
 8009806:	f803 2c40 	strb.w	r2, [r3, #-64]
  indx++;
 800980a:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800980e:	3301      	adds	r3, #1
 8009810:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  BLUENRG_memcpy(buffer + indx, AdvData, AdvLen);
 8009814:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8009818:	f107 0208 	add.w	r2, r7, #8
 800981c:	4413      	add	r3, r2
 800981e:	79fa      	ldrb	r2, [r7, #7]
 8009820:	6839      	ldr	r1, [r7, #0]
 8009822:	4618      	mov	r0, r3
 8009824:	f002 f849 	bl	800b8ba <memcpy>
  indx +=  AdvLen;
 8009828:	f897 2047 	ldrb.w	r2, [r7, #71]	@ 0x47
 800982c:	79fb      	ldrb	r3, [r7, #7]
 800982e:	4413      	add	r3, r2
 8009830:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8009834:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8009838:	2218      	movs	r2, #24
 800983a:	2100      	movs	r1, #0
 800983c:	4618      	mov	r0, r3
 800983e:	f001 ffbc 	bl	800b7ba <memset>
  rq.ogf = OGF_VENDOR_CMD;
 8009842:	233f      	movs	r3, #63	@ 0x3f
 8009844:	85bb      	strh	r3, [r7, #44]	@ 0x2c
  rq.ocf = OCF_GAP_UPDATE_ADV_DATA;
 8009846:	238e      	movs	r3, #142	@ 0x8e
 8009848:	85fb      	strh	r3, [r7, #46]	@ 0x2e
  rq.cparam = (void *)buffer;
 800984a:	f107 0308 	add.w	r3, r7, #8
 800984e:	637b      	str	r3, [r7, #52]	@ 0x34
  rq.clen = indx;
 8009850:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8009854:	63bb      	str	r3, [r7, #56]	@ 0x38
  rq.rparam = &status;
 8009856:	f107 032b 	add.w	r3, r7, #43	@ 0x2b
 800985a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  rq.rlen = 1;
 800985c:	2301      	movs	r3, #1
 800985e:	643b      	str	r3, [r7, #64]	@ 0x40
    
  if (hci_send_req(&rq, FALSE) < 0)
 8009860:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8009864:	2100      	movs	r1, #0
 8009866:	4618      	mov	r0, r3
 8009868:	f000 fd08 	bl	800a27c <hci_send_req>
 800986c:	4603      	mov	r3, r0
 800986e:	2b00      	cmp	r3, #0
 8009870:	da01      	bge.n	8009876 <aci_gap_update_adv_data+0x96>
    return BLE_STATUS_TIMEOUT;
 8009872:	23ff      	movs	r3, #255	@ 0xff
 8009874:	e001      	b.n	800987a <aci_gap_update_adv_data+0x9a>
    
  return status;
 8009876:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
}
 800987a:	4618      	mov	r0, r3
 800987c:	3748      	adds	r7, #72	@ 0x48
 800987e:	46bd      	mov	sp, r7
 8009880:	bd80      	pop	{r7, pc}

08009882 <aci_gatt_init>:
#define MIN(a,b)            ((a) < (b) )? (a) : (b)
#define MAX(a,b)            ((a) > (b) )? (a) : (b)


tBleStatus aci_gatt_init(void)
{
 8009882:	b580      	push	{r7, lr}
 8009884:	b088      	sub	sp, #32
 8009886:	af00      	add	r7, sp, #0
  struct hci_request rq;
  uint8_t status;

  BLUENRG_memset(&rq, 0, sizeof(rq));
 8009888:	f107 0308 	add.w	r3, r7, #8
 800988c:	2218      	movs	r2, #24
 800988e:	2100      	movs	r1, #0
 8009890:	4618      	mov	r0, r3
 8009892:	f001 ff92 	bl	800b7ba <memset>
  rq.ogf = OGF_VENDOR_CMD;
 8009896:	233f      	movs	r3, #63	@ 0x3f
 8009898:	813b      	strh	r3, [r7, #8]
  rq.ocf = OCF_GATT_INIT;
 800989a:	f240 1301 	movw	r3, #257	@ 0x101
 800989e:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 80098a0:	1dfb      	adds	r3, r7, #7
 80098a2:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 80098a4:	2301      	movs	r3, #1
 80098a6:	61fb      	str	r3, [r7, #28]

  if (hci_send_req(&rq, FALSE) < 0)
 80098a8:	f107 0308 	add.w	r3, r7, #8
 80098ac:	2100      	movs	r1, #0
 80098ae:	4618      	mov	r0, r3
 80098b0:	f000 fce4 	bl	800a27c <hci_send_req>
 80098b4:	4603      	mov	r3, r0
 80098b6:	2b00      	cmp	r3, #0
 80098b8:	da01      	bge.n	80098be <aci_gatt_init+0x3c>
    return BLE_STATUS_TIMEOUT;
 80098ba:	23ff      	movs	r3, #255	@ 0xff
 80098bc:	e000      	b.n	80098c0 <aci_gatt_init+0x3e>

  return status;
 80098be:	79fb      	ldrb	r3, [r7, #7]
}
 80098c0:	4618      	mov	r0, r3
 80098c2:	3720      	adds	r7, #32
 80098c4:	46bd      	mov	sp, r7
 80098c6:	bd80      	pop	{r7, pc}

080098c8 <aci_gatt_add_serv>:

tBleStatus aci_gatt_add_serv(uint8_t service_uuid_type, const uint8_t* service_uuid, uint8_t service_type, uint8_t max_attr_records, uint16_t *serviceHandle)
{
 80098c8:	b580      	push	{r7, lr}
 80098ca:	b090      	sub	sp, #64	@ 0x40
 80098cc:	af00      	add	r7, sp, #0
 80098ce:	6039      	str	r1, [r7, #0]
 80098d0:	4611      	mov	r1, r2
 80098d2:	461a      	mov	r2, r3
 80098d4:	4603      	mov	r3, r0
 80098d6:	71fb      	strb	r3, [r7, #7]
 80098d8:	460b      	mov	r3, r1
 80098da:	71bb      	strb	r3, [r7, #6]
 80098dc:	4613      	mov	r3, r2
 80098de:	717b      	strb	r3, [r7, #5]
  struct hci_request rq;
  gatt_add_serv_rp resp;    
  uint8_t buffer[19];
  uint8_t uuid_len;
  uint8_t indx = 0;
 80098e0:	2300      	movs	r3, #0
 80098e2:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
    
  buffer[indx] = service_uuid_type;
 80098e6:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 80098ea:	3340      	adds	r3, #64	@ 0x40
 80098ec:	443b      	add	r3, r7
 80098ee:	79fa      	ldrb	r2, [r7, #7]
 80098f0:	f803 2c34 	strb.w	r2, [r3, #-52]
  indx++;
 80098f4:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 80098f8:	3301      	adds	r3, #1
 80098fa:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
    
  if(service_uuid_type == UUID_TYPE_16){
 80098fe:	79fb      	ldrb	r3, [r7, #7]
 8009900:	2b01      	cmp	r3, #1
 8009902:	d103      	bne.n	800990c <aci_gatt_add_serv+0x44>
    uuid_len = 2;
 8009904:	2302      	movs	r3, #2
 8009906:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 800990a:	e002      	b.n	8009912 <aci_gatt_add_serv+0x4a>
  }
  else {
    uuid_len = 16;
 800990c:	2310      	movs	r3, #16
 800990e:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  }        
  BLUENRG_memcpy(buffer + indx, service_uuid, uuid_len);
 8009912:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8009916:	f107 020c 	add.w	r2, r7, #12
 800991a:	4413      	add	r3, r2
 800991c:	f897 203f 	ldrb.w	r2, [r7, #63]	@ 0x3f
 8009920:	6839      	ldr	r1, [r7, #0]
 8009922:	4618      	mov	r0, r3
 8009924:	f001 ffc9 	bl	800b8ba <memcpy>
  indx +=  uuid_len;
 8009928:	f897 203e 	ldrb.w	r2, [r7, #62]	@ 0x3e
 800992c:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8009930:	4413      	add	r3, r2
 8009932:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
    
  buffer[indx] = service_type;
 8009936:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 800993a:	3340      	adds	r3, #64	@ 0x40
 800993c:	443b      	add	r3, r7
 800993e:	79ba      	ldrb	r2, [r7, #6]
 8009940:	f803 2c34 	strb.w	r2, [r3, #-52]
  indx++;
 8009944:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8009948:	3301      	adds	r3, #1
 800994a:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
    
  buffer[indx] = max_attr_records;
 800994e:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8009952:	3340      	adds	r3, #64	@ 0x40
 8009954:	443b      	add	r3, r7
 8009956:	797a      	ldrb	r2, [r7, #5]
 8009958:	f803 2c34 	strb.w	r2, [r3, #-52]
  indx++;
 800995c:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8009960:	3301      	adds	r3, #1
 8009962:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
    
    
  BLUENRG_memset(&resp, 0, sizeof(resp));
 8009966:	f107 0320 	add.w	r3, r7, #32
 800996a:	2203      	movs	r2, #3
 800996c:	2100      	movs	r1, #0
 800996e:	4618      	mov	r0, r3
 8009970:	f001 ff23 	bl	800b7ba <memset>

  BLUENRG_memset(&rq, 0, sizeof(rq));
 8009974:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009978:	2218      	movs	r2, #24
 800997a:	2100      	movs	r1, #0
 800997c:	4618      	mov	r0, r3
 800997e:	f001 ff1c 	bl	800b7ba <memset>
  rq.ogf = OGF_VENDOR_CMD;
 8009982:	233f      	movs	r3, #63	@ 0x3f
 8009984:	84bb      	strh	r3, [r7, #36]	@ 0x24
  rq.ocf = OCF_GATT_ADD_SERV;
 8009986:	f44f 7381 	mov.w	r3, #258	@ 0x102
 800998a:	84fb      	strh	r3, [r7, #38]	@ 0x26
  rq.cparam = (void *)buffer;
 800998c:	f107 030c 	add.w	r3, r7, #12
 8009990:	62fb      	str	r3, [r7, #44]	@ 0x2c
  rq.clen = indx;
 8009992:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8009996:	633b      	str	r3, [r7, #48]	@ 0x30
  rq.rparam = &resp;
 8009998:	f107 0320 	add.w	r3, r7, #32
 800999c:	637b      	str	r3, [r7, #52]	@ 0x34
  rq.rlen = GATT_ADD_SERV_RP_SIZE;
 800999e:	2303      	movs	r3, #3
 80099a0:	63bb      	str	r3, [r7, #56]	@ 0x38

  if (hci_send_req(&rq, FALSE) < 0)
 80099a2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80099a6:	2100      	movs	r1, #0
 80099a8:	4618      	mov	r0, r3
 80099aa:	f000 fc67 	bl	800a27c <hci_send_req>
 80099ae:	4603      	mov	r3, r0
 80099b0:	2b00      	cmp	r3, #0
 80099b2:	da01      	bge.n	80099b8 <aci_gatt_add_serv+0xf0>
    return BLE_STATUS_TIMEOUT;
 80099b4:	23ff      	movs	r3, #255	@ 0xff
 80099b6:	e00c      	b.n	80099d2 <aci_gatt_add_serv+0x10a>

  if (resp.status) {
 80099b8:	f897 3020 	ldrb.w	r3, [r7, #32]
 80099bc:	2b00      	cmp	r3, #0
 80099be:	d002      	beq.n	80099c6 <aci_gatt_add_serv+0xfe>
    return resp.status;
 80099c0:	f897 3020 	ldrb.w	r3, [r7, #32]
 80099c4:	e005      	b.n	80099d2 <aci_gatt_add_serv+0x10a>
  }
    
  *serviceHandle = btohs(resp.handle);
 80099c6:	f8b7 3021 	ldrh.w	r3, [r7, #33]	@ 0x21
 80099ca:	b29a      	uxth	r2, r3
 80099cc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80099ce:	801a      	strh	r2, [r3, #0]

  return 0;
 80099d0:	2300      	movs	r3, #0
}
 80099d2:	4618      	mov	r0, r3
 80099d4:	3740      	adds	r7, #64	@ 0x40
 80099d6:	46bd      	mov	sp, r7
 80099d8:	bd80      	pop	{r7, pc}

080099da <aci_gatt_add_char>:
			     uint8_t secPermissions,
			     uint8_t gattEvtMask,
			     uint8_t encryKeySize,
			     uint8_t isVariable,
			     uint16_t* charHandle)                     
{
 80099da:	b580      	push	{r7, lr}
 80099dc:	b092      	sub	sp, #72	@ 0x48
 80099de:	af00      	add	r7, sp, #0
 80099e0:	603a      	str	r2, [r7, #0]
 80099e2:	461a      	mov	r2, r3
 80099e4:	4603      	mov	r3, r0
 80099e6:	80fb      	strh	r3, [r7, #6]
 80099e8:	460b      	mov	r3, r1
 80099ea:	717b      	strb	r3, [r7, #5]
 80099ec:	4613      	mov	r3, r2
 80099ee:	713b      	strb	r3, [r7, #4]
  struct hci_request rq;
  gatt_add_serv_rp resp;
  uint8_t buffer[25];
  uint8_t uuid_len;
  uint8_t indx = 0;
 80099f0:	2300      	movs	r3, #0
 80099f2:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
    
  serviceHandle = htobs(serviceHandle);
 80099f6:	88fb      	ldrh	r3, [r7, #6]
 80099f8:	80fb      	strh	r3, [r7, #6]
  BLUENRG_memcpy(buffer + indx, &serviceHandle, 2);
 80099fa:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 80099fe:	f107 020c 	add.w	r2, r7, #12
 8009a02:	4413      	add	r3, r2
 8009a04:	88fa      	ldrh	r2, [r7, #6]
 8009a06:	801a      	strh	r2, [r3, #0]
  indx += 2;
 8009a08:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8009a0c:	3302      	adds	r3, #2
 8009a0e:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
    
  buffer[indx] = charUuidType;
 8009a12:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8009a16:	3348      	adds	r3, #72	@ 0x48
 8009a18:	443b      	add	r3, r7
 8009a1a:	797a      	ldrb	r2, [r7, #5]
 8009a1c:	f803 2c3c 	strb.w	r2, [r3, #-60]
  indx++;
 8009a20:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8009a24:	3301      	adds	r3, #1
 8009a26:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
    
  if(charUuidType == UUID_TYPE_16){
 8009a2a:	797b      	ldrb	r3, [r7, #5]
 8009a2c:	2b01      	cmp	r3, #1
 8009a2e:	d103      	bne.n	8009a38 <aci_gatt_add_char+0x5e>
    uuid_len = 2;
 8009a30:	2302      	movs	r3, #2
 8009a32:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8009a36:	e002      	b.n	8009a3e <aci_gatt_add_char+0x64>
  }
  else {
    uuid_len = 16;
 8009a38:	2310      	movs	r3, #16
 8009a3a:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
  }        
  BLUENRG_memcpy(buffer + indx, charUuid, uuid_len);
 8009a3e:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8009a42:	f107 020c 	add.w	r2, r7, #12
 8009a46:	4413      	add	r3, r2
 8009a48:	f897 2047 	ldrb.w	r2, [r7, #71]	@ 0x47
 8009a4c:	6839      	ldr	r1, [r7, #0]
 8009a4e:	4618      	mov	r0, r3
 8009a50:	f001 ff33 	bl	800b8ba <memcpy>
  indx +=  uuid_len;
 8009a54:	f897 2046 	ldrb.w	r2, [r7, #70]	@ 0x46
 8009a58:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8009a5c:	4413      	add	r3, r2
 8009a5e:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
    
  buffer[indx] = charValueLen;
 8009a62:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8009a66:	3348      	adds	r3, #72	@ 0x48
 8009a68:	443b      	add	r3, r7
 8009a6a:	793a      	ldrb	r2, [r7, #4]
 8009a6c:	f803 2c3c 	strb.w	r2, [r3, #-60]
  indx++;
 8009a70:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8009a74:	3301      	adds	r3, #1
 8009a76:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
    
  buffer[indx] = charProperties;
 8009a7a:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8009a7e:	3348      	adds	r3, #72	@ 0x48
 8009a80:	443b      	add	r3, r7
 8009a82:	f897 2050 	ldrb.w	r2, [r7, #80]	@ 0x50
 8009a86:	f803 2c3c 	strb.w	r2, [r3, #-60]
  indx++;
 8009a8a:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8009a8e:	3301      	adds	r3, #1
 8009a90:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
    
  buffer[indx] = secPermissions;
 8009a94:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8009a98:	3348      	adds	r3, #72	@ 0x48
 8009a9a:	443b      	add	r3, r7
 8009a9c:	f897 2054 	ldrb.w	r2, [r7, #84]	@ 0x54
 8009aa0:	f803 2c3c 	strb.w	r2, [r3, #-60]
  indx++;
 8009aa4:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8009aa8:	3301      	adds	r3, #1
 8009aaa:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
    
  buffer[indx] = gattEvtMask;
 8009aae:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8009ab2:	3348      	adds	r3, #72	@ 0x48
 8009ab4:	443b      	add	r3, r7
 8009ab6:	f897 2058 	ldrb.w	r2, [r7, #88]	@ 0x58
 8009aba:	f803 2c3c 	strb.w	r2, [r3, #-60]
  indx++;
 8009abe:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8009ac2:	3301      	adds	r3, #1
 8009ac4:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
    
  buffer[indx] = encryKeySize;
 8009ac8:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8009acc:	3348      	adds	r3, #72	@ 0x48
 8009ace:	443b      	add	r3, r7
 8009ad0:	f897 205c 	ldrb.w	r2, [r7, #92]	@ 0x5c
 8009ad4:	f803 2c3c 	strb.w	r2, [r3, #-60]
  indx++;
 8009ad8:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8009adc:	3301      	adds	r3, #1
 8009ade:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
    
  buffer[indx] = isVariable;
 8009ae2:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8009ae6:	3348      	adds	r3, #72	@ 0x48
 8009ae8:	443b      	add	r3, r7
 8009aea:	f897 2060 	ldrb.w	r2, [r7, #96]	@ 0x60
 8009aee:	f803 2c3c 	strb.w	r2, [r3, #-60]
  indx++;
 8009af2:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8009af6:	3301      	adds	r3, #1
 8009af8:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
    
  BLUENRG_memset(&resp, 0, sizeof(resp));
 8009afc:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8009b00:	2203      	movs	r2, #3
 8009b02:	2100      	movs	r1, #0
 8009b04:	4618      	mov	r0, r3
 8009b06:	f001 fe58 	bl	800b7ba <memset>

  BLUENRG_memset(&rq, 0, sizeof(rq));
 8009b0a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8009b0e:	2218      	movs	r2, #24
 8009b10:	2100      	movs	r1, #0
 8009b12:	4618      	mov	r0, r3
 8009b14:	f001 fe51 	bl	800b7ba <memset>
  rq.ogf = OGF_VENDOR_CMD;
 8009b18:	233f      	movs	r3, #63	@ 0x3f
 8009b1a:	85bb      	strh	r3, [r7, #44]	@ 0x2c
  rq.ocf = OCF_GATT_ADD_CHAR;
 8009b1c:	f44f 7382 	mov.w	r3, #260	@ 0x104
 8009b20:	85fb      	strh	r3, [r7, #46]	@ 0x2e
  rq.cparam = (void *)buffer;
 8009b22:	f107 030c 	add.w	r3, r7, #12
 8009b26:	637b      	str	r3, [r7, #52]	@ 0x34
  rq.clen = indx;
 8009b28:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8009b2c:	63bb      	str	r3, [r7, #56]	@ 0x38
  rq.rparam = &resp;
 8009b2e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8009b32:	63fb      	str	r3, [r7, #60]	@ 0x3c
  rq.rlen = GATT_ADD_CHAR_RP_SIZE;
 8009b34:	2303      	movs	r3, #3
 8009b36:	643b      	str	r3, [r7, #64]	@ 0x40

  if (hci_send_req(&rq, FALSE) < 0)
 8009b38:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8009b3c:	2100      	movs	r1, #0
 8009b3e:	4618      	mov	r0, r3
 8009b40:	f000 fb9c 	bl	800a27c <hci_send_req>
 8009b44:	4603      	mov	r3, r0
 8009b46:	2b00      	cmp	r3, #0
 8009b48:	da01      	bge.n	8009b4e <aci_gatt_add_char+0x174>
    return BLE_STATUS_TIMEOUT;
 8009b4a:	23ff      	movs	r3, #255	@ 0xff
 8009b4c:	e00c      	b.n	8009b68 <aci_gatt_add_char+0x18e>

  if (resp.status) {
 8009b4e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8009b52:	2b00      	cmp	r3, #0
 8009b54:	d002      	beq.n	8009b5c <aci_gatt_add_char+0x182>
    return resp.status;
 8009b56:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8009b5a:	e005      	b.n	8009b68 <aci_gatt_add_char+0x18e>
  }
    
  *charHandle = btohs(resp.handle);
 8009b5c:	f8b7 3029 	ldrh.w	r3, [r7, #41]	@ 0x29
 8009b60:	b29a      	uxth	r2, r3
 8009b62:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009b64:	801a      	strh	r2, [r3, #0]

  return 0;
 8009b66:	2300      	movs	r3, #0
}
 8009b68:	4618      	mov	r0, r3
 8009b6a:	3748      	adds	r7, #72	@ 0x48
 8009b6c:	46bd      	mov	sp, r7
 8009b6e:	bd80      	pop	{r7, pc}

08009b70 <aci_gatt_update_char_value>:
tBleStatus aci_gatt_update_char_value(uint16_t servHandle, 
				      uint16_t charHandle,
				      uint8_t charValOffset,
				      uint8_t charValueLen,   
                                      const void *charValue)
{
 8009b70:	b590      	push	{r4, r7, lr}
 8009b72:	b0ab      	sub	sp, #172	@ 0xac
 8009b74:	af00      	add	r7, sp, #0
 8009b76:	4604      	mov	r4, r0
 8009b78:	4608      	mov	r0, r1
 8009b7a:	4611      	mov	r1, r2
 8009b7c:	461a      	mov	r2, r3
 8009b7e:	4623      	mov	r3, r4
 8009b80:	80fb      	strh	r3, [r7, #6]
 8009b82:	4603      	mov	r3, r0
 8009b84:	80bb      	strh	r3, [r7, #4]
 8009b86:	460b      	mov	r3, r1
 8009b88:	70fb      	strb	r3, [r7, #3]
 8009b8a:	4613      	mov	r3, r2
 8009b8c:	70bb      	strb	r3, [r7, #2]
  struct hci_request rq;
  uint8_t status;
  uint8_t buffer[HCI_MAX_PAYLOAD_SIZE];
  uint8_t indx = 0;
 8009b8e:	2300      	movs	r3, #0
 8009b90:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
    
  if ((charValueLen+6) > HCI_MAX_PAYLOAD_SIZE)
 8009b94:	78bb      	ldrb	r3, [r7, #2]
 8009b96:	2b7a      	cmp	r3, #122	@ 0x7a
 8009b98:	d901      	bls.n	8009b9e <aci_gatt_update_char_value+0x2e>
    return BLE_STATUS_INVALID_PARAMS;
 8009b9a:	2342      	movs	r3, #66	@ 0x42
 8009b9c:	e074      	b.n	8009c88 <aci_gatt_update_char_value+0x118>

  servHandle = htobs(servHandle);
 8009b9e:	88fb      	ldrh	r3, [r7, #6]
 8009ba0:	80fb      	strh	r3, [r7, #6]
  BLUENRG_memcpy(buffer + indx, &servHandle, 2);
 8009ba2:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 8009ba6:	f107 0208 	add.w	r2, r7, #8
 8009baa:	4413      	add	r3, r2
 8009bac:	88fa      	ldrh	r2, [r7, #6]
 8009bae:	801a      	strh	r2, [r3, #0]
  indx += 2;
 8009bb0:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 8009bb4:	3302      	adds	r3, #2
 8009bb6:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
    
  charHandle = htobs(charHandle);
 8009bba:	88bb      	ldrh	r3, [r7, #4]
 8009bbc:	80bb      	strh	r3, [r7, #4]
  BLUENRG_memcpy(buffer + indx, &charHandle, 2);
 8009bbe:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 8009bc2:	f107 0208 	add.w	r2, r7, #8
 8009bc6:	4413      	add	r3, r2
 8009bc8:	88ba      	ldrh	r2, [r7, #4]
 8009bca:	801a      	strh	r2, [r3, #0]
  indx += 2;
 8009bcc:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 8009bd0:	3302      	adds	r3, #2
 8009bd2:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
    
  buffer[indx] = charValOffset;
 8009bd6:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 8009bda:	33a8      	adds	r3, #168	@ 0xa8
 8009bdc:	443b      	add	r3, r7
 8009bde:	78fa      	ldrb	r2, [r7, #3]
 8009be0:	f803 2ca0 	strb.w	r2, [r3, #-160]
  indx++;
 8009be4:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 8009be8:	3301      	adds	r3, #1
 8009bea:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
    
  buffer[indx] = charValueLen;
 8009bee:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 8009bf2:	33a8      	adds	r3, #168	@ 0xa8
 8009bf4:	443b      	add	r3, r7
 8009bf6:	78ba      	ldrb	r2, [r7, #2]
 8009bf8:	f803 2ca0 	strb.w	r2, [r3, #-160]
  indx++;
 8009bfc:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 8009c00:	3301      	adds	r3, #1
 8009c02:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
        
  BLUENRG_memcpy(buffer + indx, charValue, charValueLen);
 8009c06:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 8009c0a:	f107 0208 	add.w	r2, r7, #8
 8009c0e:	4413      	add	r3, r2
 8009c10:	78ba      	ldrb	r2, [r7, #2]
 8009c12:	f8d7 10b8 	ldr.w	r1, [r7, #184]	@ 0xb8
 8009c16:	4618      	mov	r0, r3
 8009c18:	f001 fe4f 	bl	800b8ba <memcpy>
  indx +=  charValueLen;
 8009c1c:	f897 20a7 	ldrb.w	r2, [r7, #167]	@ 0xa7
 8009c20:	78bb      	ldrb	r3, [r7, #2]
 8009c22:	4413      	add	r3, r2
 8009c24:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7

  BLUENRG_memset(&rq, 0, sizeof(rq));
 8009c28:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 8009c2c:	2218      	movs	r2, #24
 8009c2e:	2100      	movs	r1, #0
 8009c30:	4618      	mov	r0, r3
 8009c32:	f001 fdc2 	bl	800b7ba <memset>
  rq.ogf = OGF_VENDOR_CMD;
 8009c36:	233f      	movs	r3, #63	@ 0x3f
 8009c38:	f8a7 308c 	strh.w	r3, [r7, #140]	@ 0x8c
  rq.ocf = OCF_GATT_UPD_CHAR_VAL;
 8009c3c:	f44f 7383 	mov.w	r3, #262	@ 0x106
 8009c40:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
  rq.cparam = (void *)buffer;
 8009c44:	f107 0308 	add.w	r3, r7, #8
 8009c48:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  rq.clen = indx;
 8009c4c:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 8009c50:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  rq.rparam = &status;
 8009c54:	f107 038b 	add.w	r3, r7, #139	@ 0x8b
 8009c58:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  rq.rlen = 1;
 8009c5c:	2301      	movs	r3, #1
 8009c5e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  if (hci_send_req(&rq, FALSE) < 0)
 8009c62:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 8009c66:	2100      	movs	r1, #0
 8009c68:	4618      	mov	r0, r3
 8009c6a:	f000 fb07 	bl	800a27c <hci_send_req>
 8009c6e:	4603      	mov	r3, r0
 8009c70:	2b00      	cmp	r3, #0
 8009c72:	da01      	bge.n	8009c78 <aci_gatt_update_char_value+0x108>
    return BLE_STATUS_TIMEOUT;
 8009c74:	23ff      	movs	r3, #255	@ 0xff
 8009c76:	e007      	b.n	8009c88 <aci_gatt_update_char_value+0x118>

  if (status) {
 8009c78:	f897 308b 	ldrb.w	r3, [r7, #139]	@ 0x8b
 8009c7c:	2b00      	cmp	r3, #0
 8009c7e:	d002      	beq.n	8009c86 <aci_gatt_update_char_value+0x116>
    return status;
 8009c80:	f897 308b 	ldrb.w	r3, [r7, #139]	@ 0x8b
 8009c84:	e000      	b.n	8009c88 <aci_gatt_update_char_value+0x118>
  }

  return 0;
 8009c86:	2300      	movs	r3, #0
}
 8009c88:	4618      	mov	r0, r3
 8009c8a:	37ac      	adds	r7, #172	@ 0xac
 8009c8c:	46bd      	mov	sp, r7
 8009c8e:	bd90      	pop	{r4, r7, pc}

08009c90 <aci_gatt_allow_read>:

  return 0;
}

tBleStatus aci_gatt_allow_read(uint16_t conn_handle)
{
 8009c90:	b580      	push	{r7, lr}
 8009c92:	b08a      	sub	sp, #40	@ 0x28
 8009c94:	af00      	add	r7, sp, #0
 8009c96:	4603      	mov	r3, r0
 8009c98:	80fb      	strh	r3, [r7, #6]
    struct hci_request rq;
    gatt_allow_read_cp cp;
    uint8_t status;
    
    cp.conn_handle = htobs(conn_handle);
 8009c9a:	88fb      	ldrh	r3, [r7, #6]
 8009c9c:	81bb      	strh	r3, [r7, #12]

    BLUENRG_memset(&rq, 0, sizeof(rq));
 8009c9e:	f107 0310 	add.w	r3, r7, #16
 8009ca2:	2218      	movs	r2, #24
 8009ca4:	2100      	movs	r1, #0
 8009ca6:	4618      	mov	r0, r3
 8009ca8:	f001 fd87 	bl	800b7ba <memset>
    rq.ogf = OGF_VENDOR_CMD;
 8009cac:	233f      	movs	r3, #63	@ 0x3f
 8009cae:	823b      	strh	r3, [r7, #16]
    rq.ocf = OCF_GATT_ALLOW_READ;
 8009cb0:	f240 1327 	movw	r3, #295	@ 0x127
 8009cb4:	827b      	strh	r3, [r7, #18]
    rq.cparam = &cp;
 8009cb6:	f107 030c 	add.w	r3, r7, #12
 8009cba:	61bb      	str	r3, [r7, #24]
    rq.clen = GATT_ALLOW_READ_CP_SIZE;
 8009cbc:	2302      	movs	r3, #2
 8009cbe:	61fb      	str	r3, [r7, #28]
    rq.rparam = &status;
 8009cc0:	f107 030b 	add.w	r3, r7, #11
 8009cc4:	623b      	str	r3, [r7, #32]
    rq.rlen = 1;
 8009cc6:	2301      	movs	r3, #1
 8009cc8:	627b      	str	r3, [r7, #36]	@ 0x24

    if (hci_send_req(&rq, FALSE) < 0)
 8009cca:	f107 0310 	add.w	r3, r7, #16
 8009cce:	2100      	movs	r1, #0
 8009cd0:	4618      	mov	r0, r3
 8009cd2:	f000 fad3 	bl	800a27c <hci_send_req>
 8009cd6:	4603      	mov	r3, r0
 8009cd8:	2b00      	cmp	r3, #0
 8009cda:	da01      	bge.n	8009ce0 <aci_gatt_allow_read+0x50>
      return BLE_STATUS_TIMEOUT;
 8009cdc:	23ff      	movs	r3, #255	@ 0xff
 8009cde:	e000      	b.n	8009ce2 <aci_gatt_allow_read+0x52>

    return status;
 8009ce0:	7afb      	ldrb	r3, [r7, #11]
}
 8009ce2:	4618      	mov	r0, r3
 8009ce4:	3728      	adds	r7, #40	@ 0x28
 8009ce6:	46bd      	mov	sp, r7
 8009ce8:	bd80      	pop	{r7, pc}

08009cea <aci_gatt_read_handle_value>:

  return status;
}

tBleStatus aci_gatt_read_handle_value(uint16_t attr_handle, uint16_t data_len, uint16_t *data_len_out_p, uint8_t *data)
{
 8009cea:	b580      	push	{r7, lr}
 8009cec:	b0ac      	sub	sp, #176	@ 0xb0
 8009cee:	af00      	add	r7, sp, #0
 8009cf0:	60ba      	str	r2, [r7, #8]
 8009cf2:	607b      	str	r3, [r7, #4]
 8009cf4:	4603      	mov	r3, r0
 8009cf6:	81fb      	strh	r3, [r7, #14]
 8009cf8:	460b      	mov	r3, r1
 8009cfa:	81bb      	strh	r3, [r7, #12]
  struct hci_request rq;
  gatt_read_handle_val_cp cp;
  gatt_read_handle_val_rp rp;
 
  if(data_len > sizeof(rp.value))
 8009cfc:	89bb      	ldrh	r3, [r7, #12]
 8009cfe:	2b7d      	cmp	r3, #125	@ 0x7d
 8009d00:	d901      	bls.n	8009d06 <aci_gatt_read_handle_value+0x1c>
    return BLE_STATUS_INVALID_PARAMS;
 8009d02:	2342      	movs	r3, #66	@ 0x42
 8009d04:	e043      	b.n	8009d8e <aci_gatt_read_handle_value+0xa4>

  cp.attr_handle = htobs(attr_handle);
 8009d06:	89fb      	ldrh	r3, [r7, #14]
 8009d08:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94

  BLUENRG_memset(&rq, 0, sizeof(rq));
 8009d0c:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 8009d10:	2218      	movs	r2, #24
 8009d12:	2100      	movs	r1, #0
 8009d14:	4618      	mov	r0, r3
 8009d16:	f001 fd50 	bl	800b7ba <memset>
  rq.ogf = OGF_VENDOR_CMD;
 8009d1a:	233f      	movs	r3, #63	@ 0x3f
 8009d1c:	f8a7 3098 	strh.w	r3, [r7, #152]	@ 0x98
  rq.ocf = OCF_GATT_READ_HANDLE_VALUE;
 8009d20:	f44f 7395 	mov.w	r3, #298	@ 0x12a
 8009d24:	f8a7 309a 	strh.w	r3, [r7, #154]	@ 0x9a
  rq.cparam = &cp;
 8009d28:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8009d2c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  rq.clen = sizeof(cp);
 8009d30:	2302      	movs	r3, #2
 8009d32:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  rq.rparam = &rp;
 8009d36:	f107 0314 	add.w	r3, r7, #20
 8009d3a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  rq.rlen = sizeof(rp);
 8009d3e:	2380      	movs	r3, #128	@ 0x80
 8009d40:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

  if (hci_send_req(&rq, FALSE) < 0)
 8009d44:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 8009d48:	2100      	movs	r1, #0
 8009d4a:	4618      	mov	r0, r3
 8009d4c:	f000 fa96 	bl	800a27c <hci_send_req>
 8009d50:	4603      	mov	r3, r0
 8009d52:	2b00      	cmp	r3, #0
 8009d54:	da01      	bge.n	8009d5a <aci_gatt_read_handle_value+0x70>
    return BLE_STATUS_TIMEOUT;
 8009d56:	23ff      	movs	r3, #255	@ 0xff
 8009d58:	e019      	b.n	8009d8e <aci_gatt_read_handle_value+0xa4>
  
  if(rp.status)
 8009d5a:	7d3b      	ldrb	r3, [r7, #20]
 8009d5c:	2b00      	cmp	r3, #0
 8009d5e:	d001      	beq.n	8009d64 <aci_gatt_read_handle_value+0x7a>
    return rp.status;
 8009d60:	7d3b      	ldrb	r3, [r7, #20]
 8009d62:	e014      	b.n	8009d8e <aci_gatt_read_handle_value+0xa4>

  *data_len_out_p = btohs(rp.value_len);
 8009d64:	f8b7 3015 	ldrh.w	r3, [r7, #21]
 8009d68:	b29a      	uxth	r2, r3
 8009d6a:	68bb      	ldr	r3, [r7, #8]
 8009d6c:	801a      	strh	r2, [r3, #0]

  BLUENRG_memcpy(data, rp.value, MIN(data_len, *data_len_out_p));
 8009d6e:	68bb      	ldr	r3, [r7, #8]
 8009d70:	881b      	ldrh	r3, [r3, #0]
 8009d72:	89ba      	ldrh	r2, [r7, #12]
 8009d74:	4293      	cmp	r3, r2
 8009d76:	bf28      	it	cs
 8009d78:	4613      	movcs	r3, r2
 8009d7a:	b29b      	uxth	r3, r3
 8009d7c:	461a      	mov	r2, r3
 8009d7e:	f107 0314 	add.w	r3, r7, #20
 8009d82:	3303      	adds	r3, #3
 8009d84:	4619      	mov	r1, r3
 8009d86:	6878      	ldr	r0, [r7, #4]
 8009d88:	f001 fd97 	bl	800b8ba <memcpy>

  return 0;
 8009d8c:	2300      	movs	r3, #0
}
 8009d8e:	4618      	mov	r0, r3
 8009d90:	37b0      	adds	r7, #176	@ 0xb0
 8009d92:	46bd      	mov	sp, r7
 8009d94:	bd80      	pop	{r7, pc}

08009d96 <aci_hal_read_config_data>:

  return status;
}

tBleStatus aci_hal_read_config_data(uint8_t offset, uint16_t data_len, uint8_t *data_len_out_p, uint8_t *data)
{
 8009d96:	b580      	push	{r7, lr}
 8009d98:	b0ac      	sub	sp, #176	@ 0xb0
 8009d9a:	af00      	add	r7, sp, #0
 8009d9c:	60ba      	str	r2, [r7, #8]
 8009d9e:	607b      	str	r3, [r7, #4]
 8009da0:	4603      	mov	r3, r0
 8009da2:	73fb      	strb	r3, [r7, #15]
 8009da4:	460b      	mov	r3, r1
 8009da6:	81bb      	strh	r3, [r7, #12]
  struct hci_request rq;
  hal_read_config_data_cp cp;
  hal_read_config_data_rp rp;
  
  cp.offset = offset;
 8009da8:	7bfb      	ldrb	r3, [r7, #15]
 8009daa:	f887 3094 	strb.w	r3, [r7, #148]	@ 0x94
  
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8009dae:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 8009db2:	2218      	movs	r2, #24
 8009db4:	2100      	movs	r1, #0
 8009db6:	4618      	mov	r0, r3
 8009db8:	f001 fcff 	bl	800b7ba <memset>
  rq.ogf = OGF_VENDOR_CMD;
 8009dbc:	233f      	movs	r3, #63	@ 0x3f
 8009dbe:	f8a7 3098 	strh.w	r3, [r7, #152]	@ 0x98
  rq.ocf = OCF_HAL_READ_CONFIG_DATA;
 8009dc2:	230d      	movs	r3, #13
 8009dc4:	f8a7 309a 	strh.w	r3, [r7, #154]	@ 0x9a
  rq.cparam = &cp;
 8009dc8:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8009dcc:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  rq.clen = sizeof(cp);
 8009dd0:	2301      	movs	r3, #1
 8009dd2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  rq.rparam = &rp;
 8009dd6:	f107 0314 	add.w	r3, r7, #20
 8009dda:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  rq.rlen = sizeof(rp);
 8009dde:	2380      	movs	r3, #128	@ 0x80
 8009de0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  
  if (hci_send_req(&rq, FALSE) < 0)
 8009de4:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 8009de8:	2100      	movs	r1, #0
 8009dea:	4618      	mov	r0, r3
 8009dec:	f000 fa46 	bl	800a27c <hci_send_req>
 8009df0:	4603      	mov	r3, r0
 8009df2:	2b00      	cmp	r3, #0
 8009df4:	da01      	bge.n	8009dfa <aci_hal_read_config_data+0x64>
    return BLE_STATUS_TIMEOUT;
 8009df6:	23ff      	movs	r3, #255	@ 0xff
 8009df8:	e01e      	b.n	8009e38 <aci_hal_read_config_data+0xa2>
  
  if(rp.status)
 8009dfa:	7d3b      	ldrb	r3, [r7, #20]
 8009dfc:	2b00      	cmp	r3, #0
 8009dfe:	d001      	beq.n	8009e04 <aci_hal_read_config_data+0x6e>
    return rp.status;
 8009e00:	7d3b      	ldrb	r3, [r7, #20]
 8009e02:	e019      	b.n	8009e38 <aci_hal_read_config_data+0xa2>
  
  *data_len_out_p = rq.rlen-1;
 8009e04:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009e08:	b2db      	uxtb	r3, r3
 8009e0a:	3b01      	subs	r3, #1
 8009e0c:	b2da      	uxtb	r2, r3
 8009e0e:	68bb      	ldr	r3, [r7, #8]
 8009e10:	701a      	strb	r2, [r3, #0]
  
  BLUENRG_memcpy(data, rp.data, MIN(data_len, *data_len_out_p));
 8009e12:	68bb      	ldr	r3, [r7, #8]
 8009e14:	781b      	ldrb	r3, [r3, #0]
 8009e16:	461a      	mov	r2, r3
 8009e18:	89bb      	ldrh	r3, [r7, #12]
 8009e1a:	4293      	cmp	r3, r2
 8009e1c:	d201      	bcs.n	8009e22 <aci_hal_read_config_data+0x8c>
 8009e1e:	89ba      	ldrh	r2, [r7, #12]
 8009e20:	e002      	b.n	8009e28 <aci_hal_read_config_data+0x92>
 8009e22:	68bb      	ldr	r3, [r7, #8]
 8009e24:	781b      	ldrb	r3, [r3, #0]
 8009e26:	461a      	mov	r2, r3
 8009e28:	f107 0314 	add.w	r3, r7, #20
 8009e2c:	3301      	adds	r3, #1
 8009e2e:	4619      	mov	r1, r3
 8009e30:	6878      	ldr	r0, [r7, #4]
 8009e32:	f001 fd42 	bl	800b8ba <memcpy>
  
  return 0;
 8009e36:	2300      	movs	r3, #0
}
 8009e38:	4618      	mov	r0, r3
 8009e3a:	37b0      	adds	r7, #176	@ 0xb0
 8009e3c:	46bd      	mov	sp, r7
 8009e3e:	bd80      	pop	{r7, pc}

08009e40 <aci_hal_set_tx_power_level>:

tBleStatus aci_hal_set_tx_power_level(uint8_t en_high_power, uint8_t pa_level)
{
 8009e40:	b580      	push	{r7, lr}
 8009e42:	b08a      	sub	sp, #40	@ 0x28
 8009e44:	af00      	add	r7, sp, #0
 8009e46:	4603      	mov	r3, r0
 8009e48:	460a      	mov	r2, r1
 8009e4a:	71fb      	strb	r3, [r7, #7]
 8009e4c:	4613      	mov	r3, r2
 8009e4e:	71bb      	strb	r3, [r7, #6]
  struct hci_request rq;
  hal_set_tx_power_level_cp cp;    
  uint8_t status;
    
  cp.en_high_power = en_high_power;
 8009e50:	79fb      	ldrb	r3, [r7, #7]
 8009e52:	733b      	strb	r3, [r7, #12]
  cp.pa_level = pa_level;
 8009e54:	79bb      	ldrb	r3, [r7, #6]
 8009e56:	737b      	strb	r3, [r7, #13]

  BLUENRG_memset(&rq, 0, sizeof(rq));
 8009e58:	f107 0310 	add.w	r3, r7, #16
 8009e5c:	2218      	movs	r2, #24
 8009e5e:	2100      	movs	r1, #0
 8009e60:	4618      	mov	r0, r3
 8009e62:	f001 fcaa 	bl	800b7ba <memset>
  rq.ogf = OGF_VENDOR_CMD;
 8009e66:	233f      	movs	r3, #63	@ 0x3f
 8009e68:	823b      	strh	r3, [r7, #16]
  rq.ocf = OCF_HAL_SET_TX_POWER_LEVEL;
 8009e6a:	230f      	movs	r3, #15
 8009e6c:	827b      	strh	r3, [r7, #18]
  rq.cparam = &cp;
 8009e6e:	f107 030c 	add.w	r3, r7, #12
 8009e72:	61bb      	str	r3, [r7, #24]
  rq.clen = HAL_SET_TX_POWER_LEVEL_CP_SIZE;
 8009e74:	2302      	movs	r3, #2
 8009e76:	61fb      	str	r3, [r7, #28]
  rq.rparam = &status;
 8009e78:	f107 030b 	add.w	r3, r7, #11
 8009e7c:	623b      	str	r3, [r7, #32]
  rq.rlen = 1;
 8009e7e:	2301      	movs	r3, #1
 8009e80:	627b      	str	r3, [r7, #36]	@ 0x24

  if (hci_send_req(&rq, FALSE) < 0)
 8009e82:	f107 0310 	add.w	r3, r7, #16
 8009e86:	2100      	movs	r1, #0
 8009e88:	4618      	mov	r0, r3
 8009e8a:	f000 f9f7 	bl	800a27c <hci_send_req>
 8009e8e:	4603      	mov	r3, r0
 8009e90:	2b00      	cmp	r3, #0
 8009e92:	da01      	bge.n	8009e98 <aci_hal_set_tx_power_level+0x58>
    return BLE_STATUS_TIMEOUT;
 8009e94:	23ff      	movs	r3, #255	@ 0xff
 8009e96:	e000      	b.n	8009e9a <aci_hal_set_tx_power_level+0x5a>

  return status;
 8009e98:	7afb      	ldrb	r3, [r7, #11]
}
 8009e9a:	4618      	mov	r0, r3
 8009e9c:	3728      	adds	r7, #40	@ 0x28
 8009e9e:	46bd      	mov	sp, r7
 8009ea0:	bd80      	pop	{r7, pc}

08009ea2 <getBlueNRGVersion>:
#include "hci.h"
#include "hci_le.h"
#include "string.h"

uint8_t getBlueNRGVersion(uint8_t *hwVersion, uint16_t *fwVersion)
{
 8009ea2:	b590      	push	{r4, r7, lr}
 8009ea4:	b089      	sub	sp, #36	@ 0x24
 8009ea6:	af02      	add	r7, sp, #8
 8009ea8:	6078      	str	r0, [r7, #4]
 8009eaa:	6039      	str	r1, [r7, #0]
  uint8_t status;
  uint8_t hci_version, lmp_pal_version;
  uint16_t hci_revision, manufacturer_name, lmp_pal_subversion;

  status = hci_le_read_local_version(&hci_version, &hci_revision, &lmp_pal_version, 
 8009eac:	f107 0410 	add.w	r4, r7, #16
 8009eb0:	f107 0215 	add.w	r2, r7, #21
 8009eb4:	f107 0112 	add.w	r1, r7, #18
 8009eb8:	f107 0016 	add.w	r0, r7, #22
 8009ebc:	f107 030e 	add.w	r3, r7, #14
 8009ec0:	9300      	str	r3, [sp, #0]
 8009ec2:	4623      	mov	r3, r4
 8009ec4:	f000 f851 	bl	8009f6a <hci_le_read_local_version>
 8009ec8:	4603      	mov	r3, r0
 8009eca:	75fb      	strb	r3, [r7, #23]
                                     &manufacturer_name, &lmp_pal_subversion);

  if (status == BLE_STATUS_SUCCESS) {
 8009ecc:	7dfb      	ldrb	r3, [r7, #23]
 8009ece:	2b00      	cmp	r3, #0
 8009ed0:	d124      	bne.n	8009f1c <getBlueNRGVersion+0x7a>
    *hwVersion = hci_revision >> 8;
 8009ed2:	8a7b      	ldrh	r3, [r7, #18]
 8009ed4:	0a1b      	lsrs	r3, r3, #8
 8009ed6:	b29b      	uxth	r3, r3
 8009ed8:	b2da      	uxtb	r2, r3
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	701a      	strb	r2, [r3, #0]
    *fwVersion = (hci_revision & 0xFF) << 8;              // Major Version Number
 8009ede:	8a7b      	ldrh	r3, [r7, #18]
 8009ee0:	021b      	lsls	r3, r3, #8
 8009ee2:	b29a      	uxth	r2, r3
 8009ee4:	683b      	ldr	r3, [r7, #0]
 8009ee6:	801a      	strh	r2, [r3, #0]
    *fwVersion |= ((lmp_pal_subversion >> 4) & 0xF) << 4; // Minor Version Number
 8009ee8:	683b      	ldr	r3, [r7, #0]
 8009eea:	881b      	ldrh	r3, [r3, #0]
 8009eec:	b21a      	sxth	r2, r3
 8009eee:	89fb      	ldrh	r3, [r7, #14]
 8009ef0:	b21b      	sxth	r3, r3
 8009ef2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8009ef6:	b21b      	sxth	r3, r3
 8009ef8:	4313      	orrs	r3, r2
 8009efa:	b21b      	sxth	r3, r3
 8009efc:	b29a      	uxth	r2, r3
 8009efe:	683b      	ldr	r3, [r7, #0]
 8009f00:	801a      	strh	r2, [r3, #0]
    *fwVersion |= lmp_pal_subversion & 0xF;               // Patch Version Number
 8009f02:	683b      	ldr	r3, [r7, #0]
 8009f04:	881b      	ldrh	r3, [r3, #0]
 8009f06:	b21a      	sxth	r2, r3
 8009f08:	89fb      	ldrh	r3, [r7, #14]
 8009f0a:	b21b      	sxth	r3, r3
 8009f0c:	f003 030f 	and.w	r3, r3, #15
 8009f10:	b21b      	sxth	r3, r3
 8009f12:	4313      	orrs	r3, r2
 8009f14:	b21b      	sxth	r3, r3
 8009f16:	b29a      	uxth	r2, r3
 8009f18:	683b      	ldr	r3, [r7, #0]
 8009f1a:	801a      	strh	r2, [r3, #0]
  }
  return status;
 8009f1c:	7dfb      	ldrb	r3, [r7, #23]
}
 8009f1e:	4618      	mov	r0, r3
 8009f20:	371c      	adds	r7, #28
 8009f22:	46bd      	mov	sp, r7
 8009f24:	bd90      	pop	{r4, r7, pc}

08009f26 <hci_reset>:

#define MIN(a,b)            ((a) < (b) )? (a) : (b)
#define MAX(a,b)            ((a) > (b) )? (a) : (b)

int hci_reset(void)
{
 8009f26:	b580      	push	{r7, lr}
 8009f28:	b088      	sub	sp, #32
 8009f2a:	af00      	add	r7, sp, #0
  struct hci_request rq;
  uint8_t status;
  
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8009f2c:	f107 0308 	add.w	r3, r7, #8
 8009f30:	2218      	movs	r2, #24
 8009f32:	2100      	movs	r1, #0
 8009f34:	4618      	mov	r0, r3
 8009f36:	f001 fc40 	bl	800b7ba <memset>
  rq.ogf = OGF_HOST_CTL;
 8009f3a:	2303      	movs	r3, #3
 8009f3c:	813b      	strh	r3, [r7, #8]
  rq.ocf = OCF_RESET;
 8009f3e:	2303      	movs	r3, #3
 8009f40:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8009f42:	1dfb      	adds	r3, r7, #7
 8009f44:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8009f46:	2301      	movs	r3, #1
 8009f48:	61fb      	str	r3, [r7, #28]
  
  if (hci_send_req(&rq, FALSE) < 0)
 8009f4a:	f107 0308 	add.w	r3, r7, #8
 8009f4e:	2100      	movs	r1, #0
 8009f50:	4618      	mov	r0, r3
 8009f52:	f000 f993 	bl	800a27c <hci_send_req>
 8009f56:	4603      	mov	r3, r0
 8009f58:	2b00      	cmp	r3, #0
 8009f5a:	da01      	bge.n	8009f60 <hci_reset+0x3a>
    return BLE_STATUS_TIMEOUT;
 8009f5c:	23ff      	movs	r3, #255	@ 0xff
 8009f5e:	e000      	b.n	8009f62 <hci_reset+0x3c>
  
  return status;  
 8009f60:	79fb      	ldrb	r3, [r7, #7]
}
 8009f62:	4618      	mov	r0, r3
 8009f64:	3720      	adds	r7, #32
 8009f66:	46bd      	mov	sp, r7
 8009f68:	bd80      	pop	{r7, pc}

08009f6a <hci_le_read_local_version>:
  return status;  
}

int hci_le_read_local_version(uint8_t *hci_version, uint16_t *hci_revision, uint8_t *lmp_pal_version, 
                              uint16_t *manufacturer_name, uint16_t *lmp_pal_subversion)
{
 8009f6a:	b580      	push	{r7, lr}
 8009f6c:	b08e      	sub	sp, #56	@ 0x38
 8009f6e:	af00      	add	r7, sp, #0
 8009f70:	60f8      	str	r0, [r7, #12]
 8009f72:	60b9      	str	r1, [r7, #8]
 8009f74:	607a      	str	r2, [r7, #4]
 8009f76:	603b      	str	r3, [r7, #0]
  struct hci_request rq;
  read_local_version_rp resp;
  
  BLUENRG_memset(&resp, 0, sizeof(resp));
 8009f78:	f107 0314 	add.w	r3, r7, #20
 8009f7c:	2209      	movs	r2, #9
 8009f7e:	2100      	movs	r1, #0
 8009f80:	4618      	mov	r0, r3
 8009f82:	f001 fc1a 	bl	800b7ba <memset>
  
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8009f86:	f107 0320 	add.w	r3, r7, #32
 8009f8a:	2218      	movs	r2, #24
 8009f8c:	2100      	movs	r1, #0
 8009f8e:	4618      	mov	r0, r3
 8009f90:	f001 fc13 	bl	800b7ba <memset>
  rq.ogf = OGF_INFO_PARAM;
 8009f94:	2304      	movs	r3, #4
 8009f96:	843b      	strh	r3, [r7, #32]
  rq.ocf = OCF_READ_LOCAL_VERSION;
 8009f98:	2301      	movs	r3, #1
 8009f9a:	847b      	strh	r3, [r7, #34]	@ 0x22
  rq.cparam = NULL;
 8009f9c:	2300      	movs	r3, #0
 8009f9e:	62bb      	str	r3, [r7, #40]	@ 0x28
  rq.clen = 0;
 8009fa0:	2300      	movs	r3, #0
 8009fa2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  rq.rparam = &resp;
 8009fa4:	f107 0314 	add.w	r3, r7, #20
 8009fa8:	633b      	str	r3, [r7, #48]	@ 0x30
  rq.rlen = READ_LOCAL_VERSION_RP_SIZE;
 8009faa:	2309      	movs	r3, #9
 8009fac:	637b      	str	r3, [r7, #52]	@ 0x34
  
  if (hci_send_req(&rq, FALSE) < 0)
 8009fae:	f107 0320 	add.w	r3, r7, #32
 8009fb2:	2100      	movs	r1, #0
 8009fb4:	4618      	mov	r0, r3
 8009fb6:	f000 f961 	bl	800a27c <hci_send_req>
 8009fba:	4603      	mov	r3, r0
 8009fbc:	2b00      	cmp	r3, #0
 8009fbe:	da01      	bge.n	8009fc4 <hci_le_read_local_version+0x5a>
    return BLE_STATUS_TIMEOUT;
 8009fc0:	23ff      	movs	r3, #255	@ 0xff
 8009fc2:	e018      	b.n	8009ff6 <hci_le_read_local_version+0x8c>
  
  if (resp.status) {
 8009fc4:	7d3b      	ldrb	r3, [r7, #20]
 8009fc6:	2b00      	cmp	r3, #0
 8009fc8:	d001      	beq.n	8009fce <hci_le_read_local_version+0x64>
    return resp.status;
 8009fca:	7d3b      	ldrb	r3, [r7, #20]
 8009fcc:	e013      	b.n	8009ff6 <hci_le_read_local_version+0x8c>
  }
  
  
  *hci_version = resp.hci_version;
 8009fce:	7d7a      	ldrb	r2, [r7, #21]
 8009fd0:	68fb      	ldr	r3, [r7, #12]
 8009fd2:	701a      	strb	r2, [r3, #0]
  *hci_revision =  btohs(resp.hci_revision);
 8009fd4:	8afa      	ldrh	r2, [r7, #22]
 8009fd6:	68bb      	ldr	r3, [r7, #8]
 8009fd8:	801a      	strh	r2, [r3, #0]
  *lmp_pal_version = resp.lmp_pal_version;
 8009fda:	7e3a      	ldrb	r2, [r7, #24]
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	701a      	strb	r2, [r3, #0]
  *manufacturer_name = btohs(resp.manufacturer_name);
 8009fe0:	f8b7 3019 	ldrh.w	r3, [r7, #25]
 8009fe4:	b29a      	uxth	r2, r3
 8009fe6:	683b      	ldr	r3, [r7, #0]
 8009fe8:	801a      	strh	r2, [r3, #0]
  *lmp_pal_subversion = btohs(resp.lmp_pal_subversion);
 8009fea:	f8b7 301b 	ldrh.w	r3, [r7, #27]
 8009fee:	b29a      	uxth	r2, r3
 8009ff0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009ff2:	801a      	strh	r2, [r3, #0]
  
  return 0;
 8009ff4:	2300      	movs	r3, #0
}
 8009ff6:	4618      	mov	r0, r3
 8009ff8:	3738      	adds	r7, #56	@ 0x38
 8009ffa:	46bd      	mov	sp, r7
 8009ffc:	bd80      	pop	{r7, pc}

08009ffe <hci_le_set_scan_resp_data>:
  
  return 0;
}

int hci_le_set_scan_resp_data(uint8_t length, const uint8_t data[])
{
 8009ffe:	b580      	push	{r7, lr}
 800a000:	b092      	sub	sp, #72	@ 0x48
 800a002:	af00      	add	r7, sp, #0
 800a004:	4603      	mov	r3, r0
 800a006:	6039      	str	r1, [r7, #0]
 800a008:	71fb      	strb	r3, [r7, #7]
  struct hci_request rq;
  le_set_scan_response_data_cp scan_resp_cp;
  uint8_t status;
  
  BLUENRG_memset(&scan_resp_cp, 0, sizeof(scan_resp_cp));
 800a00a:	f107 0310 	add.w	r3, r7, #16
 800a00e:	2220      	movs	r2, #32
 800a010:	2100      	movs	r1, #0
 800a012:	4618      	mov	r0, r3
 800a014:	f001 fbd1 	bl	800b7ba <memset>
  scan_resp_cp.length = length;
 800a018:	79fb      	ldrb	r3, [r7, #7]
 800a01a:	743b      	strb	r3, [r7, #16]
  BLUENRG_memcpy(scan_resp_cp.data, data, MIN(31,length));
 800a01c:	79fb      	ldrb	r3, [r7, #7]
 800a01e:	2b1f      	cmp	r3, #31
 800a020:	bf28      	it	cs
 800a022:	231f      	movcs	r3, #31
 800a024:	b2db      	uxtb	r3, r3
 800a026:	461a      	mov	r2, r3
 800a028:	f107 0310 	add.w	r3, r7, #16
 800a02c:	3301      	adds	r3, #1
 800a02e:	6839      	ldr	r1, [r7, #0]
 800a030:	4618      	mov	r0, r3
 800a032:	f001 fc42 	bl	800b8ba <memcpy>
  
  BLUENRG_memset(&rq, 0, sizeof(rq));
 800a036:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800a03a:	2218      	movs	r2, #24
 800a03c:	2100      	movs	r1, #0
 800a03e:	4618      	mov	r0, r3
 800a040:	f001 fbbb 	bl	800b7ba <memset>
  rq.ogf = OGF_LE_CTL;
 800a044:	2308      	movs	r3, #8
 800a046:	863b      	strh	r3, [r7, #48]	@ 0x30
  rq.ocf = OCF_LE_SET_SCAN_RESPONSE_DATA;
 800a048:	2309      	movs	r3, #9
 800a04a:	867b      	strh	r3, [r7, #50]	@ 0x32
  rq.cparam = &scan_resp_cp;
 800a04c:	f107 0310 	add.w	r3, r7, #16
 800a050:	63bb      	str	r3, [r7, #56]	@ 0x38
  rq.clen = LE_SET_SCAN_RESPONSE_DATA_CP_SIZE;
 800a052:	2320      	movs	r3, #32
 800a054:	63fb      	str	r3, [r7, #60]	@ 0x3c
  rq.rparam = &status;
 800a056:	f107 030f 	add.w	r3, r7, #15
 800a05a:	643b      	str	r3, [r7, #64]	@ 0x40
  rq.rlen = 1;
 800a05c:	2301      	movs	r3, #1
 800a05e:	647b      	str	r3, [r7, #68]	@ 0x44
  
  if (hci_send_req(&rq, FALSE) < 0)
 800a060:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800a064:	2100      	movs	r1, #0
 800a066:	4618      	mov	r0, r3
 800a068:	f000 f908 	bl	800a27c <hci_send_req>
 800a06c:	4603      	mov	r3, r0
 800a06e:	2b00      	cmp	r3, #0
 800a070:	da01      	bge.n	800a076 <hci_le_set_scan_resp_data+0x78>
    return BLE_STATUS_TIMEOUT;
 800a072:	23ff      	movs	r3, #255	@ 0xff
 800a074:	e000      	b.n	800a078 <hci_le_set_scan_resp_data+0x7a>
  
  return status;
 800a076:	7bfb      	ldrb	r3, [r7, #15]
}
 800a078:	4618      	mov	r0, r3
 800a07a:	3748      	adds	r7, #72	@ 0x48
 800a07c:	46bd      	mov	sp, r7
 800a07e:	bd80      	pop	{r7, pc}

0800a080 <verify_packet>:
  *
  * @param  hciReadPacket The HCI data packet
  * @retval 0: valid packet, 1: incorrect packet, 2: wrong length (packet truncated or too long)
  */
static int verify_packet(const tHciDataPacket * hciReadPacket)
{
 800a080:	b480      	push	{r7}
 800a082:	b085      	sub	sp, #20
 800a084:	af00      	add	r7, sp, #0
 800a086:	6078      	str	r0, [r7, #4]
  const uint8_t *hci_pckt = hciReadPacket->dataBuff;
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	3308      	adds	r3, #8
 800a08c:	60fb      	str	r3, [r7, #12]
  
  if (hci_pckt[HCI_PCK_TYPE_OFFSET] != HCI_EVENT_PKT)
 800a08e:	68fb      	ldr	r3, [r7, #12]
 800a090:	781b      	ldrb	r3, [r3, #0]
 800a092:	2b04      	cmp	r3, #4
 800a094:	d001      	beq.n	800a09a <verify_packet+0x1a>
    return 1; /* Incorrect type */
 800a096:	2301      	movs	r3, #1
 800a098:	e00c      	b.n	800a0b4 <verify_packet+0x34>
  
  if (hci_pckt[EVENT_PARAMETER_TOT_LEN_OFFSET] != hciReadPacket->data_len - (1+HCI_EVENT_HDR_SIZE))
 800a09a:	68fb      	ldr	r3, [r7, #12]
 800a09c:	3302      	adds	r3, #2
 800a09e:	781b      	ldrb	r3, [r3, #0]
 800a0a0:	461a      	mov	r2, r3
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	f893 3088 	ldrb.w	r3, [r3, #136]	@ 0x88
 800a0a8:	3b03      	subs	r3, #3
 800a0aa:	429a      	cmp	r2, r3
 800a0ac:	d001      	beq.n	800a0b2 <verify_packet+0x32>
    return 2; /* Wrong length (packet truncated or too long) */
 800a0ae:	2302      	movs	r3, #2
 800a0b0:	e000      	b.n	800a0b4 <verify_packet+0x34>
  
  return 0;      
 800a0b2:	2300      	movs	r3, #0
}
 800a0b4:	4618      	mov	r0, r3
 800a0b6:	3714      	adds	r7, #20
 800a0b8:	46bd      	mov	sp, r7
 800a0ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0be:	4770      	bx	lr

0800a0c0 <send_cmd>:
  * @param  plen The HCI command length
  * @param  param The HCI command parameters
  * @retval None
  */
static void send_cmd(uint16_t ogf, uint16_t ocf, uint8_t plen, void *param)
{
 800a0c0:	b580      	push	{r7, lr}
 800a0c2:	b0a6      	sub	sp, #152	@ 0x98
 800a0c4:	af00      	add	r7, sp, #0
 800a0c6:	607b      	str	r3, [r7, #4]
 800a0c8:	4603      	mov	r3, r0
 800a0ca:	81fb      	strh	r3, [r7, #14]
 800a0cc:	460b      	mov	r3, r1
 800a0ce:	81bb      	strh	r3, [r7, #12]
 800a0d0:	4613      	mov	r3, r2
 800a0d2:	72fb      	strb	r3, [r7, #11]
  uint8_t payload[HCI_MAX_PAYLOAD_SIZE];  
  hci_command_hdr hc;
  
  hc.opcode = htobs(cmd_opcode_pack(ogf, ocf));
 800a0d4:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800a0d8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a0dc:	b21a      	sxth	r2, r3
 800a0de:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800a0e2:	029b      	lsls	r3, r3, #10
 800a0e4:	b21b      	sxth	r3, r3
 800a0e6:	4313      	orrs	r3, r2
 800a0e8:	b21b      	sxth	r3, r3
 800a0ea:	b29b      	uxth	r3, r3
 800a0ec:	82bb      	strh	r3, [r7, #20]
  hc.plen = plen;
 800a0ee:	7afb      	ldrb	r3, [r7, #11]
 800a0f0:	75bb      	strb	r3, [r7, #22]

  payload[0] = HCI_COMMAND_PKT;
 800a0f2:	2301      	movs	r3, #1
 800a0f4:	763b      	strb	r3, [r7, #24]
  BLUENRG_memcpy(payload + 1, &hc, sizeof(hc));
 800a0f6:	f107 0318 	add.w	r3, r7, #24
 800a0fa:	3301      	adds	r3, #1
 800a0fc:	461a      	mov	r2, r3
 800a0fe:	f107 0314 	add.w	r3, r7, #20
 800a102:	8819      	ldrh	r1, [r3, #0]
 800a104:	789b      	ldrb	r3, [r3, #2]
 800a106:	8011      	strh	r1, [r2, #0]
 800a108:	7093      	strb	r3, [r2, #2]
  BLUENRG_memcpy(payload + HCI_HDR_SIZE + HCI_COMMAND_HDR_SIZE, param, plen);
 800a10a:	f107 0318 	add.w	r3, r7, #24
 800a10e:	3304      	adds	r3, #4
 800a110:	7afa      	ldrb	r2, [r7, #11]
 800a112:	6879      	ldr	r1, [r7, #4]
 800a114:	4618      	mov	r0, r3
 800a116:	f001 fbd0 	bl	800b8ba <memcpy>
  
  if (hciContext.io.Send)
 800a11a:	4b09      	ldr	r3, [pc, #36]	@ (800a140 <send_cmd+0x80>)
 800a11c:	691b      	ldr	r3, [r3, #16]
 800a11e:	2b00      	cmp	r3, #0
 800a120:	d009      	beq.n	800a136 <send_cmd+0x76>
  {
    hciContext.io.Send (payload, HCI_HDR_SIZE + HCI_COMMAND_HDR_SIZE + plen);
 800a122:	4b07      	ldr	r3, [pc, #28]	@ (800a140 <send_cmd+0x80>)
 800a124:	691b      	ldr	r3, [r3, #16]
 800a126:	7afa      	ldrb	r2, [r7, #11]
 800a128:	b292      	uxth	r2, r2
 800a12a:	3204      	adds	r2, #4
 800a12c:	b291      	uxth	r1, r2
 800a12e:	f107 0218 	add.w	r2, r7, #24
 800a132:	4610      	mov	r0, r2
 800a134:	4798      	blx	r3
  }
}
 800a136:	bf00      	nop
 800a138:	3798      	adds	r7, #152	@ 0x98
 800a13a:	46bd      	mov	sp, r7
 800a13c:	bd80      	pop	{r7, pc}
 800a13e:	bf00      	nop
 800a140:	20000e54 	.word	0x20000e54

0800a144 <move_list>:
  * @param  dest_list
  * @param  src_list
  * @retval None
  */
static void move_list(tListNode * dest_list, tListNode * src_list)
{
 800a144:	b580      	push	{r7, lr}
 800a146:	b084      	sub	sp, #16
 800a148:	af00      	add	r7, sp, #0
 800a14a:	6078      	str	r0, [r7, #4]
 800a14c:	6039      	str	r1, [r7, #0]
  pListNode tmp_node;
  
  while (!list_is_empty(src_list))
 800a14e:	e00a      	b.n	800a166 <move_list+0x22>
  {
    list_remove_tail(src_list, &tmp_node);
 800a150:	f107 030c 	add.w	r3, r7, #12
 800a154:	4619      	mov	r1, r3
 800a156:	6838      	ldr	r0, [r7, #0]
 800a158:	f000 fae8 	bl	800a72c <list_remove_tail>
    list_insert_head(dest_list, tmp_node);
 800a15c:	68fb      	ldr	r3, [r7, #12]
 800a15e:	4619      	mov	r1, r3
 800a160:	6878      	ldr	r0, [r7, #4]
 800a162:	f000 fa4f 	bl	800a604 <list_insert_head>
  while (!list_is_empty(src_list))
 800a166:	6838      	ldr	r0, [r7, #0]
 800a168:	f000 fa2a 	bl	800a5c0 <list_is_empty>
 800a16c:	4603      	mov	r3, r0
 800a16e:	2b00      	cmp	r3, #0
 800a170:	d0ee      	beq.n	800a150 <move_list+0xc>
  }
}
 800a172:	bf00      	nop
 800a174:	bf00      	nop
 800a176:	3710      	adds	r7, #16
 800a178:	46bd      	mov	sp, r7
 800a17a:	bd80      	pop	{r7, pc}

0800a17c <free_event_list>:
  *
  * @param  None
  * @retval None
  */
static void free_event_list(void)
{
 800a17c:	b580      	push	{r7, lr}
 800a17e:	b082      	sub	sp, #8
 800a180:	af00      	add	r7, sp, #0
  tHciDataPacket * pckt;

  while(list_get_size(&hciReadPktPool) < HCI_READ_PACKET_NUM_MAX/2){
 800a182:	e009      	b.n	800a198 <free_event_list+0x1c>
    list_remove_head(&hciReadPktRxQueue, (tListNode **)&pckt);    
 800a184:	1d3b      	adds	r3, r7, #4
 800a186:	4619      	mov	r1, r3
 800a188:	4809      	ldr	r0, [pc, #36]	@ (800a1b0 <free_event_list+0x34>)
 800a18a:	f000 faa8 	bl	800a6de <list_remove_head>
    list_insert_tail(&hciReadPktPool, (tListNode *)pckt);
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	4619      	mov	r1, r3
 800a192:	4808      	ldr	r0, [pc, #32]	@ (800a1b4 <free_event_list+0x38>)
 800a194:	f000 fa5c 	bl	800a650 <list_insert_tail>
  while(list_get_size(&hciReadPktPool) < HCI_READ_PACKET_NUM_MAX/2){
 800a198:	4806      	ldr	r0, [pc, #24]	@ (800a1b4 <free_event_list+0x38>)
 800a19a:	f000 faee 	bl	800a77a <list_get_size>
 800a19e:	4603      	mov	r3, r0
 800a1a0:	2b01      	cmp	r3, #1
 800a1a2:	ddef      	ble.n	800a184 <free_event_list+0x8>
  }
}
 800a1a4:	bf00      	nop
 800a1a6:	bf00      	nop
 800a1a8:	3708      	adds	r7, #8
 800a1aa:	46bd      	mov	sp, r7
 800a1ac:	bd80      	pop	{r7, pc}
 800a1ae:	bf00      	nop
 800a1b0:	20000b90 	.word	0x20000b90
 800a1b4:	20000b88 	.word	0x20000b88

0800a1b8 <hci_init>:

/********************** HCI Transport layer functions *****************************/

void hci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 800a1b8:	b580      	push	{r7, lr}
 800a1ba:	b084      	sub	sp, #16
 800a1bc:	af00      	add	r7, sp, #0
 800a1be:	6078      	str	r0, [r7, #4]
 800a1c0:	6039      	str	r1, [r7, #0]
  uint8_t index;

  if(UserEvtRx != NULL)
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	2b00      	cmp	r3, #0
 800a1c6:	d002      	beq.n	800a1ce <hci_init+0x16>
  {
    hciContext.UserEvtRx = UserEvtRx;
 800a1c8:	4a18      	ldr	r2, [pc, #96]	@ (800a22c <hci_init+0x74>)
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	61d3      	str	r3, [r2, #28]
  }
  
  /* Initialize list heads of ready and free hci data packet queues */
  list_init_head(&hciReadPktPool);
 800a1ce:	4818      	ldr	r0, [pc, #96]	@ (800a230 <hci_init+0x78>)
 800a1d0:	f000 f9e6 	bl	800a5a0 <list_init_head>
  list_init_head(&hciReadPktRxQueue);
 800a1d4:	4817      	ldr	r0, [pc, #92]	@ (800a234 <hci_init+0x7c>)
 800a1d6:	f000 f9e3 	bl	800a5a0 <list_init_head>

  /* Initialize TL BLE layer */
  hci_tl_lowlevel_init();
 800a1da:	f7f8 fe05 	bl	8002de8 <hci_tl_lowlevel_init>
    
  /* Initialize the queue of free hci data packets */
  for (index = 0; index < HCI_READ_PACKET_NUM_MAX; index++)
 800a1de:	2300      	movs	r3, #0
 800a1e0:	73fb      	strb	r3, [r7, #15]
 800a1e2:	e00c      	b.n	800a1fe <hci_init+0x46>
  {
    list_insert_tail(&hciReadPktPool, (tListNode *)&hciReadPacketBuffer[index]);
 800a1e4:	7bfb      	ldrb	r3, [r7, #15]
 800a1e6:	228c      	movs	r2, #140	@ 0x8c
 800a1e8:	fb02 f303 	mul.w	r3, r2, r3
 800a1ec:	4a12      	ldr	r2, [pc, #72]	@ (800a238 <hci_init+0x80>)
 800a1ee:	4413      	add	r3, r2
 800a1f0:	4619      	mov	r1, r3
 800a1f2:	480f      	ldr	r0, [pc, #60]	@ (800a230 <hci_init+0x78>)
 800a1f4:	f000 fa2c 	bl	800a650 <list_insert_tail>
  for (index = 0; index < HCI_READ_PACKET_NUM_MAX; index++)
 800a1f8:	7bfb      	ldrb	r3, [r7, #15]
 800a1fa:	3301      	adds	r3, #1
 800a1fc:	73fb      	strb	r3, [r7, #15]
 800a1fe:	7bfb      	ldrb	r3, [r7, #15]
 800a200:	2b04      	cmp	r3, #4
 800a202:	d9ef      	bls.n	800a1e4 <hci_init+0x2c>
  } 
  
  /* Initialize low level driver */
  if (hciContext.io.Init)  hciContext.io.Init(NULL);
 800a204:	4b09      	ldr	r3, [pc, #36]	@ (800a22c <hci_init+0x74>)
 800a206:	681b      	ldr	r3, [r3, #0]
 800a208:	2b00      	cmp	r3, #0
 800a20a:	d003      	beq.n	800a214 <hci_init+0x5c>
 800a20c:	4b07      	ldr	r3, [pc, #28]	@ (800a22c <hci_init+0x74>)
 800a20e:	681b      	ldr	r3, [r3, #0]
 800a210:	2000      	movs	r0, #0
 800a212:	4798      	blx	r3
  if (hciContext.io.Reset) hciContext.io.Reset();
 800a214:	4b05      	ldr	r3, [pc, #20]	@ (800a22c <hci_init+0x74>)
 800a216:	689b      	ldr	r3, [r3, #8]
 800a218:	2b00      	cmp	r3, #0
 800a21a:	d002      	beq.n	800a222 <hci_init+0x6a>
 800a21c:	4b03      	ldr	r3, [pc, #12]	@ (800a22c <hci_init+0x74>)
 800a21e:	689b      	ldr	r3, [r3, #8]
 800a220:	4798      	blx	r3
}
 800a222:	bf00      	nop
 800a224:	3710      	adds	r7, #16
 800a226:	46bd      	mov	sp, r7
 800a228:	bd80      	pop	{r7, pc}
 800a22a:	bf00      	nop
 800a22c:	20000e54 	.word	0x20000e54
 800a230:	20000b88 	.word	0x20000b88
 800a234:	20000b90 	.word	0x20000b90
 800a238:	20000b98 	.word	0x20000b98

0800a23c <hci_register_io_bus>:

void hci_register_io_bus(tHciIO* fops)
{
 800a23c:	b480      	push	{r7}
 800a23e:	b083      	sub	sp, #12
 800a240:	af00      	add	r7, sp, #0
 800a242:	6078      	str	r0, [r7, #4]
  /* Register bus function */
  hciContext.io.Init    = fops->Init; 
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	681b      	ldr	r3, [r3, #0]
 800a248:	4a0b      	ldr	r2, [pc, #44]	@ (800a278 <hci_register_io_bus+0x3c>)
 800a24a:	6013      	str	r3, [r2, #0]
  hciContext.io.Receive = fops->Receive;  
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	68db      	ldr	r3, [r3, #12]
 800a250:	4a09      	ldr	r2, [pc, #36]	@ (800a278 <hci_register_io_bus+0x3c>)
 800a252:	60d3      	str	r3, [r2, #12]
  hciContext.io.Send    = fops->Send;
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	691b      	ldr	r3, [r3, #16]
 800a258:	4a07      	ldr	r2, [pc, #28]	@ (800a278 <hci_register_io_bus+0x3c>)
 800a25a:	6113      	str	r3, [r2, #16]
  hciContext.io.GetTick = fops->GetTick;
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	699b      	ldr	r3, [r3, #24]
 800a260:	4a05      	ldr	r2, [pc, #20]	@ (800a278 <hci_register_io_bus+0x3c>)
 800a262:	6193      	str	r3, [r2, #24]
  hciContext.io.Reset   = fops->Reset;
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	689b      	ldr	r3, [r3, #8]
 800a268:	4a03      	ldr	r2, [pc, #12]	@ (800a278 <hci_register_io_bus+0x3c>)
 800a26a:	6093      	str	r3, [r2, #8]
}
 800a26c:	bf00      	nop
 800a26e:	370c      	adds	r7, #12
 800a270:	46bd      	mov	sp, r7
 800a272:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a276:	4770      	bx	lr
 800a278:	20000e54 	.word	0x20000e54

0800a27c <hci_send_req>:

int hci_send_req(struct hci_request* r, BOOL async)
{
 800a27c:	b580      	push	{r7, lr}
 800a27e:	b08e      	sub	sp, #56	@ 0x38
 800a280:	af00      	add	r7, sp, #0
 800a282:	6078      	str	r0, [r7, #4]
 800a284:	460b      	mov	r3, r1
 800a286:	70fb      	strb	r3, [r7, #3]
  uint8_t *ptr;
  uint16_t opcode = htobs(cmd_opcode_pack(r->ogf, r->ocf));
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	885b      	ldrh	r3, [r3, #2]
 800a28c:	b21b      	sxth	r3, r3
 800a28e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a292:	b21a      	sxth	r2, r3
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	881b      	ldrh	r3, [r3, #0]
 800a298:	b21b      	sxth	r3, r3
 800a29a:	029b      	lsls	r3, r3, #10
 800a29c:	b21b      	sxth	r3, r3
 800a29e:	4313      	orrs	r3, r2
 800a2a0:	b21b      	sxth	r3, r3
 800a2a2:	86fb      	strh	r3, [r7, #54]	@ 0x36
  hci_event_pckt *event_pckt;
  hci_uart_pckt *hci_hdr;

  tHciDataPacket * hciReadPacket = NULL;
 800a2a4:	2300      	movs	r3, #0
 800a2a6:	613b      	str	r3, [r7, #16]
  tListNode hciTempQueue;
  
  list_init_head(&hciTempQueue);
 800a2a8:	f107 0308 	add.w	r3, r7, #8
 800a2ac:	4618      	mov	r0, r3
 800a2ae:	f000 f977 	bl	800a5a0 <list_init_head>

  free_event_list();
 800a2b2:	f7ff ff63 	bl	800a17c <free_event_list>
  
  send_cmd(r->ogf, r->ocf, r->clen, r->cparam);
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	8818      	ldrh	r0, [r3, #0]
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	8859      	ldrh	r1, [r3, #2]
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	68db      	ldr	r3, [r3, #12]
 800a2c2:	b2da      	uxtb	r2, r3
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	689b      	ldr	r3, [r3, #8]
 800a2c8:	f7ff fefa 	bl	800a0c0 <send_cmd>
  
  if (async)
 800a2cc:	78fb      	ldrb	r3, [r7, #3]
 800a2ce:	2b00      	cmp	r3, #0
 800a2d0:	d001      	beq.n	800a2d6 <hci_send_req+0x5a>
  {
    return 0;
 800a2d2:	2300      	movs	r3, #0
 800a2d4:	e0e2      	b.n	800a49c <hci_send_req+0x220>
    evt_cmd_complete  *cc;
    evt_cmd_status    *cs;
    evt_le_meta_event *me;
    uint32_t len;
    
    uint32_t tickstart = HAL_GetTick();
 800a2d6:	f7fa facb 	bl	8004870 <HAL_GetTick>
 800a2da:	6338      	str	r0, [r7, #48]	@ 0x30
      
    while (1)
    {
      if ((HAL_GetTick() - tickstart) > HCI_DEFAULT_TIMEOUT_MS)
 800a2dc:	f7fa fac8 	bl	8004870 <HAL_GetTick>
 800a2e0:	4602      	mov	r2, r0
 800a2e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a2e4:	1ad3      	subs	r3, r2, r3
 800a2e6:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800a2ea:	f200 80b3 	bhi.w	800a454 <hci_send_req+0x1d8>
      {
        goto failed;
      }
      
      if (!list_is_empty(&hciReadPktRxQueue)) 
 800a2ee:	486d      	ldr	r0, [pc, #436]	@ (800a4a4 <hci_send_req+0x228>)
 800a2f0:	f000 f966 	bl	800a5c0 <list_is_empty>
 800a2f4:	4603      	mov	r3, r0
 800a2f6:	2b00      	cmp	r3, #0
 800a2f8:	d000      	beq.n	800a2fc <hci_send_req+0x80>
      if ((HAL_GetTick() - tickstart) > HCI_DEFAULT_TIMEOUT_MS)
 800a2fa:	e7ef      	b.n	800a2dc <hci_send_req+0x60>
      {
        break;
 800a2fc:	bf00      	nop
      }
    }
    
    /* Extract packet from HCI event queue. */
    list_remove_head(&hciReadPktRxQueue, (tListNode **)&hciReadPacket);    
 800a2fe:	f107 0310 	add.w	r3, r7, #16
 800a302:	4619      	mov	r1, r3
 800a304:	4867      	ldr	r0, [pc, #412]	@ (800a4a4 <hci_send_req+0x228>)
 800a306:	f000 f9ea 	bl	800a6de <list_remove_head>
    
    hci_hdr = (void *)hciReadPacket->dataBuff;
 800a30a:	693b      	ldr	r3, [r7, #16]
 800a30c:	3308      	adds	r3, #8
 800a30e:	62fb      	str	r3, [r7, #44]	@ 0x2c

    if (hci_hdr->type == HCI_EVENT_PKT)
 800a310:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a312:	781b      	ldrb	r3, [r3, #0]
 800a314:	2b04      	cmp	r3, #4
 800a316:	d17f      	bne.n	800a418 <hci_send_req+0x19c>
    {
      event_pckt = (void *)(hci_hdr->data);
 800a318:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a31a:	3301      	adds	r3, #1
 800a31c:	62bb      	str	r3, [r7, #40]	@ 0x28
    
      ptr = hciReadPacket->dataBuff + (1 + HCI_EVENT_HDR_SIZE);
 800a31e:	693b      	ldr	r3, [r7, #16]
 800a320:	3308      	adds	r3, #8
 800a322:	3303      	adds	r3, #3
 800a324:	627b      	str	r3, [r7, #36]	@ 0x24
      len = hciReadPacket->data_len - (1 + HCI_EVENT_HDR_SIZE);
 800a326:	693b      	ldr	r3, [r7, #16]
 800a328:	f893 3088 	ldrb.w	r3, [r3, #136]	@ 0x88
 800a32c:	3b03      	subs	r3, #3
 800a32e:	623b      	str	r3, [r7, #32]
    
      switch (event_pckt->evt) 
 800a330:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a332:	781b      	ldrb	r3, [r3, #0]
 800a334:	2b3e      	cmp	r3, #62	@ 0x3e
 800a336:	d04c      	beq.n	800a3d2 <hci_send_req+0x156>
 800a338:	2b3e      	cmp	r3, #62	@ 0x3e
 800a33a:	dc68      	bgt.n	800a40e <hci_send_req+0x192>
 800a33c:	2b10      	cmp	r3, #16
 800a33e:	f000 808b 	beq.w	800a458 <hci_send_req+0x1dc>
 800a342:	2b10      	cmp	r3, #16
 800a344:	dc63      	bgt.n	800a40e <hci_send_req+0x192>
 800a346:	2b0e      	cmp	r3, #14
 800a348:	d023      	beq.n	800a392 <hci_send_req+0x116>
 800a34a:	2b0f      	cmp	r3, #15
 800a34c:	d15f      	bne.n	800a40e <hci_send_req+0x192>
      {      
      case EVT_CMD_STATUS:
        cs = (void *) ptr;
 800a34e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a350:	61bb      	str	r3, [r7, #24]
        
        if (cs->opcode != opcode)
 800a352:	69bb      	ldr	r3, [r7, #24]
 800a354:	885b      	ldrh	r3, [r3, #2]
 800a356:	b29b      	uxth	r3, r3
 800a358:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800a35a:	429a      	cmp	r2, r3
 800a35c:	d17e      	bne.n	800a45c <hci_send_req+0x1e0>
          goto failed;
        
        if (r->event != EVT_CMD_STATUS) {
 800a35e:	687b      	ldr	r3, [r7, #4]
 800a360:	685b      	ldr	r3, [r3, #4]
 800a362:	2b0f      	cmp	r3, #15
 800a364:	d004      	beq.n	800a370 <hci_send_req+0xf4>
          if (cs->status) {
 800a366:	69bb      	ldr	r3, [r7, #24]
 800a368:	781b      	ldrb	r3, [r3, #0]
 800a36a:	2b00      	cmp	r3, #0
 800a36c:	d051      	beq.n	800a412 <hci_send_req+0x196>
            goto failed;
 800a36e:	e078      	b.n	800a462 <hci_send_req+0x1e6>
          }
          break;
        }

        r->rlen = MIN(len, r->rlen);
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	695a      	ldr	r2, [r3, #20]
 800a374:	6a3b      	ldr	r3, [r7, #32]
 800a376:	429a      	cmp	r2, r3
 800a378:	bf28      	it	cs
 800a37a:	461a      	movcs	r2, r3
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	615a      	str	r2, [r3, #20]
        BLUENRG_memcpy(r->rparam, ptr, r->rlen);
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	6918      	ldr	r0, [r3, #16]
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	695b      	ldr	r3, [r3, #20]
 800a388:	461a      	mov	r2, r3
 800a38a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800a38c:	f001 fa95 	bl	800b8ba <memcpy>
        goto done;
 800a390:	e078      	b.n	800a484 <hci_send_req+0x208>
      
      case EVT_CMD_COMPLETE:
        cc = (void *) ptr;
 800a392:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a394:	617b      	str	r3, [r7, #20]
      
        if (cc->opcode != opcode)
 800a396:	697b      	ldr	r3, [r7, #20]
 800a398:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800a39c:	b29b      	uxth	r3, r3
 800a39e:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800a3a0:	429a      	cmp	r2, r3
 800a3a2:	d15d      	bne.n	800a460 <hci_send_req+0x1e4>
          goto failed;
      
        ptr += EVT_CMD_COMPLETE_SIZE;
 800a3a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a3a6:	3303      	adds	r3, #3
 800a3a8:	627b      	str	r3, [r7, #36]	@ 0x24
        len -= EVT_CMD_COMPLETE_SIZE;
 800a3aa:	6a3b      	ldr	r3, [r7, #32]
 800a3ac:	3b03      	subs	r3, #3
 800a3ae:	623b      	str	r3, [r7, #32]
      
        r->rlen = MIN(len, r->rlen);
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	695a      	ldr	r2, [r3, #20]
 800a3b4:	6a3b      	ldr	r3, [r7, #32]
 800a3b6:	429a      	cmp	r2, r3
 800a3b8:	bf28      	it	cs
 800a3ba:	461a      	movcs	r2, r3
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	615a      	str	r2, [r3, #20]
        BLUENRG_memcpy(r->rparam, ptr, r->rlen);
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	6918      	ldr	r0, [r3, #16]
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	695b      	ldr	r3, [r3, #20]
 800a3c8:	461a      	mov	r2, r3
 800a3ca:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800a3cc:	f001 fa75 	bl	800b8ba <memcpy>
        goto done;
 800a3d0:	e058      	b.n	800a484 <hci_send_req+0x208>
      
      case EVT_LE_META_EVENT:
        me = (void *) ptr;
 800a3d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a3d4:	61fb      	str	r3, [r7, #28]
      
        if (me->subevent != r->event)
 800a3d6:	69fb      	ldr	r3, [r7, #28]
 800a3d8:	781b      	ldrb	r3, [r3, #0]
 800a3da:	461a      	mov	r2, r3
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	685b      	ldr	r3, [r3, #4]
 800a3e0:	429a      	cmp	r2, r3
 800a3e2:	d118      	bne.n	800a416 <hci_send_req+0x19a>
          break;
      
        len -= 1;
 800a3e4:	6a3b      	ldr	r3, [r7, #32]
 800a3e6:	3b01      	subs	r3, #1
 800a3e8:	623b      	str	r3, [r7, #32]
        r->rlen = MIN(len, r->rlen);
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	695a      	ldr	r2, [r3, #20]
 800a3ee:	6a3b      	ldr	r3, [r7, #32]
 800a3f0:	429a      	cmp	r2, r3
 800a3f2:	bf28      	it	cs
 800a3f4:	461a      	movcs	r2, r3
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	615a      	str	r2, [r3, #20]
        BLUENRG_memcpy(r->rparam, me->data, r->rlen);
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	6918      	ldr	r0, [r3, #16]
 800a3fe:	69fb      	ldr	r3, [r7, #28]
 800a400:	1c59      	adds	r1, r3, #1
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	695b      	ldr	r3, [r3, #20]
 800a406:	461a      	mov	r2, r3
 800a408:	f001 fa57 	bl	800b8ba <memcpy>
        goto done;
 800a40c:	e03a      	b.n	800a484 <hci_send_req+0x208>
      
      case EVT_HARDWARE_ERROR:            
        goto failed;
      
      default:      
        break;
 800a40e:	bf00      	nop
 800a410:	e002      	b.n	800a418 <hci_send_req+0x19c>
          break;
 800a412:	bf00      	nop
 800a414:	e000      	b.n	800a418 <hci_send_req+0x19c>
          break;
 800a416:	bf00      	nop
    
    /* If there are no more packets to be processed, be sure there is at list one
       packet in the pool to process the expected event.
       If no free packets are available, discard the processed event and insert it
       into the pool. */
    if (list_is_empty(&hciReadPktPool) && list_is_empty(&hciReadPktRxQueue)) {
 800a418:	4823      	ldr	r0, [pc, #140]	@ (800a4a8 <hci_send_req+0x22c>)
 800a41a:	f000 f8d1 	bl	800a5c0 <list_is_empty>
 800a41e:	4603      	mov	r3, r0
 800a420:	2b00      	cmp	r3, #0
 800a422:	d00d      	beq.n	800a440 <hci_send_req+0x1c4>
 800a424:	481f      	ldr	r0, [pc, #124]	@ (800a4a4 <hci_send_req+0x228>)
 800a426:	f000 f8cb 	bl	800a5c0 <list_is_empty>
 800a42a:	4603      	mov	r3, r0
 800a42c:	2b00      	cmp	r3, #0
 800a42e:	d007      	beq.n	800a440 <hci_send_req+0x1c4>
      list_insert_tail(&hciReadPktPool, (tListNode *)hciReadPacket);
 800a430:	693b      	ldr	r3, [r7, #16]
 800a432:	4619      	mov	r1, r3
 800a434:	481c      	ldr	r0, [pc, #112]	@ (800a4a8 <hci_send_req+0x22c>)
 800a436:	f000 f90b 	bl	800a650 <list_insert_tail>
      hciReadPacket=NULL;
 800a43a:	2300      	movs	r3, #0
 800a43c:	613b      	str	r3, [r7, #16]
 800a43e:	e008      	b.n	800a452 <hci_send_req+0x1d6>
    else {
      /* Insert the packet in a different queue. These packets will be
      inserted back in the main queue just before exiting from send_req(), so that
      these events can be processed by the application.
    */
    list_insert_tail(&hciTempQueue, (tListNode *)hciReadPacket);
 800a440:	693a      	ldr	r2, [r7, #16]
 800a442:	f107 0308 	add.w	r3, r7, #8
 800a446:	4611      	mov	r1, r2
 800a448:	4618      	mov	r0, r3
 800a44a:	f000 f901 	bl	800a650 <list_insert_tail>
      hciReadPacket=NULL;
 800a44e:	2300      	movs	r3, #0
 800a450:	613b      	str	r3, [r7, #16]
  {
 800a452:	e740      	b.n	800a2d6 <hci_send_req+0x5a>
        goto failed;
 800a454:	bf00      	nop
 800a456:	e004      	b.n	800a462 <hci_send_req+0x1e6>
        goto failed;
 800a458:	bf00      	nop
 800a45a:	e002      	b.n	800a462 <hci_send_req+0x1e6>
          goto failed;
 800a45c:	bf00      	nop
 800a45e:	e000      	b.n	800a462 <hci_send_req+0x1e6>
          goto failed;
 800a460:	bf00      	nop
    }
  }
  
failed: 
  if (hciReadPacket!=NULL) {
 800a462:	693b      	ldr	r3, [r7, #16]
 800a464:	2b00      	cmp	r3, #0
 800a466:	d004      	beq.n	800a472 <hci_send_req+0x1f6>
    list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket);
 800a468:	693b      	ldr	r3, [r7, #16]
 800a46a:	4619      	mov	r1, r3
 800a46c:	480e      	ldr	r0, [pc, #56]	@ (800a4a8 <hci_send_req+0x22c>)
 800a46e:	f000 f8c9 	bl	800a604 <list_insert_head>
  }
  move_list(&hciReadPktRxQueue, &hciTempQueue);
 800a472:	f107 0308 	add.w	r3, r7, #8
 800a476:	4619      	mov	r1, r3
 800a478:	480a      	ldr	r0, [pc, #40]	@ (800a4a4 <hci_send_req+0x228>)
 800a47a:	f7ff fe63 	bl	800a144 <move_list>

  return -1;
 800a47e:	f04f 33ff 	mov.w	r3, #4294967295
 800a482:	e00b      	b.n	800a49c <hci_send_req+0x220>
  
done:
  /* Insert the packet back into the pool.*/
  list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket); 
 800a484:	693b      	ldr	r3, [r7, #16]
 800a486:	4619      	mov	r1, r3
 800a488:	4807      	ldr	r0, [pc, #28]	@ (800a4a8 <hci_send_req+0x22c>)
 800a48a:	f000 f8bb 	bl	800a604 <list_insert_head>
  move_list(&hciReadPktRxQueue, &hciTempQueue);
 800a48e:	f107 0308 	add.w	r3, r7, #8
 800a492:	4619      	mov	r1, r3
 800a494:	4803      	ldr	r0, [pc, #12]	@ (800a4a4 <hci_send_req+0x228>)
 800a496:	f7ff fe55 	bl	800a144 <move_list>

  return 0;
 800a49a:	2300      	movs	r3, #0
}
 800a49c:	4618      	mov	r0, r3
 800a49e:	3738      	adds	r7, #56	@ 0x38
 800a4a0:	46bd      	mov	sp, r7
 800a4a2:	bd80      	pop	{r7, pc}
 800a4a4:	20000b90 	.word	0x20000b90
 800a4a8:	20000b88 	.word	0x20000b88

0800a4ac <hci_user_evt_proc>:

void hci_user_evt_proc(void)
{
 800a4ac:	b580      	push	{r7, lr}
 800a4ae:	b082      	sub	sp, #8
 800a4b0:	af00      	add	r7, sp, #0
  tHciDataPacket * hciReadPacket = NULL;
 800a4b2:	2300      	movs	r3, #0
 800a4b4:	607b      	str	r3, [r7, #4]
     
  /* process any pending events read */
  while (list_is_empty(&hciReadPktRxQueue) == FALSE)
 800a4b6:	e013      	b.n	800a4e0 <hci_user_evt_proc+0x34>
  {
    list_remove_head (&hciReadPktRxQueue, (tListNode **)&hciReadPacket);
 800a4b8:	1d3b      	adds	r3, r7, #4
 800a4ba:	4619      	mov	r1, r3
 800a4bc:	480e      	ldr	r0, [pc, #56]	@ (800a4f8 <hci_user_evt_proc+0x4c>)
 800a4be:	f000 f90e 	bl	800a6de <list_remove_head>

    if (hciContext.UserEvtRx != NULL)
 800a4c2:	4b0e      	ldr	r3, [pc, #56]	@ (800a4fc <hci_user_evt_proc+0x50>)
 800a4c4:	69db      	ldr	r3, [r3, #28]
 800a4c6:	2b00      	cmp	r3, #0
 800a4c8:	d005      	beq.n	800a4d6 <hci_user_evt_proc+0x2a>
    {
      hciContext.UserEvtRx(hciReadPacket->dataBuff);
 800a4ca:	4b0c      	ldr	r3, [pc, #48]	@ (800a4fc <hci_user_evt_proc+0x50>)
 800a4cc:	69db      	ldr	r3, [r3, #28]
 800a4ce:	687a      	ldr	r2, [r7, #4]
 800a4d0:	3208      	adds	r2, #8
 800a4d2:	4610      	mov	r0, r2
 800a4d4:	4798      	blx	r3
    }

    list_insert_tail(&hciReadPktPool, (tListNode *)hciReadPacket);
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	4619      	mov	r1, r3
 800a4da:	4809      	ldr	r0, [pc, #36]	@ (800a500 <hci_user_evt_proc+0x54>)
 800a4dc:	f000 f8b8 	bl	800a650 <list_insert_tail>
  while (list_is_empty(&hciReadPktRxQueue) == FALSE)
 800a4e0:	4805      	ldr	r0, [pc, #20]	@ (800a4f8 <hci_user_evt_proc+0x4c>)
 800a4e2:	f000 f86d 	bl	800a5c0 <list_is_empty>
 800a4e6:	4603      	mov	r3, r0
 800a4e8:	2b00      	cmp	r3, #0
 800a4ea:	d0e5      	beq.n	800a4b8 <hci_user_evt_proc+0xc>
  }
}
 800a4ec:	bf00      	nop
 800a4ee:	bf00      	nop
 800a4f0:	3708      	adds	r7, #8
 800a4f2:	46bd      	mov	sp, r7
 800a4f4:	bd80      	pop	{r7, pc}
 800a4f6:	bf00      	nop
 800a4f8:	20000b90 	.word	0x20000b90
 800a4fc:	20000e54 	.word	0x20000e54
 800a500:	20000b88 	.word	0x20000b88

0800a504 <hci_notify_asynch_evt>:

int32_t hci_notify_asynch_evt(void* pdata)
{
 800a504:	b580      	push	{r7, lr}
 800a506:	b086      	sub	sp, #24
 800a508:	af00      	add	r7, sp, #0
 800a50a:	6078      	str	r0, [r7, #4]
  tHciDataPacket * hciReadPacket = NULL;
 800a50c:	2300      	movs	r3, #0
 800a50e:	60fb      	str	r3, [r7, #12]
  uint8_t data_len;
  
  int32_t ret = 0;
 800a510:	2300      	movs	r3, #0
 800a512:	617b      	str	r3, [r7, #20]
  
  if (list_is_empty (&hciReadPktPool) == FALSE)
 800a514:	481f      	ldr	r0, [pc, #124]	@ (800a594 <hci_notify_asynch_evt+0x90>)
 800a516:	f000 f853 	bl	800a5c0 <list_is_empty>
 800a51a:	4603      	mov	r3, r0
 800a51c:	2b00      	cmp	r3, #0
 800a51e:	d132      	bne.n	800a586 <hci_notify_asynch_evt+0x82>
  {
    /* Queuing a packet to read */
    list_remove_head (&hciReadPktPool, (tListNode **)&hciReadPacket);
 800a520:	f107 030c 	add.w	r3, r7, #12
 800a524:	4619      	mov	r1, r3
 800a526:	481b      	ldr	r0, [pc, #108]	@ (800a594 <hci_notify_asynch_evt+0x90>)
 800a528:	f000 f8d9 	bl	800a6de <list_remove_head>
    
    if (hciContext.io.Receive)
 800a52c:	4b1a      	ldr	r3, [pc, #104]	@ (800a598 <hci_notify_asynch_evt+0x94>)
 800a52e:	68db      	ldr	r3, [r3, #12]
 800a530:	2b00      	cmp	r3, #0
 800a532:	d02a      	beq.n	800a58a <hci_notify_asynch_evt+0x86>
    {
      data_len = hciContext.io.Receive(hciReadPacket->dataBuff, HCI_READ_PACKET_SIZE);
 800a534:	4b18      	ldr	r3, [pc, #96]	@ (800a598 <hci_notify_asynch_evt+0x94>)
 800a536:	68db      	ldr	r3, [r3, #12]
 800a538:	68fa      	ldr	r2, [r7, #12]
 800a53a:	3208      	adds	r2, #8
 800a53c:	2180      	movs	r1, #128	@ 0x80
 800a53e:	4610      	mov	r0, r2
 800a540:	4798      	blx	r3
 800a542:	4603      	mov	r3, r0
 800a544:	74fb      	strb	r3, [r7, #19]
      if (data_len > 0)
 800a546:	7cfb      	ldrb	r3, [r7, #19]
 800a548:	2b00      	cmp	r3, #0
 800a54a:	d016      	beq.n	800a57a <hci_notify_asynch_evt+0x76>
      {                    
        hciReadPacket->data_len = data_len;
 800a54c:	68fb      	ldr	r3, [r7, #12]
 800a54e:	7cfa      	ldrb	r2, [r7, #19]
 800a550:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88
        if (verify_packet(hciReadPacket) == 0)
 800a554:	68fb      	ldr	r3, [r7, #12]
 800a556:	4618      	mov	r0, r3
 800a558:	f7ff fd92 	bl	800a080 <verify_packet>
 800a55c:	4603      	mov	r3, r0
 800a55e:	2b00      	cmp	r3, #0
 800a560:	d105      	bne.n	800a56e <hci_notify_asynch_evt+0x6a>
          list_insert_tail(&hciReadPktRxQueue, (tListNode *)hciReadPacket);
 800a562:	68fb      	ldr	r3, [r7, #12]
 800a564:	4619      	mov	r1, r3
 800a566:	480d      	ldr	r0, [pc, #52]	@ (800a59c <hci_notify_asynch_evt+0x98>)
 800a568:	f000 f872 	bl	800a650 <list_insert_tail>
 800a56c:	e00d      	b.n	800a58a <hci_notify_asynch_evt+0x86>
        else
          list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket);          
 800a56e:	68fb      	ldr	r3, [r7, #12]
 800a570:	4619      	mov	r1, r3
 800a572:	4808      	ldr	r0, [pc, #32]	@ (800a594 <hci_notify_asynch_evt+0x90>)
 800a574:	f000 f846 	bl	800a604 <list_insert_head>
 800a578:	e007      	b.n	800a58a <hci_notify_asynch_evt+0x86>
      }
      else 
      {
        /* Insert the packet back into the pool*/
        list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket);
 800a57a:	68fb      	ldr	r3, [r7, #12]
 800a57c:	4619      	mov	r1, r3
 800a57e:	4805      	ldr	r0, [pc, #20]	@ (800a594 <hci_notify_asynch_evt+0x90>)
 800a580:	f000 f840 	bl	800a604 <list_insert_head>
 800a584:	e001      	b.n	800a58a <hci_notify_asynch_evt+0x86>
      }
    }
  }
  else 
  {
    ret = 1;
 800a586:	2301      	movs	r3, #1
 800a588:	617b      	str	r3, [r7, #20]
  }
  return ret;
 800a58a:	697b      	ldr	r3, [r7, #20]

}
 800a58c:	4618      	mov	r0, r3
 800a58e:	3718      	adds	r7, #24
 800a590:	46bd      	mov	sp, r7
 800a592:	bd80      	pop	{r7, pc}
 800a594:	20000b88 	.word	0x20000b88
 800a598:	20000e54 	.word	0x20000e54
 800a59c:	20000b90 	.word	0x20000b90

0800a5a0 <list_init_head>:

/******************************************************************************
 * Function Definitions 
******************************************************************************/
void list_init_head (tListNode * listHead)
{
 800a5a0:	b480      	push	{r7}
 800a5a2:	b083      	sub	sp, #12
 800a5a4:	af00      	add	r7, sp, #0
 800a5a6:	6078      	str	r0, [r7, #4]
  listHead->next = listHead;
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	687a      	ldr	r2, [r7, #4]
 800a5ac:	601a      	str	r2, [r3, #0]
  listHead->prev = listHead;	
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	687a      	ldr	r2, [r7, #4]
 800a5b2:	605a      	str	r2, [r3, #4]
}
 800a5b4:	bf00      	nop
 800a5b6:	370c      	adds	r7, #12
 800a5b8:	46bd      	mov	sp, r7
 800a5ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5be:	4770      	bx	lr

0800a5c0 <list_is_empty>:

uint8_t list_is_empty (tListNode * listHead)
{
 800a5c0:	b480      	push	{r7}
 800a5c2:	b087      	sub	sp, #28
 800a5c4:	af00      	add	r7, sp, #0
 800a5c6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a5c8:	f3ef 8310 	mrs	r3, PRIMASK
 800a5cc:	60fb      	str	r3, [r7, #12]
  return(result);
 800a5ce:	68fb      	ldr	r3, [r7, #12]
  uint8_t return_value;
  
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800a5d0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800a5d2:	b672      	cpsid	i
}
 800a5d4:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
   
  if(listHead->next == listHead)
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	681b      	ldr	r3, [r3, #0]
 800a5da:	687a      	ldr	r2, [r7, #4]
 800a5dc:	429a      	cmp	r2, r3
 800a5de:	d102      	bne.n	800a5e6 <list_is_empty+0x26>
  {
    return_value = 1;
 800a5e0:	2301      	movs	r3, #1
 800a5e2:	75fb      	strb	r3, [r7, #23]
 800a5e4:	e001      	b.n	800a5ea <list_is_empty+0x2a>
  }
  else
  {
    return_value = 0;
 800a5e6:	2300      	movs	r3, #0
 800a5e8:	75fb      	strb	r3, [r7, #23]
 800a5ea:	693b      	ldr	r3, [r7, #16]
 800a5ec:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a5ee:	68bb      	ldr	r3, [r7, #8]
 800a5f0:	f383 8810 	msr	PRIMASK, r3
}
 800a5f4:	bf00      	nop
  }
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
  
  return return_value;
 800a5f6:	7dfb      	ldrb	r3, [r7, #23]
}
 800a5f8:	4618      	mov	r0, r3
 800a5fa:	371c      	adds	r7, #28
 800a5fc:	46bd      	mov	sp, r7
 800a5fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a602:	4770      	bx	lr

0800a604 <list_insert_head>:

void list_insert_head (tListNode * listHead, tListNode * node)
{
 800a604:	b480      	push	{r7}
 800a606:	b087      	sub	sp, #28
 800a608:	af00      	add	r7, sp, #0
 800a60a:	6078      	str	r0, [r7, #4]
 800a60c:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a60e:	f3ef 8310 	mrs	r3, PRIMASK
 800a612:	60fb      	str	r3, [r7, #12]
  return(result);
 800a614:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800a616:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800a618:	b672      	cpsid	i
}
 800a61a:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  node->next = listHead->next;
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	681a      	ldr	r2, [r3, #0]
 800a620:	683b      	ldr	r3, [r7, #0]
 800a622:	601a      	str	r2, [r3, #0]
  node->prev = listHead;
 800a624:	683b      	ldr	r3, [r7, #0]
 800a626:	687a      	ldr	r2, [r7, #4]
 800a628:	605a      	str	r2, [r3, #4]
  listHead->next = node;
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	683a      	ldr	r2, [r7, #0]
 800a62e:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node;
 800a630:	683b      	ldr	r3, [r7, #0]
 800a632:	681b      	ldr	r3, [r3, #0]
 800a634:	683a      	ldr	r2, [r7, #0]
 800a636:	605a      	str	r2, [r3, #4]
 800a638:	697b      	ldr	r3, [r7, #20]
 800a63a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a63c:	693b      	ldr	r3, [r7, #16]
 800a63e:	f383 8810 	msr	PRIMASK, r3
}
 800a642:	bf00      	nop
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 800a644:	bf00      	nop
 800a646:	371c      	adds	r7, #28
 800a648:	46bd      	mov	sp, r7
 800a64a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a64e:	4770      	bx	lr

0800a650 <list_insert_tail>:

void list_insert_tail (tListNode * listHead, tListNode * node)
{
 800a650:	b480      	push	{r7}
 800a652:	b087      	sub	sp, #28
 800a654:	af00      	add	r7, sp, #0
 800a656:	6078      	str	r0, [r7, #4]
 800a658:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a65a:	f3ef 8310 	mrs	r3, PRIMASK
 800a65e:	60fb      	str	r3, [r7, #12]
  return(result);
 800a660:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800a662:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800a664:	b672      	cpsid	i
}
 800a666:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  node->next = listHead;
 800a668:	683b      	ldr	r3, [r7, #0]
 800a66a:	687a      	ldr	r2, [r7, #4]
 800a66c:	601a      	str	r2, [r3, #0]
  node->prev = listHead->prev;
 800a66e:	687b      	ldr	r3, [r7, #4]
 800a670:	685a      	ldr	r2, [r3, #4]
 800a672:	683b      	ldr	r3, [r7, #0]
 800a674:	605a      	str	r2, [r3, #4]
  listHead->prev = node;
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	683a      	ldr	r2, [r7, #0]
 800a67a:	605a      	str	r2, [r3, #4]
  (node->prev)->next = node;
 800a67c:	683b      	ldr	r3, [r7, #0]
 800a67e:	685b      	ldr	r3, [r3, #4]
 800a680:	683a      	ldr	r2, [r7, #0]
 800a682:	601a      	str	r2, [r3, #0]
 800a684:	697b      	ldr	r3, [r7, #20]
 800a686:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a688:	693b      	ldr	r3, [r7, #16]
 800a68a:	f383 8810 	msr	PRIMASK, r3
}
 800a68e:	bf00      	nop
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 800a690:	bf00      	nop
 800a692:	371c      	adds	r7, #28
 800a694:	46bd      	mov	sp, r7
 800a696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a69a:	4770      	bx	lr

0800a69c <list_remove_node>:

void list_remove_node (tListNode * node)
{
 800a69c:	b480      	push	{r7}
 800a69e:	b087      	sub	sp, #28
 800a6a0:	af00      	add	r7, sp, #0
 800a6a2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a6a4:	f3ef 8310 	mrs	r3, PRIMASK
 800a6a8:	60fb      	str	r3, [r7, #12]
  return(result);
 800a6aa:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800a6ac:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800a6ae:	b672      	cpsid	i
}
 800a6b0:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  (node->prev)->next = node->next;
 800a6b2:	687b      	ldr	r3, [r7, #4]
 800a6b4:	685b      	ldr	r3, [r3, #4]
 800a6b6:	687a      	ldr	r2, [r7, #4]
 800a6b8:	6812      	ldr	r2, [r2, #0]
 800a6ba:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node->prev;
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	681b      	ldr	r3, [r3, #0]
 800a6c0:	687a      	ldr	r2, [r7, #4]
 800a6c2:	6852      	ldr	r2, [r2, #4]
 800a6c4:	605a      	str	r2, [r3, #4]
 800a6c6:	697b      	ldr	r3, [r7, #20]
 800a6c8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a6ca:	693b      	ldr	r3, [r7, #16]
 800a6cc:	f383 8810 	msr	PRIMASK, r3
}
 800a6d0:	bf00      	nop
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 800a6d2:	bf00      	nop
 800a6d4:	371c      	adds	r7, #28
 800a6d6:	46bd      	mov	sp, r7
 800a6d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6dc:	4770      	bx	lr

0800a6de <list_remove_head>:

void list_remove_head (tListNode * listHead, tListNode ** node )
{
 800a6de:	b580      	push	{r7, lr}
 800a6e0:	b086      	sub	sp, #24
 800a6e2:	af00      	add	r7, sp, #0
 800a6e4:	6078      	str	r0, [r7, #4]
 800a6e6:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a6e8:	f3ef 8310 	mrs	r3, PRIMASK
 800a6ec:	60fb      	str	r3, [r7, #12]
  return(result);
 800a6ee:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800a6f0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800a6f2:	b672      	cpsid	i
}
 800a6f4:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  *node = listHead->next;
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	681a      	ldr	r2, [r3, #0]
 800a6fa:	683b      	ldr	r3, [r7, #0]
 800a6fc:	601a      	str	r2, [r3, #0]
  list_remove_node (listHead->next);
 800a6fe:	687b      	ldr	r3, [r7, #4]
 800a700:	681b      	ldr	r3, [r3, #0]
 800a702:	4618      	mov	r0, r3
 800a704:	f7ff ffca 	bl	800a69c <list_remove_node>
  (*node)->next = NULL;
 800a708:	683b      	ldr	r3, [r7, #0]
 800a70a:	681b      	ldr	r3, [r3, #0]
 800a70c:	2200      	movs	r2, #0
 800a70e:	601a      	str	r2, [r3, #0]
  (*node)->prev = NULL;
 800a710:	683b      	ldr	r3, [r7, #0]
 800a712:	681b      	ldr	r3, [r3, #0]
 800a714:	2200      	movs	r2, #0
 800a716:	605a      	str	r2, [r3, #4]
 800a718:	697b      	ldr	r3, [r7, #20]
 800a71a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a71c:	693b      	ldr	r3, [r7, #16]
 800a71e:	f383 8810 	msr	PRIMASK, r3
}
 800a722:	bf00      	nop
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 800a724:	bf00      	nop
 800a726:	3718      	adds	r7, #24
 800a728:	46bd      	mov	sp, r7
 800a72a:	bd80      	pop	{r7, pc}

0800a72c <list_remove_tail>:

void list_remove_tail (tListNode * listHead, tListNode ** node )
{
 800a72c:	b580      	push	{r7, lr}
 800a72e:	b086      	sub	sp, #24
 800a730:	af00      	add	r7, sp, #0
 800a732:	6078      	str	r0, [r7, #4]
 800a734:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a736:	f3ef 8310 	mrs	r3, PRIMASK
 800a73a:	60fb      	str	r3, [r7, #12]
  return(result);
 800a73c:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800a73e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800a740:	b672      	cpsid	i
}
 800a742:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  *node = listHead->prev;
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	685a      	ldr	r2, [r3, #4]
 800a748:	683b      	ldr	r3, [r7, #0]
 800a74a:	601a      	str	r2, [r3, #0]
  list_remove_node (listHead->prev);
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	685b      	ldr	r3, [r3, #4]
 800a750:	4618      	mov	r0, r3
 800a752:	f7ff ffa3 	bl	800a69c <list_remove_node>
  (*node)->next = NULL;
 800a756:	683b      	ldr	r3, [r7, #0]
 800a758:	681b      	ldr	r3, [r3, #0]
 800a75a:	2200      	movs	r2, #0
 800a75c:	601a      	str	r2, [r3, #0]
  (*node)->prev = NULL;
 800a75e:	683b      	ldr	r3, [r7, #0]
 800a760:	681b      	ldr	r3, [r3, #0]
 800a762:	2200      	movs	r2, #0
 800a764:	605a      	str	r2, [r3, #4]
 800a766:	697b      	ldr	r3, [r7, #20]
 800a768:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a76a:	693b      	ldr	r3, [r7, #16]
 800a76c:	f383 8810 	msr	PRIMASK, r3
}
 800a770:	bf00      	nop
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 800a772:	bf00      	nop
 800a774:	3718      	adds	r7, #24
 800a776:	46bd      	mov	sp, r7
 800a778:	bd80      	pop	{r7, pc}

0800a77a <list_get_size>:
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}

int list_get_size (tListNode * listHead)
{
 800a77a:	b480      	push	{r7}
 800a77c:	b089      	sub	sp, #36	@ 0x24
 800a77e:	af00      	add	r7, sp, #0
 800a780:	6078      	str	r0, [r7, #4]
  int size = 0;
 800a782:	2300      	movs	r3, #0
 800a784:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a786:	f3ef 8310 	mrs	r3, PRIMASK
 800a78a:	613b      	str	r3, [r7, #16]
  return(result);
 800a78c:	693b      	ldr	r3, [r7, #16]
  tListNode * temp;

  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800a78e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800a790:	b672      	cpsid	i
}
 800a792:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  temp = listHead->next;
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	681b      	ldr	r3, [r3, #0]
 800a798:	61bb      	str	r3, [r7, #24]
  while (temp != listHead)
 800a79a:	e005      	b.n	800a7a8 <list_get_size+0x2e>
  {
    size++;
 800a79c:	69fb      	ldr	r3, [r7, #28]
 800a79e:	3301      	adds	r3, #1
 800a7a0:	61fb      	str	r3, [r7, #28]
    temp = temp->next;		
 800a7a2:	69bb      	ldr	r3, [r7, #24]
 800a7a4:	681b      	ldr	r3, [r3, #0]
 800a7a6:	61bb      	str	r3, [r7, #24]
  while (temp != listHead)
 800a7a8:	69ba      	ldr	r2, [r7, #24]
 800a7aa:	687b      	ldr	r3, [r7, #4]
 800a7ac:	429a      	cmp	r2, r3
 800a7ae:	d1f5      	bne.n	800a79c <list_get_size+0x22>
 800a7b0:	697b      	ldr	r3, [r7, #20]
 800a7b2:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a7b4:	68fb      	ldr	r3, [r7, #12]
 800a7b6:	f383 8810 	msr	PRIMASK, r3
}
 800a7ba:	bf00      	nop
  }
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
  
  return (size);
 800a7bc:	69fb      	ldr	r3, [r7, #28]
}
 800a7be:	4618      	mov	r0, r3
 800a7c0:	3724      	adds	r7, #36	@ 0x24
 800a7c2:	46bd      	mov	sp, r7
 800a7c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7c8:	4770      	bx	lr
	...

0800a7cc <srand>:
 800a7cc:	b538      	push	{r3, r4, r5, lr}
 800a7ce:	4b10      	ldr	r3, [pc, #64]	@ (800a810 <srand+0x44>)
 800a7d0:	681d      	ldr	r5, [r3, #0]
 800a7d2:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 800a7d4:	4604      	mov	r4, r0
 800a7d6:	b9b3      	cbnz	r3, 800a806 <srand+0x3a>
 800a7d8:	2018      	movs	r0, #24
 800a7da:	f001 ff43 	bl	800c664 <malloc>
 800a7de:	4602      	mov	r2, r0
 800a7e0:	6328      	str	r0, [r5, #48]	@ 0x30
 800a7e2:	b920      	cbnz	r0, 800a7ee <srand+0x22>
 800a7e4:	4b0b      	ldr	r3, [pc, #44]	@ (800a814 <srand+0x48>)
 800a7e6:	480c      	ldr	r0, [pc, #48]	@ (800a818 <srand+0x4c>)
 800a7e8:	2146      	movs	r1, #70	@ 0x46
 800a7ea:	f001 f87b 	bl	800b8e4 <__assert_func>
 800a7ee:	490b      	ldr	r1, [pc, #44]	@ (800a81c <srand+0x50>)
 800a7f0:	4b0b      	ldr	r3, [pc, #44]	@ (800a820 <srand+0x54>)
 800a7f2:	e9c0 1300 	strd	r1, r3, [r0]
 800a7f6:	4b0b      	ldr	r3, [pc, #44]	@ (800a824 <srand+0x58>)
 800a7f8:	6083      	str	r3, [r0, #8]
 800a7fa:	230b      	movs	r3, #11
 800a7fc:	8183      	strh	r3, [r0, #12]
 800a7fe:	2100      	movs	r1, #0
 800a800:	2001      	movs	r0, #1
 800a802:	e9c2 0104 	strd	r0, r1, [r2, #16]
 800a806:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 800a808:	2200      	movs	r2, #0
 800a80a:	611c      	str	r4, [r3, #16]
 800a80c:	615a      	str	r2, [r3, #20]
 800a80e:	bd38      	pop	{r3, r4, r5, pc}
 800a810:	20000064 	.word	0x20000064
 800a814:	0800eff4 	.word	0x0800eff4
 800a818:	0800f00b 	.word	0x0800f00b
 800a81c:	abcd330e 	.word	0xabcd330e
 800a820:	e66d1234 	.word	0xe66d1234
 800a824:	0005deec 	.word	0x0005deec

0800a828 <rand>:
 800a828:	4b16      	ldr	r3, [pc, #88]	@ (800a884 <rand+0x5c>)
 800a82a:	b510      	push	{r4, lr}
 800a82c:	681c      	ldr	r4, [r3, #0]
 800a82e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800a830:	b9b3      	cbnz	r3, 800a860 <rand+0x38>
 800a832:	2018      	movs	r0, #24
 800a834:	f001 ff16 	bl	800c664 <malloc>
 800a838:	4602      	mov	r2, r0
 800a83a:	6320      	str	r0, [r4, #48]	@ 0x30
 800a83c:	b920      	cbnz	r0, 800a848 <rand+0x20>
 800a83e:	4b12      	ldr	r3, [pc, #72]	@ (800a888 <rand+0x60>)
 800a840:	4812      	ldr	r0, [pc, #72]	@ (800a88c <rand+0x64>)
 800a842:	2152      	movs	r1, #82	@ 0x52
 800a844:	f001 f84e 	bl	800b8e4 <__assert_func>
 800a848:	4911      	ldr	r1, [pc, #68]	@ (800a890 <rand+0x68>)
 800a84a:	4b12      	ldr	r3, [pc, #72]	@ (800a894 <rand+0x6c>)
 800a84c:	e9c0 1300 	strd	r1, r3, [r0]
 800a850:	4b11      	ldr	r3, [pc, #68]	@ (800a898 <rand+0x70>)
 800a852:	6083      	str	r3, [r0, #8]
 800a854:	230b      	movs	r3, #11
 800a856:	8183      	strh	r3, [r0, #12]
 800a858:	2100      	movs	r1, #0
 800a85a:	2001      	movs	r0, #1
 800a85c:	e9c2 0104 	strd	r0, r1, [r2, #16]
 800a860:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800a862:	480e      	ldr	r0, [pc, #56]	@ (800a89c <rand+0x74>)
 800a864:	690b      	ldr	r3, [r1, #16]
 800a866:	694c      	ldr	r4, [r1, #20]
 800a868:	4a0d      	ldr	r2, [pc, #52]	@ (800a8a0 <rand+0x78>)
 800a86a:	4358      	muls	r0, r3
 800a86c:	fb02 0004 	mla	r0, r2, r4, r0
 800a870:	fba3 3202 	umull	r3, r2, r3, r2
 800a874:	3301      	adds	r3, #1
 800a876:	eb40 0002 	adc.w	r0, r0, r2
 800a87a:	e9c1 3004 	strd	r3, r0, [r1, #16]
 800a87e:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 800a882:	bd10      	pop	{r4, pc}
 800a884:	20000064 	.word	0x20000064
 800a888:	0800eff4 	.word	0x0800eff4
 800a88c:	0800f00b 	.word	0x0800f00b
 800a890:	abcd330e 	.word	0xabcd330e
 800a894:	e66d1234 	.word	0xe66d1234
 800a898:	0005deec 	.word	0x0005deec
 800a89c:	5851f42d 	.word	0x5851f42d
 800a8a0:	4c957f2d 	.word	0x4c957f2d

0800a8a4 <__cvt>:
 800a8a4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a8a8:	ec57 6b10 	vmov	r6, r7, d0
 800a8ac:	2f00      	cmp	r7, #0
 800a8ae:	460c      	mov	r4, r1
 800a8b0:	4619      	mov	r1, r3
 800a8b2:	463b      	mov	r3, r7
 800a8b4:	bfbb      	ittet	lt
 800a8b6:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800a8ba:	461f      	movlt	r7, r3
 800a8bc:	2300      	movge	r3, #0
 800a8be:	232d      	movlt	r3, #45	@ 0x2d
 800a8c0:	700b      	strb	r3, [r1, #0]
 800a8c2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a8c4:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800a8c8:	4691      	mov	r9, r2
 800a8ca:	f023 0820 	bic.w	r8, r3, #32
 800a8ce:	bfbc      	itt	lt
 800a8d0:	4632      	movlt	r2, r6
 800a8d2:	4616      	movlt	r6, r2
 800a8d4:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800a8d8:	d005      	beq.n	800a8e6 <__cvt+0x42>
 800a8da:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800a8de:	d100      	bne.n	800a8e2 <__cvt+0x3e>
 800a8e0:	3401      	adds	r4, #1
 800a8e2:	2102      	movs	r1, #2
 800a8e4:	e000      	b.n	800a8e8 <__cvt+0x44>
 800a8e6:	2103      	movs	r1, #3
 800a8e8:	ab03      	add	r3, sp, #12
 800a8ea:	9301      	str	r3, [sp, #4]
 800a8ec:	ab02      	add	r3, sp, #8
 800a8ee:	9300      	str	r3, [sp, #0]
 800a8f0:	ec47 6b10 	vmov	d0, r6, r7
 800a8f4:	4653      	mov	r3, sl
 800a8f6:	4622      	mov	r2, r4
 800a8f8:	f001 f89a 	bl	800ba30 <_dtoa_r>
 800a8fc:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800a900:	4605      	mov	r5, r0
 800a902:	d119      	bne.n	800a938 <__cvt+0x94>
 800a904:	f019 0f01 	tst.w	r9, #1
 800a908:	d00e      	beq.n	800a928 <__cvt+0x84>
 800a90a:	eb00 0904 	add.w	r9, r0, r4
 800a90e:	2200      	movs	r2, #0
 800a910:	2300      	movs	r3, #0
 800a912:	4630      	mov	r0, r6
 800a914:	4639      	mov	r1, r7
 800a916:	f7f6 f8d7 	bl	8000ac8 <__aeabi_dcmpeq>
 800a91a:	b108      	cbz	r0, 800a920 <__cvt+0x7c>
 800a91c:	f8cd 900c 	str.w	r9, [sp, #12]
 800a920:	2230      	movs	r2, #48	@ 0x30
 800a922:	9b03      	ldr	r3, [sp, #12]
 800a924:	454b      	cmp	r3, r9
 800a926:	d31e      	bcc.n	800a966 <__cvt+0xc2>
 800a928:	9b03      	ldr	r3, [sp, #12]
 800a92a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a92c:	1b5b      	subs	r3, r3, r5
 800a92e:	4628      	mov	r0, r5
 800a930:	6013      	str	r3, [r2, #0]
 800a932:	b004      	add	sp, #16
 800a934:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a938:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800a93c:	eb00 0904 	add.w	r9, r0, r4
 800a940:	d1e5      	bne.n	800a90e <__cvt+0x6a>
 800a942:	7803      	ldrb	r3, [r0, #0]
 800a944:	2b30      	cmp	r3, #48	@ 0x30
 800a946:	d10a      	bne.n	800a95e <__cvt+0xba>
 800a948:	2200      	movs	r2, #0
 800a94a:	2300      	movs	r3, #0
 800a94c:	4630      	mov	r0, r6
 800a94e:	4639      	mov	r1, r7
 800a950:	f7f6 f8ba 	bl	8000ac8 <__aeabi_dcmpeq>
 800a954:	b918      	cbnz	r0, 800a95e <__cvt+0xba>
 800a956:	f1c4 0401 	rsb	r4, r4, #1
 800a95a:	f8ca 4000 	str.w	r4, [sl]
 800a95e:	f8da 3000 	ldr.w	r3, [sl]
 800a962:	4499      	add	r9, r3
 800a964:	e7d3      	b.n	800a90e <__cvt+0x6a>
 800a966:	1c59      	adds	r1, r3, #1
 800a968:	9103      	str	r1, [sp, #12]
 800a96a:	701a      	strb	r2, [r3, #0]
 800a96c:	e7d9      	b.n	800a922 <__cvt+0x7e>

0800a96e <__exponent>:
 800a96e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a970:	2900      	cmp	r1, #0
 800a972:	bfba      	itte	lt
 800a974:	4249      	neglt	r1, r1
 800a976:	232d      	movlt	r3, #45	@ 0x2d
 800a978:	232b      	movge	r3, #43	@ 0x2b
 800a97a:	2909      	cmp	r1, #9
 800a97c:	7002      	strb	r2, [r0, #0]
 800a97e:	7043      	strb	r3, [r0, #1]
 800a980:	dd29      	ble.n	800a9d6 <__exponent+0x68>
 800a982:	f10d 0307 	add.w	r3, sp, #7
 800a986:	461d      	mov	r5, r3
 800a988:	270a      	movs	r7, #10
 800a98a:	461a      	mov	r2, r3
 800a98c:	fbb1 f6f7 	udiv	r6, r1, r7
 800a990:	fb07 1416 	mls	r4, r7, r6, r1
 800a994:	3430      	adds	r4, #48	@ 0x30
 800a996:	f802 4c01 	strb.w	r4, [r2, #-1]
 800a99a:	460c      	mov	r4, r1
 800a99c:	2c63      	cmp	r4, #99	@ 0x63
 800a99e:	f103 33ff 	add.w	r3, r3, #4294967295
 800a9a2:	4631      	mov	r1, r6
 800a9a4:	dcf1      	bgt.n	800a98a <__exponent+0x1c>
 800a9a6:	3130      	adds	r1, #48	@ 0x30
 800a9a8:	1e94      	subs	r4, r2, #2
 800a9aa:	f803 1c01 	strb.w	r1, [r3, #-1]
 800a9ae:	1c41      	adds	r1, r0, #1
 800a9b0:	4623      	mov	r3, r4
 800a9b2:	42ab      	cmp	r3, r5
 800a9b4:	d30a      	bcc.n	800a9cc <__exponent+0x5e>
 800a9b6:	f10d 0309 	add.w	r3, sp, #9
 800a9ba:	1a9b      	subs	r3, r3, r2
 800a9bc:	42ac      	cmp	r4, r5
 800a9be:	bf88      	it	hi
 800a9c0:	2300      	movhi	r3, #0
 800a9c2:	3302      	adds	r3, #2
 800a9c4:	4403      	add	r3, r0
 800a9c6:	1a18      	subs	r0, r3, r0
 800a9c8:	b003      	add	sp, #12
 800a9ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a9cc:	f813 6b01 	ldrb.w	r6, [r3], #1
 800a9d0:	f801 6f01 	strb.w	r6, [r1, #1]!
 800a9d4:	e7ed      	b.n	800a9b2 <__exponent+0x44>
 800a9d6:	2330      	movs	r3, #48	@ 0x30
 800a9d8:	3130      	adds	r1, #48	@ 0x30
 800a9da:	7083      	strb	r3, [r0, #2]
 800a9dc:	70c1      	strb	r1, [r0, #3]
 800a9de:	1d03      	adds	r3, r0, #4
 800a9e0:	e7f1      	b.n	800a9c6 <__exponent+0x58>
	...

0800a9e4 <_printf_float>:
 800a9e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a9e8:	b08d      	sub	sp, #52	@ 0x34
 800a9ea:	460c      	mov	r4, r1
 800a9ec:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800a9f0:	4616      	mov	r6, r2
 800a9f2:	461f      	mov	r7, r3
 800a9f4:	4605      	mov	r5, r0
 800a9f6:	f000 fee9 	bl	800b7cc <_localeconv_r>
 800a9fa:	6803      	ldr	r3, [r0, #0]
 800a9fc:	9304      	str	r3, [sp, #16]
 800a9fe:	4618      	mov	r0, r3
 800aa00:	f7f5 fc36 	bl	8000270 <strlen>
 800aa04:	2300      	movs	r3, #0
 800aa06:	930a      	str	r3, [sp, #40]	@ 0x28
 800aa08:	f8d8 3000 	ldr.w	r3, [r8]
 800aa0c:	9005      	str	r0, [sp, #20]
 800aa0e:	3307      	adds	r3, #7
 800aa10:	f023 0307 	bic.w	r3, r3, #7
 800aa14:	f103 0208 	add.w	r2, r3, #8
 800aa18:	f894 a018 	ldrb.w	sl, [r4, #24]
 800aa1c:	f8d4 b000 	ldr.w	fp, [r4]
 800aa20:	f8c8 2000 	str.w	r2, [r8]
 800aa24:	e9d3 8900 	ldrd	r8, r9, [r3]
 800aa28:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800aa2c:	9307      	str	r3, [sp, #28]
 800aa2e:	f8cd 8018 	str.w	r8, [sp, #24]
 800aa32:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800aa36:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800aa3a:	4b9c      	ldr	r3, [pc, #624]	@ (800acac <_printf_float+0x2c8>)
 800aa3c:	f04f 32ff 	mov.w	r2, #4294967295
 800aa40:	f7f6 f874 	bl	8000b2c <__aeabi_dcmpun>
 800aa44:	bb70      	cbnz	r0, 800aaa4 <_printf_float+0xc0>
 800aa46:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800aa4a:	4b98      	ldr	r3, [pc, #608]	@ (800acac <_printf_float+0x2c8>)
 800aa4c:	f04f 32ff 	mov.w	r2, #4294967295
 800aa50:	f7f6 f84e 	bl	8000af0 <__aeabi_dcmple>
 800aa54:	bb30      	cbnz	r0, 800aaa4 <_printf_float+0xc0>
 800aa56:	2200      	movs	r2, #0
 800aa58:	2300      	movs	r3, #0
 800aa5a:	4640      	mov	r0, r8
 800aa5c:	4649      	mov	r1, r9
 800aa5e:	f7f6 f83d 	bl	8000adc <__aeabi_dcmplt>
 800aa62:	b110      	cbz	r0, 800aa6a <_printf_float+0x86>
 800aa64:	232d      	movs	r3, #45	@ 0x2d
 800aa66:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800aa6a:	4a91      	ldr	r2, [pc, #580]	@ (800acb0 <_printf_float+0x2cc>)
 800aa6c:	4b91      	ldr	r3, [pc, #580]	@ (800acb4 <_printf_float+0x2d0>)
 800aa6e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800aa72:	bf8c      	ite	hi
 800aa74:	4690      	movhi	r8, r2
 800aa76:	4698      	movls	r8, r3
 800aa78:	2303      	movs	r3, #3
 800aa7a:	6123      	str	r3, [r4, #16]
 800aa7c:	f02b 0304 	bic.w	r3, fp, #4
 800aa80:	6023      	str	r3, [r4, #0]
 800aa82:	f04f 0900 	mov.w	r9, #0
 800aa86:	9700      	str	r7, [sp, #0]
 800aa88:	4633      	mov	r3, r6
 800aa8a:	aa0b      	add	r2, sp, #44	@ 0x2c
 800aa8c:	4621      	mov	r1, r4
 800aa8e:	4628      	mov	r0, r5
 800aa90:	f000 f9d2 	bl	800ae38 <_printf_common>
 800aa94:	3001      	adds	r0, #1
 800aa96:	f040 808d 	bne.w	800abb4 <_printf_float+0x1d0>
 800aa9a:	f04f 30ff 	mov.w	r0, #4294967295
 800aa9e:	b00d      	add	sp, #52	@ 0x34
 800aaa0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aaa4:	4642      	mov	r2, r8
 800aaa6:	464b      	mov	r3, r9
 800aaa8:	4640      	mov	r0, r8
 800aaaa:	4649      	mov	r1, r9
 800aaac:	f7f6 f83e 	bl	8000b2c <__aeabi_dcmpun>
 800aab0:	b140      	cbz	r0, 800aac4 <_printf_float+0xe0>
 800aab2:	464b      	mov	r3, r9
 800aab4:	2b00      	cmp	r3, #0
 800aab6:	bfbc      	itt	lt
 800aab8:	232d      	movlt	r3, #45	@ 0x2d
 800aaba:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800aabe:	4a7e      	ldr	r2, [pc, #504]	@ (800acb8 <_printf_float+0x2d4>)
 800aac0:	4b7e      	ldr	r3, [pc, #504]	@ (800acbc <_printf_float+0x2d8>)
 800aac2:	e7d4      	b.n	800aa6e <_printf_float+0x8a>
 800aac4:	6863      	ldr	r3, [r4, #4]
 800aac6:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800aaca:	9206      	str	r2, [sp, #24]
 800aacc:	1c5a      	adds	r2, r3, #1
 800aace:	d13b      	bne.n	800ab48 <_printf_float+0x164>
 800aad0:	2306      	movs	r3, #6
 800aad2:	6063      	str	r3, [r4, #4]
 800aad4:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800aad8:	2300      	movs	r3, #0
 800aada:	6022      	str	r2, [r4, #0]
 800aadc:	9303      	str	r3, [sp, #12]
 800aade:	ab0a      	add	r3, sp, #40	@ 0x28
 800aae0:	e9cd a301 	strd	sl, r3, [sp, #4]
 800aae4:	ab09      	add	r3, sp, #36	@ 0x24
 800aae6:	9300      	str	r3, [sp, #0]
 800aae8:	6861      	ldr	r1, [r4, #4]
 800aaea:	ec49 8b10 	vmov	d0, r8, r9
 800aaee:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800aaf2:	4628      	mov	r0, r5
 800aaf4:	f7ff fed6 	bl	800a8a4 <__cvt>
 800aaf8:	9b06      	ldr	r3, [sp, #24]
 800aafa:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800aafc:	2b47      	cmp	r3, #71	@ 0x47
 800aafe:	4680      	mov	r8, r0
 800ab00:	d129      	bne.n	800ab56 <_printf_float+0x172>
 800ab02:	1cc8      	adds	r0, r1, #3
 800ab04:	db02      	blt.n	800ab0c <_printf_float+0x128>
 800ab06:	6863      	ldr	r3, [r4, #4]
 800ab08:	4299      	cmp	r1, r3
 800ab0a:	dd41      	ble.n	800ab90 <_printf_float+0x1ac>
 800ab0c:	f1aa 0a02 	sub.w	sl, sl, #2
 800ab10:	fa5f fa8a 	uxtb.w	sl, sl
 800ab14:	3901      	subs	r1, #1
 800ab16:	4652      	mov	r2, sl
 800ab18:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800ab1c:	9109      	str	r1, [sp, #36]	@ 0x24
 800ab1e:	f7ff ff26 	bl	800a96e <__exponent>
 800ab22:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800ab24:	1813      	adds	r3, r2, r0
 800ab26:	2a01      	cmp	r2, #1
 800ab28:	4681      	mov	r9, r0
 800ab2a:	6123      	str	r3, [r4, #16]
 800ab2c:	dc02      	bgt.n	800ab34 <_printf_float+0x150>
 800ab2e:	6822      	ldr	r2, [r4, #0]
 800ab30:	07d2      	lsls	r2, r2, #31
 800ab32:	d501      	bpl.n	800ab38 <_printf_float+0x154>
 800ab34:	3301      	adds	r3, #1
 800ab36:	6123      	str	r3, [r4, #16]
 800ab38:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800ab3c:	2b00      	cmp	r3, #0
 800ab3e:	d0a2      	beq.n	800aa86 <_printf_float+0xa2>
 800ab40:	232d      	movs	r3, #45	@ 0x2d
 800ab42:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ab46:	e79e      	b.n	800aa86 <_printf_float+0xa2>
 800ab48:	9a06      	ldr	r2, [sp, #24]
 800ab4a:	2a47      	cmp	r2, #71	@ 0x47
 800ab4c:	d1c2      	bne.n	800aad4 <_printf_float+0xf0>
 800ab4e:	2b00      	cmp	r3, #0
 800ab50:	d1c0      	bne.n	800aad4 <_printf_float+0xf0>
 800ab52:	2301      	movs	r3, #1
 800ab54:	e7bd      	b.n	800aad2 <_printf_float+0xee>
 800ab56:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800ab5a:	d9db      	bls.n	800ab14 <_printf_float+0x130>
 800ab5c:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800ab60:	d118      	bne.n	800ab94 <_printf_float+0x1b0>
 800ab62:	2900      	cmp	r1, #0
 800ab64:	6863      	ldr	r3, [r4, #4]
 800ab66:	dd0b      	ble.n	800ab80 <_printf_float+0x19c>
 800ab68:	6121      	str	r1, [r4, #16]
 800ab6a:	b913      	cbnz	r3, 800ab72 <_printf_float+0x18e>
 800ab6c:	6822      	ldr	r2, [r4, #0]
 800ab6e:	07d0      	lsls	r0, r2, #31
 800ab70:	d502      	bpl.n	800ab78 <_printf_float+0x194>
 800ab72:	3301      	adds	r3, #1
 800ab74:	440b      	add	r3, r1
 800ab76:	6123      	str	r3, [r4, #16]
 800ab78:	65a1      	str	r1, [r4, #88]	@ 0x58
 800ab7a:	f04f 0900 	mov.w	r9, #0
 800ab7e:	e7db      	b.n	800ab38 <_printf_float+0x154>
 800ab80:	b913      	cbnz	r3, 800ab88 <_printf_float+0x1a4>
 800ab82:	6822      	ldr	r2, [r4, #0]
 800ab84:	07d2      	lsls	r2, r2, #31
 800ab86:	d501      	bpl.n	800ab8c <_printf_float+0x1a8>
 800ab88:	3302      	adds	r3, #2
 800ab8a:	e7f4      	b.n	800ab76 <_printf_float+0x192>
 800ab8c:	2301      	movs	r3, #1
 800ab8e:	e7f2      	b.n	800ab76 <_printf_float+0x192>
 800ab90:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800ab94:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ab96:	4299      	cmp	r1, r3
 800ab98:	db05      	blt.n	800aba6 <_printf_float+0x1c2>
 800ab9a:	6823      	ldr	r3, [r4, #0]
 800ab9c:	6121      	str	r1, [r4, #16]
 800ab9e:	07d8      	lsls	r0, r3, #31
 800aba0:	d5ea      	bpl.n	800ab78 <_printf_float+0x194>
 800aba2:	1c4b      	adds	r3, r1, #1
 800aba4:	e7e7      	b.n	800ab76 <_printf_float+0x192>
 800aba6:	2900      	cmp	r1, #0
 800aba8:	bfd4      	ite	le
 800abaa:	f1c1 0202 	rsble	r2, r1, #2
 800abae:	2201      	movgt	r2, #1
 800abb0:	4413      	add	r3, r2
 800abb2:	e7e0      	b.n	800ab76 <_printf_float+0x192>
 800abb4:	6823      	ldr	r3, [r4, #0]
 800abb6:	055a      	lsls	r2, r3, #21
 800abb8:	d407      	bmi.n	800abca <_printf_float+0x1e6>
 800abba:	6923      	ldr	r3, [r4, #16]
 800abbc:	4642      	mov	r2, r8
 800abbe:	4631      	mov	r1, r6
 800abc0:	4628      	mov	r0, r5
 800abc2:	47b8      	blx	r7
 800abc4:	3001      	adds	r0, #1
 800abc6:	d12b      	bne.n	800ac20 <_printf_float+0x23c>
 800abc8:	e767      	b.n	800aa9a <_printf_float+0xb6>
 800abca:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800abce:	f240 80dd 	bls.w	800ad8c <_printf_float+0x3a8>
 800abd2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800abd6:	2200      	movs	r2, #0
 800abd8:	2300      	movs	r3, #0
 800abda:	f7f5 ff75 	bl	8000ac8 <__aeabi_dcmpeq>
 800abde:	2800      	cmp	r0, #0
 800abe0:	d033      	beq.n	800ac4a <_printf_float+0x266>
 800abe2:	4a37      	ldr	r2, [pc, #220]	@ (800acc0 <_printf_float+0x2dc>)
 800abe4:	2301      	movs	r3, #1
 800abe6:	4631      	mov	r1, r6
 800abe8:	4628      	mov	r0, r5
 800abea:	47b8      	blx	r7
 800abec:	3001      	adds	r0, #1
 800abee:	f43f af54 	beq.w	800aa9a <_printf_float+0xb6>
 800abf2:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800abf6:	4543      	cmp	r3, r8
 800abf8:	db02      	blt.n	800ac00 <_printf_float+0x21c>
 800abfa:	6823      	ldr	r3, [r4, #0]
 800abfc:	07d8      	lsls	r0, r3, #31
 800abfe:	d50f      	bpl.n	800ac20 <_printf_float+0x23c>
 800ac00:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ac04:	4631      	mov	r1, r6
 800ac06:	4628      	mov	r0, r5
 800ac08:	47b8      	blx	r7
 800ac0a:	3001      	adds	r0, #1
 800ac0c:	f43f af45 	beq.w	800aa9a <_printf_float+0xb6>
 800ac10:	f04f 0900 	mov.w	r9, #0
 800ac14:	f108 38ff 	add.w	r8, r8, #4294967295
 800ac18:	f104 0a1a 	add.w	sl, r4, #26
 800ac1c:	45c8      	cmp	r8, r9
 800ac1e:	dc09      	bgt.n	800ac34 <_printf_float+0x250>
 800ac20:	6823      	ldr	r3, [r4, #0]
 800ac22:	079b      	lsls	r3, r3, #30
 800ac24:	f100 8103 	bmi.w	800ae2e <_printf_float+0x44a>
 800ac28:	68e0      	ldr	r0, [r4, #12]
 800ac2a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ac2c:	4298      	cmp	r0, r3
 800ac2e:	bfb8      	it	lt
 800ac30:	4618      	movlt	r0, r3
 800ac32:	e734      	b.n	800aa9e <_printf_float+0xba>
 800ac34:	2301      	movs	r3, #1
 800ac36:	4652      	mov	r2, sl
 800ac38:	4631      	mov	r1, r6
 800ac3a:	4628      	mov	r0, r5
 800ac3c:	47b8      	blx	r7
 800ac3e:	3001      	adds	r0, #1
 800ac40:	f43f af2b 	beq.w	800aa9a <_printf_float+0xb6>
 800ac44:	f109 0901 	add.w	r9, r9, #1
 800ac48:	e7e8      	b.n	800ac1c <_printf_float+0x238>
 800ac4a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ac4c:	2b00      	cmp	r3, #0
 800ac4e:	dc39      	bgt.n	800acc4 <_printf_float+0x2e0>
 800ac50:	4a1b      	ldr	r2, [pc, #108]	@ (800acc0 <_printf_float+0x2dc>)
 800ac52:	2301      	movs	r3, #1
 800ac54:	4631      	mov	r1, r6
 800ac56:	4628      	mov	r0, r5
 800ac58:	47b8      	blx	r7
 800ac5a:	3001      	adds	r0, #1
 800ac5c:	f43f af1d 	beq.w	800aa9a <_printf_float+0xb6>
 800ac60:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800ac64:	ea59 0303 	orrs.w	r3, r9, r3
 800ac68:	d102      	bne.n	800ac70 <_printf_float+0x28c>
 800ac6a:	6823      	ldr	r3, [r4, #0]
 800ac6c:	07d9      	lsls	r1, r3, #31
 800ac6e:	d5d7      	bpl.n	800ac20 <_printf_float+0x23c>
 800ac70:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ac74:	4631      	mov	r1, r6
 800ac76:	4628      	mov	r0, r5
 800ac78:	47b8      	blx	r7
 800ac7a:	3001      	adds	r0, #1
 800ac7c:	f43f af0d 	beq.w	800aa9a <_printf_float+0xb6>
 800ac80:	f04f 0a00 	mov.w	sl, #0
 800ac84:	f104 0b1a 	add.w	fp, r4, #26
 800ac88:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ac8a:	425b      	negs	r3, r3
 800ac8c:	4553      	cmp	r3, sl
 800ac8e:	dc01      	bgt.n	800ac94 <_printf_float+0x2b0>
 800ac90:	464b      	mov	r3, r9
 800ac92:	e793      	b.n	800abbc <_printf_float+0x1d8>
 800ac94:	2301      	movs	r3, #1
 800ac96:	465a      	mov	r2, fp
 800ac98:	4631      	mov	r1, r6
 800ac9a:	4628      	mov	r0, r5
 800ac9c:	47b8      	blx	r7
 800ac9e:	3001      	adds	r0, #1
 800aca0:	f43f aefb 	beq.w	800aa9a <_printf_float+0xb6>
 800aca4:	f10a 0a01 	add.w	sl, sl, #1
 800aca8:	e7ee      	b.n	800ac88 <_printf_float+0x2a4>
 800acaa:	bf00      	nop
 800acac:	7fefffff 	.word	0x7fefffff
 800acb0:	0800f067 	.word	0x0800f067
 800acb4:	0800f063 	.word	0x0800f063
 800acb8:	0800f06f 	.word	0x0800f06f
 800acbc:	0800f06b 	.word	0x0800f06b
 800acc0:	0800f073 	.word	0x0800f073
 800acc4:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800acc6:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800acca:	4553      	cmp	r3, sl
 800accc:	bfa8      	it	ge
 800acce:	4653      	movge	r3, sl
 800acd0:	2b00      	cmp	r3, #0
 800acd2:	4699      	mov	r9, r3
 800acd4:	dc36      	bgt.n	800ad44 <_printf_float+0x360>
 800acd6:	f04f 0b00 	mov.w	fp, #0
 800acda:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800acde:	f104 021a 	add.w	r2, r4, #26
 800ace2:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800ace4:	9306      	str	r3, [sp, #24]
 800ace6:	eba3 0309 	sub.w	r3, r3, r9
 800acea:	455b      	cmp	r3, fp
 800acec:	dc31      	bgt.n	800ad52 <_printf_float+0x36e>
 800acee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800acf0:	459a      	cmp	sl, r3
 800acf2:	dc3a      	bgt.n	800ad6a <_printf_float+0x386>
 800acf4:	6823      	ldr	r3, [r4, #0]
 800acf6:	07da      	lsls	r2, r3, #31
 800acf8:	d437      	bmi.n	800ad6a <_printf_float+0x386>
 800acfa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800acfc:	ebaa 0903 	sub.w	r9, sl, r3
 800ad00:	9b06      	ldr	r3, [sp, #24]
 800ad02:	ebaa 0303 	sub.w	r3, sl, r3
 800ad06:	4599      	cmp	r9, r3
 800ad08:	bfa8      	it	ge
 800ad0a:	4699      	movge	r9, r3
 800ad0c:	f1b9 0f00 	cmp.w	r9, #0
 800ad10:	dc33      	bgt.n	800ad7a <_printf_float+0x396>
 800ad12:	f04f 0800 	mov.w	r8, #0
 800ad16:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800ad1a:	f104 0b1a 	add.w	fp, r4, #26
 800ad1e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ad20:	ebaa 0303 	sub.w	r3, sl, r3
 800ad24:	eba3 0309 	sub.w	r3, r3, r9
 800ad28:	4543      	cmp	r3, r8
 800ad2a:	f77f af79 	ble.w	800ac20 <_printf_float+0x23c>
 800ad2e:	2301      	movs	r3, #1
 800ad30:	465a      	mov	r2, fp
 800ad32:	4631      	mov	r1, r6
 800ad34:	4628      	mov	r0, r5
 800ad36:	47b8      	blx	r7
 800ad38:	3001      	adds	r0, #1
 800ad3a:	f43f aeae 	beq.w	800aa9a <_printf_float+0xb6>
 800ad3e:	f108 0801 	add.w	r8, r8, #1
 800ad42:	e7ec      	b.n	800ad1e <_printf_float+0x33a>
 800ad44:	4642      	mov	r2, r8
 800ad46:	4631      	mov	r1, r6
 800ad48:	4628      	mov	r0, r5
 800ad4a:	47b8      	blx	r7
 800ad4c:	3001      	adds	r0, #1
 800ad4e:	d1c2      	bne.n	800acd6 <_printf_float+0x2f2>
 800ad50:	e6a3      	b.n	800aa9a <_printf_float+0xb6>
 800ad52:	2301      	movs	r3, #1
 800ad54:	4631      	mov	r1, r6
 800ad56:	4628      	mov	r0, r5
 800ad58:	9206      	str	r2, [sp, #24]
 800ad5a:	47b8      	blx	r7
 800ad5c:	3001      	adds	r0, #1
 800ad5e:	f43f ae9c 	beq.w	800aa9a <_printf_float+0xb6>
 800ad62:	9a06      	ldr	r2, [sp, #24]
 800ad64:	f10b 0b01 	add.w	fp, fp, #1
 800ad68:	e7bb      	b.n	800ace2 <_printf_float+0x2fe>
 800ad6a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ad6e:	4631      	mov	r1, r6
 800ad70:	4628      	mov	r0, r5
 800ad72:	47b8      	blx	r7
 800ad74:	3001      	adds	r0, #1
 800ad76:	d1c0      	bne.n	800acfa <_printf_float+0x316>
 800ad78:	e68f      	b.n	800aa9a <_printf_float+0xb6>
 800ad7a:	9a06      	ldr	r2, [sp, #24]
 800ad7c:	464b      	mov	r3, r9
 800ad7e:	4442      	add	r2, r8
 800ad80:	4631      	mov	r1, r6
 800ad82:	4628      	mov	r0, r5
 800ad84:	47b8      	blx	r7
 800ad86:	3001      	adds	r0, #1
 800ad88:	d1c3      	bne.n	800ad12 <_printf_float+0x32e>
 800ad8a:	e686      	b.n	800aa9a <_printf_float+0xb6>
 800ad8c:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800ad90:	f1ba 0f01 	cmp.w	sl, #1
 800ad94:	dc01      	bgt.n	800ad9a <_printf_float+0x3b6>
 800ad96:	07db      	lsls	r3, r3, #31
 800ad98:	d536      	bpl.n	800ae08 <_printf_float+0x424>
 800ad9a:	2301      	movs	r3, #1
 800ad9c:	4642      	mov	r2, r8
 800ad9e:	4631      	mov	r1, r6
 800ada0:	4628      	mov	r0, r5
 800ada2:	47b8      	blx	r7
 800ada4:	3001      	adds	r0, #1
 800ada6:	f43f ae78 	beq.w	800aa9a <_printf_float+0xb6>
 800adaa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800adae:	4631      	mov	r1, r6
 800adb0:	4628      	mov	r0, r5
 800adb2:	47b8      	blx	r7
 800adb4:	3001      	adds	r0, #1
 800adb6:	f43f ae70 	beq.w	800aa9a <_printf_float+0xb6>
 800adba:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800adbe:	2200      	movs	r2, #0
 800adc0:	2300      	movs	r3, #0
 800adc2:	f10a 3aff 	add.w	sl, sl, #4294967295
 800adc6:	f7f5 fe7f 	bl	8000ac8 <__aeabi_dcmpeq>
 800adca:	b9c0      	cbnz	r0, 800adfe <_printf_float+0x41a>
 800adcc:	4653      	mov	r3, sl
 800adce:	f108 0201 	add.w	r2, r8, #1
 800add2:	4631      	mov	r1, r6
 800add4:	4628      	mov	r0, r5
 800add6:	47b8      	blx	r7
 800add8:	3001      	adds	r0, #1
 800adda:	d10c      	bne.n	800adf6 <_printf_float+0x412>
 800addc:	e65d      	b.n	800aa9a <_printf_float+0xb6>
 800adde:	2301      	movs	r3, #1
 800ade0:	465a      	mov	r2, fp
 800ade2:	4631      	mov	r1, r6
 800ade4:	4628      	mov	r0, r5
 800ade6:	47b8      	blx	r7
 800ade8:	3001      	adds	r0, #1
 800adea:	f43f ae56 	beq.w	800aa9a <_printf_float+0xb6>
 800adee:	f108 0801 	add.w	r8, r8, #1
 800adf2:	45d0      	cmp	r8, sl
 800adf4:	dbf3      	blt.n	800adde <_printf_float+0x3fa>
 800adf6:	464b      	mov	r3, r9
 800adf8:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800adfc:	e6df      	b.n	800abbe <_printf_float+0x1da>
 800adfe:	f04f 0800 	mov.w	r8, #0
 800ae02:	f104 0b1a 	add.w	fp, r4, #26
 800ae06:	e7f4      	b.n	800adf2 <_printf_float+0x40e>
 800ae08:	2301      	movs	r3, #1
 800ae0a:	4642      	mov	r2, r8
 800ae0c:	e7e1      	b.n	800add2 <_printf_float+0x3ee>
 800ae0e:	2301      	movs	r3, #1
 800ae10:	464a      	mov	r2, r9
 800ae12:	4631      	mov	r1, r6
 800ae14:	4628      	mov	r0, r5
 800ae16:	47b8      	blx	r7
 800ae18:	3001      	adds	r0, #1
 800ae1a:	f43f ae3e 	beq.w	800aa9a <_printf_float+0xb6>
 800ae1e:	f108 0801 	add.w	r8, r8, #1
 800ae22:	68e3      	ldr	r3, [r4, #12]
 800ae24:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800ae26:	1a5b      	subs	r3, r3, r1
 800ae28:	4543      	cmp	r3, r8
 800ae2a:	dcf0      	bgt.n	800ae0e <_printf_float+0x42a>
 800ae2c:	e6fc      	b.n	800ac28 <_printf_float+0x244>
 800ae2e:	f04f 0800 	mov.w	r8, #0
 800ae32:	f104 0919 	add.w	r9, r4, #25
 800ae36:	e7f4      	b.n	800ae22 <_printf_float+0x43e>

0800ae38 <_printf_common>:
 800ae38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ae3c:	4616      	mov	r6, r2
 800ae3e:	4698      	mov	r8, r3
 800ae40:	688a      	ldr	r2, [r1, #8]
 800ae42:	690b      	ldr	r3, [r1, #16]
 800ae44:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800ae48:	4293      	cmp	r3, r2
 800ae4a:	bfb8      	it	lt
 800ae4c:	4613      	movlt	r3, r2
 800ae4e:	6033      	str	r3, [r6, #0]
 800ae50:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800ae54:	4607      	mov	r7, r0
 800ae56:	460c      	mov	r4, r1
 800ae58:	b10a      	cbz	r2, 800ae5e <_printf_common+0x26>
 800ae5a:	3301      	adds	r3, #1
 800ae5c:	6033      	str	r3, [r6, #0]
 800ae5e:	6823      	ldr	r3, [r4, #0]
 800ae60:	0699      	lsls	r1, r3, #26
 800ae62:	bf42      	ittt	mi
 800ae64:	6833      	ldrmi	r3, [r6, #0]
 800ae66:	3302      	addmi	r3, #2
 800ae68:	6033      	strmi	r3, [r6, #0]
 800ae6a:	6825      	ldr	r5, [r4, #0]
 800ae6c:	f015 0506 	ands.w	r5, r5, #6
 800ae70:	d106      	bne.n	800ae80 <_printf_common+0x48>
 800ae72:	f104 0a19 	add.w	sl, r4, #25
 800ae76:	68e3      	ldr	r3, [r4, #12]
 800ae78:	6832      	ldr	r2, [r6, #0]
 800ae7a:	1a9b      	subs	r3, r3, r2
 800ae7c:	42ab      	cmp	r3, r5
 800ae7e:	dc26      	bgt.n	800aece <_printf_common+0x96>
 800ae80:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800ae84:	6822      	ldr	r2, [r4, #0]
 800ae86:	3b00      	subs	r3, #0
 800ae88:	bf18      	it	ne
 800ae8a:	2301      	movne	r3, #1
 800ae8c:	0692      	lsls	r2, r2, #26
 800ae8e:	d42b      	bmi.n	800aee8 <_printf_common+0xb0>
 800ae90:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800ae94:	4641      	mov	r1, r8
 800ae96:	4638      	mov	r0, r7
 800ae98:	47c8      	blx	r9
 800ae9a:	3001      	adds	r0, #1
 800ae9c:	d01e      	beq.n	800aedc <_printf_common+0xa4>
 800ae9e:	6823      	ldr	r3, [r4, #0]
 800aea0:	6922      	ldr	r2, [r4, #16]
 800aea2:	f003 0306 	and.w	r3, r3, #6
 800aea6:	2b04      	cmp	r3, #4
 800aea8:	bf02      	ittt	eq
 800aeaa:	68e5      	ldreq	r5, [r4, #12]
 800aeac:	6833      	ldreq	r3, [r6, #0]
 800aeae:	1aed      	subeq	r5, r5, r3
 800aeb0:	68a3      	ldr	r3, [r4, #8]
 800aeb2:	bf0c      	ite	eq
 800aeb4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800aeb8:	2500      	movne	r5, #0
 800aeba:	4293      	cmp	r3, r2
 800aebc:	bfc4      	itt	gt
 800aebe:	1a9b      	subgt	r3, r3, r2
 800aec0:	18ed      	addgt	r5, r5, r3
 800aec2:	2600      	movs	r6, #0
 800aec4:	341a      	adds	r4, #26
 800aec6:	42b5      	cmp	r5, r6
 800aec8:	d11a      	bne.n	800af00 <_printf_common+0xc8>
 800aeca:	2000      	movs	r0, #0
 800aecc:	e008      	b.n	800aee0 <_printf_common+0xa8>
 800aece:	2301      	movs	r3, #1
 800aed0:	4652      	mov	r2, sl
 800aed2:	4641      	mov	r1, r8
 800aed4:	4638      	mov	r0, r7
 800aed6:	47c8      	blx	r9
 800aed8:	3001      	adds	r0, #1
 800aeda:	d103      	bne.n	800aee4 <_printf_common+0xac>
 800aedc:	f04f 30ff 	mov.w	r0, #4294967295
 800aee0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aee4:	3501      	adds	r5, #1
 800aee6:	e7c6      	b.n	800ae76 <_printf_common+0x3e>
 800aee8:	18e1      	adds	r1, r4, r3
 800aeea:	1c5a      	adds	r2, r3, #1
 800aeec:	2030      	movs	r0, #48	@ 0x30
 800aeee:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800aef2:	4422      	add	r2, r4
 800aef4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800aef8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800aefc:	3302      	adds	r3, #2
 800aefe:	e7c7      	b.n	800ae90 <_printf_common+0x58>
 800af00:	2301      	movs	r3, #1
 800af02:	4622      	mov	r2, r4
 800af04:	4641      	mov	r1, r8
 800af06:	4638      	mov	r0, r7
 800af08:	47c8      	blx	r9
 800af0a:	3001      	adds	r0, #1
 800af0c:	d0e6      	beq.n	800aedc <_printf_common+0xa4>
 800af0e:	3601      	adds	r6, #1
 800af10:	e7d9      	b.n	800aec6 <_printf_common+0x8e>
	...

0800af14 <_printf_i>:
 800af14:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800af18:	7e0f      	ldrb	r7, [r1, #24]
 800af1a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800af1c:	2f78      	cmp	r7, #120	@ 0x78
 800af1e:	4691      	mov	r9, r2
 800af20:	4680      	mov	r8, r0
 800af22:	460c      	mov	r4, r1
 800af24:	469a      	mov	sl, r3
 800af26:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800af2a:	d807      	bhi.n	800af3c <_printf_i+0x28>
 800af2c:	2f62      	cmp	r7, #98	@ 0x62
 800af2e:	d80a      	bhi.n	800af46 <_printf_i+0x32>
 800af30:	2f00      	cmp	r7, #0
 800af32:	f000 80d1 	beq.w	800b0d8 <_printf_i+0x1c4>
 800af36:	2f58      	cmp	r7, #88	@ 0x58
 800af38:	f000 80b8 	beq.w	800b0ac <_printf_i+0x198>
 800af3c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800af40:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800af44:	e03a      	b.n	800afbc <_printf_i+0xa8>
 800af46:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800af4a:	2b15      	cmp	r3, #21
 800af4c:	d8f6      	bhi.n	800af3c <_printf_i+0x28>
 800af4e:	a101      	add	r1, pc, #4	@ (adr r1, 800af54 <_printf_i+0x40>)
 800af50:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800af54:	0800afad 	.word	0x0800afad
 800af58:	0800afc1 	.word	0x0800afc1
 800af5c:	0800af3d 	.word	0x0800af3d
 800af60:	0800af3d 	.word	0x0800af3d
 800af64:	0800af3d 	.word	0x0800af3d
 800af68:	0800af3d 	.word	0x0800af3d
 800af6c:	0800afc1 	.word	0x0800afc1
 800af70:	0800af3d 	.word	0x0800af3d
 800af74:	0800af3d 	.word	0x0800af3d
 800af78:	0800af3d 	.word	0x0800af3d
 800af7c:	0800af3d 	.word	0x0800af3d
 800af80:	0800b0bf 	.word	0x0800b0bf
 800af84:	0800afeb 	.word	0x0800afeb
 800af88:	0800b079 	.word	0x0800b079
 800af8c:	0800af3d 	.word	0x0800af3d
 800af90:	0800af3d 	.word	0x0800af3d
 800af94:	0800b0e1 	.word	0x0800b0e1
 800af98:	0800af3d 	.word	0x0800af3d
 800af9c:	0800afeb 	.word	0x0800afeb
 800afa0:	0800af3d 	.word	0x0800af3d
 800afa4:	0800af3d 	.word	0x0800af3d
 800afa8:	0800b081 	.word	0x0800b081
 800afac:	6833      	ldr	r3, [r6, #0]
 800afae:	1d1a      	adds	r2, r3, #4
 800afb0:	681b      	ldr	r3, [r3, #0]
 800afb2:	6032      	str	r2, [r6, #0]
 800afb4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800afb8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800afbc:	2301      	movs	r3, #1
 800afbe:	e09c      	b.n	800b0fa <_printf_i+0x1e6>
 800afc0:	6833      	ldr	r3, [r6, #0]
 800afc2:	6820      	ldr	r0, [r4, #0]
 800afc4:	1d19      	adds	r1, r3, #4
 800afc6:	6031      	str	r1, [r6, #0]
 800afc8:	0606      	lsls	r6, r0, #24
 800afca:	d501      	bpl.n	800afd0 <_printf_i+0xbc>
 800afcc:	681d      	ldr	r5, [r3, #0]
 800afce:	e003      	b.n	800afd8 <_printf_i+0xc4>
 800afd0:	0645      	lsls	r5, r0, #25
 800afd2:	d5fb      	bpl.n	800afcc <_printf_i+0xb8>
 800afd4:	f9b3 5000 	ldrsh.w	r5, [r3]
 800afd8:	2d00      	cmp	r5, #0
 800afda:	da03      	bge.n	800afe4 <_printf_i+0xd0>
 800afdc:	232d      	movs	r3, #45	@ 0x2d
 800afde:	426d      	negs	r5, r5
 800afe0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800afe4:	4858      	ldr	r0, [pc, #352]	@ (800b148 <_printf_i+0x234>)
 800afe6:	230a      	movs	r3, #10
 800afe8:	e011      	b.n	800b00e <_printf_i+0xfa>
 800afea:	6821      	ldr	r1, [r4, #0]
 800afec:	6833      	ldr	r3, [r6, #0]
 800afee:	0608      	lsls	r0, r1, #24
 800aff0:	f853 5b04 	ldr.w	r5, [r3], #4
 800aff4:	d402      	bmi.n	800affc <_printf_i+0xe8>
 800aff6:	0649      	lsls	r1, r1, #25
 800aff8:	bf48      	it	mi
 800affa:	b2ad      	uxthmi	r5, r5
 800affc:	2f6f      	cmp	r7, #111	@ 0x6f
 800affe:	4852      	ldr	r0, [pc, #328]	@ (800b148 <_printf_i+0x234>)
 800b000:	6033      	str	r3, [r6, #0]
 800b002:	bf14      	ite	ne
 800b004:	230a      	movne	r3, #10
 800b006:	2308      	moveq	r3, #8
 800b008:	2100      	movs	r1, #0
 800b00a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800b00e:	6866      	ldr	r6, [r4, #4]
 800b010:	60a6      	str	r6, [r4, #8]
 800b012:	2e00      	cmp	r6, #0
 800b014:	db05      	blt.n	800b022 <_printf_i+0x10e>
 800b016:	6821      	ldr	r1, [r4, #0]
 800b018:	432e      	orrs	r6, r5
 800b01a:	f021 0104 	bic.w	r1, r1, #4
 800b01e:	6021      	str	r1, [r4, #0]
 800b020:	d04b      	beq.n	800b0ba <_printf_i+0x1a6>
 800b022:	4616      	mov	r6, r2
 800b024:	fbb5 f1f3 	udiv	r1, r5, r3
 800b028:	fb03 5711 	mls	r7, r3, r1, r5
 800b02c:	5dc7      	ldrb	r7, [r0, r7]
 800b02e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800b032:	462f      	mov	r7, r5
 800b034:	42bb      	cmp	r3, r7
 800b036:	460d      	mov	r5, r1
 800b038:	d9f4      	bls.n	800b024 <_printf_i+0x110>
 800b03a:	2b08      	cmp	r3, #8
 800b03c:	d10b      	bne.n	800b056 <_printf_i+0x142>
 800b03e:	6823      	ldr	r3, [r4, #0]
 800b040:	07df      	lsls	r7, r3, #31
 800b042:	d508      	bpl.n	800b056 <_printf_i+0x142>
 800b044:	6923      	ldr	r3, [r4, #16]
 800b046:	6861      	ldr	r1, [r4, #4]
 800b048:	4299      	cmp	r1, r3
 800b04a:	bfde      	ittt	le
 800b04c:	2330      	movle	r3, #48	@ 0x30
 800b04e:	f806 3c01 	strble.w	r3, [r6, #-1]
 800b052:	f106 36ff 	addle.w	r6, r6, #4294967295
 800b056:	1b92      	subs	r2, r2, r6
 800b058:	6122      	str	r2, [r4, #16]
 800b05a:	f8cd a000 	str.w	sl, [sp]
 800b05e:	464b      	mov	r3, r9
 800b060:	aa03      	add	r2, sp, #12
 800b062:	4621      	mov	r1, r4
 800b064:	4640      	mov	r0, r8
 800b066:	f7ff fee7 	bl	800ae38 <_printf_common>
 800b06a:	3001      	adds	r0, #1
 800b06c:	d14a      	bne.n	800b104 <_printf_i+0x1f0>
 800b06e:	f04f 30ff 	mov.w	r0, #4294967295
 800b072:	b004      	add	sp, #16
 800b074:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b078:	6823      	ldr	r3, [r4, #0]
 800b07a:	f043 0320 	orr.w	r3, r3, #32
 800b07e:	6023      	str	r3, [r4, #0]
 800b080:	4832      	ldr	r0, [pc, #200]	@ (800b14c <_printf_i+0x238>)
 800b082:	2778      	movs	r7, #120	@ 0x78
 800b084:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800b088:	6823      	ldr	r3, [r4, #0]
 800b08a:	6831      	ldr	r1, [r6, #0]
 800b08c:	061f      	lsls	r7, r3, #24
 800b08e:	f851 5b04 	ldr.w	r5, [r1], #4
 800b092:	d402      	bmi.n	800b09a <_printf_i+0x186>
 800b094:	065f      	lsls	r7, r3, #25
 800b096:	bf48      	it	mi
 800b098:	b2ad      	uxthmi	r5, r5
 800b09a:	6031      	str	r1, [r6, #0]
 800b09c:	07d9      	lsls	r1, r3, #31
 800b09e:	bf44      	itt	mi
 800b0a0:	f043 0320 	orrmi.w	r3, r3, #32
 800b0a4:	6023      	strmi	r3, [r4, #0]
 800b0a6:	b11d      	cbz	r5, 800b0b0 <_printf_i+0x19c>
 800b0a8:	2310      	movs	r3, #16
 800b0aa:	e7ad      	b.n	800b008 <_printf_i+0xf4>
 800b0ac:	4826      	ldr	r0, [pc, #152]	@ (800b148 <_printf_i+0x234>)
 800b0ae:	e7e9      	b.n	800b084 <_printf_i+0x170>
 800b0b0:	6823      	ldr	r3, [r4, #0]
 800b0b2:	f023 0320 	bic.w	r3, r3, #32
 800b0b6:	6023      	str	r3, [r4, #0]
 800b0b8:	e7f6      	b.n	800b0a8 <_printf_i+0x194>
 800b0ba:	4616      	mov	r6, r2
 800b0bc:	e7bd      	b.n	800b03a <_printf_i+0x126>
 800b0be:	6833      	ldr	r3, [r6, #0]
 800b0c0:	6825      	ldr	r5, [r4, #0]
 800b0c2:	6961      	ldr	r1, [r4, #20]
 800b0c4:	1d18      	adds	r0, r3, #4
 800b0c6:	6030      	str	r0, [r6, #0]
 800b0c8:	062e      	lsls	r6, r5, #24
 800b0ca:	681b      	ldr	r3, [r3, #0]
 800b0cc:	d501      	bpl.n	800b0d2 <_printf_i+0x1be>
 800b0ce:	6019      	str	r1, [r3, #0]
 800b0d0:	e002      	b.n	800b0d8 <_printf_i+0x1c4>
 800b0d2:	0668      	lsls	r0, r5, #25
 800b0d4:	d5fb      	bpl.n	800b0ce <_printf_i+0x1ba>
 800b0d6:	8019      	strh	r1, [r3, #0]
 800b0d8:	2300      	movs	r3, #0
 800b0da:	6123      	str	r3, [r4, #16]
 800b0dc:	4616      	mov	r6, r2
 800b0de:	e7bc      	b.n	800b05a <_printf_i+0x146>
 800b0e0:	6833      	ldr	r3, [r6, #0]
 800b0e2:	1d1a      	adds	r2, r3, #4
 800b0e4:	6032      	str	r2, [r6, #0]
 800b0e6:	681e      	ldr	r6, [r3, #0]
 800b0e8:	6862      	ldr	r2, [r4, #4]
 800b0ea:	2100      	movs	r1, #0
 800b0ec:	4630      	mov	r0, r6
 800b0ee:	f7f5 f86f 	bl	80001d0 <memchr>
 800b0f2:	b108      	cbz	r0, 800b0f8 <_printf_i+0x1e4>
 800b0f4:	1b80      	subs	r0, r0, r6
 800b0f6:	6060      	str	r0, [r4, #4]
 800b0f8:	6863      	ldr	r3, [r4, #4]
 800b0fa:	6123      	str	r3, [r4, #16]
 800b0fc:	2300      	movs	r3, #0
 800b0fe:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b102:	e7aa      	b.n	800b05a <_printf_i+0x146>
 800b104:	6923      	ldr	r3, [r4, #16]
 800b106:	4632      	mov	r2, r6
 800b108:	4649      	mov	r1, r9
 800b10a:	4640      	mov	r0, r8
 800b10c:	47d0      	blx	sl
 800b10e:	3001      	adds	r0, #1
 800b110:	d0ad      	beq.n	800b06e <_printf_i+0x15a>
 800b112:	6823      	ldr	r3, [r4, #0]
 800b114:	079b      	lsls	r3, r3, #30
 800b116:	d413      	bmi.n	800b140 <_printf_i+0x22c>
 800b118:	68e0      	ldr	r0, [r4, #12]
 800b11a:	9b03      	ldr	r3, [sp, #12]
 800b11c:	4298      	cmp	r0, r3
 800b11e:	bfb8      	it	lt
 800b120:	4618      	movlt	r0, r3
 800b122:	e7a6      	b.n	800b072 <_printf_i+0x15e>
 800b124:	2301      	movs	r3, #1
 800b126:	4632      	mov	r2, r6
 800b128:	4649      	mov	r1, r9
 800b12a:	4640      	mov	r0, r8
 800b12c:	47d0      	blx	sl
 800b12e:	3001      	adds	r0, #1
 800b130:	d09d      	beq.n	800b06e <_printf_i+0x15a>
 800b132:	3501      	adds	r5, #1
 800b134:	68e3      	ldr	r3, [r4, #12]
 800b136:	9903      	ldr	r1, [sp, #12]
 800b138:	1a5b      	subs	r3, r3, r1
 800b13a:	42ab      	cmp	r3, r5
 800b13c:	dcf2      	bgt.n	800b124 <_printf_i+0x210>
 800b13e:	e7eb      	b.n	800b118 <_printf_i+0x204>
 800b140:	2500      	movs	r5, #0
 800b142:	f104 0619 	add.w	r6, r4, #25
 800b146:	e7f5      	b.n	800b134 <_printf_i+0x220>
 800b148:	0800f075 	.word	0x0800f075
 800b14c:	0800f086 	.word	0x0800f086

0800b150 <_scanf_float>:
 800b150:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b154:	b087      	sub	sp, #28
 800b156:	4691      	mov	r9, r2
 800b158:	9303      	str	r3, [sp, #12]
 800b15a:	688b      	ldr	r3, [r1, #8]
 800b15c:	1e5a      	subs	r2, r3, #1
 800b15e:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800b162:	bf81      	itttt	hi
 800b164:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800b168:	eb03 0b05 	addhi.w	fp, r3, r5
 800b16c:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800b170:	608b      	strhi	r3, [r1, #8]
 800b172:	680b      	ldr	r3, [r1, #0]
 800b174:	460a      	mov	r2, r1
 800b176:	f04f 0500 	mov.w	r5, #0
 800b17a:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800b17e:	f842 3b1c 	str.w	r3, [r2], #28
 800b182:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800b186:	4680      	mov	r8, r0
 800b188:	460c      	mov	r4, r1
 800b18a:	bf98      	it	ls
 800b18c:	f04f 0b00 	movls.w	fp, #0
 800b190:	9201      	str	r2, [sp, #4]
 800b192:	4616      	mov	r6, r2
 800b194:	46aa      	mov	sl, r5
 800b196:	462f      	mov	r7, r5
 800b198:	9502      	str	r5, [sp, #8]
 800b19a:	68a2      	ldr	r2, [r4, #8]
 800b19c:	b15a      	cbz	r2, 800b1b6 <_scanf_float+0x66>
 800b19e:	f8d9 3000 	ldr.w	r3, [r9]
 800b1a2:	781b      	ldrb	r3, [r3, #0]
 800b1a4:	2b4e      	cmp	r3, #78	@ 0x4e
 800b1a6:	d863      	bhi.n	800b270 <_scanf_float+0x120>
 800b1a8:	2b40      	cmp	r3, #64	@ 0x40
 800b1aa:	d83b      	bhi.n	800b224 <_scanf_float+0xd4>
 800b1ac:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 800b1b0:	b2c8      	uxtb	r0, r1
 800b1b2:	280e      	cmp	r0, #14
 800b1b4:	d939      	bls.n	800b22a <_scanf_float+0xda>
 800b1b6:	b11f      	cbz	r7, 800b1c0 <_scanf_float+0x70>
 800b1b8:	6823      	ldr	r3, [r4, #0]
 800b1ba:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b1be:	6023      	str	r3, [r4, #0]
 800b1c0:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b1c4:	f1ba 0f01 	cmp.w	sl, #1
 800b1c8:	f200 8114 	bhi.w	800b3f4 <_scanf_float+0x2a4>
 800b1cc:	9b01      	ldr	r3, [sp, #4]
 800b1ce:	429e      	cmp	r6, r3
 800b1d0:	f200 8105 	bhi.w	800b3de <_scanf_float+0x28e>
 800b1d4:	2001      	movs	r0, #1
 800b1d6:	b007      	add	sp, #28
 800b1d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b1dc:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800b1e0:	2a0d      	cmp	r2, #13
 800b1e2:	d8e8      	bhi.n	800b1b6 <_scanf_float+0x66>
 800b1e4:	a101      	add	r1, pc, #4	@ (adr r1, 800b1ec <_scanf_float+0x9c>)
 800b1e6:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800b1ea:	bf00      	nop
 800b1ec:	0800b335 	.word	0x0800b335
 800b1f0:	0800b1b7 	.word	0x0800b1b7
 800b1f4:	0800b1b7 	.word	0x0800b1b7
 800b1f8:	0800b1b7 	.word	0x0800b1b7
 800b1fc:	0800b391 	.word	0x0800b391
 800b200:	0800b36b 	.word	0x0800b36b
 800b204:	0800b1b7 	.word	0x0800b1b7
 800b208:	0800b1b7 	.word	0x0800b1b7
 800b20c:	0800b343 	.word	0x0800b343
 800b210:	0800b1b7 	.word	0x0800b1b7
 800b214:	0800b1b7 	.word	0x0800b1b7
 800b218:	0800b1b7 	.word	0x0800b1b7
 800b21c:	0800b1b7 	.word	0x0800b1b7
 800b220:	0800b2ff 	.word	0x0800b2ff
 800b224:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 800b228:	e7da      	b.n	800b1e0 <_scanf_float+0x90>
 800b22a:	290e      	cmp	r1, #14
 800b22c:	d8c3      	bhi.n	800b1b6 <_scanf_float+0x66>
 800b22e:	a001      	add	r0, pc, #4	@ (adr r0, 800b234 <_scanf_float+0xe4>)
 800b230:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800b234:	0800b2ef 	.word	0x0800b2ef
 800b238:	0800b1b7 	.word	0x0800b1b7
 800b23c:	0800b2ef 	.word	0x0800b2ef
 800b240:	0800b37f 	.word	0x0800b37f
 800b244:	0800b1b7 	.word	0x0800b1b7
 800b248:	0800b291 	.word	0x0800b291
 800b24c:	0800b2d5 	.word	0x0800b2d5
 800b250:	0800b2d5 	.word	0x0800b2d5
 800b254:	0800b2d5 	.word	0x0800b2d5
 800b258:	0800b2d5 	.word	0x0800b2d5
 800b25c:	0800b2d5 	.word	0x0800b2d5
 800b260:	0800b2d5 	.word	0x0800b2d5
 800b264:	0800b2d5 	.word	0x0800b2d5
 800b268:	0800b2d5 	.word	0x0800b2d5
 800b26c:	0800b2d5 	.word	0x0800b2d5
 800b270:	2b6e      	cmp	r3, #110	@ 0x6e
 800b272:	d809      	bhi.n	800b288 <_scanf_float+0x138>
 800b274:	2b60      	cmp	r3, #96	@ 0x60
 800b276:	d8b1      	bhi.n	800b1dc <_scanf_float+0x8c>
 800b278:	2b54      	cmp	r3, #84	@ 0x54
 800b27a:	d07b      	beq.n	800b374 <_scanf_float+0x224>
 800b27c:	2b59      	cmp	r3, #89	@ 0x59
 800b27e:	d19a      	bne.n	800b1b6 <_scanf_float+0x66>
 800b280:	2d07      	cmp	r5, #7
 800b282:	d198      	bne.n	800b1b6 <_scanf_float+0x66>
 800b284:	2508      	movs	r5, #8
 800b286:	e02f      	b.n	800b2e8 <_scanf_float+0x198>
 800b288:	2b74      	cmp	r3, #116	@ 0x74
 800b28a:	d073      	beq.n	800b374 <_scanf_float+0x224>
 800b28c:	2b79      	cmp	r3, #121	@ 0x79
 800b28e:	e7f6      	b.n	800b27e <_scanf_float+0x12e>
 800b290:	6821      	ldr	r1, [r4, #0]
 800b292:	05c8      	lsls	r0, r1, #23
 800b294:	d51e      	bpl.n	800b2d4 <_scanf_float+0x184>
 800b296:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800b29a:	6021      	str	r1, [r4, #0]
 800b29c:	3701      	adds	r7, #1
 800b29e:	f1bb 0f00 	cmp.w	fp, #0
 800b2a2:	d003      	beq.n	800b2ac <_scanf_float+0x15c>
 800b2a4:	3201      	adds	r2, #1
 800b2a6:	f10b 3bff 	add.w	fp, fp, #4294967295
 800b2aa:	60a2      	str	r2, [r4, #8]
 800b2ac:	68a3      	ldr	r3, [r4, #8]
 800b2ae:	3b01      	subs	r3, #1
 800b2b0:	60a3      	str	r3, [r4, #8]
 800b2b2:	6923      	ldr	r3, [r4, #16]
 800b2b4:	3301      	adds	r3, #1
 800b2b6:	6123      	str	r3, [r4, #16]
 800b2b8:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800b2bc:	3b01      	subs	r3, #1
 800b2be:	2b00      	cmp	r3, #0
 800b2c0:	f8c9 3004 	str.w	r3, [r9, #4]
 800b2c4:	f340 8082 	ble.w	800b3cc <_scanf_float+0x27c>
 800b2c8:	f8d9 3000 	ldr.w	r3, [r9]
 800b2cc:	3301      	adds	r3, #1
 800b2ce:	f8c9 3000 	str.w	r3, [r9]
 800b2d2:	e762      	b.n	800b19a <_scanf_float+0x4a>
 800b2d4:	eb1a 0105 	adds.w	r1, sl, r5
 800b2d8:	f47f af6d 	bne.w	800b1b6 <_scanf_float+0x66>
 800b2dc:	6822      	ldr	r2, [r4, #0]
 800b2de:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 800b2e2:	6022      	str	r2, [r4, #0]
 800b2e4:	460d      	mov	r5, r1
 800b2e6:	468a      	mov	sl, r1
 800b2e8:	f806 3b01 	strb.w	r3, [r6], #1
 800b2ec:	e7de      	b.n	800b2ac <_scanf_float+0x15c>
 800b2ee:	6822      	ldr	r2, [r4, #0]
 800b2f0:	0610      	lsls	r0, r2, #24
 800b2f2:	f57f af60 	bpl.w	800b1b6 <_scanf_float+0x66>
 800b2f6:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800b2fa:	6022      	str	r2, [r4, #0]
 800b2fc:	e7f4      	b.n	800b2e8 <_scanf_float+0x198>
 800b2fe:	f1ba 0f00 	cmp.w	sl, #0
 800b302:	d10c      	bne.n	800b31e <_scanf_float+0x1ce>
 800b304:	b977      	cbnz	r7, 800b324 <_scanf_float+0x1d4>
 800b306:	6822      	ldr	r2, [r4, #0]
 800b308:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800b30c:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800b310:	d108      	bne.n	800b324 <_scanf_float+0x1d4>
 800b312:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800b316:	6022      	str	r2, [r4, #0]
 800b318:	f04f 0a01 	mov.w	sl, #1
 800b31c:	e7e4      	b.n	800b2e8 <_scanf_float+0x198>
 800b31e:	f1ba 0f02 	cmp.w	sl, #2
 800b322:	d050      	beq.n	800b3c6 <_scanf_float+0x276>
 800b324:	2d01      	cmp	r5, #1
 800b326:	d002      	beq.n	800b32e <_scanf_float+0x1de>
 800b328:	2d04      	cmp	r5, #4
 800b32a:	f47f af44 	bne.w	800b1b6 <_scanf_float+0x66>
 800b32e:	3501      	adds	r5, #1
 800b330:	b2ed      	uxtb	r5, r5
 800b332:	e7d9      	b.n	800b2e8 <_scanf_float+0x198>
 800b334:	f1ba 0f01 	cmp.w	sl, #1
 800b338:	f47f af3d 	bne.w	800b1b6 <_scanf_float+0x66>
 800b33c:	f04f 0a02 	mov.w	sl, #2
 800b340:	e7d2      	b.n	800b2e8 <_scanf_float+0x198>
 800b342:	b975      	cbnz	r5, 800b362 <_scanf_float+0x212>
 800b344:	2f00      	cmp	r7, #0
 800b346:	f47f af37 	bne.w	800b1b8 <_scanf_float+0x68>
 800b34a:	6822      	ldr	r2, [r4, #0]
 800b34c:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800b350:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800b354:	f040 8103 	bne.w	800b55e <_scanf_float+0x40e>
 800b358:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800b35c:	6022      	str	r2, [r4, #0]
 800b35e:	2501      	movs	r5, #1
 800b360:	e7c2      	b.n	800b2e8 <_scanf_float+0x198>
 800b362:	2d03      	cmp	r5, #3
 800b364:	d0e3      	beq.n	800b32e <_scanf_float+0x1de>
 800b366:	2d05      	cmp	r5, #5
 800b368:	e7df      	b.n	800b32a <_scanf_float+0x1da>
 800b36a:	2d02      	cmp	r5, #2
 800b36c:	f47f af23 	bne.w	800b1b6 <_scanf_float+0x66>
 800b370:	2503      	movs	r5, #3
 800b372:	e7b9      	b.n	800b2e8 <_scanf_float+0x198>
 800b374:	2d06      	cmp	r5, #6
 800b376:	f47f af1e 	bne.w	800b1b6 <_scanf_float+0x66>
 800b37a:	2507      	movs	r5, #7
 800b37c:	e7b4      	b.n	800b2e8 <_scanf_float+0x198>
 800b37e:	6822      	ldr	r2, [r4, #0]
 800b380:	0591      	lsls	r1, r2, #22
 800b382:	f57f af18 	bpl.w	800b1b6 <_scanf_float+0x66>
 800b386:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800b38a:	6022      	str	r2, [r4, #0]
 800b38c:	9702      	str	r7, [sp, #8]
 800b38e:	e7ab      	b.n	800b2e8 <_scanf_float+0x198>
 800b390:	6822      	ldr	r2, [r4, #0]
 800b392:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 800b396:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800b39a:	d005      	beq.n	800b3a8 <_scanf_float+0x258>
 800b39c:	0550      	lsls	r0, r2, #21
 800b39e:	f57f af0a 	bpl.w	800b1b6 <_scanf_float+0x66>
 800b3a2:	2f00      	cmp	r7, #0
 800b3a4:	f000 80db 	beq.w	800b55e <_scanf_float+0x40e>
 800b3a8:	0591      	lsls	r1, r2, #22
 800b3aa:	bf58      	it	pl
 800b3ac:	9902      	ldrpl	r1, [sp, #8]
 800b3ae:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800b3b2:	bf58      	it	pl
 800b3b4:	1a79      	subpl	r1, r7, r1
 800b3b6:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800b3ba:	bf58      	it	pl
 800b3bc:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800b3c0:	6022      	str	r2, [r4, #0]
 800b3c2:	2700      	movs	r7, #0
 800b3c4:	e790      	b.n	800b2e8 <_scanf_float+0x198>
 800b3c6:	f04f 0a03 	mov.w	sl, #3
 800b3ca:	e78d      	b.n	800b2e8 <_scanf_float+0x198>
 800b3cc:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800b3d0:	4649      	mov	r1, r9
 800b3d2:	4640      	mov	r0, r8
 800b3d4:	4798      	blx	r3
 800b3d6:	2800      	cmp	r0, #0
 800b3d8:	f43f aedf 	beq.w	800b19a <_scanf_float+0x4a>
 800b3dc:	e6eb      	b.n	800b1b6 <_scanf_float+0x66>
 800b3de:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800b3e2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800b3e6:	464a      	mov	r2, r9
 800b3e8:	4640      	mov	r0, r8
 800b3ea:	4798      	blx	r3
 800b3ec:	6923      	ldr	r3, [r4, #16]
 800b3ee:	3b01      	subs	r3, #1
 800b3f0:	6123      	str	r3, [r4, #16]
 800b3f2:	e6eb      	b.n	800b1cc <_scanf_float+0x7c>
 800b3f4:	1e6b      	subs	r3, r5, #1
 800b3f6:	2b06      	cmp	r3, #6
 800b3f8:	d824      	bhi.n	800b444 <_scanf_float+0x2f4>
 800b3fa:	2d02      	cmp	r5, #2
 800b3fc:	d836      	bhi.n	800b46c <_scanf_float+0x31c>
 800b3fe:	9b01      	ldr	r3, [sp, #4]
 800b400:	429e      	cmp	r6, r3
 800b402:	f67f aee7 	bls.w	800b1d4 <_scanf_float+0x84>
 800b406:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800b40a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800b40e:	464a      	mov	r2, r9
 800b410:	4640      	mov	r0, r8
 800b412:	4798      	blx	r3
 800b414:	6923      	ldr	r3, [r4, #16]
 800b416:	3b01      	subs	r3, #1
 800b418:	6123      	str	r3, [r4, #16]
 800b41a:	e7f0      	b.n	800b3fe <_scanf_float+0x2ae>
 800b41c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800b420:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 800b424:	464a      	mov	r2, r9
 800b426:	4640      	mov	r0, r8
 800b428:	4798      	blx	r3
 800b42a:	6923      	ldr	r3, [r4, #16]
 800b42c:	3b01      	subs	r3, #1
 800b42e:	6123      	str	r3, [r4, #16]
 800b430:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b434:	fa5f fa8a 	uxtb.w	sl, sl
 800b438:	f1ba 0f02 	cmp.w	sl, #2
 800b43c:	d1ee      	bne.n	800b41c <_scanf_float+0x2cc>
 800b43e:	3d03      	subs	r5, #3
 800b440:	b2ed      	uxtb	r5, r5
 800b442:	1b76      	subs	r6, r6, r5
 800b444:	6823      	ldr	r3, [r4, #0]
 800b446:	05da      	lsls	r2, r3, #23
 800b448:	d530      	bpl.n	800b4ac <_scanf_float+0x35c>
 800b44a:	055b      	lsls	r3, r3, #21
 800b44c:	d511      	bpl.n	800b472 <_scanf_float+0x322>
 800b44e:	9b01      	ldr	r3, [sp, #4]
 800b450:	429e      	cmp	r6, r3
 800b452:	f67f aebf 	bls.w	800b1d4 <_scanf_float+0x84>
 800b456:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800b45a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800b45e:	464a      	mov	r2, r9
 800b460:	4640      	mov	r0, r8
 800b462:	4798      	blx	r3
 800b464:	6923      	ldr	r3, [r4, #16]
 800b466:	3b01      	subs	r3, #1
 800b468:	6123      	str	r3, [r4, #16]
 800b46a:	e7f0      	b.n	800b44e <_scanf_float+0x2fe>
 800b46c:	46aa      	mov	sl, r5
 800b46e:	46b3      	mov	fp, r6
 800b470:	e7de      	b.n	800b430 <_scanf_float+0x2e0>
 800b472:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800b476:	6923      	ldr	r3, [r4, #16]
 800b478:	2965      	cmp	r1, #101	@ 0x65
 800b47a:	f103 33ff 	add.w	r3, r3, #4294967295
 800b47e:	f106 35ff 	add.w	r5, r6, #4294967295
 800b482:	6123      	str	r3, [r4, #16]
 800b484:	d00c      	beq.n	800b4a0 <_scanf_float+0x350>
 800b486:	2945      	cmp	r1, #69	@ 0x45
 800b488:	d00a      	beq.n	800b4a0 <_scanf_float+0x350>
 800b48a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800b48e:	464a      	mov	r2, r9
 800b490:	4640      	mov	r0, r8
 800b492:	4798      	blx	r3
 800b494:	6923      	ldr	r3, [r4, #16]
 800b496:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800b49a:	3b01      	subs	r3, #1
 800b49c:	1eb5      	subs	r5, r6, #2
 800b49e:	6123      	str	r3, [r4, #16]
 800b4a0:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800b4a4:	464a      	mov	r2, r9
 800b4a6:	4640      	mov	r0, r8
 800b4a8:	4798      	blx	r3
 800b4aa:	462e      	mov	r6, r5
 800b4ac:	6822      	ldr	r2, [r4, #0]
 800b4ae:	f012 0210 	ands.w	r2, r2, #16
 800b4b2:	d001      	beq.n	800b4b8 <_scanf_float+0x368>
 800b4b4:	2000      	movs	r0, #0
 800b4b6:	e68e      	b.n	800b1d6 <_scanf_float+0x86>
 800b4b8:	7032      	strb	r2, [r6, #0]
 800b4ba:	6823      	ldr	r3, [r4, #0]
 800b4bc:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800b4c0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b4c4:	d125      	bne.n	800b512 <_scanf_float+0x3c2>
 800b4c6:	9b02      	ldr	r3, [sp, #8]
 800b4c8:	429f      	cmp	r7, r3
 800b4ca:	d00a      	beq.n	800b4e2 <_scanf_float+0x392>
 800b4cc:	1bda      	subs	r2, r3, r7
 800b4ce:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 800b4d2:	429e      	cmp	r6, r3
 800b4d4:	bf28      	it	cs
 800b4d6:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 800b4da:	4922      	ldr	r1, [pc, #136]	@ (800b564 <_scanf_float+0x414>)
 800b4dc:	4630      	mov	r0, r6
 800b4de:	f000 f907 	bl	800b6f0 <siprintf>
 800b4e2:	9901      	ldr	r1, [sp, #4]
 800b4e4:	2200      	movs	r2, #0
 800b4e6:	4640      	mov	r0, r8
 800b4e8:	f002 fc1e 	bl	800dd28 <_strtod_r>
 800b4ec:	9b03      	ldr	r3, [sp, #12]
 800b4ee:	6821      	ldr	r1, [r4, #0]
 800b4f0:	681b      	ldr	r3, [r3, #0]
 800b4f2:	f011 0f02 	tst.w	r1, #2
 800b4f6:	ec57 6b10 	vmov	r6, r7, d0
 800b4fa:	f103 0204 	add.w	r2, r3, #4
 800b4fe:	d015      	beq.n	800b52c <_scanf_float+0x3dc>
 800b500:	9903      	ldr	r1, [sp, #12]
 800b502:	600a      	str	r2, [r1, #0]
 800b504:	681b      	ldr	r3, [r3, #0]
 800b506:	e9c3 6700 	strd	r6, r7, [r3]
 800b50a:	68e3      	ldr	r3, [r4, #12]
 800b50c:	3301      	adds	r3, #1
 800b50e:	60e3      	str	r3, [r4, #12]
 800b510:	e7d0      	b.n	800b4b4 <_scanf_float+0x364>
 800b512:	9b04      	ldr	r3, [sp, #16]
 800b514:	2b00      	cmp	r3, #0
 800b516:	d0e4      	beq.n	800b4e2 <_scanf_float+0x392>
 800b518:	9905      	ldr	r1, [sp, #20]
 800b51a:	230a      	movs	r3, #10
 800b51c:	3101      	adds	r1, #1
 800b51e:	4640      	mov	r0, r8
 800b520:	f002 fc82 	bl	800de28 <_strtol_r>
 800b524:	9b04      	ldr	r3, [sp, #16]
 800b526:	9e05      	ldr	r6, [sp, #20]
 800b528:	1ac2      	subs	r2, r0, r3
 800b52a:	e7d0      	b.n	800b4ce <_scanf_float+0x37e>
 800b52c:	f011 0f04 	tst.w	r1, #4
 800b530:	9903      	ldr	r1, [sp, #12]
 800b532:	600a      	str	r2, [r1, #0]
 800b534:	d1e6      	bne.n	800b504 <_scanf_float+0x3b4>
 800b536:	681d      	ldr	r5, [r3, #0]
 800b538:	4632      	mov	r2, r6
 800b53a:	463b      	mov	r3, r7
 800b53c:	4630      	mov	r0, r6
 800b53e:	4639      	mov	r1, r7
 800b540:	f7f5 faf4 	bl	8000b2c <__aeabi_dcmpun>
 800b544:	b128      	cbz	r0, 800b552 <_scanf_float+0x402>
 800b546:	4808      	ldr	r0, [pc, #32]	@ (800b568 <_scanf_float+0x418>)
 800b548:	f000 f9c6 	bl	800b8d8 <nanf>
 800b54c:	ed85 0a00 	vstr	s0, [r5]
 800b550:	e7db      	b.n	800b50a <_scanf_float+0x3ba>
 800b552:	4630      	mov	r0, r6
 800b554:	4639      	mov	r1, r7
 800b556:	f7f5 fb47 	bl	8000be8 <__aeabi_d2f>
 800b55a:	6028      	str	r0, [r5, #0]
 800b55c:	e7d5      	b.n	800b50a <_scanf_float+0x3ba>
 800b55e:	2700      	movs	r7, #0
 800b560:	e62e      	b.n	800b1c0 <_scanf_float+0x70>
 800b562:	bf00      	nop
 800b564:	0800f097 	.word	0x0800f097
 800b568:	0800f0d7 	.word	0x0800f0d7

0800b56c <std>:
 800b56c:	2300      	movs	r3, #0
 800b56e:	b510      	push	{r4, lr}
 800b570:	4604      	mov	r4, r0
 800b572:	e9c0 3300 	strd	r3, r3, [r0]
 800b576:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b57a:	6083      	str	r3, [r0, #8]
 800b57c:	8181      	strh	r1, [r0, #12]
 800b57e:	6643      	str	r3, [r0, #100]	@ 0x64
 800b580:	81c2      	strh	r2, [r0, #14]
 800b582:	6183      	str	r3, [r0, #24]
 800b584:	4619      	mov	r1, r3
 800b586:	2208      	movs	r2, #8
 800b588:	305c      	adds	r0, #92	@ 0x5c
 800b58a:	f000 f916 	bl	800b7ba <memset>
 800b58e:	4b0d      	ldr	r3, [pc, #52]	@ (800b5c4 <std+0x58>)
 800b590:	6263      	str	r3, [r4, #36]	@ 0x24
 800b592:	4b0d      	ldr	r3, [pc, #52]	@ (800b5c8 <std+0x5c>)
 800b594:	62a3      	str	r3, [r4, #40]	@ 0x28
 800b596:	4b0d      	ldr	r3, [pc, #52]	@ (800b5cc <std+0x60>)
 800b598:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800b59a:	4b0d      	ldr	r3, [pc, #52]	@ (800b5d0 <std+0x64>)
 800b59c:	6323      	str	r3, [r4, #48]	@ 0x30
 800b59e:	4b0d      	ldr	r3, [pc, #52]	@ (800b5d4 <std+0x68>)
 800b5a0:	6224      	str	r4, [r4, #32]
 800b5a2:	429c      	cmp	r4, r3
 800b5a4:	d006      	beq.n	800b5b4 <std+0x48>
 800b5a6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800b5aa:	4294      	cmp	r4, r2
 800b5ac:	d002      	beq.n	800b5b4 <std+0x48>
 800b5ae:	33d0      	adds	r3, #208	@ 0xd0
 800b5b0:	429c      	cmp	r4, r3
 800b5b2:	d105      	bne.n	800b5c0 <std+0x54>
 800b5b4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800b5b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b5bc:	f000 b97a 	b.w	800b8b4 <__retarget_lock_init_recursive>
 800b5c0:	bd10      	pop	{r4, pc}
 800b5c2:	bf00      	nop
 800b5c4:	0800b735 	.word	0x0800b735
 800b5c8:	0800b757 	.word	0x0800b757
 800b5cc:	0800b78f 	.word	0x0800b78f
 800b5d0:	0800b7b3 	.word	0x0800b7b3
 800b5d4:	20000e74 	.word	0x20000e74

0800b5d8 <stdio_exit_handler>:
 800b5d8:	4a02      	ldr	r2, [pc, #8]	@ (800b5e4 <stdio_exit_handler+0xc>)
 800b5da:	4903      	ldr	r1, [pc, #12]	@ (800b5e8 <stdio_exit_handler+0x10>)
 800b5dc:	4803      	ldr	r0, [pc, #12]	@ (800b5ec <stdio_exit_handler+0x14>)
 800b5de:	f000 b869 	b.w	800b6b4 <_fwalk_sglue>
 800b5e2:	bf00      	nop
 800b5e4:	20000058 	.word	0x20000058
 800b5e8:	0800e1e5 	.word	0x0800e1e5
 800b5ec:	20000068 	.word	0x20000068

0800b5f0 <cleanup_stdio>:
 800b5f0:	6841      	ldr	r1, [r0, #4]
 800b5f2:	4b0c      	ldr	r3, [pc, #48]	@ (800b624 <cleanup_stdio+0x34>)
 800b5f4:	4299      	cmp	r1, r3
 800b5f6:	b510      	push	{r4, lr}
 800b5f8:	4604      	mov	r4, r0
 800b5fa:	d001      	beq.n	800b600 <cleanup_stdio+0x10>
 800b5fc:	f002 fdf2 	bl	800e1e4 <_fflush_r>
 800b600:	68a1      	ldr	r1, [r4, #8]
 800b602:	4b09      	ldr	r3, [pc, #36]	@ (800b628 <cleanup_stdio+0x38>)
 800b604:	4299      	cmp	r1, r3
 800b606:	d002      	beq.n	800b60e <cleanup_stdio+0x1e>
 800b608:	4620      	mov	r0, r4
 800b60a:	f002 fdeb 	bl	800e1e4 <_fflush_r>
 800b60e:	68e1      	ldr	r1, [r4, #12]
 800b610:	4b06      	ldr	r3, [pc, #24]	@ (800b62c <cleanup_stdio+0x3c>)
 800b612:	4299      	cmp	r1, r3
 800b614:	d004      	beq.n	800b620 <cleanup_stdio+0x30>
 800b616:	4620      	mov	r0, r4
 800b618:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b61c:	f002 bde2 	b.w	800e1e4 <_fflush_r>
 800b620:	bd10      	pop	{r4, pc}
 800b622:	bf00      	nop
 800b624:	20000e74 	.word	0x20000e74
 800b628:	20000edc 	.word	0x20000edc
 800b62c:	20000f44 	.word	0x20000f44

0800b630 <global_stdio_init.part.0>:
 800b630:	b510      	push	{r4, lr}
 800b632:	4b0b      	ldr	r3, [pc, #44]	@ (800b660 <global_stdio_init.part.0+0x30>)
 800b634:	4c0b      	ldr	r4, [pc, #44]	@ (800b664 <global_stdio_init.part.0+0x34>)
 800b636:	4a0c      	ldr	r2, [pc, #48]	@ (800b668 <global_stdio_init.part.0+0x38>)
 800b638:	601a      	str	r2, [r3, #0]
 800b63a:	4620      	mov	r0, r4
 800b63c:	2200      	movs	r2, #0
 800b63e:	2104      	movs	r1, #4
 800b640:	f7ff ff94 	bl	800b56c <std>
 800b644:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800b648:	2201      	movs	r2, #1
 800b64a:	2109      	movs	r1, #9
 800b64c:	f7ff ff8e 	bl	800b56c <std>
 800b650:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800b654:	2202      	movs	r2, #2
 800b656:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b65a:	2112      	movs	r1, #18
 800b65c:	f7ff bf86 	b.w	800b56c <std>
 800b660:	20000fac 	.word	0x20000fac
 800b664:	20000e74 	.word	0x20000e74
 800b668:	0800b5d9 	.word	0x0800b5d9

0800b66c <__sfp_lock_acquire>:
 800b66c:	4801      	ldr	r0, [pc, #4]	@ (800b674 <__sfp_lock_acquire+0x8>)
 800b66e:	f000 b922 	b.w	800b8b6 <__retarget_lock_acquire_recursive>
 800b672:	bf00      	nop
 800b674:	20000fb5 	.word	0x20000fb5

0800b678 <__sfp_lock_release>:
 800b678:	4801      	ldr	r0, [pc, #4]	@ (800b680 <__sfp_lock_release+0x8>)
 800b67a:	f000 b91d 	b.w	800b8b8 <__retarget_lock_release_recursive>
 800b67e:	bf00      	nop
 800b680:	20000fb5 	.word	0x20000fb5

0800b684 <__sinit>:
 800b684:	b510      	push	{r4, lr}
 800b686:	4604      	mov	r4, r0
 800b688:	f7ff fff0 	bl	800b66c <__sfp_lock_acquire>
 800b68c:	6a23      	ldr	r3, [r4, #32]
 800b68e:	b11b      	cbz	r3, 800b698 <__sinit+0x14>
 800b690:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b694:	f7ff bff0 	b.w	800b678 <__sfp_lock_release>
 800b698:	4b04      	ldr	r3, [pc, #16]	@ (800b6ac <__sinit+0x28>)
 800b69a:	6223      	str	r3, [r4, #32]
 800b69c:	4b04      	ldr	r3, [pc, #16]	@ (800b6b0 <__sinit+0x2c>)
 800b69e:	681b      	ldr	r3, [r3, #0]
 800b6a0:	2b00      	cmp	r3, #0
 800b6a2:	d1f5      	bne.n	800b690 <__sinit+0xc>
 800b6a4:	f7ff ffc4 	bl	800b630 <global_stdio_init.part.0>
 800b6a8:	e7f2      	b.n	800b690 <__sinit+0xc>
 800b6aa:	bf00      	nop
 800b6ac:	0800b5f1 	.word	0x0800b5f1
 800b6b0:	20000fac 	.word	0x20000fac

0800b6b4 <_fwalk_sglue>:
 800b6b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b6b8:	4607      	mov	r7, r0
 800b6ba:	4688      	mov	r8, r1
 800b6bc:	4614      	mov	r4, r2
 800b6be:	2600      	movs	r6, #0
 800b6c0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b6c4:	f1b9 0901 	subs.w	r9, r9, #1
 800b6c8:	d505      	bpl.n	800b6d6 <_fwalk_sglue+0x22>
 800b6ca:	6824      	ldr	r4, [r4, #0]
 800b6cc:	2c00      	cmp	r4, #0
 800b6ce:	d1f7      	bne.n	800b6c0 <_fwalk_sglue+0xc>
 800b6d0:	4630      	mov	r0, r6
 800b6d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b6d6:	89ab      	ldrh	r3, [r5, #12]
 800b6d8:	2b01      	cmp	r3, #1
 800b6da:	d907      	bls.n	800b6ec <_fwalk_sglue+0x38>
 800b6dc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b6e0:	3301      	adds	r3, #1
 800b6e2:	d003      	beq.n	800b6ec <_fwalk_sglue+0x38>
 800b6e4:	4629      	mov	r1, r5
 800b6e6:	4638      	mov	r0, r7
 800b6e8:	47c0      	blx	r8
 800b6ea:	4306      	orrs	r6, r0
 800b6ec:	3568      	adds	r5, #104	@ 0x68
 800b6ee:	e7e9      	b.n	800b6c4 <_fwalk_sglue+0x10>

0800b6f0 <siprintf>:
 800b6f0:	b40e      	push	{r1, r2, r3}
 800b6f2:	b510      	push	{r4, lr}
 800b6f4:	b09d      	sub	sp, #116	@ 0x74
 800b6f6:	ab1f      	add	r3, sp, #124	@ 0x7c
 800b6f8:	9002      	str	r0, [sp, #8]
 800b6fa:	9006      	str	r0, [sp, #24]
 800b6fc:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800b700:	480a      	ldr	r0, [pc, #40]	@ (800b72c <siprintf+0x3c>)
 800b702:	9107      	str	r1, [sp, #28]
 800b704:	9104      	str	r1, [sp, #16]
 800b706:	490a      	ldr	r1, [pc, #40]	@ (800b730 <siprintf+0x40>)
 800b708:	f853 2b04 	ldr.w	r2, [r3], #4
 800b70c:	9105      	str	r1, [sp, #20]
 800b70e:	2400      	movs	r4, #0
 800b710:	a902      	add	r1, sp, #8
 800b712:	6800      	ldr	r0, [r0, #0]
 800b714:	9301      	str	r3, [sp, #4]
 800b716:	941b      	str	r4, [sp, #108]	@ 0x6c
 800b718:	f002 fbe4 	bl	800dee4 <_svfiprintf_r>
 800b71c:	9b02      	ldr	r3, [sp, #8]
 800b71e:	701c      	strb	r4, [r3, #0]
 800b720:	b01d      	add	sp, #116	@ 0x74
 800b722:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b726:	b003      	add	sp, #12
 800b728:	4770      	bx	lr
 800b72a:	bf00      	nop
 800b72c:	20000064 	.word	0x20000064
 800b730:	ffff0208 	.word	0xffff0208

0800b734 <__sread>:
 800b734:	b510      	push	{r4, lr}
 800b736:	460c      	mov	r4, r1
 800b738:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b73c:	f000 f86c 	bl	800b818 <_read_r>
 800b740:	2800      	cmp	r0, #0
 800b742:	bfab      	itete	ge
 800b744:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800b746:	89a3      	ldrhlt	r3, [r4, #12]
 800b748:	181b      	addge	r3, r3, r0
 800b74a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800b74e:	bfac      	ite	ge
 800b750:	6563      	strge	r3, [r4, #84]	@ 0x54
 800b752:	81a3      	strhlt	r3, [r4, #12]
 800b754:	bd10      	pop	{r4, pc}

0800b756 <__swrite>:
 800b756:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b75a:	461f      	mov	r7, r3
 800b75c:	898b      	ldrh	r3, [r1, #12]
 800b75e:	05db      	lsls	r3, r3, #23
 800b760:	4605      	mov	r5, r0
 800b762:	460c      	mov	r4, r1
 800b764:	4616      	mov	r6, r2
 800b766:	d505      	bpl.n	800b774 <__swrite+0x1e>
 800b768:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b76c:	2302      	movs	r3, #2
 800b76e:	2200      	movs	r2, #0
 800b770:	f000 f840 	bl	800b7f4 <_lseek_r>
 800b774:	89a3      	ldrh	r3, [r4, #12]
 800b776:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b77a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800b77e:	81a3      	strh	r3, [r4, #12]
 800b780:	4632      	mov	r2, r6
 800b782:	463b      	mov	r3, r7
 800b784:	4628      	mov	r0, r5
 800b786:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b78a:	f000 b857 	b.w	800b83c <_write_r>

0800b78e <__sseek>:
 800b78e:	b510      	push	{r4, lr}
 800b790:	460c      	mov	r4, r1
 800b792:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b796:	f000 f82d 	bl	800b7f4 <_lseek_r>
 800b79a:	1c43      	adds	r3, r0, #1
 800b79c:	89a3      	ldrh	r3, [r4, #12]
 800b79e:	bf15      	itete	ne
 800b7a0:	6560      	strne	r0, [r4, #84]	@ 0x54
 800b7a2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800b7a6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800b7aa:	81a3      	strheq	r3, [r4, #12]
 800b7ac:	bf18      	it	ne
 800b7ae:	81a3      	strhne	r3, [r4, #12]
 800b7b0:	bd10      	pop	{r4, pc}

0800b7b2 <__sclose>:
 800b7b2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b7b6:	f000 b80d 	b.w	800b7d4 <_close_r>

0800b7ba <memset>:
 800b7ba:	4402      	add	r2, r0
 800b7bc:	4603      	mov	r3, r0
 800b7be:	4293      	cmp	r3, r2
 800b7c0:	d100      	bne.n	800b7c4 <memset+0xa>
 800b7c2:	4770      	bx	lr
 800b7c4:	f803 1b01 	strb.w	r1, [r3], #1
 800b7c8:	e7f9      	b.n	800b7be <memset+0x4>
	...

0800b7cc <_localeconv_r>:
 800b7cc:	4800      	ldr	r0, [pc, #0]	@ (800b7d0 <_localeconv_r+0x4>)
 800b7ce:	4770      	bx	lr
 800b7d0:	200001a4 	.word	0x200001a4

0800b7d4 <_close_r>:
 800b7d4:	b538      	push	{r3, r4, r5, lr}
 800b7d6:	4d06      	ldr	r5, [pc, #24]	@ (800b7f0 <_close_r+0x1c>)
 800b7d8:	2300      	movs	r3, #0
 800b7da:	4604      	mov	r4, r0
 800b7dc:	4608      	mov	r0, r1
 800b7de:	602b      	str	r3, [r5, #0]
 800b7e0:	f7f8 f980 	bl	8003ae4 <_close>
 800b7e4:	1c43      	adds	r3, r0, #1
 800b7e6:	d102      	bne.n	800b7ee <_close_r+0x1a>
 800b7e8:	682b      	ldr	r3, [r5, #0]
 800b7ea:	b103      	cbz	r3, 800b7ee <_close_r+0x1a>
 800b7ec:	6023      	str	r3, [r4, #0]
 800b7ee:	bd38      	pop	{r3, r4, r5, pc}
 800b7f0:	20000fb0 	.word	0x20000fb0

0800b7f4 <_lseek_r>:
 800b7f4:	b538      	push	{r3, r4, r5, lr}
 800b7f6:	4d07      	ldr	r5, [pc, #28]	@ (800b814 <_lseek_r+0x20>)
 800b7f8:	4604      	mov	r4, r0
 800b7fa:	4608      	mov	r0, r1
 800b7fc:	4611      	mov	r1, r2
 800b7fe:	2200      	movs	r2, #0
 800b800:	602a      	str	r2, [r5, #0]
 800b802:	461a      	mov	r2, r3
 800b804:	f7f8 f995 	bl	8003b32 <_lseek>
 800b808:	1c43      	adds	r3, r0, #1
 800b80a:	d102      	bne.n	800b812 <_lseek_r+0x1e>
 800b80c:	682b      	ldr	r3, [r5, #0]
 800b80e:	b103      	cbz	r3, 800b812 <_lseek_r+0x1e>
 800b810:	6023      	str	r3, [r4, #0]
 800b812:	bd38      	pop	{r3, r4, r5, pc}
 800b814:	20000fb0 	.word	0x20000fb0

0800b818 <_read_r>:
 800b818:	b538      	push	{r3, r4, r5, lr}
 800b81a:	4d07      	ldr	r5, [pc, #28]	@ (800b838 <_read_r+0x20>)
 800b81c:	4604      	mov	r4, r0
 800b81e:	4608      	mov	r0, r1
 800b820:	4611      	mov	r1, r2
 800b822:	2200      	movs	r2, #0
 800b824:	602a      	str	r2, [r5, #0]
 800b826:	461a      	mov	r2, r3
 800b828:	f7f8 f923 	bl	8003a72 <_read>
 800b82c:	1c43      	adds	r3, r0, #1
 800b82e:	d102      	bne.n	800b836 <_read_r+0x1e>
 800b830:	682b      	ldr	r3, [r5, #0]
 800b832:	b103      	cbz	r3, 800b836 <_read_r+0x1e>
 800b834:	6023      	str	r3, [r4, #0]
 800b836:	bd38      	pop	{r3, r4, r5, pc}
 800b838:	20000fb0 	.word	0x20000fb0

0800b83c <_write_r>:
 800b83c:	b538      	push	{r3, r4, r5, lr}
 800b83e:	4d07      	ldr	r5, [pc, #28]	@ (800b85c <_write_r+0x20>)
 800b840:	4604      	mov	r4, r0
 800b842:	4608      	mov	r0, r1
 800b844:	4611      	mov	r1, r2
 800b846:	2200      	movs	r2, #0
 800b848:	602a      	str	r2, [r5, #0]
 800b84a:	461a      	mov	r2, r3
 800b84c:	f7f8 f92e 	bl	8003aac <_write>
 800b850:	1c43      	adds	r3, r0, #1
 800b852:	d102      	bne.n	800b85a <_write_r+0x1e>
 800b854:	682b      	ldr	r3, [r5, #0]
 800b856:	b103      	cbz	r3, 800b85a <_write_r+0x1e>
 800b858:	6023      	str	r3, [r4, #0]
 800b85a:	bd38      	pop	{r3, r4, r5, pc}
 800b85c:	20000fb0 	.word	0x20000fb0

0800b860 <__errno>:
 800b860:	4b01      	ldr	r3, [pc, #4]	@ (800b868 <__errno+0x8>)
 800b862:	6818      	ldr	r0, [r3, #0]
 800b864:	4770      	bx	lr
 800b866:	bf00      	nop
 800b868:	20000064 	.word	0x20000064

0800b86c <__libc_init_array>:
 800b86c:	b570      	push	{r4, r5, r6, lr}
 800b86e:	4d0d      	ldr	r5, [pc, #52]	@ (800b8a4 <__libc_init_array+0x38>)
 800b870:	4c0d      	ldr	r4, [pc, #52]	@ (800b8a8 <__libc_init_array+0x3c>)
 800b872:	1b64      	subs	r4, r4, r5
 800b874:	10a4      	asrs	r4, r4, #2
 800b876:	2600      	movs	r6, #0
 800b878:	42a6      	cmp	r6, r4
 800b87a:	d109      	bne.n	800b890 <__libc_init_array+0x24>
 800b87c:	4d0b      	ldr	r5, [pc, #44]	@ (800b8ac <__libc_init_array+0x40>)
 800b87e:	4c0c      	ldr	r4, [pc, #48]	@ (800b8b0 <__libc_init_array+0x44>)
 800b880:	f003 fb74 	bl	800ef6c <_init>
 800b884:	1b64      	subs	r4, r4, r5
 800b886:	10a4      	asrs	r4, r4, #2
 800b888:	2600      	movs	r6, #0
 800b88a:	42a6      	cmp	r6, r4
 800b88c:	d105      	bne.n	800b89a <__libc_init_array+0x2e>
 800b88e:	bd70      	pop	{r4, r5, r6, pc}
 800b890:	f855 3b04 	ldr.w	r3, [r5], #4
 800b894:	4798      	blx	r3
 800b896:	3601      	adds	r6, #1
 800b898:	e7ee      	b.n	800b878 <__libc_init_array+0xc>
 800b89a:	f855 3b04 	ldr.w	r3, [r5], #4
 800b89e:	4798      	blx	r3
 800b8a0:	3601      	adds	r6, #1
 800b8a2:	e7f2      	b.n	800b88a <__libc_init_array+0x1e>
 800b8a4:	0800f47c 	.word	0x0800f47c
 800b8a8:	0800f47c 	.word	0x0800f47c
 800b8ac:	0800f47c 	.word	0x0800f47c
 800b8b0:	0800f480 	.word	0x0800f480

0800b8b4 <__retarget_lock_init_recursive>:
 800b8b4:	4770      	bx	lr

0800b8b6 <__retarget_lock_acquire_recursive>:
 800b8b6:	4770      	bx	lr

0800b8b8 <__retarget_lock_release_recursive>:
 800b8b8:	4770      	bx	lr

0800b8ba <memcpy>:
 800b8ba:	440a      	add	r2, r1
 800b8bc:	4291      	cmp	r1, r2
 800b8be:	f100 33ff 	add.w	r3, r0, #4294967295
 800b8c2:	d100      	bne.n	800b8c6 <memcpy+0xc>
 800b8c4:	4770      	bx	lr
 800b8c6:	b510      	push	{r4, lr}
 800b8c8:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b8cc:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b8d0:	4291      	cmp	r1, r2
 800b8d2:	d1f9      	bne.n	800b8c8 <memcpy+0xe>
 800b8d4:	bd10      	pop	{r4, pc}
	...

0800b8d8 <nanf>:
 800b8d8:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800b8e0 <nanf+0x8>
 800b8dc:	4770      	bx	lr
 800b8de:	bf00      	nop
 800b8e0:	7fc00000 	.word	0x7fc00000

0800b8e4 <__assert_func>:
 800b8e4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b8e6:	4614      	mov	r4, r2
 800b8e8:	461a      	mov	r2, r3
 800b8ea:	4b09      	ldr	r3, [pc, #36]	@ (800b910 <__assert_func+0x2c>)
 800b8ec:	681b      	ldr	r3, [r3, #0]
 800b8ee:	4605      	mov	r5, r0
 800b8f0:	68d8      	ldr	r0, [r3, #12]
 800b8f2:	b14c      	cbz	r4, 800b908 <__assert_func+0x24>
 800b8f4:	4b07      	ldr	r3, [pc, #28]	@ (800b914 <__assert_func+0x30>)
 800b8f6:	9100      	str	r1, [sp, #0]
 800b8f8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b8fc:	4906      	ldr	r1, [pc, #24]	@ (800b918 <__assert_func+0x34>)
 800b8fe:	462b      	mov	r3, r5
 800b900:	f002 fc98 	bl	800e234 <fiprintf>
 800b904:	f002 fcec 	bl	800e2e0 <abort>
 800b908:	4b04      	ldr	r3, [pc, #16]	@ (800b91c <__assert_func+0x38>)
 800b90a:	461c      	mov	r4, r3
 800b90c:	e7f3      	b.n	800b8f6 <__assert_func+0x12>
 800b90e:	bf00      	nop
 800b910:	20000064 	.word	0x20000064
 800b914:	0800f09c 	.word	0x0800f09c
 800b918:	0800f0a9 	.word	0x0800f0a9
 800b91c:	0800f0d7 	.word	0x0800f0d7

0800b920 <quorem>:
 800b920:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b924:	6903      	ldr	r3, [r0, #16]
 800b926:	690c      	ldr	r4, [r1, #16]
 800b928:	42a3      	cmp	r3, r4
 800b92a:	4607      	mov	r7, r0
 800b92c:	db7e      	blt.n	800ba2c <quorem+0x10c>
 800b92e:	3c01      	subs	r4, #1
 800b930:	f101 0814 	add.w	r8, r1, #20
 800b934:	00a3      	lsls	r3, r4, #2
 800b936:	f100 0514 	add.w	r5, r0, #20
 800b93a:	9300      	str	r3, [sp, #0]
 800b93c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b940:	9301      	str	r3, [sp, #4]
 800b942:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800b946:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b94a:	3301      	adds	r3, #1
 800b94c:	429a      	cmp	r2, r3
 800b94e:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800b952:	fbb2 f6f3 	udiv	r6, r2, r3
 800b956:	d32e      	bcc.n	800b9b6 <quorem+0x96>
 800b958:	f04f 0a00 	mov.w	sl, #0
 800b95c:	46c4      	mov	ip, r8
 800b95e:	46ae      	mov	lr, r5
 800b960:	46d3      	mov	fp, sl
 800b962:	f85c 3b04 	ldr.w	r3, [ip], #4
 800b966:	b298      	uxth	r0, r3
 800b968:	fb06 a000 	mla	r0, r6, r0, sl
 800b96c:	0c02      	lsrs	r2, r0, #16
 800b96e:	0c1b      	lsrs	r3, r3, #16
 800b970:	fb06 2303 	mla	r3, r6, r3, r2
 800b974:	f8de 2000 	ldr.w	r2, [lr]
 800b978:	b280      	uxth	r0, r0
 800b97a:	b292      	uxth	r2, r2
 800b97c:	1a12      	subs	r2, r2, r0
 800b97e:	445a      	add	r2, fp
 800b980:	f8de 0000 	ldr.w	r0, [lr]
 800b984:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b988:	b29b      	uxth	r3, r3
 800b98a:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800b98e:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800b992:	b292      	uxth	r2, r2
 800b994:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800b998:	45e1      	cmp	r9, ip
 800b99a:	f84e 2b04 	str.w	r2, [lr], #4
 800b99e:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800b9a2:	d2de      	bcs.n	800b962 <quorem+0x42>
 800b9a4:	9b00      	ldr	r3, [sp, #0]
 800b9a6:	58eb      	ldr	r3, [r5, r3]
 800b9a8:	b92b      	cbnz	r3, 800b9b6 <quorem+0x96>
 800b9aa:	9b01      	ldr	r3, [sp, #4]
 800b9ac:	3b04      	subs	r3, #4
 800b9ae:	429d      	cmp	r5, r3
 800b9b0:	461a      	mov	r2, r3
 800b9b2:	d32f      	bcc.n	800ba14 <quorem+0xf4>
 800b9b4:	613c      	str	r4, [r7, #16]
 800b9b6:	4638      	mov	r0, r7
 800b9b8:	f001 f9c6 	bl	800cd48 <__mcmp>
 800b9bc:	2800      	cmp	r0, #0
 800b9be:	db25      	blt.n	800ba0c <quorem+0xec>
 800b9c0:	4629      	mov	r1, r5
 800b9c2:	2000      	movs	r0, #0
 800b9c4:	f858 2b04 	ldr.w	r2, [r8], #4
 800b9c8:	f8d1 c000 	ldr.w	ip, [r1]
 800b9cc:	fa1f fe82 	uxth.w	lr, r2
 800b9d0:	fa1f f38c 	uxth.w	r3, ip
 800b9d4:	eba3 030e 	sub.w	r3, r3, lr
 800b9d8:	4403      	add	r3, r0
 800b9da:	0c12      	lsrs	r2, r2, #16
 800b9dc:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800b9e0:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800b9e4:	b29b      	uxth	r3, r3
 800b9e6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b9ea:	45c1      	cmp	r9, r8
 800b9ec:	f841 3b04 	str.w	r3, [r1], #4
 800b9f0:	ea4f 4022 	mov.w	r0, r2, asr #16
 800b9f4:	d2e6      	bcs.n	800b9c4 <quorem+0xa4>
 800b9f6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b9fa:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b9fe:	b922      	cbnz	r2, 800ba0a <quorem+0xea>
 800ba00:	3b04      	subs	r3, #4
 800ba02:	429d      	cmp	r5, r3
 800ba04:	461a      	mov	r2, r3
 800ba06:	d30b      	bcc.n	800ba20 <quorem+0x100>
 800ba08:	613c      	str	r4, [r7, #16]
 800ba0a:	3601      	adds	r6, #1
 800ba0c:	4630      	mov	r0, r6
 800ba0e:	b003      	add	sp, #12
 800ba10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ba14:	6812      	ldr	r2, [r2, #0]
 800ba16:	3b04      	subs	r3, #4
 800ba18:	2a00      	cmp	r2, #0
 800ba1a:	d1cb      	bne.n	800b9b4 <quorem+0x94>
 800ba1c:	3c01      	subs	r4, #1
 800ba1e:	e7c6      	b.n	800b9ae <quorem+0x8e>
 800ba20:	6812      	ldr	r2, [r2, #0]
 800ba22:	3b04      	subs	r3, #4
 800ba24:	2a00      	cmp	r2, #0
 800ba26:	d1ef      	bne.n	800ba08 <quorem+0xe8>
 800ba28:	3c01      	subs	r4, #1
 800ba2a:	e7ea      	b.n	800ba02 <quorem+0xe2>
 800ba2c:	2000      	movs	r0, #0
 800ba2e:	e7ee      	b.n	800ba0e <quorem+0xee>

0800ba30 <_dtoa_r>:
 800ba30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ba34:	69c7      	ldr	r7, [r0, #28]
 800ba36:	b097      	sub	sp, #92	@ 0x5c
 800ba38:	ed8d 0b04 	vstr	d0, [sp, #16]
 800ba3c:	ec55 4b10 	vmov	r4, r5, d0
 800ba40:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 800ba42:	9107      	str	r1, [sp, #28]
 800ba44:	4681      	mov	r9, r0
 800ba46:	920c      	str	r2, [sp, #48]	@ 0x30
 800ba48:	9311      	str	r3, [sp, #68]	@ 0x44
 800ba4a:	b97f      	cbnz	r7, 800ba6c <_dtoa_r+0x3c>
 800ba4c:	2010      	movs	r0, #16
 800ba4e:	f000 fe09 	bl	800c664 <malloc>
 800ba52:	4602      	mov	r2, r0
 800ba54:	f8c9 001c 	str.w	r0, [r9, #28]
 800ba58:	b920      	cbnz	r0, 800ba64 <_dtoa_r+0x34>
 800ba5a:	4ba9      	ldr	r3, [pc, #676]	@ (800bd00 <_dtoa_r+0x2d0>)
 800ba5c:	21ef      	movs	r1, #239	@ 0xef
 800ba5e:	48a9      	ldr	r0, [pc, #676]	@ (800bd04 <_dtoa_r+0x2d4>)
 800ba60:	f7ff ff40 	bl	800b8e4 <__assert_func>
 800ba64:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800ba68:	6007      	str	r7, [r0, #0]
 800ba6a:	60c7      	str	r7, [r0, #12]
 800ba6c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800ba70:	6819      	ldr	r1, [r3, #0]
 800ba72:	b159      	cbz	r1, 800ba8c <_dtoa_r+0x5c>
 800ba74:	685a      	ldr	r2, [r3, #4]
 800ba76:	604a      	str	r2, [r1, #4]
 800ba78:	2301      	movs	r3, #1
 800ba7a:	4093      	lsls	r3, r2
 800ba7c:	608b      	str	r3, [r1, #8]
 800ba7e:	4648      	mov	r0, r9
 800ba80:	f000 fee6 	bl	800c850 <_Bfree>
 800ba84:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800ba88:	2200      	movs	r2, #0
 800ba8a:	601a      	str	r2, [r3, #0]
 800ba8c:	1e2b      	subs	r3, r5, #0
 800ba8e:	bfb9      	ittee	lt
 800ba90:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800ba94:	9305      	strlt	r3, [sp, #20]
 800ba96:	2300      	movge	r3, #0
 800ba98:	6033      	strge	r3, [r6, #0]
 800ba9a:	9f05      	ldr	r7, [sp, #20]
 800ba9c:	4b9a      	ldr	r3, [pc, #616]	@ (800bd08 <_dtoa_r+0x2d8>)
 800ba9e:	bfbc      	itt	lt
 800baa0:	2201      	movlt	r2, #1
 800baa2:	6032      	strlt	r2, [r6, #0]
 800baa4:	43bb      	bics	r3, r7
 800baa6:	d112      	bne.n	800bace <_dtoa_r+0x9e>
 800baa8:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800baaa:	f242 730f 	movw	r3, #9999	@ 0x270f
 800baae:	6013      	str	r3, [r2, #0]
 800bab0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800bab4:	4323      	orrs	r3, r4
 800bab6:	f000 855a 	beq.w	800c56e <_dtoa_r+0xb3e>
 800baba:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800babc:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 800bd1c <_dtoa_r+0x2ec>
 800bac0:	2b00      	cmp	r3, #0
 800bac2:	f000 855c 	beq.w	800c57e <_dtoa_r+0xb4e>
 800bac6:	f10a 0303 	add.w	r3, sl, #3
 800baca:	f000 bd56 	b.w	800c57a <_dtoa_r+0xb4a>
 800bace:	ed9d 7b04 	vldr	d7, [sp, #16]
 800bad2:	2200      	movs	r2, #0
 800bad4:	ec51 0b17 	vmov	r0, r1, d7
 800bad8:	2300      	movs	r3, #0
 800bada:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 800bade:	f7f4 fff3 	bl	8000ac8 <__aeabi_dcmpeq>
 800bae2:	4680      	mov	r8, r0
 800bae4:	b158      	cbz	r0, 800bafe <_dtoa_r+0xce>
 800bae6:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800bae8:	2301      	movs	r3, #1
 800baea:	6013      	str	r3, [r2, #0]
 800baec:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800baee:	b113      	cbz	r3, 800baf6 <_dtoa_r+0xc6>
 800baf0:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800baf2:	4b86      	ldr	r3, [pc, #536]	@ (800bd0c <_dtoa_r+0x2dc>)
 800baf4:	6013      	str	r3, [r2, #0]
 800baf6:	f8df a228 	ldr.w	sl, [pc, #552]	@ 800bd20 <_dtoa_r+0x2f0>
 800bafa:	f000 bd40 	b.w	800c57e <_dtoa_r+0xb4e>
 800bafe:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 800bb02:	aa14      	add	r2, sp, #80	@ 0x50
 800bb04:	a915      	add	r1, sp, #84	@ 0x54
 800bb06:	4648      	mov	r0, r9
 800bb08:	f001 fa3e 	bl	800cf88 <__d2b>
 800bb0c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800bb10:	9002      	str	r0, [sp, #8]
 800bb12:	2e00      	cmp	r6, #0
 800bb14:	d078      	beq.n	800bc08 <_dtoa_r+0x1d8>
 800bb16:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800bb18:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 800bb1c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800bb20:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800bb24:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800bb28:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800bb2c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800bb30:	4619      	mov	r1, r3
 800bb32:	2200      	movs	r2, #0
 800bb34:	4b76      	ldr	r3, [pc, #472]	@ (800bd10 <_dtoa_r+0x2e0>)
 800bb36:	f7f4 fba7 	bl	8000288 <__aeabi_dsub>
 800bb3a:	a36b      	add	r3, pc, #428	@ (adr r3, 800bce8 <_dtoa_r+0x2b8>)
 800bb3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb40:	f7f4 fd5a 	bl	80005f8 <__aeabi_dmul>
 800bb44:	a36a      	add	r3, pc, #424	@ (adr r3, 800bcf0 <_dtoa_r+0x2c0>)
 800bb46:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb4a:	f7f4 fb9f 	bl	800028c <__adddf3>
 800bb4e:	4604      	mov	r4, r0
 800bb50:	4630      	mov	r0, r6
 800bb52:	460d      	mov	r5, r1
 800bb54:	f7f4 fce6 	bl	8000524 <__aeabi_i2d>
 800bb58:	a367      	add	r3, pc, #412	@ (adr r3, 800bcf8 <_dtoa_r+0x2c8>)
 800bb5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb5e:	f7f4 fd4b 	bl	80005f8 <__aeabi_dmul>
 800bb62:	4602      	mov	r2, r0
 800bb64:	460b      	mov	r3, r1
 800bb66:	4620      	mov	r0, r4
 800bb68:	4629      	mov	r1, r5
 800bb6a:	f7f4 fb8f 	bl	800028c <__adddf3>
 800bb6e:	4604      	mov	r4, r0
 800bb70:	460d      	mov	r5, r1
 800bb72:	f7f4 fff1 	bl	8000b58 <__aeabi_d2iz>
 800bb76:	2200      	movs	r2, #0
 800bb78:	4607      	mov	r7, r0
 800bb7a:	2300      	movs	r3, #0
 800bb7c:	4620      	mov	r0, r4
 800bb7e:	4629      	mov	r1, r5
 800bb80:	f7f4 ffac 	bl	8000adc <__aeabi_dcmplt>
 800bb84:	b140      	cbz	r0, 800bb98 <_dtoa_r+0x168>
 800bb86:	4638      	mov	r0, r7
 800bb88:	f7f4 fccc 	bl	8000524 <__aeabi_i2d>
 800bb8c:	4622      	mov	r2, r4
 800bb8e:	462b      	mov	r3, r5
 800bb90:	f7f4 ff9a 	bl	8000ac8 <__aeabi_dcmpeq>
 800bb94:	b900      	cbnz	r0, 800bb98 <_dtoa_r+0x168>
 800bb96:	3f01      	subs	r7, #1
 800bb98:	2f16      	cmp	r7, #22
 800bb9a:	d852      	bhi.n	800bc42 <_dtoa_r+0x212>
 800bb9c:	4b5d      	ldr	r3, [pc, #372]	@ (800bd14 <_dtoa_r+0x2e4>)
 800bb9e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800bba2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bba6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800bbaa:	f7f4 ff97 	bl	8000adc <__aeabi_dcmplt>
 800bbae:	2800      	cmp	r0, #0
 800bbb0:	d049      	beq.n	800bc46 <_dtoa_r+0x216>
 800bbb2:	3f01      	subs	r7, #1
 800bbb4:	2300      	movs	r3, #0
 800bbb6:	9310      	str	r3, [sp, #64]	@ 0x40
 800bbb8:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800bbba:	1b9b      	subs	r3, r3, r6
 800bbbc:	1e5a      	subs	r2, r3, #1
 800bbbe:	bf45      	ittet	mi
 800bbc0:	f1c3 0301 	rsbmi	r3, r3, #1
 800bbc4:	9300      	strmi	r3, [sp, #0]
 800bbc6:	2300      	movpl	r3, #0
 800bbc8:	2300      	movmi	r3, #0
 800bbca:	9206      	str	r2, [sp, #24]
 800bbcc:	bf54      	ite	pl
 800bbce:	9300      	strpl	r3, [sp, #0]
 800bbd0:	9306      	strmi	r3, [sp, #24]
 800bbd2:	2f00      	cmp	r7, #0
 800bbd4:	db39      	blt.n	800bc4a <_dtoa_r+0x21a>
 800bbd6:	9b06      	ldr	r3, [sp, #24]
 800bbd8:	970d      	str	r7, [sp, #52]	@ 0x34
 800bbda:	443b      	add	r3, r7
 800bbdc:	9306      	str	r3, [sp, #24]
 800bbde:	2300      	movs	r3, #0
 800bbe0:	9308      	str	r3, [sp, #32]
 800bbe2:	9b07      	ldr	r3, [sp, #28]
 800bbe4:	2b09      	cmp	r3, #9
 800bbe6:	d863      	bhi.n	800bcb0 <_dtoa_r+0x280>
 800bbe8:	2b05      	cmp	r3, #5
 800bbea:	bfc4      	itt	gt
 800bbec:	3b04      	subgt	r3, #4
 800bbee:	9307      	strgt	r3, [sp, #28]
 800bbf0:	9b07      	ldr	r3, [sp, #28]
 800bbf2:	f1a3 0302 	sub.w	r3, r3, #2
 800bbf6:	bfcc      	ite	gt
 800bbf8:	2400      	movgt	r4, #0
 800bbfa:	2401      	movle	r4, #1
 800bbfc:	2b03      	cmp	r3, #3
 800bbfe:	d863      	bhi.n	800bcc8 <_dtoa_r+0x298>
 800bc00:	e8df f003 	tbb	[pc, r3]
 800bc04:	2b375452 	.word	0x2b375452
 800bc08:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 800bc0c:	441e      	add	r6, r3
 800bc0e:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800bc12:	2b20      	cmp	r3, #32
 800bc14:	bfc1      	itttt	gt
 800bc16:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800bc1a:	409f      	lslgt	r7, r3
 800bc1c:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800bc20:	fa24 f303 	lsrgt.w	r3, r4, r3
 800bc24:	bfd6      	itet	le
 800bc26:	f1c3 0320 	rsble	r3, r3, #32
 800bc2a:	ea47 0003 	orrgt.w	r0, r7, r3
 800bc2e:	fa04 f003 	lslle.w	r0, r4, r3
 800bc32:	f7f4 fc67 	bl	8000504 <__aeabi_ui2d>
 800bc36:	2201      	movs	r2, #1
 800bc38:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800bc3c:	3e01      	subs	r6, #1
 800bc3e:	9212      	str	r2, [sp, #72]	@ 0x48
 800bc40:	e776      	b.n	800bb30 <_dtoa_r+0x100>
 800bc42:	2301      	movs	r3, #1
 800bc44:	e7b7      	b.n	800bbb6 <_dtoa_r+0x186>
 800bc46:	9010      	str	r0, [sp, #64]	@ 0x40
 800bc48:	e7b6      	b.n	800bbb8 <_dtoa_r+0x188>
 800bc4a:	9b00      	ldr	r3, [sp, #0]
 800bc4c:	1bdb      	subs	r3, r3, r7
 800bc4e:	9300      	str	r3, [sp, #0]
 800bc50:	427b      	negs	r3, r7
 800bc52:	9308      	str	r3, [sp, #32]
 800bc54:	2300      	movs	r3, #0
 800bc56:	930d      	str	r3, [sp, #52]	@ 0x34
 800bc58:	e7c3      	b.n	800bbe2 <_dtoa_r+0x1b2>
 800bc5a:	2301      	movs	r3, #1
 800bc5c:	9309      	str	r3, [sp, #36]	@ 0x24
 800bc5e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800bc60:	eb07 0b03 	add.w	fp, r7, r3
 800bc64:	f10b 0301 	add.w	r3, fp, #1
 800bc68:	2b01      	cmp	r3, #1
 800bc6a:	9303      	str	r3, [sp, #12]
 800bc6c:	bfb8      	it	lt
 800bc6e:	2301      	movlt	r3, #1
 800bc70:	e006      	b.n	800bc80 <_dtoa_r+0x250>
 800bc72:	2301      	movs	r3, #1
 800bc74:	9309      	str	r3, [sp, #36]	@ 0x24
 800bc76:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800bc78:	2b00      	cmp	r3, #0
 800bc7a:	dd28      	ble.n	800bcce <_dtoa_r+0x29e>
 800bc7c:	469b      	mov	fp, r3
 800bc7e:	9303      	str	r3, [sp, #12]
 800bc80:	f8d9 001c 	ldr.w	r0, [r9, #28]
 800bc84:	2100      	movs	r1, #0
 800bc86:	2204      	movs	r2, #4
 800bc88:	f102 0514 	add.w	r5, r2, #20
 800bc8c:	429d      	cmp	r5, r3
 800bc8e:	d926      	bls.n	800bcde <_dtoa_r+0x2ae>
 800bc90:	6041      	str	r1, [r0, #4]
 800bc92:	4648      	mov	r0, r9
 800bc94:	f000 fd9c 	bl	800c7d0 <_Balloc>
 800bc98:	4682      	mov	sl, r0
 800bc9a:	2800      	cmp	r0, #0
 800bc9c:	d142      	bne.n	800bd24 <_dtoa_r+0x2f4>
 800bc9e:	4b1e      	ldr	r3, [pc, #120]	@ (800bd18 <_dtoa_r+0x2e8>)
 800bca0:	4602      	mov	r2, r0
 800bca2:	f240 11af 	movw	r1, #431	@ 0x1af
 800bca6:	e6da      	b.n	800ba5e <_dtoa_r+0x2e>
 800bca8:	2300      	movs	r3, #0
 800bcaa:	e7e3      	b.n	800bc74 <_dtoa_r+0x244>
 800bcac:	2300      	movs	r3, #0
 800bcae:	e7d5      	b.n	800bc5c <_dtoa_r+0x22c>
 800bcb0:	2401      	movs	r4, #1
 800bcb2:	2300      	movs	r3, #0
 800bcb4:	9307      	str	r3, [sp, #28]
 800bcb6:	9409      	str	r4, [sp, #36]	@ 0x24
 800bcb8:	f04f 3bff 	mov.w	fp, #4294967295
 800bcbc:	2200      	movs	r2, #0
 800bcbe:	f8cd b00c 	str.w	fp, [sp, #12]
 800bcc2:	2312      	movs	r3, #18
 800bcc4:	920c      	str	r2, [sp, #48]	@ 0x30
 800bcc6:	e7db      	b.n	800bc80 <_dtoa_r+0x250>
 800bcc8:	2301      	movs	r3, #1
 800bcca:	9309      	str	r3, [sp, #36]	@ 0x24
 800bccc:	e7f4      	b.n	800bcb8 <_dtoa_r+0x288>
 800bcce:	f04f 0b01 	mov.w	fp, #1
 800bcd2:	f8cd b00c 	str.w	fp, [sp, #12]
 800bcd6:	465b      	mov	r3, fp
 800bcd8:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 800bcdc:	e7d0      	b.n	800bc80 <_dtoa_r+0x250>
 800bcde:	3101      	adds	r1, #1
 800bce0:	0052      	lsls	r2, r2, #1
 800bce2:	e7d1      	b.n	800bc88 <_dtoa_r+0x258>
 800bce4:	f3af 8000 	nop.w
 800bce8:	636f4361 	.word	0x636f4361
 800bcec:	3fd287a7 	.word	0x3fd287a7
 800bcf0:	8b60c8b3 	.word	0x8b60c8b3
 800bcf4:	3fc68a28 	.word	0x3fc68a28
 800bcf8:	509f79fb 	.word	0x509f79fb
 800bcfc:	3fd34413 	.word	0x3fd34413
 800bd00:	0800eff4 	.word	0x0800eff4
 800bd04:	0800f0e5 	.word	0x0800f0e5
 800bd08:	7ff00000 	.word	0x7ff00000
 800bd0c:	0800f074 	.word	0x0800f074
 800bd10:	3ff80000 	.word	0x3ff80000
 800bd14:	0800f258 	.word	0x0800f258
 800bd18:	0800f13d 	.word	0x0800f13d
 800bd1c:	0800f0e1 	.word	0x0800f0e1
 800bd20:	0800f073 	.word	0x0800f073
 800bd24:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800bd28:	6018      	str	r0, [r3, #0]
 800bd2a:	9b03      	ldr	r3, [sp, #12]
 800bd2c:	2b0e      	cmp	r3, #14
 800bd2e:	f200 80a1 	bhi.w	800be74 <_dtoa_r+0x444>
 800bd32:	2c00      	cmp	r4, #0
 800bd34:	f000 809e 	beq.w	800be74 <_dtoa_r+0x444>
 800bd38:	2f00      	cmp	r7, #0
 800bd3a:	dd33      	ble.n	800bda4 <_dtoa_r+0x374>
 800bd3c:	4b9c      	ldr	r3, [pc, #624]	@ (800bfb0 <_dtoa_r+0x580>)
 800bd3e:	f007 020f 	and.w	r2, r7, #15
 800bd42:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800bd46:	ed93 7b00 	vldr	d7, [r3]
 800bd4a:	05f8      	lsls	r0, r7, #23
 800bd4c:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 800bd50:	ea4f 1427 	mov.w	r4, r7, asr #4
 800bd54:	d516      	bpl.n	800bd84 <_dtoa_r+0x354>
 800bd56:	4b97      	ldr	r3, [pc, #604]	@ (800bfb4 <_dtoa_r+0x584>)
 800bd58:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800bd5c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800bd60:	f7f4 fd74 	bl	800084c <__aeabi_ddiv>
 800bd64:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800bd68:	f004 040f 	and.w	r4, r4, #15
 800bd6c:	2603      	movs	r6, #3
 800bd6e:	4d91      	ldr	r5, [pc, #580]	@ (800bfb4 <_dtoa_r+0x584>)
 800bd70:	b954      	cbnz	r4, 800bd88 <_dtoa_r+0x358>
 800bd72:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800bd76:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800bd7a:	f7f4 fd67 	bl	800084c <__aeabi_ddiv>
 800bd7e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800bd82:	e028      	b.n	800bdd6 <_dtoa_r+0x3a6>
 800bd84:	2602      	movs	r6, #2
 800bd86:	e7f2      	b.n	800bd6e <_dtoa_r+0x33e>
 800bd88:	07e1      	lsls	r1, r4, #31
 800bd8a:	d508      	bpl.n	800bd9e <_dtoa_r+0x36e>
 800bd8c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800bd90:	e9d5 2300 	ldrd	r2, r3, [r5]
 800bd94:	f7f4 fc30 	bl	80005f8 <__aeabi_dmul>
 800bd98:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800bd9c:	3601      	adds	r6, #1
 800bd9e:	1064      	asrs	r4, r4, #1
 800bda0:	3508      	adds	r5, #8
 800bda2:	e7e5      	b.n	800bd70 <_dtoa_r+0x340>
 800bda4:	f000 80af 	beq.w	800bf06 <_dtoa_r+0x4d6>
 800bda8:	427c      	negs	r4, r7
 800bdaa:	4b81      	ldr	r3, [pc, #516]	@ (800bfb0 <_dtoa_r+0x580>)
 800bdac:	4d81      	ldr	r5, [pc, #516]	@ (800bfb4 <_dtoa_r+0x584>)
 800bdae:	f004 020f 	and.w	r2, r4, #15
 800bdb2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800bdb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bdba:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800bdbe:	f7f4 fc1b 	bl	80005f8 <__aeabi_dmul>
 800bdc2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800bdc6:	1124      	asrs	r4, r4, #4
 800bdc8:	2300      	movs	r3, #0
 800bdca:	2602      	movs	r6, #2
 800bdcc:	2c00      	cmp	r4, #0
 800bdce:	f040 808f 	bne.w	800bef0 <_dtoa_r+0x4c0>
 800bdd2:	2b00      	cmp	r3, #0
 800bdd4:	d1d3      	bne.n	800bd7e <_dtoa_r+0x34e>
 800bdd6:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800bdd8:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800bddc:	2b00      	cmp	r3, #0
 800bdde:	f000 8094 	beq.w	800bf0a <_dtoa_r+0x4da>
 800bde2:	4b75      	ldr	r3, [pc, #468]	@ (800bfb8 <_dtoa_r+0x588>)
 800bde4:	2200      	movs	r2, #0
 800bde6:	4620      	mov	r0, r4
 800bde8:	4629      	mov	r1, r5
 800bdea:	f7f4 fe77 	bl	8000adc <__aeabi_dcmplt>
 800bdee:	2800      	cmp	r0, #0
 800bdf0:	f000 808b 	beq.w	800bf0a <_dtoa_r+0x4da>
 800bdf4:	9b03      	ldr	r3, [sp, #12]
 800bdf6:	2b00      	cmp	r3, #0
 800bdf8:	f000 8087 	beq.w	800bf0a <_dtoa_r+0x4da>
 800bdfc:	f1bb 0f00 	cmp.w	fp, #0
 800be00:	dd34      	ble.n	800be6c <_dtoa_r+0x43c>
 800be02:	4620      	mov	r0, r4
 800be04:	4b6d      	ldr	r3, [pc, #436]	@ (800bfbc <_dtoa_r+0x58c>)
 800be06:	2200      	movs	r2, #0
 800be08:	4629      	mov	r1, r5
 800be0a:	f7f4 fbf5 	bl	80005f8 <__aeabi_dmul>
 800be0e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800be12:	f107 38ff 	add.w	r8, r7, #4294967295
 800be16:	3601      	adds	r6, #1
 800be18:	465c      	mov	r4, fp
 800be1a:	4630      	mov	r0, r6
 800be1c:	f7f4 fb82 	bl	8000524 <__aeabi_i2d>
 800be20:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800be24:	f7f4 fbe8 	bl	80005f8 <__aeabi_dmul>
 800be28:	4b65      	ldr	r3, [pc, #404]	@ (800bfc0 <_dtoa_r+0x590>)
 800be2a:	2200      	movs	r2, #0
 800be2c:	f7f4 fa2e 	bl	800028c <__adddf3>
 800be30:	4605      	mov	r5, r0
 800be32:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800be36:	2c00      	cmp	r4, #0
 800be38:	d16a      	bne.n	800bf10 <_dtoa_r+0x4e0>
 800be3a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800be3e:	4b61      	ldr	r3, [pc, #388]	@ (800bfc4 <_dtoa_r+0x594>)
 800be40:	2200      	movs	r2, #0
 800be42:	f7f4 fa21 	bl	8000288 <__aeabi_dsub>
 800be46:	4602      	mov	r2, r0
 800be48:	460b      	mov	r3, r1
 800be4a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800be4e:	462a      	mov	r2, r5
 800be50:	4633      	mov	r3, r6
 800be52:	f7f4 fe61 	bl	8000b18 <__aeabi_dcmpgt>
 800be56:	2800      	cmp	r0, #0
 800be58:	f040 8298 	bne.w	800c38c <_dtoa_r+0x95c>
 800be5c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800be60:	462a      	mov	r2, r5
 800be62:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800be66:	f7f4 fe39 	bl	8000adc <__aeabi_dcmplt>
 800be6a:	bb38      	cbnz	r0, 800bebc <_dtoa_r+0x48c>
 800be6c:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 800be70:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800be74:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800be76:	2b00      	cmp	r3, #0
 800be78:	f2c0 8157 	blt.w	800c12a <_dtoa_r+0x6fa>
 800be7c:	2f0e      	cmp	r7, #14
 800be7e:	f300 8154 	bgt.w	800c12a <_dtoa_r+0x6fa>
 800be82:	4b4b      	ldr	r3, [pc, #300]	@ (800bfb0 <_dtoa_r+0x580>)
 800be84:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800be88:	ed93 7b00 	vldr	d7, [r3]
 800be8c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800be8e:	2b00      	cmp	r3, #0
 800be90:	ed8d 7b00 	vstr	d7, [sp]
 800be94:	f280 80e5 	bge.w	800c062 <_dtoa_r+0x632>
 800be98:	9b03      	ldr	r3, [sp, #12]
 800be9a:	2b00      	cmp	r3, #0
 800be9c:	f300 80e1 	bgt.w	800c062 <_dtoa_r+0x632>
 800bea0:	d10c      	bne.n	800bebc <_dtoa_r+0x48c>
 800bea2:	4b48      	ldr	r3, [pc, #288]	@ (800bfc4 <_dtoa_r+0x594>)
 800bea4:	2200      	movs	r2, #0
 800bea6:	ec51 0b17 	vmov	r0, r1, d7
 800beaa:	f7f4 fba5 	bl	80005f8 <__aeabi_dmul>
 800beae:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800beb2:	f7f4 fe27 	bl	8000b04 <__aeabi_dcmpge>
 800beb6:	2800      	cmp	r0, #0
 800beb8:	f000 8266 	beq.w	800c388 <_dtoa_r+0x958>
 800bebc:	2400      	movs	r4, #0
 800bebe:	4625      	mov	r5, r4
 800bec0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800bec2:	4656      	mov	r6, sl
 800bec4:	ea6f 0803 	mvn.w	r8, r3
 800bec8:	2700      	movs	r7, #0
 800beca:	4621      	mov	r1, r4
 800becc:	4648      	mov	r0, r9
 800bece:	f000 fcbf 	bl	800c850 <_Bfree>
 800bed2:	2d00      	cmp	r5, #0
 800bed4:	f000 80bd 	beq.w	800c052 <_dtoa_r+0x622>
 800bed8:	b12f      	cbz	r7, 800bee6 <_dtoa_r+0x4b6>
 800beda:	42af      	cmp	r7, r5
 800bedc:	d003      	beq.n	800bee6 <_dtoa_r+0x4b6>
 800bede:	4639      	mov	r1, r7
 800bee0:	4648      	mov	r0, r9
 800bee2:	f000 fcb5 	bl	800c850 <_Bfree>
 800bee6:	4629      	mov	r1, r5
 800bee8:	4648      	mov	r0, r9
 800beea:	f000 fcb1 	bl	800c850 <_Bfree>
 800beee:	e0b0      	b.n	800c052 <_dtoa_r+0x622>
 800bef0:	07e2      	lsls	r2, r4, #31
 800bef2:	d505      	bpl.n	800bf00 <_dtoa_r+0x4d0>
 800bef4:	e9d5 2300 	ldrd	r2, r3, [r5]
 800bef8:	f7f4 fb7e 	bl	80005f8 <__aeabi_dmul>
 800befc:	3601      	adds	r6, #1
 800befe:	2301      	movs	r3, #1
 800bf00:	1064      	asrs	r4, r4, #1
 800bf02:	3508      	adds	r5, #8
 800bf04:	e762      	b.n	800bdcc <_dtoa_r+0x39c>
 800bf06:	2602      	movs	r6, #2
 800bf08:	e765      	b.n	800bdd6 <_dtoa_r+0x3a6>
 800bf0a:	9c03      	ldr	r4, [sp, #12]
 800bf0c:	46b8      	mov	r8, r7
 800bf0e:	e784      	b.n	800be1a <_dtoa_r+0x3ea>
 800bf10:	4b27      	ldr	r3, [pc, #156]	@ (800bfb0 <_dtoa_r+0x580>)
 800bf12:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800bf14:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800bf18:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800bf1c:	4454      	add	r4, sl
 800bf1e:	2900      	cmp	r1, #0
 800bf20:	d054      	beq.n	800bfcc <_dtoa_r+0x59c>
 800bf22:	4929      	ldr	r1, [pc, #164]	@ (800bfc8 <_dtoa_r+0x598>)
 800bf24:	2000      	movs	r0, #0
 800bf26:	f7f4 fc91 	bl	800084c <__aeabi_ddiv>
 800bf2a:	4633      	mov	r3, r6
 800bf2c:	462a      	mov	r2, r5
 800bf2e:	f7f4 f9ab 	bl	8000288 <__aeabi_dsub>
 800bf32:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800bf36:	4656      	mov	r6, sl
 800bf38:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800bf3c:	f7f4 fe0c 	bl	8000b58 <__aeabi_d2iz>
 800bf40:	4605      	mov	r5, r0
 800bf42:	f7f4 faef 	bl	8000524 <__aeabi_i2d>
 800bf46:	4602      	mov	r2, r0
 800bf48:	460b      	mov	r3, r1
 800bf4a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800bf4e:	f7f4 f99b 	bl	8000288 <__aeabi_dsub>
 800bf52:	3530      	adds	r5, #48	@ 0x30
 800bf54:	4602      	mov	r2, r0
 800bf56:	460b      	mov	r3, r1
 800bf58:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800bf5c:	f806 5b01 	strb.w	r5, [r6], #1
 800bf60:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800bf64:	f7f4 fdba 	bl	8000adc <__aeabi_dcmplt>
 800bf68:	2800      	cmp	r0, #0
 800bf6a:	d172      	bne.n	800c052 <_dtoa_r+0x622>
 800bf6c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bf70:	4911      	ldr	r1, [pc, #68]	@ (800bfb8 <_dtoa_r+0x588>)
 800bf72:	2000      	movs	r0, #0
 800bf74:	f7f4 f988 	bl	8000288 <__aeabi_dsub>
 800bf78:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800bf7c:	f7f4 fdae 	bl	8000adc <__aeabi_dcmplt>
 800bf80:	2800      	cmp	r0, #0
 800bf82:	f040 80b4 	bne.w	800c0ee <_dtoa_r+0x6be>
 800bf86:	42a6      	cmp	r6, r4
 800bf88:	f43f af70 	beq.w	800be6c <_dtoa_r+0x43c>
 800bf8c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800bf90:	4b0a      	ldr	r3, [pc, #40]	@ (800bfbc <_dtoa_r+0x58c>)
 800bf92:	2200      	movs	r2, #0
 800bf94:	f7f4 fb30 	bl	80005f8 <__aeabi_dmul>
 800bf98:	4b08      	ldr	r3, [pc, #32]	@ (800bfbc <_dtoa_r+0x58c>)
 800bf9a:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800bf9e:	2200      	movs	r2, #0
 800bfa0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800bfa4:	f7f4 fb28 	bl	80005f8 <__aeabi_dmul>
 800bfa8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800bfac:	e7c4      	b.n	800bf38 <_dtoa_r+0x508>
 800bfae:	bf00      	nop
 800bfb0:	0800f258 	.word	0x0800f258
 800bfb4:	0800f230 	.word	0x0800f230
 800bfb8:	3ff00000 	.word	0x3ff00000
 800bfbc:	40240000 	.word	0x40240000
 800bfc0:	401c0000 	.word	0x401c0000
 800bfc4:	40140000 	.word	0x40140000
 800bfc8:	3fe00000 	.word	0x3fe00000
 800bfcc:	4631      	mov	r1, r6
 800bfce:	4628      	mov	r0, r5
 800bfd0:	f7f4 fb12 	bl	80005f8 <__aeabi_dmul>
 800bfd4:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800bfd8:	9413      	str	r4, [sp, #76]	@ 0x4c
 800bfda:	4656      	mov	r6, sl
 800bfdc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800bfe0:	f7f4 fdba 	bl	8000b58 <__aeabi_d2iz>
 800bfe4:	4605      	mov	r5, r0
 800bfe6:	f7f4 fa9d 	bl	8000524 <__aeabi_i2d>
 800bfea:	4602      	mov	r2, r0
 800bfec:	460b      	mov	r3, r1
 800bfee:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800bff2:	f7f4 f949 	bl	8000288 <__aeabi_dsub>
 800bff6:	3530      	adds	r5, #48	@ 0x30
 800bff8:	f806 5b01 	strb.w	r5, [r6], #1
 800bffc:	4602      	mov	r2, r0
 800bffe:	460b      	mov	r3, r1
 800c000:	42a6      	cmp	r6, r4
 800c002:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800c006:	f04f 0200 	mov.w	r2, #0
 800c00a:	d124      	bne.n	800c056 <_dtoa_r+0x626>
 800c00c:	4baf      	ldr	r3, [pc, #700]	@ (800c2cc <_dtoa_r+0x89c>)
 800c00e:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800c012:	f7f4 f93b 	bl	800028c <__adddf3>
 800c016:	4602      	mov	r2, r0
 800c018:	460b      	mov	r3, r1
 800c01a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c01e:	f7f4 fd7b 	bl	8000b18 <__aeabi_dcmpgt>
 800c022:	2800      	cmp	r0, #0
 800c024:	d163      	bne.n	800c0ee <_dtoa_r+0x6be>
 800c026:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800c02a:	49a8      	ldr	r1, [pc, #672]	@ (800c2cc <_dtoa_r+0x89c>)
 800c02c:	2000      	movs	r0, #0
 800c02e:	f7f4 f92b 	bl	8000288 <__aeabi_dsub>
 800c032:	4602      	mov	r2, r0
 800c034:	460b      	mov	r3, r1
 800c036:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c03a:	f7f4 fd4f 	bl	8000adc <__aeabi_dcmplt>
 800c03e:	2800      	cmp	r0, #0
 800c040:	f43f af14 	beq.w	800be6c <_dtoa_r+0x43c>
 800c044:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800c046:	1e73      	subs	r3, r6, #1
 800c048:	9313      	str	r3, [sp, #76]	@ 0x4c
 800c04a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800c04e:	2b30      	cmp	r3, #48	@ 0x30
 800c050:	d0f8      	beq.n	800c044 <_dtoa_r+0x614>
 800c052:	4647      	mov	r7, r8
 800c054:	e03b      	b.n	800c0ce <_dtoa_r+0x69e>
 800c056:	4b9e      	ldr	r3, [pc, #632]	@ (800c2d0 <_dtoa_r+0x8a0>)
 800c058:	f7f4 face 	bl	80005f8 <__aeabi_dmul>
 800c05c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c060:	e7bc      	b.n	800bfdc <_dtoa_r+0x5ac>
 800c062:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800c066:	4656      	mov	r6, sl
 800c068:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c06c:	4620      	mov	r0, r4
 800c06e:	4629      	mov	r1, r5
 800c070:	f7f4 fbec 	bl	800084c <__aeabi_ddiv>
 800c074:	f7f4 fd70 	bl	8000b58 <__aeabi_d2iz>
 800c078:	4680      	mov	r8, r0
 800c07a:	f7f4 fa53 	bl	8000524 <__aeabi_i2d>
 800c07e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c082:	f7f4 fab9 	bl	80005f8 <__aeabi_dmul>
 800c086:	4602      	mov	r2, r0
 800c088:	460b      	mov	r3, r1
 800c08a:	4620      	mov	r0, r4
 800c08c:	4629      	mov	r1, r5
 800c08e:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800c092:	f7f4 f8f9 	bl	8000288 <__aeabi_dsub>
 800c096:	f806 4b01 	strb.w	r4, [r6], #1
 800c09a:	9d03      	ldr	r5, [sp, #12]
 800c09c:	eba6 040a 	sub.w	r4, r6, sl
 800c0a0:	42a5      	cmp	r5, r4
 800c0a2:	4602      	mov	r2, r0
 800c0a4:	460b      	mov	r3, r1
 800c0a6:	d133      	bne.n	800c110 <_dtoa_r+0x6e0>
 800c0a8:	f7f4 f8f0 	bl	800028c <__adddf3>
 800c0ac:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c0b0:	4604      	mov	r4, r0
 800c0b2:	460d      	mov	r5, r1
 800c0b4:	f7f4 fd30 	bl	8000b18 <__aeabi_dcmpgt>
 800c0b8:	b9c0      	cbnz	r0, 800c0ec <_dtoa_r+0x6bc>
 800c0ba:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c0be:	4620      	mov	r0, r4
 800c0c0:	4629      	mov	r1, r5
 800c0c2:	f7f4 fd01 	bl	8000ac8 <__aeabi_dcmpeq>
 800c0c6:	b110      	cbz	r0, 800c0ce <_dtoa_r+0x69e>
 800c0c8:	f018 0f01 	tst.w	r8, #1
 800c0cc:	d10e      	bne.n	800c0ec <_dtoa_r+0x6bc>
 800c0ce:	9902      	ldr	r1, [sp, #8]
 800c0d0:	4648      	mov	r0, r9
 800c0d2:	f000 fbbd 	bl	800c850 <_Bfree>
 800c0d6:	2300      	movs	r3, #0
 800c0d8:	7033      	strb	r3, [r6, #0]
 800c0da:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800c0dc:	3701      	adds	r7, #1
 800c0de:	601f      	str	r7, [r3, #0]
 800c0e0:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800c0e2:	2b00      	cmp	r3, #0
 800c0e4:	f000 824b 	beq.w	800c57e <_dtoa_r+0xb4e>
 800c0e8:	601e      	str	r6, [r3, #0]
 800c0ea:	e248      	b.n	800c57e <_dtoa_r+0xb4e>
 800c0ec:	46b8      	mov	r8, r7
 800c0ee:	4633      	mov	r3, r6
 800c0f0:	461e      	mov	r6, r3
 800c0f2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c0f6:	2a39      	cmp	r2, #57	@ 0x39
 800c0f8:	d106      	bne.n	800c108 <_dtoa_r+0x6d8>
 800c0fa:	459a      	cmp	sl, r3
 800c0fc:	d1f8      	bne.n	800c0f0 <_dtoa_r+0x6c0>
 800c0fe:	2230      	movs	r2, #48	@ 0x30
 800c100:	f108 0801 	add.w	r8, r8, #1
 800c104:	f88a 2000 	strb.w	r2, [sl]
 800c108:	781a      	ldrb	r2, [r3, #0]
 800c10a:	3201      	adds	r2, #1
 800c10c:	701a      	strb	r2, [r3, #0]
 800c10e:	e7a0      	b.n	800c052 <_dtoa_r+0x622>
 800c110:	4b6f      	ldr	r3, [pc, #444]	@ (800c2d0 <_dtoa_r+0x8a0>)
 800c112:	2200      	movs	r2, #0
 800c114:	f7f4 fa70 	bl	80005f8 <__aeabi_dmul>
 800c118:	2200      	movs	r2, #0
 800c11a:	2300      	movs	r3, #0
 800c11c:	4604      	mov	r4, r0
 800c11e:	460d      	mov	r5, r1
 800c120:	f7f4 fcd2 	bl	8000ac8 <__aeabi_dcmpeq>
 800c124:	2800      	cmp	r0, #0
 800c126:	d09f      	beq.n	800c068 <_dtoa_r+0x638>
 800c128:	e7d1      	b.n	800c0ce <_dtoa_r+0x69e>
 800c12a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c12c:	2a00      	cmp	r2, #0
 800c12e:	f000 80ea 	beq.w	800c306 <_dtoa_r+0x8d6>
 800c132:	9a07      	ldr	r2, [sp, #28]
 800c134:	2a01      	cmp	r2, #1
 800c136:	f300 80cd 	bgt.w	800c2d4 <_dtoa_r+0x8a4>
 800c13a:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800c13c:	2a00      	cmp	r2, #0
 800c13e:	f000 80c1 	beq.w	800c2c4 <_dtoa_r+0x894>
 800c142:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800c146:	9c08      	ldr	r4, [sp, #32]
 800c148:	9e00      	ldr	r6, [sp, #0]
 800c14a:	9a00      	ldr	r2, [sp, #0]
 800c14c:	441a      	add	r2, r3
 800c14e:	9200      	str	r2, [sp, #0]
 800c150:	9a06      	ldr	r2, [sp, #24]
 800c152:	2101      	movs	r1, #1
 800c154:	441a      	add	r2, r3
 800c156:	4648      	mov	r0, r9
 800c158:	9206      	str	r2, [sp, #24]
 800c15a:	f000 fc77 	bl	800ca4c <__i2b>
 800c15e:	4605      	mov	r5, r0
 800c160:	b166      	cbz	r6, 800c17c <_dtoa_r+0x74c>
 800c162:	9b06      	ldr	r3, [sp, #24]
 800c164:	2b00      	cmp	r3, #0
 800c166:	dd09      	ble.n	800c17c <_dtoa_r+0x74c>
 800c168:	42b3      	cmp	r3, r6
 800c16a:	9a00      	ldr	r2, [sp, #0]
 800c16c:	bfa8      	it	ge
 800c16e:	4633      	movge	r3, r6
 800c170:	1ad2      	subs	r2, r2, r3
 800c172:	9200      	str	r2, [sp, #0]
 800c174:	9a06      	ldr	r2, [sp, #24]
 800c176:	1af6      	subs	r6, r6, r3
 800c178:	1ad3      	subs	r3, r2, r3
 800c17a:	9306      	str	r3, [sp, #24]
 800c17c:	9b08      	ldr	r3, [sp, #32]
 800c17e:	b30b      	cbz	r3, 800c1c4 <_dtoa_r+0x794>
 800c180:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c182:	2b00      	cmp	r3, #0
 800c184:	f000 80c6 	beq.w	800c314 <_dtoa_r+0x8e4>
 800c188:	2c00      	cmp	r4, #0
 800c18a:	f000 80c0 	beq.w	800c30e <_dtoa_r+0x8de>
 800c18e:	4629      	mov	r1, r5
 800c190:	4622      	mov	r2, r4
 800c192:	4648      	mov	r0, r9
 800c194:	f000 fd12 	bl	800cbbc <__pow5mult>
 800c198:	9a02      	ldr	r2, [sp, #8]
 800c19a:	4601      	mov	r1, r0
 800c19c:	4605      	mov	r5, r0
 800c19e:	4648      	mov	r0, r9
 800c1a0:	f000 fc6a 	bl	800ca78 <__multiply>
 800c1a4:	9902      	ldr	r1, [sp, #8]
 800c1a6:	4680      	mov	r8, r0
 800c1a8:	4648      	mov	r0, r9
 800c1aa:	f000 fb51 	bl	800c850 <_Bfree>
 800c1ae:	9b08      	ldr	r3, [sp, #32]
 800c1b0:	1b1b      	subs	r3, r3, r4
 800c1b2:	9308      	str	r3, [sp, #32]
 800c1b4:	f000 80b1 	beq.w	800c31a <_dtoa_r+0x8ea>
 800c1b8:	9a08      	ldr	r2, [sp, #32]
 800c1ba:	4641      	mov	r1, r8
 800c1bc:	4648      	mov	r0, r9
 800c1be:	f000 fcfd 	bl	800cbbc <__pow5mult>
 800c1c2:	9002      	str	r0, [sp, #8]
 800c1c4:	2101      	movs	r1, #1
 800c1c6:	4648      	mov	r0, r9
 800c1c8:	f000 fc40 	bl	800ca4c <__i2b>
 800c1cc:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800c1ce:	4604      	mov	r4, r0
 800c1d0:	2b00      	cmp	r3, #0
 800c1d2:	f000 81d8 	beq.w	800c586 <_dtoa_r+0xb56>
 800c1d6:	461a      	mov	r2, r3
 800c1d8:	4601      	mov	r1, r0
 800c1da:	4648      	mov	r0, r9
 800c1dc:	f000 fcee 	bl	800cbbc <__pow5mult>
 800c1e0:	9b07      	ldr	r3, [sp, #28]
 800c1e2:	2b01      	cmp	r3, #1
 800c1e4:	4604      	mov	r4, r0
 800c1e6:	f300 809f 	bgt.w	800c328 <_dtoa_r+0x8f8>
 800c1ea:	9b04      	ldr	r3, [sp, #16]
 800c1ec:	2b00      	cmp	r3, #0
 800c1ee:	f040 8097 	bne.w	800c320 <_dtoa_r+0x8f0>
 800c1f2:	9b05      	ldr	r3, [sp, #20]
 800c1f4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c1f8:	2b00      	cmp	r3, #0
 800c1fa:	f040 8093 	bne.w	800c324 <_dtoa_r+0x8f4>
 800c1fe:	9b05      	ldr	r3, [sp, #20]
 800c200:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800c204:	0d1b      	lsrs	r3, r3, #20
 800c206:	051b      	lsls	r3, r3, #20
 800c208:	b133      	cbz	r3, 800c218 <_dtoa_r+0x7e8>
 800c20a:	9b00      	ldr	r3, [sp, #0]
 800c20c:	3301      	adds	r3, #1
 800c20e:	9300      	str	r3, [sp, #0]
 800c210:	9b06      	ldr	r3, [sp, #24]
 800c212:	3301      	adds	r3, #1
 800c214:	9306      	str	r3, [sp, #24]
 800c216:	2301      	movs	r3, #1
 800c218:	9308      	str	r3, [sp, #32]
 800c21a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800c21c:	2b00      	cmp	r3, #0
 800c21e:	f000 81b8 	beq.w	800c592 <_dtoa_r+0xb62>
 800c222:	6923      	ldr	r3, [r4, #16]
 800c224:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800c228:	6918      	ldr	r0, [r3, #16]
 800c22a:	f000 fbc3 	bl	800c9b4 <__hi0bits>
 800c22e:	f1c0 0020 	rsb	r0, r0, #32
 800c232:	9b06      	ldr	r3, [sp, #24]
 800c234:	4418      	add	r0, r3
 800c236:	f010 001f 	ands.w	r0, r0, #31
 800c23a:	f000 8082 	beq.w	800c342 <_dtoa_r+0x912>
 800c23e:	f1c0 0320 	rsb	r3, r0, #32
 800c242:	2b04      	cmp	r3, #4
 800c244:	dd73      	ble.n	800c32e <_dtoa_r+0x8fe>
 800c246:	9b00      	ldr	r3, [sp, #0]
 800c248:	f1c0 001c 	rsb	r0, r0, #28
 800c24c:	4403      	add	r3, r0
 800c24e:	9300      	str	r3, [sp, #0]
 800c250:	9b06      	ldr	r3, [sp, #24]
 800c252:	4403      	add	r3, r0
 800c254:	4406      	add	r6, r0
 800c256:	9306      	str	r3, [sp, #24]
 800c258:	9b00      	ldr	r3, [sp, #0]
 800c25a:	2b00      	cmp	r3, #0
 800c25c:	dd05      	ble.n	800c26a <_dtoa_r+0x83a>
 800c25e:	9902      	ldr	r1, [sp, #8]
 800c260:	461a      	mov	r2, r3
 800c262:	4648      	mov	r0, r9
 800c264:	f000 fd04 	bl	800cc70 <__lshift>
 800c268:	9002      	str	r0, [sp, #8]
 800c26a:	9b06      	ldr	r3, [sp, #24]
 800c26c:	2b00      	cmp	r3, #0
 800c26e:	dd05      	ble.n	800c27c <_dtoa_r+0x84c>
 800c270:	4621      	mov	r1, r4
 800c272:	461a      	mov	r2, r3
 800c274:	4648      	mov	r0, r9
 800c276:	f000 fcfb 	bl	800cc70 <__lshift>
 800c27a:	4604      	mov	r4, r0
 800c27c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800c27e:	2b00      	cmp	r3, #0
 800c280:	d061      	beq.n	800c346 <_dtoa_r+0x916>
 800c282:	9802      	ldr	r0, [sp, #8]
 800c284:	4621      	mov	r1, r4
 800c286:	f000 fd5f 	bl	800cd48 <__mcmp>
 800c28a:	2800      	cmp	r0, #0
 800c28c:	da5b      	bge.n	800c346 <_dtoa_r+0x916>
 800c28e:	2300      	movs	r3, #0
 800c290:	9902      	ldr	r1, [sp, #8]
 800c292:	220a      	movs	r2, #10
 800c294:	4648      	mov	r0, r9
 800c296:	f000 fafd 	bl	800c894 <__multadd>
 800c29a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c29c:	9002      	str	r0, [sp, #8]
 800c29e:	f107 38ff 	add.w	r8, r7, #4294967295
 800c2a2:	2b00      	cmp	r3, #0
 800c2a4:	f000 8177 	beq.w	800c596 <_dtoa_r+0xb66>
 800c2a8:	4629      	mov	r1, r5
 800c2aa:	2300      	movs	r3, #0
 800c2ac:	220a      	movs	r2, #10
 800c2ae:	4648      	mov	r0, r9
 800c2b0:	f000 faf0 	bl	800c894 <__multadd>
 800c2b4:	f1bb 0f00 	cmp.w	fp, #0
 800c2b8:	4605      	mov	r5, r0
 800c2ba:	dc6f      	bgt.n	800c39c <_dtoa_r+0x96c>
 800c2bc:	9b07      	ldr	r3, [sp, #28]
 800c2be:	2b02      	cmp	r3, #2
 800c2c0:	dc49      	bgt.n	800c356 <_dtoa_r+0x926>
 800c2c2:	e06b      	b.n	800c39c <_dtoa_r+0x96c>
 800c2c4:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800c2c6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800c2ca:	e73c      	b.n	800c146 <_dtoa_r+0x716>
 800c2cc:	3fe00000 	.word	0x3fe00000
 800c2d0:	40240000 	.word	0x40240000
 800c2d4:	9b03      	ldr	r3, [sp, #12]
 800c2d6:	1e5c      	subs	r4, r3, #1
 800c2d8:	9b08      	ldr	r3, [sp, #32]
 800c2da:	42a3      	cmp	r3, r4
 800c2dc:	db09      	blt.n	800c2f2 <_dtoa_r+0x8c2>
 800c2de:	1b1c      	subs	r4, r3, r4
 800c2e0:	9b03      	ldr	r3, [sp, #12]
 800c2e2:	2b00      	cmp	r3, #0
 800c2e4:	f6bf af30 	bge.w	800c148 <_dtoa_r+0x718>
 800c2e8:	9b00      	ldr	r3, [sp, #0]
 800c2ea:	9a03      	ldr	r2, [sp, #12]
 800c2ec:	1a9e      	subs	r6, r3, r2
 800c2ee:	2300      	movs	r3, #0
 800c2f0:	e72b      	b.n	800c14a <_dtoa_r+0x71a>
 800c2f2:	9b08      	ldr	r3, [sp, #32]
 800c2f4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800c2f6:	9408      	str	r4, [sp, #32]
 800c2f8:	1ae3      	subs	r3, r4, r3
 800c2fa:	441a      	add	r2, r3
 800c2fc:	9e00      	ldr	r6, [sp, #0]
 800c2fe:	9b03      	ldr	r3, [sp, #12]
 800c300:	920d      	str	r2, [sp, #52]	@ 0x34
 800c302:	2400      	movs	r4, #0
 800c304:	e721      	b.n	800c14a <_dtoa_r+0x71a>
 800c306:	9c08      	ldr	r4, [sp, #32]
 800c308:	9e00      	ldr	r6, [sp, #0]
 800c30a:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 800c30c:	e728      	b.n	800c160 <_dtoa_r+0x730>
 800c30e:	f8dd 8008 	ldr.w	r8, [sp, #8]
 800c312:	e751      	b.n	800c1b8 <_dtoa_r+0x788>
 800c314:	9a08      	ldr	r2, [sp, #32]
 800c316:	9902      	ldr	r1, [sp, #8]
 800c318:	e750      	b.n	800c1bc <_dtoa_r+0x78c>
 800c31a:	f8cd 8008 	str.w	r8, [sp, #8]
 800c31e:	e751      	b.n	800c1c4 <_dtoa_r+0x794>
 800c320:	2300      	movs	r3, #0
 800c322:	e779      	b.n	800c218 <_dtoa_r+0x7e8>
 800c324:	9b04      	ldr	r3, [sp, #16]
 800c326:	e777      	b.n	800c218 <_dtoa_r+0x7e8>
 800c328:	2300      	movs	r3, #0
 800c32a:	9308      	str	r3, [sp, #32]
 800c32c:	e779      	b.n	800c222 <_dtoa_r+0x7f2>
 800c32e:	d093      	beq.n	800c258 <_dtoa_r+0x828>
 800c330:	9a00      	ldr	r2, [sp, #0]
 800c332:	331c      	adds	r3, #28
 800c334:	441a      	add	r2, r3
 800c336:	9200      	str	r2, [sp, #0]
 800c338:	9a06      	ldr	r2, [sp, #24]
 800c33a:	441a      	add	r2, r3
 800c33c:	441e      	add	r6, r3
 800c33e:	9206      	str	r2, [sp, #24]
 800c340:	e78a      	b.n	800c258 <_dtoa_r+0x828>
 800c342:	4603      	mov	r3, r0
 800c344:	e7f4      	b.n	800c330 <_dtoa_r+0x900>
 800c346:	9b03      	ldr	r3, [sp, #12]
 800c348:	2b00      	cmp	r3, #0
 800c34a:	46b8      	mov	r8, r7
 800c34c:	dc20      	bgt.n	800c390 <_dtoa_r+0x960>
 800c34e:	469b      	mov	fp, r3
 800c350:	9b07      	ldr	r3, [sp, #28]
 800c352:	2b02      	cmp	r3, #2
 800c354:	dd1e      	ble.n	800c394 <_dtoa_r+0x964>
 800c356:	f1bb 0f00 	cmp.w	fp, #0
 800c35a:	f47f adb1 	bne.w	800bec0 <_dtoa_r+0x490>
 800c35e:	4621      	mov	r1, r4
 800c360:	465b      	mov	r3, fp
 800c362:	2205      	movs	r2, #5
 800c364:	4648      	mov	r0, r9
 800c366:	f000 fa95 	bl	800c894 <__multadd>
 800c36a:	4601      	mov	r1, r0
 800c36c:	4604      	mov	r4, r0
 800c36e:	9802      	ldr	r0, [sp, #8]
 800c370:	f000 fcea 	bl	800cd48 <__mcmp>
 800c374:	2800      	cmp	r0, #0
 800c376:	f77f ada3 	ble.w	800bec0 <_dtoa_r+0x490>
 800c37a:	4656      	mov	r6, sl
 800c37c:	2331      	movs	r3, #49	@ 0x31
 800c37e:	f806 3b01 	strb.w	r3, [r6], #1
 800c382:	f108 0801 	add.w	r8, r8, #1
 800c386:	e59f      	b.n	800bec8 <_dtoa_r+0x498>
 800c388:	9c03      	ldr	r4, [sp, #12]
 800c38a:	46b8      	mov	r8, r7
 800c38c:	4625      	mov	r5, r4
 800c38e:	e7f4      	b.n	800c37a <_dtoa_r+0x94a>
 800c390:	f8dd b00c 	ldr.w	fp, [sp, #12]
 800c394:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c396:	2b00      	cmp	r3, #0
 800c398:	f000 8101 	beq.w	800c59e <_dtoa_r+0xb6e>
 800c39c:	2e00      	cmp	r6, #0
 800c39e:	dd05      	ble.n	800c3ac <_dtoa_r+0x97c>
 800c3a0:	4629      	mov	r1, r5
 800c3a2:	4632      	mov	r2, r6
 800c3a4:	4648      	mov	r0, r9
 800c3a6:	f000 fc63 	bl	800cc70 <__lshift>
 800c3aa:	4605      	mov	r5, r0
 800c3ac:	9b08      	ldr	r3, [sp, #32]
 800c3ae:	2b00      	cmp	r3, #0
 800c3b0:	d05c      	beq.n	800c46c <_dtoa_r+0xa3c>
 800c3b2:	6869      	ldr	r1, [r5, #4]
 800c3b4:	4648      	mov	r0, r9
 800c3b6:	f000 fa0b 	bl	800c7d0 <_Balloc>
 800c3ba:	4606      	mov	r6, r0
 800c3bc:	b928      	cbnz	r0, 800c3ca <_dtoa_r+0x99a>
 800c3be:	4b82      	ldr	r3, [pc, #520]	@ (800c5c8 <_dtoa_r+0xb98>)
 800c3c0:	4602      	mov	r2, r0
 800c3c2:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800c3c6:	f7ff bb4a 	b.w	800ba5e <_dtoa_r+0x2e>
 800c3ca:	692a      	ldr	r2, [r5, #16]
 800c3cc:	3202      	adds	r2, #2
 800c3ce:	0092      	lsls	r2, r2, #2
 800c3d0:	f105 010c 	add.w	r1, r5, #12
 800c3d4:	300c      	adds	r0, #12
 800c3d6:	f7ff fa70 	bl	800b8ba <memcpy>
 800c3da:	2201      	movs	r2, #1
 800c3dc:	4631      	mov	r1, r6
 800c3de:	4648      	mov	r0, r9
 800c3e0:	f000 fc46 	bl	800cc70 <__lshift>
 800c3e4:	f10a 0301 	add.w	r3, sl, #1
 800c3e8:	9300      	str	r3, [sp, #0]
 800c3ea:	eb0a 030b 	add.w	r3, sl, fp
 800c3ee:	9308      	str	r3, [sp, #32]
 800c3f0:	9b04      	ldr	r3, [sp, #16]
 800c3f2:	f003 0301 	and.w	r3, r3, #1
 800c3f6:	462f      	mov	r7, r5
 800c3f8:	9306      	str	r3, [sp, #24]
 800c3fa:	4605      	mov	r5, r0
 800c3fc:	9b00      	ldr	r3, [sp, #0]
 800c3fe:	9802      	ldr	r0, [sp, #8]
 800c400:	4621      	mov	r1, r4
 800c402:	f103 3bff 	add.w	fp, r3, #4294967295
 800c406:	f7ff fa8b 	bl	800b920 <quorem>
 800c40a:	4603      	mov	r3, r0
 800c40c:	3330      	adds	r3, #48	@ 0x30
 800c40e:	9003      	str	r0, [sp, #12]
 800c410:	4639      	mov	r1, r7
 800c412:	9802      	ldr	r0, [sp, #8]
 800c414:	9309      	str	r3, [sp, #36]	@ 0x24
 800c416:	f000 fc97 	bl	800cd48 <__mcmp>
 800c41a:	462a      	mov	r2, r5
 800c41c:	9004      	str	r0, [sp, #16]
 800c41e:	4621      	mov	r1, r4
 800c420:	4648      	mov	r0, r9
 800c422:	f000 fcad 	bl	800cd80 <__mdiff>
 800c426:	68c2      	ldr	r2, [r0, #12]
 800c428:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c42a:	4606      	mov	r6, r0
 800c42c:	bb02      	cbnz	r2, 800c470 <_dtoa_r+0xa40>
 800c42e:	4601      	mov	r1, r0
 800c430:	9802      	ldr	r0, [sp, #8]
 800c432:	f000 fc89 	bl	800cd48 <__mcmp>
 800c436:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c438:	4602      	mov	r2, r0
 800c43a:	4631      	mov	r1, r6
 800c43c:	4648      	mov	r0, r9
 800c43e:	920c      	str	r2, [sp, #48]	@ 0x30
 800c440:	9309      	str	r3, [sp, #36]	@ 0x24
 800c442:	f000 fa05 	bl	800c850 <_Bfree>
 800c446:	9b07      	ldr	r3, [sp, #28]
 800c448:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800c44a:	9e00      	ldr	r6, [sp, #0]
 800c44c:	ea42 0103 	orr.w	r1, r2, r3
 800c450:	9b06      	ldr	r3, [sp, #24]
 800c452:	4319      	orrs	r1, r3
 800c454:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c456:	d10d      	bne.n	800c474 <_dtoa_r+0xa44>
 800c458:	2b39      	cmp	r3, #57	@ 0x39
 800c45a:	d027      	beq.n	800c4ac <_dtoa_r+0xa7c>
 800c45c:	9a04      	ldr	r2, [sp, #16]
 800c45e:	2a00      	cmp	r2, #0
 800c460:	dd01      	ble.n	800c466 <_dtoa_r+0xa36>
 800c462:	9b03      	ldr	r3, [sp, #12]
 800c464:	3331      	adds	r3, #49	@ 0x31
 800c466:	f88b 3000 	strb.w	r3, [fp]
 800c46a:	e52e      	b.n	800beca <_dtoa_r+0x49a>
 800c46c:	4628      	mov	r0, r5
 800c46e:	e7b9      	b.n	800c3e4 <_dtoa_r+0x9b4>
 800c470:	2201      	movs	r2, #1
 800c472:	e7e2      	b.n	800c43a <_dtoa_r+0xa0a>
 800c474:	9904      	ldr	r1, [sp, #16]
 800c476:	2900      	cmp	r1, #0
 800c478:	db04      	blt.n	800c484 <_dtoa_r+0xa54>
 800c47a:	9807      	ldr	r0, [sp, #28]
 800c47c:	4301      	orrs	r1, r0
 800c47e:	9806      	ldr	r0, [sp, #24]
 800c480:	4301      	orrs	r1, r0
 800c482:	d120      	bne.n	800c4c6 <_dtoa_r+0xa96>
 800c484:	2a00      	cmp	r2, #0
 800c486:	ddee      	ble.n	800c466 <_dtoa_r+0xa36>
 800c488:	9902      	ldr	r1, [sp, #8]
 800c48a:	9300      	str	r3, [sp, #0]
 800c48c:	2201      	movs	r2, #1
 800c48e:	4648      	mov	r0, r9
 800c490:	f000 fbee 	bl	800cc70 <__lshift>
 800c494:	4621      	mov	r1, r4
 800c496:	9002      	str	r0, [sp, #8]
 800c498:	f000 fc56 	bl	800cd48 <__mcmp>
 800c49c:	2800      	cmp	r0, #0
 800c49e:	9b00      	ldr	r3, [sp, #0]
 800c4a0:	dc02      	bgt.n	800c4a8 <_dtoa_r+0xa78>
 800c4a2:	d1e0      	bne.n	800c466 <_dtoa_r+0xa36>
 800c4a4:	07da      	lsls	r2, r3, #31
 800c4a6:	d5de      	bpl.n	800c466 <_dtoa_r+0xa36>
 800c4a8:	2b39      	cmp	r3, #57	@ 0x39
 800c4aa:	d1da      	bne.n	800c462 <_dtoa_r+0xa32>
 800c4ac:	2339      	movs	r3, #57	@ 0x39
 800c4ae:	f88b 3000 	strb.w	r3, [fp]
 800c4b2:	4633      	mov	r3, r6
 800c4b4:	461e      	mov	r6, r3
 800c4b6:	3b01      	subs	r3, #1
 800c4b8:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800c4bc:	2a39      	cmp	r2, #57	@ 0x39
 800c4be:	d04e      	beq.n	800c55e <_dtoa_r+0xb2e>
 800c4c0:	3201      	adds	r2, #1
 800c4c2:	701a      	strb	r2, [r3, #0]
 800c4c4:	e501      	b.n	800beca <_dtoa_r+0x49a>
 800c4c6:	2a00      	cmp	r2, #0
 800c4c8:	dd03      	ble.n	800c4d2 <_dtoa_r+0xaa2>
 800c4ca:	2b39      	cmp	r3, #57	@ 0x39
 800c4cc:	d0ee      	beq.n	800c4ac <_dtoa_r+0xa7c>
 800c4ce:	3301      	adds	r3, #1
 800c4d0:	e7c9      	b.n	800c466 <_dtoa_r+0xa36>
 800c4d2:	9a00      	ldr	r2, [sp, #0]
 800c4d4:	9908      	ldr	r1, [sp, #32]
 800c4d6:	f802 3c01 	strb.w	r3, [r2, #-1]
 800c4da:	428a      	cmp	r2, r1
 800c4dc:	d028      	beq.n	800c530 <_dtoa_r+0xb00>
 800c4de:	9902      	ldr	r1, [sp, #8]
 800c4e0:	2300      	movs	r3, #0
 800c4e2:	220a      	movs	r2, #10
 800c4e4:	4648      	mov	r0, r9
 800c4e6:	f000 f9d5 	bl	800c894 <__multadd>
 800c4ea:	42af      	cmp	r7, r5
 800c4ec:	9002      	str	r0, [sp, #8]
 800c4ee:	f04f 0300 	mov.w	r3, #0
 800c4f2:	f04f 020a 	mov.w	r2, #10
 800c4f6:	4639      	mov	r1, r7
 800c4f8:	4648      	mov	r0, r9
 800c4fa:	d107      	bne.n	800c50c <_dtoa_r+0xadc>
 800c4fc:	f000 f9ca 	bl	800c894 <__multadd>
 800c500:	4607      	mov	r7, r0
 800c502:	4605      	mov	r5, r0
 800c504:	9b00      	ldr	r3, [sp, #0]
 800c506:	3301      	adds	r3, #1
 800c508:	9300      	str	r3, [sp, #0]
 800c50a:	e777      	b.n	800c3fc <_dtoa_r+0x9cc>
 800c50c:	f000 f9c2 	bl	800c894 <__multadd>
 800c510:	4629      	mov	r1, r5
 800c512:	4607      	mov	r7, r0
 800c514:	2300      	movs	r3, #0
 800c516:	220a      	movs	r2, #10
 800c518:	4648      	mov	r0, r9
 800c51a:	f000 f9bb 	bl	800c894 <__multadd>
 800c51e:	4605      	mov	r5, r0
 800c520:	e7f0      	b.n	800c504 <_dtoa_r+0xad4>
 800c522:	f1bb 0f00 	cmp.w	fp, #0
 800c526:	bfcc      	ite	gt
 800c528:	465e      	movgt	r6, fp
 800c52a:	2601      	movle	r6, #1
 800c52c:	4456      	add	r6, sl
 800c52e:	2700      	movs	r7, #0
 800c530:	9902      	ldr	r1, [sp, #8]
 800c532:	9300      	str	r3, [sp, #0]
 800c534:	2201      	movs	r2, #1
 800c536:	4648      	mov	r0, r9
 800c538:	f000 fb9a 	bl	800cc70 <__lshift>
 800c53c:	4621      	mov	r1, r4
 800c53e:	9002      	str	r0, [sp, #8]
 800c540:	f000 fc02 	bl	800cd48 <__mcmp>
 800c544:	2800      	cmp	r0, #0
 800c546:	dcb4      	bgt.n	800c4b2 <_dtoa_r+0xa82>
 800c548:	d102      	bne.n	800c550 <_dtoa_r+0xb20>
 800c54a:	9b00      	ldr	r3, [sp, #0]
 800c54c:	07db      	lsls	r3, r3, #31
 800c54e:	d4b0      	bmi.n	800c4b2 <_dtoa_r+0xa82>
 800c550:	4633      	mov	r3, r6
 800c552:	461e      	mov	r6, r3
 800c554:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c558:	2a30      	cmp	r2, #48	@ 0x30
 800c55a:	d0fa      	beq.n	800c552 <_dtoa_r+0xb22>
 800c55c:	e4b5      	b.n	800beca <_dtoa_r+0x49a>
 800c55e:	459a      	cmp	sl, r3
 800c560:	d1a8      	bne.n	800c4b4 <_dtoa_r+0xa84>
 800c562:	2331      	movs	r3, #49	@ 0x31
 800c564:	f108 0801 	add.w	r8, r8, #1
 800c568:	f88a 3000 	strb.w	r3, [sl]
 800c56c:	e4ad      	b.n	800beca <_dtoa_r+0x49a>
 800c56e:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800c570:	f8df a058 	ldr.w	sl, [pc, #88]	@ 800c5cc <_dtoa_r+0xb9c>
 800c574:	b11b      	cbz	r3, 800c57e <_dtoa_r+0xb4e>
 800c576:	f10a 0308 	add.w	r3, sl, #8
 800c57a:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800c57c:	6013      	str	r3, [r2, #0]
 800c57e:	4650      	mov	r0, sl
 800c580:	b017      	add	sp, #92	@ 0x5c
 800c582:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c586:	9b07      	ldr	r3, [sp, #28]
 800c588:	2b01      	cmp	r3, #1
 800c58a:	f77f ae2e 	ble.w	800c1ea <_dtoa_r+0x7ba>
 800c58e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800c590:	9308      	str	r3, [sp, #32]
 800c592:	2001      	movs	r0, #1
 800c594:	e64d      	b.n	800c232 <_dtoa_r+0x802>
 800c596:	f1bb 0f00 	cmp.w	fp, #0
 800c59a:	f77f aed9 	ble.w	800c350 <_dtoa_r+0x920>
 800c59e:	4656      	mov	r6, sl
 800c5a0:	9802      	ldr	r0, [sp, #8]
 800c5a2:	4621      	mov	r1, r4
 800c5a4:	f7ff f9bc 	bl	800b920 <quorem>
 800c5a8:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 800c5ac:	f806 3b01 	strb.w	r3, [r6], #1
 800c5b0:	eba6 020a 	sub.w	r2, r6, sl
 800c5b4:	4593      	cmp	fp, r2
 800c5b6:	ddb4      	ble.n	800c522 <_dtoa_r+0xaf2>
 800c5b8:	9902      	ldr	r1, [sp, #8]
 800c5ba:	2300      	movs	r3, #0
 800c5bc:	220a      	movs	r2, #10
 800c5be:	4648      	mov	r0, r9
 800c5c0:	f000 f968 	bl	800c894 <__multadd>
 800c5c4:	9002      	str	r0, [sp, #8]
 800c5c6:	e7eb      	b.n	800c5a0 <_dtoa_r+0xb70>
 800c5c8:	0800f13d 	.word	0x0800f13d
 800c5cc:	0800f0d8 	.word	0x0800f0d8

0800c5d0 <_free_r>:
 800c5d0:	b538      	push	{r3, r4, r5, lr}
 800c5d2:	4605      	mov	r5, r0
 800c5d4:	2900      	cmp	r1, #0
 800c5d6:	d041      	beq.n	800c65c <_free_r+0x8c>
 800c5d8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c5dc:	1f0c      	subs	r4, r1, #4
 800c5de:	2b00      	cmp	r3, #0
 800c5e0:	bfb8      	it	lt
 800c5e2:	18e4      	addlt	r4, r4, r3
 800c5e4:	f000 f8e8 	bl	800c7b8 <__malloc_lock>
 800c5e8:	4a1d      	ldr	r2, [pc, #116]	@ (800c660 <_free_r+0x90>)
 800c5ea:	6813      	ldr	r3, [r2, #0]
 800c5ec:	b933      	cbnz	r3, 800c5fc <_free_r+0x2c>
 800c5ee:	6063      	str	r3, [r4, #4]
 800c5f0:	6014      	str	r4, [r2, #0]
 800c5f2:	4628      	mov	r0, r5
 800c5f4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c5f8:	f000 b8e4 	b.w	800c7c4 <__malloc_unlock>
 800c5fc:	42a3      	cmp	r3, r4
 800c5fe:	d908      	bls.n	800c612 <_free_r+0x42>
 800c600:	6820      	ldr	r0, [r4, #0]
 800c602:	1821      	adds	r1, r4, r0
 800c604:	428b      	cmp	r3, r1
 800c606:	bf01      	itttt	eq
 800c608:	6819      	ldreq	r1, [r3, #0]
 800c60a:	685b      	ldreq	r3, [r3, #4]
 800c60c:	1809      	addeq	r1, r1, r0
 800c60e:	6021      	streq	r1, [r4, #0]
 800c610:	e7ed      	b.n	800c5ee <_free_r+0x1e>
 800c612:	461a      	mov	r2, r3
 800c614:	685b      	ldr	r3, [r3, #4]
 800c616:	b10b      	cbz	r3, 800c61c <_free_r+0x4c>
 800c618:	42a3      	cmp	r3, r4
 800c61a:	d9fa      	bls.n	800c612 <_free_r+0x42>
 800c61c:	6811      	ldr	r1, [r2, #0]
 800c61e:	1850      	adds	r0, r2, r1
 800c620:	42a0      	cmp	r0, r4
 800c622:	d10b      	bne.n	800c63c <_free_r+0x6c>
 800c624:	6820      	ldr	r0, [r4, #0]
 800c626:	4401      	add	r1, r0
 800c628:	1850      	adds	r0, r2, r1
 800c62a:	4283      	cmp	r3, r0
 800c62c:	6011      	str	r1, [r2, #0]
 800c62e:	d1e0      	bne.n	800c5f2 <_free_r+0x22>
 800c630:	6818      	ldr	r0, [r3, #0]
 800c632:	685b      	ldr	r3, [r3, #4]
 800c634:	6053      	str	r3, [r2, #4]
 800c636:	4408      	add	r0, r1
 800c638:	6010      	str	r0, [r2, #0]
 800c63a:	e7da      	b.n	800c5f2 <_free_r+0x22>
 800c63c:	d902      	bls.n	800c644 <_free_r+0x74>
 800c63e:	230c      	movs	r3, #12
 800c640:	602b      	str	r3, [r5, #0]
 800c642:	e7d6      	b.n	800c5f2 <_free_r+0x22>
 800c644:	6820      	ldr	r0, [r4, #0]
 800c646:	1821      	adds	r1, r4, r0
 800c648:	428b      	cmp	r3, r1
 800c64a:	bf04      	itt	eq
 800c64c:	6819      	ldreq	r1, [r3, #0]
 800c64e:	685b      	ldreq	r3, [r3, #4]
 800c650:	6063      	str	r3, [r4, #4]
 800c652:	bf04      	itt	eq
 800c654:	1809      	addeq	r1, r1, r0
 800c656:	6021      	streq	r1, [r4, #0]
 800c658:	6054      	str	r4, [r2, #4]
 800c65a:	e7ca      	b.n	800c5f2 <_free_r+0x22>
 800c65c:	bd38      	pop	{r3, r4, r5, pc}
 800c65e:	bf00      	nop
 800c660:	20000fbc 	.word	0x20000fbc

0800c664 <malloc>:
 800c664:	4b02      	ldr	r3, [pc, #8]	@ (800c670 <malloc+0xc>)
 800c666:	4601      	mov	r1, r0
 800c668:	6818      	ldr	r0, [r3, #0]
 800c66a:	f000 b825 	b.w	800c6b8 <_malloc_r>
 800c66e:	bf00      	nop
 800c670:	20000064 	.word	0x20000064

0800c674 <sbrk_aligned>:
 800c674:	b570      	push	{r4, r5, r6, lr}
 800c676:	4e0f      	ldr	r6, [pc, #60]	@ (800c6b4 <sbrk_aligned+0x40>)
 800c678:	460c      	mov	r4, r1
 800c67a:	6831      	ldr	r1, [r6, #0]
 800c67c:	4605      	mov	r5, r0
 800c67e:	b911      	cbnz	r1, 800c686 <sbrk_aligned+0x12>
 800c680:	f001 fe16 	bl	800e2b0 <_sbrk_r>
 800c684:	6030      	str	r0, [r6, #0]
 800c686:	4621      	mov	r1, r4
 800c688:	4628      	mov	r0, r5
 800c68a:	f001 fe11 	bl	800e2b0 <_sbrk_r>
 800c68e:	1c43      	adds	r3, r0, #1
 800c690:	d103      	bne.n	800c69a <sbrk_aligned+0x26>
 800c692:	f04f 34ff 	mov.w	r4, #4294967295
 800c696:	4620      	mov	r0, r4
 800c698:	bd70      	pop	{r4, r5, r6, pc}
 800c69a:	1cc4      	adds	r4, r0, #3
 800c69c:	f024 0403 	bic.w	r4, r4, #3
 800c6a0:	42a0      	cmp	r0, r4
 800c6a2:	d0f8      	beq.n	800c696 <sbrk_aligned+0x22>
 800c6a4:	1a21      	subs	r1, r4, r0
 800c6a6:	4628      	mov	r0, r5
 800c6a8:	f001 fe02 	bl	800e2b0 <_sbrk_r>
 800c6ac:	3001      	adds	r0, #1
 800c6ae:	d1f2      	bne.n	800c696 <sbrk_aligned+0x22>
 800c6b0:	e7ef      	b.n	800c692 <sbrk_aligned+0x1e>
 800c6b2:	bf00      	nop
 800c6b4:	20000fb8 	.word	0x20000fb8

0800c6b8 <_malloc_r>:
 800c6b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c6bc:	1ccd      	adds	r5, r1, #3
 800c6be:	f025 0503 	bic.w	r5, r5, #3
 800c6c2:	3508      	adds	r5, #8
 800c6c4:	2d0c      	cmp	r5, #12
 800c6c6:	bf38      	it	cc
 800c6c8:	250c      	movcc	r5, #12
 800c6ca:	2d00      	cmp	r5, #0
 800c6cc:	4606      	mov	r6, r0
 800c6ce:	db01      	blt.n	800c6d4 <_malloc_r+0x1c>
 800c6d0:	42a9      	cmp	r1, r5
 800c6d2:	d904      	bls.n	800c6de <_malloc_r+0x26>
 800c6d4:	230c      	movs	r3, #12
 800c6d6:	6033      	str	r3, [r6, #0]
 800c6d8:	2000      	movs	r0, #0
 800c6da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c6de:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800c7b4 <_malloc_r+0xfc>
 800c6e2:	f000 f869 	bl	800c7b8 <__malloc_lock>
 800c6e6:	f8d8 3000 	ldr.w	r3, [r8]
 800c6ea:	461c      	mov	r4, r3
 800c6ec:	bb44      	cbnz	r4, 800c740 <_malloc_r+0x88>
 800c6ee:	4629      	mov	r1, r5
 800c6f0:	4630      	mov	r0, r6
 800c6f2:	f7ff ffbf 	bl	800c674 <sbrk_aligned>
 800c6f6:	1c43      	adds	r3, r0, #1
 800c6f8:	4604      	mov	r4, r0
 800c6fa:	d158      	bne.n	800c7ae <_malloc_r+0xf6>
 800c6fc:	f8d8 4000 	ldr.w	r4, [r8]
 800c700:	4627      	mov	r7, r4
 800c702:	2f00      	cmp	r7, #0
 800c704:	d143      	bne.n	800c78e <_malloc_r+0xd6>
 800c706:	2c00      	cmp	r4, #0
 800c708:	d04b      	beq.n	800c7a2 <_malloc_r+0xea>
 800c70a:	6823      	ldr	r3, [r4, #0]
 800c70c:	4639      	mov	r1, r7
 800c70e:	4630      	mov	r0, r6
 800c710:	eb04 0903 	add.w	r9, r4, r3
 800c714:	f001 fdcc 	bl	800e2b0 <_sbrk_r>
 800c718:	4581      	cmp	r9, r0
 800c71a:	d142      	bne.n	800c7a2 <_malloc_r+0xea>
 800c71c:	6821      	ldr	r1, [r4, #0]
 800c71e:	1a6d      	subs	r5, r5, r1
 800c720:	4629      	mov	r1, r5
 800c722:	4630      	mov	r0, r6
 800c724:	f7ff ffa6 	bl	800c674 <sbrk_aligned>
 800c728:	3001      	adds	r0, #1
 800c72a:	d03a      	beq.n	800c7a2 <_malloc_r+0xea>
 800c72c:	6823      	ldr	r3, [r4, #0]
 800c72e:	442b      	add	r3, r5
 800c730:	6023      	str	r3, [r4, #0]
 800c732:	f8d8 3000 	ldr.w	r3, [r8]
 800c736:	685a      	ldr	r2, [r3, #4]
 800c738:	bb62      	cbnz	r2, 800c794 <_malloc_r+0xdc>
 800c73a:	f8c8 7000 	str.w	r7, [r8]
 800c73e:	e00f      	b.n	800c760 <_malloc_r+0xa8>
 800c740:	6822      	ldr	r2, [r4, #0]
 800c742:	1b52      	subs	r2, r2, r5
 800c744:	d420      	bmi.n	800c788 <_malloc_r+0xd0>
 800c746:	2a0b      	cmp	r2, #11
 800c748:	d917      	bls.n	800c77a <_malloc_r+0xc2>
 800c74a:	1961      	adds	r1, r4, r5
 800c74c:	42a3      	cmp	r3, r4
 800c74e:	6025      	str	r5, [r4, #0]
 800c750:	bf18      	it	ne
 800c752:	6059      	strne	r1, [r3, #4]
 800c754:	6863      	ldr	r3, [r4, #4]
 800c756:	bf08      	it	eq
 800c758:	f8c8 1000 	streq.w	r1, [r8]
 800c75c:	5162      	str	r2, [r4, r5]
 800c75e:	604b      	str	r3, [r1, #4]
 800c760:	4630      	mov	r0, r6
 800c762:	f000 f82f 	bl	800c7c4 <__malloc_unlock>
 800c766:	f104 000b 	add.w	r0, r4, #11
 800c76a:	1d23      	adds	r3, r4, #4
 800c76c:	f020 0007 	bic.w	r0, r0, #7
 800c770:	1ac2      	subs	r2, r0, r3
 800c772:	bf1c      	itt	ne
 800c774:	1a1b      	subne	r3, r3, r0
 800c776:	50a3      	strne	r3, [r4, r2]
 800c778:	e7af      	b.n	800c6da <_malloc_r+0x22>
 800c77a:	6862      	ldr	r2, [r4, #4]
 800c77c:	42a3      	cmp	r3, r4
 800c77e:	bf0c      	ite	eq
 800c780:	f8c8 2000 	streq.w	r2, [r8]
 800c784:	605a      	strne	r2, [r3, #4]
 800c786:	e7eb      	b.n	800c760 <_malloc_r+0xa8>
 800c788:	4623      	mov	r3, r4
 800c78a:	6864      	ldr	r4, [r4, #4]
 800c78c:	e7ae      	b.n	800c6ec <_malloc_r+0x34>
 800c78e:	463c      	mov	r4, r7
 800c790:	687f      	ldr	r7, [r7, #4]
 800c792:	e7b6      	b.n	800c702 <_malloc_r+0x4a>
 800c794:	461a      	mov	r2, r3
 800c796:	685b      	ldr	r3, [r3, #4]
 800c798:	42a3      	cmp	r3, r4
 800c79a:	d1fb      	bne.n	800c794 <_malloc_r+0xdc>
 800c79c:	2300      	movs	r3, #0
 800c79e:	6053      	str	r3, [r2, #4]
 800c7a0:	e7de      	b.n	800c760 <_malloc_r+0xa8>
 800c7a2:	230c      	movs	r3, #12
 800c7a4:	6033      	str	r3, [r6, #0]
 800c7a6:	4630      	mov	r0, r6
 800c7a8:	f000 f80c 	bl	800c7c4 <__malloc_unlock>
 800c7ac:	e794      	b.n	800c6d8 <_malloc_r+0x20>
 800c7ae:	6005      	str	r5, [r0, #0]
 800c7b0:	e7d6      	b.n	800c760 <_malloc_r+0xa8>
 800c7b2:	bf00      	nop
 800c7b4:	20000fbc 	.word	0x20000fbc

0800c7b8 <__malloc_lock>:
 800c7b8:	4801      	ldr	r0, [pc, #4]	@ (800c7c0 <__malloc_lock+0x8>)
 800c7ba:	f7ff b87c 	b.w	800b8b6 <__retarget_lock_acquire_recursive>
 800c7be:	bf00      	nop
 800c7c0:	20000fb4 	.word	0x20000fb4

0800c7c4 <__malloc_unlock>:
 800c7c4:	4801      	ldr	r0, [pc, #4]	@ (800c7cc <__malloc_unlock+0x8>)
 800c7c6:	f7ff b877 	b.w	800b8b8 <__retarget_lock_release_recursive>
 800c7ca:	bf00      	nop
 800c7cc:	20000fb4 	.word	0x20000fb4

0800c7d0 <_Balloc>:
 800c7d0:	b570      	push	{r4, r5, r6, lr}
 800c7d2:	69c6      	ldr	r6, [r0, #28]
 800c7d4:	4604      	mov	r4, r0
 800c7d6:	460d      	mov	r5, r1
 800c7d8:	b976      	cbnz	r6, 800c7f8 <_Balloc+0x28>
 800c7da:	2010      	movs	r0, #16
 800c7dc:	f7ff ff42 	bl	800c664 <malloc>
 800c7e0:	4602      	mov	r2, r0
 800c7e2:	61e0      	str	r0, [r4, #28]
 800c7e4:	b920      	cbnz	r0, 800c7f0 <_Balloc+0x20>
 800c7e6:	4b18      	ldr	r3, [pc, #96]	@ (800c848 <_Balloc+0x78>)
 800c7e8:	4818      	ldr	r0, [pc, #96]	@ (800c84c <_Balloc+0x7c>)
 800c7ea:	216b      	movs	r1, #107	@ 0x6b
 800c7ec:	f7ff f87a 	bl	800b8e4 <__assert_func>
 800c7f0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c7f4:	6006      	str	r6, [r0, #0]
 800c7f6:	60c6      	str	r6, [r0, #12]
 800c7f8:	69e6      	ldr	r6, [r4, #28]
 800c7fa:	68f3      	ldr	r3, [r6, #12]
 800c7fc:	b183      	cbz	r3, 800c820 <_Balloc+0x50>
 800c7fe:	69e3      	ldr	r3, [r4, #28]
 800c800:	68db      	ldr	r3, [r3, #12]
 800c802:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800c806:	b9b8      	cbnz	r0, 800c838 <_Balloc+0x68>
 800c808:	2101      	movs	r1, #1
 800c80a:	fa01 f605 	lsl.w	r6, r1, r5
 800c80e:	1d72      	adds	r2, r6, #5
 800c810:	0092      	lsls	r2, r2, #2
 800c812:	4620      	mov	r0, r4
 800c814:	f001 fd6b 	bl	800e2ee <_calloc_r>
 800c818:	b160      	cbz	r0, 800c834 <_Balloc+0x64>
 800c81a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800c81e:	e00e      	b.n	800c83e <_Balloc+0x6e>
 800c820:	2221      	movs	r2, #33	@ 0x21
 800c822:	2104      	movs	r1, #4
 800c824:	4620      	mov	r0, r4
 800c826:	f001 fd62 	bl	800e2ee <_calloc_r>
 800c82a:	69e3      	ldr	r3, [r4, #28]
 800c82c:	60f0      	str	r0, [r6, #12]
 800c82e:	68db      	ldr	r3, [r3, #12]
 800c830:	2b00      	cmp	r3, #0
 800c832:	d1e4      	bne.n	800c7fe <_Balloc+0x2e>
 800c834:	2000      	movs	r0, #0
 800c836:	bd70      	pop	{r4, r5, r6, pc}
 800c838:	6802      	ldr	r2, [r0, #0]
 800c83a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800c83e:	2300      	movs	r3, #0
 800c840:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800c844:	e7f7      	b.n	800c836 <_Balloc+0x66>
 800c846:	bf00      	nop
 800c848:	0800eff4 	.word	0x0800eff4
 800c84c:	0800f14e 	.word	0x0800f14e

0800c850 <_Bfree>:
 800c850:	b570      	push	{r4, r5, r6, lr}
 800c852:	69c6      	ldr	r6, [r0, #28]
 800c854:	4605      	mov	r5, r0
 800c856:	460c      	mov	r4, r1
 800c858:	b976      	cbnz	r6, 800c878 <_Bfree+0x28>
 800c85a:	2010      	movs	r0, #16
 800c85c:	f7ff ff02 	bl	800c664 <malloc>
 800c860:	4602      	mov	r2, r0
 800c862:	61e8      	str	r0, [r5, #28]
 800c864:	b920      	cbnz	r0, 800c870 <_Bfree+0x20>
 800c866:	4b09      	ldr	r3, [pc, #36]	@ (800c88c <_Bfree+0x3c>)
 800c868:	4809      	ldr	r0, [pc, #36]	@ (800c890 <_Bfree+0x40>)
 800c86a:	218f      	movs	r1, #143	@ 0x8f
 800c86c:	f7ff f83a 	bl	800b8e4 <__assert_func>
 800c870:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c874:	6006      	str	r6, [r0, #0]
 800c876:	60c6      	str	r6, [r0, #12]
 800c878:	b13c      	cbz	r4, 800c88a <_Bfree+0x3a>
 800c87a:	69eb      	ldr	r3, [r5, #28]
 800c87c:	6862      	ldr	r2, [r4, #4]
 800c87e:	68db      	ldr	r3, [r3, #12]
 800c880:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800c884:	6021      	str	r1, [r4, #0]
 800c886:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800c88a:	bd70      	pop	{r4, r5, r6, pc}
 800c88c:	0800eff4 	.word	0x0800eff4
 800c890:	0800f14e 	.word	0x0800f14e

0800c894 <__multadd>:
 800c894:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c898:	690d      	ldr	r5, [r1, #16]
 800c89a:	4607      	mov	r7, r0
 800c89c:	460c      	mov	r4, r1
 800c89e:	461e      	mov	r6, r3
 800c8a0:	f101 0c14 	add.w	ip, r1, #20
 800c8a4:	2000      	movs	r0, #0
 800c8a6:	f8dc 3000 	ldr.w	r3, [ip]
 800c8aa:	b299      	uxth	r1, r3
 800c8ac:	fb02 6101 	mla	r1, r2, r1, r6
 800c8b0:	0c1e      	lsrs	r6, r3, #16
 800c8b2:	0c0b      	lsrs	r3, r1, #16
 800c8b4:	fb02 3306 	mla	r3, r2, r6, r3
 800c8b8:	b289      	uxth	r1, r1
 800c8ba:	3001      	adds	r0, #1
 800c8bc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800c8c0:	4285      	cmp	r5, r0
 800c8c2:	f84c 1b04 	str.w	r1, [ip], #4
 800c8c6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800c8ca:	dcec      	bgt.n	800c8a6 <__multadd+0x12>
 800c8cc:	b30e      	cbz	r6, 800c912 <__multadd+0x7e>
 800c8ce:	68a3      	ldr	r3, [r4, #8]
 800c8d0:	42ab      	cmp	r3, r5
 800c8d2:	dc19      	bgt.n	800c908 <__multadd+0x74>
 800c8d4:	6861      	ldr	r1, [r4, #4]
 800c8d6:	4638      	mov	r0, r7
 800c8d8:	3101      	adds	r1, #1
 800c8da:	f7ff ff79 	bl	800c7d0 <_Balloc>
 800c8de:	4680      	mov	r8, r0
 800c8e0:	b928      	cbnz	r0, 800c8ee <__multadd+0x5a>
 800c8e2:	4602      	mov	r2, r0
 800c8e4:	4b0c      	ldr	r3, [pc, #48]	@ (800c918 <__multadd+0x84>)
 800c8e6:	480d      	ldr	r0, [pc, #52]	@ (800c91c <__multadd+0x88>)
 800c8e8:	21ba      	movs	r1, #186	@ 0xba
 800c8ea:	f7fe fffb 	bl	800b8e4 <__assert_func>
 800c8ee:	6922      	ldr	r2, [r4, #16]
 800c8f0:	3202      	adds	r2, #2
 800c8f2:	f104 010c 	add.w	r1, r4, #12
 800c8f6:	0092      	lsls	r2, r2, #2
 800c8f8:	300c      	adds	r0, #12
 800c8fa:	f7fe ffde 	bl	800b8ba <memcpy>
 800c8fe:	4621      	mov	r1, r4
 800c900:	4638      	mov	r0, r7
 800c902:	f7ff ffa5 	bl	800c850 <_Bfree>
 800c906:	4644      	mov	r4, r8
 800c908:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800c90c:	3501      	adds	r5, #1
 800c90e:	615e      	str	r6, [r3, #20]
 800c910:	6125      	str	r5, [r4, #16]
 800c912:	4620      	mov	r0, r4
 800c914:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c918:	0800f13d 	.word	0x0800f13d
 800c91c:	0800f14e 	.word	0x0800f14e

0800c920 <__s2b>:
 800c920:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c924:	460c      	mov	r4, r1
 800c926:	4615      	mov	r5, r2
 800c928:	461f      	mov	r7, r3
 800c92a:	2209      	movs	r2, #9
 800c92c:	3308      	adds	r3, #8
 800c92e:	4606      	mov	r6, r0
 800c930:	fb93 f3f2 	sdiv	r3, r3, r2
 800c934:	2100      	movs	r1, #0
 800c936:	2201      	movs	r2, #1
 800c938:	429a      	cmp	r2, r3
 800c93a:	db09      	blt.n	800c950 <__s2b+0x30>
 800c93c:	4630      	mov	r0, r6
 800c93e:	f7ff ff47 	bl	800c7d0 <_Balloc>
 800c942:	b940      	cbnz	r0, 800c956 <__s2b+0x36>
 800c944:	4602      	mov	r2, r0
 800c946:	4b19      	ldr	r3, [pc, #100]	@ (800c9ac <__s2b+0x8c>)
 800c948:	4819      	ldr	r0, [pc, #100]	@ (800c9b0 <__s2b+0x90>)
 800c94a:	21d3      	movs	r1, #211	@ 0xd3
 800c94c:	f7fe ffca 	bl	800b8e4 <__assert_func>
 800c950:	0052      	lsls	r2, r2, #1
 800c952:	3101      	adds	r1, #1
 800c954:	e7f0      	b.n	800c938 <__s2b+0x18>
 800c956:	9b08      	ldr	r3, [sp, #32]
 800c958:	6143      	str	r3, [r0, #20]
 800c95a:	2d09      	cmp	r5, #9
 800c95c:	f04f 0301 	mov.w	r3, #1
 800c960:	6103      	str	r3, [r0, #16]
 800c962:	dd16      	ble.n	800c992 <__s2b+0x72>
 800c964:	f104 0909 	add.w	r9, r4, #9
 800c968:	46c8      	mov	r8, r9
 800c96a:	442c      	add	r4, r5
 800c96c:	f818 3b01 	ldrb.w	r3, [r8], #1
 800c970:	4601      	mov	r1, r0
 800c972:	3b30      	subs	r3, #48	@ 0x30
 800c974:	220a      	movs	r2, #10
 800c976:	4630      	mov	r0, r6
 800c978:	f7ff ff8c 	bl	800c894 <__multadd>
 800c97c:	45a0      	cmp	r8, r4
 800c97e:	d1f5      	bne.n	800c96c <__s2b+0x4c>
 800c980:	f1a5 0408 	sub.w	r4, r5, #8
 800c984:	444c      	add	r4, r9
 800c986:	1b2d      	subs	r5, r5, r4
 800c988:	1963      	adds	r3, r4, r5
 800c98a:	42bb      	cmp	r3, r7
 800c98c:	db04      	blt.n	800c998 <__s2b+0x78>
 800c98e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c992:	340a      	adds	r4, #10
 800c994:	2509      	movs	r5, #9
 800c996:	e7f6      	b.n	800c986 <__s2b+0x66>
 800c998:	f814 3b01 	ldrb.w	r3, [r4], #1
 800c99c:	4601      	mov	r1, r0
 800c99e:	3b30      	subs	r3, #48	@ 0x30
 800c9a0:	220a      	movs	r2, #10
 800c9a2:	4630      	mov	r0, r6
 800c9a4:	f7ff ff76 	bl	800c894 <__multadd>
 800c9a8:	e7ee      	b.n	800c988 <__s2b+0x68>
 800c9aa:	bf00      	nop
 800c9ac:	0800f13d 	.word	0x0800f13d
 800c9b0:	0800f14e 	.word	0x0800f14e

0800c9b4 <__hi0bits>:
 800c9b4:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800c9b8:	4603      	mov	r3, r0
 800c9ba:	bf36      	itet	cc
 800c9bc:	0403      	lslcc	r3, r0, #16
 800c9be:	2000      	movcs	r0, #0
 800c9c0:	2010      	movcc	r0, #16
 800c9c2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800c9c6:	bf3c      	itt	cc
 800c9c8:	021b      	lslcc	r3, r3, #8
 800c9ca:	3008      	addcc	r0, #8
 800c9cc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800c9d0:	bf3c      	itt	cc
 800c9d2:	011b      	lslcc	r3, r3, #4
 800c9d4:	3004      	addcc	r0, #4
 800c9d6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c9da:	bf3c      	itt	cc
 800c9dc:	009b      	lslcc	r3, r3, #2
 800c9de:	3002      	addcc	r0, #2
 800c9e0:	2b00      	cmp	r3, #0
 800c9e2:	db05      	blt.n	800c9f0 <__hi0bits+0x3c>
 800c9e4:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800c9e8:	f100 0001 	add.w	r0, r0, #1
 800c9ec:	bf08      	it	eq
 800c9ee:	2020      	moveq	r0, #32
 800c9f0:	4770      	bx	lr

0800c9f2 <__lo0bits>:
 800c9f2:	6803      	ldr	r3, [r0, #0]
 800c9f4:	4602      	mov	r2, r0
 800c9f6:	f013 0007 	ands.w	r0, r3, #7
 800c9fa:	d00b      	beq.n	800ca14 <__lo0bits+0x22>
 800c9fc:	07d9      	lsls	r1, r3, #31
 800c9fe:	d421      	bmi.n	800ca44 <__lo0bits+0x52>
 800ca00:	0798      	lsls	r0, r3, #30
 800ca02:	bf49      	itett	mi
 800ca04:	085b      	lsrmi	r3, r3, #1
 800ca06:	089b      	lsrpl	r3, r3, #2
 800ca08:	2001      	movmi	r0, #1
 800ca0a:	6013      	strmi	r3, [r2, #0]
 800ca0c:	bf5c      	itt	pl
 800ca0e:	6013      	strpl	r3, [r2, #0]
 800ca10:	2002      	movpl	r0, #2
 800ca12:	4770      	bx	lr
 800ca14:	b299      	uxth	r1, r3
 800ca16:	b909      	cbnz	r1, 800ca1c <__lo0bits+0x2a>
 800ca18:	0c1b      	lsrs	r3, r3, #16
 800ca1a:	2010      	movs	r0, #16
 800ca1c:	b2d9      	uxtb	r1, r3
 800ca1e:	b909      	cbnz	r1, 800ca24 <__lo0bits+0x32>
 800ca20:	3008      	adds	r0, #8
 800ca22:	0a1b      	lsrs	r3, r3, #8
 800ca24:	0719      	lsls	r1, r3, #28
 800ca26:	bf04      	itt	eq
 800ca28:	091b      	lsreq	r3, r3, #4
 800ca2a:	3004      	addeq	r0, #4
 800ca2c:	0799      	lsls	r1, r3, #30
 800ca2e:	bf04      	itt	eq
 800ca30:	089b      	lsreq	r3, r3, #2
 800ca32:	3002      	addeq	r0, #2
 800ca34:	07d9      	lsls	r1, r3, #31
 800ca36:	d403      	bmi.n	800ca40 <__lo0bits+0x4e>
 800ca38:	085b      	lsrs	r3, r3, #1
 800ca3a:	f100 0001 	add.w	r0, r0, #1
 800ca3e:	d003      	beq.n	800ca48 <__lo0bits+0x56>
 800ca40:	6013      	str	r3, [r2, #0]
 800ca42:	4770      	bx	lr
 800ca44:	2000      	movs	r0, #0
 800ca46:	4770      	bx	lr
 800ca48:	2020      	movs	r0, #32
 800ca4a:	4770      	bx	lr

0800ca4c <__i2b>:
 800ca4c:	b510      	push	{r4, lr}
 800ca4e:	460c      	mov	r4, r1
 800ca50:	2101      	movs	r1, #1
 800ca52:	f7ff febd 	bl	800c7d0 <_Balloc>
 800ca56:	4602      	mov	r2, r0
 800ca58:	b928      	cbnz	r0, 800ca66 <__i2b+0x1a>
 800ca5a:	4b05      	ldr	r3, [pc, #20]	@ (800ca70 <__i2b+0x24>)
 800ca5c:	4805      	ldr	r0, [pc, #20]	@ (800ca74 <__i2b+0x28>)
 800ca5e:	f240 1145 	movw	r1, #325	@ 0x145
 800ca62:	f7fe ff3f 	bl	800b8e4 <__assert_func>
 800ca66:	2301      	movs	r3, #1
 800ca68:	6144      	str	r4, [r0, #20]
 800ca6a:	6103      	str	r3, [r0, #16]
 800ca6c:	bd10      	pop	{r4, pc}
 800ca6e:	bf00      	nop
 800ca70:	0800f13d 	.word	0x0800f13d
 800ca74:	0800f14e 	.word	0x0800f14e

0800ca78 <__multiply>:
 800ca78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ca7c:	4617      	mov	r7, r2
 800ca7e:	690a      	ldr	r2, [r1, #16]
 800ca80:	693b      	ldr	r3, [r7, #16]
 800ca82:	429a      	cmp	r2, r3
 800ca84:	bfa8      	it	ge
 800ca86:	463b      	movge	r3, r7
 800ca88:	4689      	mov	r9, r1
 800ca8a:	bfa4      	itt	ge
 800ca8c:	460f      	movge	r7, r1
 800ca8e:	4699      	movge	r9, r3
 800ca90:	693d      	ldr	r5, [r7, #16]
 800ca92:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800ca96:	68bb      	ldr	r3, [r7, #8]
 800ca98:	6879      	ldr	r1, [r7, #4]
 800ca9a:	eb05 060a 	add.w	r6, r5, sl
 800ca9e:	42b3      	cmp	r3, r6
 800caa0:	b085      	sub	sp, #20
 800caa2:	bfb8      	it	lt
 800caa4:	3101      	addlt	r1, #1
 800caa6:	f7ff fe93 	bl	800c7d0 <_Balloc>
 800caaa:	b930      	cbnz	r0, 800caba <__multiply+0x42>
 800caac:	4602      	mov	r2, r0
 800caae:	4b41      	ldr	r3, [pc, #260]	@ (800cbb4 <__multiply+0x13c>)
 800cab0:	4841      	ldr	r0, [pc, #260]	@ (800cbb8 <__multiply+0x140>)
 800cab2:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800cab6:	f7fe ff15 	bl	800b8e4 <__assert_func>
 800caba:	f100 0414 	add.w	r4, r0, #20
 800cabe:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800cac2:	4623      	mov	r3, r4
 800cac4:	2200      	movs	r2, #0
 800cac6:	4573      	cmp	r3, lr
 800cac8:	d320      	bcc.n	800cb0c <__multiply+0x94>
 800caca:	f107 0814 	add.w	r8, r7, #20
 800cace:	f109 0114 	add.w	r1, r9, #20
 800cad2:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800cad6:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800cada:	9302      	str	r3, [sp, #8]
 800cadc:	1beb      	subs	r3, r5, r7
 800cade:	3b15      	subs	r3, #21
 800cae0:	f023 0303 	bic.w	r3, r3, #3
 800cae4:	3304      	adds	r3, #4
 800cae6:	3715      	adds	r7, #21
 800cae8:	42bd      	cmp	r5, r7
 800caea:	bf38      	it	cc
 800caec:	2304      	movcc	r3, #4
 800caee:	9301      	str	r3, [sp, #4]
 800caf0:	9b02      	ldr	r3, [sp, #8]
 800caf2:	9103      	str	r1, [sp, #12]
 800caf4:	428b      	cmp	r3, r1
 800caf6:	d80c      	bhi.n	800cb12 <__multiply+0x9a>
 800caf8:	2e00      	cmp	r6, #0
 800cafa:	dd03      	ble.n	800cb04 <__multiply+0x8c>
 800cafc:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800cb00:	2b00      	cmp	r3, #0
 800cb02:	d055      	beq.n	800cbb0 <__multiply+0x138>
 800cb04:	6106      	str	r6, [r0, #16]
 800cb06:	b005      	add	sp, #20
 800cb08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cb0c:	f843 2b04 	str.w	r2, [r3], #4
 800cb10:	e7d9      	b.n	800cac6 <__multiply+0x4e>
 800cb12:	f8b1 a000 	ldrh.w	sl, [r1]
 800cb16:	f1ba 0f00 	cmp.w	sl, #0
 800cb1a:	d01f      	beq.n	800cb5c <__multiply+0xe4>
 800cb1c:	46c4      	mov	ip, r8
 800cb1e:	46a1      	mov	r9, r4
 800cb20:	2700      	movs	r7, #0
 800cb22:	f85c 2b04 	ldr.w	r2, [ip], #4
 800cb26:	f8d9 3000 	ldr.w	r3, [r9]
 800cb2a:	fa1f fb82 	uxth.w	fp, r2
 800cb2e:	b29b      	uxth	r3, r3
 800cb30:	fb0a 330b 	mla	r3, sl, fp, r3
 800cb34:	443b      	add	r3, r7
 800cb36:	f8d9 7000 	ldr.w	r7, [r9]
 800cb3a:	0c12      	lsrs	r2, r2, #16
 800cb3c:	0c3f      	lsrs	r7, r7, #16
 800cb3e:	fb0a 7202 	mla	r2, sl, r2, r7
 800cb42:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800cb46:	b29b      	uxth	r3, r3
 800cb48:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800cb4c:	4565      	cmp	r5, ip
 800cb4e:	f849 3b04 	str.w	r3, [r9], #4
 800cb52:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800cb56:	d8e4      	bhi.n	800cb22 <__multiply+0xaa>
 800cb58:	9b01      	ldr	r3, [sp, #4]
 800cb5a:	50e7      	str	r7, [r4, r3]
 800cb5c:	9b03      	ldr	r3, [sp, #12]
 800cb5e:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800cb62:	3104      	adds	r1, #4
 800cb64:	f1b9 0f00 	cmp.w	r9, #0
 800cb68:	d020      	beq.n	800cbac <__multiply+0x134>
 800cb6a:	6823      	ldr	r3, [r4, #0]
 800cb6c:	4647      	mov	r7, r8
 800cb6e:	46a4      	mov	ip, r4
 800cb70:	f04f 0a00 	mov.w	sl, #0
 800cb74:	f8b7 b000 	ldrh.w	fp, [r7]
 800cb78:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800cb7c:	fb09 220b 	mla	r2, r9, fp, r2
 800cb80:	4452      	add	r2, sl
 800cb82:	b29b      	uxth	r3, r3
 800cb84:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800cb88:	f84c 3b04 	str.w	r3, [ip], #4
 800cb8c:	f857 3b04 	ldr.w	r3, [r7], #4
 800cb90:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800cb94:	f8bc 3000 	ldrh.w	r3, [ip]
 800cb98:	fb09 330a 	mla	r3, r9, sl, r3
 800cb9c:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 800cba0:	42bd      	cmp	r5, r7
 800cba2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800cba6:	d8e5      	bhi.n	800cb74 <__multiply+0xfc>
 800cba8:	9a01      	ldr	r2, [sp, #4]
 800cbaa:	50a3      	str	r3, [r4, r2]
 800cbac:	3404      	adds	r4, #4
 800cbae:	e79f      	b.n	800caf0 <__multiply+0x78>
 800cbb0:	3e01      	subs	r6, #1
 800cbb2:	e7a1      	b.n	800caf8 <__multiply+0x80>
 800cbb4:	0800f13d 	.word	0x0800f13d
 800cbb8:	0800f14e 	.word	0x0800f14e

0800cbbc <__pow5mult>:
 800cbbc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cbc0:	4615      	mov	r5, r2
 800cbc2:	f012 0203 	ands.w	r2, r2, #3
 800cbc6:	4607      	mov	r7, r0
 800cbc8:	460e      	mov	r6, r1
 800cbca:	d007      	beq.n	800cbdc <__pow5mult+0x20>
 800cbcc:	4c25      	ldr	r4, [pc, #148]	@ (800cc64 <__pow5mult+0xa8>)
 800cbce:	3a01      	subs	r2, #1
 800cbd0:	2300      	movs	r3, #0
 800cbd2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800cbd6:	f7ff fe5d 	bl	800c894 <__multadd>
 800cbda:	4606      	mov	r6, r0
 800cbdc:	10ad      	asrs	r5, r5, #2
 800cbde:	d03d      	beq.n	800cc5c <__pow5mult+0xa0>
 800cbe0:	69fc      	ldr	r4, [r7, #28]
 800cbe2:	b97c      	cbnz	r4, 800cc04 <__pow5mult+0x48>
 800cbe4:	2010      	movs	r0, #16
 800cbe6:	f7ff fd3d 	bl	800c664 <malloc>
 800cbea:	4602      	mov	r2, r0
 800cbec:	61f8      	str	r0, [r7, #28]
 800cbee:	b928      	cbnz	r0, 800cbfc <__pow5mult+0x40>
 800cbf0:	4b1d      	ldr	r3, [pc, #116]	@ (800cc68 <__pow5mult+0xac>)
 800cbf2:	481e      	ldr	r0, [pc, #120]	@ (800cc6c <__pow5mult+0xb0>)
 800cbf4:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800cbf8:	f7fe fe74 	bl	800b8e4 <__assert_func>
 800cbfc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800cc00:	6004      	str	r4, [r0, #0]
 800cc02:	60c4      	str	r4, [r0, #12]
 800cc04:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800cc08:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800cc0c:	b94c      	cbnz	r4, 800cc22 <__pow5mult+0x66>
 800cc0e:	f240 2171 	movw	r1, #625	@ 0x271
 800cc12:	4638      	mov	r0, r7
 800cc14:	f7ff ff1a 	bl	800ca4c <__i2b>
 800cc18:	2300      	movs	r3, #0
 800cc1a:	f8c8 0008 	str.w	r0, [r8, #8]
 800cc1e:	4604      	mov	r4, r0
 800cc20:	6003      	str	r3, [r0, #0]
 800cc22:	f04f 0900 	mov.w	r9, #0
 800cc26:	07eb      	lsls	r3, r5, #31
 800cc28:	d50a      	bpl.n	800cc40 <__pow5mult+0x84>
 800cc2a:	4631      	mov	r1, r6
 800cc2c:	4622      	mov	r2, r4
 800cc2e:	4638      	mov	r0, r7
 800cc30:	f7ff ff22 	bl	800ca78 <__multiply>
 800cc34:	4631      	mov	r1, r6
 800cc36:	4680      	mov	r8, r0
 800cc38:	4638      	mov	r0, r7
 800cc3a:	f7ff fe09 	bl	800c850 <_Bfree>
 800cc3e:	4646      	mov	r6, r8
 800cc40:	106d      	asrs	r5, r5, #1
 800cc42:	d00b      	beq.n	800cc5c <__pow5mult+0xa0>
 800cc44:	6820      	ldr	r0, [r4, #0]
 800cc46:	b938      	cbnz	r0, 800cc58 <__pow5mult+0x9c>
 800cc48:	4622      	mov	r2, r4
 800cc4a:	4621      	mov	r1, r4
 800cc4c:	4638      	mov	r0, r7
 800cc4e:	f7ff ff13 	bl	800ca78 <__multiply>
 800cc52:	6020      	str	r0, [r4, #0]
 800cc54:	f8c0 9000 	str.w	r9, [r0]
 800cc58:	4604      	mov	r4, r0
 800cc5a:	e7e4      	b.n	800cc26 <__pow5mult+0x6a>
 800cc5c:	4630      	mov	r0, r6
 800cc5e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cc62:	bf00      	nop
 800cc64:	0800f224 	.word	0x0800f224
 800cc68:	0800eff4 	.word	0x0800eff4
 800cc6c:	0800f14e 	.word	0x0800f14e

0800cc70 <__lshift>:
 800cc70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cc74:	460c      	mov	r4, r1
 800cc76:	6849      	ldr	r1, [r1, #4]
 800cc78:	6923      	ldr	r3, [r4, #16]
 800cc7a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800cc7e:	68a3      	ldr	r3, [r4, #8]
 800cc80:	4607      	mov	r7, r0
 800cc82:	4691      	mov	r9, r2
 800cc84:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800cc88:	f108 0601 	add.w	r6, r8, #1
 800cc8c:	42b3      	cmp	r3, r6
 800cc8e:	db0b      	blt.n	800cca8 <__lshift+0x38>
 800cc90:	4638      	mov	r0, r7
 800cc92:	f7ff fd9d 	bl	800c7d0 <_Balloc>
 800cc96:	4605      	mov	r5, r0
 800cc98:	b948      	cbnz	r0, 800ccae <__lshift+0x3e>
 800cc9a:	4602      	mov	r2, r0
 800cc9c:	4b28      	ldr	r3, [pc, #160]	@ (800cd40 <__lshift+0xd0>)
 800cc9e:	4829      	ldr	r0, [pc, #164]	@ (800cd44 <__lshift+0xd4>)
 800cca0:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800cca4:	f7fe fe1e 	bl	800b8e4 <__assert_func>
 800cca8:	3101      	adds	r1, #1
 800ccaa:	005b      	lsls	r3, r3, #1
 800ccac:	e7ee      	b.n	800cc8c <__lshift+0x1c>
 800ccae:	2300      	movs	r3, #0
 800ccb0:	f100 0114 	add.w	r1, r0, #20
 800ccb4:	f100 0210 	add.w	r2, r0, #16
 800ccb8:	4618      	mov	r0, r3
 800ccba:	4553      	cmp	r3, sl
 800ccbc:	db33      	blt.n	800cd26 <__lshift+0xb6>
 800ccbe:	6920      	ldr	r0, [r4, #16]
 800ccc0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800ccc4:	f104 0314 	add.w	r3, r4, #20
 800ccc8:	f019 091f 	ands.w	r9, r9, #31
 800cccc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800ccd0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800ccd4:	d02b      	beq.n	800cd2e <__lshift+0xbe>
 800ccd6:	f1c9 0e20 	rsb	lr, r9, #32
 800ccda:	468a      	mov	sl, r1
 800ccdc:	2200      	movs	r2, #0
 800ccde:	6818      	ldr	r0, [r3, #0]
 800cce0:	fa00 f009 	lsl.w	r0, r0, r9
 800cce4:	4310      	orrs	r0, r2
 800cce6:	f84a 0b04 	str.w	r0, [sl], #4
 800ccea:	f853 2b04 	ldr.w	r2, [r3], #4
 800ccee:	459c      	cmp	ip, r3
 800ccf0:	fa22 f20e 	lsr.w	r2, r2, lr
 800ccf4:	d8f3      	bhi.n	800ccde <__lshift+0x6e>
 800ccf6:	ebac 0304 	sub.w	r3, ip, r4
 800ccfa:	3b15      	subs	r3, #21
 800ccfc:	f023 0303 	bic.w	r3, r3, #3
 800cd00:	3304      	adds	r3, #4
 800cd02:	f104 0015 	add.w	r0, r4, #21
 800cd06:	4560      	cmp	r0, ip
 800cd08:	bf88      	it	hi
 800cd0a:	2304      	movhi	r3, #4
 800cd0c:	50ca      	str	r2, [r1, r3]
 800cd0e:	b10a      	cbz	r2, 800cd14 <__lshift+0xa4>
 800cd10:	f108 0602 	add.w	r6, r8, #2
 800cd14:	3e01      	subs	r6, #1
 800cd16:	4638      	mov	r0, r7
 800cd18:	612e      	str	r6, [r5, #16]
 800cd1a:	4621      	mov	r1, r4
 800cd1c:	f7ff fd98 	bl	800c850 <_Bfree>
 800cd20:	4628      	mov	r0, r5
 800cd22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cd26:	f842 0f04 	str.w	r0, [r2, #4]!
 800cd2a:	3301      	adds	r3, #1
 800cd2c:	e7c5      	b.n	800ccba <__lshift+0x4a>
 800cd2e:	3904      	subs	r1, #4
 800cd30:	f853 2b04 	ldr.w	r2, [r3], #4
 800cd34:	f841 2f04 	str.w	r2, [r1, #4]!
 800cd38:	459c      	cmp	ip, r3
 800cd3a:	d8f9      	bhi.n	800cd30 <__lshift+0xc0>
 800cd3c:	e7ea      	b.n	800cd14 <__lshift+0xa4>
 800cd3e:	bf00      	nop
 800cd40:	0800f13d 	.word	0x0800f13d
 800cd44:	0800f14e 	.word	0x0800f14e

0800cd48 <__mcmp>:
 800cd48:	690a      	ldr	r2, [r1, #16]
 800cd4a:	4603      	mov	r3, r0
 800cd4c:	6900      	ldr	r0, [r0, #16]
 800cd4e:	1a80      	subs	r0, r0, r2
 800cd50:	b530      	push	{r4, r5, lr}
 800cd52:	d10e      	bne.n	800cd72 <__mcmp+0x2a>
 800cd54:	3314      	adds	r3, #20
 800cd56:	3114      	adds	r1, #20
 800cd58:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800cd5c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800cd60:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800cd64:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800cd68:	4295      	cmp	r5, r2
 800cd6a:	d003      	beq.n	800cd74 <__mcmp+0x2c>
 800cd6c:	d205      	bcs.n	800cd7a <__mcmp+0x32>
 800cd6e:	f04f 30ff 	mov.w	r0, #4294967295
 800cd72:	bd30      	pop	{r4, r5, pc}
 800cd74:	42a3      	cmp	r3, r4
 800cd76:	d3f3      	bcc.n	800cd60 <__mcmp+0x18>
 800cd78:	e7fb      	b.n	800cd72 <__mcmp+0x2a>
 800cd7a:	2001      	movs	r0, #1
 800cd7c:	e7f9      	b.n	800cd72 <__mcmp+0x2a>
	...

0800cd80 <__mdiff>:
 800cd80:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cd84:	4689      	mov	r9, r1
 800cd86:	4606      	mov	r6, r0
 800cd88:	4611      	mov	r1, r2
 800cd8a:	4648      	mov	r0, r9
 800cd8c:	4614      	mov	r4, r2
 800cd8e:	f7ff ffdb 	bl	800cd48 <__mcmp>
 800cd92:	1e05      	subs	r5, r0, #0
 800cd94:	d112      	bne.n	800cdbc <__mdiff+0x3c>
 800cd96:	4629      	mov	r1, r5
 800cd98:	4630      	mov	r0, r6
 800cd9a:	f7ff fd19 	bl	800c7d0 <_Balloc>
 800cd9e:	4602      	mov	r2, r0
 800cda0:	b928      	cbnz	r0, 800cdae <__mdiff+0x2e>
 800cda2:	4b3f      	ldr	r3, [pc, #252]	@ (800cea0 <__mdiff+0x120>)
 800cda4:	f240 2137 	movw	r1, #567	@ 0x237
 800cda8:	483e      	ldr	r0, [pc, #248]	@ (800cea4 <__mdiff+0x124>)
 800cdaa:	f7fe fd9b 	bl	800b8e4 <__assert_func>
 800cdae:	2301      	movs	r3, #1
 800cdb0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800cdb4:	4610      	mov	r0, r2
 800cdb6:	b003      	add	sp, #12
 800cdb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cdbc:	bfbc      	itt	lt
 800cdbe:	464b      	movlt	r3, r9
 800cdc0:	46a1      	movlt	r9, r4
 800cdc2:	4630      	mov	r0, r6
 800cdc4:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800cdc8:	bfba      	itte	lt
 800cdca:	461c      	movlt	r4, r3
 800cdcc:	2501      	movlt	r5, #1
 800cdce:	2500      	movge	r5, #0
 800cdd0:	f7ff fcfe 	bl	800c7d0 <_Balloc>
 800cdd4:	4602      	mov	r2, r0
 800cdd6:	b918      	cbnz	r0, 800cde0 <__mdiff+0x60>
 800cdd8:	4b31      	ldr	r3, [pc, #196]	@ (800cea0 <__mdiff+0x120>)
 800cdda:	f240 2145 	movw	r1, #581	@ 0x245
 800cdde:	e7e3      	b.n	800cda8 <__mdiff+0x28>
 800cde0:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800cde4:	6926      	ldr	r6, [r4, #16]
 800cde6:	60c5      	str	r5, [r0, #12]
 800cde8:	f109 0310 	add.w	r3, r9, #16
 800cdec:	f109 0514 	add.w	r5, r9, #20
 800cdf0:	f104 0e14 	add.w	lr, r4, #20
 800cdf4:	f100 0b14 	add.w	fp, r0, #20
 800cdf8:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800cdfc:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800ce00:	9301      	str	r3, [sp, #4]
 800ce02:	46d9      	mov	r9, fp
 800ce04:	f04f 0c00 	mov.w	ip, #0
 800ce08:	9b01      	ldr	r3, [sp, #4]
 800ce0a:	f85e 0b04 	ldr.w	r0, [lr], #4
 800ce0e:	f853 af04 	ldr.w	sl, [r3, #4]!
 800ce12:	9301      	str	r3, [sp, #4]
 800ce14:	fa1f f38a 	uxth.w	r3, sl
 800ce18:	4619      	mov	r1, r3
 800ce1a:	b283      	uxth	r3, r0
 800ce1c:	1acb      	subs	r3, r1, r3
 800ce1e:	0c00      	lsrs	r0, r0, #16
 800ce20:	4463      	add	r3, ip
 800ce22:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800ce26:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800ce2a:	b29b      	uxth	r3, r3
 800ce2c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800ce30:	4576      	cmp	r6, lr
 800ce32:	f849 3b04 	str.w	r3, [r9], #4
 800ce36:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800ce3a:	d8e5      	bhi.n	800ce08 <__mdiff+0x88>
 800ce3c:	1b33      	subs	r3, r6, r4
 800ce3e:	3b15      	subs	r3, #21
 800ce40:	f023 0303 	bic.w	r3, r3, #3
 800ce44:	3415      	adds	r4, #21
 800ce46:	3304      	adds	r3, #4
 800ce48:	42a6      	cmp	r6, r4
 800ce4a:	bf38      	it	cc
 800ce4c:	2304      	movcc	r3, #4
 800ce4e:	441d      	add	r5, r3
 800ce50:	445b      	add	r3, fp
 800ce52:	461e      	mov	r6, r3
 800ce54:	462c      	mov	r4, r5
 800ce56:	4544      	cmp	r4, r8
 800ce58:	d30e      	bcc.n	800ce78 <__mdiff+0xf8>
 800ce5a:	f108 0103 	add.w	r1, r8, #3
 800ce5e:	1b49      	subs	r1, r1, r5
 800ce60:	f021 0103 	bic.w	r1, r1, #3
 800ce64:	3d03      	subs	r5, #3
 800ce66:	45a8      	cmp	r8, r5
 800ce68:	bf38      	it	cc
 800ce6a:	2100      	movcc	r1, #0
 800ce6c:	440b      	add	r3, r1
 800ce6e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800ce72:	b191      	cbz	r1, 800ce9a <__mdiff+0x11a>
 800ce74:	6117      	str	r7, [r2, #16]
 800ce76:	e79d      	b.n	800cdb4 <__mdiff+0x34>
 800ce78:	f854 1b04 	ldr.w	r1, [r4], #4
 800ce7c:	46e6      	mov	lr, ip
 800ce7e:	0c08      	lsrs	r0, r1, #16
 800ce80:	fa1c fc81 	uxtah	ip, ip, r1
 800ce84:	4471      	add	r1, lr
 800ce86:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800ce8a:	b289      	uxth	r1, r1
 800ce8c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800ce90:	f846 1b04 	str.w	r1, [r6], #4
 800ce94:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800ce98:	e7dd      	b.n	800ce56 <__mdiff+0xd6>
 800ce9a:	3f01      	subs	r7, #1
 800ce9c:	e7e7      	b.n	800ce6e <__mdiff+0xee>
 800ce9e:	bf00      	nop
 800cea0:	0800f13d 	.word	0x0800f13d
 800cea4:	0800f14e 	.word	0x0800f14e

0800cea8 <__ulp>:
 800cea8:	b082      	sub	sp, #8
 800ceaa:	ed8d 0b00 	vstr	d0, [sp]
 800ceae:	9a01      	ldr	r2, [sp, #4]
 800ceb0:	4b0f      	ldr	r3, [pc, #60]	@ (800cef0 <__ulp+0x48>)
 800ceb2:	4013      	ands	r3, r2
 800ceb4:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800ceb8:	2b00      	cmp	r3, #0
 800ceba:	dc08      	bgt.n	800cece <__ulp+0x26>
 800cebc:	425b      	negs	r3, r3
 800cebe:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800cec2:	ea4f 5223 	mov.w	r2, r3, asr #20
 800cec6:	da04      	bge.n	800ced2 <__ulp+0x2a>
 800cec8:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800cecc:	4113      	asrs	r3, r2
 800cece:	2200      	movs	r2, #0
 800ced0:	e008      	b.n	800cee4 <__ulp+0x3c>
 800ced2:	f1a2 0314 	sub.w	r3, r2, #20
 800ced6:	2b1e      	cmp	r3, #30
 800ced8:	bfda      	itte	le
 800ceda:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800cede:	40da      	lsrle	r2, r3
 800cee0:	2201      	movgt	r2, #1
 800cee2:	2300      	movs	r3, #0
 800cee4:	4619      	mov	r1, r3
 800cee6:	4610      	mov	r0, r2
 800cee8:	ec41 0b10 	vmov	d0, r0, r1
 800ceec:	b002      	add	sp, #8
 800ceee:	4770      	bx	lr
 800cef0:	7ff00000 	.word	0x7ff00000

0800cef4 <__b2d>:
 800cef4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cef8:	6906      	ldr	r6, [r0, #16]
 800cefa:	f100 0814 	add.w	r8, r0, #20
 800cefe:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800cf02:	1f37      	subs	r7, r6, #4
 800cf04:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800cf08:	4610      	mov	r0, r2
 800cf0a:	f7ff fd53 	bl	800c9b4 <__hi0bits>
 800cf0e:	f1c0 0320 	rsb	r3, r0, #32
 800cf12:	280a      	cmp	r0, #10
 800cf14:	600b      	str	r3, [r1, #0]
 800cf16:	491b      	ldr	r1, [pc, #108]	@ (800cf84 <__b2d+0x90>)
 800cf18:	dc15      	bgt.n	800cf46 <__b2d+0x52>
 800cf1a:	f1c0 0c0b 	rsb	ip, r0, #11
 800cf1e:	fa22 f30c 	lsr.w	r3, r2, ip
 800cf22:	45b8      	cmp	r8, r7
 800cf24:	ea43 0501 	orr.w	r5, r3, r1
 800cf28:	bf34      	ite	cc
 800cf2a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800cf2e:	2300      	movcs	r3, #0
 800cf30:	3015      	adds	r0, #21
 800cf32:	fa02 f000 	lsl.w	r0, r2, r0
 800cf36:	fa23 f30c 	lsr.w	r3, r3, ip
 800cf3a:	4303      	orrs	r3, r0
 800cf3c:	461c      	mov	r4, r3
 800cf3e:	ec45 4b10 	vmov	d0, r4, r5
 800cf42:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cf46:	45b8      	cmp	r8, r7
 800cf48:	bf3a      	itte	cc
 800cf4a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800cf4e:	f1a6 0708 	subcc.w	r7, r6, #8
 800cf52:	2300      	movcs	r3, #0
 800cf54:	380b      	subs	r0, #11
 800cf56:	d012      	beq.n	800cf7e <__b2d+0x8a>
 800cf58:	f1c0 0120 	rsb	r1, r0, #32
 800cf5c:	fa23 f401 	lsr.w	r4, r3, r1
 800cf60:	4082      	lsls	r2, r0
 800cf62:	4322      	orrs	r2, r4
 800cf64:	4547      	cmp	r7, r8
 800cf66:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800cf6a:	bf8c      	ite	hi
 800cf6c:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800cf70:	2200      	movls	r2, #0
 800cf72:	4083      	lsls	r3, r0
 800cf74:	40ca      	lsrs	r2, r1
 800cf76:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800cf7a:	4313      	orrs	r3, r2
 800cf7c:	e7de      	b.n	800cf3c <__b2d+0x48>
 800cf7e:	ea42 0501 	orr.w	r5, r2, r1
 800cf82:	e7db      	b.n	800cf3c <__b2d+0x48>
 800cf84:	3ff00000 	.word	0x3ff00000

0800cf88 <__d2b>:
 800cf88:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800cf8c:	460f      	mov	r7, r1
 800cf8e:	2101      	movs	r1, #1
 800cf90:	ec59 8b10 	vmov	r8, r9, d0
 800cf94:	4616      	mov	r6, r2
 800cf96:	f7ff fc1b 	bl	800c7d0 <_Balloc>
 800cf9a:	4604      	mov	r4, r0
 800cf9c:	b930      	cbnz	r0, 800cfac <__d2b+0x24>
 800cf9e:	4602      	mov	r2, r0
 800cfa0:	4b23      	ldr	r3, [pc, #140]	@ (800d030 <__d2b+0xa8>)
 800cfa2:	4824      	ldr	r0, [pc, #144]	@ (800d034 <__d2b+0xac>)
 800cfa4:	f240 310f 	movw	r1, #783	@ 0x30f
 800cfa8:	f7fe fc9c 	bl	800b8e4 <__assert_func>
 800cfac:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800cfb0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800cfb4:	b10d      	cbz	r5, 800cfba <__d2b+0x32>
 800cfb6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800cfba:	9301      	str	r3, [sp, #4]
 800cfbc:	f1b8 0300 	subs.w	r3, r8, #0
 800cfc0:	d023      	beq.n	800d00a <__d2b+0x82>
 800cfc2:	4668      	mov	r0, sp
 800cfc4:	9300      	str	r3, [sp, #0]
 800cfc6:	f7ff fd14 	bl	800c9f2 <__lo0bits>
 800cfca:	e9dd 1200 	ldrd	r1, r2, [sp]
 800cfce:	b1d0      	cbz	r0, 800d006 <__d2b+0x7e>
 800cfd0:	f1c0 0320 	rsb	r3, r0, #32
 800cfd4:	fa02 f303 	lsl.w	r3, r2, r3
 800cfd8:	430b      	orrs	r3, r1
 800cfda:	40c2      	lsrs	r2, r0
 800cfdc:	6163      	str	r3, [r4, #20]
 800cfde:	9201      	str	r2, [sp, #4]
 800cfe0:	9b01      	ldr	r3, [sp, #4]
 800cfe2:	61a3      	str	r3, [r4, #24]
 800cfe4:	2b00      	cmp	r3, #0
 800cfe6:	bf0c      	ite	eq
 800cfe8:	2201      	moveq	r2, #1
 800cfea:	2202      	movne	r2, #2
 800cfec:	6122      	str	r2, [r4, #16]
 800cfee:	b1a5      	cbz	r5, 800d01a <__d2b+0x92>
 800cff0:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800cff4:	4405      	add	r5, r0
 800cff6:	603d      	str	r5, [r7, #0]
 800cff8:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800cffc:	6030      	str	r0, [r6, #0]
 800cffe:	4620      	mov	r0, r4
 800d000:	b003      	add	sp, #12
 800d002:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d006:	6161      	str	r1, [r4, #20]
 800d008:	e7ea      	b.n	800cfe0 <__d2b+0x58>
 800d00a:	a801      	add	r0, sp, #4
 800d00c:	f7ff fcf1 	bl	800c9f2 <__lo0bits>
 800d010:	9b01      	ldr	r3, [sp, #4]
 800d012:	6163      	str	r3, [r4, #20]
 800d014:	3020      	adds	r0, #32
 800d016:	2201      	movs	r2, #1
 800d018:	e7e8      	b.n	800cfec <__d2b+0x64>
 800d01a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800d01e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800d022:	6038      	str	r0, [r7, #0]
 800d024:	6918      	ldr	r0, [r3, #16]
 800d026:	f7ff fcc5 	bl	800c9b4 <__hi0bits>
 800d02a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800d02e:	e7e5      	b.n	800cffc <__d2b+0x74>
 800d030:	0800f13d 	.word	0x0800f13d
 800d034:	0800f14e 	.word	0x0800f14e

0800d038 <__ratio>:
 800d038:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d03c:	b085      	sub	sp, #20
 800d03e:	e9cd 1000 	strd	r1, r0, [sp]
 800d042:	a902      	add	r1, sp, #8
 800d044:	f7ff ff56 	bl	800cef4 <__b2d>
 800d048:	9800      	ldr	r0, [sp, #0]
 800d04a:	a903      	add	r1, sp, #12
 800d04c:	ec55 4b10 	vmov	r4, r5, d0
 800d050:	f7ff ff50 	bl	800cef4 <__b2d>
 800d054:	9b01      	ldr	r3, [sp, #4]
 800d056:	6919      	ldr	r1, [r3, #16]
 800d058:	9b00      	ldr	r3, [sp, #0]
 800d05a:	691b      	ldr	r3, [r3, #16]
 800d05c:	1ac9      	subs	r1, r1, r3
 800d05e:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800d062:	1a9b      	subs	r3, r3, r2
 800d064:	ec5b ab10 	vmov	sl, fp, d0
 800d068:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800d06c:	2b00      	cmp	r3, #0
 800d06e:	bfce      	itee	gt
 800d070:	462a      	movgt	r2, r5
 800d072:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800d076:	465a      	movle	r2, fp
 800d078:	462f      	mov	r7, r5
 800d07a:	46d9      	mov	r9, fp
 800d07c:	bfcc      	ite	gt
 800d07e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800d082:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800d086:	464b      	mov	r3, r9
 800d088:	4652      	mov	r2, sl
 800d08a:	4620      	mov	r0, r4
 800d08c:	4639      	mov	r1, r7
 800d08e:	f7f3 fbdd 	bl	800084c <__aeabi_ddiv>
 800d092:	ec41 0b10 	vmov	d0, r0, r1
 800d096:	b005      	add	sp, #20
 800d098:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800d09c <__copybits>:
 800d09c:	3901      	subs	r1, #1
 800d09e:	b570      	push	{r4, r5, r6, lr}
 800d0a0:	1149      	asrs	r1, r1, #5
 800d0a2:	6914      	ldr	r4, [r2, #16]
 800d0a4:	3101      	adds	r1, #1
 800d0a6:	f102 0314 	add.w	r3, r2, #20
 800d0aa:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800d0ae:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800d0b2:	1f05      	subs	r5, r0, #4
 800d0b4:	42a3      	cmp	r3, r4
 800d0b6:	d30c      	bcc.n	800d0d2 <__copybits+0x36>
 800d0b8:	1aa3      	subs	r3, r4, r2
 800d0ba:	3b11      	subs	r3, #17
 800d0bc:	f023 0303 	bic.w	r3, r3, #3
 800d0c0:	3211      	adds	r2, #17
 800d0c2:	42a2      	cmp	r2, r4
 800d0c4:	bf88      	it	hi
 800d0c6:	2300      	movhi	r3, #0
 800d0c8:	4418      	add	r0, r3
 800d0ca:	2300      	movs	r3, #0
 800d0cc:	4288      	cmp	r0, r1
 800d0ce:	d305      	bcc.n	800d0dc <__copybits+0x40>
 800d0d0:	bd70      	pop	{r4, r5, r6, pc}
 800d0d2:	f853 6b04 	ldr.w	r6, [r3], #4
 800d0d6:	f845 6f04 	str.w	r6, [r5, #4]!
 800d0da:	e7eb      	b.n	800d0b4 <__copybits+0x18>
 800d0dc:	f840 3b04 	str.w	r3, [r0], #4
 800d0e0:	e7f4      	b.n	800d0cc <__copybits+0x30>

0800d0e2 <__any_on>:
 800d0e2:	f100 0214 	add.w	r2, r0, #20
 800d0e6:	6900      	ldr	r0, [r0, #16]
 800d0e8:	114b      	asrs	r3, r1, #5
 800d0ea:	4298      	cmp	r0, r3
 800d0ec:	b510      	push	{r4, lr}
 800d0ee:	db11      	blt.n	800d114 <__any_on+0x32>
 800d0f0:	dd0a      	ble.n	800d108 <__any_on+0x26>
 800d0f2:	f011 011f 	ands.w	r1, r1, #31
 800d0f6:	d007      	beq.n	800d108 <__any_on+0x26>
 800d0f8:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800d0fc:	fa24 f001 	lsr.w	r0, r4, r1
 800d100:	fa00 f101 	lsl.w	r1, r0, r1
 800d104:	428c      	cmp	r4, r1
 800d106:	d10b      	bne.n	800d120 <__any_on+0x3e>
 800d108:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800d10c:	4293      	cmp	r3, r2
 800d10e:	d803      	bhi.n	800d118 <__any_on+0x36>
 800d110:	2000      	movs	r0, #0
 800d112:	bd10      	pop	{r4, pc}
 800d114:	4603      	mov	r3, r0
 800d116:	e7f7      	b.n	800d108 <__any_on+0x26>
 800d118:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800d11c:	2900      	cmp	r1, #0
 800d11e:	d0f5      	beq.n	800d10c <__any_on+0x2a>
 800d120:	2001      	movs	r0, #1
 800d122:	e7f6      	b.n	800d112 <__any_on+0x30>

0800d124 <sulp>:
 800d124:	b570      	push	{r4, r5, r6, lr}
 800d126:	4604      	mov	r4, r0
 800d128:	460d      	mov	r5, r1
 800d12a:	ec45 4b10 	vmov	d0, r4, r5
 800d12e:	4616      	mov	r6, r2
 800d130:	f7ff feba 	bl	800cea8 <__ulp>
 800d134:	ec51 0b10 	vmov	r0, r1, d0
 800d138:	b17e      	cbz	r6, 800d15a <sulp+0x36>
 800d13a:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800d13e:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800d142:	2b00      	cmp	r3, #0
 800d144:	dd09      	ble.n	800d15a <sulp+0x36>
 800d146:	051b      	lsls	r3, r3, #20
 800d148:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800d14c:	2400      	movs	r4, #0
 800d14e:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800d152:	4622      	mov	r2, r4
 800d154:	462b      	mov	r3, r5
 800d156:	f7f3 fa4f 	bl	80005f8 <__aeabi_dmul>
 800d15a:	ec41 0b10 	vmov	d0, r0, r1
 800d15e:	bd70      	pop	{r4, r5, r6, pc}

0800d160 <_strtod_l>:
 800d160:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d164:	b09f      	sub	sp, #124	@ 0x7c
 800d166:	460c      	mov	r4, r1
 800d168:	9217      	str	r2, [sp, #92]	@ 0x5c
 800d16a:	2200      	movs	r2, #0
 800d16c:	921a      	str	r2, [sp, #104]	@ 0x68
 800d16e:	9005      	str	r0, [sp, #20]
 800d170:	f04f 0a00 	mov.w	sl, #0
 800d174:	f04f 0b00 	mov.w	fp, #0
 800d178:	460a      	mov	r2, r1
 800d17a:	9219      	str	r2, [sp, #100]	@ 0x64
 800d17c:	7811      	ldrb	r1, [r2, #0]
 800d17e:	292b      	cmp	r1, #43	@ 0x2b
 800d180:	d04a      	beq.n	800d218 <_strtod_l+0xb8>
 800d182:	d838      	bhi.n	800d1f6 <_strtod_l+0x96>
 800d184:	290d      	cmp	r1, #13
 800d186:	d832      	bhi.n	800d1ee <_strtod_l+0x8e>
 800d188:	2908      	cmp	r1, #8
 800d18a:	d832      	bhi.n	800d1f2 <_strtod_l+0x92>
 800d18c:	2900      	cmp	r1, #0
 800d18e:	d03b      	beq.n	800d208 <_strtod_l+0xa8>
 800d190:	2200      	movs	r2, #0
 800d192:	920e      	str	r2, [sp, #56]	@ 0x38
 800d194:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800d196:	782a      	ldrb	r2, [r5, #0]
 800d198:	2a30      	cmp	r2, #48	@ 0x30
 800d19a:	f040 80b2 	bne.w	800d302 <_strtod_l+0x1a2>
 800d19e:	786a      	ldrb	r2, [r5, #1]
 800d1a0:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800d1a4:	2a58      	cmp	r2, #88	@ 0x58
 800d1a6:	d16e      	bne.n	800d286 <_strtod_l+0x126>
 800d1a8:	9302      	str	r3, [sp, #8]
 800d1aa:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d1ac:	9301      	str	r3, [sp, #4]
 800d1ae:	ab1a      	add	r3, sp, #104	@ 0x68
 800d1b0:	9300      	str	r3, [sp, #0]
 800d1b2:	4a8f      	ldr	r2, [pc, #572]	@ (800d3f0 <_strtod_l+0x290>)
 800d1b4:	9805      	ldr	r0, [sp, #20]
 800d1b6:	ab1b      	add	r3, sp, #108	@ 0x6c
 800d1b8:	a919      	add	r1, sp, #100	@ 0x64
 800d1ba:	f001 f913 	bl	800e3e4 <__gethex>
 800d1be:	f010 060f 	ands.w	r6, r0, #15
 800d1c2:	4604      	mov	r4, r0
 800d1c4:	d005      	beq.n	800d1d2 <_strtod_l+0x72>
 800d1c6:	2e06      	cmp	r6, #6
 800d1c8:	d128      	bne.n	800d21c <_strtod_l+0xbc>
 800d1ca:	3501      	adds	r5, #1
 800d1cc:	2300      	movs	r3, #0
 800d1ce:	9519      	str	r5, [sp, #100]	@ 0x64
 800d1d0:	930e      	str	r3, [sp, #56]	@ 0x38
 800d1d2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800d1d4:	2b00      	cmp	r3, #0
 800d1d6:	f040 858e 	bne.w	800dcf6 <_strtod_l+0xb96>
 800d1da:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d1dc:	b1cb      	cbz	r3, 800d212 <_strtod_l+0xb2>
 800d1de:	4652      	mov	r2, sl
 800d1e0:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800d1e4:	ec43 2b10 	vmov	d0, r2, r3
 800d1e8:	b01f      	add	sp, #124	@ 0x7c
 800d1ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d1ee:	2920      	cmp	r1, #32
 800d1f0:	d1ce      	bne.n	800d190 <_strtod_l+0x30>
 800d1f2:	3201      	adds	r2, #1
 800d1f4:	e7c1      	b.n	800d17a <_strtod_l+0x1a>
 800d1f6:	292d      	cmp	r1, #45	@ 0x2d
 800d1f8:	d1ca      	bne.n	800d190 <_strtod_l+0x30>
 800d1fa:	2101      	movs	r1, #1
 800d1fc:	910e      	str	r1, [sp, #56]	@ 0x38
 800d1fe:	1c51      	adds	r1, r2, #1
 800d200:	9119      	str	r1, [sp, #100]	@ 0x64
 800d202:	7852      	ldrb	r2, [r2, #1]
 800d204:	2a00      	cmp	r2, #0
 800d206:	d1c5      	bne.n	800d194 <_strtod_l+0x34>
 800d208:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800d20a:	9419      	str	r4, [sp, #100]	@ 0x64
 800d20c:	2b00      	cmp	r3, #0
 800d20e:	f040 8570 	bne.w	800dcf2 <_strtod_l+0xb92>
 800d212:	4652      	mov	r2, sl
 800d214:	465b      	mov	r3, fp
 800d216:	e7e5      	b.n	800d1e4 <_strtod_l+0x84>
 800d218:	2100      	movs	r1, #0
 800d21a:	e7ef      	b.n	800d1fc <_strtod_l+0x9c>
 800d21c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800d21e:	b13a      	cbz	r2, 800d230 <_strtod_l+0xd0>
 800d220:	2135      	movs	r1, #53	@ 0x35
 800d222:	a81c      	add	r0, sp, #112	@ 0x70
 800d224:	f7ff ff3a 	bl	800d09c <__copybits>
 800d228:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800d22a:	9805      	ldr	r0, [sp, #20]
 800d22c:	f7ff fb10 	bl	800c850 <_Bfree>
 800d230:	3e01      	subs	r6, #1
 800d232:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800d234:	2e04      	cmp	r6, #4
 800d236:	d806      	bhi.n	800d246 <_strtod_l+0xe6>
 800d238:	e8df f006 	tbb	[pc, r6]
 800d23c:	201d0314 	.word	0x201d0314
 800d240:	14          	.byte	0x14
 800d241:	00          	.byte	0x00
 800d242:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800d246:	05e1      	lsls	r1, r4, #23
 800d248:	bf48      	it	mi
 800d24a:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800d24e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800d252:	0d1b      	lsrs	r3, r3, #20
 800d254:	051b      	lsls	r3, r3, #20
 800d256:	2b00      	cmp	r3, #0
 800d258:	d1bb      	bne.n	800d1d2 <_strtod_l+0x72>
 800d25a:	f7fe fb01 	bl	800b860 <__errno>
 800d25e:	2322      	movs	r3, #34	@ 0x22
 800d260:	6003      	str	r3, [r0, #0]
 800d262:	e7b6      	b.n	800d1d2 <_strtod_l+0x72>
 800d264:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800d268:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800d26c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800d270:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800d274:	e7e7      	b.n	800d246 <_strtod_l+0xe6>
 800d276:	f8df b180 	ldr.w	fp, [pc, #384]	@ 800d3f8 <_strtod_l+0x298>
 800d27a:	e7e4      	b.n	800d246 <_strtod_l+0xe6>
 800d27c:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800d280:	f04f 3aff 	mov.w	sl, #4294967295
 800d284:	e7df      	b.n	800d246 <_strtod_l+0xe6>
 800d286:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d288:	1c5a      	adds	r2, r3, #1
 800d28a:	9219      	str	r2, [sp, #100]	@ 0x64
 800d28c:	785b      	ldrb	r3, [r3, #1]
 800d28e:	2b30      	cmp	r3, #48	@ 0x30
 800d290:	d0f9      	beq.n	800d286 <_strtod_l+0x126>
 800d292:	2b00      	cmp	r3, #0
 800d294:	d09d      	beq.n	800d1d2 <_strtod_l+0x72>
 800d296:	2301      	movs	r3, #1
 800d298:	2700      	movs	r7, #0
 800d29a:	9308      	str	r3, [sp, #32]
 800d29c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d29e:	930c      	str	r3, [sp, #48]	@ 0x30
 800d2a0:	970b      	str	r7, [sp, #44]	@ 0x2c
 800d2a2:	46b9      	mov	r9, r7
 800d2a4:	220a      	movs	r2, #10
 800d2a6:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800d2a8:	7805      	ldrb	r5, [r0, #0]
 800d2aa:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800d2ae:	b2d9      	uxtb	r1, r3
 800d2b0:	2909      	cmp	r1, #9
 800d2b2:	d928      	bls.n	800d306 <_strtod_l+0x1a6>
 800d2b4:	494f      	ldr	r1, [pc, #316]	@ (800d3f4 <_strtod_l+0x294>)
 800d2b6:	2201      	movs	r2, #1
 800d2b8:	f000 ffe8 	bl	800e28c <strncmp>
 800d2bc:	2800      	cmp	r0, #0
 800d2be:	d032      	beq.n	800d326 <_strtod_l+0x1c6>
 800d2c0:	2000      	movs	r0, #0
 800d2c2:	462a      	mov	r2, r5
 800d2c4:	900a      	str	r0, [sp, #40]	@ 0x28
 800d2c6:	464d      	mov	r5, r9
 800d2c8:	4603      	mov	r3, r0
 800d2ca:	2a65      	cmp	r2, #101	@ 0x65
 800d2cc:	d001      	beq.n	800d2d2 <_strtod_l+0x172>
 800d2ce:	2a45      	cmp	r2, #69	@ 0x45
 800d2d0:	d114      	bne.n	800d2fc <_strtod_l+0x19c>
 800d2d2:	b91d      	cbnz	r5, 800d2dc <_strtod_l+0x17c>
 800d2d4:	9a08      	ldr	r2, [sp, #32]
 800d2d6:	4302      	orrs	r2, r0
 800d2d8:	d096      	beq.n	800d208 <_strtod_l+0xa8>
 800d2da:	2500      	movs	r5, #0
 800d2dc:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800d2de:	1c62      	adds	r2, r4, #1
 800d2e0:	9219      	str	r2, [sp, #100]	@ 0x64
 800d2e2:	7862      	ldrb	r2, [r4, #1]
 800d2e4:	2a2b      	cmp	r2, #43	@ 0x2b
 800d2e6:	d07a      	beq.n	800d3de <_strtod_l+0x27e>
 800d2e8:	2a2d      	cmp	r2, #45	@ 0x2d
 800d2ea:	d07e      	beq.n	800d3ea <_strtod_l+0x28a>
 800d2ec:	f04f 0c00 	mov.w	ip, #0
 800d2f0:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800d2f4:	2909      	cmp	r1, #9
 800d2f6:	f240 8085 	bls.w	800d404 <_strtod_l+0x2a4>
 800d2fa:	9419      	str	r4, [sp, #100]	@ 0x64
 800d2fc:	f04f 0800 	mov.w	r8, #0
 800d300:	e0a5      	b.n	800d44e <_strtod_l+0x2ee>
 800d302:	2300      	movs	r3, #0
 800d304:	e7c8      	b.n	800d298 <_strtod_l+0x138>
 800d306:	f1b9 0f08 	cmp.w	r9, #8
 800d30a:	bfd8      	it	le
 800d30c:	990b      	ldrle	r1, [sp, #44]	@ 0x2c
 800d30e:	f100 0001 	add.w	r0, r0, #1
 800d312:	bfda      	itte	le
 800d314:	fb02 3301 	mlale	r3, r2, r1, r3
 800d318:	930b      	strle	r3, [sp, #44]	@ 0x2c
 800d31a:	fb02 3707 	mlagt	r7, r2, r7, r3
 800d31e:	f109 0901 	add.w	r9, r9, #1
 800d322:	9019      	str	r0, [sp, #100]	@ 0x64
 800d324:	e7bf      	b.n	800d2a6 <_strtod_l+0x146>
 800d326:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d328:	1c5a      	adds	r2, r3, #1
 800d32a:	9219      	str	r2, [sp, #100]	@ 0x64
 800d32c:	785a      	ldrb	r2, [r3, #1]
 800d32e:	f1b9 0f00 	cmp.w	r9, #0
 800d332:	d03b      	beq.n	800d3ac <_strtod_l+0x24c>
 800d334:	900a      	str	r0, [sp, #40]	@ 0x28
 800d336:	464d      	mov	r5, r9
 800d338:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800d33c:	2b09      	cmp	r3, #9
 800d33e:	d912      	bls.n	800d366 <_strtod_l+0x206>
 800d340:	2301      	movs	r3, #1
 800d342:	e7c2      	b.n	800d2ca <_strtod_l+0x16a>
 800d344:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d346:	1c5a      	adds	r2, r3, #1
 800d348:	9219      	str	r2, [sp, #100]	@ 0x64
 800d34a:	785a      	ldrb	r2, [r3, #1]
 800d34c:	3001      	adds	r0, #1
 800d34e:	2a30      	cmp	r2, #48	@ 0x30
 800d350:	d0f8      	beq.n	800d344 <_strtod_l+0x1e4>
 800d352:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800d356:	2b08      	cmp	r3, #8
 800d358:	f200 84d2 	bhi.w	800dd00 <_strtod_l+0xba0>
 800d35c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d35e:	900a      	str	r0, [sp, #40]	@ 0x28
 800d360:	2000      	movs	r0, #0
 800d362:	930c      	str	r3, [sp, #48]	@ 0x30
 800d364:	4605      	mov	r5, r0
 800d366:	3a30      	subs	r2, #48	@ 0x30
 800d368:	f100 0301 	add.w	r3, r0, #1
 800d36c:	d018      	beq.n	800d3a0 <_strtod_l+0x240>
 800d36e:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800d370:	4419      	add	r1, r3
 800d372:	910a      	str	r1, [sp, #40]	@ 0x28
 800d374:	462e      	mov	r6, r5
 800d376:	f04f 0e0a 	mov.w	lr, #10
 800d37a:	1c71      	adds	r1, r6, #1
 800d37c:	eba1 0c05 	sub.w	ip, r1, r5
 800d380:	4563      	cmp	r3, ip
 800d382:	dc15      	bgt.n	800d3b0 <_strtod_l+0x250>
 800d384:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 800d388:	182b      	adds	r3, r5, r0
 800d38a:	2b08      	cmp	r3, #8
 800d38c:	f105 0501 	add.w	r5, r5, #1
 800d390:	4405      	add	r5, r0
 800d392:	dc1a      	bgt.n	800d3ca <_strtod_l+0x26a>
 800d394:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800d396:	230a      	movs	r3, #10
 800d398:	fb03 2301 	mla	r3, r3, r1, r2
 800d39c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800d39e:	2300      	movs	r3, #0
 800d3a0:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800d3a2:	1c51      	adds	r1, r2, #1
 800d3a4:	9119      	str	r1, [sp, #100]	@ 0x64
 800d3a6:	7852      	ldrb	r2, [r2, #1]
 800d3a8:	4618      	mov	r0, r3
 800d3aa:	e7c5      	b.n	800d338 <_strtod_l+0x1d8>
 800d3ac:	4648      	mov	r0, r9
 800d3ae:	e7ce      	b.n	800d34e <_strtod_l+0x1ee>
 800d3b0:	2e08      	cmp	r6, #8
 800d3b2:	dc05      	bgt.n	800d3c0 <_strtod_l+0x260>
 800d3b4:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800d3b6:	fb0e f606 	mul.w	r6, lr, r6
 800d3ba:	960b      	str	r6, [sp, #44]	@ 0x2c
 800d3bc:	460e      	mov	r6, r1
 800d3be:	e7dc      	b.n	800d37a <_strtod_l+0x21a>
 800d3c0:	2910      	cmp	r1, #16
 800d3c2:	bfd8      	it	le
 800d3c4:	fb0e f707 	mulle.w	r7, lr, r7
 800d3c8:	e7f8      	b.n	800d3bc <_strtod_l+0x25c>
 800d3ca:	2b0f      	cmp	r3, #15
 800d3cc:	bfdc      	itt	le
 800d3ce:	230a      	movle	r3, #10
 800d3d0:	fb03 2707 	mlale	r7, r3, r7, r2
 800d3d4:	e7e3      	b.n	800d39e <_strtod_l+0x23e>
 800d3d6:	2300      	movs	r3, #0
 800d3d8:	930a      	str	r3, [sp, #40]	@ 0x28
 800d3da:	2301      	movs	r3, #1
 800d3dc:	e77a      	b.n	800d2d4 <_strtod_l+0x174>
 800d3de:	f04f 0c00 	mov.w	ip, #0
 800d3e2:	1ca2      	adds	r2, r4, #2
 800d3e4:	9219      	str	r2, [sp, #100]	@ 0x64
 800d3e6:	78a2      	ldrb	r2, [r4, #2]
 800d3e8:	e782      	b.n	800d2f0 <_strtod_l+0x190>
 800d3ea:	f04f 0c01 	mov.w	ip, #1
 800d3ee:	e7f8      	b.n	800d3e2 <_strtod_l+0x282>
 800d3f0:	0800f334 	.word	0x0800f334
 800d3f4:	0800f1a7 	.word	0x0800f1a7
 800d3f8:	7ff00000 	.word	0x7ff00000
 800d3fc:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800d3fe:	1c51      	adds	r1, r2, #1
 800d400:	9119      	str	r1, [sp, #100]	@ 0x64
 800d402:	7852      	ldrb	r2, [r2, #1]
 800d404:	2a30      	cmp	r2, #48	@ 0x30
 800d406:	d0f9      	beq.n	800d3fc <_strtod_l+0x29c>
 800d408:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800d40c:	2908      	cmp	r1, #8
 800d40e:	f63f af75 	bhi.w	800d2fc <_strtod_l+0x19c>
 800d412:	3a30      	subs	r2, #48	@ 0x30
 800d414:	9209      	str	r2, [sp, #36]	@ 0x24
 800d416:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800d418:	920f      	str	r2, [sp, #60]	@ 0x3c
 800d41a:	f04f 080a 	mov.w	r8, #10
 800d41e:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800d420:	1c56      	adds	r6, r2, #1
 800d422:	9619      	str	r6, [sp, #100]	@ 0x64
 800d424:	7852      	ldrb	r2, [r2, #1]
 800d426:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800d42a:	f1be 0f09 	cmp.w	lr, #9
 800d42e:	d939      	bls.n	800d4a4 <_strtod_l+0x344>
 800d430:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800d432:	1a76      	subs	r6, r6, r1
 800d434:	2e08      	cmp	r6, #8
 800d436:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800d43a:	dc03      	bgt.n	800d444 <_strtod_l+0x2e4>
 800d43c:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800d43e:	4588      	cmp	r8, r1
 800d440:	bfa8      	it	ge
 800d442:	4688      	movge	r8, r1
 800d444:	f1bc 0f00 	cmp.w	ip, #0
 800d448:	d001      	beq.n	800d44e <_strtod_l+0x2ee>
 800d44a:	f1c8 0800 	rsb	r8, r8, #0
 800d44e:	2d00      	cmp	r5, #0
 800d450:	d14e      	bne.n	800d4f0 <_strtod_l+0x390>
 800d452:	9908      	ldr	r1, [sp, #32]
 800d454:	4308      	orrs	r0, r1
 800d456:	f47f aebc 	bne.w	800d1d2 <_strtod_l+0x72>
 800d45a:	2b00      	cmp	r3, #0
 800d45c:	f47f aed4 	bne.w	800d208 <_strtod_l+0xa8>
 800d460:	2a69      	cmp	r2, #105	@ 0x69
 800d462:	d028      	beq.n	800d4b6 <_strtod_l+0x356>
 800d464:	dc25      	bgt.n	800d4b2 <_strtod_l+0x352>
 800d466:	2a49      	cmp	r2, #73	@ 0x49
 800d468:	d025      	beq.n	800d4b6 <_strtod_l+0x356>
 800d46a:	2a4e      	cmp	r2, #78	@ 0x4e
 800d46c:	f47f aecc 	bne.w	800d208 <_strtod_l+0xa8>
 800d470:	499a      	ldr	r1, [pc, #616]	@ (800d6dc <_strtod_l+0x57c>)
 800d472:	a819      	add	r0, sp, #100	@ 0x64
 800d474:	f001 f9d8 	bl	800e828 <__match>
 800d478:	2800      	cmp	r0, #0
 800d47a:	f43f aec5 	beq.w	800d208 <_strtod_l+0xa8>
 800d47e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d480:	781b      	ldrb	r3, [r3, #0]
 800d482:	2b28      	cmp	r3, #40	@ 0x28
 800d484:	d12e      	bne.n	800d4e4 <_strtod_l+0x384>
 800d486:	4996      	ldr	r1, [pc, #600]	@ (800d6e0 <_strtod_l+0x580>)
 800d488:	aa1c      	add	r2, sp, #112	@ 0x70
 800d48a:	a819      	add	r0, sp, #100	@ 0x64
 800d48c:	f001 f9e0 	bl	800e850 <__hexnan>
 800d490:	2805      	cmp	r0, #5
 800d492:	d127      	bne.n	800d4e4 <_strtod_l+0x384>
 800d494:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800d496:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800d49a:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800d49e:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800d4a2:	e696      	b.n	800d1d2 <_strtod_l+0x72>
 800d4a4:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800d4a6:	fb08 2101 	mla	r1, r8, r1, r2
 800d4aa:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800d4ae:	9209      	str	r2, [sp, #36]	@ 0x24
 800d4b0:	e7b5      	b.n	800d41e <_strtod_l+0x2be>
 800d4b2:	2a6e      	cmp	r2, #110	@ 0x6e
 800d4b4:	e7da      	b.n	800d46c <_strtod_l+0x30c>
 800d4b6:	498b      	ldr	r1, [pc, #556]	@ (800d6e4 <_strtod_l+0x584>)
 800d4b8:	a819      	add	r0, sp, #100	@ 0x64
 800d4ba:	f001 f9b5 	bl	800e828 <__match>
 800d4be:	2800      	cmp	r0, #0
 800d4c0:	f43f aea2 	beq.w	800d208 <_strtod_l+0xa8>
 800d4c4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d4c6:	4988      	ldr	r1, [pc, #544]	@ (800d6e8 <_strtod_l+0x588>)
 800d4c8:	3b01      	subs	r3, #1
 800d4ca:	a819      	add	r0, sp, #100	@ 0x64
 800d4cc:	9319      	str	r3, [sp, #100]	@ 0x64
 800d4ce:	f001 f9ab 	bl	800e828 <__match>
 800d4d2:	b910      	cbnz	r0, 800d4da <_strtod_l+0x37a>
 800d4d4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d4d6:	3301      	adds	r3, #1
 800d4d8:	9319      	str	r3, [sp, #100]	@ 0x64
 800d4da:	f8df b21c 	ldr.w	fp, [pc, #540]	@ 800d6f8 <_strtod_l+0x598>
 800d4de:	f04f 0a00 	mov.w	sl, #0
 800d4e2:	e676      	b.n	800d1d2 <_strtod_l+0x72>
 800d4e4:	4881      	ldr	r0, [pc, #516]	@ (800d6ec <_strtod_l+0x58c>)
 800d4e6:	f000 fef3 	bl	800e2d0 <nan>
 800d4ea:	ec5b ab10 	vmov	sl, fp, d0
 800d4ee:	e670      	b.n	800d1d2 <_strtod_l+0x72>
 800d4f0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d4f2:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 800d4f4:	eba8 0303 	sub.w	r3, r8, r3
 800d4f8:	f1b9 0f00 	cmp.w	r9, #0
 800d4fc:	bf08      	it	eq
 800d4fe:	46a9      	moveq	r9, r5
 800d500:	2d10      	cmp	r5, #16
 800d502:	9309      	str	r3, [sp, #36]	@ 0x24
 800d504:	462c      	mov	r4, r5
 800d506:	bfa8      	it	ge
 800d508:	2410      	movge	r4, #16
 800d50a:	f7f2 fffb 	bl	8000504 <__aeabi_ui2d>
 800d50e:	2d09      	cmp	r5, #9
 800d510:	4682      	mov	sl, r0
 800d512:	468b      	mov	fp, r1
 800d514:	dc13      	bgt.n	800d53e <_strtod_l+0x3de>
 800d516:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d518:	2b00      	cmp	r3, #0
 800d51a:	f43f ae5a 	beq.w	800d1d2 <_strtod_l+0x72>
 800d51e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d520:	dd78      	ble.n	800d614 <_strtod_l+0x4b4>
 800d522:	2b16      	cmp	r3, #22
 800d524:	dc5f      	bgt.n	800d5e6 <_strtod_l+0x486>
 800d526:	4972      	ldr	r1, [pc, #456]	@ (800d6f0 <_strtod_l+0x590>)
 800d528:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800d52c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d530:	4652      	mov	r2, sl
 800d532:	465b      	mov	r3, fp
 800d534:	f7f3 f860 	bl	80005f8 <__aeabi_dmul>
 800d538:	4682      	mov	sl, r0
 800d53a:	468b      	mov	fp, r1
 800d53c:	e649      	b.n	800d1d2 <_strtod_l+0x72>
 800d53e:	4b6c      	ldr	r3, [pc, #432]	@ (800d6f0 <_strtod_l+0x590>)
 800d540:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800d544:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800d548:	f7f3 f856 	bl	80005f8 <__aeabi_dmul>
 800d54c:	4682      	mov	sl, r0
 800d54e:	4638      	mov	r0, r7
 800d550:	468b      	mov	fp, r1
 800d552:	f7f2 ffd7 	bl	8000504 <__aeabi_ui2d>
 800d556:	4602      	mov	r2, r0
 800d558:	460b      	mov	r3, r1
 800d55a:	4650      	mov	r0, sl
 800d55c:	4659      	mov	r1, fp
 800d55e:	f7f2 fe95 	bl	800028c <__adddf3>
 800d562:	2d0f      	cmp	r5, #15
 800d564:	4682      	mov	sl, r0
 800d566:	468b      	mov	fp, r1
 800d568:	ddd5      	ble.n	800d516 <_strtod_l+0x3b6>
 800d56a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d56c:	1b2c      	subs	r4, r5, r4
 800d56e:	441c      	add	r4, r3
 800d570:	2c00      	cmp	r4, #0
 800d572:	f340 8093 	ble.w	800d69c <_strtod_l+0x53c>
 800d576:	f014 030f 	ands.w	r3, r4, #15
 800d57a:	d00a      	beq.n	800d592 <_strtod_l+0x432>
 800d57c:	495c      	ldr	r1, [pc, #368]	@ (800d6f0 <_strtod_l+0x590>)
 800d57e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800d582:	4652      	mov	r2, sl
 800d584:	465b      	mov	r3, fp
 800d586:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d58a:	f7f3 f835 	bl	80005f8 <__aeabi_dmul>
 800d58e:	4682      	mov	sl, r0
 800d590:	468b      	mov	fp, r1
 800d592:	f034 040f 	bics.w	r4, r4, #15
 800d596:	d073      	beq.n	800d680 <_strtod_l+0x520>
 800d598:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800d59c:	dd49      	ble.n	800d632 <_strtod_l+0x4d2>
 800d59e:	2400      	movs	r4, #0
 800d5a0:	46a0      	mov	r8, r4
 800d5a2:	940b      	str	r4, [sp, #44]	@ 0x2c
 800d5a4:	46a1      	mov	r9, r4
 800d5a6:	9a05      	ldr	r2, [sp, #20]
 800d5a8:	f8df b14c 	ldr.w	fp, [pc, #332]	@ 800d6f8 <_strtod_l+0x598>
 800d5ac:	2322      	movs	r3, #34	@ 0x22
 800d5ae:	6013      	str	r3, [r2, #0]
 800d5b0:	f04f 0a00 	mov.w	sl, #0
 800d5b4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d5b6:	2b00      	cmp	r3, #0
 800d5b8:	f43f ae0b 	beq.w	800d1d2 <_strtod_l+0x72>
 800d5bc:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800d5be:	9805      	ldr	r0, [sp, #20]
 800d5c0:	f7ff f946 	bl	800c850 <_Bfree>
 800d5c4:	9805      	ldr	r0, [sp, #20]
 800d5c6:	4649      	mov	r1, r9
 800d5c8:	f7ff f942 	bl	800c850 <_Bfree>
 800d5cc:	9805      	ldr	r0, [sp, #20]
 800d5ce:	4641      	mov	r1, r8
 800d5d0:	f7ff f93e 	bl	800c850 <_Bfree>
 800d5d4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800d5d6:	9805      	ldr	r0, [sp, #20]
 800d5d8:	f7ff f93a 	bl	800c850 <_Bfree>
 800d5dc:	9805      	ldr	r0, [sp, #20]
 800d5de:	4621      	mov	r1, r4
 800d5e0:	f7ff f936 	bl	800c850 <_Bfree>
 800d5e4:	e5f5      	b.n	800d1d2 <_strtod_l+0x72>
 800d5e6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d5e8:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800d5ec:	4293      	cmp	r3, r2
 800d5ee:	dbbc      	blt.n	800d56a <_strtod_l+0x40a>
 800d5f0:	4c3f      	ldr	r4, [pc, #252]	@ (800d6f0 <_strtod_l+0x590>)
 800d5f2:	f1c5 050f 	rsb	r5, r5, #15
 800d5f6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800d5fa:	4652      	mov	r2, sl
 800d5fc:	465b      	mov	r3, fp
 800d5fe:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d602:	f7f2 fff9 	bl	80005f8 <__aeabi_dmul>
 800d606:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d608:	1b5d      	subs	r5, r3, r5
 800d60a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800d60e:	e9d4 2300 	ldrd	r2, r3, [r4]
 800d612:	e78f      	b.n	800d534 <_strtod_l+0x3d4>
 800d614:	3316      	adds	r3, #22
 800d616:	dba8      	blt.n	800d56a <_strtod_l+0x40a>
 800d618:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d61a:	eba3 0808 	sub.w	r8, r3, r8
 800d61e:	4b34      	ldr	r3, [pc, #208]	@ (800d6f0 <_strtod_l+0x590>)
 800d620:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800d624:	e9d8 2300 	ldrd	r2, r3, [r8]
 800d628:	4650      	mov	r0, sl
 800d62a:	4659      	mov	r1, fp
 800d62c:	f7f3 f90e 	bl	800084c <__aeabi_ddiv>
 800d630:	e782      	b.n	800d538 <_strtod_l+0x3d8>
 800d632:	2300      	movs	r3, #0
 800d634:	4f2f      	ldr	r7, [pc, #188]	@ (800d6f4 <_strtod_l+0x594>)
 800d636:	1124      	asrs	r4, r4, #4
 800d638:	4650      	mov	r0, sl
 800d63a:	4659      	mov	r1, fp
 800d63c:	461e      	mov	r6, r3
 800d63e:	2c01      	cmp	r4, #1
 800d640:	dc21      	bgt.n	800d686 <_strtod_l+0x526>
 800d642:	b10b      	cbz	r3, 800d648 <_strtod_l+0x4e8>
 800d644:	4682      	mov	sl, r0
 800d646:	468b      	mov	fp, r1
 800d648:	492a      	ldr	r1, [pc, #168]	@ (800d6f4 <_strtod_l+0x594>)
 800d64a:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800d64e:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800d652:	4652      	mov	r2, sl
 800d654:	465b      	mov	r3, fp
 800d656:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d65a:	f7f2 ffcd 	bl	80005f8 <__aeabi_dmul>
 800d65e:	4b26      	ldr	r3, [pc, #152]	@ (800d6f8 <_strtod_l+0x598>)
 800d660:	460a      	mov	r2, r1
 800d662:	400b      	ands	r3, r1
 800d664:	4925      	ldr	r1, [pc, #148]	@ (800d6fc <_strtod_l+0x59c>)
 800d666:	428b      	cmp	r3, r1
 800d668:	4682      	mov	sl, r0
 800d66a:	d898      	bhi.n	800d59e <_strtod_l+0x43e>
 800d66c:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800d670:	428b      	cmp	r3, r1
 800d672:	bf86      	itte	hi
 800d674:	f8df b088 	ldrhi.w	fp, [pc, #136]	@ 800d700 <_strtod_l+0x5a0>
 800d678:	f04f 3aff 	movhi.w	sl, #4294967295
 800d67c:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800d680:	2300      	movs	r3, #0
 800d682:	9308      	str	r3, [sp, #32]
 800d684:	e076      	b.n	800d774 <_strtod_l+0x614>
 800d686:	07e2      	lsls	r2, r4, #31
 800d688:	d504      	bpl.n	800d694 <_strtod_l+0x534>
 800d68a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d68e:	f7f2 ffb3 	bl	80005f8 <__aeabi_dmul>
 800d692:	2301      	movs	r3, #1
 800d694:	3601      	adds	r6, #1
 800d696:	1064      	asrs	r4, r4, #1
 800d698:	3708      	adds	r7, #8
 800d69a:	e7d0      	b.n	800d63e <_strtod_l+0x4de>
 800d69c:	d0f0      	beq.n	800d680 <_strtod_l+0x520>
 800d69e:	4264      	negs	r4, r4
 800d6a0:	f014 020f 	ands.w	r2, r4, #15
 800d6a4:	d00a      	beq.n	800d6bc <_strtod_l+0x55c>
 800d6a6:	4b12      	ldr	r3, [pc, #72]	@ (800d6f0 <_strtod_l+0x590>)
 800d6a8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d6ac:	4650      	mov	r0, sl
 800d6ae:	4659      	mov	r1, fp
 800d6b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d6b4:	f7f3 f8ca 	bl	800084c <__aeabi_ddiv>
 800d6b8:	4682      	mov	sl, r0
 800d6ba:	468b      	mov	fp, r1
 800d6bc:	1124      	asrs	r4, r4, #4
 800d6be:	d0df      	beq.n	800d680 <_strtod_l+0x520>
 800d6c0:	2c1f      	cmp	r4, #31
 800d6c2:	dd1f      	ble.n	800d704 <_strtod_l+0x5a4>
 800d6c4:	2400      	movs	r4, #0
 800d6c6:	46a0      	mov	r8, r4
 800d6c8:	940b      	str	r4, [sp, #44]	@ 0x2c
 800d6ca:	46a1      	mov	r9, r4
 800d6cc:	9a05      	ldr	r2, [sp, #20]
 800d6ce:	2322      	movs	r3, #34	@ 0x22
 800d6d0:	f04f 0a00 	mov.w	sl, #0
 800d6d4:	f04f 0b00 	mov.w	fp, #0
 800d6d8:	6013      	str	r3, [r2, #0]
 800d6da:	e76b      	b.n	800d5b4 <_strtod_l+0x454>
 800d6dc:	0800f070 	.word	0x0800f070
 800d6e0:	0800f320 	.word	0x0800f320
 800d6e4:	0800f068 	.word	0x0800f068
 800d6e8:	0800f0db 	.word	0x0800f0db
 800d6ec:	0800f0d7 	.word	0x0800f0d7
 800d6f0:	0800f258 	.word	0x0800f258
 800d6f4:	0800f230 	.word	0x0800f230
 800d6f8:	7ff00000 	.word	0x7ff00000
 800d6fc:	7ca00000 	.word	0x7ca00000
 800d700:	7fefffff 	.word	0x7fefffff
 800d704:	f014 0310 	ands.w	r3, r4, #16
 800d708:	bf18      	it	ne
 800d70a:	236a      	movne	r3, #106	@ 0x6a
 800d70c:	4ea9      	ldr	r6, [pc, #676]	@ (800d9b4 <_strtod_l+0x854>)
 800d70e:	9308      	str	r3, [sp, #32]
 800d710:	4650      	mov	r0, sl
 800d712:	4659      	mov	r1, fp
 800d714:	2300      	movs	r3, #0
 800d716:	07e7      	lsls	r7, r4, #31
 800d718:	d504      	bpl.n	800d724 <_strtod_l+0x5c4>
 800d71a:	e9d6 2300 	ldrd	r2, r3, [r6]
 800d71e:	f7f2 ff6b 	bl	80005f8 <__aeabi_dmul>
 800d722:	2301      	movs	r3, #1
 800d724:	1064      	asrs	r4, r4, #1
 800d726:	f106 0608 	add.w	r6, r6, #8
 800d72a:	d1f4      	bne.n	800d716 <_strtod_l+0x5b6>
 800d72c:	b10b      	cbz	r3, 800d732 <_strtod_l+0x5d2>
 800d72e:	4682      	mov	sl, r0
 800d730:	468b      	mov	fp, r1
 800d732:	9b08      	ldr	r3, [sp, #32]
 800d734:	b1b3      	cbz	r3, 800d764 <_strtod_l+0x604>
 800d736:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800d73a:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800d73e:	2b00      	cmp	r3, #0
 800d740:	4659      	mov	r1, fp
 800d742:	dd0f      	ble.n	800d764 <_strtod_l+0x604>
 800d744:	2b1f      	cmp	r3, #31
 800d746:	dd56      	ble.n	800d7f6 <_strtod_l+0x696>
 800d748:	2b34      	cmp	r3, #52	@ 0x34
 800d74a:	bfde      	ittt	le
 800d74c:	f04f 33ff 	movle.w	r3, #4294967295
 800d750:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800d754:	4093      	lslle	r3, r2
 800d756:	f04f 0a00 	mov.w	sl, #0
 800d75a:	bfcc      	ite	gt
 800d75c:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800d760:	ea03 0b01 	andle.w	fp, r3, r1
 800d764:	2200      	movs	r2, #0
 800d766:	2300      	movs	r3, #0
 800d768:	4650      	mov	r0, sl
 800d76a:	4659      	mov	r1, fp
 800d76c:	f7f3 f9ac 	bl	8000ac8 <__aeabi_dcmpeq>
 800d770:	2800      	cmp	r0, #0
 800d772:	d1a7      	bne.n	800d6c4 <_strtod_l+0x564>
 800d774:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d776:	9300      	str	r3, [sp, #0]
 800d778:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800d77a:	9805      	ldr	r0, [sp, #20]
 800d77c:	462b      	mov	r3, r5
 800d77e:	464a      	mov	r2, r9
 800d780:	f7ff f8ce 	bl	800c920 <__s2b>
 800d784:	900b      	str	r0, [sp, #44]	@ 0x2c
 800d786:	2800      	cmp	r0, #0
 800d788:	f43f af09 	beq.w	800d59e <_strtod_l+0x43e>
 800d78c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d78e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d790:	2a00      	cmp	r2, #0
 800d792:	eba3 0308 	sub.w	r3, r3, r8
 800d796:	bfa8      	it	ge
 800d798:	2300      	movge	r3, #0
 800d79a:	9312      	str	r3, [sp, #72]	@ 0x48
 800d79c:	2400      	movs	r4, #0
 800d79e:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800d7a2:	9316      	str	r3, [sp, #88]	@ 0x58
 800d7a4:	46a0      	mov	r8, r4
 800d7a6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d7a8:	9805      	ldr	r0, [sp, #20]
 800d7aa:	6859      	ldr	r1, [r3, #4]
 800d7ac:	f7ff f810 	bl	800c7d0 <_Balloc>
 800d7b0:	4681      	mov	r9, r0
 800d7b2:	2800      	cmp	r0, #0
 800d7b4:	f43f aef7 	beq.w	800d5a6 <_strtod_l+0x446>
 800d7b8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d7ba:	691a      	ldr	r2, [r3, #16]
 800d7bc:	3202      	adds	r2, #2
 800d7be:	f103 010c 	add.w	r1, r3, #12
 800d7c2:	0092      	lsls	r2, r2, #2
 800d7c4:	300c      	adds	r0, #12
 800d7c6:	f7fe f878 	bl	800b8ba <memcpy>
 800d7ca:	ec4b ab10 	vmov	d0, sl, fp
 800d7ce:	9805      	ldr	r0, [sp, #20]
 800d7d0:	aa1c      	add	r2, sp, #112	@ 0x70
 800d7d2:	a91b      	add	r1, sp, #108	@ 0x6c
 800d7d4:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800d7d8:	f7ff fbd6 	bl	800cf88 <__d2b>
 800d7dc:	901a      	str	r0, [sp, #104]	@ 0x68
 800d7de:	2800      	cmp	r0, #0
 800d7e0:	f43f aee1 	beq.w	800d5a6 <_strtod_l+0x446>
 800d7e4:	9805      	ldr	r0, [sp, #20]
 800d7e6:	2101      	movs	r1, #1
 800d7e8:	f7ff f930 	bl	800ca4c <__i2b>
 800d7ec:	4680      	mov	r8, r0
 800d7ee:	b948      	cbnz	r0, 800d804 <_strtod_l+0x6a4>
 800d7f0:	f04f 0800 	mov.w	r8, #0
 800d7f4:	e6d7      	b.n	800d5a6 <_strtod_l+0x446>
 800d7f6:	f04f 32ff 	mov.w	r2, #4294967295
 800d7fa:	fa02 f303 	lsl.w	r3, r2, r3
 800d7fe:	ea03 0a0a 	and.w	sl, r3, sl
 800d802:	e7af      	b.n	800d764 <_strtod_l+0x604>
 800d804:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800d806:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800d808:	2d00      	cmp	r5, #0
 800d80a:	bfab      	itete	ge
 800d80c:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800d80e:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800d810:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800d812:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800d814:	bfac      	ite	ge
 800d816:	18ef      	addge	r7, r5, r3
 800d818:	1b5e      	sublt	r6, r3, r5
 800d81a:	9b08      	ldr	r3, [sp, #32]
 800d81c:	1aed      	subs	r5, r5, r3
 800d81e:	4415      	add	r5, r2
 800d820:	4b65      	ldr	r3, [pc, #404]	@ (800d9b8 <_strtod_l+0x858>)
 800d822:	3d01      	subs	r5, #1
 800d824:	429d      	cmp	r5, r3
 800d826:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800d82a:	da50      	bge.n	800d8ce <_strtod_l+0x76e>
 800d82c:	1b5b      	subs	r3, r3, r5
 800d82e:	2b1f      	cmp	r3, #31
 800d830:	eba2 0203 	sub.w	r2, r2, r3
 800d834:	f04f 0101 	mov.w	r1, #1
 800d838:	dc3d      	bgt.n	800d8b6 <_strtod_l+0x756>
 800d83a:	fa01 f303 	lsl.w	r3, r1, r3
 800d83e:	9313      	str	r3, [sp, #76]	@ 0x4c
 800d840:	2300      	movs	r3, #0
 800d842:	9310      	str	r3, [sp, #64]	@ 0x40
 800d844:	18bd      	adds	r5, r7, r2
 800d846:	9b08      	ldr	r3, [sp, #32]
 800d848:	42af      	cmp	r7, r5
 800d84a:	4416      	add	r6, r2
 800d84c:	441e      	add	r6, r3
 800d84e:	463b      	mov	r3, r7
 800d850:	bfa8      	it	ge
 800d852:	462b      	movge	r3, r5
 800d854:	42b3      	cmp	r3, r6
 800d856:	bfa8      	it	ge
 800d858:	4633      	movge	r3, r6
 800d85a:	2b00      	cmp	r3, #0
 800d85c:	bfc2      	ittt	gt
 800d85e:	1aed      	subgt	r5, r5, r3
 800d860:	1af6      	subgt	r6, r6, r3
 800d862:	1aff      	subgt	r7, r7, r3
 800d864:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800d866:	2b00      	cmp	r3, #0
 800d868:	dd16      	ble.n	800d898 <_strtod_l+0x738>
 800d86a:	4641      	mov	r1, r8
 800d86c:	9805      	ldr	r0, [sp, #20]
 800d86e:	461a      	mov	r2, r3
 800d870:	f7ff f9a4 	bl	800cbbc <__pow5mult>
 800d874:	4680      	mov	r8, r0
 800d876:	2800      	cmp	r0, #0
 800d878:	d0ba      	beq.n	800d7f0 <_strtod_l+0x690>
 800d87a:	4601      	mov	r1, r0
 800d87c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800d87e:	9805      	ldr	r0, [sp, #20]
 800d880:	f7ff f8fa 	bl	800ca78 <__multiply>
 800d884:	900a      	str	r0, [sp, #40]	@ 0x28
 800d886:	2800      	cmp	r0, #0
 800d888:	f43f ae8d 	beq.w	800d5a6 <_strtod_l+0x446>
 800d88c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800d88e:	9805      	ldr	r0, [sp, #20]
 800d890:	f7fe ffde 	bl	800c850 <_Bfree>
 800d894:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d896:	931a      	str	r3, [sp, #104]	@ 0x68
 800d898:	2d00      	cmp	r5, #0
 800d89a:	dc1d      	bgt.n	800d8d8 <_strtod_l+0x778>
 800d89c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d89e:	2b00      	cmp	r3, #0
 800d8a0:	dd23      	ble.n	800d8ea <_strtod_l+0x78a>
 800d8a2:	4649      	mov	r1, r9
 800d8a4:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800d8a6:	9805      	ldr	r0, [sp, #20]
 800d8a8:	f7ff f988 	bl	800cbbc <__pow5mult>
 800d8ac:	4681      	mov	r9, r0
 800d8ae:	b9e0      	cbnz	r0, 800d8ea <_strtod_l+0x78a>
 800d8b0:	f04f 0900 	mov.w	r9, #0
 800d8b4:	e677      	b.n	800d5a6 <_strtod_l+0x446>
 800d8b6:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800d8ba:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800d8be:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800d8c2:	35e2      	adds	r5, #226	@ 0xe2
 800d8c4:	fa01 f305 	lsl.w	r3, r1, r5
 800d8c8:	9310      	str	r3, [sp, #64]	@ 0x40
 800d8ca:	9113      	str	r1, [sp, #76]	@ 0x4c
 800d8cc:	e7ba      	b.n	800d844 <_strtod_l+0x6e4>
 800d8ce:	2300      	movs	r3, #0
 800d8d0:	9310      	str	r3, [sp, #64]	@ 0x40
 800d8d2:	2301      	movs	r3, #1
 800d8d4:	9313      	str	r3, [sp, #76]	@ 0x4c
 800d8d6:	e7b5      	b.n	800d844 <_strtod_l+0x6e4>
 800d8d8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800d8da:	9805      	ldr	r0, [sp, #20]
 800d8dc:	462a      	mov	r2, r5
 800d8de:	f7ff f9c7 	bl	800cc70 <__lshift>
 800d8e2:	901a      	str	r0, [sp, #104]	@ 0x68
 800d8e4:	2800      	cmp	r0, #0
 800d8e6:	d1d9      	bne.n	800d89c <_strtod_l+0x73c>
 800d8e8:	e65d      	b.n	800d5a6 <_strtod_l+0x446>
 800d8ea:	2e00      	cmp	r6, #0
 800d8ec:	dd07      	ble.n	800d8fe <_strtod_l+0x79e>
 800d8ee:	4649      	mov	r1, r9
 800d8f0:	9805      	ldr	r0, [sp, #20]
 800d8f2:	4632      	mov	r2, r6
 800d8f4:	f7ff f9bc 	bl	800cc70 <__lshift>
 800d8f8:	4681      	mov	r9, r0
 800d8fa:	2800      	cmp	r0, #0
 800d8fc:	d0d8      	beq.n	800d8b0 <_strtod_l+0x750>
 800d8fe:	2f00      	cmp	r7, #0
 800d900:	dd08      	ble.n	800d914 <_strtod_l+0x7b4>
 800d902:	4641      	mov	r1, r8
 800d904:	9805      	ldr	r0, [sp, #20]
 800d906:	463a      	mov	r2, r7
 800d908:	f7ff f9b2 	bl	800cc70 <__lshift>
 800d90c:	4680      	mov	r8, r0
 800d90e:	2800      	cmp	r0, #0
 800d910:	f43f ae49 	beq.w	800d5a6 <_strtod_l+0x446>
 800d914:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800d916:	9805      	ldr	r0, [sp, #20]
 800d918:	464a      	mov	r2, r9
 800d91a:	f7ff fa31 	bl	800cd80 <__mdiff>
 800d91e:	4604      	mov	r4, r0
 800d920:	2800      	cmp	r0, #0
 800d922:	f43f ae40 	beq.w	800d5a6 <_strtod_l+0x446>
 800d926:	68c3      	ldr	r3, [r0, #12]
 800d928:	930f      	str	r3, [sp, #60]	@ 0x3c
 800d92a:	2300      	movs	r3, #0
 800d92c:	60c3      	str	r3, [r0, #12]
 800d92e:	4641      	mov	r1, r8
 800d930:	f7ff fa0a 	bl	800cd48 <__mcmp>
 800d934:	2800      	cmp	r0, #0
 800d936:	da45      	bge.n	800d9c4 <_strtod_l+0x864>
 800d938:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d93a:	ea53 030a 	orrs.w	r3, r3, sl
 800d93e:	d16b      	bne.n	800da18 <_strtod_l+0x8b8>
 800d940:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800d944:	2b00      	cmp	r3, #0
 800d946:	d167      	bne.n	800da18 <_strtod_l+0x8b8>
 800d948:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800d94c:	0d1b      	lsrs	r3, r3, #20
 800d94e:	051b      	lsls	r3, r3, #20
 800d950:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800d954:	d960      	bls.n	800da18 <_strtod_l+0x8b8>
 800d956:	6963      	ldr	r3, [r4, #20]
 800d958:	b913      	cbnz	r3, 800d960 <_strtod_l+0x800>
 800d95a:	6923      	ldr	r3, [r4, #16]
 800d95c:	2b01      	cmp	r3, #1
 800d95e:	dd5b      	ble.n	800da18 <_strtod_l+0x8b8>
 800d960:	4621      	mov	r1, r4
 800d962:	2201      	movs	r2, #1
 800d964:	9805      	ldr	r0, [sp, #20]
 800d966:	f7ff f983 	bl	800cc70 <__lshift>
 800d96a:	4641      	mov	r1, r8
 800d96c:	4604      	mov	r4, r0
 800d96e:	f7ff f9eb 	bl	800cd48 <__mcmp>
 800d972:	2800      	cmp	r0, #0
 800d974:	dd50      	ble.n	800da18 <_strtod_l+0x8b8>
 800d976:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800d97a:	9a08      	ldr	r2, [sp, #32]
 800d97c:	0d1b      	lsrs	r3, r3, #20
 800d97e:	051b      	lsls	r3, r3, #20
 800d980:	2a00      	cmp	r2, #0
 800d982:	d06a      	beq.n	800da5a <_strtod_l+0x8fa>
 800d984:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800d988:	d867      	bhi.n	800da5a <_strtod_l+0x8fa>
 800d98a:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800d98e:	f67f ae9d 	bls.w	800d6cc <_strtod_l+0x56c>
 800d992:	4b0a      	ldr	r3, [pc, #40]	@ (800d9bc <_strtod_l+0x85c>)
 800d994:	4650      	mov	r0, sl
 800d996:	4659      	mov	r1, fp
 800d998:	2200      	movs	r2, #0
 800d99a:	f7f2 fe2d 	bl	80005f8 <__aeabi_dmul>
 800d99e:	4b08      	ldr	r3, [pc, #32]	@ (800d9c0 <_strtod_l+0x860>)
 800d9a0:	400b      	ands	r3, r1
 800d9a2:	4682      	mov	sl, r0
 800d9a4:	468b      	mov	fp, r1
 800d9a6:	2b00      	cmp	r3, #0
 800d9a8:	f47f ae08 	bne.w	800d5bc <_strtod_l+0x45c>
 800d9ac:	9a05      	ldr	r2, [sp, #20]
 800d9ae:	2322      	movs	r3, #34	@ 0x22
 800d9b0:	6013      	str	r3, [r2, #0]
 800d9b2:	e603      	b.n	800d5bc <_strtod_l+0x45c>
 800d9b4:	0800f348 	.word	0x0800f348
 800d9b8:	fffffc02 	.word	0xfffffc02
 800d9bc:	39500000 	.word	0x39500000
 800d9c0:	7ff00000 	.word	0x7ff00000
 800d9c4:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 800d9c8:	d165      	bne.n	800da96 <_strtod_l+0x936>
 800d9ca:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800d9cc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800d9d0:	b35a      	cbz	r2, 800da2a <_strtod_l+0x8ca>
 800d9d2:	4a9f      	ldr	r2, [pc, #636]	@ (800dc50 <_strtod_l+0xaf0>)
 800d9d4:	4293      	cmp	r3, r2
 800d9d6:	d12b      	bne.n	800da30 <_strtod_l+0x8d0>
 800d9d8:	9b08      	ldr	r3, [sp, #32]
 800d9da:	4651      	mov	r1, sl
 800d9dc:	b303      	cbz	r3, 800da20 <_strtod_l+0x8c0>
 800d9de:	4b9d      	ldr	r3, [pc, #628]	@ (800dc54 <_strtod_l+0xaf4>)
 800d9e0:	465a      	mov	r2, fp
 800d9e2:	4013      	ands	r3, r2
 800d9e4:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800d9e8:	f04f 32ff 	mov.w	r2, #4294967295
 800d9ec:	d81b      	bhi.n	800da26 <_strtod_l+0x8c6>
 800d9ee:	0d1b      	lsrs	r3, r3, #20
 800d9f0:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800d9f4:	fa02 f303 	lsl.w	r3, r2, r3
 800d9f8:	4299      	cmp	r1, r3
 800d9fa:	d119      	bne.n	800da30 <_strtod_l+0x8d0>
 800d9fc:	4b96      	ldr	r3, [pc, #600]	@ (800dc58 <_strtod_l+0xaf8>)
 800d9fe:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800da00:	429a      	cmp	r2, r3
 800da02:	d102      	bne.n	800da0a <_strtod_l+0x8aa>
 800da04:	3101      	adds	r1, #1
 800da06:	f43f adce 	beq.w	800d5a6 <_strtod_l+0x446>
 800da0a:	4b92      	ldr	r3, [pc, #584]	@ (800dc54 <_strtod_l+0xaf4>)
 800da0c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800da0e:	401a      	ands	r2, r3
 800da10:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800da14:	f04f 0a00 	mov.w	sl, #0
 800da18:	9b08      	ldr	r3, [sp, #32]
 800da1a:	2b00      	cmp	r3, #0
 800da1c:	d1b9      	bne.n	800d992 <_strtod_l+0x832>
 800da1e:	e5cd      	b.n	800d5bc <_strtod_l+0x45c>
 800da20:	f04f 33ff 	mov.w	r3, #4294967295
 800da24:	e7e8      	b.n	800d9f8 <_strtod_l+0x898>
 800da26:	4613      	mov	r3, r2
 800da28:	e7e6      	b.n	800d9f8 <_strtod_l+0x898>
 800da2a:	ea53 030a 	orrs.w	r3, r3, sl
 800da2e:	d0a2      	beq.n	800d976 <_strtod_l+0x816>
 800da30:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800da32:	b1db      	cbz	r3, 800da6c <_strtod_l+0x90c>
 800da34:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800da36:	4213      	tst	r3, r2
 800da38:	d0ee      	beq.n	800da18 <_strtod_l+0x8b8>
 800da3a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800da3c:	9a08      	ldr	r2, [sp, #32]
 800da3e:	4650      	mov	r0, sl
 800da40:	4659      	mov	r1, fp
 800da42:	b1bb      	cbz	r3, 800da74 <_strtod_l+0x914>
 800da44:	f7ff fb6e 	bl	800d124 <sulp>
 800da48:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800da4c:	ec53 2b10 	vmov	r2, r3, d0
 800da50:	f7f2 fc1c 	bl	800028c <__adddf3>
 800da54:	4682      	mov	sl, r0
 800da56:	468b      	mov	fp, r1
 800da58:	e7de      	b.n	800da18 <_strtod_l+0x8b8>
 800da5a:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800da5e:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800da62:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800da66:	f04f 3aff 	mov.w	sl, #4294967295
 800da6a:	e7d5      	b.n	800da18 <_strtod_l+0x8b8>
 800da6c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800da6e:	ea13 0f0a 	tst.w	r3, sl
 800da72:	e7e1      	b.n	800da38 <_strtod_l+0x8d8>
 800da74:	f7ff fb56 	bl	800d124 <sulp>
 800da78:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800da7c:	ec53 2b10 	vmov	r2, r3, d0
 800da80:	f7f2 fc02 	bl	8000288 <__aeabi_dsub>
 800da84:	2200      	movs	r2, #0
 800da86:	2300      	movs	r3, #0
 800da88:	4682      	mov	sl, r0
 800da8a:	468b      	mov	fp, r1
 800da8c:	f7f3 f81c 	bl	8000ac8 <__aeabi_dcmpeq>
 800da90:	2800      	cmp	r0, #0
 800da92:	d0c1      	beq.n	800da18 <_strtod_l+0x8b8>
 800da94:	e61a      	b.n	800d6cc <_strtod_l+0x56c>
 800da96:	4641      	mov	r1, r8
 800da98:	4620      	mov	r0, r4
 800da9a:	f7ff facd 	bl	800d038 <__ratio>
 800da9e:	ec57 6b10 	vmov	r6, r7, d0
 800daa2:	2200      	movs	r2, #0
 800daa4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800daa8:	4630      	mov	r0, r6
 800daaa:	4639      	mov	r1, r7
 800daac:	f7f3 f820 	bl	8000af0 <__aeabi_dcmple>
 800dab0:	2800      	cmp	r0, #0
 800dab2:	d06f      	beq.n	800db94 <_strtod_l+0xa34>
 800dab4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800dab6:	2b00      	cmp	r3, #0
 800dab8:	d17a      	bne.n	800dbb0 <_strtod_l+0xa50>
 800daba:	f1ba 0f00 	cmp.w	sl, #0
 800dabe:	d158      	bne.n	800db72 <_strtod_l+0xa12>
 800dac0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800dac2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800dac6:	2b00      	cmp	r3, #0
 800dac8:	d15a      	bne.n	800db80 <_strtod_l+0xa20>
 800daca:	4b64      	ldr	r3, [pc, #400]	@ (800dc5c <_strtod_l+0xafc>)
 800dacc:	2200      	movs	r2, #0
 800dace:	4630      	mov	r0, r6
 800dad0:	4639      	mov	r1, r7
 800dad2:	f7f3 f803 	bl	8000adc <__aeabi_dcmplt>
 800dad6:	2800      	cmp	r0, #0
 800dad8:	d159      	bne.n	800db8e <_strtod_l+0xa2e>
 800dada:	4630      	mov	r0, r6
 800dadc:	4639      	mov	r1, r7
 800dade:	4b60      	ldr	r3, [pc, #384]	@ (800dc60 <_strtod_l+0xb00>)
 800dae0:	2200      	movs	r2, #0
 800dae2:	f7f2 fd89 	bl	80005f8 <__aeabi_dmul>
 800dae6:	4606      	mov	r6, r0
 800dae8:	460f      	mov	r7, r1
 800daea:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800daee:	9606      	str	r6, [sp, #24]
 800daf0:	9307      	str	r3, [sp, #28]
 800daf2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800daf6:	4d57      	ldr	r5, [pc, #348]	@ (800dc54 <_strtod_l+0xaf4>)
 800daf8:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800dafc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800dafe:	401d      	ands	r5, r3
 800db00:	4b58      	ldr	r3, [pc, #352]	@ (800dc64 <_strtod_l+0xb04>)
 800db02:	429d      	cmp	r5, r3
 800db04:	f040 80b2 	bne.w	800dc6c <_strtod_l+0xb0c>
 800db08:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800db0a:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800db0e:	ec4b ab10 	vmov	d0, sl, fp
 800db12:	f7ff f9c9 	bl	800cea8 <__ulp>
 800db16:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800db1a:	ec51 0b10 	vmov	r0, r1, d0
 800db1e:	f7f2 fd6b 	bl	80005f8 <__aeabi_dmul>
 800db22:	4652      	mov	r2, sl
 800db24:	465b      	mov	r3, fp
 800db26:	f7f2 fbb1 	bl	800028c <__adddf3>
 800db2a:	460b      	mov	r3, r1
 800db2c:	4949      	ldr	r1, [pc, #292]	@ (800dc54 <_strtod_l+0xaf4>)
 800db2e:	4a4e      	ldr	r2, [pc, #312]	@ (800dc68 <_strtod_l+0xb08>)
 800db30:	4019      	ands	r1, r3
 800db32:	4291      	cmp	r1, r2
 800db34:	4682      	mov	sl, r0
 800db36:	d942      	bls.n	800dbbe <_strtod_l+0xa5e>
 800db38:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800db3a:	4b47      	ldr	r3, [pc, #284]	@ (800dc58 <_strtod_l+0xaf8>)
 800db3c:	429a      	cmp	r2, r3
 800db3e:	d103      	bne.n	800db48 <_strtod_l+0x9e8>
 800db40:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800db42:	3301      	adds	r3, #1
 800db44:	f43f ad2f 	beq.w	800d5a6 <_strtod_l+0x446>
 800db48:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 800dc58 <_strtod_l+0xaf8>
 800db4c:	f04f 3aff 	mov.w	sl, #4294967295
 800db50:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800db52:	9805      	ldr	r0, [sp, #20]
 800db54:	f7fe fe7c 	bl	800c850 <_Bfree>
 800db58:	9805      	ldr	r0, [sp, #20]
 800db5a:	4649      	mov	r1, r9
 800db5c:	f7fe fe78 	bl	800c850 <_Bfree>
 800db60:	9805      	ldr	r0, [sp, #20]
 800db62:	4641      	mov	r1, r8
 800db64:	f7fe fe74 	bl	800c850 <_Bfree>
 800db68:	9805      	ldr	r0, [sp, #20]
 800db6a:	4621      	mov	r1, r4
 800db6c:	f7fe fe70 	bl	800c850 <_Bfree>
 800db70:	e619      	b.n	800d7a6 <_strtod_l+0x646>
 800db72:	f1ba 0f01 	cmp.w	sl, #1
 800db76:	d103      	bne.n	800db80 <_strtod_l+0xa20>
 800db78:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800db7a:	2b00      	cmp	r3, #0
 800db7c:	f43f ada6 	beq.w	800d6cc <_strtod_l+0x56c>
 800db80:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 800dc30 <_strtod_l+0xad0>
 800db84:	4f35      	ldr	r7, [pc, #212]	@ (800dc5c <_strtod_l+0xafc>)
 800db86:	ed8d 7b06 	vstr	d7, [sp, #24]
 800db8a:	2600      	movs	r6, #0
 800db8c:	e7b1      	b.n	800daf2 <_strtod_l+0x992>
 800db8e:	4f34      	ldr	r7, [pc, #208]	@ (800dc60 <_strtod_l+0xb00>)
 800db90:	2600      	movs	r6, #0
 800db92:	e7aa      	b.n	800daea <_strtod_l+0x98a>
 800db94:	4b32      	ldr	r3, [pc, #200]	@ (800dc60 <_strtod_l+0xb00>)
 800db96:	4630      	mov	r0, r6
 800db98:	4639      	mov	r1, r7
 800db9a:	2200      	movs	r2, #0
 800db9c:	f7f2 fd2c 	bl	80005f8 <__aeabi_dmul>
 800dba0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800dba2:	4606      	mov	r6, r0
 800dba4:	460f      	mov	r7, r1
 800dba6:	2b00      	cmp	r3, #0
 800dba8:	d09f      	beq.n	800daea <_strtod_l+0x98a>
 800dbaa:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800dbae:	e7a0      	b.n	800daf2 <_strtod_l+0x992>
 800dbb0:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800dc38 <_strtod_l+0xad8>
 800dbb4:	ed8d 7b06 	vstr	d7, [sp, #24]
 800dbb8:	ec57 6b17 	vmov	r6, r7, d7
 800dbbc:	e799      	b.n	800daf2 <_strtod_l+0x992>
 800dbbe:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800dbc2:	9b08      	ldr	r3, [sp, #32]
 800dbc4:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 800dbc8:	2b00      	cmp	r3, #0
 800dbca:	d1c1      	bne.n	800db50 <_strtod_l+0x9f0>
 800dbcc:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800dbd0:	0d1b      	lsrs	r3, r3, #20
 800dbd2:	051b      	lsls	r3, r3, #20
 800dbd4:	429d      	cmp	r5, r3
 800dbd6:	d1bb      	bne.n	800db50 <_strtod_l+0x9f0>
 800dbd8:	4630      	mov	r0, r6
 800dbda:	4639      	mov	r1, r7
 800dbdc:	f7f3 f86c 	bl	8000cb8 <__aeabi_d2lz>
 800dbe0:	f7f2 fcdc 	bl	800059c <__aeabi_l2d>
 800dbe4:	4602      	mov	r2, r0
 800dbe6:	460b      	mov	r3, r1
 800dbe8:	4630      	mov	r0, r6
 800dbea:	4639      	mov	r1, r7
 800dbec:	f7f2 fb4c 	bl	8000288 <__aeabi_dsub>
 800dbf0:	460b      	mov	r3, r1
 800dbf2:	4602      	mov	r2, r0
 800dbf4:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800dbf8:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800dbfc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800dbfe:	ea46 060a 	orr.w	r6, r6, sl
 800dc02:	431e      	orrs	r6, r3
 800dc04:	d06f      	beq.n	800dce6 <_strtod_l+0xb86>
 800dc06:	a30e      	add	r3, pc, #56	@ (adr r3, 800dc40 <_strtod_l+0xae0>)
 800dc08:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc0c:	f7f2 ff66 	bl	8000adc <__aeabi_dcmplt>
 800dc10:	2800      	cmp	r0, #0
 800dc12:	f47f acd3 	bne.w	800d5bc <_strtod_l+0x45c>
 800dc16:	a30c      	add	r3, pc, #48	@ (adr r3, 800dc48 <_strtod_l+0xae8>)
 800dc18:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc1c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800dc20:	f7f2 ff7a 	bl	8000b18 <__aeabi_dcmpgt>
 800dc24:	2800      	cmp	r0, #0
 800dc26:	d093      	beq.n	800db50 <_strtod_l+0x9f0>
 800dc28:	e4c8      	b.n	800d5bc <_strtod_l+0x45c>
 800dc2a:	bf00      	nop
 800dc2c:	f3af 8000 	nop.w
 800dc30:	00000000 	.word	0x00000000
 800dc34:	bff00000 	.word	0xbff00000
 800dc38:	00000000 	.word	0x00000000
 800dc3c:	3ff00000 	.word	0x3ff00000
 800dc40:	94a03595 	.word	0x94a03595
 800dc44:	3fdfffff 	.word	0x3fdfffff
 800dc48:	35afe535 	.word	0x35afe535
 800dc4c:	3fe00000 	.word	0x3fe00000
 800dc50:	000fffff 	.word	0x000fffff
 800dc54:	7ff00000 	.word	0x7ff00000
 800dc58:	7fefffff 	.word	0x7fefffff
 800dc5c:	3ff00000 	.word	0x3ff00000
 800dc60:	3fe00000 	.word	0x3fe00000
 800dc64:	7fe00000 	.word	0x7fe00000
 800dc68:	7c9fffff 	.word	0x7c9fffff
 800dc6c:	9b08      	ldr	r3, [sp, #32]
 800dc6e:	b323      	cbz	r3, 800dcba <_strtod_l+0xb5a>
 800dc70:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800dc74:	d821      	bhi.n	800dcba <_strtod_l+0xb5a>
 800dc76:	a328      	add	r3, pc, #160	@ (adr r3, 800dd18 <_strtod_l+0xbb8>)
 800dc78:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc7c:	4630      	mov	r0, r6
 800dc7e:	4639      	mov	r1, r7
 800dc80:	f7f2 ff36 	bl	8000af0 <__aeabi_dcmple>
 800dc84:	b1a0      	cbz	r0, 800dcb0 <_strtod_l+0xb50>
 800dc86:	4639      	mov	r1, r7
 800dc88:	4630      	mov	r0, r6
 800dc8a:	f7f2 ff8d 	bl	8000ba8 <__aeabi_d2uiz>
 800dc8e:	2801      	cmp	r0, #1
 800dc90:	bf38      	it	cc
 800dc92:	2001      	movcc	r0, #1
 800dc94:	f7f2 fc36 	bl	8000504 <__aeabi_ui2d>
 800dc98:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800dc9a:	4606      	mov	r6, r0
 800dc9c:	460f      	mov	r7, r1
 800dc9e:	b9fb      	cbnz	r3, 800dce0 <_strtod_l+0xb80>
 800dca0:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800dca4:	9014      	str	r0, [sp, #80]	@ 0x50
 800dca6:	9315      	str	r3, [sp, #84]	@ 0x54
 800dca8:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800dcac:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800dcb0:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800dcb2:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800dcb6:	1b5b      	subs	r3, r3, r5
 800dcb8:	9311      	str	r3, [sp, #68]	@ 0x44
 800dcba:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800dcbe:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800dcc2:	f7ff f8f1 	bl	800cea8 <__ulp>
 800dcc6:	4650      	mov	r0, sl
 800dcc8:	ec53 2b10 	vmov	r2, r3, d0
 800dccc:	4659      	mov	r1, fp
 800dcce:	f7f2 fc93 	bl	80005f8 <__aeabi_dmul>
 800dcd2:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800dcd6:	f7f2 fad9 	bl	800028c <__adddf3>
 800dcda:	4682      	mov	sl, r0
 800dcdc:	468b      	mov	fp, r1
 800dcde:	e770      	b.n	800dbc2 <_strtod_l+0xa62>
 800dce0:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800dce4:	e7e0      	b.n	800dca8 <_strtod_l+0xb48>
 800dce6:	a30e      	add	r3, pc, #56	@ (adr r3, 800dd20 <_strtod_l+0xbc0>)
 800dce8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dcec:	f7f2 fef6 	bl	8000adc <__aeabi_dcmplt>
 800dcf0:	e798      	b.n	800dc24 <_strtod_l+0xac4>
 800dcf2:	2300      	movs	r3, #0
 800dcf4:	930e      	str	r3, [sp, #56]	@ 0x38
 800dcf6:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800dcf8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800dcfa:	6013      	str	r3, [r2, #0]
 800dcfc:	f7ff ba6d 	b.w	800d1da <_strtod_l+0x7a>
 800dd00:	2a65      	cmp	r2, #101	@ 0x65
 800dd02:	f43f ab68 	beq.w	800d3d6 <_strtod_l+0x276>
 800dd06:	2a45      	cmp	r2, #69	@ 0x45
 800dd08:	f43f ab65 	beq.w	800d3d6 <_strtod_l+0x276>
 800dd0c:	2301      	movs	r3, #1
 800dd0e:	f7ff bba0 	b.w	800d452 <_strtod_l+0x2f2>
 800dd12:	bf00      	nop
 800dd14:	f3af 8000 	nop.w
 800dd18:	ffc00000 	.word	0xffc00000
 800dd1c:	41dfffff 	.word	0x41dfffff
 800dd20:	94a03595 	.word	0x94a03595
 800dd24:	3fcfffff 	.word	0x3fcfffff

0800dd28 <_strtod_r>:
 800dd28:	4b01      	ldr	r3, [pc, #4]	@ (800dd30 <_strtod_r+0x8>)
 800dd2a:	f7ff ba19 	b.w	800d160 <_strtod_l>
 800dd2e:	bf00      	nop
 800dd30:	200000b4 	.word	0x200000b4

0800dd34 <_strtol_l.isra.0>:
 800dd34:	2b24      	cmp	r3, #36	@ 0x24
 800dd36:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800dd3a:	4686      	mov	lr, r0
 800dd3c:	4690      	mov	r8, r2
 800dd3e:	d801      	bhi.n	800dd44 <_strtol_l.isra.0+0x10>
 800dd40:	2b01      	cmp	r3, #1
 800dd42:	d106      	bne.n	800dd52 <_strtol_l.isra.0+0x1e>
 800dd44:	f7fd fd8c 	bl	800b860 <__errno>
 800dd48:	2316      	movs	r3, #22
 800dd4a:	6003      	str	r3, [r0, #0]
 800dd4c:	2000      	movs	r0, #0
 800dd4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dd52:	4834      	ldr	r0, [pc, #208]	@ (800de24 <_strtol_l.isra.0+0xf0>)
 800dd54:	460d      	mov	r5, r1
 800dd56:	462a      	mov	r2, r5
 800dd58:	f815 4b01 	ldrb.w	r4, [r5], #1
 800dd5c:	5d06      	ldrb	r6, [r0, r4]
 800dd5e:	f016 0608 	ands.w	r6, r6, #8
 800dd62:	d1f8      	bne.n	800dd56 <_strtol_l.isra.0+0x22>
 800dd64:	2c2d      	cmp	r4, #45	@ 0x2d
 800dd66:	d110      	bne.n	800dd8a <_strtol_l.isra.0+0x56>
 800dd68:	782c      	ldrb	r4, [r5, #0]
 800dd6a:	2601      	movs	r6, #1
 800dd6c:	1c95      	adds	r5, r2, #2
 800dd6e:	f033 0210 	bics.w	r2, r3, #16
 800dd72:	d115      	bne.n	800dda0 <_strtol_l.isra.0+0x6c>
 800dd74:	2c30      	cmp	r4, #48	@ 0x30
 800dd76:	d10d      	bne.n	800dd94 <_strtol_l.isra.0+0x60>
 800dd78:	782a      	ldrb	r2, [r5, #0]
 800dd7a:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800dd7e:	2a58      	cmp	r2, #88	@ 0x58
 800dd80:	d108      	bne.n	800dd94 <_strtol_l.isra.0+0x60>
 800dd82:	786c      	ldrb	r4, [r5, #1]
 800dd84:	3502      	adds	r5, #2
 800dd86:	2310      	movs	r3, #16
 800dd88:	e00a      	b.n	800dda0 <_strtol_l.isra.0+0x6c>
 800dd8a:	2c2b      	cmp	r4, #43	@ 0x2b
 800dd8c:	bf04      	itt	eq
 800dd8e:	782c      	ldrbeq	r4, [r5, #0]
 800dd90:	1c95      	addeq	r5, r2, #2
 800dd92:	e7ec      	b.n	800dd6e <_strtol_l.isra.0+0x3a>
 800dd94:	2b00      	cmp	r3, #0
 800dd96:	d1f6      	bne.n	800dd86 <_strtol_l.isra.0+0x52>
 800dd98:	2c30      	cmp	r4, #48	@ 0x30
 800dd9a:	bf14      	ite	ne
 800dd9c:	230a      	movne	r3, #10
 800dd9e:	2308      	moveq	r3, #8
 800dda0:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800dda4:	f10c 3cff 	add.w	ip, ip, #4294967295
 800dda8:	2200      	movs	r2, #0
 800ddaa:	fbbc f9f3 	udiv	r9, ip, r3
 800ddae:	4610      	mov	r0, r2
 800ddb0:	fb03 ca19 	mls	sl, r3, r9, ip
 800ddb4:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800ddb8:	2f09      	cmp	r7, #9
 800ddba:	d80f      	bhi.n	800dddc <_strtol_l.isra.0+0xa8>
 800ddbc:	463c      	mov	r4, r7
 800ddbe:	42a3      	cmp	r3, r4
 800ddc0:	dd1b      	ble.n	800ddfa <_strtol_l.isra.0+0xc6>
 800ddc2:	1c57      	adds	r7, r2, #1
 800ddc4:	d007      	beq.n	800ddd6 <_strtol_l.isra.0+0xa2>
 800ddc6:	4581      	cmp	r9, r0
 800ddc8:	d314      	bcc.n	800ddf4 <_strtol_l.isra.0+0xc0>
 800ddca:	d101      	bne.n	800ddd0 <_strtol_l.isra.0+0x9c>
 800ddcc:	45a2      	cmp	sl, r4
 800ddce:	db11      	blt.n	800ddf4 <_strtol_l.isra.0+0xc0>
 800ddd0:	fb00 4003 	mla	r0, r0, r3, r4
 800ddd4:	2201      	movs	r2, #1
 800ddd6:	f815 4b01 	ldrb.w	r4, [r5], #1
 800ddda:	e7eb      	b.n	800ddb4 <_strtol_l.isra.0+0x80>
 800dddc:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800dde0:	2f19      	cmp	r7, #25
 800dde2:	d801      	bhi.n	800dde8 <_strtol_l.isra.0+0xb4>
 800dde4:	3c37      	subs	r4, #55	@ 0x37
 800dde6:	e7ea      	b.n	800ddbe <_strtol_l.isra.0+0x8a>
 800dde8:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800ddec:	2f19      	cmp	r7, #25
 800ddee:	d804      	bhi.n	800ddfa <_strtol_l.isra.0+0xc6>
 800ddf0:	3c57      	subs	r4, #87	@ 0x57
 800ddf2:	e7e4      	b.n	800ddbe <_strtol_l.isra.0+0x8a>
 800ddf4:	f04f 32ff 	mov.w	r2, #4294967295
 800ddf8:	e7ed      	b.n	800ddd6 <_strtol_l.isra.0+0xa2>
 800ddfa:	1c53      	adds	r3, r2, #1
 800ddfc:	d108      	bne.n	800de10 <_strtol_l.isra.0+0xdc>
 800ddfe:	2322      	movs	r3, #34	@ 0x22
 800de00:	f8ce 3000 	str.w	r3, [lr]
 800de04:	4660      	mov	r0, ip
 800de06:	f1b8 0f00 	cmp.w	r8, #0
 800de0a:	d0a0      	beq.n	800dd4e <_strtol_l.isra.0+0x1a>
 800de0c:	1e69      	subs	r1, r5, #1
 800de0e:	e006      	b.n	800de1e <_strtol_l.isra.0+0xea>
 800de10:	b106      	cbz	r6, 800de14 <_strtol_l.isra.0+0xe0>
 800de12:	4240      	negs	r0, r0
 800de14:	f1b8 0f00 	cmp.w	r8, #0
 800de18:	d099      	beq.n	800dd4e <_strtol_l.isra.0+0x1a>
 800de1a:	2a00      	cmp	r2, #0
 800de1c:	d1f6      	bne.n	800de0c <_strtol_l.isra.0+0xd8>
 800de1e:	f8c8 1000 	str.w	r1, [r8]
 800de22:	e794      	b.n	800dd4e <_strtol_l.isra.0+0x1a>
 800de24:	0800f371 	.word	0x0800f371

0800de28 <_strtol_r>:
 800de28:	f7ff bf84 	b.w	800dd34 <_strtol_l.isra.0>

0800de2c <__ssputs_r>:
 800de2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800de30:	688e      	ldr	r6, [r1, #8]
 800de32:	461f      	mov	r7, r3
 800de34:	42be      	cmp	r6, r7
 800de36:	680b      	ldr	r3, [r1, #0]
 800de38:	4682      	mov	sl, r0
 800de3a:	460c      	mov	r4, r1
 800de3c:	4690      	mov	r8, r2
 800de3e:	d82d      	bhi.n	800de9c <__ssputs_r+0x70>
 800de40:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800de44:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800de48:	d026      	beq.n	800de98 <__ssputs_r+0x6c>
 800de4a:	6965      	ldr	r5, [r4, #20]
 800de4c:	6909      	ldr	r1, [r1, #16]
 800de4e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800de52:	eba3 0901 	sub.w	r9, r3, r1
 800de56:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800de5a:	1c7b      	adds	r3, r7, #1
 800de5c:	444b      	add	r3, r9
 800de5e:	106d      	asrs	r5, r5, #1
 800de60:	429d      	cmp	r5, r3
 800de62:	bf38      	it	cc
 800de64:	461d      	movcc	r5, r3
 800de66:	0553      	lsls	r3, r2, #21
 800de68:	d527      	bpl.n	800deba <__ssputs_r+0x8e>
 800de6a:	4629      	mov	r1, r5
 800de6c:	f7fe fc24 	bl	800c6b8 <_malloc_r>
 800de70:	4606      	mov	r6, r0
 800de72:	b360      	cbz	r0, 800dece <__ssputs_r+0xa2>
 800de74:	6921      	ldr	r1, [r4, #16]
 800de76:	464a      	mov	r2, r9
 800de78:	f7fd fd1f 	bl	800b8ba <memcpy>
 800de7c:	89a3      	ldrh	r3, [r4, #12]
 800de7e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800de82:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800de86:	81a3      	strh	r3, [r4, #12]
 800de88:	6126      	str	r6, [r4, #16]
 800de8a:	6165      	str	r5, [r4, #20]
 800de8c:	444e      	add	r6, r9
 800de8e:	eba5 0509 	sub.w	r5, r5, r9
 800de92:	6026      	str	r6, [r4, #0]
 800de94:	60a5      	str	r5, [r4, #8]
 800de96:	463e      	mov	r6, r7
 800de98:	42be      	cmp	r6, r7
 800de9a:	d900      	bls.n	800de9e <__ssputs_r+0x72>
 800de9c:	463e      	mov	r6, r7
 800de9e:	6820      	ldr	r0, [r4, #0]
 800dea0:	4632      	mov	r2, r6
 800dea2:	4641      	mov	r1, r8
 800dea4:	f000 f9d8 	bl	800e258 <memmove>
 800dea8:	68a3      	ldr	r3, [r4, #8]
 800deaa:	1b9b      	subs	r3, r3, r6
 800deac:	60a3      	str	r3, [r4, #8]
 800deae:	6823      	ldr	r3, [r4, #0]
 800deb0:	4433      	add	r3, r6
 800deb2:	6023      	str	r3, [r4, #0]
 800deb4:	2000      	movs	r0, #0
 800deb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800deba:	462a      	mov	r2, r5
 800debc:	f000 fd75 	bl	800e9aa <_realloc_r>
 800dec0:	4606      	mov	r6, r0
 800dec2:	2800      	cmp	r0, #0
 800dec4:	d1e0      	bne.n	800de88 <__ssputs_r+0x5c>
 800dec6:	6921      	ldr	r1, [r4, #16]
 800dec8:	4650      	mov	r0, sl
 800deca:	f7fe fb81 	bl	800c5d0 <_free_r>
 800dece:	230c      	movs	r3, #12
 800ded0:	f8ca 3000 	str.w	r3, [sl]
 800ded4:	89a3      	ldrh	r3, [r4, #12]
 800ded6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800deda:	81a3      	strh	r3, [r4, #12]
 800dedc:	f04f 30ff 	mov.w	r0, #4294967295
 800dee0:	e7e9      	b.n	800deb6 <__ssputs_r+0x8a>
	...

0800dee4 <_svfiprintf_r>:
 800dee4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dee8:	4698      	mov	r8, r3
 800deea:	898b      	ldrh	r3, [r1, #12]
 800deec:	061b      	lsls	r3, r3, #24
 800deee:	b09d      	sub	sp, #116	@ 0x74
 800def0:	4607      	mov	r7, r0
 800def2:	460d      	mov	r5, r1
 800def4:	4614      	mov	r4, r2
 800def6:	d510      	bpl.n	800df1a <_svfiprintf_r+0x36>
 800def8:	690b      	ldr	r3, [r1, #16]
 800defa:	b973      	cbnz	r3, 800df1a <_svfiprintf_r+0x36>
 800defc:	2140      	movs	r1, #64	@ 0x40
 800defe:	f7fe fbdb 	bl	800c6b8 <_malloc_r>
 800df02:	6028      	str	r0, [r5, #0]
 800df04:	6128      	str	r0, [r5, #16]
 800df06:	b930      	cbnz	r0, 800df16 <_svfiprintf_r+0x32>
 800df08:	230c      	movs	r3, #12
 800df0a:	603b      	str	r3, [r7, #0]
 800df0c:	f04f 30ff 	mov.w	r0, #4294967295
 800df10:	b01d      	add	sp, #116	@ 0x74
 800df12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800df16:	2340      	movs	r3, #64	@ 0x40
 800df18:	616b      	str	r3, [r5, #20]
 800df1a:	2300      	movs	r3, #0
 800df1c:	9309      	str	r3, [sp, #36]	@ 0x24
 800df1e:	2320      	movs	r3, #32
 800df20:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800df24:	f8cd 800c 	str.w	r8, [sp, #12]
 800df28:	2330      	movs	r3, #48	@ 0x30
 800df2a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800e0c8 <_svfiprintf_r+0x1e4>
 800df2e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800df32:	f04f 0901 	mov.w	r9, #1
 800df36:	4623      	mov	r3, r4
 800df38:	469a      	mov	sl, r3
 800df3a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800df3e:	b10a      	cbz	r2, 800df44 <_svfiprintf_r+0x60>
 800df40:	2a25      	cmp	r2, #37	@ 0x25
 800df42:	d1f9      	bne.n	800df38 <_svfiprintf_r+0x54>
 800df44:	ebba 0b04 	subs.w	fp, sl, r4
 800df48:	d00b      	beq.n	800df62 <_svfiprintf_r+0x7e>
 800df4a:	465b      	mov	r3, fp
 800df4c:	4622      	mov	r2, r4
 800df4e:	4629      	mov	r1, r5
 800df50:	4638      	mov	r0, r7
 800df52:	f7ff ff6b 	bl	800de2c <__ssputs_r>
 800df56:	3001      	adds	r0, #1
 800df58:	f000 80a7 	beq.w	800e0aa <_svfiprintf_r+0x1c6>
 800df5c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800df5e:	445a      	add	r2, fp
 800df60:	9209      	str	r2, [sp, #36]	@ 0x24
 800df62:	f89a 3000 	ldrb.w	r3, [sl]
 800df66:	2b00      	cmp	r3, #0
 800df68:	f000 809f 	beq.w	800e0aa <_svfiprintf_r+0x1c6>
 800df6c:	2300      	movs	r3, #0
 800df6e:	f04f 32ff 	mov.w	r2, #4294967295
 800df72:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800df76:	f10a 0a01 	add.w	sl, sl, #1
 800df7a:	9304      	str	r3, [sp, #16]
 800df7c:	9307      	str	r3, [sp, #28]
 800df7e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800df82:	931a      	str	r3, [sp, #104]	@ 0x68
 800df84:	4654      	mov	r4, sl
 800df86:	2205      	movs	r2, #5
 800df88:	f814 1b01 	ldrb.w	r1, [r4], #1
 800df8c:	484e      	ldr	r0, [pc, #312]	@ (800e0c8 <_svfiprintf_r+0x1e4>)
 800df8e:	f7f2 f91f 	bl	80001d0 <memchr>
 800df92:	9a04      	ldr	r2, [sp, #16]
 800df94:	b9d8      	cbnz	r0, 800dfce <_svfiprintf_r+0xea>
 800df96:	06d0      	lsls	r0, r2, #27
 800df98:	bf44      	itt	mi
 800df9a:	2320      	movmi	r3, #32
 800df9c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800dfa0:	0711      	lsls	r1, r2, #28
 800dfa2:	bf44      	itt	mi
 800dfa4:	232b      	movmi	r3, #43	@ 0x2b
 800dfa6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800dfaa:	f89a 3000 	ldrb.w	r3, [sl]
 800dfae:	2b2a      	cmp	r3, #42	@ 0x2a
 800dfb0:	d015      	beq.n	800dfde <_svfiprintf_r+0xfa>
 800dfb2:	9a07      	ldr	r2, [sp, #28]
 800dfb4:	4654      	mov	r4, sl
 800dfb6:	2000      	movs	r0, #0
 800dfb8:	f04f 0c0a 	mov.w	ip, #10
 800dfbc:	4621      	mov	r1, r4
 800dfbe:	f811 3b01 	ldrb.w	r3, [r1], #1
 800dfc2:	3b30      	subs	r3, #48	@ 0x30
 800dfc4:	2b09      	cmp	r3, #9
 800dfc6:	d94b      	bls.n	800e060 <_svfiprintf_r+0x17c>
 800dfc8:	b1b0      	cbz	r0, 800dff8 <_svfiprintf_r+0x114>
 800dfca:	9207      	str	r2, [sp, #28]
 800dfcc:	e014      	b.n	800dff8 <_svfiprintf_r+0x114>
 800dfce:	eba0 0308 	sub.w	r3, r0, r8
 800dfd2:	fa09 f303 	lsl.w	r3, r9, r3
 800dfd6:	4313      	orrs	r3, r2
 800dfd8:	9304      	str	r3, [sp, #16]
 800dfda:	46a2      	mov	sl, r4
 800dfdc:	e7d2      	b.n	800df84 <_svfiprintf_r+0xa0>
 800dfde:	9b03      	ldr	r3, [sp, #12]
 800dfe0:	1d19      	adds	r1, r3, #4
 800dfe2:	681b      	ldr	r3, [r3, #0]
 800dfe4:	9103      	str	r1, [sp, #12]
 800dfe6:	2b00      	cmp	r3, #0
 800dfe8:	bfbb      	ittet	lt
 800dfea:	425b      	neglt	r3, r3
 800dfec:	f042 0202 	orrlt.w	r2, r2, #2
 800dff0:	9307      	strge	r3, [sp, #28]
 800dff2:	9307      	strlt	r3, [sp, #28]
 800dff4:	bfb8      	it	lt
 800dff6:	9204      	strlt	r2, [sp, #16]
 800dff8:	7823      	ldrb	r3, [r4, #0]
 800dffa:	2b2e      	cmp	r3, #46	@ 0x2e
 800dffc:	d10a      	bne.n	800e014 <_svfiprintf_r+0x130>
 800dffe:	7863      	ldrb	r3, [r4, #1]
 800e000:	2b2a      	cmp	r3, #42	@ 0x2a
 800e002:	d132      	bne.n	800e06a <_svfiprintf_r+0x186>
 800e004:	9b03      	ldr	r3, [sp, #12]
 800e006:	1d1a      	adds	r2, r3, #4
 800e008:	681b      	ldr	r3, [r3, #0]
 800e00a:	9203      	str	r2, [sp, #12]
 800e00c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800e010:	3402      	adds	r4, #2
 800e012:	9305      	str	r3, [sp, #20]
 800e014:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800e0d8 <_svfiprintf_r+0x1f4>
 800e018:	7821      	ldrb	r1, [r4, #0]
 800e01a:	2203      	movs	r2, #3
 800e01c:	4650      	mov	r0, sl
 800e01e:	f7f2 f8d7 	bl	80001d0 <memchr>
 800e022:	b138      	cbz	r0, 800e034 <_svfiprintf_r+0x150>
 800e024:	9b04      	ldr	r3, [sp, #16]
 800e026:	eba0 000a 	sub.w	r0, r0, sl
 800e02a:	2240      	movs	r2, #64	@ 0x40
 800e02c:	4082      	lsls	r2, r0
 800e02e:	4313      	orrs	r3, r2
 800e030:	3401      	adds	r4, #1
 800e032:	9304      	str	r3, [sp, #16]
 800e034:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e038:	4824      	ldr	r0, [pc, #144]	@ (800e0cc <_svfiprintf_r+0x1e8>)
 800e03a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800e03e:	2206      	movs	r2, #6
 800e040:	f7f2 f8c6 	bl	80001d0 <memchr>
 800e044:	2800      	cmp	r0, #0
 800e046:	d036      	beq.n	800e0b6 <_svfiprintf_r+0x1d2>
 800e048:	4b21      	ldr	r3, [pc, #132]	@ (800e0d0 <_svfiprintf_r+0x1ec>)
 800e04a:	bb1b      	cbnz	r3, 800e094 <_svfiprintf_r+0x1b0>
 800e04c:	9b03      	ldr	r3, [sp, #12]
 800e04e:	3307      	adds	r3, #7
 800e050:	f023 0307 	bic.w	r3, r3, #7
 800e054:	3308      	adds	r3, #8
 800e056:	9303      	str	r3, [sp, #12]
 800e058:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e05a:	4433      	add	r3, r6
 800e05c:	9309      	str	r3, [sp, #36]	@ 0x24
 800e05e:	e76a      	b.n	800df36 <_svfiprintf_r+0x52>
 800e060:	fb0c 3202 	mla	r2, ip, r2, r3
 800e064:	460c      	mov	r4, r1
 800e066:	2001      	movs	r0, #1
 800e068:	e7a8      	b.n	800dfbc <_svfiprintf_r+0xd8>
 800e06a:	2300      	movs	r3, #0
 800e06c:	3401      	adds	r4, #1
 800e06e:	9305      	str	r3, [sp, #20]
 800e070:	4619      	mov	r1, r3
 800e072:	f04f 0c0a 	mov.w	ip, #10
 800e076:	4620      	mov	r0, r4
 800e078:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e07c:	3a30      	subs	r2, #48	@ 0x30
 800e07e:	2a09      	cmp	r2, #9
 800e080:	d903      	bls.n	800e08a <_svfiprintf_r+0x1a6>
 800e082:	2b00      	cmp	r3, #0
 800e084:	d0c6      	beq.n	800e014 <_svfiprintf_r+0x130>
 800e086:	9105      	str	r1, [sp, #20]
 800e088:	e7c4      	b.n	800e014 <_svfiprintf_r+0x130>
 800e08a:	fb0c 2101 	mla	r1, ip, r1, r2
 800e08e:	4604      	mov	r4, r0
 800e090:	2301      	movs	r3, #1
 800e092:	e7f0      	b.n	800e076 <_svfiprintf_r+0x192>
 800e094:	ab03      	add	r3, sp, #12
 800e096:	9300      	str	r3, [sp, #0]
 800e098:	462a      	mov	r2, r5
 800e09a:	4b0e      	ldr	r3, [pc, #56]	@ (800e0d4 <_svfiprintf_r+0x1f0>)
 800e09c:	a904      	add	r1, sp, #16
 800e09e:	4638      	mov	r0, r7
 800e0a0:	f7fc fca0 	bl	800a9e4 <_printf_float>
 800e0a4:	1c42      	adds	r2, r0, #1
 800e0a6:	4606      	mov	r6, r0
 800e0a8:	d1d6      	bne.n	800e058 <_svfiprintf_r+0x174>
 800e0aa:	89ab      	ldrh	r3, [r5, #12]
 800e0ac:	065b      	lsls	r3, r3, #25
 800e0ae:	f53f af2d 	bmi.w	800df0c <_svfiprintf_r+0x28>
 800e0b2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800e0b4:	e72c      	b.n	800df10 <_svfiprintf_r+0x2c>
 800e0b6:	ab03      	add	r3, sp, #12
 800e0b8:	9300      	str	r3, [sp, #0]
 800e0ba:	462a      	mov	r2, r5
 800e0bc:	4b05      	ldr	r3, [pc, #20]	@ (800e0d4 <_svfiprintf_r+0x1f0>)
 800e0be:	a904      	add	r1, sp, #16
 800e0c0:	4638      	mov	r0, r7
 800e0c2:	f7fc ff27 	bl	800af14 <_printf_i>
 800e0c6:	e7ed      	b.n	800e0a4 <_svfiprintf_r+0x1c0>
 800e0c8:	0800f1a9 	.word	0x0800f1a9
 800e0cc:	0800f1b3 	.word	0x0800f1b3
 800e0d0:	0800a9e5 	.word	0x0800a9e5
 800e0d4:	0800de2d 	.word	0x0800de2d
 800e0d8:	0800f1af 	.word	0x0800f1af

0800e0dc <__sflush_r>:
 800e0dc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800e0e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e0e4:	0716      	lsls	r6, r2, #28
 800e0e6:	4605      	mov	r5, r0
 800e0e8:	460c      	mov	r4, r1
 800e0ea:	d454      	bmi.n	800e196 <__sflush_r+0xba>
 800e0ec:	684b      	ldr	r3, [r1, #4]
 800e0ee:	2b00      	cmp	r3, #0
 800e0f0:	dc02      	bgt.n	800e0f8 <__sflush_r+0x1c>
 800e0f2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800e0f4:	2b00      	cmp	r3, #0
 800e0f6:	dd48      	ble.n	800e18a <__sflush_r+0xae>
 800e0f8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800e0fa:	2e00      	cmp	r6, #0
 800e0fc:	d045      	beq.n	800e18a <__sflush_r+0xae>
 800e0fe:	2300      	movs	r3, #0
 800e100:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800e104:	682f      	ldr	r7, [r5, #0]
 800e106:	6a21      	ldr	r1, [r4, #32]
 800e108:	602b      	str	r3, [r5, #0]
 800e10a:	d030      	beq.n	800e16e <__sflush_r+0x92>
 800e10c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800e10e:	89a3      	ldrh	r3, [r4, #12]
 800e110:	0759      	lsls	r1, r3, #29
 800e112:	d505      	bpl.n	800e120 <__sflush_r+0x44>
 800e114:	6863      	ldr	r3, [r4, #4]
 800e116:	1ad2      	subs	r2, r2, r3
 800e118:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800e11a:	b10b      	cbz	r3, 800e120 <__sflush_r+0x44>
 800e11c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800e11e:	1ad2      	subs	r2, r2, r3
 800e120:	2300      	movs	r3, #0
 800e122:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800e124:	6a21      	ldr	r1, [r4, #32]
 800e126:	4628      	mov	r0, r5
 800e128:	47b0      	blx	r6
 800e12a:	1c43      	adds	r3, r0, #1
 800e12c:	89a3      	ldrh	r3, [r4, #12]
 800e12e:	d106      	bne.n	800e13e <__sflush_r+0x62>
 800e130:	6829      	ldr	r1, [r5, #0]
 800e132:	291d      	cmp	r1, #29
 800e134:	d82b      	bhi.n	800e18e <__sflush_r+0xb2>
 800e136:	4a2a      	ldr	r2, [pc, #168]	@ (800e1e0 <__sflush_r+0x104>)
 800e138:	40ca      	lsrs	r2, r1
 800e13a:	07d6      	lsls	r6, r2, #31
 800e13c:	d527      	bpl.n	800e18e <__sflush_r+0xb2>
 800e13e:	2200      	movs	r2, #0
 800e140:	6062      	str	r2, [r4, #4]
 800e142:	04d9      	lsls	r1, r3, #19
 800e144:	6922      	ldr	r2, [r4, #16]
 800e146:	6022      	str	r2, [r4, #0]
 800e148:	d504      	bpl.n	800e154 <__sflush_r+0x78>
 800e14a:	1c42      	adds	r2, r0, #1
 800e14c:	d101      	bne.n	800e152 <__sflush_r+0x76>
 800e14e:	682b      	ldr	r3, [r5, #0]
 800e150:	b903      	cbnz	r3, 800e154 <__sflush_r+0x78>
 800e152:	6560      	str	r0, [r4, #84]	@ 0x54
 800e154:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800e156:	602f      	str	r7, [r5, #0]
 800e158:	b1b9      	cbz	r1, 800e18a <__sflush_r+0xae>
 800e15a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800e15e:	4299      	cmp	r1, r3
 800e160:	d002      	beq.n	800e168 <__sflush_r+0x8c>
 800e162:	4628      	mov	r0, r5
 800e164:	f7fe fa34 	bl	800c5d0 <_free_r>
 800e168:	2300      	movs	r3, #0
 800e16a:	6363      	str	r3, [r4, #52]	@ 0x34
 800e16c:	e00d      	b.n	800e18a <__sflush_r+0xae>
 800e16e:	2301      	movs	r3, #1
 800e170:	4628      	mov	r0, r5
 800e172:	47b0      	blx	r6
 800e174:	4602      	mov	r2, r0
 800e176:	1c50      	adds	r0, r2, #1
 800e178:	d1c9      	bne.n	800e10e <__sflush_r+0x32>
 800e17a:	682b      	ldr	r3, [r5, #0]
 800e17c:	2b00      	cmp	r3, #0
 800e17e:	d0c6      	beq.n	800e10e <__sflush_r+0x32>
 800e180:	2b1d      	cmp	r3, #29
 800e182:	d001      	beq.n	800e188 <__sflush_r+0xac>
 800e184:	2b16      	cmp	r3, #22
 800e186:	d11e      	bne.n	800e1c6 <__sflush_r+0xea>
 800e188:	602f      	str	r7, [r5, #0]
 800e18a:	2000      	movs	r0, #0
 800e18c:	e022      	b.n	800e1d4 <__sflush_r+0xf8>
 800e18e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e192:	b21b      	sxth	r3, r3
 800e194:	e01b      	b.n	800e1ce <__sflush_r+0xf2>
 800e196:	690f      	ldr	r7, [r1, #16]
 800e198:	2f00      	cmp	r7, #0
 800e19a:	d0f6      	beq.n	800e18a <__sflush_r+0xae>
 800e19c:	0793      	lsls	r3, r2, #30
 800e19e:	680e      	ldr	r6, [r1, #0]
 800e1a0:	bf08      	it	eq
 800e1a2:	694b      	ldreq	r3, [r1, #20]
 800e1a4:	600f      	str	r7, [r1, #0]
 800e1a6:	bf18      	it	ne
 800e1a8:	2300      	movne	r3, #0
 800e1aa:	eba6 0807 	sub.w	r8, r6, r7
 800e1ae:	608b      	str	r3, [r1, #8]
 800e1b0:	f1b8 0f00 	cmp.w	r8, #0
 800e1b4:	dde9      	ble.n	800e18a <__sflush_r+0xae>
 800e1b6:	6a21      	ldr	r1, [r4, #32]
 800e1b8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800e1ba:	4643      	mov	r3, r8
 800e1bc:	463a      	mov	r2, r7
 800e1be:	4628      	mov	r0, r5
 800e1c0:	47b0      	blx	r6
 800e1c2:	2800      	cmp	r0, #0
 800e1c4:	dc08      	bgt.n	800e1d8 <__sflush_r+0xfc>
 800e1c6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e1ca:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e1ce:	81a3      	strh	r3, [r4, #12]
 800e1d0:	f04f 30ff 	mov.w	r0, #4294967295
 800e1d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e1d8:	4407      	add	r7, r0
 800e1da:	eba8 0800 	sub.w	r8, r8, r0
 800e1de:	e7e7      	b.n	800e1b0 <__sflush_r+0xd4>
 800e1e0:	20400001 	.word	0x20400001

0800e1e4 <_fflush_r>:
 800e1e4:	b538      	push	{r3, r4, r5, lr}
 800e1e6:	690b      	ldr	r3, [r1, #16]
 800e1e8:	4605      	mov	r5, r0
 800e1ea:	460c      	mov	r4, r1
 800e1ec:	b913      	cbnz	r3, 800e1f4 <_fflush_r+0x10>
 800e1ee:	2500      	movs	r5, #0
 800e1f0:	4628      	mov	r0, r5
 800e1f2:	bd38      	pop	{r3, r4, r5, pc}
 800e1f4:	b118      	cbz	r0, 800e1fe <_fflush_r+0x1a>
 800e1f6:	6a03      	ldr	r3, [r0, #32]
 800e1f8:	b90b      	cbnz	r3, 800e1fe <_fflush_r+0x1a>
 800e1fa:	f7fd fa43 	bl	800b684 <__sinit>
 800e1fe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e202:	2b00      	cmp	r3, #0
 800e204:	d0f3      	beq.n	800e1ee <_fflush_r+0xa>
 800e206:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800e208:	07d0      	lsls	r0, r2, #31
 800e20a:	d404      	bmi.n	800e216 <_fflush_r+0x32>
 800e20c:	0599      	lsls	r1, r3, #22
 800e20e:	d402      	bmi.n	800e216 <_fflush_r+0x32>
 800e210:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800e212:	f7fd fb50 	bl	800b8b6 <__retarget_lock_acquire_recursive>
 800e216:	4628      	mov	r0, r5
 800e218:	4621      	mov	r1, r4
 800e21a:	f7ff ff5f 	bl	800e0dc <__sflush_r>
 800e21e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800e220:	07da      	lsls	r2, r3, #31
 800e222:	4605      	mov	r5, r0
 800e224:	d4e4      	bmi.n	800e1f0 <_fflush_r+0xc>
 800e226:	89a3      	ldrh	r3, [r4, #12]
 800e228:	059b      	lsls	r3, r3, #22
 800e22a:	d4e1      	bmi.n	800e1f0 <_fflush_r+0xc>
 800e22c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800e22e:	f7fd fb43 	bl	800b8b8 <__retarget_lock_release_recursive>
 800e232:	e7dd      	b.n	800e1f0 <_fflush_r+0xc>

0800e234 <fiprintf>:
 800e234:	b40e      	push	{r1, r2, r3}
 800e236:	b503      	push	{r0, r1, lr}
 800e238:	4601      	mov	r1, r0
 800e23a:	ab03      	add	r3, sp, #12
 800e23c:	4805      	ldr	r0, [pc, #20]	@ (800e254 <fiprintf+0x20>)
 800e23e:	f853 2b04 	ldr.w	r2, [r3], #4
 800e242:	6800      	ldr	r0, [r0, #0]
 800e244:	9301      	str	r3, [sp, #4]
 800e246:	f000 fc15 	bl	800ea74 <_vfiprintf_r>
 800e24a:	b002      	add	sp, #8
 800e24c:	f85d eb04 	ldr.w	lr, [sp], #4
 800e250:	b003      	add	sp, #12
 800e252:	4770      	bx	lr
 800e254:	20000064 	.word	0x20000064

0800e258 <memmove>:
 800e258:	4288      	cmp	r0, r1
 800e25a:	b510      	push	{r4, lr}
 800e25c:	eb01 0402 	add.w	r4, r1, r2
 800e260:	d902      	bls.n	800e268 <memmove+0x10>
 800e262:	4284      	cmp	r4, r0
 800e264:	4623      	mov	r3, r4
 800e266:	d807      	bhi.n	800e278 <memmove+0x20>
 800e268:	1e43      	subs	r3, r0, #1
 800e26a:	42a1      	cmp	r1, r4
 800e26c:	d008      	beq.n	800e280 <memmove+0x28>
 800e26e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e272:	f803 2f01 	strb.w	r2, [r3, #1]!
 800e276:	e7f8      	b.n	800e26a <memmove+0x12>
 800e278:	4402      	add	r2, r0
 800e27a:	4601      	mov	r1, r0
 800e27c:	428a      	cmp	r2, r1
 800e27e:	d100      	bne.n	800e282 <memmove+0x2a>
 800e280:	bd10      	pop	{r4, pc}
 800e282:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800e286:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800e28a:	e7f7      	b.n	800e27c <memmove+0x24>

0800e28c <strncmp>:
 800e28c:	b510      	push	{r4, lr}
 800e28e:	b16a      	cbz	r2, 800e2ac <strncmp+0x20>
 800e290:	3901      	subs	r1, #1
 800e292:	1884      	adds	r4, r0, r2
 800e294:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e298:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800e29c:	429a      	cmp	r2, r3
 800e29e:	d103      	bne.n	800e2a8 <strncmp+0x1c>
 800e2a0:	42a0      	cmp	r0, r4
 800e2a2:	d001      	beq.n	800e2a8 <strncmp+0x1c>
 800e2a4:	2a00      	cmp	r2, #0
 800e2a6:	d1f5      	bne.n	800e294 <strncmp+0x8>
 800e2a8:	1ad0      	subs	r0, r2, r3
 800e2aa:	bd10      	pop	{r4, pc}
 800e2ac:	4610      	mov	r0, r2
 800e2ae:	e7fc      	b.n	800e2aa <strncmp+0x1e>

0800e2b0 <_sbrk_r>:
 800e2b0:	b538      	push	{r3, r4, r5, lr}
 800e2b2:	4d06      	ldr	r5, [pc, #24]	@ (800e2cc <_sbrk_r+0x1c>)
 800e2b4:	2300      	movs	r3, #0
 800e2b6:	4604      	mov	r4, r0
 800e2b8:	4608      	mov	r0, r1
 800e2ba:	602b      	str	r3, [r5, #0]
 800e2bc:	f7f5 fc46 	bl	8003b4c <_sbrk>
 800e2c0:	1c43      	adds	r3, r0, #1
 800e2c2:	d102      	bne.n	800e2ca <_sbrk_r+0x1a>
 800e2c4:	682b      	ldr	r3, [r5, #0]
 800e2c6:	b103      	cbz	r3, 800e2ca <_sbrk_r+0x1a>
 800e2c8:	6023      	str	r3, [r4, #0]
 800e2ca:	bd38      	pop	{r3, r4, r5, pc}
 800e2cc:	20000fb0 	.word	0x20000fb0

0800e2d0 <nan>:
 800e2d0:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800e2d8 <nan+0x8>
 800e2d4:	4770      	bx	lr
 800e2d6:	bf00      	nop
 800e2d8:	00000000 	.word	0x00000000
 800e2dc:	7ff80000 	.word	0x7ff80000

0800e2e0 <abort>:
 800e2e0:	b508      	push	{r3, lr}
 800e2e2:	2006      	movs	r0, #6
 800e2e4:	f000 fd9a 	bl	800ee1c <raise>
 800e2e8:	2001      	movs	r0, #1
 800e2ea:	f7f5 fbb7 	bl	8003a5c <_exit>

0800e2ee <_calloc_r>:
 800e2ee:	b570      	push	{r4, r5, r6, lr}
 800e2f0:	fba1 5402 	umull	r5, r4, r1, r2
 800e2f4:	b934      	cbnz	r4, 800e304 <_calloc_r+0x16>
 800e2f6:	4629      	mov	r1, r5
 800e2f8:	f7fe f9de 	bl	800c6b8 <_malloc_r>
 800e2fc:	4606      	mov	r6, r0
 800e2fe:	b928      	cbnz	r0, 800e30c <_calloc_r+0x1e>
 800e300:	4630      	mov	r0, r6
 800e302:	bd70      	pop	{r4, r5, r6, pc}
 800e304:	220c      	movs	r2, #12
 800e306:	6002      	str	r2, [r0, #0]
 800e308:	2600      	movs	r6, #0
 800e30a:	e7f9      	b.n	800e300 <_calloc_r+0x12>
 800e30c:	462a      	mov	r2, r5
 800e30e:	4621      	mov	r1, r4
 800e310:	f7fd fa53 	bl	800b7ba <memset>
 800e314:	e7f4      	b.n	800e300 <_calloc_r+0x12>

0800e316 <rshift>:
 800e316:	6903      	ldr	r3, [r0, #16]
 800e318:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800e31c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e320:	ea4f 1261 	mov.w	r2, r1, asr #5
 800e324:	f100 0414 	add.w	r4, r0, #20
 800e328:	dd45      	ble.n	800e3b6 <rshift+0xa0>
 800e32a:	f011 011f 	ands.w	r1, r1, #31
 800e32e:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800e332:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800e336:	d10c      	bne.n	800e352 <rshift+0x3c>
 800e338:	f100 0710 	add.w	r7, r0, #16
 800e33c:	4629      	mov	r1, r5
 800e33e:	42b1      	cmp	r1, r6
 800e340:	d334      	bcc.n	800e3ac <rshift+0x96>
 800e342:	1a9b      	subs	r3, r3, r2
 800e344:	009b      	lsls	r3, r3, #2
 800e346:	1eea      	subs	r2, r5, #3
 800e348:	4296      	cmp	r6, r2
 800e34a:	bf38      	it	cc
 800e34c:	2300      	movcc	r3, #0
 800e34e:	4423      	add	r3, r4
 800e350:	e015      	b.n	800e37e <rshift+0x68>
 800e352:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800e356:	f1c1 0820 	rsb	r8, r1, #32
 800e35a:	40cf      	lsrs	r7, r1
 800e35c:	f105 0e04 	add.w	lr, r5, #4
 800e360:	46a1      	mov	r9, r4
 800e362:	4576      	cmp	r6, lr
 800e364:	46f4      	mov	ip, lr
 800e366:	d815      	bhi.n	800e394 <rshift+0x7e>
 800e368:	1a9a      	subs	r2, r3, r2
 800e36a:	0092      	lsls	r2, r2, #2
 800e36c:	3a04      	subs	r2, #4
 800e36e:	3501      	adds	r5, #1
 800e370:	42ae      	cmp	r6, r5
 800e372:	bf38      	it	cc
 800e374:	2200      	movcc	r2, #0
 800e376:	18a3      	adds	r3, r4, r2
 800e378:	50a7      	str	r7, [r4, r2]
 800e37a:	b107      	cbz	r7, 800e37e <rshift+0x68>
 800e37c:	3304      	adds	r3, #4
 800e37e:	1b1a      	subs	r2, r3, r4
 800e380:	42a3      	cmp	r3, r4
 800e382:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800e386:	bf08      	it	eq
 800e388:	2300      	moveq	r3, #0
 800e38a:	6102      	str	r2, [r0, #16]
 800e38c:	bf08      	it	eq
 800e38e:	6143      	streq	r3, [r0, #20]
 800e390:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e394:	f8dc c000 	ldr.w	ip, [ip]
 800e398:	fa0c fc08 	lsl.w	ip, ip, r8
 800e39c:	ea4c 0707 	orr.w	r7, ip, r7
 800e3a0:	f849 7b04 	str.w	r7, [r9], #4
 800e3a4:	f85e 7b04 	ldr.w	r7, [lr], #4
 800e3a8:	40cf      	lsrs	r7, r1
 800e3aa:	e7da      	b.n	800e362 <rshift+0x4c>
 800e3ac:	f851 cb04 	ldr.w	ip, [r1], #4
 800e3b0:	f847 cf04 	str.w	ip, [r7, #4]!
 800e3b4:	e7c3      	b.n	800e33e <rshift+0x28>
 800e3b6:	4623      	mov	r3, r4
 800e3b8:	e7e1      	b.n	800e37e <rshift+0x68>

0800e3ba <__hexdig_fun>:
 800e3ba:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800e3be:	2b09      	cmp	r3, #9
 800e3c0:	d802      	bhi.n	800e3c8 <__hexdig_fun+0xe>
 800e3c2:	3820      	subs	r0, #32
 800e3c4:	b2c0      	uxtb	r0, r0
 800e3c6:	4770      	bx	lr
 800e3c8:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800e3cc:	2b05      	cmp	r3, #5
 800e3ce:	d801      	bhi.n	800e3d4 <__hexdig_fun+0x1a>
 800e3d0:	3847      	subs	r0, #71	@ 0x47
 800e3d2:	e7f7      	b.n	800e3c4 <__hexdig_fun+0xa>
 800e3d4:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800e3d8:	2b05      	cmp	r3, #5
 800e3da:	d801      	bhi.n	800e3e0 <__hexdig_fun+0x26>
 800e3dc:	3827      	subs	r0, #39	@ 0x27
 800e3de:	e7f1      	b.n	800e3c4 <__hexdig_fun+0xa>
 800e3e0:	2000      	movs	r0, #0
 800e3e2:	4770      	bx	lr

0800e3e4 <__gethex>:
 800e3e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e3e8:	b085      	sub	sp, #20
 800e3ea:	468a      	mov	sl, r1
 800e3ec:	9302      	str	r3, [sp, #8]
 800e3ee:	680b      	ldr	r3, [r1, #0]
 800e3f0:	9001      	str	r0, [sp, #4]
 800e3f2:	4690      	mov	r8, r2
 800e3f4:	1c9c      	adds	r4, r3, #2
 800e3f6:	46a1      	mov	r9, r4
 800e3f8:	f814 0b01 	ldrb.w	r0, [r4], #1
 800e3fc:	2830      	cmp	r0, #48	@ 0x30
 800e3fe:	d0fa      	beq.n	800e3f6 <__gethex+0x12>
 800e400:	eba9 0303 	sub.w	r3, r9, r3
 800e404:	f1a3 0b02 	sub.w	fp, r3, #2
 800e408:	f7ff ffd7 	bl	800e3ba <__hexdig_fun>
 800e40c:	4605      	mov	r5, r0
 800e40e:	2800      	cmp	r0, #0
 800e410:	d168      	bne.n	800e4e4 <__gethex+0x100>
 800e412:	49a0      	ldr	r1, [pc, #640]	@ (800e694 <__gethex+0x2b0>)
 800e414:	2201      	movs	r2, #1
 800e416:	4648      	mov	r0, r9
 800e418:	f7ff ff38 	bl	800e28c <strncmp>
 800e41c:	4607      	mov	r7, r0
 800e41e:	2800      	cmp	r0, #0
 800e420:	d167      	bne.n	800e4f2 <__gethex+0x10e>
 800e422:	f899 0001 	ldrb.w	r0, [r9, #1]
 800e426:	4626      	mov	r6, r4
 800e428:	f7ff ffc7 	bl	800e3ba <__hexdig_fun>
 800e42c:	2800      	cmp	r0, #0
 800e42e:	d062      	beq.n	800e4f6 <__gethex+0x112>
 800e430:	4623      	mov	r3, r4
 800e432:	7818      	ldrb	r0, [r3, #0]
 800e434:	2830      	cmp	r0, #48	@ 0x30
 800e436:	4699      	mov	r9, r3
 800e438:	f103 0301 	add.w	r3, r3, #1
 800e43c:	d0f9      	beq.n	800e432 <__gethex+0x4e>
 800e43e:	f7ff ffbc 	bl	800e3ba <__hexdig_fun>
 800e442:	fab0 f580 	clz	r5, r0
 800e446:	096d      	lsrs	r5, r5, #5
 800e448:	f04f 0b01 	mov.w	fp, #1
 800e44c:	464a      	mov	r2, r9
 800e44e:	4616      	mov	r6, r2
 800e450:	3201      	adds	r2, #1
 800e452:	7830      	ldrb	r0, [r6, #0]
 800e454:	f7ff ffb1 	bl	800e3ba <__hexdig_fun>
 800e458:	2800      	cmp	r0, #0
 800e45a:	d1f8      	bne.n	800e44e <__gethex+0x6a>
 800e45c:	498d      	ldr	r1, [pc, #564]	@ (800e694 <__gethex+0x2b0>)
 800e45e:	2201      	movs	r2, #1
 800e460:	4630      	mov	r0, r6
 800e462:	f7ff ff13 	bl	800e28c <strncmp>
 800e466:	2800      	cmp	r0, #0
 800e468:	d13f      	bne.n	800e4ea <__gethex+0x106>
 800e46a:	b944      	cbnz	r4, 800e47e <__gethex+0x9a>
 800e46c:	1c74      	adds	r4, r6, #1
 800e46e:	4622      	mov	r2, r4
 800e470:	4616      	mov	r6, r2
 800e472:	3201      	adds	r2, #1
 800e474:	7830      	ldrb	r0, [r6, #0]
 800e476:	f7ff ffa0 	bl	800e3ba <__hexdig_fun>
 800e47a:	2800      	cmp	r0, #0
 800e47c:	d1f8      	bne.n	800e470 <__gethex+0x8c>
 800e47e:	1ba4      	subs	r4, r4, r6
 800e480:	00a7      	lsls	r7, r4, #2
 800e482:	7833      	ldrb	r3, [r6, #0]
 800e484:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800e488:	2b50      	cmp	r3, #80	@ 0x50
 800e48a:	d13e      	bne.n	800e50a <__gethex+0x126>
 800e48c:	7873      	ldrb	r3, [r6, #1]
 800e48e:	2b2b      	cmp	r3, #43	@ 0x2b
 800e490:	d033      	beq.n	800e4fa <__gethex+0x116>
 800e492:	2b2d      	cmp	r3, #45	@ 0x2d
 800e494:	d034      	beq.n	800e500 <__gethex+0x11c>
 800e496:	1c71      	adds	r1, r6, #1
 800e498:	2400      	movs	r4, #0
 800e49a:	7808      	ldrb	r0, [r1, #0]
 800e49c:	f7ff ff8d 	bl	800e3ba <__hexdig_fun>
 800e4a0:	1e43      	subs	r3, r0, #1
 800e4a2:	b2db      	uxtb	r3, r3
 800e4a4:	2b18      	cmp	r3, #24
 800e4a6:	d830      	bhi.n	800e50a <__gethex+0x126>
 800e4a8:	f1a0 0210 	sub.w	r2, r0, #16
 800e4ac:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800e4b0:	f7ff ff83 	bl	800e3ba <__hexdig_fun>
 800e4b4:	f100 3cff 	add.w	ip, r0, #4294967295
 800e4b8:	fa5f fc8c 	uxtb.w	ip, ip
 800e4bc:	f1bc 0f18 	cmp.w	ip, #24
 800e4c0:	f04f 030a 	mov.w	r3, #10
 800e4c4:	d91e      	bls.n	800e504 <__gethex+0x120>
 800e4c6:	b104      	cbz	r4, 800e4ca <__gethex+0xe6>
 800e4c8:	4252      	negs	r2, r2
 800e4ca:	4417      	add	r7, r2
 800e4cc:	f8ca 1000 	str.w	r1, [sl]
 800e4d0:	b1ed      	cbz	r5, 800e50e <__gethex+0x12a>
 800e4d2:	f1bb 0f00 	cmp.w	fp, #0
 800e4d6:	bf0c      	ite	eq
 800e4d8:	2506      	moveq	r5, #6
 800e4da:	2500      	movne	r5, #0
 800e4dc:	4628      	mov	r0, r5
 800e4de:	b005      	add	sp, #20
 800e4e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e4e4:	2500      	movs	r5, #0
 800e4e6:	462c      	mov	r4, r5
 800e4e8:	e7b0      	b.n	800e44c <__gethex+0x68>
 800e4ea:	2c00      	cmp	r4, #0
 800e4ec:	d1c7      	bne.n	800e47e <__gethex+0x9a>
 800e4ee:	4627      	mov	r7, r4
 800e4f0:	e7c7      	b.n	800e482 <__gethex+0x9e>
 800e4f2:	464e      	mov	r6, r9
 800e4f4:	462f      	mov	r7, r5
 800e4f6:	2501      	movs	r5, #1
 800e4f8:	e7c3      	b.n	800e482 <__gethex+0x9e>
 800e4fa:	2400      	movs	r4, #0
 800e4fc:	1cb1      	adds	r1, r6, #2
 800e4fe:	e7cc      	b.n	800e49a <__gethex+0xb6>
 800e500:	2401      	movs	r4, #1
 800e502:	e7fb      	b.n	800e4fc <__gethex+0x118>
 800e504:	fb03 0002 	mla	r0, r3, r2, r0
 800e508:	e7ce      	b.n	800e4a8 <__gethex+0xc4>
 800e50a:	4631      	mov	r1, r6
 800e50c:	e7de      	b.n	800e4cc <__gethex+0xe8>
 800e50e:	eba6 0309 	sub.w	r3, r6, r9
 800e512:	3b01      	subs	r3, #1
 800e514:	4629      	mov	r1, r5
 800e516:	2b07      	cmp	r3, #7
 800e518:	dc0a      	bgt.n	800e530 <__gethex+0x14c>
 800e51a:	9801      	ldr	r0, [sp, #4]
 800e51c:	f7fe f958 	bl	800c7d0 <_Balloc>
 800e520:	4604      	mov	r4, r0
 800e522:	b940      	cbnz	r0, 800e536 <__gethex+0x152>
 800e524:	4b5c      	ldr	r3, [pc, #368]	@ (800e698 <__gethex+0x2b4>)
 800e526:	4602      	mov	r2, r0
 800e528:	21e4      	movs	r1, #228	@ 0xe4
 800e52a:	485c      	ldr	r0, [pc, #368]	@ (800e69c <__gethex+0x2b8>)
 800e52c:	f7fd f9da 	bl	800b8e4 <__assert_func>
 800e530:	3101      	adds	r1, #1
 800e532:	105b      	asrs	r3, r3, #1
 800e534:	e7ef      	b.n	800e516 <__gethex+0x132>
 800e536:	f100 0a14 	add.w	sl, r0, #20
 800e53a:	2300      	movs	r3, #0
 800e53c:	4655      	mov	r5, sl
 800e53e:	469b      	mov	fp, r3
 800e540:	45b1      	cmp	r9, r6
 800e542:	d337      	bcc.n	800e5b4 <__gethex+0x1d0>
 800e544:	f845 bb04 	str.w	fp, [r5], #4
 800e548:	eba5 050a 	sub.w	r5, r5, sl
 800e54c:	10ad      	asrs	r5, r5, #2
 800e54e:	6125      	str	r5, [r4, #16]
 800e550:	4658      	mov	r0, fp
 800e552:	f7fe fa2f 	bl	800c9b4 <__hi0bits>
 800e556:	016d      	lsls	r5, r5, #5
 800e558:	f8d8 6000 	ldr.w	r6, [r8]
 800e55c:	1a2d      	subs	r5, r5, r0
 800e55e:	42b5      	cmp	r5, r6
 800e560:	dd54      	ble.n	800e60c <__gethex+0x228>
 800e562:	1bad      	subs	r5, r5, r6
 800e564:	4629      	mov	r1, r5
 800e566:	4620      	mov	r0, r4
 800e568:	f7fe fdbb 	bl	800d0e2 <__any_on>
 800e56c:	4681      	mov	r9, r0
 800e56e:	b178      	cbz	r0, 800e590 <__gethex+0x1ac>
 800e570:	1e6b      	subs	r3, r5, #1
 800e572:	1159      	asrs	r1, r3, #5
 800e574:	f003 021f 	and.w	r2, r3, #31
 800e578:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800e57c:	f04f 0901 	mov.w	r9, #1
 800e580:	fa09 f202 	lsl.w	r2, r9, r2
 800e584:	420a      	tst	r2, r1
 800e586:	d003      	beq.n	800e590 <__gethex+0x1ac>
 800e588:	454b      	cmp	r3, r9
 800e58a:	dc36      	bgt.n	800e5fa <__gethex+0x216>
 800e58c:	f04f 0902 	mov.w	r9, #2
 800e590:	4629      	mov	r1, r5
 800e592:	4620      	mov	r0, r4
 800e594:	f7ff febf 	bl	800e316 <rshift>
 800e598:	442f      	add	r7, r5
 800e59a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800e59e:	42bb      	cmp	r3, r7
 800e5a0:	da42      	bge.n	800e628 <__gethex+0x244>
 800e5a2:	9801      	ldr	r0, [sp, #4]
 800e5a4:	4621      	mov	r1, r4
 800e5a6:	f7fe f953 	bl	800c850 <_Bfree>
 800e5aa:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800e5ac:	2300      	movs	r3, #0
 800e5ae:	6013      	str	r3, [r2, #0]
 800e5b0:	25a3      	movs	r5, #163	@ 0xa3
 800e5b2:	e793      	b.n	800e4dc <__gethex+0xf8>
 800e5b4:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800e5b8:	2a2e      	cmp	r2, #46	@ 0x2e
 800e5ba:	d012      	beq.n	800e5e2 <__gethex+0x1fe>
 800e5bc:	2b20      	cmp	r3, #32
 800e5be:	d104      	bne.n	800e5ca <__gethex+0x1e6>
 800e5c0:	f845 bb04 	str.w	fp, [r5], #4
 800e5c4:	f04f 0b00 	mov.w	fp, #0
 800e5c8:	465b      	mov	r3, fp
 800e5ca:	7830      	ldrb	r0, [r6, #0]
 800e5cc:	9303      	str	r3, [sp, #12]
 800e5ce:	f7ff fef4 	bl	800e3ba <__hexdig_fun>
 800e5d2:	9b03      	ldr	r3, [sp, #12]
 800e5d4:	f000 000f 	and.w	r0, r0, #15
 800e5d8:	4098      	lsls	r0, r3
 800e5da:	ea4b 0b00 	orr.w	fp, fp, r0
 800e5de:	3304      	adds	r3, #4
 800e5e0:	e7ae      	b.n	800e540 <__gethex+0x15c>
 800e5e2:	45b1      	cmp	r9, r6
 800e5e4:	d8ea      	bhi.n	800e5bc <__gethex+0x1d8>
 800e5e6:	492b      	ldr	r1, [pc, #172]	@ (800e694 <__gethex+0x2b0>)
 800e5e8:	9303      	str	r3, [sp, #12]
 800e5ea:	2201      	movs	r2, #1
 800e5ec:	4630      	mov	r0, r6
 800e5ee:	f7ff fe4d 	bl	800e28c <strncmp>
 800e5f2:	9b03      	ldr	r3, [sp, #12]
 800e5f4:	2800      	cmp	r0, #0
 800e5f6:	d1e1      	bne.n	800e5bc <__gethex+0x1d8>
 800e5f8:	e7a2      	b.n	800e540 <__gethex+0x15c>
 800e5fa:	1ea9      	subs	r1, r5, #2
 800e5fc:	4620      	mov	r0, r4
 800e5fe:	f7fe fd70 	bl	800d0e2 <__any_on>
 800e602:	2800      	cmp	r0, #0
 800e604:	d0c2      	beq.n	800e58c <__gethex+0x1a8>
 800e606:	f04f 0903 	mov.w	r9, #3
 800e60a:	e7c1      	b.n	800e590 <__gethex+0x1ac>
 800e60c:	da09      	bge.n	800e622 <__gethex+0x23e>
 800e60e:	1b75      	subs	r5, r6, r5
 800e610:	4621      	mov	r1, r4
 800e612:	9801      	ldr	r0, [sp, #4]
 800e614:	462a      	mov	r2, r5
 800e616:	f7fe fb2b 	bl	800cc70 <__lshift>
 800e61a:	1b7f      	subs	r7, r7, r5
 800e61c:	4604      	mov	r4, r0
 800e61e:	f100 0a14 	add.w	sl, r0, #20
 800e622:	f04f 0900 	mov.w	r9, #0
 800e626:	e7b8      	b.n	800e59a <__gethex+0x1b6>
 800e628:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800e62c:	42bd      	cmp	r5, r7
 800e62e:	dd6f      	ble.n	800e710 <__gethex+0x32c>
 800e630:	1bed      	subs	r5, r5, r7
 800e632:	42ae      	cmp	r6, r5
 800e634:	dc34      	bgt.n	800e6a0 <__gethex+0x2bc>
 800e636:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800e63a:	2b02      	cmp	r3, #2
 800e63c:	d022      	beq.n	800e684 <__gethex+0x2a0>
 800e63e:	2b03      	cmp	r3, #3
 800e640:	d024      	beq.n	800e68c <__gethex+0x2a8>
 800e642:	2b01      	cmp	r3, #1
 800e644:	d115      	bne.n	800e672 <__gethex+0x28e>
 800e646:	42ae      	cmp	r6, r5
 800e648:	d113      	bne.n	800e672 <__gethex+0x28e>
 800e64a:	2e01      	cmp	r6, #1
 800e64c:	d10b      	bne.n	800e666 <__gethex+0x282>
 800e64e:	9a02      	ldr	r2, [sp, #8]
 800e650:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800e654:	6013      	str	r3, [r2, #0]
 800e656:	2301      	movs	r3, #1
 800e658:	6123      	str	r3, [r4, #16]
 800e65a:	f8ca 3000 	str.w	r3, [sl]
 800e65e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e660:	2562      	movs	r5, #98	@ 0x62
 800e662:	601c      	str	r4, [r3, #0]
 800e664:	e73a      	b.n	800e4dc <__gethex+0xf8>
 800e666:	1e71      	subs	r1, r6, #1
 800e668:	4620      	mov	r0, r4
 800e66a:	f7fe fd3a 	bl	800d0e2 <__any_on>
 800e66e:	2800      	cmp	r0, #0
 800e670:	d1ed      	bne.n	800e64e <__gethex+0x26a>
 800e672:	9801      	ldr	r0, [sp, #4]
 800e674:	4621      	mov	r1, r4
 800e676:	f7fe f8eb 	bl	800c850 <_Bfree>
 800e67a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800e67c:	2300      	movs	r3, #0
 800e67e:	6013      	str	r3, [r2, #0]
 800e680:	2550      	movs	r5, #80	@ 0x50
 800e682:	e72b      	b.n	800e4dc <__gethex+0xf8>
 800e684:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e686:	2b00      	cmp	r3, #0
 800e688:	d1f3      	bne.n	800e672 <__gethex+0x28e>
 800e68a:	e7e0      	b.n	800e64e <__gethex+0x26a>
 800e68c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e68e:	2b00      	cmp	r3, #0
 800e690:	d1dd      	bne.n	800e64e <__gethex+0x26a>
 800e692:	e7ee      	b.n	800e672 <__gethex+0x28e>
 800e694:	0800f1a7 	.word	0x0800f1a7
 800e698:	0800f13d 	.word	0x0800f13d
 800e69c:	0800f1c2 	.word	0x0800f1c2
 800e6a0:	1e6f      	subs	r7, r5, #1
 800e6a2:	f1b9 0f00 	cmp.w	r9, #0
 800e6a6:	d130      	bne.n	800e70a <__gethex+0x326>
 800e6a8:	b127      	cbz	r7, 800e6b4 <__gethex+0x2d0>
 800e6aa:	4639      	mov	r1, r7
 800e6ac:	4620      	mov	r0, r4
 800e6ae:	f7fe fd18 	bl	800d0e2 <__any_on>
 800e6b2:	4681      	mov	r9, r0
 800e6b4:	117a      	asrs	r2, r7, #5
 800e6b6:	2301      	movs	r3, #1
 800e6b8:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800e6bc:	f007 071f 	and.w	r7, r7, #31
 800e6c0:	40bb      	lsls	r3, r7
 800e6c2:	4213      	tst	r3, r2
 800e6c4:	4629      	mov	r1, r5
 800e6c6:	4620      	mov	r0, r4
 800e6c8:	bf18      	it	ne
 800e6ca:	f049 0902 	orrne.w	r9, r9, #2
 800e6ce:	f7ff fe22 	bl	800e316 <rshift>
 800e6d2:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800e6d6:	1b76      	subs	r6, r6, r5
 800e6d8:	2502      	movs	r5, #2
 800e6da:	f1b9 0f00 	cmp.w	r9, #0
 800e6de:	d047      	beq.n	800e770 <__gethex+0x38c>
 800e6e0:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800e6e4:	2b02      	cmp	r3, #2
 800e6e6:	d015      	beq.n	800e714 <__gethex+0x330>
 800e6e8:	2b03      	cmp	r3, #3
 800e6ea:	d017      	beq.n	800e71c <__gethex+0x338>
 800e6ec:	2b01      	cmp	r3, #1
 800e6ee:	d109      	bne.n	800e704 <__gethex+0x320>
 800e6f0:	f019 0f02 	tst.w	r9, #2
 800e6f4:	d006      	beq.n	800e704 <__gethex+0x320>
 800e6f6:	f8da 3000 	ldr.w	r3, [sl]
 800e6fa:	ea49 0903 	orr.w	r9, r9, r3
 800e6fe:	f019 0f01 	tst.w	r9, #1
 800e702:	d10e      	bne.n	800e722 <__gethex+0x33e>
 800e704:	f045 0510 	orr.w	r5, r5, #16
 800e708:	e032      	b.n	800e770 <__gethex+0x38c>
 800e70a:	f04f 0901 	mov.w	r9, #1
 800e70e:	e7d1      	b.n	800e6b4 <__gethex+0x2d0>
 800e710:	2501      	movs	r5, #1
 800e712:	e7e2      	b.n	800e6da <__gethex+0x2f6>
 800e714:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e716:	f1c3 0301 	rsb	r3, r3, #1
 800e71a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800e71c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e71e:	2b00      	cmp	r3, #0
 800e720:	d0f0      	beq.n	800e704 <__gethex+0x320>
 800e722:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800e726:	f104 0314 	add.w	r3, r4, #20
 800e72a:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800e72e:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800e732:	f04f 0c00 	mov.w	ip, #0
 800e736:	4618      	mov	r0, r3
 800e738:	f853 2b04 	ldr.w	r2, [r3], #4
 800e73c:	f1b2 3fff 	cmp.w	r2, #4294967295
 800e740:	d01b      	beq.n	800e77a <__gethex+0x396>
 800e742:	3201      	adds	r2, #1
 800e744:	6002      	str	r2, [r0, #0]
 800e746:	2d02      	cmp	r5, #2
 800e748:	f104 0314 	add.w	r3, r4, #20
 800e74c:	d13c      	bne.n	800e7c8 <__gethex+0x3e4>
 800e74e:	f8d8 2000 	ldr.w	r2, [r8]
 800e752:	3a01      	subs	r2, #1
 800e754:	42b2      	cmp	r2, r6
 800e756:	d109      	bne.n	800e76c <__gethex+0x388>
 800e758:	1171      	asrs	r1, r6, #5
 800e75a:	2201      	movs	r2, #1
 800e75c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800e760:	f006 061f 	and.w	r6, r6, #31
 800e764:	fa02 f606 	lsl.w	r6, r2, r6
 800e768:	421e      	tst	r6, r3
 800e76a:	d13a      	bne.n	800e7e2 <__gethex+0x3fe>
 800e76c:	f045 0520 	orr.w	r5, r5, #32
 800e770:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e772:	601c      	str	r4, [r3, #0]
 800e774:	9b02      	ldr	r3, [sp, #8]
 800e776:	601f      	str	r7, [r3, #0]
 800e778:	e6b0      	b.n	800e4dc <__gethex+0xf8>
 800e77a:	4299      	cmp	r1, r3
 800e77c:	f843 cc04 	str.w	ip, [r3, #-4]
 800e780:	d8d9      	bhi.n	800e736 <__gethex+0x352>
 800e782:	68a3      	ldr	r3, [r4, #8]
 800e784:	459b      	cmp	fp, r3
 800e786:	db17      	blt.n	800e7b8 <__gethex+0x3d4>
 800e788:	6861      	ldr	r1, [r4, #4]
 800e78a:	9801      	ldr	r0, [sp, #4]
 800e78c:	3101      	adds	r1, #1
 800e78e:	f7fe f81f 	bl	800c7d0 <_Balloc>
 800e792:	4681      	mov	r9, r0
 800e794:	b918      	cbnz	r0, 800e79e <__gethex+0x3ba>
 800e796:	4b1a      	ldr	r3, [pc, #104]	@ (800e800 <__gethex+0x41c>)
 800e798:	4602      	mov	r2, r0
 800e79a:	2184      	movs	r1, #132	@ 0x84
 800e79c:	e6c5      	b.n	800e52a <__gethex+0x146>
 800e79e:	6922      	ldr	r2, [r4, #16]
 800e7a0:	3202      	adds	r2, #2
 800e7a2:	f104 010c 	add.w	r1, r4, #12
 800e7a6:	0092      	lsls	r2, r2, #2
 800e7a8:	300c      	adds	r0, #12
 800e7aa:	f7fd f886 	bl	800b8ba <memcpy>
 800e7ae:	4621      	mov	r1, r4
 800e7b0:	9801      	ldr	r0, [sp, #4]
 800e7b2:	f7fe f84d 	bl	800c850 <_Bfree>
 800e7b6:	464c      	mov	r4, r9
 800e7b8:	6923      	ldr	r3, [r4, #16]
 800e7ba:	1c5a      	adds	r2, r3, #1
 800e7bc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800e7c0:	6122      	str	r2, [r4, #16]
 800e7c2:	2201      	movs	r2, #1
 800e7c4:	615a      	str	r2, [r3, #20]
 800e7c6:	e7be      	b.n	800e746 <__gethex+0x362>
 800e7c8:	6922      	ldr	r2, [r4, #16]
 800e7ca:	455a      	cmp	r2, fp
 800e7cc:	dd0b      	ble.n	800e7e6 <__gethex+0x402>
 800e7ce:	2101      	movs	r1, #1
 800e7d0:	4620      	mov	r0, r4
 800e7d2:	f7ff fda0 	bl	800e316 <rshift>
 800e7d6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800e7da:	3701      	adds	r7, #1
 800e7dc:	42bb      	cmp	r3, r7
 800e7de:	f6ff aee0 	blt.w	800e5a2 <__gethex+0x1be>
 800e7e2:	2501      	movs	r5, #1
 800e7e4:	e7c2      	b.n	800e76c <__gethex+0x388>
 800e7e6:	f016 061f 	ands.w	r6, r6, #31
 800e7ea:	d0fa      	beq.n	800e7e2 <__gethex+0x3fe>
 800e7ec:	4453      	add	r3, sl
 800e7ee:	f1c6 0620 	rsb	r6, r6, #32
 800e7f2:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800e7f6:	f7fe f8dd 	bl	800c9b4 <__hi0bits>
 800e7fa:	42b0      	cmp	r0, r6
 800e7fc:	dbe7      	blt.n	800e7ce <__gethex+0x3ea>
 800e7fe:	e7f0      	b.n	800e7e2 <__gethex+0x3fe>
 800e800:	0800f13d 	.word	0x0800f13d

0800e804 <L_shift>:
 800e804:	f1c2 0208 	rsb	r2, r2, #8
 800e808:	0092      	lsls	r2, r2, #2
 800e80a:	b570      	push	{r4, r5, r6, lr}
 800e80c:	f1c2 0620 	rsb	r6, r2, #32
 800e810:	6843      	ldr	r3, [r0, #4]
 800e812:	6804      	ldr	r4, [r0, #0]
 800e814:	fa03 f506 	lsl.w	r5, r3, r6
 800e818:	432c      	orrs	r4, r5
 800e81a:	40d3      	lsrs	r3, r2
 800e81c:	6004      	str	r4, [r0, #0]
 800e81e:	f840 3f04 	str.w	r3, [r0, #4]!
 800e822:	4288      	cmp	r0, r1
 800e824:	d3f4      	bcc.n	800e810 <L_shift+0xc>
 800e826:	bd70      	pop	{r4, r5, r6, pc}

0800e828 <__match>:
 800e828:	b530      	push	{r4, r5, lr}
 800e82a:	6803      	ldr	r3, [r0, #0]
 800e82c:	3301      	adds	r3, #1
 800e82e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e832:	b914      	cbnz	r4, 800e83a <__match+0x12>
 800e834:	6003      	str	r3, [r0, #0]
 800e836:	2001      	movs	r0, #1
 800e838:	bd30      	pop	{r4, r5, pc}
 800e83a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e83e:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800e842:	2d19      	cmp	r5, #25
 800e844:	bf98      	it	ls
 800e846:	3220      	addls	r2, #32
 800e848:	42a2      	cmp	r2, r4
 800e84a:	d0f0      	beq.n	800e82e <__match+0x6>
 800e84c:	2000      	movs	r0, #0
 800e84e:	e7f3      	b.n	800e838 <__match+0x10>

0800e850 <__hexnan>:
 800e850:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e854:	680b      	ldr	r3, [r1, #0]
 800e856:	6801      	ldr	r1, [r0, #0]
 800e858:	115e      	asrs	r6, r3, #5
 800e85a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800e85e:	f013 031f 	ands.w	r3, r3, #31
 800e862:	b087      	sub	sp, #28
 800e864:	bf18      	it	ne
 800e866:	3604      	addne	r6, #4
 800e868:	2500      	movs	r5, #0
 800e86a:	1f37      	subs	r7, r6, #4
 800e86c:	4682      	mov	sl, r0
 800e86e:	4690      	mov	r8, r2
 800e870:	9301      	str	r3, [sp, #4]
 800e872:	f846 5c04 	str.w	r5, [r6, #-4]
 800e876:	46b9      	mov	r9, r7
 800e878:	463c      	mov	r4, r7
 800e87a:	9502      	str	r5, [sp, #8]
 800e87c:	46ab      	mov	fp, r5
 800e87e:	784a      	ldrb	r2, [r1, #1]
 800e880:	1c4b      	adds	r3, r1, #1
 800e882:	9303      	str	r3, [sp, #12]
 800e884:	b342      	cbz	r2, 800e8d8 <__hexnan+0x88>
 800e886:	4610      	mov	r0, r2
 800e888:	9105      	str	r1, [sp, #20]
 800e88a:	9204      	str	r2, [sp, #16]
 800e88c:	f7ff fd95 	bl	800e3ba <__hexdig_fun>
 800e890:	2800      	cmp	r0, #0
 800e892:	d151      	bne.n	800e938 <__hexnan+0xe8>
 800e894:	9a04      	ldr	r2, [sp, #16]
 800e896:	9905      	ldr	r1, [sp, #20]
 800e898:	2a20      	cmp	r2, #32
 800e89a:	d818      	bhi.n	800e8ce <__hexnan+0x7e>
 800e89c:	9b02      	ldr	r3, [sp, #8]
 800e89e:	459b      	cmp	fp, r3
 800e8a0:	dd13      	ble.n	800e8ca <__hexnan+0x7a>
 800e8a2:	454c      	cmp	r4, r9
 800e8a4:	d206      	bcs.n	800e8b4 <__hexnan+0x64>
 800e8a6:	2d07      	cmp	r5, #7
 800e8a8:	dc04      	bgt.n	800e8b4 <__hexnan+0x64>
 800e8aa:	462a      	mov	r2, r5
 800e8ac:	4649      	mov	r1, r9
 800e8ae:	4620      	mov	r0, r4
 800e8b0:	f7ff ffa8 	bl	800e804 <L_shift>
 800e8b4:	4544      	cmp	r4, r8
 800e8b6:	d952      	bls.n	800e95e <__hexnan+0x10e>
 800e8b8:	2300      	movs	r3, #0
 800e8ba:	f1a4 0904 	sub.w	r9, r4, #4
 800e8be:	f844 3c04 	str.w	r3, [r4, #-4]
 800e8c2:	f8cd b008 	str.w	fp, [sp, #8]
 800e8c6:	464c      	mov	r4, r9
 800e8c8:	461d      	mov	r5, r3
 800e8ca:	9903      	ldr	r1, [sp, #12]
 800e8cc:	e7d7      	b.n	800e87e <__hexnan+0x2e>
 800e8ce:	2a29      	cmp	r2, #41	@ 0x29
 800e8d0:	d157      	bne.n	800e982 <__hexnan+0x132>
 800e8d2:	3102      	adds	r1, #2
 800e8d4:	f8ca 1000 	str.w	r1, [sl]
 800e8d8:	f1bb 0f00 	cmp.w	fp, #0
 800e8dc:	d051      	beq.n	800e982 <__hexnan+0x132>
 800e8de:	454c      	cmp	r4, r9
 800e8e0:	d206      	bcs.n	800e8f0 <__hexnan+0xa0>
 800e8e2:	2d07      	cmp	r5, #7
 800e8e4:	dc04      	bgt.n	800e8f0 <__hexnan+0xa0>
 800e8e6:	462a      	mov	r2, r5
 800e8e8:	4649      	mov	r1, r9
 800e8ea:	4620      	mov	r0, r4
 800e8ec:	f7ff ff8a 	bl	800e804 <L_shift>
 800e8f0:	4544      	cmp	r4, r8
 800e8f2:	d936      	bls.n	800e962 <__hexnan+0x112>
 800e8f4:	f1a8 0204 	sub.w	r2, r8, #4
 800e8f8:	4623      	mov	r3, r4
 800e8fa:	f853 1b04 	ldr.w	r1, [r3], #4
 800e8fe:	f842 1f04 	str.w	r1, [r2, #4]!
 800e902:	429f      	cmp	r7, r3
 800e904:	d2f9      	bcs.n	800e8fa <__hexnan+0xaa>
 800e906:	1b3b      	subs	r3, r7, r4
 800e908:	f023 0303 	bic.w	r3, r3, #3
 800e90c:	3304      	adds	r3, #4
 800e90e:	3401      	adds	r4, #1
 800e910:	3e03      	subs	r6, #3
 800e912:	42b4      	cmp	r4, r6
 800e914:	bf88      	it	hi
 800e916:	2304      	movhi	r3, #4
 800e918:	4443      	add	r3, r8
 800e91a:	2200      	movs	r2, #0
 800e91c:	f843 2b04 	str.w	r2, [r3], #4
 800e920:	429f      	cmp	r7, r3
 800e922:	d2fb      	bcs.n	800e91c <__hexnan+0xcc>
 800e924:	683b      	ldr	r3, [r7, #0]
 800e926:	b91b      	cbnz	r3, 800e930 <__hexnan+0xe0>
 800e928:	4547      	cmp	r7, r8
 800e92a:	d128      	bne.n	800e97e <__hexnan+0x12e>
 800e92c:	2301      	movs	r3, #1
 800e92e:	603b      	str	r3, [r7, #0]
 800e930:	2005      	movs	r0, #5
 800e932:	b007      	add	sp, #28
 800e934:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e938:	3501      	adds	r5, #1
 800e93a:	2d08      	cmp	r5, #8
 800e93c:	f10b 0b01 	add.w	fp, fp, #1
 800e940:	dd06      	ble.n	800e950 <__hexnan+0x100>
 800e942:	4544      	cmp	r4, r8
 800e944:	d9c1      	bls.n	800e8ca <__hexnan+0x7a>
 800e946:	2300      	movs	r3, #0
 800e948:	f844 3c04 	str.w	r3, [r4, #-4]
 800e94c:	2501      	movs	r5, #1
 800e94e:	3c04      	subs	r4, #4
 800e950:	6822      	ldr	r2, [r4, #0]
 800e952:	f000 000f 	and.w	r0, r0, #15
 800e956:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800e95a:	6020      	str	r0, [r4, #0]
 800e95c:	e7b5      	b.n	800e8ca <__hexnan+0x7a>
 800e95e:	2508      	movs	r5, #8
 800e960:	e7b3      	b.n	800e8ca <__hexnan+0x7a>
 800e962:	9b01      	ldr	r3, [sp, #4]
 800e964:	2b00      	cmp	r3, #0
 800e966:	d0dd      	beq.n	800e924 <__hexnan+0xd4>
 800e968:	f1c3 0320 	rsb	r3, r3, #32
 800e96c:	f04f 32ff 	mov.w	r2, #4294967295
 800e970:	40da      	lsrs	r2, r3
 800e972:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800e976:	4013      	ands	r3, r2
 800e978:	f846 3c04 	str.w	r3, [r6, #-4]
 800e97c:	e7d2      	b.n	800e924 <__hexnan+0xd4>
 800e97e:	3f04      	subs	r7, #4
 800e980:	e7d0      	b.n	800e924 <__hexnan+0xd4>
 800e982:	2004      	movs	r0, #4
 800e984:	e7d5      	b.n	800e932 <__hexnan+0xe2>

0800e986 <__ascii_mbtowc>:
 800e986:	b082      	sub	sp, #8
 800e988:	b901      	cbnz	r1, 800e98c <__ascii_mbtowc+0x6>
 800e98a:	a901      	add	r1, sp, #4
 800e98c:	b142      	cbz	r2, 800e9a0 <__ascii_mbtowc+0x1a>
 800e98e:	b14b      	cbz	r3, 800e9a4 <__ascii_mbtowc+0x1e>
 800e990:	7813      	ldrb	r3, [r2, #0]
 800e992:	600b      	str	r3, [r1, #0]
 800e994:	7812      	ldrb	r2, [r2, #0]
 800e996:	1e10      	subs	r0, r2, #0
 800e998:	bf18      	it	ne
 800e99a:	2001      	movne	r0, #1
 800e99c:	b002      	add	sp, #8
 800e99e:	4770      	bx	lr
 800e9a0:	4610      	mov	r0, r2
 800e9a2:	e7fb      	b.n	800e99c <__ascii_mbtowc+0x16>
 800e9a4:	f06f 0001 	mvn.w	r0, #1
 800e9a8:	e7f8      	b.n	800e99c <__ascii_mbtowc+0x16>

0800e9aa <_realloc_r>:
 800e9aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e9ae:	4607      	mov	r7, r0
 800e9b0:	4614      	mov	r4, r2
 800e9b2:	460d      	mov	r5, r1
 800e9b4:	b921      	cbnz	r1, 800e9c0 <_realloc_r+0x16>
 800e9b6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e9ba:	4611      	mov	r1, r2
 800e9bc:	f7fd be7c 	b.w	800c6b8 <_malloc_r>
 800e9c0:	b92a      	cbnz	r2, 800e9ce <_realloc_r+0x24>
 800e9c2:	f7fd fe05 	bl	800c5d0 <_free_r>
 800e9c6:	4625      	mov	r5, r4
 800e9c8:	4628      	mov	r0, r5
 800e9ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e9ce:	f000 fa41 	bl	800ee54 <_malloc_usable_size_r>
 800e9d2:	4284      	cmp	r4, r0
 800e9d4:	4606      	mov	r6, r0
 800e9d6:	d802      	bhi.n	800e9de <_realloc_r+0x34>
 800e9d8:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800e9dc:	d8f4      	bhi.n	800e9c8 <_realloc_r+0x1e>
 800e9de:	4621      	mov	r1, r4
 800e9e0:	4638      	mov	r0, r7
 800e9e2:	f7fd fe69 	bl	800c6b8 <_malloc_r>
 800e9e6:	4680      	mov	r8, r0
 800e9e8:	b908      	cbnz	r0, 800e9ee <_realloc_r+0x44>
 800e9ea:	4645      	mov	r5, r8
 800e9ec:	e7ec      	b.n	800e9c8 <_realloc_r+0x1e>
 800e9ee:	42b4      	cmp	r4, r6
 800e9f0:	4622      	mov	r2, r4
 800e9f2:	4629      	mov	r1, r5
 800e9f4:	bf28      	it	cs
 800e9f6:	4632      	movcs	r2, r6
 800e9f8:	f7fc ff5f 	bl	800b8ba <memcpy>
 800e9fc:	4629      	mov	r1, r5
 800e9fe:	4638      	mov	r0, r7
 800ea00:	f7fd fde6 	bl	800c5d0 <_free_r>
 800ea04:	e7f1      	b.n	800e9ea <_realloc_r+0x40>

0800ea06 <__ascii_wctomb>:
 800ea06:	4603      	mov	r3, r0
 800ea08:	4608      	mov	r0, r1
 800ea0a:	b141      	cbz	r1, 800ea1e <__ascii_wctomb+0x18>
 800ea0c:	2aff      	cmp	r2, #255	@ 0xff
 800ea0e:	d904      	bls.n	800ea1a <__ascii_wctomb+0x14>
 800ea10:	228a      	movs	r2, #138	@ 0x8a
 800ea12:	601a      	str	r2, [r3, #0]
 800ea14:	f04f 30ff 	mov.w	r0, #4294967295
 800ea18:	4770      	bx	lr
 800ea1a:	700a      	strb	r2, [r1, #0]
 800ea1c:	2001      	movs	r0, #1
 800ea1e:	4770      	bx	lr

0800ea20 <__sfputc_r>:
 800ea20:	6893      	ldr	r3, [r2, #8]
 800ea22:	3b01      	subs	r3, #1
 800ea24:	2b00      	cmp	r3, #0
 800ea26:	b410      	push	{r4}
 800ea28:	6093      	str	r3, [r2, #8]
 800ea2a:	da08      	bge.n	800ea3e <__sfputc_r+0x1e>
 800ea2c:	6994      	ldr	r4, [r2, #24]
 800ea2e:	42a3      	cmp	r3, r4
 800ea30:	db01      	blt.n	800ea36 <__sfputc_r+0x16>
 800ea32:	290a      	cmp	r1, #10
 800ea34:	d103      	bne.n	800ea3e <__sfputc_r+0x1e>
 800ea36:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ea3a:	f000 b933 	b.w	800eca4 <__swbuf_r>
 800ea3e:	6813      	ldr	r3, [r2, #0]
 800ea40:	1c58      	adds	r0, r3, #1
 800ea42:	6010      	str	r0, [r2, #0]
 800ea44:	7019      	strb	r1, [r3, #0]
 800ea46:	4608      	mov	r0, r1
 800ea48:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ea4c:	4770      	bx	lr

0800ea4e <__sfputs_r>:
 800ea4e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ea50:	4606      	mov	r6, r0
 800ea52:	460f      	mov	r7, r1
 800ea54:	4614      	mov	r4, r2
 800ea56:	18d5      	adds	r5, r2, r3
 800ea58:	42ac      	cmp	r4, r5
 800ea5a:	d101      	bne.n	800ea60 <__sfputs_r+0x12>
 800ea5c:	2000      	movs	r0, #0
 800ea5e:	e007      	b.n	800ea70 <__sfputs_r+0x22>
 800ea60:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ea64:	463a      	mov	r2, r7
 800ea66:	4630      	mov	r0, r6
 800ea68:	f7ff ffda 	bl	800ea20 <__sfputc_r>
 800ea6c:	1c43      	adds	r3, r0, #1
 800ea6e:	d1f3      	bne.n	800ea58 <__sfputs_r+0xa>
 800ea70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800ea74 <_vfiprintf_r>:
 800ea74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ea78:	460d      	mov	r5, r1
 800ea7a:	b09d      	sub	sp, #116	@ 0x74
 800ea7c:	4614      	mov	r4, r2
 800ea7e:	4698      	mov	r8, r3
 800ea80:	4606      	mov	r6, r0
 800ea82:	b118      	cbz	r0, 800ea8c <_vfiprintf_r+0x18>
 800ea84:	6a03      	ldr	r3, [r0, #32]
 800ea86:	b90b      	cbnz	r3, 800ea8c <_vfiprintf_r+0x18>
 800ea88:	f7fc fdfc 	bl	800b684 <__sinit>
 800ea8c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ea8e:	07d9      	lsls	r1, r3, #31
 800ea90:	d405      	bmi.n	800ea9e <_vfiprintf_r+0x2a>
 800ea92:	89ab      	ldrh	r3, [r5, #12]
 800ea94:	059a      	lsls	r2, r3, #22
 800ea96:	d402      	bmi.n	800ea9e <_vfiprintf_r+0x2a>
 800ea98:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ea9a:	f7fc ff0c 	bl	800b8b6 <__retarget_lock_acquire_recursive>
 800ea9e:	89ab      	ldrh	r3, [r5, #12]
 800eaa0:	071b      	lsls	r3, r3, #28
 800eaa2:	d501      	bpl.n	800eaa8 <_vfiprintf_r+0x34>
 800eaa4:	692b      	ldr	r3, [r5, #16]
 800eaa6:	b99b      	cbnz	r3, 800ead0 <_vfiprintf_r+0x5c>
 800eaa8:	4629      	mov	r1, r5
 800eaaa:	4630      	mov	r0, r6
 800eaac:	f000 f938 	bl	800ed20 <__swsetup_r>
 800eab0:	b170      	cbz	r0, 800ead0 <_vfiprintf_r+0x5c>
 800eab2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800eab4:	07dc      	lsls	r4, r3, #31
 800eab6:	d504      	bpl.n	800eac2 <_vfiprintf_r+0x4e>
 800eab8:	f04f 30ff 	mov.w	r0, #4294967295
 800eabc:	b01d      	add	sp, #116	@ 0x74
 800eabe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eac2:	89ab      	ldrh	r3, [r5, #12]
 800eac4:	0598      	lsls	r0, r3, #22
 800eac6:	d4f7      	bmi.n	800eab8 <_vfiprintf_r+0x44>
 800eac8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800eaca:	f7fc fef5 	bl	800b8b8 <__retarget_lock_release_recursive>
 800eace:	e7f3      	b.n	800eab8 <_vfiprintf_r+0x44>
 800ead0:	2300      	movs	r3, #0
 800ead2:	9309      	str	r3, [sp, #36]	@ 0x24
 800ead4:	2320      	movs	r3, #32
 800ead6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800eada:	f8cd 800c 	str.w	r8, [sp, #12]
 800eade:	2330      	movs	r3, #48	@ 0x30
 800eae0:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800ec90 <_vfiprintf_r+0x21c>
 800eae4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800eae8:	f04f 0901 	mov.w	r9, #1
 800eaec:	4623      	mov	r3, r4
 800eaee:	469a      	mov	sl, r3
 800eaf0:	f813 2b01 	ldrb.w	r2, [r3], #1
 800eaf4:	b10a      	cbz	r2, 800eafa <_vfiprintf_r+0x86>
 800eaf6:	2a25      	cmp	r2, #37	@ 0x25
 800eaf8:	d1f9      	bne.n	800eaee <_vfiprintf_r+0x7a>
 800eafa:	ebba 0b04 	subs.w	fp, sl, r4
 800eafe:	d00b      	beq.n	800eb18 <_vfiprintf_r+0xa4>
 800eb00:	465b      	mov	r3, fp
 800eb02:	4622      	mov	r2, r4
 800eb04:	4629      	mov	r1, r5
 800eb06:	4630      	mov	r0, r6
 800eb08:	f7ff ffa1 	bl	800ea4e <__sfputs_r>
 800eb0c:	3001      	adds	r0, #1
 800eb0e:	f000 80a7 	beq.w	800ec60 <_vfiprintf_r+0x1ec>
 800eb12:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800eb14:	445a      	add	r2, fp
 800eb16:	9209      	str	r2, [sp, #36]	@ 0x24
 800eb18:	f89a 3000 	ldrb.w	r3, [sl]
 800eb1c:	2b00      	cmp	r3, #0
 800eb1e:	f000 809f 	beq.w	800ec60 <_vfiprintf_r+0x1ec>
 800eb22:	2300      	movs	r3, #0
 800eb24:	f04f 32ff 	mov.w	r2, #4294967295
 800eb28:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800eb2c:	f10a 0a01 	add.w	sl, sl, #1
 800eb30:	9304      	str	r3, [sp, #16]
 800eb32:	9307      	str	r3, [sp, #28]
 800eb34:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800eb38:	931a      	str	r3, [sp, #104]	@ 0x68
 800eb3a:	4654      	mov	r4, sl
 800eb3c:	2205      	movs	r2, #5
 800eb3e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800eb42:	4853      	ldr	r0, [pc, #332]	@ (800ec90 <_vfiprintf_r+0x21c>)
 800eb44:	f7f1 fb44 	bl	80001d0 <memchr>
 800eb48:	9a04      	ldr	r2, [sp, #16]
 800eb4a:	b9d8      	cbnz	r0, 800eb84 <_vfiprintf_r+0x110>
 800eb4c:	06d1      	lsls	r1, r2, #27
 800eb4e:	bf44      	itt	mi
 800eb50:	2320      	movmi	r3, #32
 800eb52:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800eb56:	0713      	lsls	r3, r2, #28
 800eb58:	bf44      	itt	mi
 800eb5a:	232b      	movmi	r3, #43	@ 0x2b
 800eb5c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800eb60:	f89a 3000 	ldrb.w	r3, [sl]
 800eb64:	2b2a      	cmp	r3, #42	@ 0x2a
 800eb66:	d015      	beq.n	800eb94 <_vfiprintf_r+0x120>
 800eb68:	9a07      	ldr	r2, [sp, #28]
 800eb6a:	4654      	mov	r4, sl
 800eb6c:	2000      	movs	r0, #0
 800eb6e:	f04f 0c0a 	mov.w	ip, #10
 800eb72:	4621      	mov	r1, r4
 800eb74:	f811 3b01 	ldrb.w	r3, [r1], #1
 800eb78:	3b30      	subs	r3, #48	@ 0x30
 800eb7a:	2b09      	cmp	r3, #9
 800eb7c:	d94b      	bls.n	800ec16 <_vfiprintf_r+0x1a2>
 800eb7e:	b1b0      	cbz	r0, 800ebae <_vfiprintf_r+0x13a>
 800eb80:	9207      	str	r2, [sp, #28]
 800eb82:	e014      	b.n	800ebae <_vfiprintf_r+0x13a>
 800eb84:	eba0 0308 	sub.w	r3, r0, r8
 800eb88:	fa09 f303 	lsl.w	r3, r9, r3
 800eb8c:	4313      	orrs	r3, r2
 800eb8e:	9304      	str	r3, [sp, #16]
 800eb90:	46a2      	mov	sl, r4
 800eb92:	e7d2      	b.n	800eb3a <_vfiprintf_r+0xc6>
 800eb94:	9b03      	ldr	r3, [sp, #12]
 800eb96:	1d19      	adds	r1, r3, #4
 800eb98:	681b      	ldr	r3, [r3, #0]
 800eb9a:	9103      	str	r1, [sp, #12]
 800eb9c:	2b00      	cmp	r3, #0
 800eb9e:	bfbb      	ittet	lt
 800eba0:	425b      	neglt	r3, r3
 800eba2:	f042 0202 	orrlt.w	r2, r2, #2
 800eba6:	9307      	strge	r3, [sp, #28]
 800eba8:	9307      	strlt	r3, [sp, #28]
 800ebaa:	bfb8      	it	lt
 800ebac:	9204      	strlt	r2, [sp, #16]
 800ebae:	7823      	ldrb	r3, [r4, #0]
 800ebb0:	2b2e      	cmp	r3, #46	@ 0x2e
 800ebb2:	d10a      	bne.n	800ebca <_vfiprintf_r+0x156>
 800ebb4:	7863      	ldrb	r3, [r4, #1]
 800ebb6:	2b2a      	cmp	r3, #42	@ 0x2a
 800ebb8:	d132      	bne.n	800ec20 <_vfiprintf_r+0x1ac>
 800ebba:	9b03      	ldr	r3, [sp, #12]
 800ebbc:	1d1a      	adds	r2, r3, #4
 800ebbe:	681b      	ldr	r3, [r3, #0]
 800ebc0:	9203      	str	r2, [sp, #12]
 800ebc2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800ebc6:	3402      	adds	r4, #2
 800ebc8:	9305      	str	r3, [sp, #20]
 800ebca:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800eca0 <_vfiprintf_r+0x22c>
 800ebce:	7821      	ldrb	r1, [r4, #0]
 800ebd0:	2203      	movs	r2, #3
 800ebd2:	4650      	mov	r0, sl
 800ebd4:	f7f1 fafc 	bl	80001d0 <memchr>
 800ebd8:	b138      	cbz	r0, 800ebea <_vfiprintf_r+0x176>
 800ebda:	9b04      	ldr	r3, [sp, #16]
 800ebdc:	eba0 000a 	sub.w	r0, r0, sl
 800ebe0:	2240      	movs	r2, #64	@ 0x40
 800ebe2:	4082      	lsls	r2, r0
 800ebe4:	4313      	orrs	r3, r2
 800ebe6:	3401      	adds	r4, #1
 800ebe8:	9304      	str	r3, [sp, #16]
 800ebea:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ebee:	4829      	ldr	r0, [pc, #164]	@ (800ec94 <_vfiprintf_r+0x220>)
 800ebf0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800ebf4:	2206      	movs	r2, #6
 800ebf6:	f7f1 faeb 	bl	80001d0 <memchr>
 800ebfa:	2800      	cmp	r0, #0
 800ebfc:	d03f      	beq.n	800ec7e <_vfiprintf_r+0x20a>
 800ebfe:	4b26      	ldr	r3, [pc, #152]	@ (800ec98 <_vfiprintf_r+0x224>)
 800ec00:	bb1b      	cbnz	r3, 800ec4a <_vfiprintf_r+0x1d6>
 800ec02:	9b03      	ldr	r3, [sp, #12]
 800ec04:	3307      	adds	r3, #7
 800ec06:	f023 0307 	bic.w	r3, r3, #7
 800ec0a:	3308      	adds	r3, #8
 800ec0c:	9303      	str	r3, [sp, #12]
 800ec0e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ec10:	443b      	add	r3, r7
 800ec12:	9309      	str	r3, [sp, #36]	@ 0x24
 800ec14:	e76a      	b.n	800eaec <_vfiprintf_r+0x78>
 800ec16:	fb0c 3202 	mla	r2, ip, r2, r3
 800ec1a:	460c      	mov	r4, r1
 800ec1c:	2001      	movs	r0, #1
 800ec1e:	e7a8      	b.n	800eb72 <_vfiprintf_r+0xfe>
 800ec20:	2300      	movs	r3, #0
 800ec22:	3401      	adds	r4, #1
 800ec24:	9305      	str	r3, [sp, #20]
 800ec26:	4619      	mov	r1, r3
 800ec28:	f04f 0c0a 	mov.w	ip, #10
 800ec2c:	4620      	mov	r0, r4
 800ec2e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ec32:	3a30      	subs	r2, #48	@ 0x30
 800ec34:	2a09      	cmp	r2, #9
 800ec36:	d903      	bls.n	800ec40 <_vfiprintf_r+0x1cc>
 800ec38:	2b00      	cmp	r3, #0
 800ec3a:	d0c6      	beq.n	800ebca <_vfiprintf_r+0x156>
 800ec3c:	9105      	str	r1, [sp, #20]
 800ec3e:	e7c4      	b.n	800ebca <_vfiprintf_r+0x156>
 800ec40:	fb0c 2101 	mla	r1, ip, r1, r2
 800ec44:	4604      	mov	r4, r0
 800ec46:	2301      	movs	r3, #1
 800ec48:	e7f0      	b.n	800ec2c <_vfiprintf_r+0x1b8>
 800ec4a:	ab03      	add	r3, sp, #12
 800ec4c:	9300      	str	r3, [sp, #0]
 800ec4e:	462a      	mov	r2, r5
 800ec50:	4b12      	ldr	r3, [pc, #72]	@ (800ec9c <_vfiprintf_r+0x228>)
 800ec52:	a904      	add	r1, sp, #16
 800ec54:	4630      	mov	r0, r6
 800ec56:	f7fb fec5 	bl	800a9e4 <_printf_float>
 800ec5a:	4607      	mov	r7, r0
 800ec5c:	1c78      	adds	r0, r7, #1
 800ec5e:	d1d6      	bne.n	800ec0e <_vfiprintf_r+0x19a>
 800ec60:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ec62:	07d9      	lsls	r1, r3, #31
 800ec64:	d405      	bmi.n	800ec72 <_vfiprintf_r+0x1fe>
 800ec66:	89ab      	ldrh	r3, [r5, #12]
 800ec68:	059a      	lsls	r2, r3, #22
 800ec6a:	d402      	bmi.n	800ec72 <_vfiprintf_r+0x1fe>
 800ec6c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ec6e:	f7fc fe23 	bl	800b8b8 <__retarget_lock_release_recursive>
 800ec72:	89ab      	ldrh	r3, [r5, #12]
 800ec74:	065b      	lsls	r3, r3, #25
 800ec76:	f53f af1f 	bmi.w	800eab8 <_vfiprintf_r+0x44>
 800ec7a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800ec7c:	e71e      	b.n	800eabc <_vfiprintf_r+0x48>
 800ec7e:	ab03      	add	r3, sp, #12
 800ec80:	9300      	str	r3, [sp, #0]
 800ec82:	462a      	mov	r2, r5
 800ec84:	4b05      	ldr	r3, [pc, #20]	@ (800ec9c <_vfiprintf_r+0x228>)
 800ec86:	a904      	add	r1, sp, #16
 800ec88:	4630      	mov	r0, r6
 800ec8a:	f7fc f943 	bl	800af14 <_printf_i>
 800ec8e:	e7e4      	b.n	800ec5a <_vfiprintf_r+0x1e6>
 800ec90:	0800f1a9 	.word	0x0800f1a9
 800ec94:	0800f1b3 	.word	0x0800f1b3
 800ec98:	0800a9e5 	.word	0x0800a9e5
 800ec9c:	0800ea4f 	.word	0x0800ea4f
 800eca0:	0800f1af 	.word	0x0800f1af

0800eca4 <__swbuf_r>:
 800eca4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800eca6:	460e      	mov	r6, r1
 800eca8:	4614      	mov	r4, r2
 800ecaa:	4605      	mov	r5, r0
 800ecac:	b118      	cbz	r0, 800ecb6 <__swbuf_r+0x12>
 800ecae:	6a03      	ldr	r3, [r0, #32]
 800ecb0:	b90b      	cbnz	r3, 800ecb6 <__swbuf_r+0x12>
 800ecb2:	f7fc fce7 	bl	800b684 <__sinit>
 800ecb6:	69a3      	ldr	r3, [r4, #24]
 800ecb8:	60a3      	str	r3, [r4, #8]
 800ecba:	89a3      	ldrh	r3, [r4, #12]
 800ecbc:	071a      	lsls	r2, r3, #28
 800ecbe:	d501      	bpl.n	800ecc4 <__swbuf_r+0x20>
 800ecc0:	6923      	ldr	r3, [r4, #16]
 800ecc2:	b943      	cbnz	r3, 800ecd6 <__swbuf_r+0x32>
 800ecc4:	4621      	mov	r1, r4
 800ecc6:	4628      	mov	r0, r5
 800ecc8:	f000 f82a 	bl	800ed20 <__swsetup_r>
 800eccc:	b118      	cbz	r0, 800ecd6 <__swbuf_r+0x32>
 800ecce:	f04f 37ff 	mov.w	r7, #4294967295
 800ecd2:	4638      	mov	r0, r7
 800ecd4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ecd6:	6823      	ldr	r3, [r4, #0]
 800ecd8:	6922      	ldr	r2, [r4, #16]
 800ecda:	1a98      	subs	r0, r3, r2
 800ecdc:	6963      	ldr	r3, [r4, #20]
 800ecde:	b2f6      	uxtb	r6, r6
 800ece0:	4283      	cmp	r3, r0
 800ece2:	4637      	mov	r7, r6
 800ece4:	dc05      	bgt.n	800ecf2 <__swbuf_r+0x4e>
 800ece6:	4621      	mov	r1, r4
 800ece8:	4628      	mov	r0, r5
 800ecea:	f7ff fa7b 	bl	800e1e4 <_fflush_r>
 800ecee:	2800      	cmp	r0, #0
 800ecf0:	d1ed      	bne.n	800ecce <__swbuf_r+0x2a>
 800ecf2:	68a3      	ldr	r3, [r4, #8]
 800ecf4:	3b01      	subs	r3, #1
 800ecf6:	60a3      	str	r3, [r4, #8]
 800ecf8:	6823      	ldr	r3, [r4, #0]
 800ecfa:	1c5a      	adds	r2, r3, #1
 800ecfc:	6022      	str	r2, [r4, #0]
 800ecfe:	701e      	strb	r6, [r3, #0]
 800ed00:	6962      	ldr	r2, [r4, #20]
 800ed02:	1c43      	adds	r3, r0, #1
 800ed04:	429a      	cmp	r2, r3
 800ed06:	d004      	beq.n	800ed12 <__swbuf_r+0x6e>
 800ed08:	89a3      	ldrh	r3, [r4, #12]
 800ed0a:	07db      	lsls	r3, r3, #31
 800ed0c:	d5e1      	bpl.n	800ecd2 <__swbuf_r+0x2e>
 800ed0e:	2e0a      	cmp	r6, #10
 800ed10:	d1df      	bne.n	800ecd2 <__swbuf_r+0x2e>
 800ed12:	4621      	mov	r1, r4
 800ed14:	4628      	mov	r0, r5
 800ed16:	f7ff fa65 	bl	800e1e4 <_fflush_r>
 800ed1a:	2800      	cmp	r0, #0
 800ed1c:	d0d9      	beq.n	800ecd2 <__swbuf_r+0x2e>
 800ed1e:	e7d6      	b.n	800ecce <__swbuf_r+0x2a>

0800ed20 <__swsetup_r>:
 800ed20:	b538      	push	{r3, r4, r5, lr}
 800ed22:	4b29      	ldr	r3, [pc, #164]	@ (800edc8 <__swsetup_r+0xa8>)
 800ed24:	4605      	mov	r5, r0
 800ed26:	6818      	ldr	r0, [r3, #0]
 800ed28:	460c      	mov	r4, r1
 800ed2a:	b118      	cbz	r0, 800ed34 <__swsetup_r+0x14>
 800ed2c:	6a03      	ldr	r3, [r0, #32]
 800ed2e:	b90b      	cbnz	r3, 800ed34 <__swsetup_r+0x14>
 800ed30:	f7fc fca8 	bl	800b684 <__sinit>
 800ed34:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ed38:	0719      	lsls	r1, r3, #28
 800ed3a:	d422      	bmi.n	800ed82 <__swsetup_r+0x62>
 800ed3c:	06da      	lsls	r2, r3, #27
 800ed3e:	d407      	bmi.n	800ed50 <__swsetup_r+0x30>
 800ed40:	2209      	movs	r2, #9
 800ed42:	602a      	str	r2, [r5, #0]
 800ed44:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ed48:	81a3      	strh	r3, [r4, #12]
 800ed4a:	f04f 30ff 	mov.w	r0, #4294967295
 800ed4e:	e033      	b.n	800edb8 <__swsetup_r+0x98>
 800ed50:	0758      	lsls	r0, r3, #29
 800ed52:	d512      	bpl.n	800ed7a <__swsetup_r+0x5a>
 800ed54:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800ed56:	b141      	cbz	r1, 800ed6a <__swsetup_r+0x4a>
 800ed58:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800ed5c:	4299      	cmp	r1, r3
 800ed5e:	d002      	beq.n	800ed66 <__swsetup_r+0x46>
 800ed60:	4628      	mov	r0, r5
 800ed62:	f7fd fc35 	bl	800c5d0 <_free_r>
 800ed66:	2300      	movs	r3, #0
 800ed68:	6363      	str	r3, [r4, #52]	@ 0x34
 800ed6a:	89a3      	ldrh	r3, [r4, #12]
 800ed6c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800ed70:	81a3      	strh	r3, [r4, #12]
 800ed72:	2300      	movs	r3, #0
 800ed74:	6063      	str	r3, [r4, #4]
 800ed76:	6923      	ldr	r3, [r4, #16]
 800ed78:	6023      	str	r3, [r4, #0]
 800ed7a:	89a3      	ldrh	r3, [r4, #12]
 800ed7c:	f043 0308 	orr.w	r3, r3, #8
 800ed80:	81a3      	strh	r3, [r4, #12]
 800ed82:	6923      	ldr	r3, [r4, #16]
 800ed84:	b94b      	cbnz	r3, 800ed9a <__swsetup_r+0x7a>
 800ed86:	89a3      	ldrh	r3, [r4, #12]
 800ed88:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800ed8c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ed90:	d003      	beq.n	800ed9a <__swsetup_r+0x7a>
 800ed92:	4621      	mov	r1, r4
 800ed94:	4628      	mov	r0, r5
 800ed96:	f000 f88b 	bl	800eeb0 <__smakebuf_r>
 800ed9a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ed9e:	f013 0201 	ands.w	r2, r3, #1
 800eda2:	d00a      	beq.n	800edba <__swsetup_r+0x9a>
 800eda4:	2200      	movs	r2, #0
 800eda6:	60a2      	str	r2, [r4, #8]
 800eda8:	6962      	ldr	r2, [r4, #20]
 800edaa:	4252      	negs	r2, r2
 800edac:	61a2      	str	r2, [r4, #24]
 800edae:	6922      	ldr	r2, [r4, #16]
 800edb0:	b942      	cbnz	r2, 800edc4 <__swsetup_r+0xa4>
 800edb2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800edb6:	d1c5      	bne.n	800ed44 <__swsetup_r+0x24>
 800edb8:	bd38      	pop	{r3, r4, r5, pc}
 800edba:	0799      	lsls	r1, r3, #30
 800edbc:	bf58      	it	pl
 800edbe:	6962      	ldrpl	r2, [r4, #20]
 800edc0:	60a2      	str	r2, [r4, #8]
 800edc2:	e7f4      	b.n	800edae <__swsetup_r+0x8e>
 800edc4:	2000      	movs	r0, #0
 800edc6:	e7f7      	b.n	800edb8 <__swsetup_r+0x98>
 800edc8:	20000064 	.word	0x20000064

0800edcc <_raise_r>:
 800edcc:	291f      	cmp	r1, #31
 800edce:	b538      	push	{r3, r4, r5, lr}
 800edd0:	4605      	mov	r5, r0
 800edd2:	460c      	mov	r4, r1
 800edd4:	d904      	bls.n	800ede0 <_raise_r+0x14>
 800edd6:	2316      	movs	r3, #22
 800edd8:	6003      	str	r3, [r0, #0]
 800edda:	f04f 30ff 	mov.w	r0, #4294967295
 800edde:	bd38      	pop	{r3, r4, r5, pc}
 800ede0:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800ede2:	b112      	cbz	r2, 800edea <_raise_r+0x1e>
 800ede4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800ede8:	b94b      	cbnz	r3, 800edfe <_raise_r+0x32>
 800edea:	4628      	mov	r0, r5
 800edec:	f000 f830 	bl	800ee50 <_getpid_r>
 800edf0:	4622      	mov	r2, r4
 800edf2:	4601      	mov	r1, r0
 800edf4:	4628      	mov	r0, r5
 800edf6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800edfa:	f000 b817 	b.w	800ee2c <_kill_r>
 800edfe:	2b01      	cmp	r3, #1
 800ee00:	d00a      	beq.n	800ee18 <_raise_r+0x4c>
 800ee02:	1c59      	adds	r1, r3, #1
 800ee04:	d103      	bne.n	800ee0e <_raise_r+0x42>
 800ee06:	2316      	movs	r3, #22
 800ee08:	6003      	str	r3, [r0, #0]
 800ee0a:	2001      	movs	r0, #1
 800ee0c:	e7e7      	b.n	800edde <_raise_r+0x12>
 800ee0e:	2100      	movs	r1, #0
 800ee10:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800ee14:	4620      	mov	r0, r4
 800ee16:	4798      	blx	r3
 800ee18:	2000      	movs	r0, #0
 800ee1a:	e7e0      	b.n	800edde <_raise_r+0x12>

0800ee1c <raise>:
 800ee1c:	4b02      	ldr	r3, [pc, #8]	@ (800ee28 <raise+0xc>)
 800ee1e:	4601      	mov	r1, r0
 800ee20:	6818      	ldr	r0, [r3, #0]
 800ee22:	f7ff bfd3 	b.w	800edcc <_raise_r>
 800ee26:	bf00      	nop
 800ee28:	20000064 	.word	0x20000064

0800ee2c <_kill_r>:
 800ee2c:	b538      	push	{r3, r4, r5, lr}
 800ee2e:	4d07      	ldr	r5, [pc, #28]	@ (800ee4c <_kill_r+0x20>)
 800ee30:	2300      	movs	r3, #0
 800ee32:	4604      	mov	r4, r0
 800ee34:	4608      	mov	r0, r1
 800ee36:	4611      	mov	r1, r2
 800ee38:	602b      	str	r3, [r5, #0]
 800ee3a:	f7f4 fdff 	bl	8003a3c <_kill>
 800ee3e:	1c43      	adds	r3, r0, #1
 800ee40:	d102      	bne.n	800ee48 <_kill_r+0x1c>
 800ee42:	682b      	ldr	r3, [r5, #0]
 800ee44:	b103      	cbz	r3, 800ee48 <_kill_r+0x1c>
 800ee46:	6023      	str	r3, [r4, #0]
 800ee48:	bd38      	pop	{r3, r4, r5, pc}
 800ee4a:	bf00      	nop
 800ee4c:	20000fb0 	.word	0x20000fb0

0800ee50 <_getpid_r>:
 800ee50:	f7f4 bdec 	b.w	8003a2c <_getpid>

0800ee54 <_malloc_usable_size_r>:
 800ee54:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ee58:	1f18      	subs	r0, r3, #4
 800ee5a:	2b00      	cmp	r3, #0
 800ee5c:	bfbc      	itt	lt
 800ee5e:	580b      	ldrlt	r3, [r1, r0]
 800ee60:	18c0      	addlt	r0, r0, r3
 800ee62:	4770      	bx	lr

0800ee64 <__swhatbuf_r>:
 800ee64:	b570      	push	{r4, r5, r6, lr}
 800ee66:	460c      	mov	r4, r1
 800ee68:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ee6c:	2900      	cmp	r1, #0
 800ee6e:	b096      	sub	sp, #88	@ 0x58
 800ee70:	4615      	mov	r5, r2
 800ee72:	461e      	mov	r6, r3
 800ee74:	da0d      	bge.n	800ee92 <__swhatbuf_r+0x2e>
 800ee76:	89a3      	ldrh	r3, [r4, #12]
 800ee78:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800ee7c:	f04f 0100 	mov.w	r1, #0
 800ee80:	bf14      	ite	ne
 800ee82:	2340      	movne	r3, #64	@ 0x40
 800ee84:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800ee88:	2000      	movs	r0, #0
 800ee8a:	6031      	str	r1, [r6, #0]
 800ee8c:	602b      	str	r3, [r5, #0]
 800ee8e:	b016      	add	sp, #88	@ 0x58
 800ee90:	bd70      	pop	{r4, r5, r6, pc}
 800ee92:	466a      	mov	r2, sp
 800ee94:	f000 f848 	bl	800ef28 <_fstat_r>
 800ee98:	2800      	cmp	r0, #0
 800ee9a:	dbec      	blt.n	800ee76 <__swhatbuf_r+0x12>
 800ee9c:	9901      	ldr	r1, [sp, #4]
 800ee9e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800eea2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800eea6:	4259      	negs	r1, r3
 800eea8:	4159      	adcs	r1, r3
 800eeaa:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800eeae:	e7eb      	b.n	800ee88 <__swhatbuf_r+0x24>

0800eeb0 <__smakebuf_r>:
 800eeb0:	898b      	ldrh	r3, [r1, #12]
 800eeb2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800eeb4:	079d      	lsls	r5, r3, #30
 800eeb6:	4606      	mov	r6, r0
 800eeb8:	460c      	mov	r4, r1
 800eeba:	d507      	bpl.n	800eecc <__smakebuf_r+0x1c>
 800eebc:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800eec0:	6023      	str	r3, [r4, #0]
 800eec2:	6123      	str	r3, [r4, #16]
 800eec4:	2301      	movs	r3, #1
 800eec6:	6163      	str	r3, [r4, #20]
 800eec8:	b003      	add	sp, #12
 800eeca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800eecc:	ab01      	add	r3, sp, #4
 800eece:	466a      	mov	r2, sp
 800eed0:	f7ff ffc8 	bl	800ee64 <__swhatbuf_r>
 800eed4:	9f00      	ldr	r7, [sp, #0]
 800eed6:	4605      	mov	r5, r0
 800eed8:	4639      	mov	r1, r7
 800eeda:	4630      	mov	r0, r6
 800eedc:	f7fd fbec 	bl	800c6b8 <_malloc_r>
 800eee0:	b948      	cbnz	r0, 800eef6 <__smakebuf_r+0x46>
 800eee2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800eee6:	059a      	lsls	r2, r3, #22
 800eee8:	d4ee      	bmi.n	800eec8 <__smakebuf_r+0x18>
 800eeea:	f023 0303 	bic.w	r3, r3, #3
 800eeee:	f043 0302 	orr.w	r3, r3, #2
 800eef2:	81a3      	strh	r3, [r4, #12]
 800eef4:	e7e2      	b.n	800eebc <__smakebuf_r+0xc>
 800eef6:	89a3      	ldrh	r3, [r4, #12]
 800eef8:	6020      	str	r0, [r4, #0]
 800eefa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800eefe:	81a3      	strh	r3, [r4, #12]
 800ef00:	9b01      	ldr	r3, [sp, #4]
 800ef02:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800ef06:	b15b      	cbz	r3, 800ef20 <__smakebuf_r+0x70>
 800ef08:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ef0c:	4630      	mov	r0, r6
 800ef0e:	f000 f81d 	bl	800ef4c <_isatty_r>
 800ef12:	b128      	cbz	r0, 800ef20 <__smakebuf_r+0x70>
 800ef14:	89a3      	ldrh	r3, [r4, #12]
 800ef16:	f023 0303 	bic.w	r3, r3, #3
 800ef1a:	f043 0301 	orr.w	r3, r3, #1
 800ef1e:	81a3      	strh	r3, [r4, #12]
 800ef20:	89a3      	ldrh	r3, [r4, #12]
 800ef22:	431d      	orrs	r5, r3
 800ef24:	81a5      	strh	r5, [r4, #12]
 800ef26:	e7cf      	b.n	800eec8 <__smakebuf_r+0x18>

0800ef28 <_fstat_r>:
 800ef28:	b538      	push	{r3, r4, r5, lr}
 800ef2a:	4d07      	ldr	r5, [pc, #28]	@ (800ef48 <_fstat_r+0x20>)
 800ef2c:	2300      	movs	r3, #0
 800ef2e:	4604      	mov	r4, r0
 800ef30:	4608      	mov	r0, r1
 800ef32:	4611      	mov	r1, r2
 800ef34:	602b      	str	r3, [r5, #0]
 800ef36:	f7f4 fde1 	bl	8003afc <_fstat>
 800ef3a:	1c43      	adds	r3, r0, #1
 800ef3c:	d102      	bne.n	800ef44 <_fstat_r+0x1c>
 800ef3e:	682b      	ldr	r3, [r5, #0]
 800ef40:	b103      	cbz	r3, 800ef44 <_fstat_r+0x1c>
 800ef42:	6023      	str	r3, [r4, #0]
 800ef44:	bd38      	pop	{r3, r4, r5, pc}
 800ef46:	bf00      	nop
 800ef48:	20000fb0 	.word	0x20000fb0

0800ef4c <_isatty_r>:
 800ef4c:	b538      	push	{r3, r4, r5, lr}
 800ef4e:	4d06      	ldr	r5, [pc, #24]	@ (800ef68 <_isatty_r+0x1c>)
 800ef50:	2300      	movs	r3, #0
 800ef52:	4604      	mov	r4, r0
 800ef54:	4608      	mov	r0, r1
 800ef56:	602b      	str	r3, [r5, #0]
 800ef58:	f7f4 fde0 	bl	8003b1c <_isatty>
 800ef5c:	1c43      	adds	r3, r0, #1
 800ef5e:	d102      	bne.n	800ef66 <_isatty_r+0x1a>
 800ef60:	682b      	ldr	r3, [r5, #0]
 800ef62:	b103      	cbz	r3, 800ef66 <_isatty_r+0x1a>
 800ef64:	6023      	str	r3, [r4, #0]
 800ef66:	bd38      	pop	{r3, r4, r5, pc}
 800ef68:	20000fb0 	.word	0x20000fb0

0800ef6c <_init>:
 800ef6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ef6e:	bf00      	nop
 800ef70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ef72:	bc08      	pop	{r3}
 800ef74:	469e      	mov	lr, r3
 800ef76:	4770      	bx	lr

0800ef78 <_fini>:
 800ef78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ef7a:	bf00      	nop
 800ef7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ef7e:	bc08      	pop	{r3}
 800ef80:	469e      	mov	lr, r3
 800ef82:	4770      	bx	lr
