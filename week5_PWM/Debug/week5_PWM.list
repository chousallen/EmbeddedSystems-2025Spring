
week5_PWM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000685c  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  080069e4  080069e4  000079e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006a2c  08006a2c  0000800c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08006a2c  08006a2c  00007a2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006a34  08006a34  0000800c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006a34  08006a34  00007a34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006a38  08006a38  00007a38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08006a3c  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000860  2000000c  08006a48  0000800c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000086c  08006a48  0000886c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000800c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001c779  00000000  00000000  0000803c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003444  00000000  00000000  000247b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001b28  00000000  00000000  00027c00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001552  00000000  00000000  00029728  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028504  00000000  00000000  0002ac7a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001ec56  00000000  00000000  0005317e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fa791  00000000  00000000  00071dd4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0016c565  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007654  00000000  00000000  0016c5a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005a  00000000  00000000  00173bfc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080069cc 	.word	0x080069cc

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	080069cc 	.word	0x080069cc

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b988 	b.w	80004f0 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	468e      	mov	lr, r1
 8000200:	4604      	mov	r4, r0
 8000202:	4688      	mov	r8, r1
 8000204:	2b00      	cmp	r3, #0
 8000206:	d14a      	bne.n	800029e <__udivmoddi4+0xa6>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d962      	bls.n	80002d4 <__udivmoddi4+0xdc>
 800020e:	fab2 f682 	clz	r6, r2
 8000212:	b14e      	cbz	r6, 8000228 <__udivmoddi4+0x30>
 8000214:	f1c6 0320 	rsb	r3, r6, #32
 8000218:	fa01 f806 	lsl.w	r8, r1, r6
 800021c:	fa20 f303 	lsr.w	r3, r0, r3
 8000220:	40b7      	lsls	r7, r6
 8000222:	ea43 0808 	orr.w	r8, r3, r8
 8000226:	40b4      	lsls	r4, r6
 8000228:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800022c:	fa1f fc87 	uxth.w	ip, r7
 8000230:	fbb8 f1fe 	udiv	r1, r8, lr
 8000234:	0c23      	lsrs	r3, r4, #16
 8000236:	fb0e 8811 	mls	r8, lr, r1, r8
 800023a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800023e:	fb01 f20c 	mul.w	r2, r1, ip
 8000242:	429a      	cmp	r2, r3
 8000244:	d909      	bls.n	800025a <__udivmoddi4+0x62>
 8000246:	18fb      	adds	r3, r7, r3
 8000248:	f101 30ff 	add.w	r0, r1, #4294967295
 800024c:	f080 80ea 	bcs.w	8000424 <__udivmoddi4+0x22c>
 8000250:	429a      	cmp	r2, r3
 8000252:	f240 80e7 	bls.w	8000424 <__udivmoddi4+0x22c>
 8000256:	3902      	subs	r1, #2
 8000258:	443b      	add	r3, r7
 800025a:	1a9a      	subs	r2, r3, r2
 800025c:	b2a3      	uxth	r3, r4
 800025e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000262:	fb0e 2210 	mls	r2, lr, r0, r2
 8000266:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800026a:	fb00 fc0c 	mul.w	ip, r0, ip
 800026e:	459c      	cmp	ip, r3
 8000270:	d909      	bls.n	8000286 <__udivmoddi4+0x8e>
 8000272:	18fb      	adds	r3, r7, r3
 8000274:	f100 32ff 	add.w	r2, r0, #4294967295
 8000278:	f080 80d6 	bcs.w	8000428 <__udivmoddi4+0x230>
 800027c:	459c      	cmp	ip, r3
 800027e:	f240 80d3 	bls.w	8000428 <__udivmoddi4+0x230>
 8000282:	443b      	add	r3, r7
 8000284:	3802      	subs	r0, #2
 8000286:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800028a:	eba3 030c 	sub.w	r3, r3, ip
 800028e:	2100      	movs	r1, #0
 8000290:	b11d      	cbz	r5, 800029a <__udivmoddi4+0xa2>
 8000292:	40f3      	lsrs	r3, r6
 8000294:	2200      	movs	r2, #0
 8000296:	e9c5 3200 	strd	r3, r2, [r5]
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d905      	bls.n	80002ae <__udivmoddi4+0xb6>
 80002a2:	b10d      	cbz	r5, 80002a8 <__udivmoddi4+0xb0>
 80002a4:	e9c5 0100 	strd	r0, r1, [r5]
 80002a8:	2100      	movs	r1, #0
 80002aa:	4608      	mov	r0, r1
 80002ac:	e7f5      	b.n	800029a <__udivmoddi4+0xa2>
 80002ae:	fab3 f183 	clz	r1, r3
 80002b2:	2900      	cmp	r1, #0
 80002b4:	d146      	bne.n	8000344 <__udivmoddi4+0x14c>
 80002b6:	4573      	cmp	r3, lr
 80002b8:	d302      	bcc.n	80002c0 <__udivmoddi4+0xc8>
 80002ba:	4282      	cmp	r2, r0
 80002bc:	f200 8105 	bhi.w	80004ca <__udivmoddi4+0x2d2>
 80002c0:	1a84      	subs	r4, r0, r2
 80002c2:	eb6e 0203 	sbc.w	r2, lr, r3
 80002c6:	2001      	movs	r0, #1
 80002c8:	4690      	mov	r8, r2
 80002ca:	2d00      	cmp	r5, #0
 80002cc:	d0e5      	beq.n	800029a <__udivmoddi4+0xa2>
 80002ce:	e9c5 4800 	strd	r4, r8, [r5]
 80002d2:	e7e2      	b.n	800029a <__udivmoddi4+0xa2>
 80002d4:	2a00      	cmp	r2, #0
 80002d6:	f000 8090 	beq.w	80003fa <__udivmoddi4+0x202>
 80002da:	fab2 f682 	clz	r6, r2
 80002de:	2e00      	cmp	r6, #0
 80002e0:	f040 80a4 	bne.w	800042c <__udivmoddi4+0x234>
 80002e4:	1a8a      	subs	r2, r1, r2
 80002e6:	0c03      	lsrs	r3, r0, #16
 80002e8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002ec:	b280      	uxth	r0, r0
 80002ee:	b2bc      	uxth	r4, r7
 80002f0:	2101      	movs	r1, #1
 80002f2:	fbb2 fcfe 	udiv	ip, r2, lr
 80002f6:	fb0e 221c 	mls	r2, lr, ip, r2
 80002fa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002fe:	fb04 f20c 	mul.w	r2, r4, ip
 8000302:	429a      	cmp	r2, r3
 8000304:	d907      	bls.n	8000316 <__udivmoddi4+0x11e>
 8000306:	18fb      	adds	r3, r7, r3
 8000308:	f10c 38ff 	add.w	r8, ip, #4294967295
 800030c:	d202      	bcs.n	8000314 <__udivmoddi4+0x11c>
 800030e:	429a      	cmp	r2, r3
 8000310:	f200 80e0 	bhi.w	80004d4 <__udivmoddi4+0x2dc>
 8000314:	46c4      	mov	ip, r8
 8000316:	1a9b      	subs	r3, r3, r2
 8000318:	fbb3 f2fe 	udiv	r2, r3, lr
 800031c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000320:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000324:	fb02 f404 	mul.w	r4, r2, r4
 8000328:	429c      	cmp	r4, r3
 800032a:	d907      	bls.n	800033c <__udivmoddi4+0x144>
 800032c:	18fb      	adds	r3, r7, r3
 800032e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000332:	d202      	bcs.n	800033a <__udivmoddi4+0x142>
 8000334:	429c      	cmp	r4, r3
 8000336:	f200 80ca 	bhi.w	80004ce <__udivmoddi4+0x2d6>
 800033a:	4602      	mov	r2, r0
 800033c:	1b1b      	subs	r3, r3, r4
 800033e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000342:	e7a5      	b.n	8000290 <__udivmoddi4+0x98>
 8000344:	f1c1 0620 	rsb	r6, r1, #32
 8000348:	408b      	lsls	r3, r1
 800034a:	fa22 f706 	lsr.w	r7, r2, r6
 800034e:	431f      	orrs	r7, r3
 8000350:	fa0e f401 	lsl.w	r4, lr, r1
 8000354:	fa20 f306 	lsr.w	r3, r0, r6
 8000358:	fa2e fe06 	lsr.w	lr, lr, r6
 800035c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000360:	4323      	orrs	r3, r4
 8000362:	fa00 f801 	lsl.w	r8, r0, r1
 8000366:	fa1f fc87 	uxth.w	ip, r7
 800036a:	fbbe f0f9 	udiv	r0, lr, r9
 800036e:	0c1c      	lsrs	r4, r3, #16
 8000370:	fb09 ee10 	mls	lr, r9, r0, lr
 8000374:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000378:	fb00 fe0c 	mul.w	lr, r0, ip
 800037c:	45a6      	cmp	lr, r4
 800037e:	fa02 f201 	lsl.w	r2, r2, r1
 8000382:	d909      	bls.n	8000398 <__udivmoddi4+0x1a0>
 8000384:	193c      	adds	r4, r7, r4
 8000386:	f100 3aff 	add.w	sl, r0, #4294967295
 800038a:	f080 809c 	bcs.w	80004c6 <__udivmoddi4+0x2ce>
 800038e:	45a6      	cmp	lr, r4
 8000390:	f240 8099 	bls.w	80004c6 <__udivmoddi4+0x2ce>
 8000394:	3802      	subs	r0, #2
 8000396:	443c      	add	r4, r7
 8000398:	eba4 040e 	sub.w	r4, r4, lr
 800039c:	fa1f fe83 	uxth.w	lr, r3
 80003a0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003a4:	fb09 4413 	mls	r4, r9, r3, r4
 80003a8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003ac:	fb03 fc0c 	mul.w	ip, r3, ip
 80003b0:	45a4      	cmp	ip, r4
 80003b2:	d908      	bls.n	80003c6 <__udivmoddi4+0x1ce>
 80003b4:	193c      	adds	r4, r7, r4
 80003b6:	f103 3eff 	add.w	lr, r3, #4294967295
 80003ba:	f080 8082 	bcs.w	80004c2 <__udivmoddi4+0x2ca>
 80003be:	45a4      	cmp	ip, r4
 80003c0:	d97f      	bls.n	80004c2 <__udivmoddi4+0x2ca>
 80003c2:	3b02      	subs	r3, #2
 80003c4:	443c      	add	r4, r7
 80003c6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003ca:	eba4 040c 	sub.w	r4, r4, ip
 80003ce:	fba0 ec02 	umull	lr, ip, r0, r2
 80003d2:	4564      	cmp	r4, ip
 80003d4:	4673      	mov	r3, lr
 80003d6:	46e1      	mov	r9, ip
 80003d8:	d362      	bcc.n	80004a0 <__udivmoddi4+0x2a8>
 80003da:	d05f      	beq.n	800049c <__udivmoddi4+0x2a4>
 80003dc:	b15d      	cbz	r5, 80003f6 <__udivmoddi4+0x1fe>
 80003de:	ebb8 0203 	subs.w	r2, r8, r3
 80003e2:	eb64 0409 	sbc.w	r4, r4, r9
 80003e6:	fa04 f606 	lsl.w	r6, r4, r6
 80003ea:	fa22 f301 	lsr.w	r3, r2, r1
 80003ee:	431e      	orrs	r6, r3
 80003f0:	40cc      	lsrs	r4, r1
 80003f2:	e9c5 6400 	strd	r6, r4, [r5]
 80003f6:	2100      	movs	r1, #0
 80003f8:	e74f      	b.n	800029a <__udivmoddi4+0xa2>
 80003fa:	fbb1 fcf2 	udiv	ip, r1, r2
 80003fe:	0c01      	lsrs	r1, r0, #16
 8000400:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000404:	b280      	uxth	r0, r0
 8000406:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800040a:	463b      	mov	r3, r7
 800040c:	4638      	mov	r0, r7
 800040e:	463c      	mov	r4, r7
 8000410:	46b8      	mov	r8, r7
 8000412:	46be      	mov	lr, r7
 8000414:	2620      	movs	r6, #32
 8000416:	fbb1 f1f7 	udiv	r1, r1, r7
 800041a:	eba2 0208 	sub.w	r2, r2, r8
 800041e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000422:	e766      	b.n	80002f2 <__udivmoddi4+0xfa>
 8000424:	4601      	mov	r1, r0
 8000426:	e718      	b.n	800025a <__udivmoddi4+0x62>
 8000428:	4610      	mov	r0, r2
 800042a:	e72c      	b.n	8000286 <__udivmoddi4+0x8e>
 800042c:	f1c6 0220 	rsb	r2, r6, #32
 8000430:	fa2e f302 	lsr.w	r3, lr, r2
 8000434:	40b7      	lsls	r7, r6
 8000436:	40b1      	lsls	r1, r6
 8000438:	fa20 f202 	lsr.w	r2, r0, r2
 800043c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000440:	430a      	orrs	r2, r1
 8000442:	fbb3 f8fe 	udiv	r8, r3, lr
 8000446:	b2bc      	uxth	r4, r7
 8000448:	fb0e 3318 	mls	r3, lr, r8, r3
 800044c:	0c11      	lsrs	r1, r2, #16
 800044e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000452:	fb08 f904 	mul.w	r9, r8, r4
 8000456:	40b0      	lsls	r0, r6
 8000458:	4589      	cmp	r9, r1
 800045a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800045e:	b280      	uxth	r0, r0
 8000460:	d93e      	bls.n	80004e0 <__udivmoddi4+0x2e8>
 8000462:	1879      	adds	r1, r7, r1
 8000464:	f108 3cff 	add.w	ip, r8, #4294967295
 8000468:	d201      	bcs.n	800046e <__udivmoddi4+0x276>
 800046a:	4589      	cmp	r9, r1
 800046c:	d81f      	bhi.n	80004ae <__udivmoddi4+0x2b6>
 800046e:	eba1 0109 	sub.w	r1, r1, r9
 8000472:	fbb1 f9fe 	udiv	r9, r1, lr
 8000476:	fb09 f804 	mul.w	r8, r9, r4
 800047a:	fb0e 1119 	mls	r1, lr, r9, r1
 800047e:	b292      	uxth	r2, r2
 8000480:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000484:	4542      	cmp	r2, r8
 8000486:	d229      	bcs.n	80004dc <__udivmoddi4+0x2e4>
 8000488:	18ba      	adds	r2, r7, r2
 800048a:	f109 31ff 	add.w	r1, r9, #4294967295
 800048e:	d2c4      	bcs.n	800041a <__udivmoddi4+0x222>
 8000490:	4542      	cmp	r2, r8
 8000492:	d2c2      	bcs.n	800041a <__udivmoddi4+0x222>
 8000494:	f1a9 0102 	sub.w	r1, r9, #2
 8000498:	443a      	add	r2, r7
 800049a:	e7be      	b.n	800041a <__udivmoddi4+0x222>
 800049c:	45f0      	cmp	r8, lr
 800049e:	d29d      	bcs.n	80003dc <__udivmoddi4+0x1e4>
 80004a0:	ebbe 0302 	subs.w	r3, lr, r2
 80004a4:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004a8:	3801      	subs	r0, #1
 80004aa:	46e1      	mov	r9, ip
 80004ac:	e796      	b.n	80003dc <__udivmoddi4+0x1e4>
 80004ae:	eba7 0909 	sub.w	r9, r7, r9
 80004b2:	4449      	add	r1, r9
 80004b4:	f1a8 0c02 	sub.w	ip, r8, #2
 80004b8:	fbb1 f9fe 	udiv	r9, r1, lr
 80004bc:	fb09 f804 	mul.w	r8, r9, r4
 80004c0:	e7db      	b.n	800047a <__udivmoddi4+0x282>
 80004c2:	4673      	mov	r3, lr
 80004c4:	e77f      	b.n	80003c6 <__udivmoddi4+0x1ce>
 80004c6:	4650      	mov	r0, sl
 80004c8:	e766      	b.n	8000398 <__udivmoddi4+0x1a0>
 80004ca:	4608      	mov	r0, r1
 80004cc:	e6fd      	b.n	80002ca <__udivmoddi4+0xd2>
 80004ce:	443b      	add	r3, r7
 80004d0:	3a02      	subs	r2, #2
 80004d2:	e733      	b.n	800033c <__udivmoddi4+0x144>
 80004d4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004d8:	443b      	add	r3, r7
 80004da:	e71c      	b.n	8000316 <__udivmoddi4+0x11e>
 80004dc:	4649      	mov	r1, r9
 80004de:	e79c      	b.n	800041a <__udivmoddi4+0x222>
 80004e0:	eba1 0109 	sub.w	r1, r1, r9
 80004e4:	46c4      	mov	ip, r8
 80004e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80004ea:	fb09 f804 	mul.w	r8, r9, r4
 80004ee:	e7c4      	b.n	800047a <__udivmoddi4+0x282>

080004f0 <__aeabi_idiv0>:
 80004f0:	4770      	bx	lr
 80004f2:	bf00      	nop

080004f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004f4:	b580      	push	{r7, lr}
 80004f6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004f8:	f001 f969 	bl	80017ce <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004fc:	f000 f842 	bl	8000584 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000500:	f000 fb4c 	bl	8000b9c <MX_GPIO_Init>
  MX_DFSDM1_Init();
 8000504:	f000 f8a0 	bl	8000648 <MX_DFSDM1_Init>
  MX_I2C2_Init();
 8000508:	f000 f8d6 	bl	80006b8 <MX_I2C2_Init>
  MX_QUADSPI_Init();
 800050c:	f000 f914 	bl	8000738 <MX_QUADSPI_Init>
  MX_SPI3_Init();
 8000510:	f000 f938 	bl	8000784 <MX_SPI3_Init>
  MX_USART1_UART_Init();
 8000514:	f000 fab4 	bl	8000a80 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 8000518:	f000 fae2 	bl	8000ae0 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 800051c:	f000 fb10 	bl	8000b40 <MX_USB_OTG_FS_PCD_Init>
  MX_TIM2_Init();
 8000520:	f000 f96e 	bl	8000800 <MX_TIM2_Init>
  MX_TIM4_Init();
 8000524:	f000 fa58 	bl	80009d8 <MX_TIM4_Init>
  MX_TIM3_Init();
 8000528:	f000 f9e0 	bl	80008ec <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 800052c:	210c      	movs	r1, #12
 800052e:	4813      	ldr	r0, [pc, #76]	@ (800057c <main+0x88>)
 8000530:	f003 fdb6 	bl	80040a0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8000534:	2100      	movs	r1, #0
 8000536:	4812      	ldr	r0, [pc, #72]	@ (8000580 <main+0x8c>)
 8000538:	f003 fdb2 	bl	80040a0 <HAL_TIM_PWM_Start>
  TIM4_Start_IC();
 800053c:	f000 fccc 	bl	8000ed8 <TIM4_Start_IC>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  __HAL_TIM_SetCompare(&htim2, TIM_CHANNEL_4, 500);
 8000540:	4b0e      	ldr	r3, [pc, #56]	@ (800057c <main+0x88>)
 8000542:	681b      	ldr	r3, [r3, #0]
 8000544:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8000548:	641a      	str	r2, [r3, #64]	@ 0x40
	  HAL_Delay(500);
 800054a:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800054e:	f001 f9b3 	bl	80018b8 <HAL_Delay>
	  __HAL_TIM_SetCompare(&htim2, TIM_CHANNEL_4, 750);
 8000552:	4b0a      	ldr	r3, [pc, #40]	@ (800057c <main+0x88>)
 8000554:	681b      	ldr	r3, [r3, #0]
 8000556:	f240 22ee 	movw	r2, #750	@ 0x2ee
 800055a:	641a      	str	r2, [r3, #64]	@ 0x40
	  HAL_Delay(500);
 800055c:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000560:	f001 f9aa 	bl	80018b8 <HAL_Delay>
	  __HAL_TIM_SetCompare(&htim2, TIM_CHANNEL_4, 1000);
 8000564:	4b05      	ldr	r3, [pc, #20]	@ (800057c <main+0x88>)
 8000566:	681b      	ldr	r3, [r3, #0]
 8000568:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800056c:	641a      	str	r2, [r3, #64]	@ 0x40
	  HAL_Delay(500);
 800056e:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000572:	f001 f9a1 	bl	80018b8 <HAL_Delay>
	  __HAL_TIM_SetCompare(&htim2, TIM_CHANNEL_4, 500);
 8000576:	bf00      	nop
 8000578:	e7e2      	b.n	8000540 <main+0x4c>
 800057a:	bf00      	nop
 800057c:	2000015c 	.word	0x2000015c
 8000580:	200001a8 	.word	0x200001a8

08000584 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	b096      	sub	sp, #88	@ 0x58
 8000588:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800058a:	f107 0314 	add.w	r3, r7, #20
 800058e:	2244      	movs	r2, #68	@ 0x44
 8000590:	2100      	movs	r1, #0
 8000592:	4618      	mov	r0, r3
 8000594:	f006 f9ed 	bl	8006972 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000598:	463b      	mov	r3, r7
 800059a:	2200      	movs	r2, #0
 800059c:	601a      	str	r2, [r3, #0]
 800059e:	605a      	str	r2, [r3, #4]
 80005a0:	609a      	str	r2, [r3, #8]
 80005a2:	60da      	str	r2, [r3, #12]
 80005a4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80005a6:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80005aa:	f002 f82f 	bl	800260c <HAL_PWREx_ControlVoltageScaling>
 80005ae:	4603      	mov	r3, r0
 80005b0:	2b00      	cmp	r3, #0
 80005b2:	d001      	beq.n	80005b8 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80005b4:	f000 fcc4 	bl	8000f40 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80005b8:	f002 f80a 	bl	80025d0 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80005bc:	4b21      	ldr	r3, [pc, #132]	@ (8000644 <SystemClock_Config+0xc0>)
 80005be:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80005c2:	4a20      	ldr	r2, [pc, #128]	@ (8000644 <SystemClock_Config+0xc0>)
 80005c4:	f023 0318 	bic.w	r3, r3, #24
 80005c8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 80005cc:	2314      	movs	r3, #20
 80005ce:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80005d0:	2301      	movs	r3, #1
 80005d2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80005d4:	2301      	movs	r3, #1
 80005d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80005d8:	2300      	movs	r3, #0
 80005da:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80005dc:	2360      	movs	r3, #96	@ 0x60
 80005de:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005e0:	2302      	movs	r3, #2
 80005e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80005e4:	2301      	movs	r3, #1
 80005e6:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80005e8:	2301      	movs	r3, #1
 80005ea:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 80005ec:	2328      	movs	r3, #40	@ 0x28
 80005ee:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80005f0:	2307      	movs	r3, #7
 80005f2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80005f4:	2302      	movs	r3, #2
 80005f6:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80005f8:	2302      	movs	r3, #2
 80005fa:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005fc:	f107 0314 	add.w	r3, r7, #20
 8000600:	4618      	mov	r0, r3
 8000602:	f002 f925 	bl	8002850 <HAL_RCC_OscConfig>
 8000606:	4603      	mov	r3, r0
 8000608:	2b00      	cmp	r3, #0
 800060a:	d001      	beq.n	8000610 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 800060c:	f000 fc98 	bl	8000f40 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000610:	230f      	movs	r3, #15
 8000612:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000614:	2303      	movs	r3, #3
 8000616:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000618:	2300      	movs	r3, #0
 800061a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800061c:	2300      	movs	r3, #0
 800061e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000620:	2300      	movs	r3, #0
 8000622:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000624:	463b      	mov	r3, r7
 8000626:	2104      	movs	r1, #4
 8000628:	4618      	mov	r0, r3
 800062a:	f002 fced 	bl	8003008 <HAL_RCC_ClockConfig>
 800062e:	4603      	mov	r3, r0
 8000630:	2b00      	cmp	r3, #0
 8000632:	d001      	beq.n	8000638 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000634:	f000 fc84 	bl	8000f40 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8000638:	f003 f9f4 	bl	8003a24 <HAL_RCCEx_EnableMSIPLLMode>
}
 800063c:	bf00      	nop
 800063e:	3758      	adds	r7, #88	@ 0x58
 8000640:	46bd      	mov	sp, r7
 8000642:	bd80      	pop	{r7, pc}
 8000644:	40021000 	.word	0x40021000

08000648 <MX_DFSDM1_Init>:
  * @brief DFSDM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DFSDM1_Init(void)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */

  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_channel1.Instance = DFSDM1_Channel1;
 800064c:	4b18      	ldr	r3, [pc, #96]	@ (80006b0 <MX_DFSDM1_Init+0x68>)
 800064e:	4a19      	ldr	r2, [pc, #100]	@ (80006b4 <MX_DFSDM1_Init+0x6c>)
 8000650:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel1.Init.OutputClock.Activation = ENABLE;
 8000652:	4b17      	ldr	r3, [pc, #92]	@ (80006b0 <MX_DFSDM1_Init+0x68>)
 8000654:	2201      	movs	r2, #1
 8000656:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel1.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 8000658:	4b15      	ldr	r3, [pc, #84]	@ (80006b0 <MX_DFSDM1_Init+0x68>)
 800065a:	2200      	movs	r2, #0
 800065c:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel1.Init.OutputClock.Divider = 2;
 800065e:	4b14      	ldr	r3, [pc, #80]	@ (80006b0 <MX_DFSDM1_Init+0x68>)
 8000660:	2202      	movs	r2, #2
 8000662:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel1.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 8000664:	4b12      	ldr	r3, [pc, #72]	@ (80006b0 <MX_DFSDM1_Init+0x68>)
 8000666:	2200      	movs	r2, #0
 8000668:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel1.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 800066a:	4b11      	ldr	r3, [pc, #68]	@ (80006b0 <MX_DFSDM1_Init+0x68>)
 800066c:	2200      	movs	r2, #0
 800066e:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel1.Init.Input.Pins = DFSDM_CHANNEL_FOLLOWING_CHANNEL_PINS;
 8000670:	4b0f      	ldr	r3, [pc, #60]	@ (80006b0 <MX_DFSDM1_Init+0x68>)
 8000672:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000676:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel1.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 8000678:	4b0d      	ldr	r3, [pc, #52]	@ (80006b0 <MX_DFSDM1_Init+0x68>)
 800067a:	2200      	movs	r2, #0
 800067c:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel1.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 800067e:	4b0c      	ldr	r3, [pc, #48]	@ (80006b0 <MX_DFSDM1_Init+0x68>)
 8000680:	2204      	movs	r2, #4
 8000682:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel1.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 8000684:	4b0a      	ldr	r3, [pc, #40]	@ (80006b0 <MX_DFSDM1_Init+0x68>)
 8000686:	2200      	movs	r2, #0
 8000688:	625a      	str	r2, [r3, #36]	@ 0x24
  hdfsdm1_channel1.Init.Awd.Oversampling = 1;
 800068a:	4b09      	ldr	r3, [pc, #36]	@ (80006b0 <MX_DFSDM1_Init+0x68>)
 800068c:	2201      	movs	r2, #1
 800068e:	629a      	str	r2, [r3, #40]	@ 0x28
  hdfsdm1_channel1.Init.Offset = 0;
 8000690:	4b07      	ldr	r3, [pc, #28]	@ (80006b0 <MX_DFSDM1_Init+0x68>)
 8000692:	2200      	movs	r2, #0
 8000694:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdfsdm1_channel1.Init.RightBitShift = 0x00;
 8000696:	4b06      	ldr	r3, [pc, #24]	@ (80006b0 <MX_DFSDM1_Init+0x68>)
 8000698:	2200      	movs	r2, #0
 800069a:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel1) != HAL_OK)
 800069c:	4804      	ldr	r0, [pc, #16]	@ (80006b0 <MX_DFSDM1_Init+0x68>)
 800069e:	f001 fa41 	bl	8001b24 <HAL_DFSDM_ChannelInit>
 80006a2:	4603      	mov	r3, r0
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	d001      	beq.n	80006ac <MX_DFSDM1_Init+0x64>
  {
    Error_Handler();
 80006a8:	f000 fc4a 	bl	8000f40 <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM1_Init 2 */

  /* USER CODE END DFSDM1_Init 2 */

}
 80006ac:	bf00      	nop
 80006ae:	bd80      	pop	{r7, pc}
 80006b0:	20000028 	.word	0x20000028
 80006b4:	40016020 	.word	0x40016020

080006b8 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80006bc:	4b1b      	ldr	r3, [pc, #108]	@ (800072c <MX_I2C2_Init+0x74>)
 80006be:	4a1c      	ldr	r2, [pc, #112]	@ (8000730 <MX_I2C2_Init+0x78>)
 80006c0:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x10D19CE4;
 80006c2:	4b1a      	ldr	r3, [pc, #104]	@ (800072c <MX_I2C2_Init+0x74>)
 80006c4:	4a1b      	ldr	r2, [pc, #108]	@ (8000734 <MX_I2C2_Init+0x7c>)
 80006c6:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80006c8:	4b18      	ldr	r3, [pc, #96]	@ (800072c <MX_I2C2_Init+0x74>)
 80006ca:	2200      	movs	r2, #0
 80006cc:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80006ce:	4b17      	ldr	r3, [pc, #92]	@ (800072c <MX_I2C2_Init+0x74>)
 80006d0:	2201      	movs	r2, #1
 80006d2:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80006d4:	4b15      	ldr	r3, [pc, #84]	@ (800072c <MX_I2C2_Init+0x74>)
 80006d6:	2200      	movs	r2, #0
 80006d8:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80006da:	4b14      	ldr	r3, [pc, #80]	@ (800072c <MX_I2C2_Init+0x74>)
 80006dc:	2200      	movs	r2, #0
 80006de:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80006e0:	4b12      	ldr	r3, [pc, #72]	@ (800072c <MX_I2C2_Init+0x74>)
 80006e2:	2200      	movs	r2, #0
 80006e4:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80006e6:	4b11      	ldr	r3, [pc, #68]	@ (800072c <MX_I2C2_Init+0x74>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80006ec:	4b0f      	ldr	r3, [pc, #60]	@ (800072c <MX_I2C2_Init+0x74>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80006f2:	480e      	ldr	r0, [pc, #56]	@ (800072c <MX_I2C2_Init+0x74>)
 80006f4:	f001 fd07 	bl	8002106 <HAL_I2C_Init>
 80006f8:	4603      	mov	r3, r0
 80006fa:	2b00      	cmp	r3, #0
 80006fc:	d001      	beq.n	8000702 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 80006fe:	f000 fc1f 	bl	8000f40 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000702:	2100      	movs	r1, #0
 8000704:	4809      	ldr	r0, [pc, #36]	@ (800072c <MX_I2C2_Init+0x74>)
 8000706:	f001 fd99 	bl	800223c <HAL_I2CEx_ConfigAnalogFilter>
 800070a:	4603      	mov	r3, r0
 800070c:	2b00      	cmp	r3, #0
 800070e:	d001      	beq.n	8000714 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000710:	f000 fc16 	bl	8000f40 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000714:	2100      	movs	r1, #0
 8000716:	4805      	ldr	r0, [pc, #20]	@ (800072c <MX_I2C2_Init+0x74>)
 8000718:	f001 fddb 	bl	80022d2 <HAL_I2CEx_ConfigDigitalFilter>
 800071c:	4603      	mov	r3, r0
 800071e:	2b00      	cmp	r3, #0
 8000720:	d001      	beq.n	8000726 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8000722:	f000 fc0d 	bl	8000f40 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000726:	bf00      	nop
 8000728:	bd80      	pop	{r7, pc}
 800072a:	bf00      	nop
 800072c:	20000060 	.word	0x20000060
 8000730:	40005800 	.word	0x40005800
 8000734:	10d19ce4 	.word	0x10d19ce4

08000738 <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 800073c:	4b0f      	ldr	r3, [pc, #60]	@ (800077c <MX_QUADSPI_Init+0x44>)
 800073e:	4a10      	ldr	r2, [pc, #64]	@ (8000780 <MX_QUADSPI_Init+0x48>)
 8000740:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 2;
 8000742:	4b0e      	ldr	r3, [pc, #56]	@ (800077c <MX_QUADSPI_Init+0x44>)
 8000744:	2202      	movs	r2, #2
 8000746:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 4;
 8000748:	4b0c      	ldr	r3, [pc, #48]	@ (800077c <MX_QUADSPI_Init+0x44>)
 800074a:	2204      	movs	r2, #4
 800074c:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 800074e:	4b0b      	ldr	r3, [pc, #44]	@ (800077c <MX_QUADSPI_Init+0x44>)
 8000750:	2210      	movs	r2, #16
 8000752:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 23;
 8000754:	4b09      	ldr	r3, [pc, #36]	@ (800077c <MX_QUADSPI_Init+0x44>)
 8000756:	2217      	movs	r2, #23
 8000758:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 800075a:	4b08      	ldr	r3, [pc, #32]	@ (800077c <MX_QUADSPI_Init+0x44>)
 800075c:	2200      	movs	r2, #0
 800075e:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8000760:	4b06      	ldr	r3, [pc, #24]	@ (800077c <MX_QUADSPI_Init+0x44>)
 8000762:	2200      	movs	r2, #0
 8000764:	619a      	str	r2, [r3, #24]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8000766:	4805      	ldr	r0, [pc, #20]	@ (800077c <MX_QUADSPI_Init+0x44>)
 8000768:	f001 ffb6 	bl	80026d8 <HAL_QSPI_Init>
 800076c:	4603      	mov	r3, r0
 800076e:	2b00      	cmp	r3, #0
 8000770:	d001      	beq.n	8000776 <MX_QUADSPI_Init+0x3e>
  {
    Error_Handler();
 8000772:	f000 fbe5 	bl	8000f40 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 8000776:	bf00      	nop
 8000778:	bd80      	pop	{r7, pc}
 800077a:	bf00      	nop
 800077c:	200000b4 	.word	0x200000b4
 8000780:	a0001000 	.word	0xa0001000

08000784 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8000788:	4b1b      	ldr	r3, [pc, #108]	@ (80007f8 <MX_SPI3_Init+0x74>)
 800078a:	4a1c      	ldr	r2, [pc, #112]	@ (80007fc <MX_SPI3_Init+0x78>)
 800078c:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800078e:	4b1a      	ldr	r3, [pc, #104]	@ (80007f8 <MX_SPI3_Init+0x74>)
 8000790:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000794:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8000796:	4b18      	ldr	r3, [pc, #96]	@ (80007f8 <MX_SPI3_Init+0x74>)
 8000798:	2200      	movs	r2, #0
 800079a:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 800079c:	4b16      	ldr	r3, [pc, #88]	@ (80007f8 <MX_SPI3_Init+0x74>)
 800079e:	f44f 7240 	mov.w	r2, #768	@ 0x300
 80007a2:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80007a4:	4b14      	ldr	r3, [pc, #80]	@ (80007f8 <MX_SPI3_Init+0x74>)
 80007a6:	2200      	movs	r2, #0
 80007a8:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80007aa:	4b13      	ldr	r3, [pc, #76]	@ (80007f8 <MX_SPI3_Init+0x74>)
 80007ac:	2200      	movs	r2, #0
 80007ae:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80007b0:	4b11      	ldr	r3, [pc, #68]	@ (80007f8 <MX_SPI3_Init+0x74>)
 80007b2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80007b6:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80007b8:	4b0f      	ldr	r3, [pc, #60]	@ (80007f8 <MX_SPI3_Init+0x74>)
 80007ba:	2200      	movs	r2, #0
 80007bc:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80007be:	4b0e      	ldr	r3, [pc, #56]	@ (80007f8 <MX_SPI3_Init+0x74>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80007c4:	4b0c      	ldr	r3, [pc, #48]	@ (80007f8 <MX_SPI3_Init+0x74>)
 80007c6:	2200      	movs	r2, #0
 80007c8:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80007ca:	4b0b      	ldr	r3, [pc, #44]	@ (80007f8 <MX_SPI3_Init+0x74>)
 80007cc:	2200      	movs	r2, #0
 80007ce:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 7;
 80007d0:	4b09      	ldr	r3, [pc, #36]	@ (80007f8 <MX_SPI3_Init+0x74>)
 80007d2:	2207      	movs	r2, #7
 80007d4:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80007d6:	4b08      	ldr	r3, [pc, #32]	@ (80007f8 <MX_SPI3_Init+0x74>)
 80007d8:	2200      	movs	r2, #0
 80007da:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80007dc:	4b06      	ldr	r3, [pc, #24]	@ (80007f8 <MX_SPI3_Init+0x74>)
 80007de:	2208      	movs	r2, #8
 80007e0:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80007e2:	4805      	ldr	r0, [pc, #20]	@ (80007f8 <MX_SPI3_Init+0x74>)
 80007e4:	f003 fb00 	bl	8003de8 <HAL_SPI_Init>
 80007e8:	4603      	mov	r3, r0
 80007ea:	2b00      	cmp	r3, #0
 80007ec:	d001      	beq.n	80007f2 <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 80007ee:	f000 fba7 	bl	8000f40 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 80007f2:	bf00      	nop
 80007f4:	bd80      	pop	{r7, pc}
 80007f6:	bf00      	nop
 80007f8:	200000f8 	.word	0x200000f8
 80007fc:	40003c00 	.word	0x40003c00

08000800 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	b08e      	sub	sp, #56	@ 0x38
 8000804:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000806:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800080a:	2200      	movs	r2, #0
 800080c:	601a      	str	r2, [r3, #0]
 800080e:	605a      	str	r2, [r3, #4]
 8000810:	609a      	str	r2, [r3, #8]
 8000812:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000814:	f107 031c 	add.w	r3, r7, #28
 8000818:	2200      	movs	r2, #0
 800081a:	601a      	str	r2, [r3, #0]
 800081c:	605a      	str	r2, [r3, #4]
 800081e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000820:	463b      	mov	r3, r7
 8000822:	2200      	movs	r2, #0
 8000824:	601a      	str	r2, [r3, #0]
 8000826:	605a      	str	r2, [r3, #4]
 8000828:	609a      	str	r2, [r3, #8]
 800082a:	60da      	str	r2, [r3, #12]
 800082c:	611a      	str	r2, [r3, #16]
 800082e:	615a      	str	r2, [r3, #20]
 8000830:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000832:	4b2d      	ldr	r3, [pc, #180]	@ (80008e8 <MX_TIM2_Init+0xe8>)
 8000834:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000838:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 160-1;
 800083a:	4b2b      	ldr	r3, [pc, #172]	@ (80008e8 <MX_TIM2_Init+0xe8>)
 800083c:	229f      	movs	r2, #159	@ 0x9f
 800083e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000840:	4b29      	ldr	r3, [pc, #164]	@ (80008e8 <MX_TIM2_Init+0xe8>)
 8000842:	2200      	movs	r2, #0
 8000844:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10000-1;
 8000846:	4b28      	ldr	r3, [pc, #160]	@ (80008e8 <MX_TIM2_Init+0xe8>)
 8000848:	f242 720f 	movw	r2, #9999	@ 0x270f
 800084c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800084e:	4b26      	ldr	r3, [pc, #152]	@ (80008e8 <MX_TIM2_Init+0xe8>)
 8000850:	2200      	movs	r2, #0
 8000852:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000854:	4b24      	ldr	r3, [pc, #144]	@ (80008e8 <MX_TIM2_Init+0xe8>)
 8000856:	2200      	movs	r2, #0
 8000858:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800085a:	4823      	ldr	r0, [pc, #140]	@ (80008e8 <MX_TIM2_Init+0xe8>)
 800085c:	f003 fb67 	bl	8003f2e <HAL_TIM_Base_Init>
 8000860:	4603      	mov	r3, r0
 8000862:	2b00      	cmp	r3, #0
 8000864:	d001      	beq.n	800086a <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8000866:	f000 fb6b 	bl	8000f40 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800086a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800086e:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000870:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000874:	4619      	mov	r1, r3
 8000876:	481c      	ldr	r0, [pc, #112]	@ (80008e8 <MX_TIM2_Init+0xe8>)
 8000878:	f004 f972 	bl	8004b60 <HAL_TIM_ConfigClockSource>
 800087c:	4603      	mov	r3, r0
 800087e:	2b00      	cmp	r3, #0
 8000880:	d001      	beq.n	8000886 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8000882:	f000 fb5d 	bl	8000f40 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000886:	4818      	ldr	r0, [pc, #96]	@ (80008e8 <MX_TIM2_Init+0xe8>)
 8000888:	f003 fba8 	bl	8003fdc <HAL_TIM_PWM_Init>
 800088c:	4603      	mov	r3, r0
 800088e:	2b00      	cmp	r3, #0
 8000890:	d001      	beq.n	8000896 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8000892:	f000 fb55 	bl	8000f40 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000896:	2300      	movs	r3, #0
 8000898:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800089a:	2300      	movs	r3, #0
 800089c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800089e:	f107 031c 	add.w	r3, r7, #28
 80008a2:	4619      	mov	r1, r3
 80008a4:	4810      	ldr	r0, [pc, #64]	@ (80008e8 <MX_TIM2_Init+0xe8>)
 80008a6:	f004 fff1 	bl	800588c <HAL_TIMEx_MasterConfigSynchronization>
 80008aa:	4603      	mov	r3, r0
 80008ac:	2b00      	cmp	r3, #0
 80008ae:	d001      	beq.n	80008b4 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 80008b0:	f000 fb46 	bl	8000f40 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80008b4:	2360      	movs	r3, #96	@ 0x60
 80008b6:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80008b8:	2300      	movs	r3, #0
 80008ba:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80008bc:	2300      	movs	r3, #0
 80008be:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80008c0:	2300      	movs	r3, #0
 80008c2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80008c4:	463b      	mov	r3, r7
 80008c6:	220c      	movs	r2, #12
 80008c8:	4619      	mov	r1, r3
 80008ca:	4807      	ldr	r0, [pc, #28]	@ (80008e8 <MX_TIM2_Init+0xe8>)
 80008cc:	f004 f834 	bl	8004938 <HAL_TIM_PWM_ConfigChannel>
 80008d0:	4603      	mov	r3, r0
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	d001      	beq.n	80008da <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 80008d6:	f000 fb33 	bl	8000f40 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80008da:	4803      	ldr	r0, [pc, #12]	@ (80008e8 <MX_TIM2_Init+0xe8>)
 80008dc:	f000 fd30 	bl	8001340 <HAL_TIM_MspPostInit>

}
 80008e0:	bf00      	nop
 80008e2:	3738      	adds	r7, #56	@ 0x38
 80008e4:	46bd      	mov	sp, r7
 80008e6:	bd80      	pop	{r7, pc}
 80008e8:	2000015c 	.word	0x2000015c

080008ec <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b08e      	sub	sp, #56	@ 0x38
 80008f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80008f2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80008f6:	2200      	movs	r2, #0
 80008f8:	601a      	str	r2, [r3, #0]
 80008fa:	605a      	str	r2, [r3, #4]
 80008fc:	609a      	str	r2, [r3, #8]
 80008fe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000900:	f107 031c 	add.w	r3, r7, #28
 8000904:	2200      	movs	r2, #0
 8000906:	601a      	str	r2, [r3, #0]
 8000908:	605a      	str	r2, [r3, #4]
 800090a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800090c:	463b      	mov	r3, r7
 800090e:	2200      	movs	r2, #0
 8000910:	601a      	str	r2, [r3, #0]
 8000912:	605a      	str	r2, [r3, #4]
 8000914:	609a      	str	r2, [r3, #8]
 8000916:	60da      	str	r2, [r3, #12]
 8000918:	611a      	str	r2, [r3, #16]
 800091a:	615a      	str	r2, [r3, #20]
 800091c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800091e:	4b2c      	ldr	r3, [pc, #176]	@ (80009d0 <MX_TIM3_Init+0xe4>)
 8000920:	4a2c      	ldr	r2, [pc, #176]	@ (80009d4 <MX_TIM3_Init+0xe8>)
 8000922:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 80-1;
 8000924:	4b2a      	ldr	r3, [pc, #168]	@ (80009d0 <MX_TIM3_Init+0xe4>)
 8000926:	224f      	movs	r2, #79	@ 0x4f
 8000928:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800092a:	4b29      	ldr	r3, [pc, #164]	@ (80009d0 <MX_TIM3_Init+0xe4>)
 800092c:	2200      	movs	r2, #0
 800092e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 100-1;
 8000930:	4b27      	ldr	r3, [pc, #156]	@ (80009d0 <MX_TIM3_Init+0xe4>)
 8000932:	2263      	movs	r2, #99	@ 0x63
 8000934:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000936:	4b26      	ldr	r3, [pc, #152]	@ (80009d0 <MX_TIM3_Init+0xe4>)
 8000938:	2200      	movs	r2, #0
 800093a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800093c:	4b24      	ldr	r3, [pc, #144]	@ (80009d0 <MX_TIM3_Init+0xe4>)
 800093e:	2200      	movs	r2, #0
 8000940:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000942:	4823      	ldr	r0, [pc, #140]	@ (80009d0 <MX_TIM3_Init+0xe4>)
 8000944:	f003 faf3 	bl	8003f2e <HAL_TIM_Base_Init>
 8000948:	4603      	mov	r3, r0
 800094a:	2b00      	cmp	r3, #0
 800094c:	d001      	beq.n	8000952 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 800094e:	f000 faf7 	bl	8000f40 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000952:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000956:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000958:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800095c:	4619      	mov	r1, r3
 800095e:	481c      	ldr	r0, [pc, #112]	@ (80009d0 <MX_TIM3_Init+0xe4>)
 8000960:	f004 f8fe 	bl	8004b60 <HAL_TIM_ConfigClockSource>
 8000964:	4603      	mov	r3, r0
 8000966:	2b00      	cmp	r3, #0
 8000968:	d001      	beq.n	800096e <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 800096a:	f000 fae9 	bl	8000f40 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800096e:	4818      	ldr	r0, [pc, #96]	@ (80009d0 <MX_TIM3_Init+0xe4>)
 8000970:	f003 fb34 	bl	8003fdc <HAL_TIM_PWM_Init>
 8000974:	4603      	mov	r3, r0
 8000976:	2b00      	cmp	r3, #0
 8000978:	d001      	beq.n	800097e <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 800097a:	f000 fae1 	bl	8000f40 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800097e:	2300      	movs	r3, #0
 8000980:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000982:	2300      	movs	r3, #0
 8000984:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000986:	f107 031c 	add.w	r3, r7, #28
 800098a:	4619      	mov	r1, r3
 800098c:	4810      	ldr	r0, [pc, #64]	@ (80009d0 <MX_TIM3_Init+0xe4>)
 800098e:	f004 ff7d 	bl	800588c <HAL_TIMEx_MasterConfigSynchronization>
 8000992:	4603      	mov	r3, r0
 8000994:	2b00      	cmp	r3, #0
 8000996:	d001      	beq.n	800099c <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8000998:	f000 fad2 	bl	8000f40 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800099c:	2360      	movs	r3, #96	@ 0x60
 800099e:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 50;
 80009a0:	2332      	movs	r3, #50	@ 0x32
 80009a2:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80009a4:	2300      	movs	r3, #0
 80009a6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80009a8:	2300      	movs	r3, #0
 80009aa:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80009ac:	463b      	mov	r3, r7
 80009ae:	2200      	movs	r2, #0
 80009b0:	4619      	mov	r1, r3
 80009b2:	4807      	ldr	r0, [pc, #28]	@ (80009d0 <MX_TIM3_Init+0xe4>)
 80009b4:	f003 ffc0 	bl	8004938 <HAL_TIM_PWM_ConfigChannel>
 80009b8:	4603      	mov	r3, r0
 80009ba:	2b00      	cmp	r3, #0
 80009bc:	d001      	beq.n	80009c2 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 80009be:	f000 fabf 	bl	8000f40 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80009c2:	4803      	ldr	r0, [pc, #12]	@ (80009d0 <MX_TIM3_Init+0xe4>)
 80009c4:	f000 fcbc 	bl	8001340 <HAL_TIM_MspPostInit>

}
 80009c8:	bf00      	nop
 80009ca:	3738      	adds	r7, #56	@ 0x38
 80009cc:	46bd      	mov	sp, r7
 80009ce:	bd80      	pop	{r7, pc}
 80009d0:	200001a8 	.word	0x200001a8
 80009d4:	40000400 	.word	0x40000400

080009d8 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	b088      	sub	sp, #32
 80009dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009de:	f107 0314 	add.w	r3, r7, #20
 80009e2:	2200      	movs	r2, #0
 80009e4:	601a      	str	r2, [r3, #0]
 80009e6:	605a      	str	r2, [r3, #4]
 80009e8:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80009ea:	1d3b      	adds	r3, r7, #4
 80009ec:	2200      	movs	r2, #0
 80009ee:	601a      	str	r2, [r3, #0]
 80009f0:	605a      	str	r2, [r3, #4]
 80009f2:	609a      	str	r2, [r3, #8]
 80009f4:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80009f6:	4b20      	ldr	r3, [pc, #128]	@ (8000a78 <MX_TIM4_Init+0xa0>)
 80009f8:	4a20      	ldr	r2, [pc, #128]	@ (8000a7c <MX_TIM4_Init+0xa4>)
 80009fa:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80009fc:	4b1e      	ldr	r3, [pc, #120]	@ (8000a78 <MX_TIM4_Init+0xa0>)
 80009fe:	2200      	movs	r2, #0
 8000a00:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a02:	4b1d      	ldr	r3, [pc, #116]	@ (8000a78 <MX_TIM4_Init+0xa0>)
 8000a04:	2200      	movs	r2, #0
 8000a06:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8000a08:	4b1b      	ldr	r3, [pc, #108]	@ (8000a78 <MX_TIM4_Init+0xa0>)
 8000a0a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000a0e:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a10:	4b19      	ldr	r3, [pc, #100]	@ (8000a78 <MX_TIM4_Init+0xa0>)
 8000a12:	2200      	movs	r2, #0
 8000a14:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a16:	4b18      	ldr	r3, [pc, #96]	@ (8000a78 <MX_TIM4_Init+0xa0>)
 8000a18:	2200      	movs	r2, #0
 8000a1a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim4) != HAL_OK)
 8000a1c:	4816      	ldr	r0, [pc, #88]	@ (8000a78 <MX_TIM4_Init+0xa0>)
 8000a1e:	f003 fc45 	bl	80042ac <HAL_TIM_IC_Init>
 8000a22:	4603      	mov	r3, r0
 8000a24:	2b00      	cmp	r3, #0
 8000a26:	d001      	beq.n	8000a2c <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 8000a28:	f000 fa8a 	bl	8000f40 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a30:	2300      	movs	r3, #0
 8000a32:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000a34:	f107 0314 	add.w	r3, r7, #20
 8000a38:	4619      	mov	r1, r3
 8000a3a:	480f      	ldr	r0, [pc, #60]	@ (8000a78 <MX_TIM4_Init+0xa0>)
 8000a3c:	f004 ff26 	bl	800588c <HAL_TIMEx_MasterConfigSynchronization>
 8000a40:	4603      	mov	r3, r0
 8000a42:	2b00      	cmp	r3, #0
 8000a44:	d001      	beq.n	8000a4a <MX_TIM4_Init+0x72>
  {
    Error_Handler();
 8000a46:	f000 fa7b 	bl	8000f40 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000a4e:	2301      	movs	r3, #1
 8000a50:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000a52:	2300      	movs	r3, #0
 8000a54:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8000a56:	2300      	movs	r3, #0
 8000a58:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 8000a5a:	1d3b      	adds	r3, r7, #4
 8000a5c:	220c      	movs	r2, #12
 8000a5e:	4619      	mov	r1, r3
 8000a60:	4805      	ldr	r0, [pc, #20]	@ (8000a78 <MX_TIM4_Init+0xa0>)
 8000a62:	f003 fecc 	bl	80047fe <HAL_TIM_IC_ConfigChannel>
 8000a66:	4603      	mov	r3, r0
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	d001      	beq.n	8000a70 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 8000a6c:	f000 fa68 	bl	8000f40 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000a70:	bf00      	nop
 8000a72:	3720      	adds	r7, #32
 8000a74:	46bd      	mov	sp, r7
 8000a76:	bd80      	pop	{r7, pc}
 8000a78:	200001f4 	.word	0x200001f4
 8000a7c:	40000800 	.word	0x40000800

08000a80 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000a84:	4b14      	ldr	r3, [pc, #80]	@ (8000ad8 <MX_USART1_UART_Init+0x58>)
 8000a86:	4a15      	ldr	r2, [pc, #84]	@ (8000adc <MX_USART1_UART_Init+0x5c>)
 8000a88:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000a8a:	4b13      	ldr	r3, [pc, #76]	@ (8000ad8 <MX_USART1_UART_Init+0x58>)
 8000a8c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000a90:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000a92:	4b11      	ldr	r3, [pc, #68]	@ (8000ad8 <MX_USART1_UART_Init+0x58>)
 8000a94:	2200      	movs	r2, #0
 8000a96:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000a98:	4b0f      	ldr	r3, [pc, #60]	@ (8000ad8 <MX_USART1_UART_Init+0x58>)
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000a9e:	4b0e      	ldr	r3, [pc, #56]	@ (8000ad8 <MX_USART1_UART_Init+0x58>)
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000aa4:	4b0c      	ldr	r3, [pc, #48]	@ (8000ad8 <MX_USART1_UART_Init+0x58>)
 8000aa6:	220c      	movs	r2, #12
 8000aa8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000aaa:	4b0b      	ldr	r3, [pc, #44]	@ (8000ad8 <MX_USART1_UART_Init+0x58>)
 8000aac:	2200      	movs	r2, #0
 8000aae:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ab0:	4b09      	ldr	r3, [pc, #36]	@ (8000ad8 <MX_USART1_UART_Init+0x58>)
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000ab6:	4b08      	ldr	r3, [pc, #32]	@ (8000ad8 <MX_USART1_UART_Init+0x58>)
 8000ab8:	2200      	movs	r2, #0
 8000aba:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000abc:	4b06      	ldr	r3, [pc, #24]	@ (8000ad8 <MX_USART1_UART_Init+0x58>)
 8000abe:	2200      	movs	r2, #0
 8000ac0:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000ac2:	4805      	ldr	r0, [pc, #20]	@ (8000ad8 <MX_USART1_UART_Init+0x58>)
 8000ac4:	f004 ff88 	bl	80059d8 <HAL_UART_Init>
 8000ac8:	4603      	mov	r3, r0
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	d001      	beq.n	8000ad2 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000ace:	f000 fa37 	bl	8000f40 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000ad2:	bf00      	nop
 8000ad4:	bd80      	pop	{r7, pc}
 8000ad6:	bf00      	nop
 8000ad8:	20000240 	.word	0x20000240
 8000adc:	40013800 	.word	0x40013800

08000ae0 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000ae4:	4b14      	ldr	r3, [pc, #80]	@ (8000b38 <MX_USART3_UART_Init+0x58>)
 8000ae6:	4a15      	ldr	r2, [pc, #84]	@ (8000b3c <MX_USART3_UART_Init+0x5c>)
 8000ae8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000aea:	4b13      	ldr	r3, [pc, #76]	@ (8000b38 <MX_USART3_UART_Init+0x58>)
 8000aec:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000af0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000af2:	4b11      	ldr	r3, [pc, #68]	@ (8000b38 <MX_USART3_UART_Init+0x58>)
 8000af4:	2200      	movs	r2, #0
 8000af6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000af8:	4b0f      	ldr	r3, [pc, #60]	@ (8000b38 <MX_USART3_UART_Init+0x58>)
 8000afa:	2200      	movs	r2, #0
 8000afc:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000afe:	4b0e      	ldr	r3, [pc, #56]	@ (8000b38 <MX_USART3_UART_Init+0x58>)
 8000b00:	2200      	movs	r2, #0
 8000b02:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000b04:	4b0c      	ldr	r3, [pc, #48]	@ (8000b38 <MX_USART3_UART_Init+0x58>)
 8000b06:	220c      	movs	r2, #12
 8000b08:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b0a:	4b0b      	ldr	r3, [pc, #44]	@ (8000b38 <MX_USART3_UART_Init+0x58>)
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b10:	4b09      	ldr	r3, [pc, #36]	@ (8000b38 <MX_USART3_UART_Init+0x58>)
 8000b12:	2200      	movs	r2, #0
 8000b14:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b16:	4b08      	ldr	r3, [pc, #32]	@ (8000b38 <MX_USART3_UART_Init+0x58>)
 8000b18:	2200      	movs	r2, #0
 8000b1a:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b1c:	4b06      	ldr	r3, [pc, #24]	@ (8000b38 <MX_USART3_UART_Init+0x58>)
 8000b1e:	2200      	movs	r2, #0
 8000b20:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000b22:	4805      	ldr	r0, [pc, #20]	@ (8000b38 <MX_USART3_UART_Init+0x58>)
 8000b24:	f004 ff58 	bl	80059d8 <HAL_UART_Init>
 8000b28:	4603      	mov	r3, r0
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	d001      	beq.n	8000b32 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000b2e:	f000 fa07 	bl	8000f40 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000b32:	bf00      	nop
 8000b34:	bd80      	pop	{r7, pc}
 8000b36:	bf00      	nop
 8000b38:	200002c8 	.word	0x200002c8
 8000b3c:	40004800 	.word	0x40004800

08000b40 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000b44:	4b14      	ldr	r3, [pc, #80]	@ (8000b98 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000b46:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8000b4a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000b4c:	4b12      	ldr	r3, [pc, #72]	@ (8000b98 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000b4e:	2206      	movs	r2, #6
 8000b50:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000b52:	4b11      	ldr	r3, [pc, #68]	@ (8000b98 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000b54:	2202      	movs	r2, #2
 8000b56:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000b58:	4b0f      	ldr	r3, [pc, #60]	@ (8000b98 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000b5a:	2202      	movs	r2, #2
 8000b5c:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8000b5e:	4b0e      	ldr	r3, [pc, #56]	@ (8000b98 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000b60:	2200      	movs	r2, #0
 8000b62:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000b64:	4b0c      	ldr	r3, [pc, #48]	@ (8000b98 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000b66:	2200      	movs	r2, #0
 8000b68:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000b6a:	4b0b      	ldr	r3, [pc, #44]	@ (8000b98 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 8000b70:	4b09      	ldr	r3, [pc, #36]	@ (8000b98 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000b72:	2200      	movs	r2, #0
 8000b74:	735a      	strb	r2, [r3, #13]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000b76:	4b08      	ldr	r3, [pc, #32]	@ (8000b98 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000b78:	2200      	movs	r2, #0
 8000b7a:	73da      	strb	r2, [r3, #15]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8000b7c:	4b06      	ldr	r3, [pc, #24]	@ (8000b98 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000b7e:	2200      	movs	r2, #0
 8000b80:	739a      	strb	r2, [r3, #14]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000b82:	4805      	ldr	r0, [pc, #20]	@ (8000b98 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000b84:	f001 fbf1 	bl	800236a <HAL_PCD_Init>
 8000b88:	4603      	mov	r3, r0
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	d001      	beq.n	8000b92 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000b8e:	f000 f9d7 	bl	8000f40 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000b92:	bf00      	nop
 8000b94:	bd80      	pop	{r7, pc}
 8000b96:	bf00      	nop
 8000b98:	20000350 	.word	0x20000350

08000b9c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	b08a      	sub	sp, #40	@ 0x28
 8000ba0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ba2:	f107 0314 	add.w	r3, r7, #20
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	601a      	str	r2, [r3, #0]
 8000baa:	605a      	str	r2, [r3, #4]
 8000bac:	609a      	str	r2, [r3, #8]
 8000bae:	60da      	str	r2, [r3, #12]
 8000bb0:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000bb2:	4bbd      	ldr	r3, [pc, #756]	@ (8000ea8 <MX_GPIO_Init+0x30c>)
 8000bb4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000bb6:	4abc      	ldr	r2, [pc, #752]	@ (8000ea8 <MX_GPIO_Init+0x30c>)
 8000bb8:	f043 0310 	orr.w	r3, r3, #16
 8000bbc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000bbe:	4bba      	ldr	r3, [pc, #744]	@ (8000ea8 <MX_GPIO_Init+0x30c>)
 8000bc0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000bc2:	f003 0310 	and.w	r3, r3, #16
 8000bc6:	613b      	str	r3, [r7, #16]
 8000bc8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bca:	4bb7      	ldr	r3, [pc, #732]	@ (8000ea8 <MX_GPIO_Init+0x30c>)
 8000bcc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000bce:	4ab6      	ldr	r2, [pc, #728]	@ (8000ea8 <MX_GPIO_Init+0x30c>)
 8000bd0:	f043 0304 	orr.w	r3, r3, #4
 8000bd4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000bd6:	4bb4      	ldr	r3, [pc, #720]	@ (8000ea8 <MX_GPIO_Init+0x30c>)
 8000bd8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000bda:	f003 0304 	and.w	r3, r3, #4
 8000bde:	60fb      	str	r3, [r7, #12]
 8000be0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000be2:	4bb1      	ldr	r3, [pc, #708]	@ (8000ea8 <MX_GPIO_Init+0x30c>)
 8000be4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000be6:	4ab0      	ldr	r2, [pc, #704]	@ (8000ea8 <MX_GPIO_Init+0x30c>)
 8000be8:	f043 0301 	orr.w	r3, r3, #1
 8000bec:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000bee:	4bae      	ldr	r3, [pc, #696]	@ (8000ea8 <MX_GPIO_Init+0x30c>)
 8000bf0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000bf2:	f003 0301 	and.w	r3, r3, #1
 8000bf6:	60bb      	str	r3, [r7, #8]
 8000bf8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bfa:	4bab      	ldr	r3, [pc, #684]	@ (8000ea8 <MX_GPIO_Init+0x30c>)
 8000bfc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000bfe:	4aaa      	ldr	r2, [pc, #680]	@ (8000ea8 <MX_GPIO_Init+0x30c>)
 8000c00:	f043 0302 	orr.w	r3, r3, #2
 8000c04:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000c06:	4ba8      	ldr	r3, [pc, #672]	@ (8000ea8 <MX_GPIO_Init+0x30c>)
 8000c08:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c0a:	f003 0302 	and.w	r3, r3, #2
 8000c0e:	607b      	str	r3, [r7, #4]
 8000c10:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c12:	4ba5      	ldr	r3, [pc, #660]	@ (8000ea8 <MX_GPIO_Init+0x30c>)
 8000c14:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c16:	4aa4      	ldr	r2, [pc, #656]	@ (8000ea8 <MX_GPIO_Init+0x30c>)
 8000c18:	f043 0308 	orr.w	r3, r3, #8
 8000c1c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000c1e:	4ba2      	ldr	r3, [pc, #648]	@ (8000ea8 <MX_GPIO_Init+0x30c>)
 8000c20:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c22:	f003 0308 	and.w	r3, r3, #8
 8000c26:	603b      	str	r3, [r7, #0]
 8000c28:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin, GPIO_PIN_RESET);
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	f44f 718a 	mov.w	r1, #276	@ 0x114
 8000c30:	489e      	ldr	r0, [pc, #632]	@ (8000eac <MX_GPIO_Init+0x310>)
 8000c32:	f001 fa2d 	bl	8002090 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ARD_D10_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin, GPIO_PIN_RESET);
 8000c36:	2200      	movs	r2, #0
 8000c38:	f248 1104 	movw	r1, #33028	@ 0x8104
 8000c3c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000c40:	f001 fa26 	bl	8002090 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 8000c44:	2200      	movs	r2, #0
 8000c46:	f24f 0114 	movw	r1, #61460	@ 0xf014
 8000c4a:	4899      	ldr	r0, [pc, #612]	@ (8000eb0 <MX_GPIO_Init+0x314>)
 8000c4c:	f001 fa20 	bl	8002090 <HAL_GPIO_WritePin>
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, USB_OTG_FS_PWR_EN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin, GPIO_PIN_RESET);
 8000c50:	2200      	movs	r2, #0
 8000c52:	f241 0181 	movw	r1, #4225	@ 0x1081
 8000c56:	4897      	ldr	r0, [pc, #604]	@ (8000eb4 <MX_GPIO_Init+0x318>)
 8000c58:	f001 fa1a 	bl	8002090 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPBTLE_RF_SPI3_CSN_GPIO_Port, SPBTLE_RF_SPI3_CSN_Pin, GPIO_PIN_SET);
 8000c5c:	2201      	movs	r2, #1
 8000c5e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000c62:	4894      	ldr	r0, [pc, #592]	@ (8000eb4 <MX_GPIO_Init+0x318>)
 8000c64:	f001 fa14 	bl	8002090 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin, GPIO_PIN_RESET);
 8000c68:	2200      	movs	r2, #0
 8000c6a:	f44f 7110 	mov.w	r1, #576	@ 0x240
 8000c6e:	4892      	ldr	r0, [pc, #584]	@ (8000eb8 <MX_GPIO_Init+0x31c>)
 8000c70:	f001 fa0e 	bl	8002090 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPSGRF_915_SPI3_CSN_GPIO_Port, SPSGRF_915_SPI3_CSN_Pin, GPIO_PIN_SET);
 8000c74:	2201      	movs	r2, #1
 8000c76:	2120      	movs	r1, #32
 8000c78:	488d      	ldr	r0, [pc, #564]	@ (8000eb0 <MX_GPIO_Init+0x314>)
 8000c7a:	f001 fa09 	bl	8002090 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ISM43362_SPI3_CSN_GPIO_Port, ISM43362_SPI3_CSN_Pin, GPIO_PIN_SET);
 8000c7e:	2201      	movs	r2, #1
 8000c80:	2101      	movs	r1, #1
 8000c82:	488a      	ldr	r0, [pc, #552]	@ (8000eac <MX_GPIO_Init+0x310>)
 8000c84:	f001 fa04 	bl	8002090 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : M24SR64_Y_RF_DISABLE_Pin M24SR64_Y_GPO_Pin ISM43362_RST_Pin ISM43362_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin|ISM43362_SPI3_CSN_Pin;
 8000c88:	f240 1315 	movw	r3, #277	@ 0x115
 8000c8c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c8e:	2301      	movs	r3, #1
 8000c90:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c92:	2300      	movs	r3, #0
 8000c94:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c96:	2300      	movs	r3, #0
 8000c98:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000c9a:	f107 0314 	add.w	r3, r7, #20
 8000c9e:	4619      	mov	r1, r3
 8000ca0:	4882      	ldr	r0, [pc, #520]	@ (8000eac <MX_GPIO_Init+0x310>)
 8000ca2:	f001 f84b 	bl	8001d3c <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_OVRCR_EXTI3_Pin SPSGRF_915_GPIO3_EXTI5_Pin SPBTLE_RF_IRQ_EXTI6_Pin ISM43362_DRDY_EXTI1_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVRCR_EXTI3_Pin|SPSGRF_915_GPIO3_EXTI5_Pin|SPBTLE_RF_IRQ_EXTI6_Pin|ISM43362_DRDY_EXTI1_Pin;
 8000ca6:	236a      	movs	r3, #106	@ 0x6a
 8000ca8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000caa:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000cae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000cb4:	f107 0314 	add.w	r3, r7, #20
 8000cb8:	4619      	mov	r1, r3
 8000cba:	487c      	ldr	r0, [pc, #496]	@ (8000eac <MX_GPIO_Init+0x310>)
 8000cbc:	f001 f83e 	bl	8001d3c <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_EXTI13_Pin */
  GPIO_InitStruct.Pin = BUTTON_EXTI13_Pin;
 8000cc0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000cc4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000cc6:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000cca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ccc:	2300      	movs	r3, #0
 8000cce:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BUTTON_EXTI13_GPIO_Port, &GPIO_InitStruct);
 8000cd0:	f107 0314 	add.w	r3, r7, #20
 8000cd4:	4619      	mov	r1, r3
 8000cd6:	4878      	ldr	r0, [pc, #480]	@ (8000eb8 <MX_GPIO_Init+0x31c>)
 8000cd8:	f001 f830 	bl	8001d3c <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_A5_Pin ARD_A4_Pin ARD_A3_Pin ARD_A2_Pin
                           ARD_A1_Pin ARD_A0_Pin */
  GPIO_InitStruct.Pin = ARD_A5_Pin|ARD_A4_Pin|ARD_A3_Pin|ARD_A2_Pin
 8000cdc:	233f      	movs	r3, #63	@ 0x3f
 8000cde:	617b      	str	r3, [r7, #20]
                          |ARD_A1_Pin|ARD_A0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000ce0:	230b      	movs	r3, #11
 8000ce2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ce8:	f107 0314 	add.w	r3, r7, #20
 8000cec:	4619      	mov	r1, r3
 8000cee:	4872      	ldr	r0, [pc, #456]	@ (8000eb8 <MX_GPIO_Init+0x31c>)
 8000cf0:	f001 f824 	bl	8001d3c <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D1_Pin ARD_D0_Pin */
  GPIO_InitStruct.Pin = ARD_D1_Pin|ARD_D0_Pin;
 8000cf4:	2303      	movs	r3, #3
 8000cf6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cf8:	2302      	movs	r3, #2
 8000cfa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d00:	2303      	movs	r3, #3
 8000d02:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8000d04:	2308      	movs	r3, #8
 8000d06:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d08:	f107 0314 	add.w	r3, r7, #20
 8000d0c:	4619      	mov	r1, r3
 8000d0e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000d12:	f001 f813 	bl	8001d3c <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D10_Pin SPBTLE_RF_RST_Pin ARD_D9_Pin */
  GPIO_InitStruct.Pin = ARD_D10_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin;
 8000d16:	f248 1304 	movw	r3, #33028	@ 0x8104
 8000d1a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d1c:	2301      	movs	r3, #1
 8000d1e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d20:	2300      	movs	r3, #0
 8000d22:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d24:	2300      	movs	r3, #0
 8000d26:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d28:	f107 0314 	add.w	r3, r7, #20
 8000d2c:	4619      	mov	r1, r3
 8000d2e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000d32:	f001 f803 	bl	8001d3c <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D7_Pin */
  GPIO_InitStruct.Pin = ARD_D7_Pin;
 8000d36:	2310      	movs	r3, #16
 8000d38:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000d3a:	230b      	movs	r3, #11
 8000d3c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d3e:	2300      	movs	r3, #0
 8000d40:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D7_GPIO_Port, &GPIO_InitStruct);
 8000d42:	f107 0314 	add.w	r3, r7, #20
 8000d46:	4619      	mov	r1, r3
 8000d48:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000d4c:	f000 fff6 	bl	8001d3c <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D13_Pin ARD_D11_Pin */
  GPIO_InitStruct.Pin = ARD_D13_Pin|ARD_D11_Pin;
 8000d50:	23a0      	movs	r3, #160	@ 0xa0
 8000d52:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d54:	2302      	movs	r3, #2
 8000d56:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d58:	2300      	movs	r3, #0
 8000d5a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d5c:	2303      	movs	r3, #3
 8000d5e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000d60:	2305      	movs	r3, #5
 8000d62:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d64:	f107 0314 	add.w	r3, r7, #20
 8000d68:	4619      	mov	r1, r3
 8000d6a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000d6e:	f000 ffe5 	bl	8001d3c <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D3_Pin */
  GPIO_InitStruct.Pin = ARD_D3_Pin;
 8000d72:	2301      	movs	r3, #1
 8000d74:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000d76:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000d7a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D3_GPIO_Port, &GPIO_InitStruct);
 8000d80:	f107 0314 	add.w	r3, r7, #20
 8000d84:	4619      	mov	r1, r3
 8000d86:	484a      	ldr	r0, [pc, #296]	@ (8000eb0 <MX_GPIO_Init+0x314>)
 8000d88:	f000 ffd8 	bl	8001d3c <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D6_Pin */
  GPIO_InitStruct.Pin = ARD_D6_Pin;
 8000d8c:	2302      	movs	r3, #2
 8000d8e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000d90:	230b      	movs	r3, #11
 8000d92:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d94:	2300      	movs	r3, #0
 8000d96:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D6_GPIO_Port, &GPIO_InitStruct);
 8000d98:	f107 0314 	add.w	r3, r7, #20
 8000d9c:	4619      	mov	r1, r3
 8000d9e:	4844      	ldr	r0, [pc, #272]	@ (8000eb0 <MX_GPIO_Init+0x314>)
 8000da0:	f000 ffcc 	bl	8001d3c <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D8_Pin ISM43362_BOOT0_Pin ISM43362_WAKEUP_Pin LED2_Pin
                           SPSGRF_915_SDN_Pin ARD_D5_Pin SPSGRF_915_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 8000da4:	f24f 0334 	movw	r3, #61492	@ 0xf034
 8000da8:	617b      	str	r3, [r7, #20]
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin|SPSGRF_915_SPI3_CSN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000daa:	2301      	movs	r3, #1
 8000dac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dae:	2300      	movs	r3, #0
 8000db0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000db2:	2300      	movs	r3, #0
 8000db4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000db6:	f107 0314 	add.w	r3, r7, #20
 8000dba:	4619      	mov	r1, r3
 8000dbc:	483c      	ldr	r0, [pc, #240]	@ (8000eb0 <MX_GPIO_Init+0x314>)
 8000dbe:	f000 ffbd 	bl	8001d3c <HAL_GPIO_Init>

  /*Configure GPIO pins : LPS22HB_INT_DRDY_EXTI0_Pin LSM6DSL_INT1_EXTI11_Pin ARD_D2_Pin PMOD_IRQ_EXTI12_Pin */
  GPIO_InitStruct.Pin = LPS22HB_INT_DRDY_EXTI0_Pin|LSM6DSL_INT1_EXTI11_Pin|ARD_D2_Pin|PMOD_IRQ_EXTI12_Pin;
 8000dc2:	f644 4304 	movw	r3, #19460	@ 0x4c04
 8000dc6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000dc8:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000dcc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dce:	2300      	movs	r3, #0
 8000dd0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000dd2:	f107 0314 	add.w	r3, r7, #20
 8000dd6:	4619      	mov	r1, r3
 8000dd8:	4836      	ldr	r0, [pc, #216]	@ (8000eb4 <MX_GPIO_Init+0x318>)
 8000dda:	f000 ffaf 	bl	8001d3c <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_PWR_EN_Pin SPBTLE_RF_SPI3_CSN_Pin PMOD_RESET_Pin STSAFE_A100_RESET_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin|SPBTLE_RF_SPI3_CSN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin;
 8000dde:	f243 0381 	movw	r3, #12417	@ 0x3081
 8000de2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000de4:	2301      	movs	r3, #1
 8000de6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000de8:	2300      	movs	r3, #0
 8000dea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dec:	2300      	movs	r3, #0
 8000dee:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000df0:	f107 0314 	add.w	r3, r7, #20
 8000df4:	4619      	mov	r1, r3
 8000df6:	482f      	ldr	r0, [pc, #188]	@ (8000eb4 <MX_GPIO_Init+0x318>)
 8000df8:	f000 ffa0 	bl	8001d3c <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_XSHUT_Pin LED3_WIFI__LED4_BLE_Pin */
  GPIO_InitStruct.Pin = VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin;
 8000dfc:	f44f 7310 	mov.w	r3, #576	@ 0x240
 8000e00:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e02:	2301      	movs	r3, #1
 8000e04:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e06:	2300      	movs	r3, #0
 8000e08:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e0e:	f107 0314 	add.w	r3, r7, #20
 8000e12:	4619      	mov	r1, r3
 8000e14:	4828      	ldr	r0, [pc, #160]	@ (8000eb8 <MX_GPIO_Init+0x31c>)
 8000e16:	f000 ff91 	bl	8001d3c <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_GPIO1_EXTI7_Pin LSM3MDL_DRDY_EXTI8_Pin */
  GPIO_InitStruct.Pin = VL53L0X_GPIO1_EXTI7_Pin|LSM3MDL_DRDY_EXTI8_Pin;
 8000e1a:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8000e1e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000e20:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000e24:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e26:	2300      	movs	r3, #0
 8000e28:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e2a:	f107 0314 	add.w	r3, r7, #20
 8000e2e:	4619      	mov	r1, r3
 8000e30:	4821      	ldr	r0, [pc, #132]	@ (8000eb8 <MX_GPIO_Init+0x31c>)
 8000e32:	f000 ff83 	bl	8001d3c <HAL_GPIO_Init>

  /*Configure GPIO pin : PMOD_SPI2_SCK_Pin */
  GPIO_InitStruct.Pin = PMOD_SPI2_SCK_Pin;
 8000e36:	2302      	movs	r3, #2
 8000e38:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e3a:	2302      	movs	r3, #2
 8000e3c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e3e:	2300      	movs	r3, #0
 8000e40:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e42:	2303      	movs	r3, #3
 8000e44:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000e46:	2305      	movs	r3, #5
 8000e48:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(PMOD_SPI2_SCK_GPIO_Port, &GPIO_InitStruct);
 8000e4a:	f107 0314 	add.w	r3, r7, #20
 8000e4e:	4619      	mov	r1, r3
 8000e50:	4818      	ldr	r0, [pc, #96]	@ (8000eb4 <MX_GPIO_Init+0x318>)
 8000e52:	f000 ff73 	bl	8001d3c <HAL_GPIO_Init>

  /*Configure GPIO pins : PMOD_UART2_CTS_Pin PMOD_UART2_RTS_Pin PMOD_UART2_TX_Pin PMOD_UART2_RX_Pin */
  GPIO_InitStruct.Pin = PMOD_UART2_CTS_Pin|PMOD_UART2_RTS_Pin|PMOD_UART2_TX_Pin|PMOD_UART2_RX_Pin;
 8000e56:	2378      	movs	r3, #120	@ 0x78
 8000e58:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e5a:	2302      	movs	r3, #2
 8000e5c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e5e:	2300      	movs	r3, #0
 8000e60:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e62:	2303      	movs	r3, #3
 8000e64:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000e66:	2307      	movs	r3, #7
 8000e68:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e6a:	f107 0314 	add.w	r3, r7, #20
 8000e6e:	4619      	mov	r1, r3
 8000e70:	4810      	ldr	r0, [pc, #64]	@ (8000eb4 <MX_GPIO_Init+0x318>)
 8000e72:	f000 ff63 	bl	8001d3c <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D15_Pin */
  GPIO_InitStruct.Pin = ARD_D15_Pin;
 8000e76:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000e7a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e7c:	2312      	movs	r3, #18
 8000e7e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e80:	2300      	movs	r3, #0
 8000e82:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e84:	2303      	movs	r3, #3
 8000e86:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000e88:	2304      	movs	r3, #4
 8000e8a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(ARD_D15_GPIO_Port, &GPIO_InitStruct);
 8000e8c:	f107 0314 	add.w	r3, r7, #20
 8000e90:	4619      	mov	r1, r3
 8000e92:	4807      	ldr	r0, [pc, #28]	@ (8000eb0 <MX_GPIO_Init+0x314>)
 8000e94:	f000 ff52 	bl	8001d3c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000e98:	2200      	movs	r2, #0
 8000e9a:	2100      	movs	r1, #0
 8000e9c:	2017      	movs	r0, #23
 8000e9e:	f000 fe0a 	bl	8001ab6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000ea2:	2017      	movs	r0, #23
 8000ea4:	e00a      	b.n	8000ebc <MX_GPIO_Init+0x320>
 8000ea6:	bf00      	nop
 8000ea8:	40021000 	.word	0x40021000
 8000eac:	48001000 	.word	0x48001000
 8000eb0:	48000400 	.word	0x48000400
 8000eb4:	48000c00 	.word	0x48000c00
 8000eb8:	48000800 	.word	0x48000800
 8000ebc:	f000 fe17 	bl	8001aee <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	2100      	movs	r1, #0
 8000ec4:	2028      	movs	r0, #40	@ 0x28
 8000ec6:	f000 fdf6 	bl	8001ab6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000eca:	2028      	movs	r0, #40	@ 0x28
 8000ecc:	f000 fe0f 	bl	8001aee <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000ed0:	bf00      	nop
 8000ed2:	3728      	adds	r7, #40	@ 0x28
 8000ed4:	46bd      	mov	sp, r7
 8000ed6:	bd80      	pop	{r7, pc}

08000ed8 <TIM4_Start_IC>:

/* USER CODE BEGIN 4 */

void TIM4_Start_IC(){
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	af00      	add	r7, sp, #0
	HAL_TIM_IC_Start_IT(&htim4, TIM_CHANNEL_4);
 8000edc:	210c      	movs	r1, #12
 8000ede:	4802      	ldr	r0, [pc, #8]	@ (8000ee8 <TIM4_Start_IC+0x10>)
 8000ee0:	f003 fa3c 	bl	800435c <HAL_TIM_IC_Start_IT>
}
 8000ee4:	bf00      	nop
 8000ee6:	bd80      	pop	{r7, pc}
 8000ee8:	200001f4 	.word	0x200001f4

08000eec <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim) {
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b082      	sub	sp, #8
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	6078      	str	r0, [r7, #4]
    if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_4) {
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	7f1b      	ldrb	r3, [r3, #28]
 8000ef8:	2b08      	cmp	r3, #8
 8000efa:	d116      	bne.n	8000f2a <HAL_TIM_IC_CaptureCallback+0x3e>
        captureValue = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_4);
 8000efc:	210c      	movs	r1, #12
 8000efe:	6878      	ldr	r0, [r7, #4]
 8000f00:	f003 fef8 	bl	8004cf4 <HAL_TIM_ReadCapturedValue>
 8000f04:	4603      	mov	r3, r0
 8000f06:	4a0b      	ldr	r2, [pc, #44]	@ (8000f34 <HAL_TIM_IC_CaptureCallback+0x48>)
 8000f08:	6013      	str	r3, [r2, #0]
        frequency = HAL_RCC_GetPCLK1Freq() / (captureValue - previousCaptureValue);
 8000f0a:	f002 fa15 	bl	8003338 <HAL_RCC_GetPCLK1Freq>
 8000f0e:	4601      	mov	r1, r0
 8000f10:	4b08      	ldr	r3, [pc, #32]	@ (8000f34 <HAL_TIM_IC_CaptureCallback+0x48>)
 8000f12:	681a      	ldr	r2, [r3, #0]
 8000f14:	4b08      	ldr	r3, [pc, #32]	@ (8000f38 <HAL_TIM_IC_CaptureCallback+0x4c>)
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	1ad3      	subs	r3, r2, r3
 8000f1a:	fbb1 f3f3 	udiv	r3, r1, r3
 8000f1e:	4a07      	ldr	r2, [pc, #28]	@ (8000f3c <HAL_TIM_IC_CaptureCallback+0x50>)
 8000f20:	6013      	str	r3, [r2, #0]
        previousCaptureValue = captureValue;
 8000f22:	4b04      	ldr	r3, [pc, #16]	@ (8000f34 <HAL_TIM_IC_CaptureCallback+0x48>)
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	4a04      	ldr	r2, [pc, #16]	@ (8000f38 <HAL_TIM_IC_CaptureCallback+0x4c>)
 8000f28:	6013      	str	r3, [r2, #0]
    }
}
 8000f2a:	bf00      	nop
 8000f2c:	3708      	adds	r7, #8
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	bd80      	pop	{r7, pc}
 8000f32:	bf00      	nop
 8000f34:	20000834 	.word	0x20000834
 8000f38:	20000838 	.word	0x20000838
 8000f3c:	2000083c 	.word	0x2000083c

08000f40 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f40:	b480      	push	{r7}
 8000f42:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f44:	b672      	cpsid	i
}
 8000f46:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f48:	bf00      	nop
 8000f4a:	e7fd      	b.n	8000f48 <Error_Handler+0x8>

08000f4c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f4c:	b480      	push	{r7}
 8000f4e:	b083      	sub	sp, #12
 8000f50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f52:	4b0f      	ldr	r3, [pc, #60]	@ (8000f90 <HAL_MspInit+0x44>)
 8000f54:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000f56:	4a0e      	ldr	r2, [pc, #56]	@ (8000f90 <HAL_MspInit+0x44>)
 8000f58:	f043 0301 	orr.w	r3, r3, #1
 8000f5c:	6613      	str	r3, [r2, #96]	@ 0x60
 8000f5e:	4b0c      	ldr	r3, [pc, #48]	@ (8000f90 <HAL_MspInit+0x44>)
 8000f60:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000f62:	f003 0301 	and.w	r3, r3, #1
 8000f66:	607b      	str	r3, [r7, #4]
 8000f68:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f6a:	4b09      	ldr	r3, [pc, #36]	@ (8000f90 <HAL_MspInit+0x44>)
 8000f6c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f6e:	4a08      	ldr	r2, [pc, #32]	@ (8000f90 <HAL_MspInit+0x44>)
 8000f70:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000f74:	6593      	str	r3, [r2, #88]	@ 0x58
 8000f76:	4b06      	ldr	r3, [pc, #24]	@ (8000f90 <HAL_MspInit+0x44>)
 8000f78:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f7a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000f7e:	603b      	str	r3, [r7, #0]
 8000f80:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f82:	bf00      	nop
 8000f84:	370c      	adds	r7, #12
 8000f86:	46bd      	mov	sp, r7
 8000f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8c:	4770      	bx	lr
 8000f8e:	bf00      	nop
 8000f90:	40021000 	.word	0x40021000

08000f94 <HAL_DFSDM_ChannelMspInit>:
  * This function configures the hardware resources used in this example
  * @param hdfsdm_channel: DFSDM_Channel handle pointer
  * @retval None
  */
void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* hdfsdm_channel)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b0ac      	sub	sp, #176	@ 0xb0
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f9c:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	601a      	str	r2, [r3, #0]
 8000fa4:	605a      	str	r2, [r3, #4]
 8000fa6:	609a      	str	r2, [r3, #8]
 8000fa8:	60da      	str	r2, [r3, #12]
 8000faa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000fac:	f107 0314 	add.w	r3, r7, #20
 8000fb0:	2288      	movs	r2, #136	@ 0x88
 8000fb2:	2100      	movs	r1, #0
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	f005 fcdc 	bl	8006972 <memset>
  if(DFSDM1_Init == 0)
 8000fba:	4b25      	ldr	r3, [pc, #148]	@ (8001050 <HAL_DFSDM_ChannelMspInit+0xbc>)
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d142      	bne.n	8001048 <HAL_DFSDM_ChannelMspInit+0xb4>

    /* USER CODE END DFSDM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1;
 8000fc2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000fc6:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 8000fc8:	2300      	movs	r3, #0
 8000fca:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000fce:	f107 0314 	add.w	r3, r7, #20
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	f002 fa3c 	bl	8003450 <HAL_RCCEx_PeriphCLKConfig>
 8000fd8:	4603      	mov	r3, r0
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d001      	beq.n	8000fe2 <HAL_DFSDM_ChannelMspInit+0x4e>
    {
      Error_Handler();
 8000fde:	f7ff ffaf 	bl	8000f40 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_DFSDM1_CLK_ENABLE();
 8000fe2:	4b1c      	ldr	r3, [pc, #112]	@ (8001054 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8000fe4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000fe6:	4a1b      	ldr	r2, [pc, #108]	@ (8001054 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8000fe8:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000fec:	6613      	str	r3, [r2, #96]	@ 0x60
 8000fee:	4b19      	ldr	r3, [pc, #100]	@ (8001054 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8000ff0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000ff2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8000ff6:	613b      	str	r3, [r7, #16]
 8000ff8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000ffa:	4b16      	ldr	r3, [pc, #88]	@ (8001054 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8000ffc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ffe:	4a15      	ldr	r2, [pc, #84]	@ (8001054 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001000:	f043 0310 	orr.w	r3, r3, #16
 8001004:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001006:	4b13      	ldr	r3, [pc, #76]	@ (8001054 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001008:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800100a:	f003 0310 	and.w	r3, r3, #16
 800100e:	60fb      	str	r3, [r7, #12]
 8001010:	68fb      	ldr	r3, [r7, #12]
    /**DFSDM1 GPIO Configuration
    PE7     ------> DFSDM1_DATIN2
    PE9     ------> DFSDM1_CKOUT
    */
    GPIO_InitStruct.Pin = DFSDM1_DATIN2_Pin|DFSDM1_CKOUT_Pin;
 8001012:	f44f 7320 	mov.w	r3, #640	@ 0x280
 8001016:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800101a:	2302      	movs	r3, #2
 800101c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001020:	2300      	movs	r3, #0
 8001022:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001026:	2300      	movs	r3, #0
 8001028:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 800102c:	2306      	movs	r3, #6
 800102e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001032:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001036:	4619      	mov	r1, r3
 8001038:	4807      	ldr	r0, [pc, #28]	@ (8001058 <HAL_DFSDM_ChannelMspInit+0xc4>)
 800103a:	f000 fe7f 	bl	8001d3c <HAL_GPIO_Init>

    /* USER CODE BEGIN DFSDM1_MspInit 1 */

    /* USER CODE END DFSDM1_MspInit 1 */

  DFSDM1_Init++;
 800103e:	4b04      	ldr	r3, [pc, #16]	@ (8001050 <HAL_DFSDM_ChannelMspInit+0xbc>)
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	3301      	adds	r3, #1
 8001044:	4a02      	ldr	r2, [pc, #8]	@ (8001050 <HAL_DFSDM_ChannelMspInit+0xbc>)
 8001046:	6013      	str	r3, [r2, #0]
  }

}
 8001048:	bf00      	nop
 800104a:	37b0      	adds	r7, #176	@ 0xb0
 800104c:	46bd      	mov	sp, r7
 800104e:	bd80      	pop	{r7, pc}
 8001050:	20000840 	.word	0x20000840
 8001054:	40021000 	.word	0x40021000
 8001058:	48001000 	.word	0x48001000

0800105c <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	b0ac      	sub	sp, #176	@ 0xb0
 8001060:	af00      	add	r7, sp, #0
 8001062:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001064:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001068:	2200      	movs	r2, #0
 800106a:	601a      	str	r2, [r3, #0]
 800106c:	605a      	str	r2, [r3, #4]
 800106e:	609a      	str	r2, [r3, #8]
 8001070:	60da      	str	r2, [r3, #12]
 8001072:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001074:	f107 0314 	add.w	r3, r7, #20
 8001078:	2288      	movs	r2, #136	@ 0x88
 800107a:	2100      	movs	r1, #0
 800107c:	4618      	mov	r0, r3
 800107e:	f005 fc78 	bl	8006972 <memset>
  if(hi2c->Instance==I2C2)
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	4a21      	ldr	r2, [pc, #132]	@ (800110c <HAL_I2C_MspInit+0xb0>)
 8001088:	4293      	cmp	r3, r2
 800108a:	d13b      	bne.n	8001104 <HAL_I2C_MspInit+0xa8>

    /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 800108c:	2380      	movs	r3, #128	@ 0x80
 800108e:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8001090:	2300      	movs	r3, #0
 8001092:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001094:	f107 0314 	add.w	r3, r7, #20
 8001098:	4618      	mov	r0, r3
 800109a:	f002 f9d9 	bl	8003450 <HAL_RCCEx_PeriphCLKConfig>
 800109e:	4603      	mov	r3, r0
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d001      	beq.n	80010a8 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 80010a4:	f7ff ff4c 	bl	8000f40 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010a8:	4b19      	ldr	r3, [pc, #100]	@ (8001110 <HAL_I2C_MspInit+0xb4>)
 80010aa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010ac:	4a18      	ldr	r2, [pc, #96]	@ (8001110 <HAL_I2C_MspInit+0xb4>)
 80010ae:	f043 0302 	orr.w	r3, r3, #2
 80010b2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80010b4:	4b16      	ldr	r3, [pc, #88]	@ (8001110 <HAL_I2C_MspInit+0xb4>)
 80010b6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010b8:	f003 0302 	and.w	r3, r3, #2
 80010bc:	613b      	str	r3, [r7, #16]
 80010be:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = INTERNAL_I2C2_SCL_Pin|INTERNAL_I2C2_SDA_Pin;
 80010c0:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80010c4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80010c8:	2312      	movs	r3, #18
 80010ca:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80010ce:	2301      	movs	r3, #1
 80010d0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010d4:	2303      	movs	r3, #3
 80010d6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80010da:	2304      	movs	r3, #4
 80010dc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010e0:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80010e4:	4619      	mov	r1, r3
 80010e6:	480b      	ldr	r0, [pc, #44]	@ (8001114 <HAL_I2C_MspInit+0xb8>)
 80010e8:	f000 fe28 	bl	8001d3c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80010ec:	4b08      	ldr	r3, [pc, #32]	@ (8001110 <HAL_I2C_MspInit+0xb4>)
 80010ee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80010f0:	4a07      	ldr	r2, [pc, #28]	@ (8001110 <HAL_I2C_MspInit+0xb4>)
 80010f2:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80010f6:	6593      	str	r3, [r2, #88]	@ 0x58
 80010f8:	4b05      	ldr	r3, [pc, #20]	@ (8001110 <HAL_I2C_MspInit+0xb4>)
 80010fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80010fc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001100:	60fb      	str	r3, [r7, #12]
 8001102:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C2_MspInit 1 */

  }

}
 8001104:	bf00      	nop
 8001106:	37b0      	adds	r7, #176	@ 0xb0
 8001108:	46bd      	mov	sp, r7
 800110a:	bd80      	pop	{r7, pc}
 800110c:	40005800 	.word	0x40005800
 8001110:	40021000 	.word	0x40021000
 8001114:	48000400 	.word	0x48000400

08001118 <HAL_QSPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hqspi: QSPI handle pointer
  * @retval None
  */
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	b08a      	sub	sp, #40	@ 0x28
 800111c:	af00      	add	r7, sp, #0
 800111e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001120:	f107 0314 	add.w	r3, r7, #20
 8001124:	2200      	movs	r2, #0
 8001126:	601a      	str	r2, [r3, #0]
 8001128:	605a      	str	r2, [r3, #4]
 800112a:	609a      	str	r2, [r3, #8]
 800112c:	60da      	str	r2, [r3, #12]
 800112e:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	4a17      	ldr	r2, [pc, #92]	@ (8001194 <HAL_QSPI_MspInit+0x7c>)
 8001136:	4293      	cmp	r3, r2
 8001138:	d128      	bne.n	800118c <HAL_QSPI_MspInit+0x74>
  {
    /* USER CODE BEGIN QUADSPI_MspInit 0 */

    /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 800113a:	4b17      	ldr	r3, [pc, #92]	@ (8001198 <HAL_QSPI_MspInit+0x80>)
 800113c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800113e:	4a16      	ldr	r2, [pc, #88]	@ (8001198 <HAL_QSPI_MspInit+0x80>)
 8001140:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001144:	6513      	str	r3, [r2, #80]	@ 0x50
 8001146:	4b14      	ldr	r3, [pc, #80]	@ (8001198 <HAL_QSPI_MspInit+0x80>)
 8001148:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800114a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800114e:	613b      	str	r3, [r7, #16]
 8001150:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001152:	4b11      	ldr	r3, [pc, #68]	@ (8001198 <HAL_QSPI_MspInit+0x80>)
 8001154:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001156:	4a10      	ldr	r2, [pc, #64]	@ (8001198 <HAL_QSPI_MspInit+0x80>)
 8001158:	f043 0310 	orr.w	r3, r3, #16
 800115c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800115e:	4b0e      	ldr	r3, [pc, #56]	@ (8001198 <HAL_QSPI_MspInit+0x80>)
 8001160:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001162:	f003 0310 	and.w	r3, r3, #16
 8001166:	60fb      	str	r3, [r7, #12]
 8001168:	68fb      	ldr	r3, [r7, #12]
    PE12     ------> QUADSPI_BK1_IO0
    PE13     ------> QUADSPI_BK1_IO1
    PE14     ------> QUADSPI_BK1_IO2
    PE15     ------> QUADSPI_BK1_IO3
    */
    GPIO_InitStruct.Pin = QUADSPI_CLK_Pin|QUADSPI_NCS_Pin|OQUADSPI_BK1_IO0_Pin|QUADSPI_BK1_IO1_Pin
 800116a:	f44f 437c 	mov.w	r3, #64512	@ 0xfc00
 800116e:	617b      	str	r3, [r7, #20]
                          |QUAD_SPI_BK1_IO2_Pin|QUAD_SPI_BK1_IO3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001170:	2302      	movs	r3, #2
 8001172:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001174:	2300      	movs	r3, #0
 8001176:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001178:	2303      	movs	r3, #3
 800117a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 800117c:	230a      	movs	r3, #10
 800117e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001180:	f107 0314 	add.w	r3, r7, #20
 8001184:	4619      	mov	r1, r3
 8001186:	4805      	ldr	r0, [pc, #20]	@ (800119c <HAL_QSPI_MspInit+0x84>)
 8001188:	f000 fdd8 	bl	8001d3c <HAL_GPIO_Init>

    /* USER CODE END QUADSPI_MspInit 1 */

  }

}
 800118c:	bf00      	nop
 800118e:	3728      	adds	r7, #40	@ 0x28
 8001190:	46bd      	mov	sp, r7
 8001192:	bd80      	pop	{r7, pc}
 8001194:	a0001000 	.word	0xa0001000
 8001198:	40021000 	.word	0x40021000
 800119c:	48001000 	.word	0x48001000

080011a0 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b08a      	sub	sp, #40	@ 0x28
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011a8:	f107 0314 	add.w	r3, r7, #20
 80011ac:	2200      	movs	r2, #0
 80011ae:	601a      	str	r2, [r3, #0]
 80011b0:	605a      	str	r2, [r3, #4]
 80011b2:	609a      	str	r2, [r3, #8]
 80011b4:	60da      	str	r2, [r3, #12]
 80011b6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	4a17      	ldr	r2, [pc, #92]	@ (800121c <HAL_SPI_MspInit+0x7c>)
 80011be:	4293      	cmp	r3, r2
 80011c0:	d128      	bne.n	8001214 <HAL_SPI_MspInit+0x74>
  {
    /* USER CODE BEGIN SPI3_MspInit 0 */

    /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 80011c2:	4b17      	ldr	r3, [pc, #92]	@ (8001220 <HAL_SPI_MspInit+0x80>)
 80011c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80011c6:	4a16      	ldr	r2, [pc, #88]	@ (8001220 <HAL_SPI_MspInit+0x80>)
 80011c8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80011cc:	6593      	str	r3, [r2, #88]	@ 0x58
 80011ce:	4b14      	ldr	r3, [pc, #80]	@ (8001220 <HAL_SPI_MspInit+0x80>)
 80011d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80011d2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80011d6:	613b      	str	r3, [r7, #16]
 80011d8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80011da:	4b11      	ldr	r3, [pc, #68]	@ (8001220 <HAL_SPI_MspInit+0x80>)
 80011dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011de:	4a10      	ldr	r2, [pc, #64]	@ (8001220 <HAL_SPI_MspInit+0x80>)
 80011e0:	f043 0304 	orr.w	r3, r3, #4
 80011e4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80011e6:	4b0e      	ldr	r3, [pc, #56]	@ (8001220 <HAL_SPI_MspInit+0x80>)
 80011e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011ea:	f003 0304 	and.w	r3, r3, #4
 80011ee:	60fb      	str	r3, [r7, #12]
 80011f0:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = INTERNAL_SPI3_SCK_Pin|INTERNAL_SPI3_MISO_Pin|INTERNAL_SPI3_MOSI_Pin;
 80011f2:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 80011f6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011f8:	2302      	movs	r3, #2
 80011fa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011fc:	2300      	movs	r3, #0
 80011fe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001200:	2303      	movs	r3, #3
 8001202:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001204:	2306      	movs	r3, #6
 8001206:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001208:	f107 0314 	add.w	r3, r7, #20
 800120c:	4619      	mov	r1, r3
 800120e:	4805      	ldr	r0, [pc, #20]	@ (8001224 <HAL_SPI_MspInit+0x84>)
 8001210:	f000 fd94 	bl	8001d3c <HAL_GPIO_Init>

    /* USER CODE END SPI3_MspInit 1 */

  }

}
 8001214:	bf00      	nop
 8001216:	3728      	adds	r7, #40	@ 0x28
 8001218:	46bd      	mov	sp, r7
 800121a:	bd80      	pop	{r7, pc}
 800121c:	40003c00 	.word	0x40003c00
 8001220:	40021000 	.word	0x40021000
 8001224:	48000800 	.word	0x48000800

08001228 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	b084      	sub	sp, #16
 800122c:	af00      	add	r7, sp, #0
 800122e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001238:	d114      	bne.n	8001264 <HAL_TIM_Base_MspInit+0x3c>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800123a:	4b19      	ldr	r3, [pc, #100]	@ (80012a0 <HAL_TIM_Base_MspInit+0x78>)
 800123c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800123e:	4a18      	ldr	r2, [pc, #96]	@ (80012a0 <HAL_TIM_Base_MspInit+0x78>)
 8001240:	f043 0301 	orr.w	r3, r3, #1
 8001244:	6593      	str	r3, [r2, #88]	@ 0x58
 8001246:	4b16      	ldr	r3, [pc, #88]	@ (80012a0 <HAL_TIM_Base_MspInit+0x78>)
 8001248:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800124a:	f003 0301 	and.w	r3, r3, #1
 800124e:	60fb      	str	r3, [r7, #12]
 8001250:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001252:	2200      	movs	r2, #0
 8001254:	2100      	movs	r1, #0
 8001256:	201c      	movs	r0, #28
 8001258:	f000 fc2d 	bl	8001ab6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800125c:	201c      	movs	r0, #28
 800125e:	f000 fc46 	bl	8001aee <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN TIM3_MspInit 1 */

    /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001262:	e018      	b.n	8001296 <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM3)
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	4a0e      	ldr	r2, [pc, #56]	@ (80012a4 <HAL_TIM_Base_MspInit+0x7c>)
 800126a:	4293      	cmp	r3, r2
 800126c:	d113      	bne.n	8001296 <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800126e:	4b0c      	ldr	r3, [pc, #48]	@ (80012a0 <HAL_TIM_Base_MspInit+0x78>)
 8001270:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001272:	4a0b      	ldr	r2, [pc, #44]	@ (80012a0 <HAL_TIM_Base_MspInit+0x78>)
 8001274:	f043 0302 	orr.w	r3, r3, #2
 8001278:	6593      	str	r3, [r2, #88]	@ 0x58
 800127a:	4b09      	ldr	r3, [pc, #36]	@ (80012a0 <HAL_TIM_Base_MspInit+0x78>)
 800127c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800127e:	f003 0302 	and.w	r3, r3, #2
 8001282:	60bb      	str	r3, [r7, #8]
 8001284:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001286:	2200      	movs	r2, #0
 8001288:	2100      	movs	r1, #0
 800128a:	201d      	movs	r0, #29
 800128c:	f000 fc13 	bl	8001ab6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001290:	201d      	movs	r0, #29
 8001292:	f000 fc2c 	bl	8001aee <HAL_NVIC_EnableIRQ>
}
 8001296:	bf00      	nop
 8001298:	3710      	adds	r7, #16
 800129a:	46bd      	mov	sp, r7
 800129c:	bd80      	pop	{r7, pc}
 800129e:	bf00      	nop
 80012a0:	40021000 	.word	0x40021000
 80012a4:	40000400 	.word	0x40000400

080012a8 <HAL_TIM_IC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_ic: TIM_IC handle pointer
  * @retval None
  */
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b08a      	sub	sp, #40	@ 0x28
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012b0:	f107 0314 	add.w	r3, r7, #20
 80012b4:	2200      	movs	r2, #0
 80012b6:	601a      	str	r2, [r3, #0]
 80012b8:	605a      	str	r2, [r3, #4]
 80012ba:	609a      	str	r2, [r3, #8]
 80012bc:	60da      	str	r2, [r3, #12]
 80012be:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM4)
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	4a1b      	ldr	r2, [pc, #108]	@ (8001334 <HAL_TIM_IC_MspInit+0x8c>)
 80012c6:	4293      	cmp	r3, r2
 80012c8:	d130      	bne.n	800132c <HAL_TIM_IC_MspInit+0x84>
  {
    /* USER CODE BEGIN TIM4_MspInit 0 */

    /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 80012ca:	4b1b      	ldr	r3, [pc, #108]	@ (8001338 <HAL_TIM_IC_MspInit+0x90>)
 80012cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80012ce:	4a1a      	ldr	r2, [pc, #104]	@ (8001338 <HAL_TIM_IC_MspInit+0x90>)
 80012d0:	f043 0304 	orr.w	r3, r3, #4
 80012d4:	6593      	str	r3, [r2, #88]	@ 0x58
 80012d6:	4b18      	ldr	r3, [pc, #96]	@ (8001338 <HAL_TIM_IC_MspInit+0x90>)
 80012d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80012da:	f003 0304 	and.w	r3, r3, #4
 80012de:	613b      	str	r3, [r7, #16]
 80012e0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012e2:	4b15      	ldr	r3, [pc, #84]	@ (8001338 <HAL_TIM_IC_MspInit+0x90>)
 80012e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012e6:	4a14      	ldr	r2, [pc, #80]	@ (8001338 <HAL_TIM_IC_MspInit+0x90>)
 80012e8:	f043 0302 	orr.w	r3, r3, #2
 80012ec:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80012ee:	4b12      	ldr	r3, [pc, #72]	@ (8001338 <HAL_TIM_IC_MspInit+0x90>)
 80012f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012f2:	f003 0302 	and.w	r3, r3, #2
 80012f6:	60fb      	str	r3, [r7, #12]
 80012f8:	68fb      	ldr	r3, [r7, #12]
    /**TIM4 GPIO Configuration
    PB9     ------> TIM4_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80012fa:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80012fe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001300:	2302      	movs	r3, #2
 8001302:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001304:	2300      	movs	r3, #0
 8001306:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001308:	2300      	movs	r3, #0
 800130a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800130c:	2302      	movs	r3, #2
 800130e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001310:	f107 0314 	add.w	r3, r7, #20
 8001314:	4619      	mov	r1, r3
 8001316:	4809      	ldr	r0, [pc, #36]	@ (800133c <HAL_TIM_IC_MspInit+0x94>)
 8001318:	f000 fd10 	bl	8001d3c <HAL_GPIO_Init>

    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 800131c:	2200      	movs	r2, #0
 800131e:	2100      	movs	r1, #0
 8001320:	201e      	movs	r0, #30
 8001322:	f000 fbc8 	bl	8001ab6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001326:	201e      	movs	r0, #30
 8001328:	f000 fbe1 	bl	8001aee <HAL_NVIC_EnableIRQ>

    /* USER CODE END TIM4_MspInit 1 */

  }

}
 800132c:	bf00      	nop
 800132e:	3728      	adds	r7, #40	@ 0x28
 8001330:	46bd      	mov	sp, r7
 8001332:	bd80      	pop	{r7, pc}
 8001334:	40000800 	.word	0x40000800
 8001338:	40021000 	.word	0x40021000
 800133c:	48000400 	.word	0x48000400

08001340 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	b08a      	sub	sp, #40	@ 0x28
 8001344:	af00      	add	r7, sp, #0
 8001346:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001348:	f107 0314 	add.w	r3, r7, #20
 800134c:	2200      	movs	r2, #0
 800134e:	601a      	str	r2, [r3, #0]
 8001350:	605a      	str	r2, [r3, #4]
 8001352:	609a      	str	r2, [r3, #8]
 8001354:	60da      	str	r2, [r3, #12]
 8001356:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001360:	d11d      	bne.n	800139e <HAL_TIM_MspPostInit+0x5e>
  {
    /* USER CODE BEGIN TIM2_MspPostInit 0 */

    /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001362:	4b22      	ldr	r3, [pc, #136]	@ (80013ec <HAL_TIM_MspPostInit+0xac>)
 8001364:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001366:	4a21      	ldr	r2, [pc, #132]	@ (80013ec <HAL_TIM_MspPostInit+0xac>)
 8001368:	f043 0301 	orr.w	r3, r3, #1
 800136c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800136e:	4b1f      	ldr	r3, [pc, #124]	@ (80013ec <HAL_TIM_MspPostInit+0xac>)
 8001370:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001372:	f003 0301 	and.w	r3, r3, #1
 8001376:	613b      	str	r3, [r7, #16]
 8001378:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA3     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = ARD_D4_Pin;
 800137a:	2308      	movs	r3, #8
 800137c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800137e:	2302      	movs	r3, #2
 8001380:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001382:	2300      	movs	r3, #0
 8001384:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001386:	2300      	movs	r3, #0
 8001388:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800138a:	2301      	movs	r3, #1
 800138c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(ARD_D4_GPIO_Port, &GPIO_InitStruct);
 800138e:	f107 0314 	add.w	r3, r7, #20
 8001392:	4619      	mov	r1, r3
 8001394:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001398:	f000 fcd0 	bl	8001d3c <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM3_MspPostInit 1 */

    /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800139c:	e021      	b.n	80013e2 <HAL_TIM_MspPostInit+0xa2>
  else if(htim->Instance==TIM3)
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	4a13      	ldr	r2, [pc, #76]	@ (80013f0 <HAL_TIM_MspPostInit+0xb0>)
 80013a4:	4293      	cmp	r3, r2
 80013a6:	d11c      	bne.n	80013e2 <HAL_TIM_MspPostInit+0xa2>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013a8:	4b10      	ldr	r3, [pc, #64]	@ (80013ec <HAL_TIM_MspPostInit+0xac>)
 80013aa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013ac:	4a0f      	ldr	r2, [pc, #60]	@ (80013ec <HAL_TIM_MspPostInit+0xac>)
 80013ae:	f043 0301 	orr.w	r3, r3, #1
 80013b2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80013b4:	4b0d      	ldr	r3, [pc, #52]	@ (80013ec <HAL_TIM_MspPostInit+0xac>)
 80013b6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013b8:	f003 0301 	and.w	r3, r3, #1
 80013bc:	60fb      	str	r3, [r7, #12]
 80013be:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80013c0:	2340      	movs	r3, #64	@ 0x40
 80013c2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013c4:	2302      	movs	r3, #2
 80013c6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013c8:	2300      	movs	r3, #0
 80013ca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013cc:	2300      	movs	r3, #0
 80013ce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80013d0:	2302      	movs	r3, #2
 80013d2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013d4:	f107 0314 	add.w	r3, r7, #20
 80013d8:	4619      	mov	r1, r3
 80013da:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80013de:	f000 fcad 	bl	8001d3c <HAL_GPIO_Init>
}
 80013e2:	bf00      	nop
 80013e4:	3728      	adds	r7, #40	@ 0x28
 80013e6:	46bd      	mov	sp, r7
 80013e8:	bd80      	pop	{r7, pc}
 80013ea:	bf00      	nop
 80013ec:	40021000 	.word	0x40021000
 80013f0:	40000400 	.word	0x40000400

080013f4 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b0ae      	sub	sp, #184	@ 0xb8
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013fc:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001400:	2200      	movs	r2, #0
 8001402:	601a      	str	r2, [r3, #0]
 8001404:	605a      	str	r2, [r3, #4]
 8001406:	609a      	str	r2, [r3, #8]
 8001408:	60da      	str	r2, [r3, #12]
 800140a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800140c:	f107 031c 	add.w	r3, r7, #28
 8001410:	2288      	movs	r2, #136	@ 0x88
 8001412:	2100      	movs	r1, #0
 8001414:	4618      	mov	r0, r3
 8001416:	f005 faac 	bl	8006972 <memset>
  if(huart->Instance==USART1)
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	4a42      	ldr	r2, [pc, #264]	@ (8001528 <HAL_UART_MspInit+0x134>)
 8001420:	4293      	cmp	r3, r2
 8001422:	d13b      	bne.n	800149c <HAL_UART_MspInit+0xa8>

    /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001424:	2301      	movs	r3, #1
 8001426:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001428:	2300      	movs	r3, #0
 800142a:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800142c:	f107 031c 	add.w	r3, r7, #28
 8001430:	4618      	mov	r0, r3
 8001432:	f002 f80d 	bl	8003450 <HAL_RCCEx_PeriphCLKConfig>
 8001436:	4603      	mov	r3, r0
 8001438:	2b00      	cmp	r3, #0
 800143a:	d001      	beq.n	8001440 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800143c:	f7ff fd80 	bl	8000f40 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001440:	4b3a      	ldr	r3, [pc, #232]	@ (800152c <HAL_UART_MspInit+0x138>)
 8001442:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001444:	4a39      	ldr	r2, [pc, #228]	@ (800152c <HAL_UART_MspInit+0x138>)
 8001446:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800144a:	6613      	str	r3, [r2, #96]	@ 0x60
 800144c:	4b37      	ldr	r3, [pc, #220]	@ (800152c <HAL_UART_MspInit+0x138>)
 800144e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001450:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001454:	61bb      	str	r3, [r7, #24]
 8001456:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001458:	4b34      	ldr	r3, [pc, #208]	@ (800152c <HAL_UART_MspInit+0x138>)
 800145a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800145c:	4a33      	ldr	r2, [pc, #204]	@ (800152c <HAL_UART_MspInit+0x138>)
 800145e:	f043 0302 	orr.w	r3, r3, #2
 8001462:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001464:	4b31      	ldr	r3, [pc, #196]	@ (800152c <HAL_UART_MspInit+0x138>)
 8001466:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001468:	f003 0302 	and.w	r3, r3, #2
 800146c:	617b      	str	r3, [r7, #20]
 800146e:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = ST_LINK_UART1_TX_Pin|ST_LINK_UART1_RX_Pin;
 8001470:	23c0      	movs	r3, #192	@ 0xc0
 8001472:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001476:	2302      	movs	r3, #2
 8001478:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800147c:	2300      	movs	r3, #0
 800147e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001482:	2303      	movs	r3, #3
 8001484:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001488:	2307      	movs	r3, #7
 800148a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800148e:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001492:	4619      	mov	r1, r3
 8001494:	4826      	ldr	r0, [pc, #152]	@ (8001530 <HAL_UART_MspInit+0x13c>)
 8001496:	f000 fc51 	bl	8001d3c <HAL_GPIO_Init>
    /* USER CODE BEGIN USART3_MspInit 1 */

    /* USER CODE END USART3_MspInit 1 */
  }

}
 800149a:	e040      	b.n	800151e <HAL_UART_MspInit+0x12a>
  else if(huart->Instance==USART3)
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	4a24      	ldr	r2, [pc, #144]	@ (8001534 <HAL_UART_MspInit+0x140>)
 80014a2:	4293      	cmp	r3, r2
 80014a4:	d13b      	bne.n	800151e <HAL_UART_MspInit+0x12a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80014a6:	2304      	movs	r3, #4
 80014a8:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80014aa:	2300      	movs	r3, #0
 80014ac:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80014ae:	f107 031c 	add.w	r3, r7, #28
 80014b2:	4618      	mov	r0, r3
 80014b4:	f001 ffcc 	bl	8003450 <HAL_RCCEx_PeriphCLKConfig>
 80014b8:	4603      	mov	r3, r0
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d001      	beq.n	80014c2 <HAL_UART_MspInit+0xce>
      Error_Handler();
 80014be:	f7ff fd3f 	bl	8000f40 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 80014c2:	4b1a      	ldr	r3, [pc, #104]	@ (800152c <HAL_UART_MspInit+0x138>)
 80014c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80014c6:	4a19      	ldr	r2, [pc, #100]	@ (800152c <HAL_UART_MspInit+0x138>)
 80014c8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80014cc:	6593      	str	r3, [r2, #88]	@ 0x58
 80014ce:	4b17      	ldr	r3, [pc, #92]	@ (800152c <HAL_UART_MspInit+0x138>)
 80014d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80014d2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80014d6:	613b      	str	r3, [r7, #16]
 80014d8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80014da:	4b14      	ldr	r3, [pc, #80]	@ (800152c <HAL_UART_MspInit+0x138>)
 80014dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014de:	4a13      	ldr	r2, [pc, #76]	@ (800152c <HAL_UART_MspInit+0x138>)
 80014e0:	f043 0308 	orr.w	r3, r3, #8
 80014e4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80014e6:	4b11      	ldr	r3, [pc, #68]	@ (800152c <HAL_UART_MspInit+0x138>)
 80014e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014ea:	f003 0308 	and.w	r3, r3, #8
 80014ee:	60fb      	str	r3, [r7, #12]
 80014f0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = INTERNAL_UART3_TX_Pin|INTERNAL_UART3_RX_Pin;
 80014f2:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80014f6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014fa:	2302      	movs	r3, #2
 80014fc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001500:	2300      	movs	r3, #0
 8001502:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001506:	2303      	movs	r3, #3
 8001508:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800150c:	2307      	movs	r3, #7
 800150e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001512:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001516:	4619      	mov	r1, r3
 8001518:	4807      	ldr	r0, [pc, #28]	@ (8001538 <HAL_UART_MspInit+0x144>)
 800151a:	f000 fc0f 	bl	8001d3c <HAL_GPIO_Init>
}
 800151e:	bf00      	nop
 8001520:	37b8      	adds	r7, #184	@ 0xb8
 8001522:	46bd      	mov	sp, r7
 8001524:	bd80      	pop	{r7, pc}
 8001526:	bf00      	nop
 8001528:	40013800 	.word	0x40013800
 800152c:	40021000 	.word	0x40021000
 8001530:	48000400 	.word	0x48000400
 8001534:	40004800 	.word	0x40004800
 8001538:	48000c00 	.word	0x48000c00

0800153c <HAL_PCD_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hpcd: PCD handle pointer
  * @retval None
  */
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	b0ac      	sub	sp, #176	@ 0xb0
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001544:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001548:	2200      	movs	r2, #0
 800154a:	601a      	str	r2, [r3, #0]
 800154c:	605a      	str	r2, [r3, #4]
 800154e:	609a      	str	r2, [r3, #8]
 8001550:	60da      	str	r2, [r3, #12]
 8001552:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001554:	f107 0314 	add.w	r3, r7, #20
 8001558:	2288      	movs	r2, #136	@ 0x88
 800155a:	2100      	movs	r1, #0
 800155c:	4618      	mov	r0, r3
 800155e:	f005 fa08 	bl	8006972 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800156a:	d17c      	bne.n	8001666 <HAL_PCD_MspInit+0x12a>

    /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800156c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001570:	617b      	str	r3, [r7, #20]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8001572:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8001576:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 800157a:	2301      	movs	r3, #1
 800157c:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 800157e:	2301      	movs	r3, #1
 8001580:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 8001582:	2318      	movs	r3, #24
 8001584:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8001586:	2307      	movs	r3, #7
 8001588:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 800158a:	2302      	movs	r3, #2
 800158c:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 800158e:	2302      	movs	r3, #2
 8001590:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 8001592:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8001596:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001598:	f107 0314 	add.w	r3, r7, #20
 800159c:	4618      	mov	r0, r3
 800159e:	f001 ff57 	bl	8003450 <HAL_RCCEx_PeriphCLKConfig>
 80015a2:	4603      	mov	r3, r0
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d001      	beq.n	80015ac <HAL_PCD_MspInit+0x70>
    {
      Error_Handler();
 80015a8:	f7ff fcca 	bl	8000f40 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015ac:	4b30      	ldr	r3, [pc, #192]	@ (8001670 <HAL_PCD_MspInit+0x134>)
 80015ae:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015b0:	4a2f      	ldr	r2, [pc, #188]	@ (8001670 <HAL_PCD_MspInit+0x134>)
 80015b2:	f043 0301 	orr.w	r3, r3, #1
 80015b6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80015b8:	4b2d      	ldr	r3, [pc, #180]	@ (8001670 <HAL_PCD_MspInit+0x134>)
 80015ba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015bc:	f003 0301 	and.w	r3, r3, #1
 80015c0:	613b      	str	r3, [r7, #16]
 80015c2:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_OTG_FS_VBUS_Pin;
 80015c4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80015c8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80015cc:	2300      	movs	r3, #0
 80015ce:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015d2:	2300      	movs	r3, #0
 80015d4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(USB_OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 80015d8:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80015dc:	4619      	mov	r1, r3
 80015de:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80015e2:	f000 fbab 	bl	8001d3c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_OTG_FS_ID_Pin|USB_OTG_FS_DM_Pin|USB_OTG_FS_DP_Pin;
 80015e6:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 80015ea:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015ee:	2302      	movs	r3, #2
 80015f0:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015f4:	2300      	movs	r3, #0
 80015f6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015fa:	2303      	movs	r3, #3
 80015fc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001600:	230a      	movs	r3, #10
 8001602:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001606:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800160a:	4619      	mov	r1, r3
 800160c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001610:	f000 fb94 	bl	8001d3c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001614:	4b16      	ldr	r3, [pc, #88]	@ (8001670 <HAL_PCD_MspInit+0x134>)
 8001616:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001618:	4a15      	ldr	r2, [pc, #84]	@ (8001670 <HAL_PCD_MspInit+0x134>)
 800161a:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800161e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001620:	4b13      	ldr	r3, [pc, #76]	@ (8001670 <HAL_PCD_MspInit+0x134>)
 8001622:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001624:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001628:	60fb      	str	r3, [r7, #12]
 800162a:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800162c:	4b10      	ldr	r3, [pc, #64]	@ (8001670 <HAL_PCD_MspInit+0x134>)
 800162e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001630:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001634:	2b00      	cmp	r3, #0
 8001636:	d114      	bne.n	8001662 <HAL_PCD_MspInit+0x126>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001638:	4b0d      	ldr	r3, [pc, #52]	@ (8001670 <HAL_PCD_MspInit+0x134>)
 800163a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800163c:	4a0c      	ldr	r2, [pc, #48]	@ (8001670 <HAL_PCD_MspInit+0x134>)
 800163e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001642:	6593      	str	r3, [r2, #88]	@ 0x58
 8001644:	4b0a      	ldr	r3, [pc, #40]	@ (8001670 <HAL_PCD_MspInit+0x134>)
 8001646:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001648:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800164c:	60bb      	str	r3, [r7, #8]
 800164e:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 8001650:	f001 f832 	bl	80026b8 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001654:	4b06      	ldr	r3, [pc, #24]	@ (8001670 <HAL_PCD_MspInit+0x134>)
 8001656:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001658:	4a05      	ldr	r2, [pc, #20]	@ (8001670 <HAL_PCD_MspInit+0x134>)
 800165a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800165e:	6593      	str	r3, [r2, #88]	@ 0x58

    /* USER CODE END USB_OTG_FS_MspInit 1 */

  }

}
 8001660:	e001      	b.n	8001666 <HAL_PCD_MspInit+0x12a>
      HAL_PWREx_EnableVddUSB();
 8001662:	f001 f829 	bl	80026b8 <HAL_PWREx_EnableVddUSB>
}
 8001666:	bf00      	nop
 8001668:	37b0      	adds	r7, #176	@ 0xb0
 800166a:	46bd      	mov	sp, r7
 800166c:	bd80      	pop	{r7, pc}
 800166e:	bf00      	nop
 8001670:	40021000 	.word	0x40021000

08001674 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001674:	b480      	push	{r7}
 8001676:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001678:	bf00      	nop
 800167a:	e7fd      	b.n	8001678 <NMI_Handler+0x4>

0800167c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800167c:	b480      	push	{r7}
 800167e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001680:	bf00      	nop
 8001682:	e7fd      	b.n	8001680 <HardFault_Handler+0x4>

08001684 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001684:	b480      	push	{r7}
 8001686:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001688:	bf00      	nop
 800168a:	e7fd      	b.n	8001688 <MemManage_Handler+0x4>

0800168c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800168c:	b480      	push	{r7}
 800168e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001690:	bf00      	nop
 8001692:	e7fd      	b.n	8001690 <BusFault_Handler+0x4>

08001694 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001694:	b480      	push	{r7}
 8001696:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001698:	bf00      	nop
 800169a:	e7fd      	b.n	8001698 <UsageFault_Handler+0x4>

0800169c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800169c:	b480      	push	{r7}
 800169e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80016a0:	bf00      	nop
 80016a2:	46bd      	mov	sp, r7
 80016a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a8:	4770      	bx	lr

080016aa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80016aa:	b480      	push	{r7}
 80016ac:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80016ae:	bf00      	nop
 80016b0:	46bd      	mov	sp, r7
 80016b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b6:	4770      	bx	lr

080016b8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80016b8:	b480      	push	{r7}
 80016ba:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80016bc:	bf00      	nop
 80016be:	46bd      	mov	sp, r7
 80016c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c4:	4770      	bx	lr

080016c6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80016c6:	b580      	push	{r7, lr}
 80016c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80016ca:	f000 f8d5 	bl	8001878 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80016ce:	bf00      	nop
 80016d0:	bd80      	pop	{r7, pc}

080016d2 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80016d2:	b580      	push	{r7, lr}
 80016d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SPSGRF_915_GPIO3_EXTI5_Pin);
 80016d6:	2020      	movs	r0, #32
 80016d8:	f000 fcf2 	bl	80020c0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(SPBTLE_RF_IRQ_EXTI6_Pin);
 80016dc:	2040      	movs	r0, #64	@ 0x40
 80016de:	f000 fcef 	bl	80020c0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(VL53L0X_GPIO1_EXTI7_Pin);
 80016e2:	2080      	movs	r0, #128	@ 0x80
 80016e4:	f000 fcec 	bl	80020c0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM3MDL_DRDY_EXTI8_Pin);
 80016e8:	f44f 7080 	mov.w	r0, #256	@ 0x100
 80016ec:	f000 fce8 	bl	80020c0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80016f0:	bf00      	nop
 80016f2:	bd80      	pop	{r7, pc}

080016f4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80016f8:	4802      	ldr	r0, [pc, #8]	@ (8001704 <TIM2_IRQHandler+0x10>)
 80016fa:	f002 ff79 	bl	80045f0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80016fe:	bf00      	nop
 8001700:	bd80      	pop	{r7, pc}
 8001702:	bf00      	nop
 8001704:	2000015c 	.word	0x2000015c

08001708 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800170c:	4802      	ldr	r0, [pc, #8]	@ (8001718 <TIM3_IRQHandler+0x10>)
 800170e:	f002 ff6f 	bl	80045f0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001712:	bf00      	nop
 8001714:	bd80      	pop	{r7, pc}
 8001716:	bf00      	nop
 8001718:	200001a8 	.word	0x200001a8

0800171c <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001720:	4802      	ldr	r0, [pc, #8]	@ (800172c <TIM4_IRQHandler+0x10>)
 8001722:	f002 ff65 	bl	80045f0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001726:	bf00      	nop
 8001728:	bd80      	pop	{r7, pc}
 800172a:	bf00      	nop
 800172c:	200001f4 	.word	0x200001f4

08001730 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LPS22HB_INT_DRDY_EXTI0_Pin);
 8001734:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8001738:	f000 fcc2 	bl	80020c0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM6DSL_INT1_EXTI11_Pin);
 800173c:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8001740:	f000 fcbe 	bl	80020c0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BUTTON_EXTI13_Pin);
 8001744:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8001748:	f000 fcba 	bl	80020c0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ARD_D2_Pin);
 800174c:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8001750:	f000 fcb6 	bl	80020c0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001754:	bf00      	nop
 8001756:	bd80      	pop	{r7, pc}

08001758 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001758:	b480      	push	{r7}
 800175a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800175c:	4b06      	ldr	r3, [pc, #24]	@ (8001778 <SystemInit+0x20>)
 800175e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001762:	4a05      	ldr	r2, [pc, #20]	@ (8001778 <SystemInit+0x20>)
 8001764:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001768:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 800176c:	bf00      	nop
 800176e:	46bd      	mov	sp, r7
 8001770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001774:	4770      	bx	lr
 8001776:	bf00      	nop
 8001778:	e000ed00 	.word	0xe000ed00

0800177c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800177c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80017b4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001780:	f7ff ffea 	bl	8001758 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001784:	480c      	ldr	r0, [pc, #48]	@ (80017b8 <LoopForever+0x6>)
  ldr r1, =_edata
 8001786:	490d      	ldr	r1, [pc, #52]	@ (80017bc <LoopForever+0xa>)
  ldr r2, =_sidata
 8001788:	4a0d      	ldr	r2, [pc, #52]	@ (80017c0 <LoopForever+0xe>)
  movs r3, #0
 800178a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800178c:	e002      	b.n	8001794 <LoopCopyDataInit>

0800178e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800178e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001790:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001792:	3304      	adds	r3, #4

08001794 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001794:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001796:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001798:	d3f9      	bcc.n	800178e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800179a:	4a0a      	ldr	r2, [pc, #40]	@ (80017c4 <LoopForever+0x12>)
  ldr r4, =_ebss
 800179c:	4c0a      	ldr	r4, [pc, #40]	@ (80017c8 <LoopForever+0x16>)
  movs r3, #0
 800179e:	2300      	movs	r3, #0
  b LoopFillZerobss
 80017a0:	e001      	b.n	80017a6 <LoopFillZerobss>

080017a2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80017a2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80017a4:	3204      	adds	r2, #4

080017a6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80017a6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80017a8:	d3fb      	bcc.n	80017a2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80017aa:	f005 f8eb 	bl	8006984 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80017ae:	f7fe fea1 	bl	80004f4 <main>

080017b2 <LoopForever>:

LoopForever:
    b LoopForever
 80017b2:	e7fe      	b.n	80017b2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80017b4:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80017b8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80017bc:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80017c0:	08006a3c 	.word	0x08006a3c
  ldr r2, =_sbss
 80017c4:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80017c8:	2000086c 	.word	0x2000086c

080017cc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80017cc:	e7fe      	b.n	80017cc <ADC1_2_IRQHandler>

080017ce <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80017ce:	b580      	push	{r7, lr}
 80017d0:	b082      	sub	sp, #8
 80017d2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80017d4:	2300      	movs	r3, #0
 80017d6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80017d8:	2003      	movs	r0, #3
 80017da:	f000 f961 	bl	8001aa0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80017de:	2000      	movs	r0, #0
 80017e0:	f000 f80e 	bl	8001800 <HAL_InitTick>
 80017e4:	4603      	mov	r3, r0
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d002      	beq.n	80017f0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80017ea:	2301      	movs	r3, #1
 80017ec:	71fb      	strb	r3, [r7, #7]
 80017ee:	e001      	b.n	80017f4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80017f0:	f7ff fbac 	bl	8000f4c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80017f4:	79fb      	ldrb	r3, [r7, #7]
}
 80017f6:	4618      	mov	r0, r3
 80017f8:	3708      	adds	r7, #8
 80017fa:	46bd      	mov	sp, r7
 80017fc:	bd80      	pop	{r7, pc}
	...

08001800 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001800:	b580      	push	{r7, lr}
 8001802:	b084      	sub	sp, #16
 8001804:	af00      	add	r7, sp, #0
 8001806:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001808:	2300      	movs	r3, #0
 800180a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 800180c:	4b17      	ldr	r3, [pc, #92]	@ (800186c <HAL_InitTick+0x6c>)
 800180e:	781b      	ldrb	r3, [r3, #0]
 8001810:	2b00      	cmp	r3, #0
 8001812:	d023      	beq.n	800185c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001814:	4b16      	ldr	r3, [pc, #88]	@ (8001870 <HAL_InitTick+0x70>)
 8001816:	681a      	ldr	r2, [r3, #0]
 8001818:	4b14      	ldr	r3, [pc, #80]	@ (800186c <HAL_InitTick+0x6c>)
 800181a:	781b      	ldrb	r3, [r3, #0]
 800181c:	4619      	mov	r1, r3
 800181e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001822:	fbb3 f3f1 	udiv	r3, r3, r1
 8001826:	fbb2 f3f3 	udiv	r3, r2, r3
 800182a:	4618      	mov	r0, r3
 800182c:	f000 f96d 	bl	8001b0a <HAL_SYSTICK_Config>
 8001830:	4603      	mov	r3, r0
 8001832:	2b00      	cmp	r3, #0
 8001834:	d10f      	bne.n	8001856 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	2b0f      	cmp	r3, #15
 800183a:	d809      	bhi.n	8001850 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800183c:	2200      	movs	r2, #0
 800183e:	6879      	ldr	r1, [r7, #4]
 8001840:	f04f 30ff 	mov.w	r0, #4294967295
 8001844:	f000 f937 	bl	8001ab6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001848:	4a0a      	ldr	r2, [pc, #40]	@ (8001874 <HAL_InitTick+0x74>)
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	6013      	str	r3, [r2, #0]
 800184e:	e007      	b.n	8001860 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001850:	2301      	movs	r3, #1
 8001852:	73fb      	strb	r3, [r7, #15]
 8001854:	e004      	b.n	8001860 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001856:	2301      	movs	r3, #1
 8001858:	73fb      	strb	r3, [r7, #15]
 800185a:	e001      	b.n	8001860 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 800185c:	2301      	movs	r3, #1
 800185e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001860:	7bfb      	ldrb	r3, [r7, #15]
}
 8001862:	4618      	mov	r0, r3
 8001864:	3710      	adds	r7, #16
 8001866:	46bd      	mov	sp, r7
 8001868:	bd80      	pop	{r7, pc}
 800186a:	bf00      	nop
 800186c:	20000008 	.word	0x20000008
 8001870:	20000000 	.word	0x20000000
 8001874:	20000004 	.word	0x20000004

08001878 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001878:	b480      	push	{r7}
 800187a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800187c:	4b06      	ldr	r3, [pc, #24]	@ (8001898 <HAL_IncTick+0x20>)
 800187e:	781b      	ldrb	r3, [r3, #0]
 8001880:	461a      	mov	r2, r3
 8001882:	4b06      	ldr	r3, [pc, #24]	@ (800189c <HAL_IncTick+0x24>)
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	4413      	add	r3, r2
 8001888:	4a04      	ldr	r2, [pc, #16]	@ (800189c <HAL_IncTick+0x24>)
 800188a:	6013      	str	r3, [r2, #0]
}
 800188c:	bf00      	nop
 800188e:	46bd      	mov	sp, r7
 8001890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001894:	4770      	bx	lr
 8001896:	bf00      	nop
 8001898:	20000008 	.word	0x20000008
 800189c:	20000844 	.word	0x20000844

080018a0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80018a0:	b480      	push	{r7}
 80018a2:	af00      	add	r7, sp, #0
  return uwTick;
 80018a4:	4b03      	ldr	r3, [pc, #12]	@ (80018b4 <HAL_GetTick+0x14>)
 80018a6:	681b      	ldr	r3, [r3, #0]
}
 80018a8:	4618      	mov	r0, r3
 80018aa:	46bd      	mov	sp, r7
 80018ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b0:	4770      	bx	lr
 80018b2:	bf00      	nop
 80018b4:	20000844 	.word	0x20000844

080018b8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b084      	sub	sp, #16
 80018bc:	af00      	add	r7, sp, #0
 80018be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80018c0:	f7ff ffee 	bl	80018a0 <HAL_GetTick>
 80018c4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80018d0:	d005      	beq.n	80018de <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80018d2:	4b0a      	ldr	r3, [pc, #40]	@ (80018fc <HAL_Delay+0x44>)
 80018d4:	781b      	ldrb	r3, [r3, #0]
 80018d6:	461a      	mov	r2, r3
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	4413      	add	r3, r2
 80018dc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80018de:	bf00      	nop
 80018e0:	f7ff ffde 	bl	80018a0 <HAL_GetTick>
 80018e4:	4602      	mov	r2, r0
 80018e6:	68bb      	ldr	r3, [r7, #8]
 80018e8:	1ad3      	subs	r3, r2, r3
 80018ea:	68fa      	ldr	r2, [r7, #12]
 80018ec:	429a      	cmp	r2, r3
 80018ee:	d8f7      	bhi.n	80018e0 <HAL_Delay+0x28>
  {
  }
}
 80018f0:	bf00      	nop
 80018f2:	bf00      	nop
 80018f4:	3710      	adds	r7, #16
 80018f6:	46bd      	mov	sp, r7
 80018f8:	bd80      	pop	{r7, pc}
 80018fa:	bf00      	nop
 80018fc:	20000008 	.word	0x20000008

08001900 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001900:	b480      	push	{r7}
 8001902:	b085      	sub	sp, #20
 8001904:	af00      	add	r7, sp, #0
 8001906:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	f003 0307 	and.w	r3, r3, #7
 800190e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001910:	4b0c      	ldr	r3, [pc, #48]	@ (8001944 <__NVIC_SetPriorityGrouping+0x44>)
 8001912:	68db      	ldr	r3, [r3, #12]
 8001914:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001916:	68ba      	ldr	r2, [r7, #8]
 8001918:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800191c:	4013      	ands	r3, r2
 800191e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001924:	68bb      	ldr	r3, [r7, #8]
 8001926:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001928:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800192c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001930:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001932:	4a04      	ldr	r2, [pc, #16]	@ (8001944 <__NVIC_SetPriorityGrouping+0x44>)
 8001934:	68bb      	ldr	r3, [r7, #8]
 8001936:	60d3      	str	r3, [r2, #12]
}
 8001938:	bf00      	nop
 800193a:	3714      	adds	r7, #20
 800193c:	46bd      	mov	sp, r7
 800193e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001942:	4770      	bx	lr
 8001944:	e000ed00 	.word	0xe000ed00

08001948 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001948:	b480      	push	{r7}
 800194a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800194c:	4b04      	ldr	r3, [pc, #16]	@ (8001960 <__NVIC_GetPriorityGrouping+0x18>)
 800194e:	68db      	ldr	r3, [r3, #12]
 8001950:	0a1b      	lsrs	r3, r3, #8
 8001952:	f003 0307 	and.w	r3, r3, #7
}
 8001956:	4618      	mov	r0, r3
 8001958:	46bd      	mov	sp, r7
 800195a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195e:	4770      	bx	lr
 8001960:	e000ed00 	.word	0xe000ed00

08001964 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001964:	b480      	push	{r7}
 8001966:	b083      	sub	sp, #12
 8001968:	af00      	add	r7, sp, #0
 800196a:	4603      	mov	r3, r0
 800196c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800196e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001972:	2b00      	cmp	r3, #0
 8001974:	db0b      	blt.n	800198e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001976:	79fb      	ldrb	r3, [r7, #7]
 8001978:	f003 021f 	and.w	r2, r3, #31
 800197c:	4907      	ldr	r1, [pc, #28]	@ (800199c <__NVIC_EnableIRQ+0x38>)
 800197e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001982:	095b      	lsrs	r3, r3, #5
 8001984:	2001      	movs	r0, #1
 8001986:	fa00 f202 	lsl.w	r2, r0, r2
 800198a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800198e:	bf00      	nop
 8001990:	370c      	adds	r7, #12
 8001992:	46bd      	mov	sp, r7
 8001994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001998:	4770      	bx	lr
 800199a:	bf00      	nop
 800199c:	e000e100 	.word	0xe000e100

080019a0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80019a0:	b480      	push	{r7}
 80019a2:	b083      	sub	sp, #12
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	4603      	mov	r3, r0
 80019a8:	6039      	str	r1, [r7, #0]
 80019aa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	db0a      	blt.n	80019ca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019b4:	683b      	ldr	r3, [r7, #0]
 80019b6:	b2da      	uxtb	r2, r3
 80019b8:	490c      	ldr	r1, [pc, #48]	@ (80019ec <__NVIC_SetPriority+0x4c>)
 80019ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019be:	0112      	lsls	r2, r2, #4
 80019c0:	b2d2      	uxtb	r2, r2
 80019c2:	440b      	add	r3, r1
 80019c4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80019c8:	e00a      	b.n	80019e0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019ca:	683b      	ldr	r3, [r7, #0]
 80019cc:	b2da      	uxtb	r2, r3
 80019ce:	4908      	ldr	r1, [pc, #32]	@ (80019f0 <__NVIC_SetPriority+0x50>)
 80019d0:	79fb      	ldrb	r3, [r7, #7]
 80019d2:	f003 030f 	and.w	r3, r3, #15
 80019d6:	3b04      	subs	r3, #4
 80019d8:	0112      	lsls	r2, r2, #4
 80019da:	b2d2      	uxtb	r2, r2
 80019dc:	440b      	add	r3, r1
 80019de:	761a      	strb	r2, [r3, #24]
}
 80019e0:	bf00      	nop
 80019e2:	370c      	adds	r7, #12
 80019e4:	46bd      	mov	sp, r7
 80019e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ea:	4770      	bx	lr
 80019ec:	e000e100 	.word	0xe000e100
 80019f0:	e000ed00 	.word	0xe000ed00

080019f4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80019f4:	b480      	push	{r7}
 80019f6:	b089      	sub	sp, #36	@ 0x24
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	60f8      	str	r0, [r7, #12]
 80019fc:	60b9      	str	r1, [r7, #8]
 80019fe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	f003 0307 	and.w	r3, r3, #7
 8001a06:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a08:	69fb      	ldr	r3, [r7, #28]
 8001a0a:	f1c3 0307 	rsb	r3, r3, #7
 8001a0e:	2b04      	cmp	r3, #4
 8001a10:	bf28      	it	cs
 8001a12:	2304      	movcs	r3, #4
 8001a14:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a16:	69fb      	ldr	r3, [r7, #28]
 8001a18:	3304      	adds	r3, #4
 8001a1a:	2b06      	cmp	r3, #6
 8001a1c:	d902      	bls.n	8001a24 <NVIC_EncodePriority+0x30>
 8001a1e:	69fb      	ldr	r3, [r7, #28]
 8001a20:	3b03      	subs	r3, #3
 8001a22:	e000      	b.n	8001a26 <NVIC_EncodePriority+0x32>
 8001a24:	2300      	movs	r3, #0
 8001a26:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a28:	f04f 32ff 	mov.w	r2, #4294967295
 8001a2c:	69bb      	ldr	r3, [r7, #24]
 8001a2e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a32:	43da      	mvns	r2, r3
 8001a34:	68bb      	ldr	r3, [r7, #8]
 8001a36:	401a      	ands	r2, r3
 8001a38:	697b      	ldr	r3, [r7, #20]
 8001a3a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a3c:	f04f 31ff 	mov.w	r1, #4294967295
 8001a40:	697b      	ldr	r3, [r7, #20]
 8001a42:	fa01 f303 	lsl.w	r3, r1, r3
 8001a46:	43d9      	mvns	r1, r3
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a4c:	4313      	orrs	r3, r2
         );
}
 8001a4e:	4618      	mov	r0, r3
 8001a50:	3724      	adds	r7, #36	@ 0x24
 8001a52:	46bd      	mov	sp, r7
 8001a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a58:	4770      	bx	lr
	...

08001a5c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	b082      	sub	sp, #8
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	3b01      	subs	r3, #1
 8001a68:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001a6c:	d301      	bcc.n	8001a72 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a6e:	2301      	movs	r3, #1
 8001a70:	e00f      	b.n	8001a92 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a72:	4a0a      	ldr	r2, [pc, #40]	@ (8001a9c <SysTick_Config+0x40>)
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	3b01      	subs	r3, #1
 8001a78:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a7a:	210f      	movs	r1, #15
 8001a7c:	f04f 30ff 	mov.w	r0, #4294967295
 8001a80:	f7ff ff8e 	bl	80019a0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a84:	4b05      	ldr	r3, [pc, #20]	@ (8001a9c <SysTick_Config+0x40>)
 8001a86:	2200      	movs	r2, #0
 8001a88:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a8a:	4b04      	ldr	r3, [pc, #16]	@ (8001a9c <SysTick_Config+0x40>)
 8001a8c:	2207      	movs	r2, #7
 8001a8e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a90:	2300      	movs	r3, #0
}
 8001a92:	4618      	mov	r0, r3
 8001a94:	3708      	adds	r7, #8
 8001a96:	46bd      	mov	sp, r7
 8001a98:	bd80      	pop	{r7, pc}
 8001a9a:	bf00      	nop
 8001a9c:	e000e010 	.word	0xe000e010

08001aa0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	b082      	sub	sp, #8
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001aa8:	6878      	ldr	r0, [r7, #4]
 8001aaa:	f7ff ff29 	bl	8001900 <__NVIC_SetPriorityGrouping>
}
 8001aae:	bf00      	nop
 8001ab0:	3708      	adds	r7, #8
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	bd80      	pop	{r7, pc}

08001ab6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ab6:	b580      	push	{r7, lr}
 8001ab8:	b086      	sub	sp, #24
 8001aba:	af00      	add	r7, sp, #0
 8001abc:	4603      	mov	r3, r0
 8001abe:	60b9      	str	r1, [r7, #8]
 8001ac0:	607a      	str	r2, [r7, #4]
 8001ac2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001ac8:	f7ff ff3e 	bl	8001948 <__NVIC_GetPriorityGrouping>
 8001acc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001ace:	687a      	ldr	r2, [r7, #4]
 8001ad0:	68b9      	ldr	r1, [r7, #8]
 8001ad2:	6978      	ldr	r0, [r7, #20]
 8001ad4:	f7ff ff8e 	bl	80019f4 <NVIC_EncodePriority>
 8001ad8:	4602      	mov	r2, r0
 8001ada:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ade:	4611      	mov	r1, r2
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	f7ff ff5d 	bl	80019a0 <__NVIC_SetPriority>
}
 8001ae6:	bf00      	nop
 8001ae8:	3718      	adds	r7, #24
 8001aea:	46bd      	mov	sp, r7
 8001aec:	bd80      	pop	{r7, pc}

08001aee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001aee:	b580      	push	{r7, lr}
 8001af0:	b082      	sub	sp, #8
 8001af2:	af00      	add	r7, sp, #0
 8001af4:	4603      	mov	r3, r0
 8001af6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001af8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001afc:	4618      	mov	r0, r3
 8001afe:	f7ff ff31 	bl	8001964 <__NVIC_EnableIRQ>
}
 8001b02:	bf00      	nop
 8001b04:	3708      	adds	r7, #8
 8001b06:	46bd      	mov	sp, r7
 8001b08:	bd80      	pop	{r7, pc}

08001b0a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b0a:	b580      	push	{r7, lr}
 8001b0c:	b082      	sub	sp, #8
 8001b0e:	af00      	add	r7, sp, #0
 8001b10:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001b12:	6878      	ldr	r0, [r7, #4]
 8001b14:	f7ff ffa2 	bl	8001a5c <SysTick_Config>
 8001b18:	4603      	mov	r3, r0
}
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	3708      	adds	r7, #8
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	bd80      	pop	{r7, pc}
	...

08001b24 <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 8001b24:	b580      	push	{r7, lr}
 8001b26:	b082      	sub	sp, #8
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_channel == NULL)
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d101      	bne.n	8001b36 <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 8001b32:	2301      	movs	r3, #1
 8001b34:	e0ac      	b.n	8001c90 <HAL_DFSDM_ChannelInit+0x16c>
  assert_param(IS_DFSDM_CHANNEL_FILTER_OVS_RATIO(hdfsdm_channel->Init.Awd.Oversampling));
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));

  /* Check that channel has not been already initialized */
  if (a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	f000 f8b2 	bl	8001ca4 <DFSDM_GetChannelFromInstance>
 8001b40:	4603      	mov	r3, r0
 8001b42:	4a55      	ldr	r2, [pc, #340]	@ (8001c98 <HAL_DFSDM_ChannelInit+0x174>)
 8001b44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d001      	beq.n	8001b50 <HAL_DFSDM_ChannelInit+0x2c>
  {
    return HAL_ERROR;
 8001b4c:	2301      	movs	r3, #1
 8001b4e:	e09f      	b.n	8001c90 <HAL_DFSDM_ChannelInit+0x16c>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 8001b50:	6878      	ldr	r0, [r7, #4]
 8001b52:	f7ff fa1f 	bl	8000f94 <HAL_DFSDM_ChannelMspInit>
#endif

  /* Update the channel counter */
  v_dfsdm1ChannelCounter++;
 8001b56:	4b51      	ldr	r3, [pc, #324]	@ (8001c9c <HAL_DFSDM_ChannelInit+0x178>)
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	3301      	adds	r3, #1
 8001b5c:	4a4f      	ldr	r2, [pc, #316]	@ (8001c9c <HAL_DFSDM_ChannelInit+0x178>)
 8001b5e:	6013      	str	r3, [r2, #0]

  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if (v_dfsdm1ChannelCounter == 1U)
 8001b60:	4b4e      	ldr	r3, [pc, #312]	@ (8001c9c <HAL_DFSDM_ChannelInit+0x178>)
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	2b01      	cmp	r3, #1
 8001b66:	d125      	bne.n	8001bb4 <HAL_DFSDM_ChannelInit+0x90>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 8001b68:	4b4d      	ldr	r3, [pc, #308]	@ (8001ca0 <HAL_DFSDM_ChannelInit+0x17c>)
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	4a4c      	ldr	r2, [pc, #304]	@ (8001ca0 <HAL_DFSDM_ChannelInit+0x17c>)
 8001b6e:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8001b72:	6013      	str	r3, [r2, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 8001b74:	4b4a      	ldr	r3, [pc, #296]	@ (8001ca0 <HAL_DFSDM_ChannelInit+0x17c>)
 8001b76:	681a      	ldr	r2, [r3, #0]
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	689b      	ldr	r3, [r3, #8]
 8001b7c:	4948      	ldr	r1, [pc, #288]	@ (8001ca0 <HAL_DFSDM_ChannelInit+0x17c>)
 8001b7e:	4313      	orrs	r3, r2
 8001b80:	600b      	str	r3, [r1, #0]

    /* Reset clock divider */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 8001b82:	4b47      	ldr	r3, [pc, #284]	@ (8001ca0 <HAL_DFSDM_ChannelInit+0x17c>)
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	4a46      	ldr	r2, [pc, #280]	@ (8001ca0 <HAL_DFSDM_ChannelInit+0x17c>)
 8001b88:	f423 037f 	bic.w	r3, r3, #16711680	@ 0xff0000
 8001b8c:	6013      	str	r3, [r2, #0]
    if (hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	791b      	ldrb	r3, [r3, #4]
 8001b92:	2b01      	cmp	r3, #1
 8001b94:	d108      	bne.n	8001ba8 <HAL_DFSDM_ChannelInit+0x84>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t)((hdfsdm_channel->Init.OutputClock.Divider - 1U) <<
 8001b96:	4b42      	ldr	r3, [pc, #264]	@ (8001ca0 <HAL_DFSDM_ChannelInit+0x17c>)
 8001b98:	681a      	ldr	r2, [r3, #0]
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	68db      	ldr	r3, [r3, #12]
 8001b9e:	3b01      	subs	r3, #1
 8001ba0:	041b      	lsls	r3, r3, #16
 8001ba2:	493f      	ldr	r1, [pc, #252]	@ (8001ca0 <HAL_DFSDM_ChannelInit+0x17c>)
 8001ba4:	4313      	orrs	r3, r2
 8001ba6:	600b      	str	r3, [r1, #0]
                                             DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }

    /* enable the DFSDM global interface */
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 8001ba8:	4b3d      	ldr	r3, [pc, #244]	@ (8001ca0 <HAL_DFSDM_ChannelInit+0x17c>)
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	4a3c      	ldr	r2, [pc, #240]	@ (8001ca0 <HAL_DFSDM_ChannelInit+0x17c>)
 8001bae:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8001bb2:	6013      	str	r3, [r2, #0]
  }

  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	681a      	ldr	r2, [r3, #0]
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	f422 4271 	bic.w	r2, r2, #61696	@ 0xf100
 8001bc2:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	6819      	ldr	r1, [r3, #0]
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8001bd2:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8001bd8:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	430a      	orrs	r2, r1
 8001be0:	601a      	str	r2, [r3, #0]

  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	681a      	ldr	r2, [r3, #0]
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	f022 020f 	bic.w	r2, r2, #15
 8001bf0:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	6819      	ldr	r1, [r3, #0]
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8001c00:	431a      	orrs	r2, r3
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	430a      	orrs	r2, r1
 8001c08:	601a      	str	r2, [r3, #0]

  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	689a      	ldr	r2, [r3, #8]
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	f422 025f 	bic.w	r2, r2, #14614528	@ 0xdf0000
 8001c18:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	6899      	ldr	r1, [r3, #8]
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c28:	3b01      	subs	r3, #1
 8001c2a:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8001c2c:	431a      	orrs	r2, r3
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	430a      	orrs	r2, r1
 8001c34:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	685a      	ldr	r2, [r3, #4]
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	f002 0207 	and.w	r2, r2, #7
 8001c44:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	6859      	ldr	r1, [r3, #4]
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c50:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c56:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8001c58:	431a      	orrs	r2, r3
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	430a      	orrs	r2, r1
 8001c60:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	681a      	ldr	r2, [r3, #0]
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001c70:	601a      	str	r2, [r3, #0]

  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	2201      	movs	r2, #1
 8001c76:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	4618      	mov	r0, r3
 8001c80:	f000 f810 	bl	8001ca4 <DFSDM_GetChannelFromInstance>
 8001c84:	4602      	mov	r2, r0
 8001c86:	4904      	ldr	r1, [pc, #16]	@ (8001c98 <HAL_DFSDM_ChannelInit+0x174>)
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

  return HAL_OK;
 8001c8e:	2300      	movs	r3, #0
}
 8001c90:	4618      	mov	r0, r3
 8001c92:	3708      	adds	r7, #8
 8001c94:	46bd      	mov	sp, r7
 8001c96:	bd80      	pop	{r7, pc}
 8001c98:	2000084c 	.word	0x2000084c
 8001c9c:	20000848 	.word	0x20000848
 8001ca0:	40016000 	.word	0x40016000

08001ca4 <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef *Instance)
{
 8001ca4:	b480      	push	{r7}
 8001ca6:	b085      	sub	sp, #20
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	6078      	str	r0, [r7, #4]
  uint32_t channel;

  /* Get channel from instance */
  if (Instance == DFSDM1_Channel0)
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	4a1c      	ldr	r2, [pc, #112]	@ (8001d20 <DFSDM_GetChannelFromInstance+0x7c>)
 8001cb0:	4293      	cmp	r3, r2
 8001cb2:	d102      	bne.n	8001cba <DFSDM_GetChannelFromInstance+0x16>
  {
    channel = 0;
 8001cb4:	2300      	movs	r3, #0
 8001cb6:	60fb      	str	r3, [r7, #12]
 8001cb8:	e02b      	b.n	8001d12 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel1)
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	4a19      	ldr	r2, [pc, #100]	@ (8001d24 <DFSDM_GetChannelFromInstance+0x80>)
 8001cbe:	4293      	cmp	r3, r2
 8001cc0:	d102      	bne.n	8001cc8 <DFSDM_GetChannelFromInstance+0x24>
  {
    channel = 1;
 8001cc2:	2301      	movs	r3, #1
 8001cc4:	60fb      	str	r3, [r7, #12]
 8001cc6:	e024      	b.n	8001d12 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel2)
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	4a17      	ldr	r2, [pc, #92]	@ (8001d28 <DFSDM_GetChannelFromInstance+0x84>)
 8001ccc:	4293      	cmp	r3, r2
 8001cce:	d102      	bne.n	8001cd6 <DFSDM_GetChannelFromInstance+0x32>
  {
    channel = 2;
 8001cd0:	2302      	movs	r3, #2
 8001cd2:	60fb      	str	r3, [r7, #12]
 8001cd4:	e01d      	b.n	8001d12 <DFSDM_GetChannelFromInstance+0x6e>
  }
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else if (Instance == DFSDM1_Channel4)
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	4a14      	ldr	r2, [pc, #80]	@ (8001d2c <DFSDM_GetChannelFromInstance+0x88>)
 8001cda:	4293      	cmp	r3, r2
 8001cdc:	d102      	bne.n	8001ce4 <DFSDM_GetChannelFromInstance+0x40>
  {
    channel = 4;
 8001cde:	2304      	movs	r3, #4
 8001ce0:	60fb      	str	r3, [r7, #12]
 8001ce2:	e016      	b.n	8001d12 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel5)
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	4a12      	ldr	r2, [pc, #72]	@ (8001d30 <DFSDM_GetChannelFromInstance+0x8c>)
 8001ce8:	4293      	cmp	r3, r2
 8001cea:	d102      	bne.n	8001cf2 <DFSDM_GetChannelFromInstance+0x4e>
  {
    channel = 5;
 8001cec:	2305      	movs	r3, #5
 8001cee:	60fb      	str	r3, [r7, #12]
 8001cf0:	e00f      	b.n	8001d12 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel6)
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	4a0f      	ldr	r2, [pc, #60]	@ (8001d34 <DFSDM_GetChannelFromInstance+0x90>)
 8001cf6:	4293      	cmp	r3, r2
 8001cf8:	d102      	bne.n	8001d00 <DFSDM_GetChannelFromInstance+0x5c>
  {
    channel = 6;
 8001cfa:	2306      	movs	r3, #6
 8001cfc:	60fb      	str	r3, [r7, #12]
 8001cfe:	e008      	b.n	8001d12 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel7)
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	4a0d      	ldr	r2, [pc, #52]	@ (8001d38 <DFSDM_GetChannelFromInstance+0x94>)
 8001d04:	4293      	cmp	r3, r2
 8001d06:	d102      	bne.n	8001d0e <DFSDM_GetChannelFromInstance+0x6a>
  {
    channel = 7;
 8001d08:	2307      	movs	r3, #7
 8001d0a:	60fb      	str	r3, [r7, #12]
 8001d0c:	e001      	b.n	8001d12 <DFSDM_GetChannelFromInstance+0x6e>
  }
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx || STM32L496xx || STM32L4A6xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else /* DFSDM1_Channel3 */
  {
    channel = 3;
 8001d0e:	2303      	movs	r3, #3
 8001d10:	60fb      	str	r3, [r7, #12]
  }

  return channel;
 8001d12:	68fb      	ldr	r3, [r7, #12]
}
 8001d14:	4618      	mov	r0, r3
 8001d16:	3714      	adds	r7, #20
 8001d18:	46bd      	mov	sp, r7
 8001d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1e:	4770      	bx	lr
 8001d20:	40016000 	.word	0x40016000
 8001d24:	40016020 	.word	0x40016020
 8001d28:	40016040 	.word	0x40016040
 8001d2c:	40016080 	.word	0x40016080
 8001d30:	400160a0 	.word	0x400160a0
 8001d34:	400160c0 	.word	0x400160c0
 8001d38:	400160e0 	.word	0x400160e0

08001d3c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d3c:	b480      	push	{r7}
 8001d3e:	b087      	sub	sp, #28
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	6078      	str	r0, [r7, #4]
 8001d44:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001d46:	2300      	movs	r3, #0
 8001d48:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d4a:	e17f      	b.n	800204c <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001d4c:	683b      	ldr	r3, [r7, #0]
 8001d4e:	681a      	ldr	r2, [r3, #0]
 8001d50:	2101      	movs	r1, #1
 8001d52:	697b      	ldr	r3, [r7, #20]
 8001d54:	fa01 f303 	lsl.w	r3, r1, r3
 8001d58:	4013      	ands	r3, r2
 8001d5a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	f000 8171 	beq.w	8002046 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001d64:	683b      	ldr	r3, [r7, #0]
 8001d66:	685b      	ldr	r3, [r3, #4]
 8001d68:	f003 0303 	and.w	r3, r3, #3
 8001d6c:	2b01      	cmp	r3, #1
 8001d6e:	d005      	beq.n	8001d7c <HAL_GPIO_Init+0x40>
 8001d70:	683b      	ldr	r3, [r7, #0]
 8001d72:	685b      	ldr	r3, [r3, #4]
 8001d74:	f003 0303 	and.w	r3, r3, #3
 8001d78:	2b02      	cmp	r3, #2
 8001d7a:	d130      	bne.n	8001dde <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	689b      	ldr	r3, [r3, #8]
 8001d80:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001d82:	697b      	ldr	r3, [r7, #20]
 8001d84:	005b      	lsls	r3, r3, #1
 8001d86:	2203      	movs	r2, #3
 8001d88:	fa02 f303 	lsl.w	r3, r2, r3
 8001d8c:	43db      	mvns	r3, r3
 8001d8e:	693a      	ldr	r2, [r7, #16]
 8001d90:	4013      	ands	r3, r2
 8001d92:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001d94:	683b      	ldr	r3, [r7, #0]
 8001d96:	68da      	ldr	r2, [r3, #12]
 8001d98:	697b      	ldr	r3, [r7, #20]
 8001d9a:	005b      	lsls	r3, r3, #1
 8001d9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001da0:	693a      	ldr	r2, [r7, #16]
 8001da2:	4313      	orrs	r3, r2
 8001da4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	693a      	ldr	r2, [r7, #16]
 8001daa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	685b      	ldr	r3, [r3, #4]
 8001db0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001db2:	2201      	movs	r2, #1
 8001db4:	697b      	ldr	r3, [r7, #20]
 8001db6:	fa02 f303 	lsl.w	r3, r2, r3
 8001dba:	43db      	mvns	r3, r3
 8001dbc:	693a      	ldr	r2, [r7, #16]
 8001dbe:	4013      	ands	r3, r2
 8001dc0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001dc2:	683b      	ldr	r3, [r7, #0]
 8001dc4:	685b      	ldr	r3, [r3, #4]
 8001dc6:	091b      	lsrs	r3, r3, #4
 8001dc8:	f003 0201 	and.w	r2, r3, #1
 8001dcc:	697b      	ldr	r3, [r7, #20]
 8001dce:	fa02 f303 	lsl.w	r3, r2, r3
 8001dd2:	693a      	ldr	r2, [r7, #16]
 8001dd4:	4313      	orrs	r3, r2
 8001dd6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	693a      	ldr	r2, [r7, #16]
 8001ddc:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001dde:	683b      	ldr	r3, [r7, #0]
 8001de0:	685b      	ldr	r3, [r3, #4]
 8001de2:	f003 0303 	and.w	r3, r3, #3
 8001de6:	2b03      	cmp	r3, #3
 8001de8:	d118      	bne.n	8001e1c <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001dee:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001df0:	2201      	movs	r2, #1
 8001df2:	697b      	ldr	r3, [r7, #20]
 8001df4:	fa02 f303 	lsl.w	r3, r2, r3
 8001df8:	43db      	mvns	r3, r3
 8001dfa:	693a      	ldr	r2, [r7, #16]
 8001dfc:	4013      	ands	r3, r2
 8001dfe:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8001e00:	683b      	ldr	r3, [r7, #0]
 8001e02:	685b      	ldr	r3, [r3, #4]
 8001e04:	08db      	lsrs	r3, r3, #3
 8001e06:	f003 0201 	and.w	r2, r3, #1
 8001e0a:	697b      	ldr	r3, [r7, #20]
 8001e0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e10:	693a      	ldr	r2, [r7, #16]
 8001e12:	4313      	orrs	r3, r2
 8001e14:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	693a      	ldr	r2, [r7, #16]
 8001e1a:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001e1c:	683b      	ldr	r3, [r7, #0]
 8001e1e:	685b      	ldr	r3, [r3, #4]
 8001e20:	f003 0303 	and.w	r3, r3, #3
 8001e24:	2b03      	cmp	r3, #3
 8001e26:	d017      	beq.n	8001e58 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	68db      	ldr	r3, [r3, #12]
 8001e2c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001e2e:	697b      	ldr	r3, [r7, #20]
 8001e30:	005b      	lsls	r3, r3, #1
 8001e32:	2203      	movs	r2, #3
 8001e34:	fa02 f303 	lsl.w	r3, r2, r3
 8001e38:	43db      	mvns	r3, r3
 8001e3a:	693a      	ldr	r2, [r7, #16]
 8001e3c:	4013      	ands	r3, r2
 8001e3e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001e40:	683b      	ldr	r3, [r7, #0]
 8001e42:	689a      	ldr	r2, [r3, #8]
 8001e44:	697b      	ldr	r3, [r7, #20]
 8001e46:	005b      	lsls	r3, r3, #1
 8001e48:	fa02 f303 	lsl.w	r3, r2, r3
 8001e4c:	693a      	ldr	r2, [r7, #16]
 8001e4e:	4313      	orrs	r3, r2
 8001e50:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	693a      	ldr	r2, [r7, #16]
 8001e56:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e58:	683b      	ldr	r3, [r7, #0]
 8001e5a:	685b      	ldr	r3, [r3, #4]
 8001e5c:	f003 0303 	and.w	r3, r3, #3
 8001e60:	2b02      	cmp	r3, #2
 8001e62:	d123      	bne.n	8001eac <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001e64:	697b      	ldr	r3, [r7, #20]
 8001e66:	08da      	lsrs	r2, r3, #3
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	3208      	adds	r2, #8
 8001e6c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e70:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001e72:	697b      	ldr	r3, [r7, #20]
 8001e74:	f003 0307 	and.w	r3, r3, #7
 8001e78:	009b      	lsls	r3, r3, #2
 8001e7a:	220f      	movs	r2, #15
 8001e7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e80:	43db      	mvns	r3, r3
 8001e82:	693a      	ldr	r2, [r7, #16]
 8001e84:	4013      	ands	r3, r2
 8001e86:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001e88:	683b      	ldr	r3, [r7, #0]
 8001e8a:	691a      	ldr	r2, [r3, #16]
 8001e8c:	697b      	ldr	r3, [r7, #20]
 8001e8e:	f003 0307 	and.w	r3, r3, #7
 8001e92:	009b      	lsls	r3, r3, #2
 8001e94:	fa02 f303 	lsl.w	r3, r2, r3
 8001e98:	693a      	ldr	r2, [r7, #16]
 8001e9a:	4313      	orrs	r3, r2
 8001e9c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001e9e:	697b      	ldr	r3, [r7, #20]
 8001ea0:	08da      	lsrs	r2, r3, #3
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	3208      	adds	r2, #8
 8001ea6:	6939      	ldr	r1, [r7, #16]
 8001ea8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001eb2:	697b      	ldr	r3, [r7, #20]
 8001eb4:	005b      	lsls	r3, r3, #1
 8001eb6:	2203      	movs	r2, #3
 8001eb8:	fa02 f303 	lsl.w	r3, r2, r3
 8001ebc:	43db      	mvns	r3, r3
 8001ebe:	693a      	ldr	r2, [r7, #16]
 8001ec0:	4013      	ands	r3, r2
 8001ec2:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001ec4:	683b      	ldr	r3, [r7, #0]
 8001ec6:	685b      	ldr	r3, [r3, #4]
 8001ec8:	f003 0203 	and.w	r2, r3, #3
 8001ecc:	697b      	ldr	r3, [r7, #20]
 8001ece:	005b      	lsls	r3, r3, #1
 8001ed0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ed4:	693a      	ldr	r2, [r7, #16]
 8001ed6:	4313      	orrs	r3, r2
 8001ed8:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	693a      	ldr	r2, [r7, #16]
 8001ede:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001ee0:	683b      	ldr	r3, [r7, #0]
 8001ee2:	685b      	ldr	r3, [r3, #4]
 8001ee4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	f000 80ac 	beq.w	8002046 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001eee:	4b5f      	ldr	r3, [pc, #380]	@ (800206c <HAL_GPIO_Init+0x330>)
 8001ef0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001ef2:	4a5e      	ldr	r2, [pc, #376]	@ (800206c <HAL_GPIO_Init+0x330>)
 8001ef4:	f043 0301 	orr.w	r3, r3, #1
 8001ef8:	6613      	str	r3, [r2, #96]	@ 0x60
 8001efa:	4b5c      	ldr	r3, [pc, #368]	@ (800206c <HAL_GPIO_Init+0x330>)
 8001efc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001efe:	f003 0301 	and.w	r3, r3, #1
 8001f02:	60bb      	str	r3, [r7, #8]
 8001f04:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001f06:	4a5a      	ldr	r2, [pc, #360]	@ (8002070 <HAL_GPIO_Init+0x334>)
 8001f08:	697b      	ldr	r3, [r7, #20]
 8001f0a:	089b      	lsrs	r3, r3, #2
 8001f0c:	3302      	adds	r3, #2
 8001f0e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f12:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001f14:	697b      	ldr	r3, [r7, #20]
 8001f16:	f003 0303 	and.w	r3, r3, #3
 8001f1a:	009b      	lsls	r3, r3, #2
 8001f1c:	220f      	movs	r2, #15
 8001f1e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f22:	43db      	mvns	r3, r3
 8001f24:	693a      	ldr	r2, [r7, #16]
 8001f26:	4013      	ands	r3, r2
 8001f28:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001f30:	d025      	beq.n	8001f7e <HAL_GPIO_Init+0x242>
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	4a4f      	ldr	r2, [pc, #316]	@ (8002074 <HAL_GPIO_Init+0x338>)
 8001f36:	4293      	cmp	r3, r2
 8001f38:	d01f      	beq.n	8001f7a <HAL_GPIO_Init+0x23e>
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	4a4e      	ldr	r2, [pc, #312]	@ (8002078 <HAL_GPIO_Init+0x33c>)
 8001f3e:	4293      	cmp	r3, r2
 8001f40:	d019      	beq.n	8001f76 <HAL_GPIO_Init+0x23a>
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	4a4d      	ldr	r2, [pc, #308]	@ (800207c <HAL_GPIO_Init+0x340>)
 8001f46:	4293      	cmp	r3, r2
 8001f48:	d013      	beq.n	8001f72 <HAL_GPIO_Init+0x236>
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	4a4c      	ldr	r2, [pc, #304]	@ (8002080 <HAL_GPIO_Init+0x344>)
 8001f4e:	4293      	cmp	r3, r2
 8001f50:	d00d      	beq.n	8001f6e <HAL_GPIO_Init+0x232>
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	4a4b      	ldr	r2, [pc, #300]	@ (8002084 <HAL_GPIO_Init+0x348>)
 8001f56:	4293      	cmp	r3, r2
 8001f58:	d007      	beq.n	8001f6a <HAL_GPIO_Init+0x22e>
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	4a4a      	ldr	r2, [pc, #296]	@ (8002088 <HAL_GPIO_Init+0x34c>)
 8001f5e:	4293      	cmp	r3, r2
 8001f60:	d101      	bne.n	8001f66 <HAL_GPIO_Init+0x22a>
 8001f62:	2306      	movs	r3, #6
 8001f64:	e00c      	b.n	8001f80 <HAL_GPIO_Init+0x244>
 8001f66:	2307      	movs	r3, #7
 8001f68:	e00a      	b.n	8001f80 <HAL_GPIO_Init+0x244>
 8001f6a:	2305      	movs	r3, #5
 8001f6c:	e008      	b.n	8001f80 <HAL_GPIO_Init+0x244>
 8001f6e:	2304      	movs	r3, #4
 8001f70:	e006      	b.n	8001f80 <HAL_GPIO_Init+0x244>
 8001f72:	2303      	movs	r3, #3
 8001f74:	e004      	b.n	8001f80 <HAL_GPIO_Init+0x244>
 8001f76:	2302      	movs	r3, #2
 8001f78:	e002      	b.n	8001f80 <HAL_GPIO_Init+0x244>
 8001f7a:	2301      	movs	r3, #1
 8001f7c:	e000      	b.n	8001f80 <HAL_GPIO_Init+0x244>
 8001f7e:	2300      	movs	r3, #0
 8001f80:	697a      	ldr	r2, [r7, #20]
 8001f82:	f002 0203 	and.w	r2, r2, #3
 8001f86:	0092      	lsls	r2, r2, #2
 8001f88:	4093      	lsls	r3, r2
 8001f8a:	693a      	ldr	r2, [r7, #16]
 8001f8c:	4313      	orrs	r3, r2
 8001f8e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001f90:	4937      	ldr	r1, [pc, #220]	@ (8002070 <HAL_GPIO_Init+0x334>)
 8001f92:	697b      	ldr	r3, [r7, #20]
 8001f94:	089b      	lsrs	r3, r3, #2
 8001f96:	3302      	adds	r3, #2
 8001f98:	693a      	ldr	r2, [r7, #16]
 8001f9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001f9e:	4b3b      	ldr	r3, [pc, #236]	@ (800208c <HAL_GPIO_Init+0x350>)
 8001fa0:	689b      	ldr	r3, [r3, #8]
 8001fa2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	43db      	mvns	r3, r3
 8001fa8:	693a      	ldr	r2, [r7, #16]
 8001faa:	4013      	ands	r3, r2
 8001fac:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001fae:	683b      	ldr	r3, [r7, #0]
 8001fb0:	685b      	ldr	r3, [r3, #4]
 8001fb2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d003      	beq.n	8001fc2 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001fba:	693a      	ldr	r2, [r7, #16]
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	4313      	orrs	r3, r2
 8001fc0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001fc2:	4a32      	ldr	r2, [pc, #200]	@ (800208c <HAL_GPIO_Init+0x350>)
 8001fc4:	693b      	ldr	r3, [r7, #16]
 8001fc6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001fc8:	4b30      	ldr	r3, [pc, #192]	@ (800208c <HAL_GPIO_Init+0x350>)
 8001fca:	68db      	ldr	r3, [r3, #12]
 8001fcc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	43db      	mvns	r3, r3
 8001fd2:	693a      	ldr	r2, [r7, #16]
 8001fd4:	4013      	ands	r3, r2
 8001fd6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001fd8:	683b      	ldr	r3, [r7, #0]
 8001fda:	685b      	ldr	r3, [r3, #4]
 8001fdc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d003      	beq.n	8001fec <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001fe4:	693a      	ldr	r2, [r7, #16]
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	4313      	orrs	r3, r2
 8001fea:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001fec:	4a27      	ldr	r2, [pc, #156]	@ (800208c <HAL_GPIO_Init+0x350>)
 8001fee:	693b      	ldr	r3, [r7, #16]
 8001ff0:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001ff2:	4b26      	ldr	r3, [pc, #152]	@ (800208c <HAL_GPIO_Init+0x350>)
 8001ff4:	685b      	ldr	r3, [r3, #4]
 8001ff6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	43db      	mvns	r3, r3
 8001ffc:	693a      	ldr	r2, [r7, #16]
 8001ffe:	4013      	ands	r3, r2
 8002000:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002002:	683b      	ldr	r3, [r7, #0]
 8002004:	685b      	ldr	r3, [r3, #4]
 8002006:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800200a:	2b00      	cmp	r3, #0
 800200c:	d003      	beq.n	8002016 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800200e:	693a      	ldr	r2, [r7, #16]
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	4313      	orrs	r3, r2
 8002014:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002016:	4a1d      	ldr	r2, [pc, #116]	@ (800208c <HAL_GPIO_Init+0x350>)
 8002018:	693b      	ldr	r3, [r7, #16]
 800201a:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800201c:	4b1b      	ldr	r3, [pc, #108]	@ (800208c <HAL_GPIO_Init+0x350>)
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	43db      	mvns	r3, r3
 8002026:	693a      	ldr	r2, [r7, #16]
 8002028:	4013      	ands	r3, r2
 800202a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800202c:	683b      	ldr	r3, [r7, #0]
 800202e:	685b      	ldr	r3, [r3, #4]
 8002030:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002034:	2b00      	cmp	r3, #0
 8002036:	d003      	beq.n	8002040 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8002038:	693a      	ldr	r2, [r7, #16]
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	4313      	orrs	r3, r2
 800203e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002040:	4a12      	ldr	r2, [pc, #72]	@ (800208c <HAL_GPIO_Init+0x350>)
 8002042:	693b      	ldr	r3, [r7, #16]
 8002044:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002046:	697b      	ldr	r3, [r7, #20]
 8002048:	3301      	adds	r3, #1
 800204a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800204c:	683b      	ldr	r3, [r7, #0]
 800204e:	681a      	ldr	r2, [r3, #0]
 8002050:	697b      	ldr	r3, [r7, #20]
 8002052:	fa22 f303 	lsr.w	r3, r2, r3
 8002056:	2b00      	cmp	r3, #0
 8002058:	f47f ae78 	bne.w	8001d4c <HAL_GPIO_Init+0x10>
  }
}
 800205c:	bf00      	nop
 800205e:	bf00      	nop
 8002060:	371c      	adds	r7, #28
 8002062:	46bd      	mov	sp, r7
 8002064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002068:	4770      	bx	lr
 800206a:	bf00      	nop
 800206c:	40021000 	.word	0x40021000
 8002070:	40010000 	.word	0x40010000
 8002074:	48000400 	.word	0x48000400
 8002078:	48000800 	.word	0x48000800
 800207c:	48000c00 	.word	0x48000c00
 8002080:	48001000 	.word	0x48001000
 8002084:	48001400 	.word	0x48001400
 8002088:	48001800 	.word	0x48001800
 800208c:	40010400 	.word	0x40010400

08002090 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002090:	b480      	push	{r7}
 8002092:	b083      	sub	sp, #12
 8002094:	af00      	add	r7, sp, #0
 8002096:	6078      	str	r0, [r7, #4]
 8002098:	460b      	mov	r3, r1
 800209a:	807b      	strh	r3, [r7, #2]
 800209c:	4613      	mov	r3, r2
 800209e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80020a0:	787b      	ldrb	r3, [r7, #1]
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d003      	beq.n	80020ae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80020a6:	887a      	ldrh	r2, [r7, #2]
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80020ac:	e002      	b.n	80020b4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80020ae:	887a      	ldrh	r2, [r7, #2]
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80020b4:	bf00      	nop
 80020b6:	370c      	adds	r7, #12
 80020b8:	46bd      	mov	sp, r7
 80020ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020be:	4770      	bx	lr

080020c0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80020c0:	b580      	push	{r7, lr}
 80020c2:	b082      	sub	sp, #8
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	4603      	mov	r3, r0
 80020c8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80020ca:	4b08      	ldr	r3, [pc, #32]	@ (80020ec <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80020cc:	695a      	ldr	r2, [r3, #20]
 80020ce:	88fb      	ldrh	r3, [r7, #6]
 80020d0:	4013      	ands	r3, r2
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d006      	beq.n	80020e4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80020d6:	4a05      	ldr	r2, [pc, #20]	@ (80020ec <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80020d8:	88fb      	ldrh	r3, [r7, #6]
 80020da:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80020dc:	88fb      	ldrh	r3, [r7, #6]
 80020de:	4618      	mov	r0, r3
 80020e0:	f000 f806 	bl	80020f0 <HAL_GPIO_EXTI_Callback>
  }
}
 80020e4:	bf00      	nop
 80020e6:	3708      	adds	r7, #8
 80020e8:	46bd      	mov	sp, r7
 80020ea:	bd80      	pop	{r7, pc}
 80020ec:	40010400 	.word	0x40010400

080020f0 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80020f0:	b480      	push	{r7}
 80020f2:	b083      	sub	sp, #12
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	4603      	mov	r3, r0
 80020f8:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80020fa:	bf00      	nop
 80020fc:	370c      	adds	r7, #12
 80020fe:	46bd      	mov	sp, r7
 8002100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002104:	4770      	bx	lr

08002106 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002106:	b580      	push	{r7, lr}
 8002108:	b082      	sub	sp, #8
 800210a:	af00      	add	r7, sp, #0
 800210c:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	2b00      	cmp	r3, #0
 8002112:	d101      	bne.n	8002118 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002114:	2301      	movs	r3, #1
 8002116:	e08d      	b.n	8002234 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800211e:	b2db      	uxtb	r3, r3
 8002120:	2b00      	cmp	r3, #0
 8002122:	d106      	bne.n	8002132 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	2200      	movs	r2, #0
 8002128:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800212c:	6878      	ldr	r0, [r7, #4]
 800212e:	f7fe ff95 	bl	800105c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	2224      	movs	r2, #36	@ 0x24
 8002136:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	681a      	ldr	r2, [r3, #0]
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	f022 0201 	bic.w	r2, r2, #1
 8002148:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	685a      	ldr	r2, [r3, #4]
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002156:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	689a      	ldr	r2, [r3, #8]
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002166:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	68db      	ldr	r3, [r3, #12]
 800216c:	2b01      	cmp	r3, #1
 800216e:	d107      	bne.n	8002180 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	689a      	ldr	r2, [r3, #8]
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800217c:	609a      	str	r2, [r3, #8]
 800217e:	e006      	b.n	800218e <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	689a      	ldr	r2, [r3, #8]
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800218c:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	68db      	ldr	r3, [r3, #12]
 8002192:	2b02      	cmp	r3, #2
 8002194:	d108      	bne.n	80021a8 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	685a      	ldr	r2, [r3, #4]
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80021a4:	605a      	str	r2, [r3, #4]
 80021a6:	e007      	b.n	80021b8 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	685a      	ldr	r2, [r3, #4]
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80021b6:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	685b      	ldr	r3, [r3, #4]
 80021be:	687a      	ldr	r2, [r7, #4]
 80021c0:	6812      	ldr	r2, [r2, #0]
 80021c2:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80021c6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80021ca:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	68da      	ldr	r2, [r3, #12]
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80021da:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	691a      	ldr	r2, [r3, #16]
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	695b      	ldr	r3, [r3, #20]
 80021e4:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	699b      	ldr	r3, [r3, #24]
 80021ec:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	430a      	orrs	r2, r1
 80021f4:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	69d9      	ldr	r1, [r3, #28]
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	6a1a      	ldr	r2, [r3, #32]
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	430a      	orrs	r2, r1
 8002204:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	681a      	ldr	r2, [r3, #0]
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	f042 0201 	orr.w	r2, r2, #1
 8002214:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	2200      	movs	r2, #0
 800221a:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	2220      	movs	r2, #32
 8002220:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	2200      	movs	r2, #0
 8002228:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	2200      	movs	r2, #0
 800222e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8002232:	2300      	movs	r3, #0
}
 8002234:	4618      	mov	r0, r3
 8002236:	3708      	adds	r7, #8
 8002238:	46bd      	mov	sp, r7
 800223a:	bd80      	pop	{r7, pc}

0800223c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800223c:	b480      	push	{r7}
 800223e:	b083      	sub	sp, #12
 8002240:	af00      	add	r7, sp, #0
 8002242:	6078      	str	r0, [r7, #4]
 8002244:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800224c:	b2db      	uxtb	r3, r3
 800224e:	2b20      	cmp	r3, #32
 8002250:	d138      	bne.n	80022c4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002258:	2b01      	cmp	r3, #1
 800225a:	d101      	bne.n	8002260 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800225c:	2302      	movs	r3, #2
 800225e:	e032      	b.n	80022c6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	2201      	movs	r2, #1
 8002264:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	2224      	movs	r2, #36	@ 0x24
 800226c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	681a      	ldr	r2, [r3, #0]
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f022 0201 	bic.w	r2, r2, #1
 800227e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	681a      	ldr	r2, [r3, #0]
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800228e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	6819      	ldr	r1, [r3, #0]
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	683a      	ldr	r2, [r7, #0]
 800229c:	430a      	orrs	r2, r1
 800229e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	681a      	ldr	r2, [r3, #0]
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	f042 0201 	orr.w	r2, r2, #1
 80022ae:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	2220      	movs	r2, #32
 80022b4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	2200      	movs	r2, #0
 80022bc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80022c0:	2300      	movs	r3, #0
 80022c2:	e000      	b.n	80022c6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80022c4:	2302      	movs	r3, #2
  }
}
 80022c6:	4618      	mov	r0, r3
 80022c8:	370c      	adds	r7, #12
 80022ca:	46bd      	mov	sp, r7
 80022cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d0:	4770      	bx	lr

080022d2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80022d2:	b480      	push	{r7}
 80022d4:	b085      	sub	sp, #20
 80022d6:	af00      	add	r7, sp, #0
 80022d8:	6078      	str	r0, [r7, #4]
 80022da:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80022e2:	b2db      	uxtb	r3, r3
 80022e4:	2b20      	cmp	r3, #32
 80022e6:	d139      	bne.n	800235c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80022ee:	2b01      	cmp	r3, #1
 80022f0:	d101      	bne.n	80022f6 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80022f2:	2302      	movs	r3, #2
 80022f4:	e033      	b.n	800235e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	2201      	movs	r2, #1
 80022fa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	2224      	movs	r2, #36	@ 0x24
 8002302:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	681a      	ldr	r2, [r3, #0]
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	f022 0201 	bic.w	r2, r2, #1
 8002314:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8002324:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002326:	683b      	ldr	r3, [r7, #0]
 8002328:	021b      	lsls	r3, r3, #8
 800232a:	68fa      	ldr	r2, [r7, #12]
 800232c:	4313      	orrs	r3, r2
 800232e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	68fa      	ldr	r2, [r7, #12]
 8002336:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	681a      	ldr	r2, [r3, #0]
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	f042 0201 	orr.w	r2, r2, #1
 8002346:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	2220      	movs	r2, #32
 800234c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	2200      	movs	r2, #0
 8002354:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002358:	2300      	movs	r3, #0
 800235a:	e000      	b.n	800235e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800235c:	2302      	movs	r3, #2
  }
}
 800235e:	4618      	mov	r0, r3
 8002360:	3714      	adds	r7, #20
 8002362:	46bd      	mov	sp, r7
 8002364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002368:	4770      	bx	lr

0800236a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800236a:	b580      	push	{r7, lr}
 800236c:	b086      	sub	sp, #24
 800236e:	af02      	add	r7, sp, #8
 8002370:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	2b00      	cmp	r3, #0
 8002376:	d101      	bne.n	800237c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002378:	2301      	movs	r3, #1
 800237a:	e101      	b.n	8002580 <HAL_PCD_Init+0x216>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8002382:	b2db      	uxtb	r3, r3
 8002384:	2b00      	cmp	r3, #0
 8002386:	d106      	bne.n	8002396 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	2200      	movs	r2, #0
 800238c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002390:	6878      	ldr	r0, [r7, #4]
 8002392:	f7ff f8d3 	bl	800153c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	2203      	movs	r2, #3
 800239a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Disable DMA mode for FS instance */
  hpcd->Init.dma_enable = 0U;
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	2200      	movs	r2, #0
 80023a2:	719a      	strb	r2, [r3, #6]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	4618      	mov	r0, r3
 80023aa:	f004 f863 	bl	8006474 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	6818      	ldr	r0, [r3, #0]
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	7c1a      	ldrb	r2, [r3, #16]
 80023b6:	f88d 2000 	strb.w	r2, [sp]
 80023ba:	3304      	adds	r3, #4
 80023bc:	cb0e      	ldmia	r3, {r1, r2, r3}
 80023be:	f004 f82c 	bl	800641a <USB_CoreInit>
 80023c2:	4603      	mov	r3, r0
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d005      	beq.n	80023d4 <HAL_PCD_Init+0x6a>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	2202      	movs	r2, #2
 80023cc:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80023d0:	2301      	movs	r3, #1
 80023d2:	e0d5      	b.n	8002580 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	2100      	movs	r1, #0
 80023da:	4618      	mov	r0, r3
 80023dc:	f004 f85b 	bl	8006496 <USB_SetCurrentMode>
 80023e0:	4603      	mov	r3, r0
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d005      	beq.n	80023f2 <HAL_PCD_Init+0x88>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	2202      	movs	r2, #2
 80023ea:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80023ee:	2301      	movs	r3, #1
 80023f0:	e0c6      	b.n	8002580 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80023f2:	2300      	movs	r3, #0
 80023f4:	73fb      	strb	r3, [r7, #15]
 80023f6:	e04a      	b.n	800248e <HAL_PCD_Init+0x124>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80023f8:	7bfa      	ldrb	r2, [r7, #15]
 80023fa:	6879      	ldr	r1, [r7, #4]
 80023fc:	4613      	mov	r3, r2
 80023fe:	00db      	lsls	r3, r3, #3
 8002400:	4413      	add	r3, r2
 8002402:	009b      	lsls	r3, r3, #2
 8002404:	440b      	add	r3, r1
 8002406:	3315      	adds	r3, #21
 8002408:	2201      	movs	r2, #1
 800240a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800240c:	7bfa      	ldrb	r2, [r7, #15]
 800240e:	6879      	ldr	r1, [r7, #4]
 8002410:	4613      	mov	r3, r2
 8002412:	00db      	lsls	r3, r3, #3
 8002414:	4413      	add	r3, r2
 8002416:	009b      	lsls	r3, r3, #2
 8002418:	440b      	add	r3, r1
 800241a:	3314      	adds	r3, #20
 800241c:	7bfa      	ldrb	r2, [r7, #15]
 800241e:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002420:	7bfa      	ldrb	r2, [r7, #15]
 8002422:	7bfb      	ldrb	r3, [r7, #15]
 8002424:	b298      	uxth	r0, r3
 8002426:	6879      	ldr	r1, [r7, #4]
 8002428:	4613      	mov	r3, r2
 800242a:	00db      	lsls	r3, r3, #3
 800242c:	4413      	add	r3, r2
 800242e:	009b      	lsls	r3, r3, #2
 8002430:	440b      	add	r3, r1
 8002432:	332e      	adds	r3, #46	@ 0x2e
 8002434:	4602      	mov	r2, r0
 8002436:	801a      	strh	r2, [r3, #0]
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002438:	7bfa      	ldrb	r2, [r7, #15]
 800243a:	6879      	ldr	r1, [r7, #4]
 800243c:	4613      	mov	r3, r2
 800243e:	00db      	lsls	r3, r3, #3
 8002440:	4413      	add	r3, r2
 8002442:	009b      	lsls	r3, r3, #2
 8002444:	440b      	add	r3, r1
 8002446:	3318      	adds	r3, #24
 8002448:	2200      	movs	r2, #0
 800244a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800244c:	7bfa      	ldrb	r2, [r7, #15]
 800244e:	6879      	ldr	r1, [r7, #4]
 8002450:	4613      	mov	r3, r2
 8002452:	00db      	lsls	r3, r3, #3
 8002454:	4413      	add	r3, r2
 8002456:	009b      	lsls	r3, r3, #2
 8002458:	440b      	add	r3, r1
 800245a:	331c      	adds	r3, #28
 800245c:	2200      	movs	r2, #0
 800245e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002460:	7bfa      	ldrb	r2, [r7, #15]
 8002462:	6879      	ldr	r1, [r7, #4]
 8002464:	4613      	mov	r3, r2
 8002466:	00db      	lsls	r3, r3, #3
 8002468:	4413      	add	r3, r2
 800246a:	009b      	lsls	r3, r3, #2
 800246c:	440b      	add	r3, r1
 800246e:	3320      	adds	r3, #32
 8002470:	2200      	movs	r2, #0
 8002472:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002474:	7bfa      	ldrb	r2, [r7, #15]
 8002476:	6879      	ldr	r1, [r7, #4]
 8002478:	4613      	mov	r3, r2
 800247a:	00db      	lsls	r3, r3, #3
 800247c:	4413      	add	r3, r2
 800247e:	009b      	lsls	r3, r3, #2
 8002480:	440b      	add	r3, r1
 8002482:	3324      	adds	r3, #36	@ 0x24
 8002484:	2200      	movs	r2, #0
 8002486:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002488:	7bfb      	ldrb	r3, [r7, #15]
 800248a:	3301      	adds	r3, #1
 800248c:	73fb      	strb	r3, [r7, #15]
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	791b      	ldrb	r3, [r3, #4]
 8002492:	7bfa      	ldrb	r2, [r7, #15]
 8002494:	429a      	cmp	r2, r3
 8002496:	d3af      	bcc.n	80023f8 <HAL_PCD_Init+0x8e>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002498:	2300      	movs	r3, #0
 800249a:	73fb      	strb	r3, [r7, #15]
 800249c:	e044      	b.n	8002528 <HAL_PCD_Init+0x1be>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800249e:	7bfa      	ldrb	r2, [r7, #15]
 80024a0:	6879      	ldr	r1, [r7, #4]
 80024a2:	4613      	mov	r3, r2
 80024a4:	00db      	lsls	r3, r3, #3
 80024a6:	4413      	add	r3, r2
 80024a8:	009b      	lsls	r3, r3, #2
 80024aa:	440b      	add	r3, r1
 80024ac:	f203 2355 	addw	r3, r3, #597	@ 0x255
 80024b0:	2200      	movs	r2, #0
 80024b2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80024b4:	7bfa      	ldrb	r2, [r7, #15]
 80024b6:	6879      	ldr	r1, [r7, #4]
 80024b8:	4613      	mov	r3, r2
 80024ba:	00db      	lsls	r3, r3, #3
 80024bc:	4413      	add	r3, r2
 80024be:	009b      	lsls	r3, r3, #2
 80024c0:	440b      	add	r3, r1
 80024c2:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 80024c6:	7bfa      	ldrb	r2, [r7, #15]
 80024c8:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80024ca:	7bfa      	ldrb	r2, [r7, #15]
 80024cc:	6879      	ldr	r1, [r7, #4]
 80024ce:	4613      	mov	r3, r2
 80024d0:	00db      	lsls	r3, r3, #3
 80024d2:	4413      	add	r3, r2
 80024d4:	009b      	lsls	r3, r3, #2
 80024d6:	440b      	add	r3, r1
 80024d8:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80024dc:	2200      	movs	r2, #0
 80024de:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80024e0:	7bfa      	ldrb	r2, [r7, #15]
 80024e2:	6879      	ldr	r1, [r7, #4]
 80024e4:	4613      	mov	r3, r2
 80024e6:	00db      	lsls	r3, r3, #3
 80024e8:	4413      	add	r3, r2
 80024ea:	009b      	lsls	r3, r3, #2
 80024ec:	440b      	add	r3, r1
 80024ee:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 80024f2:	2200      	movs	r2, #0
 80024f4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80024f6:	7bfa      	ldrb	r2, [r7, #15]
 80024f8:	6879      	ldr	r1, [r7, #4]
 80024fa:	4613      	mov	r3, r2
 80024fc:	00db      	lsls	r3, r3, #3
 80024fe:	4413      	add	r3, r2
 8002500:	009b      	lsls	r3, r3, #2
 8002502:	440b      	add	r3, r1
 8002504:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8002508:	2200      	movs	r2, #0
 800250a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800250c:	7bfa      	ldrb	r2, [r7, #15]
 800250e:	6879      	ldr	r1, [r7, #4]
 8002510:	4613      	mov	r3, r2
 8002512:	00db      	lsls	r3, r3, #3
 8002514:	4413      	add	r3, r2
 8002516:	009b      	lsls	r3, r3, #2
 8002518:	440b      	add	r3, r1
 800251a:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 800251e:	2200      	movs	r2, #0
 8002520:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002522:	7bfb      	ldrb	r3, [r7, #15]
 8002524:	3301      	adds	r3, #1
 8002526:	73fb      	strb	r3, [r7, #15]
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	791b      	ldrb	r3, [r3, #4]
 800252c:	7bfa      	ldrb	r2, [r7, #15]
 800252e:	429a      	cmp	r2, r3
 8002530:	d3b5      	bcc.n	800249e <HAL_PCD_Init+0x134>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	6818      	ldr	r0, [r3, #0]
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	7c1a      	ldrb	r2, [r3, #16]
 800253a:	f88d 2000 	strb.w	r2, [sp]
 800253e:	3304      	adds	r3, #4
 8002540:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002542:	f003 fff5 	bl	8006530 <USB_DevInit>
 8002546:	4603      	mov	r3, r0
 8002548:	2b00      	cmp	r3, #0
 800254a:	d005      	beq.n	8002558 <HAL_PCD_Init+0x1ee>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	2202      	movs	r2, #2
 8002550:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002554:	2301      	movs	r3, #1
 8002556:	e013      	b.n	8002580 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	2200      	movs	r2, #0
 800255c:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	2201      	movs	r2, #1
 8002562:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	7b1b      	ldrb	r3, [r3, #12]
 800256a:	2b01      	cmp	r3, #1
 800256c:	d102      	bne.n	8002574 <HAL_PCD_Init+0x20a>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800256e:	6878      	ldr	r0, [r7, #4]
 8002570:	f000 f80a 	bl	8002588 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	4618      	mov	r0, r3
 800257a:	f004 f99a 	bl	80068b2 <USB_DevDisconnect>

  return HAL_OK;
 800257e:	2300      	movs	r3, #0
}
 8002580:	4618      	mov	r0, r3
 8002582:	3710      	adds	r7, #16
 8002584:	46bd      	mov	sp, r7
 8002586:	bd80      	pop	{r7, pc}

08002588 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002588:	b480      	push	{r7}
 800258a:	b085      	sub	sp, #20
 800258c:	af00      	add	r7, sp, #0
 800258e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	2201      	movs	r2, #1
 800259a:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	2200      	movs	r2, #0
 80025a2:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	699b      	ldr	r3, [r3, #24]
 80025aa:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80025b6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80025ba:	f043 0303 	orr.w	r3, r3, #3
 80025be:	68fa      	ldr	r2, [r7, #12]
 80025c0:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 80025c2:	2300      	movs	r3, #0
}
 80025c4:	4618      	mov	r0, r3
 80025c6:	3714      	adds	r7, #20
 80025c8:	46bd      	mov	sp, r7
 80025ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ce:	4770      	bx	lr

080025d0 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80025d0:	b480      	push	{r7}
 80025d2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80025d4:	4b05      	ldr	r3, [pc, #20]	@ (80025ec <HAL_PWR_EnableBkUpAccess+0x1c>)
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	4a04      	ldr	r2, [pc, #16]	@ (80025ec <HAL_PWR_EnableBkUpAccess+0x1c>)
 80025da:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80025de:	6013      	str	r3, [r2, #0]
}
 80025e0:	bf00      	nop
 80025e2:	46bd      	mov	sp, r7
 80025e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e8:	4770      	bx	lr
 80025ea:	bf00      	nop
 80025ec:	40007000 	.word	0x40007000

080025f0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80025f0:	b480      	push	{r7}
 80025f2:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80025f4:	4b04      	ldr	r3, [pc, #16]	@ (8002608 <HAL_PWREx_GetVoltageRange+0x18>)
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 80025fc:	4618      	mov	r0, r3
 80025fe:	46bd      	mov	sp, r7
 8002600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002604:	4770      	bx	lr
 8002606:	bf00      	nop
 8002608:	40007000 	.word	0x40007000

0800260c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800260c:	b480      	push	{r7}
 800260e:	b085      	sub	sp, #20
 8002610:	af00      	add	r7, sp, #0
 8002612:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800261a:	d130      	bne.n	800267e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800261c:	4b23      	ldr	r3, [pc, #140]	@ (80026ac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002624:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002628:	d038      	beq.n	800269c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800262a:	4b20      	ldr	r3, [pc, #128]	@ (80026ac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002632:	4a1e      	ldr	r2, [pc, #120]	@ (80026ac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002634:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002638:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800263a:	4b1d      	ldr	r3, [pc, #116]	@ (80026b0 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	2232      	movs	r2, #50	@ 0x32
 8002640:	fb02 f303 	mul.w	r3, r2, r3
 8002644:	4a1b      	ldr	r2, [pc, #108]	@ (80026b4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002646:	fba2 2303 	umull	r2, r3, r2, r3
 800264a:	0c9b      	lsrs	r3, r3, #18
 800264c:	3301      	adds	r3, #1
 800264e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002650:	e002      	b.n	8002658 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	3b01      	subs	r3, #1
 8002656:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002658:	4b14      	ldr	r3, [pc, #80]	@ (80026ac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800265a:	695b      	ldr	r3, [r3, #20]
 800265c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002660:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002664:	d102      	bne.n	800266c <HAL_PWREx_ControlVoltageScaling+0x60>
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	2b00      	cmp	r3, #0
 800266a:	d1f2      	bne.n	8002652 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800266c:	4b0f      	ldr	r3, [pc, #60]	@ (80026ac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800266e:	695b      	ldr	r3, [r3, #20]
 8002670:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002674:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002678:	d110      	bne.n	800269c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800267a:	2303      	movs	r3, #3
 800267c:	e00f      	b.n	800269e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800267e:	4b0b      	ldr	r3, [pc, #44]	@ (80026ac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002686:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800268a:	d007      	beq.n	800269c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800268c:	4b07      	ldr	r3, [pc, #28]	@ (80026ac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002694:	4a05      	ldr	r2, [pc, #20]	@ (80026ac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002696:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800269a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800269c:	2300      	movs	r3, #0
}
 800269e:	4618      	mov	r0, r3
 80026a0:	3714      	adds	r7, #20
 80026a2:	46bd      	mov	sp, r7
 80026a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a8:	4770      	bx	lr
 80026aa:	bf00      	nop
 80026ac:	40007000 	.word	0x40007000
 80026b0:	20000000 	.word	0x20000000
 80026b4:	431bde83 	.word	0x431bde83

080026b8 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 80026b8:	b480      	push	{r7}
 80026ba:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 80026bc:	4b05      	ldr	r3, [pc, #20]	@ (80026d4 <HAL_PWREx_EnableVddUSB+0x1c>)
 80026be:	685b      	ldr	r3, [r3, #4]
 80026c0:	4a04      	ldr	r2, [pc, #16]	@ (80026d4 <HAL_PWREx_EnableVddUSB+0x1c>)
 80026c2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80026c6:	6053      	str	r3, [r2, #4]
}
 80026c8:	bf00      	nop
 80026ca:	46bd      	mov	sp, r7
 80026cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d0:	4770      	bx	lr
 80026d2:	bf00      	nop
 80026d4:	40007000 	.word	0x40007000

080026d8 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 80026d8:	b580      	push	{r7, lr}
 80026da:	b086      	sub	sp, #24
 80026dc:	af02      	add	r7, sp, #8
 80026de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 80026e0:	f7ff f8de 	bl	80018a0 <HAL_GetTick>
 80026e4:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d101      	bne.n	80026f0 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 80026ec:	2301      	movs	r3, #1
 80026ee:	e063      	b.n	80027b8 <HAL_QSPI_Init+0xe0>
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }
#endif

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 80026f6:	b2db      	uxtb	r3, r3
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d10b      	bne.n	8002714 <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	2200      	movs	r2, #0
 8002700:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8002704:	6878      	ldr	r0, [r7, #4]
 8002706:	f7fe fd07 	bl	8001118 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 800270a:	f241 3188 	movw	r1, #5000	@ 0x1388
 800270e:	6878      	ldr	r0, [r7, #4]
 8002710:	f000 f858 	bl	80027c4 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	f423 6170 	bic.w	r1, r3, #3840	@ 0xf00
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	689b      	ldr	r3, [r3, #8]
 8002722:	3b01      	subs	r3, #1
 8002724:	021a      	lsls	r2, r3, #8
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	430a      	orrs	r2, r1
 800272c:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002732:	9300      	str	r3, [sp, #0]
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	2200      	movs	r2, #0
 8002738:	2120      	movs	r1, #32
 800273a:	6878      	ldr	r0, [r7, #4]
 800273c:	f000 f850 	bl	80027e0 <QSPI_WaitFlagStateUntilTimeout>
 8002740:	4603      	mov	r3, r0
 8002742:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8002744:	7afb      	ldrb	r3, [r7, #11]
 8002746:	2b00      	cmp	r3, #0
 8002748:	d131      	bne.n	80027ae <HAL_QSPI_Init+0xd6>
#if defined(QUADSPI_CR_DFM)
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));
#else
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT),
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8002754:	f023 0310 	bic.w	r3, r3, #16
 8002758:	687a      	ldr	r2, [r7, #4]
 800275a:	6852      	ldr	r2, [r2, #4]
 800275c:	0611      	lsls	r1, r2, #24
 800275e:	687a      	ldr	r2, [r7, #4]
 8002760:	68d2      	ldr	r2, [r2, #12]
 8002762:	4311      	orrs	r1, r2
 8002764:	687a      	ldr	r2, [r7, #4]
 8002766:	6812      	ldr	r2, [r2, #0]
 8002768:	430b      	orrs	r3, r1
 800276a:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting));
#endif

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	685a      	ldr	r2, [r3, #4]
 8002772:	4b13      	ldr	r3, [pc, #76]	@ (80027c0 <HAL_QSPI_Init+0xe8>)
 8002774:	4013      	ands	r3, r2
 8002776:	687a      	ldr	r2, [r7, #4]
 8002778:	6912      	ldr	r2, [r2, #16]
 800277a:	0411      	lsls	r1, r2, #16
 800277c:	687a      	ldr	r2, [r7, #4]
 800277e:	6952      	ldr	r2, [r2, #20]
 8002780:	4311      	orrs	r1, r2
 8002782:	687a      	ldr	r2, [r7, #4]
 8002784:	6992      	ldr	r2, [r2, #24]
 8002786:	4311      	orrs	r1, r2
 8002788:	687a      	ldr	r2, [r7, #4]
 800278a:	6812      	ldr	r2, [r2, #0]
 800278c:	430b      	orrs	r3, r1
 800278e:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	681a      	ldr	r2, [r3, #0]
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f042 0201 	orr.w	r2, r2, #1
 800279e:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	2200      	movs	r2, #0
 80027a4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	2201      	movs	r2, #1
 80027aa:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	2200      	movs	r2, #0
 80027b2:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  /* Return function status */
  return status;
 80027b6:	7afb      	ldrb	r3, [r7, #11]
}
 80027b8:	4618      	mov	r0, r3
 80027ba:	3710      	adds	r7, #16
 80027bc:	46bd      	mov	sp, r7
 80027be:	bd80      	pop	{r7, pc}
 80027c0:	ffe0f8fe 	.word	0xffe0f8fe

080027c4 <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 80027c4:	b480      	push	{r7}
 80027c6:	b083      	sub	sp, #12
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	6078      	str	r0, [r7, #4]
 80027cc:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	683a      	ldr	r2, [r7, #0]
 80027d2:	641a      	str	r2, [r3, #64]	@ 0x40
}
 80027d4:	bf00      	nop
 80027d6:	370c      	adds	r7, #12
 80027d8:	46bd      	mov	sp, r7
 80027da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027de:	4770      	bx	lr

080027e0 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 80027e0:	b580      	push	{r7, lr}
 80027e2:	b084      	sub	sp, #16
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	60f8      	str	r0, [r7, #12]
 80027e8:	60b9      	str	r1, [r7, #8]
 80027ea:	603b      	str	r3, [r7, #0]
 80027ec:	4613      	mov	r3, r2
 80027ee:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 80027f0:	e01a      	b.n	8002828 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80027f2:	69bb      	ldr	r3, [r7, #24]
 80027f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027f8:	d016      	beq.n	8002828 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80027fa:	f7ff f851 	bl	80018a0 <HAL_GetTick>
 80027fe:	4602      	mov	r2, r0
 8002800:	683b      	ldr	r3, [r7, #0]
 8002802:	1ad3      	subs	r3, r2, r3
 8002804:	69ba      	ldr	r2, [r7, #24]
 8002806:	429a      	cmp	r2, r3
 8002808:	d302      	bcc.n	8002810 <QSPI_WaitFlagStateUntilTimeout+0x30>
 800280a:	69bb      	ldr	r3, [r7, #24]
 800280c:	2b00      	cmp	r3, #0
 800280e:	d10b      	bne.n	8002828 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	2204      	movs	r2, #4
 8002814:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800281c:	f043 0201 	orr.w	r2, r3, #1
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	63da      	str	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8002824:	2301      	movs	r3, #1
 8002826:	e00e      	b.n	8002846 <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	689a      	ldr	r2, [r3, #8]
 800282e:	68bb      	ldr	r3, [r7, #8]
 8002830:	4013      	ands	r3, r2
 8002832:	2b00      	cmp	r3, #0
 8002834:	bf14      	ite	ne
 8002836:	2301      	movne	r3, #1
 8002838:	2300      	moveq	r3, #0
 800283a:	b2db      	uxtb	r3, r3
 800283c:	461a      	mov	r2, r3
 800283e:	79fb      	ldrb	r3, [r7, #7]
 8002840:	429a      	cmp	r2, r3
 8002842:	d1d6      	bne.n	80027f2 <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002844:	2300      	movs	r3, #0
}
 8002846:	4618      	mov	r0, r3
 8002848:	3710      	adds	r7, #16
 800284a:	46bd      	mov	sp, r7
 800284c:	bd80      	pop	{r7, pc}
	...

08002850 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002850:	b580      	push	{r7, lr}
 8002852:	b088      	sub	sp, #32
 8002854:	af00      	add	r7, sp, #0
 8002856:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	2b00      	cmp	r3, #0
 800285c:	d101      	bne.n	8002862 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800285e:	2301      	movs	r3, #1
 8002860:	e3ca      	b.n	8002ff8 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002862:	4b97      	ldr	r3, [pc, #604]	@ (8002ac0 <HAL_RCC_OscConfig+0x270>)
 8002864:	689b      	ldr	r3, [r3, #8]
 8002866:	f003 030c 	and.w	r3, r3, #12
 800286a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800286c:	4b94      	ldr	r3, [pc, #592]	@ (8002ac0 <HAL_RCC_OscConfig+0x270>)
 800286e:	68db      	ldr	r3, [r3, #12]
 8002870:	f003 0303 	and.w	r3, r3, #3
 8002874:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	f003 0310 	and.w	r3, r3, #16
 800287e:	2b00      	cmp	r3, #0
 8002880:	f000 80e4 	beq.w	8002a4c <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002884:	69bb      	ldr	r3, [r7, #24]
 8002886:	2b00      	cmp	r3, #0
 8002888:	d007      	beq.n	800289a <HAL_RCC_OscConfig+0x4a>
 800288a:	69bb      	ldr	r3, [r7, #24]
 800288c:	2b0c      	cmp	r3, #12
 800288e:	f040 808b 	bne.w	80029a8 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002892:	697b      	ldr	r3, [r7, #20]
 8002894:	2b01      	cmp	r3, #1
 8002896:	f040 8087 	bne.w	80029a8 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800289a:	4b89      	ldr	r3, [pc, #548]	@ (8002ac0 <HAL_RCC_OscConfig+0x270>)
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f003 0302 	and.w	r3, r3, #2
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d005      	beq.n	80028b2 <HAL_RCC_OscConfig+0x62>
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	699b      	ldr	r3, [r3, #24]
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d101      	bne.n	80028b2 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80028ae:	2301      	movs	r3, #1
 80028b0:	e3a2      	b.n	8002ff8 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	6a1a      	ldr	r2, [r3, #32]
 80028b6:	4b82      	ldr	r3, [pc, #520]	@ (8002ac0 <HAL_RCC_OscConfig+0x270>)
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f003 0308 	and.w	r3, r3, #8
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d004      	beq.n	80028cc <HAL_RCC_OscConfig+0x7c>
 80028c2:	4b7f      	ldr	r3, [pc, #508]	@ (8002ac0 <HAL_RCC_OscConfig+0x270>)
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80028ca:	e005      	b.n	80028d8 <HAL_RCC_OscConfig+0x88>
 80028cc:	4b7c      	ldr	r3, [pc, #496]	@ (8002ac0 <HAL_RCC_OscConfig+0x270>)
 80028ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80028d2:	091b      	lsrs	r3, r3, #4
 80028d4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80028d8:	4293      	cmp	r3, r2
 80028da:	d223      	bcs.n	8002924 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	6a1b      	ldr	r3, [r3, #32]
 80028e0:	4618      	mov	r0, r3
 80028e2:	f000 fd55 	bl	8003390 <RCC_SetFlashLatencyFromMSIRange>
 80028e6:	4603      	mov	r3, r0
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d001      	beq.n	80028f0 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80028ec:	2301      	movs	r3, #1
 80028ee:	e383      	b.n	8002ff8 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80028f0:	4b73      	ldr	r3, [pc, #460]	@ (8002ac0 <HAL_RCC_OscConfig+0x270>)
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	4a72      	ldr	r2, [pc, #456]	@ (8002ac0 <HAL_RCC_OscConfig+0x270>)
 80028f6:	f043 0308 	orr.w	r3, r3, #8
 80028fa:	6013      	str	r3, [r2, #0]
 80028fc:	4b70      	ldr	r3, [pc, #448]	@ (8002ac0 <HAL_RCC_OscConfig+0x270>)
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	6a1b      	ldr	r3, [r3, #32]
 8002908:	496d      	ldr	r1, [pc, #436]	@ (8002ac0 <HAL_RCC_OscConfig+0x270>)
 800290a:	4313      	orrs	r3, r2
 800290c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800290e:	4b6c      	ldr	r3, [pc, #432]	@ (8002ac0 <HAL_RCC_OscConfig+0x270>)
 8002910:	685b      	ldr	r3, [r3, #4]
 8002912:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	69db      	ldr	r3, [r3, #28]
 800291a:	021b      	lsls	r3, r3, #8
 800291c:	4968      	ldr	r1, [pc, #416]	@ (8002ac0 <HAL_RCC_OscConfig+0x270>)
 800291e:	4313      	orrs	r3, r2
 8002920:	604b      	str	r3, [r1, #4]
 8002922:	e025      	b.n	8002970 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002924:	4b66      	ldr	r3, [pc, #408]	@ (8002ac0 <HAL_RCC_OscConfig+0x270>)
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	4a65      	ldr	r2, [pc, #404]	@ (8002ac0 <HAL_RCC_OscConfig+0x270>)
 800292a:	f043 0308 	orr.w	r3, r3, #8
 800292e:	6013      	str	r3, [r2, #0]
 8002930:	4b63      	ldr	r3, [pc, #396]	@ (8002ac0 <HAL_RCC_OscConfig+0x270>)
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	6a1b      	ldr	r3, [r3, #32]
 800293c:	4960      	ldr	r1, [pc, #384]	@ (8002ac0 <HAL_RCC_OscConfig+0x270>)
 800293e:	4313      	orrs	r3, r2
 8002940:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002942:	4b5f      	ldr	r3, [pc, #380]	@ (8002ac0 <HAL_RCC_OscConfig+0x270>)
 8002944:	685b      	ldr	r3, [r3, #4]
 8002946:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	69db      	ldr	r3, [r3, #28]
 800294e:	021b      	lsls	r3, r3, #8
 8002950:	495b      	ldr	r1, [pc, #364]	@ (8002ac0 <HAL_RCC_OscConfig+0x270>)
 8002952:	4313      	orrs	r3, r2
 8002954:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002956:	69bb      	ldr	r3, [r7, #24]
 8002958:	2b00      	cmp	r3, #0
 800295a:	d109      	bne.n	8002970 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	6a1b      	ldr	r3, [r3, #32]
 8002960:	4618      	mov	r0, r3
 8002962:	f000 fd15 	bl	8003390 <RCC_SetFlashLatencyFromMSIRange>
 8002966:	4603      	mov	r3, r0
 8002968:	2b00      	cmp	r3, #0
 800296a:	d001      	beq.n	8002970 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 800296c:	2301      	movs	r3, #1
 800296e:	e343      	b.n	8002ff8 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002970:	f000 fc4a 	bl	8003208 <HAL_RCC_GetSysClockFreq>
 8002974:	4602      	mov	r2, r0
 8002976:	4b52      	ldr	r3, [pc, #328]	@ (8002ac0 <HAL_RCC_OscConfig+0x270>)
 8002978:	689b      	ldr	r3, [r3, #8]
 800297a:	091b      	lsrs	r3, r3, #4
 800297c:	f003 030f 	and.w	r3, r3, #15
 8002980:	4950      	ldr	r1, [pc, #320]	@ (8002ac4 <HAL_RCC_OscConfig+0x274>)
 8002982:	5ccb      	ldrb	r3, [r1, r3]
 8002984:	f003 031f 	and.w	r3, r3, #31
 8002988:	fa22 f303 	lsr.w	r3, r2, r3
 800298c:	4a4e      	ldr	r2, [pc, #312]	@ (8002ac8 <HAL_RCC_OscConfig+0x278>)
 800298e:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002990:	4b4e      	ldr	r3, [pc, #312]	@ (8002acc <HAL_RCC_OscConfig+0x27c>)
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	4618      	mov	r0, r3
 8002996:	f7fe ff33 	bl	8001800 <HAL_InitTick>
 800299a:	4603      	mov	r3, r0
 800299c:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800299e:	7bfb      	ldrb	r3, [r7, #15]
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d052      	beq.n	8002a4a <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80029a4:	7bfb      	ldrb	r3, [r7, #15]
 80029a6:	e327      	b.n	8002ff8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	699b      	ldr	r3, [r3, #24]
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d032      	beq.n	8002a16 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80029b0:	4b43      	ldr	r3, [pc, #268]	@ (8002ac0 <HAL_RCC_OscConfig+0x270>)
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	4a42      	ldr	r2, [pc, #264]	@ (8002ac0 <HAL_RCC_OscConfig+0x270>)
 80029b6:	f043 0301 	orr.w	r3, r3, #1
 80029ba:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80029bc:	f7fe ff70 	bl	80018a0 <HAL_GetTick>
 80029c0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80029c2:	e008      	b.n	80029d6 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80029c4:	f7fe ff6c 	bl	80018a0 <HAL_GetTick>
 80029c8:	4602      	mov	r2, r0
 80029ca:	693b      	ldr	r3, [r7, #16]
 80029cc:	1ad3      	subs	r3, r2, r3
 80029ce:	2b02      	cmp	r3, #2
 80029d0:	d901      	bls.n	80029d6 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80029d2:	2303      	movs	r3, #3
 80029d4:	e310      	b.n	8002ff8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80029d6:	4b3a      	ldr	r3, [pc, #232]	@ (8002ac0 <HAL_RCC_OscConfig+0x270>)
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	f003 0302 	and.w	r3, r3, #2
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d0f0      	beq.n	80029c4 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80029e2:	4b37      	ldr	r3, [pc, #220]	@ (8002ac0 <HAL_RCC_OscConfig+0x270>)
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	4a36      	ldr	r2, [pc, #216]	@ (8002ac0 <HAL_RCC_OscConfig+0x270>)
 80029e8:	f043 0308 	orr.w	r3, r3, #8
 80029ec:	6013      	str	r3, [r2, #0]
 80029ee:	4b34      	ldr	r3, [pc, #208]	@ (8002ac0 <HAL_RCC_OscConfig+0x270>)
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	6a1b      	ldr	r3, [r3, #32]
 80029fa:	4931      	ldr	r1, [pc, #196]	@ (8002ac0 <HAL_RCC_OscConfig+0x270>)
 80029fc:	4313      	orrs	r3, r2
 80029fe:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002a00:	4b2f      	ldr	r3, [pc, #188]	@ (8002ac0 <HAL_RCC_OscConfig+0x270>)
 8002a02:	685b      	ldr	r3, [r3, #4]
 8002a04:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	69db      	ldr	r3, [r3, #28]
 8002a0c:	021b      	lsls	r3, r3, #8
 8002a0e:	492c      	ldr	r1, [pc, #176]	@ (8002ac0 <HAL_RCC_OscConfig+0x270>)
 8002a10:	4313      	orrs	r3, r2
 8002a12:	604b      	str	r3, [r1, #4]
 8002a14:	e01a      	b.n	8002a4c <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002a16:	4b2a      	ldr	r3, [pc, #168]	@ (8002ac0 <HAL_RCC_OscConfig+0x270>)
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	4a29      	ldr	r2, [pc, #164]	@ (8002ac0 <HAL_RCC_OscConfig+0x270>)
 8002a1c:	f023 0301 	bic.w	r3, r3, #1
 8002a20:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002a22:	f7fe ff3d 	bl	80018a0 <HAL_GetTick>
 8002a26:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002a28:	e008      	b.n	8002a3c <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002a2a:	f7fe ff39 	bl	80018a0 <HAL_GetTick>
 8002a2e:	4602      	mov	r2, r0
 8002a30:	693b      	ldr	r3, [r7, #16]
 8002a32:	1ad3      	subs	r3, r2, r3
 8002a34:	2b02      	cmp	r3, #2
 8002a36:	d901      	bls.n	8002a3c <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8002a38:	2303      	movs	r3, #3
 8002a3a:	e2dd      	b.n	8002ff8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002a3c:	4b20      	ldr	r3, [pc, #128]	@ (8002ac0 <HAL_RCC_OscConfig+0x270>)
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	f003 0302 	and.w	r3, r3, #2
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d1f0      	bne.n	8002a2a <HAL_RCC_OscConfig+0x1da>
 8002a48:	e000      	b.n	8002a4c <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002a4a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	f003 0301 	and.w	r3, r3, #1
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d074      	beq.n	8002b42 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002a58:	69bb      	ldr	r3, [r7, #24]
 8002a5a:	2b08      	cmp	r3, #8
 8002a5c:	d005      	beq.n	8002a6a <HAL_RCC_OscConfig+0x21a>
 8002a5e:	69bb      	ldr	r3, [r7, #24]
 8002a60:	2b0c      	cmp	r3, #12
 8002a62:	d10e      	bne.n	8002a82 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002a64:	697b      	ldr	r3, [r7, #20]
 8002a66:	2b03      	cmp	r3, #3
 8002a68:	d10b      	bne.n	8002a82 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a6a:	4b15      	ldr	r3, [pc, #84]	@ (8002ac0 <HAL_RCC_OscConfig+0x270>)
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d064      	beq.n	8002b40 <HAL_RCC_OscConfig+0x2f0>
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	685b      	ldr	r3, [r3, #4]
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d160      	bne.n	8002b40 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002a7e:	2301      	movs	r3, #1
 8002a80:	e2ba      	b.n	8002ff8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	685b      	ldr	r3, [r3, #4]
 8002a86:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002a8a:	d106      	bne.n	8002a9a <HAL_RCC_OscConfig+0x24a>
 8002a8c:	4b0c      	ldr	r3, [pc, #48]	@ (8002ac0 <HAL_RCC_OscConfig+0x270>)
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	4a0b      	ldr	r2, [pc, #44]	@ (8002ac0 <HAL_RCC_OscConfig+0x270>)
 8002a92:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002a96:	6013      	str	r3, [r2, #0]
 8002a98:	e026      	b.n	8002ae8 <HAL_RCC_OscConfig+0x298>
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	685b      	ldr	r3, [r3, #4]
 8002a9e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002aa2:	d115      	bne.n	8002ad0 <HAL_RCC_OscConfig+0x280>
 8002aa4:	4b06      	ldr	r3, [pc, #24]	@ (8002ac0 <HAL_RCC_OscConfig+0x270>)
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	4a05      	ldr	r2, [pc, #20]	@ (8002ac0 <HAL_RCC_OscConfig+0x270>)
 8002aaa:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002aae:	6013      	str	r3, [r2, #0]
 8002ab0:	4b03      	ldr	r3, [pc, #12]	@ (8002ac0 <HAL_RCC_OscConfig+0x270>)
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	4a02      	ldr	r2, [pc, #8]	@ (8002ac0 <HAL_RCC_OscConfig+0x270>)
 8002ab6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002aba:	6013      	str	r3, [r2, #0]
 8002abc:	e014      	b.n	8002ae8 <HAL_RCC_OscConfig+0x298>
 8002abe:	bf00      	nop
 8002ac0:	40021000 	.word	0x40021000
 8002ac4:	080069e4 	.word	0x080069e4
 8002ac8:	20000000 	.word	0x20000000
 8002acc:	20000004 	.word	0x20000004
 8002ad0:	4ba0      	ldr	r3, [pc, #640]	@ (8002d54 <HAL_RCC_OscConfig+0x504>)
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	4a9f      	ldr	r2, [pc, #636]	@ (8002d54 <HAL_RCC_OscConfig+0x504>)
 8002ad6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002ada:	6013      	str	r3, [r2, #0]
 8002adc:	4b9d      	ldr	r3, [pc, #628]	@ (8002d54 <HAL_RCC_OscConfig+0x504>)
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	4a9c      	ldr	r2, [pc, #624]	@ (8002d54 <HAL_RCC_OscConfig+0x504>)
 8002ae2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002ae6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	685b      	ldr	r3, [r3, #4]
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d013      	beq.n	8002b18 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002af0:	f7fe fed6 	bl	80018a0 <HAL_GetTick>
 8002af4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002af6:	e008      	b.n	8002b0a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002af8:	f7fe fed2 	bl	80018a0 <HAL_GetTick>
 8002afc:	4602      	mov	r2, r0
 8002afe:	693b      	ldr	r3, [r7, #16]
 8002b00:	1ad3      	subs	r3, r2, r3
 8002b02:	2b64      	cmp	r3, #100	@ 0x64
 8002b04:	d901      	bls.n	8002b0a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002b06:	2303      	movs	r3, #3
 8002b08:	e276      	b.n	8002ff8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002b0a:	4b92      	ldr	r3, [pc, #584]	@ (8002d54 <HAL_RCC_OscConfig+0x504>)
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d0f0      	beq.n	8002af8 <HAL_RCC_OscConfig+0x2a8>
 8002b16:	e014      	b.n	8002b42 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b18:	f7fe fec2 	bl	80018a0 <HAL_GetTick>
 8002b1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002b1e:	e008      	b.n	8002b32 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b20:	f7fe febe 	bl	80018a0 <HAL_GetTick>
 8002b24:	4602      	mov	r2, r0
 8002b26:	693b      	ldr	r3, [r7, #16]
 8002b28:	1ad3      	subs	r3, r2, r3
 8002b2a:	2b64      	cmp	r3, #100	@ 0x64
 8002b2c:	d901      	bls.n	8002b32 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002b2e:	2303      	movs	r3, #3
 8002b30:	e262      	b.n	8002ff8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002b32:	4b88      	ldr	r3, [pc, #544]	@ (8002d54 <HAL_RCC_OscConfig+0x504>)
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d1f0      	bne.n	8002b20 <HAL_RCC_OscConfig+0x2d0>
 8002b3e:	e000      	b.n	8002b42 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b40:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f003 0302 	and.w	r3, r3, #2
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d060      	beq.n	8002c10 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002b4e:	69bb      	ldr	r3, [r7, #24]
 8002b50:	2b04      	cmp	r3, #4
 8002b52:	d005      	beq.n	8002b60 <HAL_RCC_OscConfig+0x310>
 8002b54:	69bb      	ldr	r3, [r7, #24]
 8002b56:	2b0c      	cmp	r3, #12
 8002b58:	d119      	bne.n	8002b8e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002b5a:	697b      	ldr	r3, [r7, #20]
 8002b5c:	2b02      	cmp	r3, #2
 8002b5e:	d116      	bne.n	8002b8e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002b60:	4b7c      	ldr	r3, [pc, #496]	@ (8002d54 <HAL_RCC_OscConfig+0x504>)
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d005      	beq.n	8002b78 <HAL_RCC_OscConfig+0x328>
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	68db      	ldr	r3, [r3, #12]
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d101      	bne.n	8002b78 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002b74:	2301      	movs	r3, #1
 8002b76:	e23f      	b.n	8002ff8 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b78:	4b76      	ldr	r3, [pc, #472]	@ (8002d54 <HAL_RCC_OscConfig+0x504>)
 8002b7a:	685b      	ldr	r3, [r3, #4]
 8002b7c:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	691b      	ldr	r3, [r3, #16]
 8002b84:	061b      	lsls	r3, r3, #24
 8002b86:	4973      	ldr	r1, [pc, #460]	@ (8002d54 <HAL_RCC_OscConfig+0x504>)
 8002b88:	4313      	orrs	r3, r2
 8002b8a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002b8c:	e040      	b.n	8002c10 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	68db      	ldr	r3, [r3, #12]
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d023      	beq.n	8002bde <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002b96:	4b6f      	ldr	r3, [pc, #444]	@ (8002d54 <HAL_RCC_OscConfig+0x504>)
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	4a6e      	ldr	r2, [pc, #440]	@ (8002d54 <HAL_RCC_OscConfig+0x504>)
 8002b9c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002ba0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ba2:	f7fe fe7d 	bl	80018a0 <HAL_GetTick>
 8002ba6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002ba8:	e008      	b.n	8002bbc <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002baa:	f7fe fe79 	bl	80018a0 <HAL_GetTick>
 8002bae:	4602      	mov	r2, r0
 8002bb0:	693b      	ldr	r3, [r7, #16]
 8002bb2:	1ad3      	subs	r3, r2, r3
 8002bb4:	2b02      	cmp	r3, #2
 8002bb6:	d901      	bls.n	8002bbc <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002bb8:	2303      	movs	r3, #3
 8002bba:	e21d      	b.n	8002ff8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002bbc:	4b65      	ldr	r3, [pc, #404]	@ (8002d54 <HAL_RCC_OscConfig+0x504>)
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d0f0      	beq.n	8002baa <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002bc8:	4b62      	ldr	r3, [pc, #392]	@ (8002d54 <HAL_RCC_OscConfig+0x504>)
 8002bca:	685b      	ldr	r3, [r3, #4]
 8002bcc:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	691b      	ldr	r3, [r3, #16]
 8002bd4:	061b      	lsls	r3, r3, #24
 8002bd6:	495f      	ldr	r1, [pc, #380]	@ (8002d54 <HAL_RCC_OscConfig+0x504>)
 8002bd8:	4313      	orrs	r3, r2
 8002bda:	604b      	str	r3, [r1, #4]
 8002bdc:	e018      	b.n	8002c10 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002bde:	4b5d      	ldr	r3, [pc, #372]	@ (8002d54 <HAL_RCC_OscConfig+0x504>)
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	4a5c      	ldr	r2, [pc, #368]	@ (8002d54 <HAL_RCC_OscConfig+0x504>)
 8002be4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002be8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bea:	f7fe fe59 	bl	80018a0 <HAL_GetTick>
 8002bee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002bf0:	e008      	b.n	8002c04 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002bf2:	f7fe fe55 	bl	80018a0 <HAL_GetTick>
 8002bf6:	4602      	mov	r2, r0
 8002bf8:	693b      	ldr	r3, [r7, #16]
 8002bfa:	1ad3      	subs	r3, r2, r3
 8002bfc:	2b02      	cmp	r3, #2
 8002bfe:	d901      	bls.n	8002c04 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002c00:	2303      	movs	r3, #3
 8002c02:	e1f9      	b.n	8002ff8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002c04:	4b53      	ldr	r3, [pc, #332]	@ (8002d54 <HAL_RCC_OscConfig+0x504>)
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d1f0      	bne.n	8002bf2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	f003 0308 	and.w	r3, r3, #8
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d03c      	beq.n	8002c96 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	695b      	ldr	r3, [r3, #20]
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d01c      	beq.n	8002c5e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002c24:	4b4b      	ldr	r3, [pc, #300]	@ (8002d54 <HAL_RCC_OscConfig+0x504>)
 8002c26:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002c2a:	4a4a      	ldr	r2, [pc, #296]	@ (8002d54 <HAL_RCC_OscConfig+0x504>)
 8002c2c:	f043 0301 	orr.w	r3, r3, #1
 8002c30:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c34:	f7fe fe34 	bl	80018a0 <HAL_GetTick>
 8002c38:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002c3a:	e008      	b.n	8002c4e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002c3c:	f7fe fe30 	bl	80018a0 <HAL_GetTick>
 8002c40:	4602      	mov	r2, r0
 8002c42:	693b      	ldr	r3, [r7, #16]
 8002c44:	1ad3      	subs	r3, r2, r3
 8002c46:	2b02      	cmp	r3, #2
 8002c48:	d901      	bls.n	8002c4e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002c4a:	2303      	movs	r3, #3
 8002c4c:	e1d4      	b.n	8002ff8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002c4e:	4b41      	ldr	r3, [pc, #260]	@ (8002d54 <HAL_RCC_OscConfig+0x504>)
 8002c50:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002c54:	f003 0302 	and.w	r3, r3, #2
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d0ef      	beq.n	8002c3c <HAL_RCC_OscConfig+0x3ec>
 8002c5c:	e01b      	b.n	8002c96 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002c5e:	4b3d      	ldr	r3, [pc, #244]	@ (8002d54 <HAL_RCC_OscConfig+0x504>)
 8002c60:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002c64:	4a3b      	ldr	r2, [pc, #236]	@ (8002d54 <HAL_RCC_OscConfig+0x504>)
 8002c66:	f023 0301 	bic.w	r3, r3, #1
 8002c6a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c6e:	f7fe fe17 	bl	80018a0 <HAL_GetTick>
 8002c72:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002c74:	e008      	b.n	8002c88 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002c76:	f7fe fe13 	bl	80018a0 <HAL_GetTick>
 8002c7a:	4602      	mov	r2, r0
 8002c7c:	693b      	ldr	r3, [r7, #16]
 8002c7e:	1ad3      	subs	r3, r2, r3
 8002c80:	2b02      	cmp	r3, #2
 8002c82:	d901      	bls.n	8002c88 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002c84:	2303      	movs	r3, #3
 8002c86:	e1b7      	b.n	8002ff8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002c88:	4b32      	ldr	r3, [pc, #200]	@ (8002d54 <HAL_RCC_OscConfig+0x504>)
 8002c8a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002c8e:	f003 0302 	and.w	r3, r3, #2
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d1ef      	bne.n	8002c76 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f003 0304 	and.w	r3, r3, #4
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	f000 80a6 	beq.w	8002df0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002ca4:	2300      	movs	r3, #0
 8002ca6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002ca8:	4b2a      	ldr	r3, [pc, #168]	@ (8002d54 <HAL_RCC_OscConfig+0x504>)
 8002caa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002cac:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d10d      	bne.n	8002cd0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002cb4:	4b27      	ldr	r3, [pc, #156]	@ (8002d54 <HAL_RCC_OscConfig+0x504>)
 8002cb6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002cb8:	4a26      	ldr	r2, [pc, #152]	@ (8002d54 <HAL_RCC_OscConfig+0x504>)
 8002cba:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002cbe:	6593      	str	r3, [r2, #88]	@ 0x58
 8002cc0:	4b24      	ldr	r3, [pc, #144]	@ (8002d54 <HAL_RCC_OscConfig+0x504>)
 8002cc2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002cc4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002cc8:	60bb      	str	r3, [r7, #8]
 8002cca:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002ccc:	2301      	movs	r3, #1
 8002cce:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002cd0:	4b21      	ldr	r3, [pc, #132]	@ (8002d58 <HAL_RCC_OscConfig+0x508>)
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d118      	bne.n	8002d0e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002cdc:	4b1e      	ldr	r3, [pc, #120]	@ (8002d58 <HAL_RCC_OscConfig+0x508>)
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	4a1d      	ldr	r2, [pc, #116]	@ (8002d58 <HAL_RCC_OscConfig+0x508>)
 8002ce2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002ce6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002ce8:	f7fe fdda 	bl	80018a0 <HAL_GetTick>
 8002cec:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002cee:	e008      	b.n	8002d02 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002cf0:	f7fe fdd6 	bl	80018a0 <HAL_GetTick>
 8002cf4:	4602      	mov	r2, r0
 8002cf6:	693b      	ldr	r3, [r7, #16]
 8002cf8:	1ad3      	subs	r3, r2, r3
 8002cfa:	2b02      	cmp	r3, #2
 8002cfc:	d901      	bls.n	8002d02 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002cfe:	2303      	movs	r3, #3
 8002d00:	e17a      	b.n	8002ff8 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002d02:	4b15      	ldr	r3, [pc, #84]	@ (8002d58 <HAL_RCC_OscConfig+0x508>)
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d0f0      	beq.n	8002cf0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	689b      	ldr	r3, [r3, #8]
 8002d12:	2b01      	cmp	r3, #1
 8002d14:	d108      	bne.n	8002d28 <HAL_RCC_OscConfig+0x4d8>
 8002d16:	4b0f      	ldr	r3, [pc, #60]	@ (8002d54 <HAL_RCC_OscConfig+0x504>)
 8002d18:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002d1c:	4a0d      	ldr	r2, [pc, #52]	@ (8002d54 <HAL_RCC_OscConfig+0x504>)
 8002d1e:	f043 0301 	orr.w	r3, r3, #1
 8002d22:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002d26:	e029      	b.n	8002d7c <HAL_RCC_OscConfig+0x52c>
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	689b      	ldr	r3, [r3, #8]
 8002d2c:	2b05      	cmp	r3, #5
 8002d2e:	d115      	bne.n	8002d5c <HAL_RCC_OscConfig+0x50c>
 8002d30:	4b08      	ldr	r3, [pc, #32]	@ (8002d54 <HAL_RCC_OscConfig+0x504>)
 8002d32:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002d36:	4a07      	ldr	r2, [pc, #28]	@ (8002d54 <HAL_RCC_OscConfig+0x504>)
 8002d38:	f043 0304 	orr.w	r3, r3, #4
 8002d3c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002d40:	4b04      	ldr	r3, [pc, #16]	@ (8002d54 <HAL_RCC_OscConfig+0x504>)
 8002d42:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002d46:	4a03      	ldr	r2, [pc, #12]	@ (8002d54 <HAL_RCC_OscConfig+0x504>)
 8002d48:	f043 0301 	orr.w	r3, r3, #1
 8002d4c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002d50:	e014      	b.n	8002d7c <HAL_RCC_OscConfig+0x52c>
 8002d52:	bf00      	nop
 8002d54:	40021000 	.word	0x40021000
 8002d58:	40007000 	.word	0x40007000
 8002d5c:	4b9c      	ldr	r3, [pc, #624]	@ (8002fd0 <HAL_RCC_OscConfig+0x780>)
 8002d5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002d62:	4a9b      	ldr	r2, [pc, #620]	@ (8002fd0 <HAL_RCC_OscConfig+0x780>)
 8002d64:	f023 0301 	bic.w	r3, r3, #1
 8002d68:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002d6c:	4b98      	ldr	r3, [pc, #608]	@ (8002fd0 <HAL_RCC_OscConfig+0x780>)
 8002d6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002d72:	4a97      	ldr	r2, [pc, #604]	@ (8002fd0 <HAL_RCC_OscConfig+0x780>)
 8002d74:	f023 0304 	bic.w	r3, r3, #4
 8002d78:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	689b      	ldr	r3, [r3, #8]
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d016      	beq.n	8002db2 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d84:	f7fe fd8c 	bl	80018a0 <HAL_GetTick>
 8002d88:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002d8a:	e00a      	b.n	8002da2 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d8c:	f7fe fd88 	bl	80018a0 <HAL_GetTick>
 8002d90:	4602      	mov	r2, r0
 8002d92:	693b      	ldr	r3, [r7, #16]
 8002d94:	1ad3      	subs	r3, r2, r3
 8002d96:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002d9a:	4293      	cmp	r3, r2
 8002d9c:	d901      	bls.n	8002da2 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8002d9e:	2303      	movs	r3, #3
 8002da0:	e12a      	b.n	8002ff8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002da2:	4b8b      	ldr	r3, [pc, #556]	@ (8002fd0 <HAL_RCC_OscConfig+0x780>)
 8002da4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002da8:	f003 0302 	and.w	r3, r3, #2
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d0ed      	beq.n	8002d8c <HAL_RCC_OscConfig+0x53c>
 8002db0:	e015      	b.n	8002dde <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002db2:	f7fe fd75 	bl	80018a0 <HAL_GetTick>
 8002db6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002db8:	e00a      	b.n	8002dd0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002dba:	f7fe fd71 	bl	80018a0 <HAL_GetTick>
 8002dbe:	4602      	mov	r2, r0
 8002dc0:	693b      	ldr	r3, [r7, #16]
 8002dc2:	1ad3      	subs	r3, r2, r3
 8002dc4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002dc8:	4293      	cmp	r3, r2
 8002dca:	d901      	bls.n	8002dd0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002dcc:	2303      	movs	r3, #3
 8002dce:	e113      	b.n	8002ff8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002dd0:	4b7f      	ldr	r3, [pc, #508]	@ (8002fd0 <HAL_RCC_OscConfig+0x780>)
 8002dd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002dd6:	f003 0302 	and.w	r3, r3, #2
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d1ed      	bne.n	8002dba <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002dde:	7ffb      	ldrb	r3, [r7, #31]
 8002de0:	2b01      	cmp	r3, #1
 8002de2:	d105      	bne.n	8002df0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002de4:	4b7a      	ldr	r3, [pc, #488]	@ (8002fd0 <HAL_RCC_OscConfig+0x780>)
 8002de6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002de8:	4a79      	ldr	r2, [pc, #484]	@ (8002fd0 <HAL_RCC_OscConfig+0x780>)
 8002dea:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002dee:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	f000 80fe 	beq.w	8002ff6 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002dfe:	2b02      	cmp	r3, #2
 8002e00:	f040 80d0 	bne.w	8002fa4 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002e04:	4b72      	ldr	r3, [pc, #456]	@ (8002fd0 <HAL_RCC_OscConfig+0x780>)
 8002e06:	68db      	ldr	r3, [r3, #12]
 8002e08:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e0a:	697b      	ldr	r3, [r7, #20]
 8002e0c:	f003 0203 	and.w	r2, r3, #3
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e14:	429a      	cmp	r2, r3
 8002e16:	d130      	bne.n	8002e7a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002e18:	697b      	ldr	r3, [r7, #20]
 8002e1a:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e22:	3b01      	subs	r3, #1
 8002e24:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e26:	429a      	cmp	r2, r3
 8002e28:	d127      	bne.n	8002e7a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002e2a:	697b      	ldr	r3, [r7, #20]
 8002e2c:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002e34:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002e36:	429a      	cmp	r2, r3
 8002e38:	d11f      	bne.n	8002e7a <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002e3a:	697b      	ldr	r3, [r7, #20]
 8002e3c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e40:	687a      	ldr	r2, [r7, #4]
 8002e42:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002e44:	2a07      	cmp	r2, #7
 8002e46:	bf14      	ite	ne
 8002e48:	2201      	movne	r2, #1
 8002e4a:	2200      	moveq	r2, #0
 8002e4c:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002e4e:	4293      	cmp	r3, r2
 8002e50:	d113      	bne.n	8002e7a <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002e52:	697b      	ldr	r3, [r7, #20]
 8002e54:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002e5c:	085b      	lsrs	r3, r3, #1
 8002e5e:	3b01      	subs	r3, #1
 8002e60:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002e62:	429a      	cmp	r2, r3
 8002e64:	d109      	bne.n	8002e7a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002e66:	697b      	ldr	r3, [r7, #20]
 8002e68:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e70:	085b      	lsrs	r3, r3, #1
 8002e72:	3b01      	subs	r3, #1
 8002e74:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002e76:	429a      	cmp	r2, r3
 8002e78:	d06e      	beq.n	8002f58 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002e7a:	69bb      	ldr	r3, [r7, #24]
 8002e7c:	2b0c      	cmp	r3, #12
 8002e7e:	d069      	beq.n	8002f54 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002e80:	4b53      	ldr	r3, [pc, #332]	@ (8002fd0 <HAL_RCC_OscConfig+0x780>)
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d105      	bne.n	8002e98 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002e8c:	4b50      	ldr	r3, [pc, #320]	@ (8002fd0 <HAL_RCC_OscConfig+0x780>)
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d001      	beq.n	8002e9c <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002e98:	2301      	movs	r3, #1
 8002e9a:	e0ad      	b.n	8002ff8 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002e9c:	4b4c      	ldr	r3, [pc, #304]	@ (8002fd0 <HAL_RCC_OscConfig+0x780>)
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	4a4b      	ldr	r2, [pc, #300]	@ (8002fd0 <HAL_RCC_OscConfig+0x780>)
 8002ea2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002ea6:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002ea8:	f7fe fcfa 	bl	80018a0 <HAL_GetTick>
 8002eac:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002eae:	e008      	b.n	8002ec2 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002eb0:	f7fe fcf6 	bl	80018a0 <HAL_GetTick>
 8002eb4:	4602      	mov	r2, r0
 8002eb6:	693b      	ldr	r3, [r7, #16]
 8002eb8:	1ad3      	subs	r3, r2, r3
 8002eba:	2b02      	cmp	r3, #2
 8002ebc:	d901      	bls.n	8002ec2 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8002ebe:	2303      	movs	r3, #3
 8002ec0:	e09a      	b.n	8002ff8 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002ec2:	4b43      	ldr	r3, [pc, #268]	@ (8002fd0 <HAL_RCC_OscConfig+0x780>)
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d1f0      	bne.n	8002eb0 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002ece:	4b40      	ldr	r3, [pc, #256]	@ (8002fd0 <HAL_RCC_OscConfig+0x780>)
 8002ed0:	68da      	ldr	r2, [r3, #12]
 8002ed2:	4b40      	ldr	r3, [pc, #256]	@ (8002fd4 <HAL_RCC_OscConfig+0x784>)
 8002ed4:	4013      	ands	r3, r2
 8002ed6:	687a      	ldr	r2, [r7, #4]
 8002ed8:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8002eda:	687a      	ldr	r2, [r7, #4]
 8002edc:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8002ede:	3a01      	subs	r2, #1
 8002ee0:	0112      	lsls	r2, r2, #4
 8002ee2:	4311      	orrs	r1, r2
 8002ee4:	687a      	ldr	r2, [r7, #4]
 8002ee6:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8002ee8:	0212      	lsls	r2, r2, #8
 8002eea:	4311      	orrs	r1, r2
 8002eec:	687a      	ldr	r2, [r7, #4]
 8002eee:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002ef0:	0852      	lsrs	r2, r2, #1
 8002ef2:	3a01      	subs	r2, #1
 8002ef4:	0552      	lsls	r2, r2, #21
 8002ef6:	4311      	orrs	r1, r2
 8002ef8:	687a      	ldr	r2, [r7, #4]
 8002efa:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8002efc:	0852      	lsrs	r2, r2, #1
 8002efe:	3a01      	subs	r2, #1
 8002f00:	0652      	lsls	r2, r2, #25
 8002f02:	4311      	orrs	r1, r2
 8002f04:	687a      	ldr	r2, [r7, #4]
 8002f06:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002f08:	0912      	lsrs	r2, r2, #4
 8002f0a:	0452      	lsls	r2, r2, #17
 8002f0c:	430a      	orrs	r2, r1
 8002f0e:	4930      	ldr	r1, [pc, #192]	@ (8002fd0 <HAL_RCC_OscConfig+0x780>)
 8002f10:	4313      	orrs	r3, r2
 8002f12:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002f14:	4b2e      	ldr	r3, [pc, #184]	@ (8002fd0 <HAL_RCC_OscConfig+0x780>)
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	4a2d      	ldr	r2, [pc, #180]	@ (8002fd0 <HAL_RCC_OscConfig+0x780>)
 8002f1a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002f1e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002f20:	4b2b      	ldr	r3, [pc, #172]	@ (8002fd0 <HAL_RCC_OscConfig+0x780>)
 8002f22:	68db      	ldr	r3, [r3, #12]
 8002f24:	4a2a      	ldr	r2, [pc, #168]	@ (8002fd0 <HAL_RCC_OscConfig+0x780>)
 8002f26:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002f2a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002f2c:	f7fe fcb8 	bl	80018a0 <HAL_GetTick>
 8002f30:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002f32:	e008      	b.n	8002f46 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f34:	f7fe fcb4 	bl	80018a0 <HAL_GetTick>
 8002f38:	4602      	mov	r2, r0
 8002f3a:	693b      	ldr	r3, [r7, #16]
 8002f3c:	1ad3      	subs	r3, r2, r3
 8002f3e:	2b02      	cmp	r3, #2
 8002f40:	d901      	bls.n	8002f46 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8002f42:	2303      	movs	r3, #3
 8002f44:	e058      	b.n	8002ff8 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002f46:	4b22      	ldr	r3, [pc, #136]	@ (8002fd0 <HAL_RCC_OscConfig+0x780>)
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d0f0      	beq.n	8002f34 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002f52:	e050      	b.n	8002ff6 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002f54:	2301      	movs	r3, #1
 8002f56:	e04f      	b.n	8002ff8 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002f58:	4b1d      	ldr	r3, [pc, #116]	@ (8002fd0 <HAL_RCC_OscConfig+0x780>)
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d148      	bne.n	8002ff6 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002f64:	4b1a      	ldr	r3, [pc, #104]	@ (8002fd0 <HAL_RCC_OscConfig+0x780>)
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	4a19      	ldr	r2, [pc, #100]	@ (8002fd0 <HAL_RCC_OscConfig+0x780>)
 8002f6a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002f6e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002f70:	4b17      	ldr	r3, [pc, #92]	@ (8002fd0 <HAL_RCC_OscConfig+0x780>)
 8002f72:	68db      	ldr	r3, [r3, #12]
 8002f74:	4a16      	ldr	r2, [pc, #88]	@ (8002fd0 <HAL_RCC_OscConfig+0x780>)
 8002f76:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002f7a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002f7c:	f7fe fc90 	bl	80018a0 <HAL_GetTick>
 8002f80:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002f82:	e008      	b.n	8002f96 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f84:	f7fe fc8c 	bl	80018a0 <HAL_GetTick>
 8002f88:	4602      	mov	r2, r0
 8002f8a:	693b      	ldr	r3, [r7, #16]
 8002f8c:	1ad3      	subs	r3, r2, r3
 8002f8e:	2b02      	cmp	r3, #2
 8002f90:	d901      	bls.n	8002f96 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8002f92:	2303      	movs	r3, #3
 8002f94:	e030      	b.n	8002ff8 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002f96:	4b0e      	ldr	r3, [pc, #56]	@ (8002fd0 <HAL_RCC_OscConfig+0x780>)
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d0f0      	beq.n	8002f84 <HAL_RCC_OscConfig+0x734>
 8002fa2:	e028      	b.n	8002ff6 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002fa4:	69bb      	ldr	r3, [r7, #24]
 8002fa6:	2b0c      	cmp	r3, #12
 8002fa8:	d023      	beq.n	8002ff2 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002faa:	4b09      	ldr	r3, [pc, #36]	@ (8002fd0 <HAL_RCC_OscConfig+0x780>)
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	4a08      	ldr	r2, [pc, #32]	@ (8002fd0 <HAL_RCC_OscConfig+0x780>)
 8002fb0:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002fb4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fb6:	f7fe fc73 	bl	80018a0 <HAL_GetTick>
 8002fba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002fbc:	e00c      	b.n	8002fd8 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002fbe:	f7fe fc6f 	bl	80018a0 <HAL_GetTick>
 8002fc2:	4602      	mov	r2, r0
 8002fc4:	693b      	ldr	r3, [r7, #16]
 8002fc6:	1ad3      	subs	r3, r2, r3
 8002fc8:	2b02      	cmp	r3, #2
 8002fca:	d905      	bls.n	8002fd8 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8002fcc:	2303      	movs	r3, #3
 8002fce:	e013      	b.n	8002ff8 <HAL_RCC_OscConfig+0x7a8>
 8002fd0:	40021000 	.word	0x40021000
 8002fd4:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002fd8:	4b09      	ldr	r3, [pc, #36]	@ (8003000 <HAL_RCC_OscConfig+0x7b0>)
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d1ec      	bne.n	8002fbe <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002fe4:	4b06      	ldr	r3, [pc, #24]	@ (8003000 <HAL_RCC_OscConfig+0x7b0>)
 8002fe6:	68da      	ldr	r2, [r3, #12]
 8002fe8:	4905      	ldr	r1, [pc, #20]	@ (8003000 <HAL_RCC_OscConfig+0x7b0>)
 8002fea:	4b06      	ldr	r3, [pc, #24]	@ (8003004 <HAL_RCC_OscConfig+0x7b4>)
 8002fec:	4013      	ands	r3, r2
 8002fee:	60cb      	str	r3, [r1, #12]
 8002ff0:	e001      	b.n	8002ff6 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002ff2:	2301      	movs	r3, #1
 8002ff4:	e000      	b.n	8002ff8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8002ff6:	2300      	movs	r3, #0
}
 8002ff8:	4618      	mov	r0, r3
 8002ffa:	3720      	adds	r7, #32
 8002ffc:	46bd      	mov	sp, r7
 8002ffe:	bd80      	pop	{r7, pc}
 8003000:	40021000 	.word	0x40021000
 8003004:	feeefffc 	.word	0xfeeefffc

08003008 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003008:	b580      	push	{r7, lr}
 800300a:	b084      	sub	sp, #16
 800300c:	af00      	add	r7, sp, #0
 800300e:	6078      	str	r0, [r7, #4]
 8003010:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	2b00      	cmp	r3, #0
 8003016:	d101      	bne.n	800301c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003018:	2301      	movs	r3, #1
 800301a:	e0e7      	b.n	80031ec <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800301c:	4b75      	ldr	r3, [pc, #468]	@ (80031f4 <HAL_RCC_ClockConfig+0x1ec>)
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	f003 0307 	and.w	r3, r3, #7
 8003024:	683a      	ldr	r2, [r7, #0]
 8003026:	429a      	cmp	r2, r3
 8003028:	d910      	bls.n	800304c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800302a:	4b72      	ldr	r3, [pc, #456]	@ (80031f4 <HAL_RCC_ClockConfig+0x1ec>)
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	f023 0207 	bic.w	r2, r3, #7
 8003032:	4970      	ldr	r1, [pc, #448]	@ (80031f4 <HAL_RCC_ClockConfig+0x1ec>)
 8003034:	683b      	ldr	r3, [r7, #0]
 8003036:	4313      	orrs	r3, r2
 8003038:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800303a:	4b6e      	ldr	r3, [pc, #440]	@ (80031f4 <HAL_RCC_ClockConfig+0x1ec>)
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	f003 0307 	and.w	r3, r3, #7
 8003042:	683a      	ldr	r2, [r7, #0]
 8003044:	429a      	cmp	r2, r3
 8003046:	d001      	beq.n	800304c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003048:	2301      	movs	r3, #1
 800304a:	e0cf      	b.n	80031ec <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	f003 0302 	and.w	r3, r3, #2
 8003054:	2b00      	cmp	r3, #0
 8003056:	d010      	beq.n	800307a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	689a      	ldr	r2, [r3, #8]
 800305c:	4b66      	ldr	r3, [pc, #408]	@ (80031f8 <HAL_RCC_ClockConfig+0x1f0>)
 800305e:	689b      	ldr	r3, [r3, #8]
 8003060:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003064:	429a      	cmp	r2, r3
 8003066:	d908      	bls.n	800307a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003068:	4b63      	ldr	r3, [pc, #396]	@ (80031f8 <HAL_RCC_ClockConfig+0x1f0>)
 800306a:	689b      	ldr	r3, [r3, #8]
 800306c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	689b      	ldr	r3, [r3, #8]
 8003074:	4960      	ldr	r1, [pc, #384]	@ (80031f8 <HAL_RCC_ClockConfig+0x1f0>)
 8003076:	4313      	orrs	r3, r2
 8003078:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	f003 0301 	and.w	r3, r3, #1
 8003082:	2b00      	cmp	r3, #0
 8003084:	d04c      	beq.n	8003120 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	685b      	ldr	r3, [r3, #4]
 800308a:	2b03      	cmp	r3, #3
 800308c:	d107      	bne.n	800309e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800308e:	4b5a      	ldr	r3, [pc, #360]	@ (80031f8 <HAL_RCC_ClockConfig+0x1f0>)
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003096:	2b00      	cmp	r3, #0
 8003098:	d121      	bne.n	80030de <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800309a:	2301      	movs	r3, #1
 800309c:	e0a6      	b.n	80031ec <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	685b      	ldr	r3, [r3, #4]
 80030a2:	2b02      	cmp	r3, #2
 80030a4:	d107      	bne.n	80030b6 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80030a6:	4b54      	ldr	r3, [pc, #336]	@ (80031f8 <HAL_RCC_ClockConfig+0x1f0>)
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d115      	bne.n	80030de <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80030b2:	2301      	movs	r3, #1
 80030b4:	e09a      	b.n	80031ec <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	685b      	ldr	r3, [r3, #4]
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d107      	bne.n	80030ce <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80030be:	4b4e      	ldr	r3, [pc, #312]	@ (80031f8 <HAL_RCC_ClockConfig+0x1f0>)
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	f003 0302 	and.w	r3, r3, #2
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d109      	bne.n	80030de <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80030ca:	2301      	movs	r3, #1
 80030cc:	e08e      	b.n	80031ec <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80030ce:	4b4a      	ldr	r3, [pc, #296]	@ (80031f8 <HAL_RCC_ClockConfig+0x1f0>)
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d101      	bne.n	80030de <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80030da:	2301      	movs	r3, #1
 80030dc:	e086      	b.n	80031ec <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80030de:	4b46      	ldr	r3, [pc, #280]	@ (80031f8 <HAL_RCC_ClockConfig+0x1f0>)
 80030e0:	689b      	ldr	r3, [r3, #8]
 80030e2:	f023 0203 	bic.w	r2, r3, #3
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	685b      	ldr	r3, [r3, #4]
 80030ea:	4943      	ldr	r1, [pc, #268]	@ (80031f8 <HAL_RCC_ClockConfig+0x1f0>)
 80030ec:	4313      	orrs	r3, r2
 80030ee:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80030f0:	f7fe fbd6 	bl	80018a0 <HAL_GetTick>
 80030f4:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80030f6:	e00a      	b.n	800310e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80030f8:	f7fe fbd2 	bl	80018a0 <HAL_GetTick>
 80030fc:	4602      	mov	r2, r0
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	1ad3      	subs	r3, r2, r3
 8003102:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003106:	4293      	cmp	r3, r2
 8003108:	d901      	bls.n	800310e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800310a:	2303      	movs	r3, #3
 800310c:	e06e      	b.n	80031ec <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800310e:	4b3a      	ldr	r3, [pc, #232]	@ (80031f8 <HAL_RCC_ClockConfig+0x1f0>)
 8003110:	689b      	ldr	r3, [r3, #8]
 8003112:	f003 020c 	and.w	r2, r3, #12
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	685b      	ldr	r3, [r3, #4]
 800311a:	009b      	lsls	r3, r3, #2
 800311c:	429a      	cmp	r2, r3
 800311e:	d1eb      	bne.n	80030f8 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	f003 0302 	and.w	r3, r3, #2
 8003128:	2b00      	cmp	r3, #0
 800312a:	d010      	beq.n	800314e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	689a      	ldr	r2, [r3, #8]
 8003130:	4b31      	ldr	r3, [pc, #196]	@ (80031f8 <HAL_RCC_ClockConfig+0x1f0>)
 8003132:	689b      	ldr	r3, [r3, #8]
 8003134:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003138:	429a      	cmp	r2, r3
 800313a:	d208      	bcs.n	800314e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800313c:	4b2e      	ldr	r3, [pc, #184]	@ (80031f8 <HAL_RCC_ClockConfig+0x1f0>)
 800313e:	689b      	ldr	r3, [r3, #8]
 8003140:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	689b      	ldr	r3, [r3, #8]
 8003148:	492b      	ldr	r1, [pc, #172]	@ (80031f8 <HAL_RCC_ClockConfig+0x1f0>)
 800314a:	4313      	orrs	r3, r2
 800314c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800314e:	4b29      	ldr	r3, [pc, #164]	@ (80031f4 <HAL_RCC_ClockConfig+0x1ec>)
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	f003 0307 	and.w	r3, r3, #7
 8003156:	683a      	ldr	r2, [r7, #0]
 8003158:	429a      	cmp	r2, r3
 800315a:	d210      	bcs.n	800317e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800315c:	4b25      	ldr	r3, [pc, #148]	@ (80031f4 <HAL_RCC_ClockConfig+0x1ec>)
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	f023 0207 	bic.w	r2, r3, #7
 8003164:	4923      	ldr	r1, [pc, #140]	@ (80031f4 <HAL_RCC_ClockConfig+0x1ec>)
 8003166:	683b      	ldr	r3, [r7, #0]
 8003168:	4313      	orrs	r3, r2
 800316a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800316c:	4b21      	ldr	r3, [pc, #132]	@ (80031f4 <HAL_RCC_ClockConfig+0x1ec>)
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	f003 0307 	and.w	r3, r3, #7
 8003174:	683a      	ldr	r2, [r7, #0]
 8003176:	429a      	cmp	r2, r3
 8003178:	d001      	beq.n	800317e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800317a:	2301      	movs	r3, #1
 800317c:	e036      	b.n	80031ec <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	f003 0304 	and.w	r3, r3, #4
 8003186:	2b00      	cmp	r3, #0
 8003188:	d008      	beq.n	800319c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800318a:	4b1b      	ldr	r3, [pc, #108]	@ (80031f8 <HAL_RCC_ClockConfig+0x1f0>)
 800318c:	689b      	ldr	r3, [r3, #8]
 800318e:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	68db      	ldr	r3, [r3, #12]
 8003196:	4918      	ldr	r1, [pc, #96]	@ (80031f8 <HAL_RCC_ClockConfig+0x1f0>)
 8003198:	4313      	orrs	r3, r2
 800319a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	f003 0308 	and.w	r3, r3, #8
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d009      	beq.n	80031bc <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80031a8:	4b13      	ldr	r3, [pc, #76]	@ (80031f8 <HAL_RCC_ClockConfig+0x1f0>)
 80031aa:	689b      	ldr	r3, [r3, #8]
 80031ac:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	691b      	ldr	r3, [r3, #16]
 80031b4:	00db      	lsls	r3, r3, #3
 80031b6:	4910      	ldr	r1, [pc, #64]	@ (80031f8 <HAL_RCC_ClockConfig+0x1f0>)
 80031b8:	4313      	orrs	r3, r2
 80031ba:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80031bc:	f000 f824 	bl	8003208 <HAL_RCC_GetSysClockFreq>
 80031c0:	4602      	mov	r2, r0
 80031c2:	4b0d      	ldr	r3, [pc, #52]	@ (80031f8 <HAL_RCC_ClockConfig+0x1f0>)
 80031c4:	689b      	ldr	r3, [r3, #8]
 80031c6:	091b      	lsrs	r3, r3, #4
 80031c8:	f003 030f 	and.w	r3, r3, #15
 80031cc:	490b      	ldr	r1, [pc, #44]	@ (80031fc <HAL_RCC_ClockConfig+0x1f4>)
 80031ce:	5ccb      	ldrb	r3, [r1, r3]
 80031d0:	f003 031f 	and.w	r3, r3, #31
 80031d4:	fa22 f303 	lsr.w	r3, r2, r3
 80031d8:	4a09      	ldr	r2, [pc, #36]	@ (8003200 <HAL_RCC_ClockConfig+0x1f8>)
 80031da:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80031dc:	4b09      	ldr	r3, [pc, #36]	@ (8003204 <HAL_RCC_ClockConfig+0x1fc>)
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	4618      	mov	r0, r3
 80031e2:	f7fe fb0d 	bl	8001800 <HAL_InitTick>
 80031e6:	4603      	mov	r3, r0
 80031e8:	72fb      	strb	r3, [r7, #11]

  return status;
 80031ea:	7afb      	ldrb	r3, [r7, #11]
}
 80031ec:	4618      	mov	r0, r3
 80031ee:	3710      	adds	r7, #16
 80031f0:	46bd      	mov	sp, r7
 80031f2:	bd80      	pop	{r7, pc}
 80031f4:	40022000 	.word	0x40022000
 80031f8:	40021000 	.word	0x40021000
 80031fc:	080069e4 	.word	0x080069e4
 8003200:	20000000 	.word	0x20000000
 8003204:	20000004 	.word	0x20000004

08003208 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003208:	b480      	push	{r7}
 800320a:	b089      	sub	sp, #36	@ 0x24
 800320c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800320e:	2300      	movs	r3, #0
 8003210:	61fb      	str	r3, [r7, #28]
 8003212:	2300      	movs	r3, #0
 8003214:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003216:	4b3e      	ldr	r3, [pc, #248]	@ (8003310 <HAL_RCC_GetSysClockFreq+0x108>)
 8003218:	689b      	ldr	r3, [r3, #8]
 800321a:	f003 030c 	and.w	r3, r3, #12
 800321e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003220:	4b3b      	ldr	r3, [pc, #236]	@ (8003310 <HAL_RCC_GetSysClockFreq+0x108>)
 8003222:	68db      	ldr	r3, [r3, #12]
 8003224:	f003 0303 	and.w	r3, r3, #3
 8003228:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800322a:	693b      	ldr	r3, [r7, #16]
 800322c:	2b00      	cmp	r3, #0
 800322e:	d005      	beq.n	800323c <HAL_RCC_GetSysClockFreq+0x34>
 8003230:	693b      	ldr	r3, [r7, #16]
 8003232:	2b0c      	cmp	r3, #12
 8003234:	d121      	bne.n	800327a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	2b01      	cmp	r3, #1
 800323a:	d11e      	bne.n	800327a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800323c:	4b34      	ldr	r3, [pc, #208]	@ (8003310 <HAL_RCC_GetSysClockFreq+0x108>)
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	f003 0308 	and.w	r3, r3, #8
 8003244:	2b00      	cmp	r3, #0
 8003246:	d107      	bne.n	8003258 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003248:	4b31      	ldr	r3, [pc, #196]	@ (8003310 <HAL_RCC_GetSysClockFreq+0x108>)
 800324a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800324e:	0a1b      	lsrs	r3, r3, #8
 8003250:	f003 030f 	and.w	r3, r3, #15
 8003254:	61fb      	str	r3, [r7, #28]
 8003256:	e005      	b.n	8003264 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003258:	4b2d      	ldr	r3, [pc, #180]	@ (8003310 <HAL_RCC_GetSysClockFreq+0x108>)
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	091b      	lsrs	r3, r3, #4
 800325e:	f003 030f 	and.w	r3, r3, #15
 8003262:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003264:	4a2b      	ldr	r2, [pc, #172]	@ (8003314 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003266:	69fb      	ldr	r3, [r7, #28]
 8003268:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800326c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800326e:	693b      	ldr	r3, [r7, #16]
 8003270:	2b00      	cmp	r3, #0
 8003272:	d10d      	bne.n	8003290 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003274:	69fb      	ldr	r3, [r7, #28]
 8003276:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003278:	e00a      	b.n	8003290 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800327a:	693b      	ldr	r3, [r7, #16]
 800327c:	2b04      	cmp	r3, #4
 800327e:	d102      	bne.n	8003286 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003280:	4b25      	ldr	r3, [pc, #148]	@ (8003318 <HAL_RCC_GetSysClockFreq+0x110>)
 8003282:	61bb      	str	r3, [r7, #24]
 8003284:	e004      	b.n	8003290 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003286:	693b      	ldr	r3, [r7, #16]
 8003288:	2b08      	cmp	r3, #8
 800328a:	d101      	bne.n	8003290 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800328c:	4b23      	ldr	r3, [pc, #140]	@ (800331c <HAL_RCC_GetSysClockFreq+0x114>)
 800328e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003290:	693b      	ldr	r3, [r7, #16]
 8003292:	2b0c      	cmp	r3, #12
 8003294:	d134      	bne.n	8003300 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003296:	4b1e      	ldr	r3, [pc, #120]	@ (8003310 <HAL_RCC_GetSysClockFreq+0x108>)
 8003298:	68db      	ldr	r3, [r3, #12]
 800329a:	f003 0303 	and.w	r3, r3, #3
 800329e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80032a0:	68bb      	ldr	r3, [r7, #8]
 80032a2:	2b02      	cmp	r3, #2
 80032a4:	d003      	beq.n	80032ae <HAL_RCC_GetSysClockFreq+0xa6>
 80032a6:	68bb      	ldr	r3, [r7, #8]
 80032a8:	2b03      	cmp	r3, #3
 80032aa:	d003      	beq.n	80032b4 <HAL_RCC_GetSysClockFreq+0xac>
 80032ac:	e005      	b.n	80032ba <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80032ae:	4b1a      	ldr	r3, [pc, #104]	@ (8003318 <HAL_RCC_GetSysClockFreq+0x110>)
 80032b0:	617b      	str	r3, [r7, #20]
      break;
 80032b2:	e005      	b.n	80032c0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80032b4:	4b19      	ldr	r3, [pc, #100]	@ (800331c <HAL_RCC_GetSysClockFreq+0x114>)
 80032b6:	617b      	str	r3, [r7, #20]
      break;
 80032b8:	e002      	b.n	80032c0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80032ba:	69fb      	ldr	r3, [r7, #28]
 80032bc:	617b      	str	r3, [r7, #20]
      break;
 80032be:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80032c0:	4b13      	ldr	r3, [pc, #76]	@ (8003310 <HAL_RCC_GetSysClockFreq+0x108>)
 80032c2:	68db      	ldr	r3, [r3, #12]
 80032c4:	091b      	lsrs	r3, r3, #4
 80032c6:	f003 0307 	and.w	r3, r3, #7
 80032ca:	3301      	adds	r3, #1
 80032cc:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80032ce:	4b10      	ldr	r3, [pc, #64]	@ (8003310 <HAL_RCC_GetSysClockFreq+0x108>)
 80032d0:	68db      	ldr	r3, [r3, #12]
 80032d2:	0a1b      	lsrs	r3, r3, #8
 80032d4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80032d8:	697a      	ldr	r2, [r7, #20]
 80032da:	fb03 f202 	mul.w	r2, r3, r2
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80032e4:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80032e6:	4b0a      	ldr	r3, [pc, #40]	@ (8003310 <HAL_RCC_GetSysClockFreq+0x108>)
 80032e8:	68db      	ldr	r3, [r3, #12]
 80032ea:	0e5b      	lsrs	r3, r3, #25
 80032ec:	f003 0303 	and.w	r3, r3, #3
 80032f0:	3301      	adds	r3, #1
 80032f2:	005b      	lsls	r3, r3, #1
 80032f4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80032f6:	697a      	ldr	r2, [r7, #20]
 80032f8:	683b      	ldr	r3, [r7, #0]
 80032fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80032fe:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003300:	69bb      	ldr	r3, [r7, #24]
}
 8003302:	4618      	mov	r0, r3
 8003304:	3724      	adds	r7, #36	@ 0x24
 8003306:	46bd      	mov	sp, r7
 8003308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800330c:	4770      	bx	lr
 800330e:	bf00      	nop
 8003310:	40021000 	.word	0x40021000
 8003314:	080069fc 	.word	0x080069fc
 8003318:	00f42400 	.word	0x00f42400
 800331c:	007a1200 	.word	0x007a1200

08003320 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003320:	b480      	push	{r7}
 8003322:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003324:	4b03      	ldr	r3, [pc, #12]	@ (8003334 <HAL_RCC_GetHCLKFreq+0x14>)
 8003326:	681b      	ldr	r3, [r3, #0]
}
 8003328:	4618      	mov	r0, r3
 800332a:	46bd      	mov	sp, r7
 800332c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003330:	4770      	bx	lr
 8003332:	bf00      	nop
 8003334:	20000000 	.word	0x20000000

08003338 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003338:	b580      	push	{r7, lr}
 800333a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800333c:	f7ff fff0 	bl	8003320 <HAL_RCC_GetHCLKFreq>
 8003340:	4602      	mov	r2, r0
 8003342:	4b06      	ldr	r3, [pc, #24]	@ (800335c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003344:	689b      	ldr	r3, [r3, #8]
 8003346:	0a1b      	lsrs	r3, r3, #8
 8003348:	f003 0307 	and.w	r3, r3, #7
 800334c:	4904      	ldr	r1, [pc, #16]	@ (8003360 <HAL_RCC_GetPCLK1Freq+0x28>)
 800334e:	5ccb      	ldrb	r3, [r1, r3]
 8003350:	f003 031f 	and.w	r3, r3, #31
 8003354:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003358:	4618      	mov	r0, r3
 800335a:	bd80      	pop	{r7, pc}
 800335c:	40021000 	.word	0x40021000
 8003360:	080069f4 	.word	0x080069f4

08003364 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003364:	b580      	push	{r7, lr}
 8003366:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003368:	f7ff ffda 	bl	8003320 <HAL_RCC_GetHCLKFreq>
 800336c:	4602      	mov	r2, r0
 800336e:	4b06      	ldr	r3, [pc, #24]	@ (8003388 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003370:	689b      	ldr	r3, [r3, #8]
 8003372:	0adb      	lsrs	r3, r3, #11
 8003374:	f003 0307 	and.w	r3, r3, #7
 8003378:	4904      	ldr	r1, [pc, #16]	@ (800338c <HAL_RCC_GetPCLK2Freq+0x28>)
 800337a:	5ccb      	ldrb	r3, [r1, r3]
 800337c:	f003 031f 	and.w	r3, r3, #31
 8003380:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003384:	4618      	mov	r0, r3
 8003386:	bd80      	pop	{r7, pc}
 8003388:	40021000 	.word	0x40021000
 800338c:	080069f4 	.word	0x080069f4

08003390 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003390:	b580      	push	{r7, lr}
 8003392:	b086      	sub	sp, #24
 8003394:	af00      	add	r7, sp, #0
 8003396:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003398:	2300      	movs	r3, #0
 800339a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800339c:	4b2a      	ldr	r3, [pc, #168]	@ (8003448 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800339e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80033a0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d003      	beq.n	80033b0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80033a8:	f7ff f922 	bl	80025f0 <HAL_PWREx_GetVoltageRange>
 80033ac:	6178      	str	r0, [r7, #20]
 80033ae:	e014      	b.n	80033da <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80033b0:	4b25      	ldr	r3, [pc, #148]	@ (8003448 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80033b2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80033b4:	4a24      	ldr	r2, [pc, #144]	@ (8003448 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80033b6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80033ba:	6593      	str	r3, [r2, #88]	@ 0x58
 80033bc:	4b22      	ldr	r3, [pc, #136]	@ (8003448 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80033be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80033c0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80033c4:	60fb      	str	r3, [r7, #12]
 80033c6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80033c8:	f7ff f912 	bl	80025f0 <HAL_PWREx_GetVoltageRange>
 80033cc:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80033ce:	4b1e      	ldr	r3, [pc, #120]	@ (8003448 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80033d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80033d2:	4a1d      	ldr	r2, [pc, #116]	@ (8003448 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80033d4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80033d8:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80033da:	697b      	ldr	r3, [r7, #20]
 80033dc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80033e0:	d10b      	bne.n	80033fa <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	2b80      	cmp	r3, #128	@ 0x80
 80033e6:	d919      	bls.n	800341c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	2ba0      	cmp	r3, #160	@ 0xa0
 80033ec:	d902      	bls.n	80033f4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80033ee:	2302      	movs	r3, #2
 80033f0:	613b      	str	r3, [r7, #16]
 80033f2:	e013      	b.n	800341c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80033f4:	2301      	movs	r3, #1
 80033f6:	613b      	str	r3, [r7, #16]
 80033f8:	e010      	b.n	800341c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	2b80      	cmp	r3, #128	@ 0x80
 80033fe:	d902      	bls.n	8003406 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003400:	2303      	movs	r3, #3
 8003402:	613b      	str	r3, [r7, #16]
 8003404:	e00a      	b.n	800341c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	2b80      	cmp	r3, #128	@ 0x80
 800340a:	d102      	bne.n	8003412 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800340c:	2302      	movs	r3, #2
 800340e:	613b      	str	r3, [r7, #16]
 8003410:	e004      	b.n	800341c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	2b70      	cmp	r3, #112	@ 0x70
 8003416:	d101      	bne.n	800341c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003418:	2301      	movs	r3, #1
 800341a:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800341c:	4b0b      	ldr	r3, [pc, #44]	@ (800344c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	f023 0207 	bic.w	r2, r3, #7
 8003424:	4909      	ldr	r1, [pc, #36]	@ (800344c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003426:	693b      	ldr	r3, [r7, #16]
 8003428:	4313      	orrs	r3, r2
 800342a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800342c:	4b07      	ldr	r3, [pc, #28]	@ (800344c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	f003 0307 	and.w	r3, r3, #7
 8003434:	693a      	ldr	r2, [r7, #16]
 8003436:	429a      	cmp	r2, r3
 8003438:	d001      	beq.n	800343e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800343a:	2301      	movs	r3, #1
 800343c:	e000      	b.n	8003440 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800343e:	2300      	movs	r3, #0
}
 8003440:	4618      	mov	r0, r3
 8003442:	3718      	adds	r7, #24
 8003444:	46bd      	mov	sp, r7
 8003446:	bd80      	pop	{r7, pc}
 8003448:	40021000 	.word	0x40021000
 800344c:	40022000 	.word	0x40022000

08003450 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003450:	b580      	push	{r7, lr}
 8003452:	b086      	sub	sp, #24
 8003454:	af00      	add	r7, sp, #0
 8003456:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003458:	2300      	movs	r3, #0
 800345a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800345c:	2300      	movs	r3, #0
 800345e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003468:	2b00      	cmp	r3, #0
 800346a:	d041      	beq.n	80034f0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003470:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003474:	d02a      	beq.n	80034cc <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8003476:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800347a:	d824      	bhi.n	80034c6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800347c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003480:	d008      	beq.n	8003494 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003482:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003486:	d81e      	bhi.n	80034c6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003488:	2b00      	cmp	r3, #0
 800348a:	d00a      	beq.n	80034a2 <HAL_RCCEx_PeriphCLKConfig+0x52>
 800348c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003490:	d010      	beq.n	80034b4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003492:	e018      	b.n	80034c6 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003494:	4b86      	ldr	r3, [pc, #536]	@ (80036b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003496:	68db      	ldr	r3, [r3, #12]
 8003498:	4a85      	ldr	r2, [pc, #532]	@ (80036b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800349a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800349e:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80034a0:	e015      	b.n	80034ce <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	3304      	adds	r3, #4
 80034a6:	2100      	movs	r1, #0
 80034a8:	4618      	mov	r0, r3
 80034aa:	f000 facb 	bl	8003a44 <RCCEx_PLLSAI1_Config>
 80034ae:	4603      	mov	r3, r0
 80034b0:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80034b2:	e00c      	b.n	80034ce <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	3320      	adds	r3, #32
 80034b8:	2100      	movs	r1, #0
 80034ba:	4618      	mov	r0, r3
 80034bc:	f000 fbb6 	bl	8003c2c <RCCEx_PLLSAI2_Config>
 80034c0:	4603      	mov	r3, r0
 80034c2:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80034c4:	e003      	b.n	80034ce <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80034c6:	2301      	movs	r3, #1
 80034c8:	74fb      	strb	r3, [r7, #19]
      break;
 80034ca:	e000      	b.n	80034ce <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80034cc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80034ce:	7cfb      	ldrb	r3, [r7, #19]
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d10b      	bne.n	80034ec <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80034d4:	4b76      	ldr	r3, [pc, #472]	@ (80036b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80034d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80034da:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80034e2:	4973      	ldr	r1, [pc, #460]	@ (80036b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80034e4:	4313      	orrs	r3, r2
 80034e6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80034ea:	e001      	b.n	80034f0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80034ec:	7cfb      	ldrb	r3, [r7, #19]
 80034ee:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d041      	beq.n	8003580 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003500:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003504:	d02a      	beq.n	800355c <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8003506:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800350a:	d824      	bhi.n	8003556 <HAL_RCCEx_PeriphCLKConfig+0x106>
 800350c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003510:	d008      	beq.n	8003524 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003512:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003516:	d81e      	bhi.n	8003556 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003518:	2b00      	cmp	r3, #0
 800351a:	d00a      	beq.n	8003532 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 800351c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003520:	d010      	beq.n	8003544 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003522:	e018      	b.n	8003556 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003524:	4b62      	ldr	r3, [pc, #392]	@ (80036b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003526:	68db      	ldr	r3, [r3, #12]
 8003528:	4a61      	ldr	r2, [pc, #388]	@ (80036b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800352a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800352e:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003530:	e015      	b.n	800355e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	3304      	adds	r3, #4
 8003536:	2100      	movs	r1, #0
 8003538:	4618      	mov	r0, r3
 800353a:	f000 fa83 	bl	8003a44 <RCCEx_PLLSAI1_Config>
 800353e:	4603      	mov	r3, r0
 8003540:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003542:	e00c      	b.n	800355e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	3320      	adds	r3, #32
 8003548:	2100      	movs	r1, #0
 800354a:	4618      	mov	r0, r3
 800354c:	f000 fb6e 	bl	8003c2c <RCCEx_PLLSAI2_Config>
 8003550:	4603      	mov	r3, r0
 8003552:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003554:	e003      	b.n	800355e <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003556:	2301      	movs	r3, #1
 8003558:	74fb      	strb	r3, [r7, #19]
      break;
 800355a:	e000      	b.n	800355e <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 800355c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800355e:	7cfb      	ldrb	r3, [r7, #19]
 8003560:	2b00      	cmp	r3, #0
 8003562:	d10b      	bne.n	800357c <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003564:	4b52      	ldr	r3, [pc, #328]	@ (80036b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003566:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800356a:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003572:	494f      	ldr	r1, [pc, #316]	@ (80036b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003574:	4313      	orrs	r3, r2
 8003576:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 800357a:	e001      	b.n	8003580 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800357c:	7cfb      	ldrb	r3, [r7, #19]
 800357e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003588:	2b00      	cmp	r3, #0
 800358a:	f000 80a0 	beq.w	80036ce <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800358e:	2300      	movs	r3, #0
 8003590:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003592:	4b47      	ldr	r3, [pc, #284]	@ (80036b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003594:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003596:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800359a:	2b00      	cmp	r3, #0
 800359c:	d101      	bne.n	80035a2 <HAL_RCCEx_PeriphCLKConfig+0x152>
 800359e:	2301      	movs	r3, #1
 80035a0:	e000      	b.n	80035a4 <HAL_RCCEx_PeriphCLKConfig+0x154>
 80035a2:	2300      	movs	r3, #0
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d00d      	beq.n	80035c4 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80035a8:	4b41      	ldr	r3, [pc, #260]	@ (80036b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80035aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80035ac:	4a40      	ldr	r2, [pc, #256]	@ (80036b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80035ae:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80035b2:	6593      	str	r3, [r2, #88]	@ 0x58
 80035b4:	4b3e      	ldr	r3, [pc, #248]	@ (80036b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80035b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80035b8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80035bc:	60bb      	str	r3, [r7, #8]
 80035be:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80035c0:	2301      	movs	r3, #1
 80035c2:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80035c4:	4b3b      	ldr	r3, [pc, #236]	@ (80036b4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	4a3a      	ldr	r2, [pc, #232]	@ (80036b4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80035ca:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80035ce:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80035d0:	f7fe f966 	bl	80018a0 <HAL_GetTick>
 80035d4:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80035d6:	e009      	b.n	80035ec <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80035d8:	f7fe f962 	bl	80018a0 <HAL_GetTick>
 80035dc:	4602      	mov	r2, r0
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	1ad3      	subs	r3, r2, r3
 80035e2:	2b02      	cmp	r3, #2
 80035e4:	d902      	bls.n	80035ec <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80035e6:	2303      	movs	r3, #3
 80035e8:	74fb      	strb	r3, [r7, #19]
        break;
 80035ea:	e005      	b.n	80035f8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80035ec:	4b31      	ldr	r3, [pc, #196]	@ (80036b4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d0ef      	beq.n	80035d8 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80035f8:	7cfb      	ldrb	r3, [r7, #19]
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d15c      	bne.n	80036b8 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80035fe:	4b2c      	ldr	r3, [pc, #176]	@ (80036b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003600:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003604:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003608:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800360a:	697b      	ldr	r3, [r7, #20]
 800360c:	2b00      	cmp	r3, #0
 800360e:	d01f      	beq.n	8003650 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003616:	697a      	ldr	r2, [r7, #20]
 8003618:	429a      	cmp	r2, r3
 800361a:	d019      	beq.n	8003650 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800361c:	4b24      	ldr	r3, [pc, #144]	@ (80036b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800361e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003622:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003626:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003628:	4b21      	ldr	r3, [pc, #132]	@ (80036b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800362a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800362e:	4a20      	ldr	r2, [pc, #128]	@ (80036b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003630:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003634:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003638:	4b1d      	ldr	r3, [pc, #116]	@ (80036b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800363a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800363e:	4a1c      	ldr	r2, [pc, #112]	@ (80036b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003640:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003644:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003648:	4a19      	ldr	r2, [pc, #100]	@ (80036b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800364a:	697b      	ldr	r3, [r7, #20]
 800364c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003650:	697b      	ldr	r3, [r7, #20]
 8003652:	f003 0301 	and.w	r3, r3, #1
 8003656:	2b00      	cmp	r3, #0
 8003658:	d016      	beq.n	8003688 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800365a:	f7fe f921 	bl	80018a0 <HAL_GetTick>
 800365e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003660:	e00b      	b.n	800367a <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003662:	f7fe f91d 	bl	80018a0 <HAL_GetTick>
 8003666:	4602      	mov	r2, r0
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	1ad3      	subs	r3, r2, r3
 800366c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003670:	4293      	cmp	r3, r2
 8003672:	d902      	bls.n	800367a <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8003674:	2303      	movs	r3, #3
 8003676:	74fb      	strb	r3, [r7, #19]
            break;
 8003678:	e006      	b.n	8003688 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800367a:	4b0d      	ldr	r3, [pc, #52]	@ (80036b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800367c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003680:	f003 0302 	and.w	r3, r3, #2
 8003684:	2b00      	cmp	r3, #0
 8003686:	d0ec      	beq.n	8003662 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8003688:	7cfb      	ldrb	r3, [r7, #19]
 800368a:	2b00      	cmp	r3, #0
 800368c:	d10c      	bne.n	80036a8 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800368e:	4b08      	ldr	r3, [pc, #32]	@ (80036b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003690:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003694:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800369e:	4904      	ldr	r1, [pc, #16]	@ (80036b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80036a0:	4313      	orrs	r3, r2
 80036a2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80036a6:	e009      	b.n	80036bc <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80036a8:	7cfb      	ldrb	r3, [r7, #19]
 80036aa:	74bb      	strb	r3, [r7, #18]
 80036ac:	e006      	b.n	80036bc <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80036ae:	bf00      	nop
 80036b0:	40021000 	.word	0x40021000
 80036b4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80036b8:	7cfb      	ldrb	r3, [r7, #19]
 80036ba:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80036bc:	7c7b      	ldrb	r3, [r7, #17]
 80036be:	2b01      	cmp	r3, #1
 80036c0:	d105      	bne.n	80036ce <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80036c2:	4b9e      	ldr	r3, [pc, #632]	@ (800393c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80036c6:	4a9d      	ldr	r2, [pc, #628]	@ (800393c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036c8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80036cc:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	f003 0301 	and.w	r3, r3, #1
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d00a      	beq.n	80036f0 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80036da:	4b98      	ldr	r3, [pc, #608]	@ (800393c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80036e0:	f023 0203 	bic.w	r2, r3, #3
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80036e8:	4994      	ldr	r1, [pc, #592]	@ (800393c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036ea:	4313      	orrs	r3, r2
 80036ec:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	f003 0302 	and.w	r3, r3, #2
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d00a      	beq.n	8003712 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80036fc:	4b8f      	ldr	r3, [pc, #572]	@ (800393c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003702:	f023 020c 	bic.w	r2, r3, #12
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800370a:	498c      	ldr	r1, [pc, #560]	@ (800393c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800370c:	4313      	orrs	r3, r2
 800370e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	f003 0304 	and.w	r3, r3, #4
 800371a:	2b00      	cmp	r3, #0
 800371c:	d00a      	beq.n	8003734 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800371e:	4b87      	ldr	r3, [pc, #540]	@ (800393c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003720:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003724:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800372c:	4983      	ldr	r1, [pc, #524]	@ (800393c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800372e:	4313      	orrs	r3, r2
 8003730:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	f003 0308 	and.w	r3, r3, #8
 800373c:	2b00      	cmp	r3, #0
 800373e:	d00a      	beq.n	8003756 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003740:	4b7e      	ldr	r3, [pc, #504]	@ (800393c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003742:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003746:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800374e:	497b      	ldr	r1, [pc, #492]	@ (800393c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003750:	4313      	orrs	r3, r2
 8003752:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	f003 0310 	and.w	r3, r3, #16
 800375e:	2b00      	cmp	r3, #0
 8003760:	d00a      	beq.n	8003778 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003762:	4b76      	ldr	r3, [pc, #472]	@ (800393c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003764:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003768:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003770:	4972      	ldr	r1, [pc, #456]	@ (800393c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003772:	4313      	orrs	r3, r2
 8003774:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	f003 0320 	and.w	r3, r3, #32
 8003780:	2b00      	cmp	r3, #0
 8003782:	d00a      	beq.n	800379a <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003784:	4b6d      	ldr	r3, [pc, #436]	@ (800393c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003786:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800378a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003792:	496a      	ldr	r1, [pc, #424]	@ (800393c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003794:	4313      	orrs	r3, r2
 8003796:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d00a      	beq.n	80037bc <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80037a6:	4b65      	ldr	r3, [pc, #404]	@ (800393c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80037ac:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80037b4:	4961      	ldr	r1, [pc, #388]	@ (800393c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037b6:	4313      	orrs	r3, r2
 80037b8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d00a      	beq.n	80037de <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80037c8:	4b5c      	ldr	r3, [pc, #368]	@ (800393c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80037ce:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80037d6:	4959      	ldr	r1, [pc, #356]	@ (800393c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037d8:	4313      	orrs	r3, r2
 80037da:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d00a      	beq.n	8003800 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80037ea:	4b54      	ldr	r3, [pc, #336]	@ (800393c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80037f0:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80037f8:	4950      	ldr	r1, [pc, #320]	@ (800393c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037fa:	4313      	orrs	r3, r2
 80037fc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003808:	2b00      	cmp	r3, #0
 800380a:	d00a      	beq.n	8003822 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800380c:	4b4b      	ldr	r3, [pc, #300]	@ (800393c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800380e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003812:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800381a:	4948      	ldr	r1, [pc, #288]	@ (800393c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800381c:	4313      	orrs	r3, r2
 800381e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800382a:	2b00      	cmp	r3, #0
 800382c:	d00a      	beq.n	8003844 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800382e:	4b43      	ldr	r3, [pc, #268]	@ (800393c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003830:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003834:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800383c:	493f      	ldr	r1, [pc, #252]	@ (800393c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800383e:	4313      	orrs	r3, r2
 8003840:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800384c:	2b00      	cmp	r3, #0
 800384e:	d028      	beq.n	80038a2 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003850:	4b3a      	ldr	r3, [pc, #232]	@ (800393c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003852:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003856:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800385e:	4937      	ldr	r1, [pc, #220]	@ (800393c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003860:	4313      	orrs	r3, r2
 8003862:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800386a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800386e:	d106      	bne.n	800387e <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003870:	4b32      	ldr	r3, [pc, #200]	@ (800393c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003872:	68db      	ldr	r3, [r3, #12]
 8003874:	4a31      	ldr	r2, [pc, #196]	@ (800393c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003876:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800387a:	60d3      	str	r3, [r2, #12]
 800387c:	e011      	b.n	80038a2 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003882:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003886:	d10c      	bne.n	80038a2 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	3304      	adds	r3, #4
 800388c:	2101      	movs	r1, #1
 800388e:	4618      	mov	r0, r3
 8003890:	f000 f8d8 	bl	8003a44 <RCCEx_PLLSAI1_Config>
 8003894:	4603      	mov	r3, r0
 8003896:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003898:	7cfb      	ldrb	r3, [r7, #19]
 800389a:	2b00      	cmp	r3, #0
 800389c:	d001      	beq.n	80038a2 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 800389e:	7cfb      	ldrb	r3, [r7, #19]
 80038a0:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d028      	beq.n	8003900 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80038ae:	4b23      	ldr	r3, [pc, #140]	@ (800393c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80038b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80038b4:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80038bc:	491f      	ldr	r1, [pc, #124]	@ (800393c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80038be:	4313      	orrs	r3, r2
 80038c0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80038c8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80038cc:	d106      	bne.n	80038dc <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80038ce:	4b1b      	ldr	r3, [pc, #108]	@ (800393c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80038d0:	68db      	ldr	r3, [r3, #12]
 80038d2:	4a1a      	ldr	r2, [pc, #104]	@ (800393c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80038d4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80038d8:	60d3      	str	r3, [r2, #12]
 80038da:	e011      	b.n	8003900 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80038e0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80038e4:	d10c      	bne.n	8003900 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	3304      	adds	r3, #4
 80038ea:	2101      	movs	r1, #1
 80038ec:	4618      	mov	r0, r3
 80038ee:	f000 f8a9 	bl	8003a44 <RCCEx_PLLSAI1_Config>
 80038f2:	4603      	mov	r3, r0
 80038f4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80038f6:	7cfb      	ldrb	r3, [r7, #19]
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d001      	beq.n	8003900 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80038fc:	7cfb      	ldrb	r3, [r7, #19]
 80038fe:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003908:	2b00      	cmp	r3, #0
 800390a:	d02b      	beq.n	8003964 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800390c:	4b0b      	ldr	r3, [pc, #44]	@ (800393c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800390e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003912:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800391a:	4908      	ldr	r1, [pc, #32]	@ (800393c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800391c:	4313      	orrs	r3, r2
 800391e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003926:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800392a:	d109      	bne.n	8003940 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800392c:	4b03      	ldr	r3, [pc, #12]	@ (800393c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800392e:	68db      	ldr	r3, [r3, #12]
 8003930:	4a02      	ldr	r2, [pc, #8]	@ (800393c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003932:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003936:	60d3      	str	r3, [r2, #12]
 8003938:	e014      	b.n	8003964 <HAL_RCCEx_PeriphCLKConfig+0x514>
 800393a:	bf00      	nop
 800393c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003944:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003948:	d10c      	bne.n	8003964 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	3304      	adds	r3, #4
 800394e:	2101      	movs	r1, #1
 8003950:	4618      	mov	r0, r3
 8003952:	f000 f877 	bl	8003a44 <RCCEx_PLLSAI1_Config>
 8003956:	4603      	mov	r3, r0
 8003958:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800395a:	7cfb      	ldrb	r3, [r7, #19]
 800395c:	2b00      	cmp	r3, #0
 800395e:	d001      	beq.n	8003964 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8003960:	7cfb      	ldrb	r3, [r7, #19]
 8003962:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800396c:	2b00      	cmp	r3, #0
 800396e:	d02f      	beq.n	80039d0 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003970:	4b2b      	ldr	r3, [pc, #172]	@ (8003a20 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003972:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003976:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800397e:	4928      	ldr	r1, [pc, #160]	@ (8003a20 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003980:	4313      	orrs	r3, r2
 8003982:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800398a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800398e:	d10d      	bne.n	80039ac <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	3304      	adds	r3, #4
 8003994:	2102      	movs	r1, #2
 8003996:	4618      	mov	r0, r3
 8003998:	f000 f854 	bl	8003a44 <RCCEx_PLLSAI1_Config>
 800399c:	4603      	mov	r3, r0
 800399e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80039a0:	7cfb      	ldrb	r3, [r7, #19]
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d014      	beq.n	80039d0 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80039a6:	7cfb      	ldrb	r3, [r7, #19]
 80039a8:	74bb      	strb	r3, [r7, #18]
 80039aa:	e011      	b.n	80039d0 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80039b0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80039b4:	d10c      	bne.n	80039d0 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	3320      	adds	r3, #32
 80039ba:	2102      	movs	r1, #2
 80039bc:	4618      	mov	r0, r3
 80039be:	f000 f935 	bl	8003c2c <RCCEx_PLLSAI2_Config>
 80039c2:	4603      	mov	r3, r0
 80039c4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80039c6:	7cfb      	ldrb	r3, [r7, #19]
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d001      	beq.n	80039d0 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80039cc:	7cfb      	ldrb	r3, [r7, #19]
 80039ce:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d00a      	beq.n	80039f2 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80039dc:	4b10      	ldr	r3, [pc, #64]	@ (8003a20 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80039de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80039e2:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80039ea:	490d      	ldr	r1, [pc, #52]	@ (8003a20 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80039ec:	4313      	orrs	r3, r2
 80039ee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d00b      	beq.n	8003a16 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80039fe:	4b08      	ldr	r3, [pc, #32]	@ (8003a20 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003a00:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a04:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003a0e:	4904      	ldr	r1, [pc, #16]	@ (8003a20 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003a10:	4313      	orrs	r3, r2
 8003a12:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003a16:	7cbb      	ldrb	r3, [r7, #18]
}
 8003a18:	4618      	mov	r0, r3
 8003a1a:	3718      	adds	r7, #24
 8003a1c:	46bd      	mov	sp, r7
 8003a1e:	bd80      	pop	{r7, pc}
 8003a20:	40021000 	.word	0x40021000

08003a24 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8003a24:	b480      	push	{r7}
 8003a26:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8003a28:	4b05      	ldr	r3, [pc, #20]	@ (8003a40 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	4a04      	ldr	r2, [pc, #16]	@ (8003a40 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8003a2e:	f043 0304 	orr.w	r3, r3, #4
 8003a32:	6013      	str	r3, [r2, #0]
}
 8003a34:	bf00      	nop
 8003a36:	46bd      	mov	sp, r7
 8003a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a3c:	4770      	bx	lr
 8003a3e:	bf00      	nop
 8003a40:	40021000 	.word	0x40021000

08003a44 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003a44:	b580      	push	{r7, lr}
 8003a46:	b084      	sub	sp, #16
 8003a48:	af00      	add	r7, sp, #0
 8003a4a:	6078      	str	r0, [r7, #4]
 8003a4c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003a4e:	2300      	movs	r3, #0
 8003a50:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003a52:	4b75      	ldr	r3, [pc, #468]	@ (8003c28 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a54:	68db      	ldr	r3, [r3, #12]
 8003a56:	f003 0303 	and.w	r3, r3, #3
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d018      	beq.n	8003a90 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003a5e:	4b72      	ldr	r3, [pc, #456]	@ (8003c28 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a60:	68db      	ldr	r3, [r3, #12]
 8003a62:	f003 0203 	and.w	r2, r3, #3
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	429a      	cmp	r2, r3
 8003a6c:	d10d      	bne.n	8003a8a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
       ||
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d009      	beq.n	8003a8a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003a76:	4b6c      	ldr	r3, [pc, #432]	@ (8003c28 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a78:	68db      	ldr	r3, [r3, #12]
 8003a7a:	091b      	lsrs	r3, r3, #4
 8003a7c:	f003 0307 	and.w	r3, r3, #7
 8003a80:	1c5a      	adds	r2, r3, #1
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	685b      	ldr	r3, [r3, #4]
       ||
 8003a86:	429a      	cmp	r2, r3
 8003a88:	d047      	beq.n	8003b1a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003a8a:	2301      	movs	r3, #1
 8003a8c:	73fb      	strb	r3, [r7, #15]
 8003a8e:	e044      	b.n	8003b1a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	2b03      	cmp	r3, #3
 8003a96:	d018      	beq.n	8003aca <RCCEx_PLLSAI1_Config+0x86>
 8003a98:	2b03      	cmp	r3, #3
 8003a9a:	d825      	bhi.n	8003ae8 <RCCEx_PLLSAI1_Config+0xa4>
 8003a9c:	2b01      	cmp	r3, #1
 8003a9e:	d002      	beq.n	8003aa6 <RCCEx_PLLSAI1_Config+0x62>
 8003aa0:	2b02      	cmp	r3, #2
 8003aa2:	d009      	beq.n	8003ab8 <RCCEx_PLLSAI1_Config+0x74>
 8003aa4:	e020      	b.n	8003ae8 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003aa6:	4b60      	ldr	r3, [pc, #384]	@ (8003c28 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	f003 0302 	and.w	r3, r3, #2
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d11d      	bne.n	8003aee <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8003ab2:	2301      	movs	r3, #1
 8003ab4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003ab6:	e01a      	b.n	8003aee <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003ab8:	4b5b      	ldr	r3, [pc, #364]	@ (8003c28 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d116      	bne.n	8003af2 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003ac4:	2301      	movs	r3, #1
 8003ac6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003ac8:	e013      	b.n	8003af2 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003aca:	4b57      	ldr	r3, [pc, #348]	@ (8003c28 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d10f      	bne.n	8003af6 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003ad6:	4b54      	ldr	r3, [pc, #336]	@ (8003c28 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d109      	bne.n	8003af6 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8003ae2:	2301      	movs	r3, #1
 8003ae4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003ae6:	e006      	b.n	8003af6 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003ae8:	2301      	movs	r3, #1
 8003aea:	73fb      	strb	r3, [r7, #15]
      break;
 8003aec:	e004      	b.n	8003af8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003aee:	bf00      	nop
 8003af0:	e002      	b.n	8003af8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003af2:	bf00      	nop
 8003af4:	e000      	b.n	8003af8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003af6:	bf00      	nop
    }

    if(status == HAL_OK)
 8003af8:	7bfb      	ldrb	r3, [r7, #15]
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d10d      	bne.n	8003b1a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003afe:	4b4a      	ldr	r3, [pc, #296]	@ (8003c28 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003b00:	68db      	ldr	r3, [r3, #12]
 8003b02:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	6819      	ldr	r1, [r3, #0]
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	685b      	ldr	r3, [r3, #4]
 8003b0e:	3b01      	subs	r3, #1
 8003b10:	011b      	lsls	r3, r3, #4
 8003b12:	430b      	orrs	r3, r1
 8003b14:	4944      	ldr	r1, [pc, #272]	@ (8003c28 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003b16:	4313      	orrs	r3, r2
 8003b18:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003b1a:	7bfb      	ldrb	r3, [r7, #15]
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d17d      	bne.n	8003c1c <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003b20:	4b41      	ldr	r3, [pc, #260]	@ (8003c28 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	4a40      	ldr	r2, [pc, #256]	@ (8003c28 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003b26:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8003b2a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003b2c:	f7fd feb8 	bl	80018a0 <HAL_GetTick>
 8003b30:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003b32:	e009      	b.n	8003b48 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003b34:	f7fd feb4 	bl	80018a0 <HAL_GetTick>
 8003b38:	4602      	mov	r2, r0
 8003b3a:	68bb      	ldr	r3, [r7, #8]
 8003b3c:	1ad3      	subs	r3, r2, r3
 8003b3e:	2b02      	cmp	r3, #2
 8003b40:	d902      	bls.n	8003b48 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003b42:	2303      	movs	r3, #3
 8003b44:	73fb      	strb	r3, [r7, #15]
        break;
 8003b46:	e005      	b.n	8003b54 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003b48:	4b37      	ldr	r3, [pc, #220]	@ (8003c28 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d1ef      	bne.n	8003b34 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003b54:	7bfb      	ldrb	r3, [r7, #15]
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d160      	bne.n	8003c1c <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003b5a:	683b      	ldr	r3, [r7, #0]
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d111      	bne.n	8003b84 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003b60:	4b31      	ldr	r3, [pc, #196]	@ (8003c28 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003b62:	691b      	ldr	r3, [r3, #16]
 8003b64:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8003b68:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003b6c:	687a      	ldr	r2, [r7, #4]
 8003b6e:	6892      	ldr	r2, [r2, #8]
 8003b70:	0211      	lsls	r1, r2, #8
 8003b72:	687a      	ldr	r2, [r7, #4]
 8003b74:	68d2      	ldr	r2, [r2, #12]
 8003b76:	0912      	lsrs	r2, r2, #4
 8003b78:	0452      	lsls	r2, r2, #17
 8003b7a:	430a      	orrs	r2, r1
 8003b7c:	492a      	ldr	r1, [pc, #168]	@ (8003c28 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003b7e:	4313      	orrs	r3, r2
 8003b80:	610b      	str	r3, [r1, #16]
 8003b82:	e027      	b.n	8003bd4 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003b84:	683b      	ldr	r3, [r7, #0]
 8003b86:	2b01      	cmp	r3, #1
 8003b88:	d112      	bne.n	8003bb0 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003b8a:	4b27      	ldr	r3, [pc, #156]	@ (8003c28 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003b8c:	691b      	ldr	r3, [r3, #16]
 8003b8e:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8003b92:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003b96:	687a      	ldr	r2, [r7, #4]
 8003b98:	6892      	ldr	r2, [r2, #8]
 8003b9a:	0211      	lsls	r1, r2, #8
 8003b9c:	687a      	ldr	r2, [r7, #4]
 8003b9e:	6912      	ldr	r2, [r2, #16]
 8003ba0:	0852      	lsrs	r2, r2, #1
 8003ba2:	3a01      	subs	r2, #1
 8003ba4:	0552      	lsls	r2, r2, #21
 8003ba6:	430a      	orrs	r2, r1
 8003ba8:	491f      	ldr	r1, [pc, #124]	@ (8003c28 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003baa:	4313      	orrs	r3, r2
 8003bac:	610b      	str	r3, [r1, #16]
 8003bae:	e011      	b.n	8003bd4 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003bb0:	4b1d      	ldr	r3, [pc, #116]	@ (8003c28 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003bb2:	691b      	ldr	r3, [r3, #16]
 8003bb4:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8003bb8:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003bbc:	687a      	ldr	r2, [r7, #4]
 8003bbe:	6892      	ldr	r2, [r2, #8]
 8003bc0:	0211      	lsls	r1, r2, #8
 8003bc2:	687a      	ldr	r2, [r7, #4]
 8003bc4:	6952      	ldr	r2, [r2, #20]
 8003bc6:	0852      	lsrs	r2, r2, #1
 8003bc8:	3a01      	subs	r2, #1
 8003bca:	0652      	lsls	r2, r2, #25
 8003bcc:	430a      	orrs	r2, r1
 8003bce:	4916      	ldr	r1, [pc, #88]	@ (8003c28 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003bd0:	4313      	orrs	r3, r2
 8003bd2:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003bd4:	4b14      	ldr	r3, [pc, #80]	@ (8003c28 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	4a13      	ldr	r2, [pc, #76]	@ (8003c28 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003bda:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003bde:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003be0:	f7fd fe5e 	bl	80018a0 <HAL_GetTick>
 8003be4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003be6:	e009      	b.n	8003bfc <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003be8:	f7fd fe5a 	bl	80018a0 <HAL_GetTick>
 8003bec:	4602      	mov	r2, r0
 8003bee:	68bb      	ldr	r3, [r7, #8]
 8003bf0:	1ad3      	subs	r3, r2, r3
 8003bf2:	2b02      	cmp	r3, #2
 8003bf4:	d902      	bls.n	8003bfc <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8003bf6:	2303      	movs	r3, #3
 8003bf8:	73fb      	strb	r3, [r7, #15]
          break;
 8003bfa:	e005      	b.n	8003c08 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003bfc:	4b0a      	ldr	r3, [pc, #40]	@ (8003c28 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d0ef      	beq.n	8003be8 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8003c08:	7bfb      	ldrb	r3, [r7, #15]
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d106      	bne.n	8003c1c <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003c0e:	4b06      	ldr	r3, [pc, #24]	@ (8003c28 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003c10:	691a      	ldr	r2, [r3, #16]
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	699b      	ldr	r3, [r3, #24]
 8003c16:	4904      	ldr	r1, [pc, #16]	@ (8003c28 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003c18:	4313      	orrs	r3, r2
 8003c1a:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003c1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c1e:	4618      	mov	r0, r3
 8003c20:	3710      	adds	r7, #16
 8003c22:	46bd      	mov	sp, r7
 8003c24:	bd80      	pop	{r7, pc}
 8003c26:	bf00      	nop
 8003c28:	40021000 	.word	0x40021000

08003c2c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003c2c:	b580      	push	{r7, lr}
 8003c2e:	b084      	sub	sp, #16
 8003c30:	af00      	add	r7, sp, #0
 8003c32:	6078      	str	r0, [r7, #4]
 8003c34:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003c36:	2300      	movs	r3, #0
 8003c38:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003c3a:	4b6a      	ldr	r3, [pc, #424]	@ (8003de4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003c3c:	68db      	ldr	r3, [r3, #12]
 8003c3e:	f003 0303 	and.w	r3, r3, #3
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d018      	beq.n	8003c78 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8003c46:	4b67      	ldr	r3, [pc, #412]	@ (8003de4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003c48:	68db      	ldr	r3, [r3, #12]
 8003c4a:	f003 0203 	and.w	r2, r3, #3
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	429a      	cmp	r2, r3
 8003c54:	d10d      	bne.n	8003c72 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
       ||
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d009      	beq.n	8003c72 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8003c5e:	4b61      	ldr	r3, [pc, #388]	@ (8003de4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003c60:	68db      	ldr	r3, [r3, #12]
 8003c62:	091b      	lsrs	r3, r3, #4
 8003c64:	f003 0307 	and.w	r3, r3, #7
 8003c68:	1c5a      	adds	r2, r3, #1
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	685b      	ldr	r3, [r3, #4]
       ||
 8003c6e:	429a      	cmp	r2, r3
 8003c70:	d047      	beq.n	8003d02 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003c72:	2301      	movs	r3, #1
 8003c74:	73fb      	strb	r3, [r7, #15]
 8003c76:	e044      	b.n	8003d02 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	2b03      	cmp	r3, #3
 8003c7e:	d018      	beq.n	8003cb2 <RCCEx_PLLSAI2_Config+0x86>
 8003c80:	2b03      	cmp	r3, #3
 8003c82:	d825      	bhi.n	8003cd0 <RCCEx_PLLSAI2_Config+0xa4>
 8003c84:	2b01      	cmp	r3, #1
 8003c86:	d002      	beq.n	8003c8e <RCCEx_PLLSAI2_Config+0x62>
 8003c88:	2b02      	cmp	r3, #2
 8003c8a:	d009      	beq.n	8003ca0 <RCCEx_PLLSAI2_Config+0x74>
 8003c8c:	e020      	b.n	8003cd0 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003c8e:	4b55      	ldr	r3, [pc, #340]	@ (8003de4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	f003 0302 	and.w	r3, r3, #2
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d11d      	bne.n	8003cd6 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8003c9a:	2301      	movs	r3, #1
 8003c9c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003c9e:	e01a      	b.n	8003cd6 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003ca0:	4b50      	ldr	r3, [pc, #320]	@ (8003de4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d116      	bne.n	8003cda <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8003cac:	2301      	movs	r3, #1
 8003cae:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003cb0:	e013      	b.n	8003cda <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003cb2:	4b4c      	ldr	r3, [pc, #304]	@ (8003de4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d10f      	bne.n	8003cde <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003cbe:	4b49      	ldr	r3, [pc, #292]	@ (8003de4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d109      	bne.n	8003cde <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8003cca:	2301      	movs	r3, #1
 8003ccc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003cce:	e006      	b.n	8003cde <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003cd0:	2301      	movs	r3, #1
 8003cd2:	73fb      	strb	r3, [r7, #15]
      break;
 8003cd4:	e004      	b.n	8003ce0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003cd6:	bf00      	nop
 8003cd8:	e002      	b.n	8003ce0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003cda:	bf00      	nop
 8003cdc:	e000      	b.n	8003ce0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003cde:	bf00      	nop
    }

    if(status == HAL_OK)
 8003ce0:	7bfb      	ldrb	r3, [r7, #15]
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d10d      	bne.n	8003d02 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003ce6:	4b3f      	ldr	r3, [pc, #252]	@ (8003de4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003ce8:	68db      	ldr	r3, [r3, #12]
 8003cea:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	6819      	ldr	r1, [r3, #0]
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	685b      	ldr	r3, [r3, #4]
 8003cf6:	3b01      	subs	r3, #1
 8003cf8:	011b      	lsls	r3, r3, #4
 8003cfa:	430b      	orrs	r3, r1
 8003cfc:	4939      	ldr	r1, [pc, #228]	@ (8003de4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003cfe:	4313      	orrs	r3, r2
 8003d00:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003d02:	7bfb      	ldrb	r3, [r7, #15]
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d167      	bne.n	8003dd8 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003d08:	4b36      	ldr	r3, [pc, #216]	@ (8003de4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	4a35      	ldr	r2, [pc, #212]	@ (8003de4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003d0e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003d12:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003d14:	f7fd fdc4 	bl	80018a0 <HAL_GetTick>
 8003d18:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003d1a:	e009      	b.n	8003d30 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003d1c:	f7fd fdc0 	bl	80018a0 <HAL_GetTick>
 8003d20:	4602      	mov	r2, r0
 8003d22:	68bb      	ldr	r3, [r7, #8]
 8003d24:	1ad3      	subs	r3, r2, r3
 8003d26:	2b02      	cmp	r3, #2
 8003d28:	d902      	bls.n	8003d30 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003d2a:	2303      	movs	r3, #3
 8003d2c:	73fb      	strb	r3, [r7, #15]
        break;
 8003d2e:	e005      	b.n	8003d3c <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003d30:	4b2c      	ldr	r3, [pc, #176]	@ (8003de4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d1ef      	bne.n	8003d1c <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003d3c:	7bfb      	ldrb	r3, [r7, #15]
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d14a      	bne.n	8003dd8 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003d42:	683b      	ldr	r3, [r7, #0]
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d111      	bne.n	8003d6c <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003d48:	4b26      	ldr	r3, [pc, #152]	@ (8003de4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003d4a:	695b      	ldr	r3, [r3, #20]
 8003d4c:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8003d50:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003d54:	687a      	ldr	r2, [r7, #4]
 8003d56:	6892      	ldr	r2, [r2, #8]
 8003d58:	0211      	lsls	r1, r2, #8
 8003d5a:	687a      	ldr	r2, [r7, #4]
 8003d5c:	68d2      	ldr	r2, [r2, #12]
 8003d5e:	0912      	lsrs	r2, r2, #4
 8003d60:	0452      	lsls	r2, r2, #17
 8003d62:	430a      	orrs	r2, r1
 8003d64:	491f      	ldr	r1, [pc, #124]	@ (8003de4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003d66:	4313      	orrs	r3, r2
 8003d68:	614b      	str	r3, [r1, #20]
 8003d6a:	e011      	b.n	8003d90 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003d6c:	4b1d      	ldr	r3, [pc, #116]	@ (8003de4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003d6e:	695b      	ldr	r3, [r3, #20]
 8003d70:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8003d74:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003d78:	687a      	ldr	r2, [r7, #4]
 8003d7a:	6892      	ldr	r2, [r2, #8]
 8003d7c:	0211      	lsls	r1, r2, #8
 8003d7e:	687a      	ldr	r2, [r7, #4]
 8003d80:	6912      	ldr	r2, [r2, #16]
 8003d82:	0852      	lsrs	r2, r2, #1
 8003d84:	3a01      	subs	r2, #1
 8003d86:	0652      	lsls	r2, r2, #25
 8003d88:	430a      	orrs	r2, r1
 8003d8a:	4916      	ldr	r1, [pc, #88]	@ (8003de4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003d8c:	4313      	orrs	r3, r2
 8003d8e:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003d90:	4b14      	ldr	r3, [pc, #80]	@ (8003de4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	4a13      	ldr	r2, [pc, #76]	@ (8003de4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003d96:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003d9a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d9c:	f7fd fd80 	bl	80018a0 <HAL_GetTick>
 8003da0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003da2:	e009      	b.n	8003db8 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003da4:	f7fd fd7c 	bl	80018a0 <HAL_GetTick>
 8003da8:	4602      	mov	r2, r0
 8003daa:	68bb      	ldr	r3, [r7, #8]
 8003dac:	1ad3      	subs	r3, r2, r3
 8003dae:	2b02      	cmp	r3, #2
 8003db0:	d902      	bls.n	8003db8 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8003db2:	2303      	movs	r3, #3
 8003db4:	73fb      	strb	r3, [r7, #15]
          break;
 8003db6:	e005      	b.n	8003dc4 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003db8:	4b0a      	ldr	r3, [pc, #40]	@ (8003de4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d0ef      	beq.n	8003da4 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8003dc4:	7bfb      	ldrb	r3, [r7, #15]
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d106      	bne.n	8003dd8 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003dca:	4b06      	ldr	r3, [pc, #24]	@ (8003de4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003dcc:	695a      	ldr	r2, [r3, #20]
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	695b      	ldr	r3, [r3, #20]
 8003dd2:	4904      	ldr	r1, [pc, #16]	@ (8003de4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003dd4:	4313      	orrs	r3, r2
 8003dd6:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003dd8:	7bfb      	ldrb	r3, [r7, #15]
}
 8003dda:	4618      	mov	r0, r3
 8003ddc:	3710      	adds	r7, #16
 8003dde:	46bd      	mov	sp, r7
 8003de0:	bd80      	pop	{r7, pc}
 8003de2:	bf00      	nop
 8003de4:	40021000 	.word	0x40021000

08003de8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003de8:	b580      	push	{r7, lr}
 8003dea:	b084      	sub	sp, #16
 8003dec:	af00      	add	r7, sp, #0
 8003dee:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d101      	bne.n	8003dfa <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003df6:	2301      	movs	r3, #1
 8003df8:	e095      	b.n	8003f26 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d108      	bne.n	8003e14 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	685b      	ldr	r3, [r3, #4]
 8003e06:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003e0a:	d009      	beq.n	8003e20 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	2200      	movs	r2, #0
 8003e10:	61da      	str	r2, [r3, #28]
 8003e12:	e005      	b.n	8003e20 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	2200      	movs	r2, #0
 8003e18:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	2200      	movs	r2, #0
 8003e1e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	2200      	movs	r2, #0
 8003e24:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003e2c:	b2db      	uxtb	r3, r3
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d106      	bne.n	8003e40 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	2200      	movs	r2, #0
 8003e36:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003e3a:	6878      	ldr	r0, [r7, #4]
 8003e3c:	f7fd f9b0 	bl	80011a0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	2202      	movs	r2, #2
 8003e44:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	681a      	ldr	r2, [r3, #0]
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003e56:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	68db      	ldr	r3, [r3, #12]
 8003e5c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003e60:	d902      	bls.n	8003e68 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003e62:	2300      	movs	r3, #0
 8003e64:	60fb      	str	r3, [r7, #12]
 8003e66:	e002      	b.n	8003e6e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003e68:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003e6c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	68db      	ldr	r3, [r3, #12]
 8003e72:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8003e76:	d007      	beq.n	8003e88 <HAL_SPI_Init+0xa0>
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	68db      	ldr	r3, [r3, #12]
 8003e7c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003e80:	d002      	beq.n	8003e88 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	2200      	movs	r2, #0
 8003e86:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	685b      	ldr	r3, [r3, #4]
 8003e8c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	689b      	ldr	r3, [r3, #8]
 8003e94:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8003e98:	431a      	orrs	r2, r3
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	691b      	ldr	r3, [r3, #16]
 8003e9e:	f003 0302 	and.w	r3, r3, #2
 8003ea2:	431a      	orrs	r2, r3
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	695b      	ldr	r3, [r3, #20]
 8003ea8:	f003 0301 	and.w	r3, r3, #1
 8003eac:	431a      	orrs	r2, r3
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	699b      	ldr	r3, [r3, #24]
 8003eb2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003eb6:	431a      	orrs	r2, r3
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	69db      	ldr	r3, [r3, #28]
 8003ebc:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003ec0:	431a      	orrs	r2, r3
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	6a1b      	ldr	r3, [r3, #32]
 8003ec6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003eca:	ea42 0103 	orr.w	r1, r2, r3
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ed2:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	430a      	orrs	r2, r1
 8003edc:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	699b      	ldr	r3, [r3, #24]
 8003ee2:	0c1b      	lsrs	r3, r3, #16
 8003ee4:	f003 0204 	and.w	r2, r3, #4
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003eec:	f003 0310 	and.w	r3, r3, #16
 8003ef0:	431a      	orrs	r2, r3
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003ef6:	f003 0308 	and.w	r3, r3, #8
 8003efa:	431a      	orrs	r2, r3
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	68db      	ldr	r3, [r3, #12]
 8003f00:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8003f04:	ea42 0103 	orr.w	r1, r2, r3
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	430a      	orrs	r2, r1
 8003f14:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	2200      	movs	r2, #0
 8003f1a:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	2201      	movs	r2, #1
 8003f20:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8003f24:	2300      	movs	r3, #0
}
 8003f26:	4618      	mov	r0, r3
 8003f28:	3710      	adds	r7, #16
 8003f2a:	46bd      	mov	sp, r7
 8003f2c:	bd80      	pop	{r7, pc}

08003f2e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003f2e:	b580      	push	{r7, lr}
 8003f30:	b082      	sub	sp, #8
 8003f32:	af00      	add	r7, sp, #0
 8003f34:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d101      	bne.n	8003f40 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003f3c:	2301      	movs	r3, #1
 8003f3e:	e049      	b.n	8003fd4 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003f46:	b2db      	uxtb	r3, r3
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d106      	bne.n	8003f5a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	2200      	movs	r2, #0
 8003f50:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003f54:	6878      	ldr	r0, [r7, #4]
 8003f56:	f7fd f967 	bl	8001228 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	2202      	movs	r2, #2
 8003f5e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681a      	ldr	r2, [r3, #0]
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	3304      	adds	r3, #4
 8003f6a:	4619      	mov	r1, r3
 8003f6c:	4610      	mov	r0, r2
 8003f6e:	f000 ff2d 	bl	8004dcc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	2201      	movs	r2, #1
 8003f76:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	2201      	movs	r2, #1
 8003f7e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	2201      	movs	r2, #1
 8003f86:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	2201      	movs	r2, #1
 8003f8e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	2201      	movs	r2, #1
 8003f96:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	2201      	movs	r2, #1
 8003f9e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	2201      	movs	r2, #1
 8003fa6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	2201      	movs	r2, #1
 8003fae:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	2201      	movs	r2, #1
 8003fb6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	2201      	movs	r2, #1
 8003fbe:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	2201      	movs	r2, #1
 8003fc6:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	2201      	movs	r2, #1
 8003fce:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003fd2:	2300      	movs	r3, #0
}
 8003fd4:	4618      	mov	r0, r3
 8003fd6:	3708      	adds	r7, #8
 8003fd8:	46bd      	mov	sp, r7
 8003fda:	bd80      	pop	{r7, pc}

08003fdc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003fdc:	b580      	push	{r7, lr}
 8003fde:	b082      	sub	sp, #8
 8003fe0:	af00      	add	r7, sp, #0
 8003fe2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d101      	bne.n	8003fee <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003fea:	2301      	movs	r3, #1
 8003fec:	e049      	b.n	8004082 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003ff4:	b2db      	uxtb	r3, r3
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d106      	bne.n	8004008 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	2200      	movs	r2, #0
 8003ffe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004002:	6878      	ldr	r0, [r7, #4]
 8004004:	f000 f841 	bl	800408a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	2202      	movs	r2, #2
 800400c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681a      	ldr	r2, [r3, #0]
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	3304      	adds	r3, #4
 8004018:	4619      	mov	r1, r3
 800401a:	4610      	mov	r0, r2
 800401c:	f000 fed6 	bl	8004dcc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	2201      	movs	r2, #1
 8004024:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	2201      	movs	r2, #1
 800402c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	2201      	movs	r2, #1
 8004034:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	2201      	movs	r2, #1
 800403c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	2201      	movs	r2, #1
 8004044:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	2201      	movs	r2, #1
 800404c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	2201      	movs	r2, #1
 8004054:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	2201      	movs	r2, #1
 800405c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	2201      	movs	r2, #1
 8004064:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	2201      	movs	r2, #1
 800406c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	2201      	movs	r2, #1
 8004074:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	2201      	movs	r2, #1
 800407c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004080:	2300      	movs	r3, #0
}
 8004082:	4618      	mov	r0, r3
 8004084:	3708      	adds	r7, #8
 8004086:	46bd      	mov	sp, r7
 8004088:	bd80      	pop	{r7, pc}

0800408a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800408a:	b480      	push	{r7}
 800408c:	b083      	sub	sp, #12
 800408e:	af00      	add	r7, sp, #0
 8004090:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004092:	bf00      	nop
 8004094:	370c      	adds	r7, #12
 8004096:	46bd      	mov	sp, r7
 8004098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800409c:	4770      	bx	lr
	...

080040a0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80040a0:	b580      	push	{r7, lr}
 80040a2:	b084      	sub	sp, #16
 80040a4:	af00      	add	r7, sp, #0
 80040a6:	6078      	str	r0, [r7, #4]
 80040a8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80040aa:	683b      	ldr	r3, [r7, #0]
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d109      	bne.n	80040c4 <HAL_TIM_PWM_Start+0x24>
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80040b6:	b2db      	uxtb	r3, r3
 80040b8:	2b01      	cmp	r3, #1
 80040ba:	bf14      	ite	ne
 80040bc:	2301      	movne	r3, #1
 80040be:	2300      	moveq	r3, #0
 80040c0:	b2db      	uxtb	r3, r3
 80040c2:	e03c      	b.n	800413e <HAL_TIM_PWM_Start+0x9e>
 80040c4:	683b      	ldr	r3, [r7, #0]
 80040c6:	2b04      	cmp	r3, #4
 80040c8:	d109      	bne.n	80040de <HAL_TIM_PWM_Start+0x3e>
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80040d0:	b2db      	uxtb	r3, r3
 80040d2:	2b01      	cmp	r3, #1
 80040d4:	bf14      	ite	ne
 80040d6:	2301      	movne	r3, #1
 80040d8:	2300      	moveq	r3, #0
 80040da:	b2db      	uxtb	r3, r3
 80040dc:	e02f      	b.n	800413e <HAL_TIM_PWM_Start+0x9e>
 80040de:	683b      	ldr	r3, [r7, #0]
 80040e0:	2b08      	cmp	r3, #8
 80040e2:	d109      	bne.n	80040f8 <HAL_TIM_PWM_Start+0x58>
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80040ea:	b2db      	uxtb	r3, r3
 80040ec:	2b01      	cmp	r3, #1
 80040ee:	bf14      	ite	ne
 80040f0:	2301      	movne	r3, #1
 80040f2:	2300      	moveq	r3, #0
 80040f4:	b2db      	uxtb	r3, r3
 80040f6:	e022      	b.n	800413e <HAL_TIM_PWM_Start+0x9e>
 80040f8:	683b      	ldr	r3, [r7, #0]
 80040fa:	2b0c      	cmp	r3, #12
 80040fc:	d109      	bne.n	8004112 <HAL_TIM_PWM_Start+0x72>
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004104:	b2db      	uxtb	r3, r3
 8004106:	2b01      	cmp	r3, #1
 8004108:	bf14      	ite	ne
 800410a:	2301      	movne	r3, #1
 800410c:	2300      	moveq	r3, #0
 800410e:	b2db      	uxtb	r3, r3
 8004110:	e015      	b.n	800413e <HAL_TIM_PWM_Start+0x9e>
 8004112:	683b      	ldr	r3, [r7, #0]
 8004114:	2b10      	cmp	r3, #16
 8004116:	d109      	bne.n	800412c <HAL_TIM_PWM_Start+0x8c>
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800411e:	b2db      	uxtb	r3, r3
 8004120:	2b01      	cmp	r3, #1
 8004122:	bf14      	ite	ne
 8004124:	2301      	movne	r3, #1
 8004126:	2300      	moveq	r3, #0
 8004128:	b2db      	uxtb	r3, r3
 800412a:	e008      	b.n	800413e <HAL_TIM_PWM_Start+0x9e>
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8004132:	b2db      	uxtb	r3, r3
 8004134:	2b01      	cmp	r3, #1
 8004136:	bf14      	ite	ne
 8004138:	2301      	movne	r3, #1
 800413a:	2300      	moveq	r3, #0
 800413c:	b2db      	uxtb	r3, r3
 800413e:	2b00      	cmp	r3, #0
 8004140:	d001      	beq.n	8004146 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8004142:	2301      	movs	r3, #1
 8004144:	e09c      	b.n	8004280 <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004146:	683b      	ldr	r3, [r7, #0]
 8004148:	2b00      	cmp	r3, #0
 800414a:	d104      	bne.n	8004156 <HAL_TIM_PWM_Start+0xb6>
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	2202      	movs	r2, #2
 8004150:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004154:	e023      	b.n	800419e <HAL_TIM_PWM_Start+0xfe>
 8004156:	683b      	ldr	r3, [r7, #0]
 8004158:	2b04      	cmp	r3, #4
 800415a:	d104      	bne.n	8004166 <HAL_TIM_PWM_Start+0xc6>
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	2202      	movs	r2, #2
 8004160:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004164:	e01b      	b.n	800419e <HAL_TIM_PWM_Start+0xfe>
 8004166:	683b      	ldr	r3, [r7, #0]
 8004168:	2b08      	cmp	r3, #8
 800416a:	d104      	bne.n	8004176 <HAL_TIM_PWM_Start+0xd6>
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	2202      	movs	r2, #2
 8004170:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004174:	e013      	b.n	800419e <HAL_TIM_PWM_Start+0xfe>
 8004176:	683b      	ldr	r3, [r7, #0]
 8004178:	2b0c      	cmp	r3, #12
 800417a:	d104      	bne.n	8004186 <HAL_TIM_PWM_Start+0xe6>
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	2202      	movs	r2, #2
 8004180:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004184:	e00b      	b.n	800419e <HAL_TIM_PWM_Start+0xfe>
 8004186:	683b      	ldr	r3, [r7, #0]
 8004188:	2b10      	cmp	r3, #16
 800418a:	d104      	bne.n	8004196 <HAL_TIM_PWM_Start+0xf6>
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	2202      	movs	r2, #2
 8004190:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004194:	e003      	b.n	800419e <HAL_TIM_PWM_Start+0xfe>
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	2202      	movs	r2, #2
 800419a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	2201      	movs	r2, #1
 80041a4:	6839      	ldr	r1, [r7, #0]
 80041a6:	4618      	mov	r0, r3
 80041a8:	f001 fb4a 	bl	8005840 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	4a35      	ldr	r2, [pc, #212]	@ (8004288 <HAL_TIM_PWM_Start+0x1e8>)
 80041b2:	4293      	cmp	r3, r2
 80041b4:	d013      	beq.n	80041de <HAL_TIM_PWM_Start+0x13e>
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	4a34      	ldr	r2, [pc, #208]	@ (800428c <HAL_TIM_PWM_Start+0x1ec>)
 80041bc:	4293      	cmp	r3, r2
 80041be:	d00e      	beq.n	80041de <HAL_TIM_PWM_Start+0x13e>
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	4a32      	ldr	r2, [pc, #200]	@ (8004290 <HAL_TIM_PWM_Start+0x1f0>)
 80041c6:	4293      	cmp	r3, r2
 80041c8:	d009      	beq.n	80041de <HAL_TIM_PWM_Start+0x13e>
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	4a31      	ldr	r2, [pc, #196]	@ (8004294 <HAL_TIM_PWM_Start+0x1f4>)
 80041d0:	4293      	cmp	r3, r2
 80041d2:	d004      	beq.n	80041de <HAL_TIM_PWM_Start+0x13e>
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	4a2f      	ldr	r2, [pc, #188]	@ (8004298 <HAL_TIM_PWM_Start+0x1f8>)
 80041da:	4293      	cmp	r3, r2
 80041dc:	d101      	bne.n	80041e2 <HAL_TIM_PWM_Start+0x142>
 80041de:	2301      	movs	r3, #1
 80041e0:	e000      	b.n	80041e4 <HAL_TIM_PWM_Start+0x144>
 80041e2:	2300      	movs	r3, #0
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d007      	beq.n	80041f8 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80041f6:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	4a22      	ldr	r2, [pc, #136]	@ (8004288 <HAL_TIM_PWM_Start+0x1e8>)
 80041fe:	4293      	cmp	r3, r2
 8004200:	d01d      	beq.n	800423e <HAL_TIM_PWM_Start+0x19e>
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800420a:	d018      	beq.n	800423e <HAL_TIM_PWM_Start+0x19e>
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	4a22      	ldr	r2, [pc, #136]	@ (800429c <HAL_TIM_PWM_Start+0x1fc>)
 8004212:	4293      	cmp	r3, r2
 8004214:	d013      	beq.n	800423e <HAL_TIM_PWM_Start+0x19e>
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	4a21      	ldr	r2, [pc, #132]	@ (80042a0 <HAL_TIM_PWM_Start+0x200>)
 800421c:	4293      	cmp	r3, r2
 800421e:	d00e      	beq.n	800423e <HAL_TIM_PWM_Start+0x19e>
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	4a1f      	ldr	r2, [pc, #124]	@ (80042a4 <HAL_TIM_PWM_Start+0x204>)
 8004226:	4293      	cmp	r3, r2
 8004228:	d009      	beq.n	800423e <HAL_TIM_PWM_Start+0x19e>
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	4a17      	ldr	r2, [pc, #92]	@ (800428c <HAL_TIM_PWM_Start+0x1ec>)
 8004230:	4293      	cmp	r3, r2
 8004232:	d004      	beq.n	800423e <HAL_TIM_PWM_Start+0x19e>
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	4a15      	ldr	r2, [pc, #84]	@ (8004290 <HAL_TIM_PWM_Start+0x1f0>)
 800423a:	4293      	cmp	r3, r2
 800423c:	d115      	bne.n	800426a <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	689a      	ldr	r2, [r3, #8]
 8004244:	4b18      	ldr	r3, [pc, #96]	@ (80042a8 <HAL_TIM_PWM_Start+0x208>)
 8004246:	4013      	ands	r3, r2
 8004248:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	2b06      	cmp	r3, #6
 800424e:	d015      	beq.n	800427c <HAL_TIM_PWM_Start+0x1dc>
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004256:	d011      	beq.n	800427c <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	681a      	ldr	r2, [r3, #0]
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	f042 0201 	orr.w	r2, r2, #1
 8004266:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004268:	e008      	b.n	800427c <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	681a      	ldr	r2, [r3, #0]
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	f042 0201 	orr.w	r2, r2, #1
 8004278:	601a      	str	r2, [r3, #0]
 800427a:	e000      	b.n	800427e <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800427c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800427e:	2300      	movs	r3, #0
}
 8004280:	4618      	mov	r0, r3
 8004282:	3710      	adds	r7, #16
 8004284:	46bd      	mov	sp, r7
 8004286:	bd80      	pop	{r7, pc}
 8004288:	40012c00 	.word	0x40012c00
 800428c:	40013400 	.word	0x40013400
 8004290:	40014000 	.word	0x40014000
 8004294:	40014400 	.word	0x40014400
 8004298:	40014800 	.word	0x40014800
 800429c:	40000400 	.word	0x40000400
 80042a0:	40000800 	.word	0x40000800
 80042a4:	40000c00 	.word	0x40000c00
 80042a8:	00010007 	.word	0x00010007

080042ac <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80042ac:	b580      	push	{r7, lr}
 80042ae:	b082      	sub	sp, #8
 80042b0:	af00      	add	r7, sp, #0
 80042b2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d101      	bne.n	80042be <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80042ba:	2301      	movs	r3, #1
 80042bc:	e049      	b.n	8004352 <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80042c4:	b2db      	uxtb	r3, r3
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d106      	bne.n	80042d8 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	2200      	movs	r2, #0
 80042ce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80042d2:	6878      	ldr	r0, [r7, #4]
 80042d4:	f7fc ffe8 	bl	80012a8 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	2202      	movs	r2, #2
 80042dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681a      	ldr	r2, [r3, #0]
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	3304      	adds	r3, #4
 80042e8:	4619      	mov	r1, r3
 80042ea:	4610      	mov	r0, r2
 80042ec:	f000 fd6e 	bl	8004dcc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	2201      	movs	r2, #1
 80042f4:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	2201      	movs	r2, #1
 80042fc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	2201      	movs	r2, #1
 8004304:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	2201      	movs	r2, #1
 800430c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	2201      	movs	r2, #1
 8004314:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	2201      	movs	r2, #1
 800431c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	2201      	movs	r2, #1
 8004324:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	2201      	movs	r2, #1
 800432c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	2201      	movs	r2, #1
 8004334:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	2201      	movs	r2, #1
 800433c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	2201      	movs	r2, #1
 8004344:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	2201      	movs	r2, #1
 800434c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004350:	2300      	movs	r3, #0
}
 8004352:	4618      	mov	r0, r3
 8004354:	3708      	adds	r7, #8
 8004356:	46bd      	mov	sp, r7
 8004358:	bd80      	pop	{r7, pc}
	...

0800435c <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800435c:	b580      	push	{r7, lr}
 800435e:	b084      	sub	sp, #16
 8004360:	af00      	add	r7, sp, #0
 8004362:	6078      	str	r0, [r7, #4]
 8004364:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004366:	2300      	movs	r3, #0
 8004368:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800436a:	683b      	ldr	r3, [r7, #0]
 800436c:	2b00      	cmp	r3, #0
 800436e:	d104      	bne.n	800437a <HAL_TIM_IC_Start_IT+0x1e>
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004376:	b2db      	uxtb	r3, r3
 8004378:	e023      	b.n	80043c2 <HAL_TIM_IC_Start_IT+0x66>
 800437a:	683b      	ldr	r3, [r7, #0]
 800437c:	2b04      	cmp	r3, #4
 800437e:	d104      	bne.n	800438a <HAL_TIM_IC_Start_IT+0x2e>
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8004386:	b2db      	uxtb	r3, r3
 8004388:	e01b      	b.n	80043c2 <HAL_TIM_IC_Start_IT+0x66>
 800438a:	683b      	ldr	r3, [r7, #0]
 800438c:	2b08      	cmp	r3, #8
 800438e:	d104      	bne.n	800439a <HAL_TIM_IC_Start_IT+0x3e>
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004396:	b2db      	uxtb	r3, r3
 8004398:	e013      	b.n	80043c2 <HAL_TIM_IC_Start_IT+0x66>
 800439a:	683b      	ldr	r3, [r7, #0]
 800439c:	2b0c      	cmp	r3, #12
 800439e:	d104      	bne.n	80043aa <HAL_TIM_IC_Start_IT+0x4e>
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80043a6:	b2db      	uxtb	r3, r3
 80043a8:	e00b      	b.n	80043c2 <HAL_TIM_IC_Start_IT+0x66>
 80043aa:	683b      	ldr	r3, [r7, #0]
 80043ac:	2b10      	cmp	r3, #16
 80043ae:	d104      	bne.n	80043ba <HAL_TIM_IC_Start_IT+0x5e>
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80043b6:	b2db      	uxtb	r3, r3
 80043b8:	e003      	b.n	80043c2 <HAL_TIM_IC_Start_IT+0x66>
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80043c0:	b2db      	uxtb	r3, r3
 80043c2:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 80043c4:	683b      	ldr	r3, [r7, #0]
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d104      	bne.n	80043d4 <HAL_TIM_IC_Start_IT+0x78>
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80043d0:	b2db      	uxtb	r3, r3
 80043d2:	e013      	b.n	80043fc <HAL_TIM_IC_Start_IT+0xa0>
 80043d4:	683b      	ldr	r3, [r7, #0]
 80043d6:	2b04      	cmp	r3, #4
 80043d8:	d104      	bne.n	80043e4 <HAL_TIM_IC_Start_IT+0x88>
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80043e0:	b2db      	uxtb	r3, r3
 80043e2:	e00b      	b.n	80043fc <HAL_TIM_IC_Start_IT+0xa0>
 80043e4:	683b      	ldr	r3, [r7, #0]
 80043e6:	2b08      	cmp	r3, #8
 80043e8:	d104      	bne.n	80043f4 <HAL_TIM_IC_Start_IT+0x98>
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 80043f0:	b2db      	uxtb	r3, r3
 80043f2:	e003      	b.n	80043fc <HAL_TIM_IC_Start_IT+0xa0>
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 80043fa:	b2db      	uxtb	r3, r3
 80043fc:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 80043fe:	7bbb      	ldrb	r3, [r7, #14]
 8004400:	2b01      	cmp	r3, #1
 8004402:	d102      	bne.n	800440a <HAL_TIM_IC_Start_IT+0xae>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8004404:	7b7b      	ldrb	r3, [r7, #13]
 8004406:	2b01      	cmp	r3, #1
 8004408:	d001      	beq.n	800440e <HAL_TIM_IC_Start_IT+0xb2>
  {
    return HAL_ERROR;
 800440a:	2301      	movs	r3, #1
 800440c:	e0dd      	b.n	80045ca <HAL_TIM_IC_Start_IT+0x26e>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800440e:	683b      	ldr	r3, [r7, #0]
 8004410:	2b00      	cmp	r3, #0
 8004412:	d104      	bne.n	800441e <HAL_TIM_IC_Start_IT+0xc2>
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	2202      	movs	r2, #2
 8004418:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800441c:	e023      	b.n	8004466 <HAL_TIM_IC_Start_IT+0x10a>
 800441e:	683b      	ldr	r3, [r7, #0]
 8004420:	2b04      	cmp	r3, #4
 8004422:	d104      	bne.n	800442e <HAL_TIM_IC_Start_IT+0xd2>
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	2202      	movs	r2, #2
 8004428:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800442c:	e01b      	b.n	8004466 <HAL_TIM_IC_Start_IT+0x10a>
 800442e:	683b      	ldr	r3, [r7, #0]
 8004430:	2b08      	cmp	r3, #8
 8004432:	d104      	bne.n	800443e <HAL_TIM_IC_Start_IT+0xe2>
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	2202      	movs	r2, #2
 8004438:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800443c:	e013      	b.n	8004466 <HAL_TIM_IC_Start_IT+0x10a>
 800443e:	683b      	ldr	r3, [r7, #0]
 8004440:	2b0c      	cmp	r3, #12
 8004442:	d104      	bne.n	800444e <HAL_TIM_IC_Start_IT+0xf2>
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	2202      	movs	r2, #2
 8004448:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800444c:	e00b      	b.n	8004466 <HAL_TIM_IC_Start_IT+0x10a>
 800444e:	683b      	ldr	r3, [r7, #0]
 8004450:	2b10      	cmp	r3, #16
 8004452:	d104      	bne.n	800445e <HAL_TIM_IC_Start_IT+0x102>
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	2202      	movs	r2, #2
 8004458:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800445c:	e003      	b.n	8004466 <HAL_TIM_IC_Start_IT+0x10a>
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	2202      	movs	r2, #2
 8004462:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004466:	683b      	ldr	r3, [r7, #0]
 8004468:	2b00      	cmp	r3, #0
 800446a:	d104      	bne.n	8004476 <HAL_TIM_IC_Start_IT+0x11a>
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	2202      	movs	r2, #2
 8004470:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004474:	e013      	b.n	800449e <HAL_TIM_IC_Start_IT+0x142>
 8004476:	683b      	ldr	r3, [r7, #0]
 8004478:	2b04      	cmp	r3, #4
 800447a:	d104      	bne.n	8004486 <HAL_TIM_IC_Start_IT+0x12a>
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	2202      	movs	r2, #2
 8004480:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004484:	e00b      	b.n	800449e <HAL_TIM_IC_Start_IT+0x142>
 8004486:	683b      	ldr	r3, [r7, #0]
 8004488:	2b08      	cmp	r3, #8
 800448a:	d104      	bne.n	8004496 <HAL_TIM_IC_Start_IT+0x13a>
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	2202      	movs	r2, #2
 8004490:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004494:	e003      	b.n	800449e <HAL_TIM_IC_Start_IT+0x142>
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	2202      	movs	r2, #2
 800449a:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  switch (Channel)
 800449e:	683b      	ldr	r3, [r7, #0]
 80044a0:	2b0c      	cmp	r3, #12
 80044a2:	d841      	bhi.n	8004528 <HAL_TIM_IC_Start_IT+0x1cc>
 80044a4:	a201      	add	r2, pc, #4	@ (adr r2, 80044ac <HAL_TIM_IC_Start_IT+0x150>)
 80044a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044aa:	bf00      	nop
 80044ac:	080044e1 	.word	0x080044e1
 80044b0:	08004529 	.word	0x08004529
 80044b4:	08004529 	.word	0x08004529
 80044b8:	08004529 	.word	0x08004529
 80044bc:	080044f3 	.word	0x080044f3
 80044c0:	08004529 	.word	0x08004529
 80044c4:	08004529 	.word	0x08004529
 80044c8:	08004529 	.word	0x08004529
 80044cc:	08004505 	.word	0x08004505
 80044d0:	08004529 	.word	0x08004529
 80044d4:	08004529 	.word	0x08004529
 80044d8:	08004529 	.word	0x08004529
 80044dc:	08004517 	.word	0x08004517
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	68da      	ldr	r2, [r3, #12]
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	f042 0202 	orr.w	r2, r2, #2
 80044ee:	60da      	str	r2, [r3, #12]
      break;
 80044f0:	e01d      	b.n	800452e <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	68da      	ldr	r2, [r3, #12]
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	f042 0204 	orr.w	r2, r2, #4
 8004500:	60da      	str	r2, [r3, #12]
      break;
 8004502:	e014      	b.n	800452e <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	68da      	ldr	r2, [r3, #12]
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	f042 0208 	orr.w	r2, r2, #8
 8004512:	60da      	str	r2, [r3, #12]
      break;
 8004514:	e00b      	b.n	800452e <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	68da      	ldr	r2, [r3, #12]
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	f042 0210 	orr.w	r2, r2, #16
 8004524:	60da      	str	r2, [r3, #12]
      break;
 8004526:	e002      	b.n	800452e <HAL_TIM_IC_Start_IT+0x1d2>
    }

    default:
      status = HAL_ERROR;
 8004528:	2301      	movs	r3, #1
 800452a:	73fb      	strb	r3, [r7, #15]
      break;
 800452c:	bf00      	nop
  }

  if (status == HAL_OK)
 800452e:	7bfb      	ldrb	r3, [r7, #15]
 8004530:	2b00      	cmp	r3, #0
 8004532:	d149      	bne.n	80045c8 <HAL_TIM_IC_Start_IT+0x26c>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	2201      	movs	r2, #1
 800453a:	6839      	ldr	r1, [r7, #0]
 800453c:	4618      	mov	r0, r3
 800453e:	f001 f97f 	bl	8005840 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	4a23      	ldr	r2, [pc, #140]	@ (80045d4 <HAL_TIM_IC_Start_IT+0x278>)
 8004548:	4293      	cmp	r3, r2
 800454a:	d01d      	beq.n	8004588 <HAL_TIM_IC_Start_IT+0x22c>
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004554:	d018      	beq.n	8004588 <HAL_TIM_IC_Start_IT+0x22c>
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	4a1f      	ldr	r2, [pc, #124]	@ (80045d8 <HAL_TIM_IC_Start_IT+0x27c>)
 800455c:	4293      	cmp	r3, r2
 800455e:	d013      	beq.n	8004588 <HAL_TIM_IC_Start_IT+0x22c>
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	4a1d      	ldr	r2, [pc, #116]	@ (80045dc <HAL_TIM_IC_Start_IT+0x280>)
 8004566:	4293      	cmp	r3, r2
 8004568:	d00e      	beq.n	8004588 <HAL_TIM_IC_Start_IT+0x22c>
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	4a1c      	ldr	r2, [pc, #112]	@ (80045e0 <HAL_TIM_IC_Start_IT+0x284>)
 8004570:	4293      	cmp	r3, r2
 8004572:	d009      	beq.n	8004588 <HAL_TIM_IC_Start_IT+0x22c>
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	4a1a      	ldr	r2, [pc, #104]	@ (80045e4 <HAL_TIM_IC_Start_IT+0x288>)
 800457a:	4293      	cmp	r3, r2
 800457c:	d004      	beq.n	8004588 <HAL_TIM_IC_Start_IT+0x22c>
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	4a19      	ldr	r2, [pc, #100]	@ (80045e8 <HAL_TIM_IC_Start_IT+0x28c>)
 8004584:	4293      	cmp	r3, r2
 8004586:	d115      	bne.n	80045b4 <HAL_TIM_IC_Start_IT+0x258>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	689a      	ldr	r2, [r3, #8]
 800458e:	4b17      	ldr	r3, [pc, #92]	@ (80045ec <HAL_TIM_IC_Start_IT+0x290>)
 8004590:	4013      	ands	r3, r2
 8004592:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004594:	68bb      	ldr	r3, [r7, #8]
 8004596:	2b06      	cmp	r3, #6
 8004598:	d015      	beq.n	80045c6 <HAL_TIM_IC_Start_IT+0x26a>
 800459a:	68bb      	ldr	r3, [r7, #8]
 800459c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80045a0:	d011      	beq.n	80045c6 <HAL_TIM_IC_Start_IT+0x26a>
      {
        __HAL_TIM_ENABLE(htim);
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	681a      	ldr	r2, [r3, #0]
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	f042 0201 	orr.w	r2, r2, #1
 80045b0:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80045b2:	e008      	b.n	80045c6 <HAL_TIM_IC_Start_IT+0x26a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	681a      	ldr	r2, [r3, #0]
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	f042 0201 	orr.w	r2, r2, #1
 80045c2:	601a      	str	r2, [r3, #0]
 80045c4:	e000      	b.n	80045c8 <HAL_TIM_IC_Start_IT+0x26c>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80045c6:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 80045c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80045ca:	4618      	mov	r0, r3
 80045cc:	3710      	adds	r7, #16
 80045ce:	46bd      	mov	sp, r7
 80045d0:	bd80      	pop	{r7, pc}
 80045d2:	bf00      	nop
 80045d4:	40012c00 	.word	0x40012c00
 80045d8:	40000400 	.word	0x40000400
 80045dc:	40000800 	.word	0x40000800
 80045e0:	40000c00 	.word	0x40000c00
 80045e4:	40013400 	.word	0x40013400
 80045e8:	40014000 	.word	0x40014000
 80045ec:	00010007 	.word	0x00010007

080045f0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80045f0:	b580      	push	{r7, lr}
 80045f2:	b084      	sub	sp, #16
 80045f4:	af00      	add	r7, sp, #0
 80045f6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	68db      	ldr	r3, [r3, #12]
 80045fe:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	691b      	ldr	r3, [r3, #16]
 8004606:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004608:	68bb      	ldr	r3, [r7, #8]
 800460a:	f003 0302 	and.w	r3, r3, #2
 800460e:	2b00      	cmp	r3, #0
 8004610:	d020      	beq.n	8004654 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	f003 0302 	and.w	r3, r3, #2
 8004618:	2b00      	cmp	r3, #0
 800461a:	d01b      	beq.n	8004654 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	f06f 0202 	mvn.w	r2, #2
 8004624:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	2201      	movs	r2, #1
 800462a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	699b      	ldr	r3, [r3, #24]
 8004632:	f003 0303 	and.w	r3, r3, #3
 8004636:	2b00      	cmp	r3, #0
 8004638:	d003      	beq.n	8004642 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800463a:	6878      	ldr	r0, [r7, #4]
 800463c:	f7fc fc56 	bl	8000eec <HAL_TIM_IC_CaptureCallback>
 8004640:	e005      	b.n	800464e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004642:	6878      	ldr	r0, [r7, #4]
 8004644:	f000 fba4 	bl	8004d90 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004648:	6878      	ldr	r0, [r7, #4]
 800464a:	f000 fbab 	bl	8004da4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	2200      	movs	r2, #0
 8004652:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004654:	68bb      	ldr	r3, [r7, #8]
 8004656:	f003 0304 	and.w	r3, r3, #4
 800465a:	2b00      	cmp	r3, #0
 800465c:	d020      	beq.n	80046a0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	f003 0304 	and.w	r3, r3, #4
 8004664:	2b00      	cmp	r3, #0
 8004666:	d01b      	beq.n	80046a0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	f06f 0204 	mvn.w	r2, #4
 8004670:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	2202      	movs	r2, #2
 8004676:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	699b      	ldr	r3, [r3, #24]
 800467e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004682:	2b00      	cmp	r3, #0
 8004684:	d003      	beq.n	800468e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004686:	6878      	ldr	r0, [r7, #4]
 8004688:	f7fc fc30 	bl	8000eec <HAL_TIM_IC_CaptureCallback>
 800468c:	e005      	b.n	800469a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800468e:	6878      	ldr	r0, [r7, #4]
 8004690:	f000 fb7e 	bl	8004d90 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004694:	6878      	ldr	r0, [r7, #4]
 8004696:	f000 fb85 	bl	8004da4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	2200      	movs	r2, #0
 800469e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80046a0:	68bb      	ldr	r3, [r7, #8]
 80046a2:	f003 0308 	and.w	r3, r3, #8
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d020      	beq.n	80046ec <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	f003 0308 	and.w	r3, r3, #8
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d01b      	beq.n	80046ec <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	f06f 0208 	mvn.w	r2, #8
 80046bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	2204      	movs	r2, #4
 80046c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	69db      	ldr	r3, [r3, #28]
 80046ca:	f003 0303 	and.w	r3, r3, #3
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d003      	beq.n	80046da <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80046d2:	6878      	ldr	r0, [r7, #4]
 80046d4:	f7fc fc0a 	bl	8000eec <HAL_TIM_IC_CaptureCallback>
 80046d8:	e005      	b.n	80046e6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80046da:	6878      	ldr	r0, [r7, #4]
 80046dc:	f000 fb58 	bl	8004d90 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80046e0:	6878      	ldr	r0, [r7, #4]
 80046e2:	f000 fb5f 	bl	8004da4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	2200      	movs	r2, #0
 80046ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80046ec:	68bb      	ldr	r3, [r7, #8]
 80046ee:	f003 0310 	and.w	r3, r3, #16
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d020      	beq.n	8004738 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	f003 0310 	and.w	r3, r3, #16
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d01b      	beq.n	8004738 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	f06f 0210 	mvn.w	r2, #16
 8004708:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	2208      	movs	r2, #8
 800470e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	69db      	ldr	r3, [r3, #28]
 8004716:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800471a:	2b00      	cmp	r3, #0
 800471c:	d003      	beq.n	8004726 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800471e:	6878      	ldr	r0, [r7, #4]
 8004720:	f7fc fbe4 	bl	8000eec <HAL_TIM_IC_CaptureCallback>
 8004724:	e005      	b.n	8004732 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004726:	6878      	ldr	r0, [r7, #4]
 8004728:	f000 fb32 	bl	8004d90 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800472c:	6878      	ldr	r0, [r7, #4]
 800472e:	f000 fb39 	bl	8004da4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	2200      	movs	r2, #0
 8004736:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004738:	68bb      	ldr	r3, [r7, #8]
 800473a:	f003 0301 	and.w	r3, r3, #1
 800473e:	2b00      	cmp	r3, #0
 8004740:	d00c      	beq.n	800475c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	f003 0301 	and.w	r3, r3, #1
 8004748:	2b00      	cmp	r3, #0
 800474a:	d007      	beq.n	800475c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	f06f 0201 	mvn.w	r2, #1
 8004754:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004756:	6878      	ldr	r0, [r7, #4]
 8004758:	f000 fb10 	bl	8004d7c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800475c:	68bb      	ldr	r3, [r7, #8]
 800475e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004762:	2b00      	cmp	r3, #0
 8004764:	d104      	bne.n	8004770 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8004766:	68bb      	ldr	r3, [r7, #8]
 8004768:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800476c:	2b00      	cmp	r3, #0
 800476e:	d00c      	beq.n	800478a <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004776:	2b00      	cmp	r3, #0
 8004778:	d007      	beq.n	800478a <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8004782:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004784:	6878      	ldr	r0, [r7, #4]
 8004786:	f001 f913 	bl	80059b0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800478a:	68bb      	ldr	r3, [r7, #8]
 800478c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004790:	2b00      	cmp	r3, #0
 8004792:	d00c      	beq.n	80047ae <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800479a:	2b00      	cmp	r3, #0
 800479c:	d007      	beq.n	80047ae <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80047a6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80047a8:	6878      	ldr	r0, [r7, #4]
 80047aa:	f001 f90b 	bl	80059c4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80047ae:	68bb      	ldr	r3, [r7, #8]
 80047b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d00c      	beq.n	80047d2 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d007      	beq.n	80047d2 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80047ca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80047cc:	6878      	ldr	r0, [r7, #4]
 80047ce:	f000 faf3 	bl	8004db8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80047d2:	68bb      	ldr	r3, [r7, #8]
 80047d4:	f003 0320 	and.w	r3, r3, #32
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d00c      	beq.n	80047f6 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	f003 0320 	and.w	r3, r3, #32
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d007      	beq.n	80047f6 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	f06f 0220 	mvn.w	r2, #32
 80047ee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80047f0:	6878      	ldr	r0, [r7, #4]
 80047f2:	f001 f8d3 	bl	800599c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80047f6:	bf00      	nop
 80047f8:	3710      	adds	r7, #16
 80047fa:	46bd      	mov	sp, r7
 80047fc:	bd80      	pop	{r7, pc}

080047fe <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80047fe:	b580      	push	{r7, lr}
 8004800:	b086      	sub	sp, #24
 8004802:	af00      	add	r7, sp, #0
 8004804:	60f8      	str	r0, [r7, #12]
 8004806:	60b9      	str	r1, [r7, #8]
 8004808:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800480a:	2300      	movs	r3, #0
 800480c:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004814:	2b01      	cmp	r3, #1
 8004816:	d101      	bne.n	800481c <HAL_TIM_IC_ConfigChannel+0x1e>
 8004818:	2302      	movs	r3, #2
 800481a:	e088      	b.n	800492e <HAL_TIM_IC_ConfigChannel+0x130>
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	2201      	movs	r2, #1
 8004820:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	2b00      	cmp	r3, #0
 8004828:	d11b      	bne.n	8004862 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800482e:	68bb      	ldr	r3, [r7, #8]
 8004830:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8004832:	68bb      	ldr	r3, [r7, #8]
 8004834:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8004836:	68bb      	ldr	r3, [r7, #8]
 8004838:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 800483a:	f000 fe43 	bl	80054c4 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	699a      	ldr	r2, [r3, #24]
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	f022 020c 	bic.w	r2, r2, #12
 800484c:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	6999      	ldr	r1, [r3, #24]
 8004854:	68bb      	ldr	r3, [r7, #8]
 8004856:	689a      	ldr	r2, [r3, #8]
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	430a      	orrs	r2, r1
 800485e:	619a      	str	r2, [r3, #24]
 8004860:	e060      	b.n	8004924 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	2b04      	cmp	r3, #4
 8004866:	d11c      	bne.n	80048a2 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800486c:	68bb      	ldr	r3, [r7, #8]
 800486e:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8004870:	68bb      	ldr	r3, [r7, #8]
 8004872:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8004874:	68bb      	ldr	r3, [r7, #8]
 8004876:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8004878:	f000 fec1 	bl	80055fe <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	699a      	ldr	r2, [r3, #24]
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 800488a:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	6999      	ldr	r1, [r3, #24]
 8004892:	68bb      	ldr	r3, [r7, #8]
 8004894:	689b      	ldr	r3, [r3, #8]
 8004896:	021a      	lsls	r2, r3, #8
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	430a      	orrs	r2, r1
 800489e:	619a      	str	r2, [r3, #24]
 80048a0:	e040      	b.n	8004924 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	2b08      	cmp	r3, #8
 80048a6:	d11b      	bne.n	80048e0 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80048ac:	68bb      	ldr	r3, [r7, #8]
 80048ae:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80048b0:	68bb      	ldr	r3, [r7, #8]
 80048b2:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80048b4:	68bb      	ldr	r3, [r7, #8]
 80048b6:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 80048b8:	f000 ff0e 	bl	80056d8 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	69da      	ldr	r2, [r3, #28]
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	f022 020c 	bic.w	r2, r2, #12
 80048ca:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	69d9      	ldr	r1, [r3, #28]
 80048d2:	68bb      	ldr	r3, [r7, #8]
 80048d4:	689a      	ldr	r2, [r3, #8]
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	430a      	orrs	r2, r1
 80048dc:	61da      	str	r2, [r3, #28]
 80048de:	e021      	b.n	8004924 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	2b0c      	cmp	r3, #12
 80048e4:	d11c      	bne.n	8004920 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80048ea:	68bb      	ldr	r3, [r7, #8]
 80048ec:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80048ee:	68bb      	ldr	r3, [r7, #8]
 80048f0:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80048f2:	68bb      	ldr	r3, [r7, #8]
 80048f4:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 80048f6:	f000 ff2b 	bl	8005750 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	69da      	ldr	r2, [r3, #28]
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8004908:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	69d9      	ldr	r1, [r3, #28]
 8004910:	68bb      	ldr	r3, [r7, #8]
 8004912:	689b      	ldr	r3, [r3, #8]
 8004914:	021a      	lsls	r2, r3, #8
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	430a      	orrs	r2, r1
 800491c:	61da      	str	r2, [r3, #28]
 800491e:	e001      	b.n	8004924 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8004920:	2301      	movs	r3, #1
 8004922:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	2200      	movs	r2, #0
 8004928:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800492c:	7dfb      	ldrb	r3, [r7, #23]
}
 800492e:	4618      	mov	r0, r3
 8004930:	3718      	adds	r7, #24
 8004932:	46bd      	mov	sp, r7
 8004934:	bd80      	pop	{r7, pc}
	...

08004938 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004938:	b580      	push	{r7, lr}
 800493a:	b086      	sub	sp, #24
 800493c:	af00      	add	r7, sp, #0
 800493e:	60f8      	str	r0, [r7, #12]
 8004940:	60b9      	str	r1, [r7, #8]
 8004942:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004944:	2300      	movs	r3, #0
 8004946:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800494e:	2b01      	cmp	r3, #1
 8004950:	d101      	bne.n	8004956 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004952:	2302      	movs	r3, #2
 8004954:	e0ff      	b.n	8004b56 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	2201      	movs	r2, #1
 800495a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	2b14      	cmp	r3, #20
 8004962:	f200 80f0 	bhi.w	8004b46 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8004966:	a201      	add	r2, pc, #4	@ (adr r2, 800496c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004968:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800496c:	080049c1 	.word	0x080049c1
 8004970:	08004b47 	.word	0x08004b47
 8004974:	08004b47 	.word	0x08004b47
 8004978:	08004b47 	.word	0x08004b47
 800497c:	08004a01 	.word	0x08004a01
 8004980:	08004b47 	.word	0x08004b47
 8004984:	08004b47 	.word	0x08004b47
 8004988:	08004b47 	.word	0x08004b47
 800498c:	08004a43 	.word	0x08004a43
 8004990:	08004b47 	.word	0x08004b47
 8004994:	08004b47 	.word	0x08004b47
 8004998:	08004b47 	.word	0x08004b47
 800499c:	08004a83 	.word	0x08004a83
 80049a0:	08004b47 	.word	0x08004b47
 80049a4:	08004b47 	.word	0x08004b47
 80049a8:	08004b47 	.word	0x08004b47
 80049ac:	08004ac5 	.word	0x08004ac5
 80049b0:	08004b47 	.word	0x08004b47
 80049b4:	08004b47 	.word	0x08004b47
 80049b8:	08004b47 	.word	0x08004b47
 80049bc:	08004b05 	.word	0x08004b05
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	68b9      	ldr	r1, [r7, #8]
 80049c6:	4618      	mov	r0, r3
 80049c8:	f000 faa6 	bl	8004f18 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	699a      	ldr	r2, [r3, #24]
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	f042 0208 	orr.w	r2, r2, #8
 80049da:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	699a      	ldr	r2, [r3, #24]
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	f022 0204 	bic.w	r2, r2, #4
 80049ea:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	6999      	ldr	r1, [r3, #24]
 80049f2:	68bb      	ldr	r3, [r7, #8]
 80049f4:	691a      	ldr	r2, [r3, #16]
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	430a      	orrs	r2, r1
 80049fc:	619a      	str	r2, [r3, #24]
      break;
 80049fe:	e0a5      	b.n	8004b4c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	68b9      	ldr	r1, [r7, #8]
 8004a06:	4618      	mov	r0, r3
 8004a08:	f000 fb16 	bl	8005038 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	699a      	ldr	r2, [r3, #24]
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004a1a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	699a      	ldr	r2, [r3, #24]
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004a2a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	6999      	ldr	r1, [r3, #24]
 8004a32:	68bb      	ldr	r3, [r7, #8]
 8004a34:	691b      	ldr	r3, [r3, #16]
 8004a36:	021a      	lsls	r2, r3, #8
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	430a      	orrs	r2, r1
 8004a3e:	619a      	str	r2, [r3, #24]
      break;
 8004a40:	e084      	b.n	8004b4c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	68b9      	ldr	r1, [r7, #8]
 8004a48:	4618      	mov	r0, r3
 8004a4a:	f000 fb7f 	bl	800514c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	69da      	ldr	r2, [r3, #28]
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	f042 0208 	orr.w	r2, r2, #8
 8004a5c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	69da      	ldr	r2, [r3, #28]
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	f022 0204 	bic.w	r2, r2, #4
 8004a6c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	69d9      	ldr	r1, [r3, #28]
 8004a74:	68bb      	ldr	r3, [r7, #8]
 8004a76:	691a      	ldr	r2, [r3, #16]
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	430a      	orrs	r2, r1
 8004a7e:	61da      	str	r2, [r3, #28]
      break;
 8004a80:	e064      	b.n	8004b4c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	68b9      	ldr	r1, [r7, #8]
 8004a88:	4618      	mov	r0, r3
 8004a8a:	f000 fbe7 	bl	800525c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	69da      	ldr	r2, [r3, #28]
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004a9c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	69da      	ldr	r2, [r3, #28]
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004aac:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	69d9      	ldr	r1, [r3, #28]
 8004ab4:	68bb      	ldr	r3, [r7, #8]
 8004ab6:	691b      	ldr	r3, [r3, #16]
 8004ab8:	021a      	lsls	r2, r3, #8
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	430a      	orrs	r2, r1
 8004ac0:	61da      	str	r2, [r3, #28]
      break;
 8004ac2:	e043      	b.n	8004b4c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	68b9      	ldr	r1, [r7, #8]
 8004aca:	4618      	mov	r0, r3
 8004acc:	f000 fc30 	bl	8005330 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	f042 0208 	orr.w	r2, r2, #8
 8004ade:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	f022 0204 	bic.w	r2, r2, #4
 8004aee:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8004af6:	68bb      	ldr	r3, [r7, #8]
 8004af8:	691a      	ldr	r2, [r3, #16]
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	430a      	orrs	r2, r1
 8004b00:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8004b02:	e023      	b.n	8004b4c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	68b9      	ldr	r1, [r7, #8]
 8004b0a:	4618      	mov	r0, r3
 8004b0c:	f000 fc74 	bl	80053f8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004b1e:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004b2e:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8004b36:	68bb      	ldr	r3, [r7, #8]
 8004b38:	691b      	ldr	r3, [r3, #16]
 8004b3a:	021a      	lsls	r2, r3, #8
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	430a      	orrs	r2, r1
 8004b42:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8004b44:	e002      	b.n	8004b4c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8004b46:	2301      	movs	r3, #1
 8004b48:	75fb      	strb	r3, [r7, #23]
      break;
 8004b4a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	2200      	movs	r2, #0
 8004b50:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004b54:	7dfb      	ldrb	r3, [r7, #23]
}
 8004b56:	4618      	mov	r0, r3
 8004b58:	3718      	adds	r7, #24
 8004b5a:	46bd      	mov	sp, r7
 8004b5c:	bd80      	pop	{r7, pc}
 8004b5e:	bf00      	nop

08004b60 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004b60:	b580      	push	{r7, lr}
 8004b62:	b084      	sub	sp, #16
 8004b64:	af00      	add	r7, sp, #0
 8004b66:	6078      	str	r0, [r7, #4]
 8004b68:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004b6a:	2300      	movs	r3, #0
 8004b6c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004b74:	2b01      	cmp	r3, #1
 8004b76:	d101      	bne.n	8004b7c <HAL_TIM_ConfigClockSource+0x1c>
 8004b78:	2302      	movs	r3, #2
 8004b7a:	e0b6      	b.n	8004cea <HAL_TIM_ConfigClockSource+0x18a>
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	2201      	movs	r2, #1
 8004b80:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	2202      	movs	r2, #2
 8004b88:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	689b      	ldr	r3, [r3, #8]
 8004b92:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004b94:	68bb      	ldr	r3, [r7, #8]
 8004b96:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004b9a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8004b9e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004ba0:	68bb      	ldr	r3, [r7, #8]
 8004ba2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004ba6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	68ba      	ldr	r2, [r7, #8]
 8004bae:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004bb0:	683b      	ldr	r3, [r7, #0]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004bb8:	d03e      	beq.n	8004c38 <HAL_TIM_ConfigClockSource+0xd8>
 8004bba:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004bbe:	f200 8087 	bhi.w	8004cd0 <HAL_TIM_ConfigClockSource+0x170>
 8004bc2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004bc6:	f000 8086 	beq.w	8004cd6 <HAL_TIM_ConfigClockSource+0x176>
 8004bca:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004bce:	d87f      	bhi.n	8004cd0 <HAL_TIM_ConfigClockSource+0x170>
 8004bd0:	2b70      	cmp	r3, #112	@ 0x70
 8004bd2:	d01a      	beq.n	8004c0a <HAL_TIM_ConfigClockSource+0xaa>
 8004bd4:	2b70      	cmp	r3, #112	@ 0x70
 8004bd6:	d87b      	bhi.n	8004cd0 <HAL_TIM_ConfigClockSource+0x170>
 8004bd8:	2b60      	cmp	r3, #96	@ 0x60
 8004bda:	d050      	beq.n	8004c7e <HAL_TIM_ConfigClockSource+0x11e>
 8004bdc:	2b60      	cmp	r3, #96	@ 0x60
 8004bde:	d877      	bhi.n	8004cd0 <HAL_TIM_ConfigClockSource+0x170>
 8004be0:	2b50      	cmp	r3, #80	@ 0x50
 8004be2:	d03c      	beq.n	8004c5e <HAL_TIM_ConfigClockSource+0xfe>
 8004be4:	2b50      	cmp	r3, #80	@ 0x50
 8004be6:	d873      	bhi.n	8004cd0 <HAL_TIM_ConfigClockSource+0x170>
 8004be8:	2b40      	cmp	r3, #64	@ 0x40
 8004bea:	d058      	beq.n	8004c9e <HAL_TIM_ConfigClockSource+0x13e>
 8004bec:	2b40      	cmp	r3, #64	@ 0x40
 8004bee:	d86f      	bhi.n	8004cd0 <HAL_TIM_ConfigClockSource+0x170>
 8004bf0:	2b30      	cmp	r3, #48	@ 0x30
 8004bf2:	d064      	beq.n	8004cbe <HAL_TIM_ConfigClockSource+0x15e>
 8004bf4:	2b30      	cmp	r3, #48	@ 0x30
 8004bf6:	d86b      	bhi.n	8004cd0 <HAL_TIM_ConfigClockSource+0x170>
 8004bf8:	2b20      	cmp	r3, #32
 8004bfa:	d060      	beq.n	8004cbe <HAL_TIM_ConfigClockSource+0x15e>
 8004bfc:	2b20      	cmp	r3, #32
 8004bfe:	d867      	bhi.n	8004cd0 <HAL_TIM_ConfigClockSource+0x170>
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d05c      	beq.n	8004cbe <HAL_TIM_ConfigClockSource+0x15e>
 8004c04:	2b10      	cmp	r3, #16
 8004c06:	d05a      	beq.n	8004cbe <HAL_TIM_ConfigClockSource+0x15e>
 8004c08:	e062      	b.n	8004cd0 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004c0e:	683b      	ldr	r3, [r7, #0]
 8004c10:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004c12:	683b      	ldr	r3, [r7, #0]
 8004c14:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004c16:	683b      	ldr	r3, [r7, #0]
 8004c18:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004c1a:	f000 fdf1 	bl	8005800 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	689b      	ldr	r3, [r3, #8]
 8004c24:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004c26:	68bb      	ldr	r3, [r7, #8]
 8004c28:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004c2c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	68ba      	ldr	r2, [r7, #8]
 8004c34:	609a      	str	r2, [r3, #8]
      break;
 8004c36:	e04f      	b.n	8004cd8 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004c3c:	683b      	ldr	r3, [r7, #0]
 8004c3e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004c40:	683b      	ldr	r3, [r7, #0]
 8004c42:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004c44:	683b      	ldr	r3, [r7, #0]
 8004c46:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004c48:	f000 fdda 	bl	8005800 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	689a      	ldr	r2, [r3, #8]
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004c5a:	609a      	str	r2, [r3, #8]
      break;
 8004c5c:	e03c      	b.n	8004cd8 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004c62:	683b      	ldr	r3, [r7, #0]
 8004c64:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004c66:	683b      	ldr	r3, [r7, #0]
 8004c68:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004c6a:	461a      	mov	r2, r3
 8004c6c:	f000 fc98 	bl	80055a0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	2150      	movs	r1, #80	@ 0x50
 8004c76:	4618      	mov	r0, r3
 8004c78:	f000 fda7 	bl	80057ca <TIM_ITRx_SetConfig>
      break;
 8004c7c:	e02c      	b.n	8004cd8 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004c82:	683b      	ldr	r3, [r7, #0]
 8004c84:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004c86:	683b      	ldr	r3, [r7, #0]
 8004c88:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004c8a:	461a      	mov	r2, r3
 8004c8c:	f000 fcf4 	bl	8005678 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	2160      	movs	r1, #96	@ 0x60
 8004c96:	4618      	mov	r0, r3
 8004c98:	f000 fd97 	bl	80057ca <TIM_ITRx_SetConfig>
      break;
 8004c9c:	e01c      	b.n	8004cd8 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004ca2:	683b      	ldr	r3, [r7, #0]
 8004ca4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004ca6:	683b      	ldr	r3, [r7, #0]
 8004ca8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004caa:	461a      	mov	r2, r3
 8004cac:	f000 fc78 	bl	80055a0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	2140      	movs	r1, #64	@ 0x40
 8004cb6:	4618      	mov	r0, r3
 8004cb8:	f000 fd87 	bl	80057ca <TIM_ITRx_SetConfig>
      break;
 8004cbc:	e00c      	b.n	8004cd8 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681a      	ldr	r2, [r3, #0]
 8004cc2:	683b      	ldr	r3, [r7, #0]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	4619      	mov	r1, r3
 8004cc8:	4610      	mov	r0, r2
 8004cca:	f000 fd7e 	bl	80057ca <TIM_ITRx_SetConfig>
      break;
 8004cce:	e003      	b.n	8004cd8 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8004cd0:	2301      	movs	r3, #1
 8004cd2:	73fb      	strb	r3, [r7, #15]
      break;
 8004cd4:	e000      	b.n	8004cd8 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8004cd6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	2201      	movs	r2, #1
 8004cdc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	2200      	movs	r2, #0
 8004ce4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004ce8:	7bfb      	ldrb	r3, [r7, #15]
}
 8004cea:	4618      	mov	r0, r3
 8004cec:	3710      	adds	r7, #16
 8004cee:	46bd      	mov	sp, r7
 8004cf0:	bd80      	pop	{r7, pc}
	...

08004cf4 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004cf4:	b480      	push	{r7}
 8004cf6:	b085      	sub	sp, #20
 8004cf8:	af00      	add	r7, sp, #0
 8004cfa:	6078      	str	r0, [r7, #4]
 8004cfc:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8004cfe:	2300      	movs	r3, #0
 8004d00:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8004d02:	683b      	ldr	r3, [r7, #0]
 8004d04:	2b0c      	cmp	r3, #12
 8004d06:	d831      	bhi.n	8004d6c <HAL_TIM_ReadCapturedValue+0x78>
 8004d08:	a201      	add	r2, pc, #4	@ (adr r2, 8004d10 <HAL_TIM_ReadCapturedValue+0x1c>)
 8004d0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d0e:	bf00      	nop
 8004d10:	08004d45 	.word	0x08004d45
 8004d14:	08004d6d 	.word	0x08004d6d
 8004d18:	08004d6d 	.word	0x08004d6d
 8004d1c:	08004d6d 	.word	0x08004d6d
 8004d20:	08004d4f 	.word	0x08004d4f
 8004d24:	08004d6d 	.word	0x08004d6d
 8004d28:	08004d6d 	.word	0x08004d6d
 8004d2c:	08004d6d 	.word	0x08004d6d
 8004d30:	08004d59 	.word	0x08004d59
 8004d34:	08004d6d 	.word	0x08004d6d
 8004d38:	08004d6d 	.word	0x08004d6d
 8004d3c:	08004d6d 	.word	0x08004d6d
 8004d40:	08004d63 	.word	0x08004d63
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004d4a:	60fb      	str	r3, [r7, #12]

      break;
 8004d4c:	e00f      	b.n	8004d6e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d54:	60fb      	str	r3, [r7, #12]

      break;
 8004d56:	e00a      	b.n	8004d6e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004d5e:	60fb      	str	r3, [r7, #12]

      break;
 8004d60:	e005      	b.n	8004d6e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d68:	60fb      	str	r3, [r7, #12]

      break;
 8004d6a:	e000      	b.n	8004d6e <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8004d6c:	bf00      	nop
  }

  return tmpreg;
 8004d6e:	68fb      	ldr	r3, [r7, #12]
}
 8004d70:	4618      	mov	r0, r3
 8004d72:	3714      	adds	r7, #20
 8004d74:	46bd      	mov	sp, r7
 8004d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d7a:	4770      	bx	lr

08004d7c <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004d7c:	b480      	push	{r7}
 8004d7e:	b083      	sub	sp, #12
 8004d80:	af00      	add	r7, sp, #0
 8004d82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8004d84:	bf00      	nop
 8004d86:	370c      	adds	r7, #12
 8004d88:	46bd      	mov	sp, r7
 8004d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d8e:	4770      	bx	lr

08004d90 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004d90:	b480      	push	{r7}
 8004d92:	b083      	sub	sp, #12
 8004d94:	af00      	add	r7, sp, #0
 8004d96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004d98:	bf00      	nop
 8004d9a:	370c      	adds	r7, #12
 8004d9c:	46bd      	mov	sp, r7
 8004d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da2:	4770      	bx	lr

08004da4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004da4:	b480      	push	{r7}
 8004da6:	b083      	sub	sp, #12
 8004da8:	af00      	add	r7, sp, #0
 8004daa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004dac:	bf00      	nop
 8004dae:	370c      	adds	r7, #12
 8004db0:	46bd      	mov	sp, r7
 8004db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db6:	4770      	bx	lr

08004db8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004db8:	b480      	push	{r7}
 8004dba:	b083      	sub	sp, #12
 8004dbc:	af00      	add	r7, sp, #0
 8004dbe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004dc0:	bf00      	nop
 8004dc2:	370c      	adds	r7, #12
 8004dc4:	46bd      	mov	sp, r7
 8004dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dca:	4770      	bx	lr

08004dcc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004dcc:	b480      	push	{r7}
 8004dce:	b085      	sub	sp, #20
 8004dd0:	af00      	add	r7, sp, #0
 8004dd2:	6078      	str	r0, [r7, #4]
 8004dd4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	4a46      	ldr	r2, [pc, #280]	@ (8004ef8 <TIM_Base_SetConfig+0x12c>)
 8004de0:	4293      	cmp	r3, r2
 8004de2:	d013      	beq.n	8004e0c <TIM_Base_SetConfig+0x40>
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004dea:	d00f      	beq.n	8004e0c <TIM_Base_SetConfig+0x40>
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	4a43      	ldr	r2, [pc, #268]	@ (8004efc <TIM_Base_SetConfig+0x130>)
 8004df0:	4293      	cmp	r3, r2
 8004df2:	d00b      	beq.n	8004e0c <TIM_Base_SetConfig+0x40>
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	4a42      	ldr	r2, [pc, #264]	@ (8004f00 <TIM_Base_SetConfig+0x134>)
 8004df8:	4293      	cmp	r3, r2
 8004dfa:	d007      	beq.n	8004e0c <TIM_Base_SetConfig+0x40>
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	4a41      	ldr	r2, [pc, #260]	@ (8004f04 <TIM_Base_SetConfig+0x138>)
 8004e00:	4293      	cmp	r3, r2
 8004e02:	d003      	beq.n	8004e0c <TIM_Base_SetConfig+0x40>
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	4a40      	ldr	r2, [pc, #256]	@ (8004f08 <TIM_Base_SetConfig+0x13c>)
 8004e08:	4293      	cmp	r3, r2
 8004e0a:	d108      	bne.n	8004e1e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004e12:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004e14:	683b      	ldr	r3, [r7, #0]
 8004e16:	685b      	ldr	r3, [r3, #4]
 8004e18:	68fa      	ldr	r2, [r7, #12]
 8004e1a:	4313      	orrs	r3, r2
 8004e1c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	4a35      	ldr	r2, [pc, #212]	@ (8004ef8 <TIM_Base_SetConfig+0x12c>)
 8004e22:	4293      	cmp	r3, r2
 8004e24:	d01f      	beq.n	8004e66 <TIM_Base_SetConfig+0x9a>
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004e2c:	d01b      	beq.n	8004e66 <TIM_Base_SetConfig+0x9a>
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	4a32      	ldr	r2, [pc, #200]	@ (8004efc <TIM_Base_SetConfig+0x130>)
 8004e32:	4293      	cmp	r3, r2
 8004e34:	d017      	beq.n	8004e66 <TIM_Base_SetConfig+0x9a>
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	4a31      	ldr	r2, [pc, #196]	@ (8004f00 <TIM_Base_SetConfig+0x134>)
 8004e3a:	4293      	cmp	r3, r2
 8004e3c:	d013      	beq.n	8004e66 <TIM_Base_SetConfig+0x9a>
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	4a30      	ldr	r2, [pc, #192]	@ (8004f04 <TIM_Base_SetConfig+0x138>)
 8004e42:	4293      	cmp	r3, r2
 8004e44:	d00f      	beq.n	8004e66 <TIM_Base_SetConfig+0x9a>
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	4a2f      	ldr	r2, [pc, #188]	@ (8004f08 <TIM_Base_SetConfig+0x13c>)
 8004e4a:	4293      	cmp	r3, r2
 8004e4c:	d00b      	beq.n	8004e66 <TIM_Base_SetConfig+0x9a>
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	4a2e      	ldr	r2, [pc, #184]	@ (8004f0c <TIM_Base_SetConfig+0x140>)
 8004e52:	4293      	cmp	r3, r2
 8004e54:	d007      	beq.n	8004e66 <TIM_Base_SetConfig+0x9a>
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	4a2d      	ldr	r2, [pc, #180]	@ (8004f10 <TIM_Base_SetConfig+0x144>)
 8004e5a:	4293      	cmp	r3, r2
 8004e5c:	d003      	beq.n	8004e66 <TIM_Base_SetConfig+0x9a>
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	4a2c      	ldr	r2, [pc, #176]	@ (8004f14 <TIM_Base_SetConfig+0x148>)
 8004e62:	4293      	cmp	r3, r2
 8004e64:	d108      	bne.n	8004e78 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004e6c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004e6e:	683b      	ldr	r3, [r7, #0]
 8004e70:	68db      	ldr	r3, [r3, #12]
 8004e72:	68fa      	ldr	r2, [r7, #12]
 8004e74:	4313      	orrs	r3, r2
 8004e76:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004e7e:	683b      	ldr	r3, [r7, #0]
 8004e80:	695b      	ldr	r3, [r3, #20]
 8004e82:	4313      	orrs	r3, r2
 8004e84:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	68fa      	ldr	r2, [r7, #12]
 8004e8a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004e8c:	683b      	ldr	r3, [r7, #0]
 8004e8e:	689a      	ldr	r2, [r3, #8]
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004e94:	683b      	ldr	r3, [r7, #0]
 8004e96:	681a      	ldr	r2, [r3, #0]
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	4a16      	ldr	r2, [pc, #88]	@ (8004ef8 <TIM_Base_SetConfig+0x12c>)
 8004ea0:	4293      	cmp	r3, r2
 8004ea2:	d00f      	beq.n	8004ec4 <TIM_Base_SetConfig+0xf8>
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	4a18      	ldr	r2, [pc, #96]	@ (8004f08 <TIM_Base_SetConfig+0x13c>)
 8004ea8:	4293      	cmp	r3, r2
 8004eaa:	d00b      	beq.n	8004ec4 <TIM_Base_SetConfig+0xf8>
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	4a17      	ldr	r2, [pc, #92]	@ (8004f0c <TIM_Base_SetConfig+0x140>)
 8004eb0:	4293      	cmp	r3, r2
 8004eb2:	d007      	beq.n	8004ec4 <TIM_Base_SetConfig+0xf8>
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	4a16      	ldr	r2, [pc, #88]	@ (8004f10 <TIM_Base_SetConfig+0x144>)
 8004eb8:	4293      	cmp	r3, r2
 8004eba:	d003      	beq.n	8004ec4 <TIM_Base_SetConfig+0xf8>
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	4a15      	ldr	r2, [pc, #84]	@ (8004f14 <TIM_Base_SetConfig+0x148>)
 8004ec0:	4293      	cmp	r3, r2
 8004ec2:	d103      	bne.n	8004ecc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004ec4:	683b      	ldr	r3, [r7, #0]
 8004ec6:	691a      	ldr	r2, [r3, #16]
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	2201      	movs	r2, #1
 8004ed0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	691b      	ldr	r3, [r3, #16]
 8004ed6:	f003 0301 	and.w	r3, r3, #1
 8004eda:	2b01      	cmp	r3, #1
 8004edc:	d105      	bne.n	8004eea <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	691b      	ldr	r3, [r3, #16]
 8004ee2:	f023 0201 	bic.w	r2, r3, #1
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	611a      	str	r2, [r3, #16]
  }
}
 8004eea:	bf00      	nop
 8004eec:	3714      	adds	r7, #20
 8004eee:	46bd      	mov	sp, r7
 8004ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef4:	4770      	bx	lr
 8004ef6:	bf00      	nop
 8004ef8:	40012c00 	.word	0x40012c00
 8004efc:	40000400 	.word	0x40000400
 8004f00:	40000800 	.word	0x40000800
 8004f04:	40000c00 	.word	0x40000c00
 8004f08:	40013400 	.word	0x40013400
 8004f0c:	40014000 	.word	0x40014000
 8004f10:	40014400 	.word	0x40014400
 8004f14:	40014800 	.word	0x40014800

08004f18 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004f18:	b480      	push	{r7}
 8004f1a:	b087      	sub	sp, #28
 8004f1c:	af00      	add	r7, sp, #0
 8004f1e:	6078      	str	r0, [r7, #4]
 8004f20:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	6a1b      	ldr	r3, [r3, #32]
 8004f26:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	6a1b      	ldr	r3, [r3, #32]
 8004f2c:	f023 0201 	bic.w	r2, r3, #1
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	685b      	ldr	r3, [r3, #4]
 8004f38:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	699b      	ldr	r3, [r3, #24]
 8004f3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004f46:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004f4a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	f023 0303 	bic.w	r3, r3, #3
 8004f52:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004f54:	683b      	ldr	r3, [r7, #0]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	68fa      	ldr	r2, [r7, #12]
 8004f5a:	4313      	orrs	r3, r2
 8004f5c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004f5e:	697b      	ldr	r3, [r7, #20]
 8004f60:	f023 0302 	bic.w	r3, r3, #2
 8004f64:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004f66:	683b      	ldr	r3, [r7, #0]
 8004f68:	689b      	ldr	r3, [r3, #8]
 8004f6a:	697a      	ldr	r2, [r7, #20]
 8004f6c:	4313      	orrs	r3, r2
 8004f6e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	4a2c      	ldr	r2, [pc, #176]	@ (8005024 <TIM_OC1_SetConfig+0x10c>)
 8004f74:	4293      	cmp	r3, r2
 8004f76:	d00f      	beq.n	8004f98 <TIM_OC1_SetConfig+0x80>
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	4a2b      	ldr	r2, [pc, #172]	@ (8005028 <TIM_OC1_SetConfig+0x110>)
 8004f7c:	4293      	cmp	r3, r2
 8004f7e:	d00b      	beq.n	8004f98 <TIM_OC1_SetConfig+0x80>
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	4a2a      	ldr	r2, [pc, #168]	@ (800502c <TIM_OC1_SetConfig+0x114>)
 8004f84:	4293      	cmp	r3, r2
 8004f86:	d007      	beq.n	8004f98 <TIM_OC1_SetConfig+0x80>
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	4a29      	ldr	r2, [pc, #164]	@ (8005030 <TIM_OC1_SetConfig+0x118>)
 8004f8c:	4293      	cmp	r3, r2
 8004f8e:	d003      	beq.n	8004f98 <TIM_OC1_SetConfig+0x80>
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	4a28      	ldr	r2, [pc, #160]	@ (8005034 <TIM_OC1_SetConfig+0x11c>)
 8004f94:	4293      	cmp	r3, r2
 8004f96:	d10c      	bne.n	8004fb2 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004f98:	697b      	ldr	r3, [r7, #20]
 8004f9a:	f023 0308 	bic.w	r3, r3, #8
 8004f9e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004fa0:	683b      	ldr	r3, [r7, #0]
 8004fa2:	68db      	ldr	r3, [r3, #12]
 8004fa4:	697a      	ldr	r2, [r7, #20]
 8004fa6:	4313      	orrs	r3, r2
 8004fa8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004faa:	697b      	ldr	r3, [r7, #20]
 8004fac:	f023 0304 	bic.w	r3, r3, #4
 8004fb0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	4a1b      	ldr	r2, [pc, #108]	@ (8005024 <TIM_OC1_SetConfig+0x10c>)
 8004fb6:	4293      	cmp	r3, r2
 8004fb8:	d00f      	beq.n	8004fda <TIM_OC1_SetConfig+0xc2>
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	4a1a      	ldr	r2, [pc, #104]	@ (8005028 <TIM_OC1_SetConfig+0x110>)
 8004fbe:	4293      	cmp	r3, r2
 8004fc0:	d00b      	beq.n	8004fda <TIM_OC1_SetConfig+0xc2>
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	4a19      	ldr	r2, [pc, #100]	@ (800502c <TIM_OC1_SetConfig+0x114>)
 8004fc6:	4293      	cmp	r3, r2
 8004fc8:	d007      	beq.n	8004fda <TIM_OC1_SetConfig+0xc2>
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	4a18      	ldr	r2, [pc, #96]	@ (8005030 <TIM_OC1_SetConfig+0x118>)
 8004fce:	4293      	cmp	r3, r2
 8004fd0:	d003      	beq.n	8004fda <TIM_OC1_SetConfig+0xc2>
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	4a17      	ldr	r2, [pc, #92]	@ (8005034 <TIM_OC1_SetConfig+0x11c>)
 8004fd6:	4293      	cmp	r3, r2
 8004fd8:	d111      	bne.n	8004ffe <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004fda:	693b      	ldr	r3, [r7, #16]
 8004fdc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004fe0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004fe2:	693b      	ldr	r3, [r7, #16]
 8004fe4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004fe8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004fea:	683b      	ldr	r3, [r7, #0]
 8004fec:	695b      	ldr	r3, [r3, #20]
 8004fee:	693a      	ldr	r2, [r7, #16]
 8004ff0:	4313      	orrs	r3, r2
 8004ff2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004ff4:	683b      	ldr	r3, [r7, #0]
 8004ff6:	699b      	ldr	r3, [r3, #24]
 8004ff8:	693a      	ldr	r2, [r7, #16]
 8004ffa:	4313      	orrs	r3, r2
 8004ffc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	693a      	ldr	r2, [r7, #16]
 8005002:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	68fa      	ldr	r2, [r7, #12]
 8005008:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800500a:	683b      	ldr	r3, [r7, #0]
 800500c:	685a      	ldr	r2, [r3, #4]
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	697a      	ldr	r2, [r7, #20]
 8005016:	621a      	str	r2, [r3, #32]
}
 8005018:	bf00      	nop
 800501a:	371c      	adds	r7, #28
 800501c:	46bd      	mov	sp, r7
 800501e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005022:	4770      	bx	lr
 8005024:	40012c00 	.word	0x40012c00
 8005028:	40013400 	.word	0x40013400
 800502c:	40014000 	.word	0x40014000
 8005030:	40014400 	.word	0x40014400
 8005034:	40014800 	.word	0x40014800

08005038 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005038:	b480      	push	{r7}
 800503a:	b087      	sub	sp, #28
 800503c:	af00      	add	r7, sp, #0
 800503e:	6078      	str	r0, [r7, #4]
 8005040:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	6a1b      	ldr	r3, [r3, #32]
 8005046:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	6a1b      	ldr	r3, [r3, #32]
 800504c:	f023 0210 	bic.w	r2, r3, #16
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	685b      	ldr	r3, [r3, #4]
 8005058:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	699b      	ldr	r3, [r3, #24]
 800505e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005066:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800506a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005072:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005074:	683b      	ldr	r3, [r7, #0]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	021b      	lsls	r3, r3, #8
 800507a:	68fa      	ldr	r2, [r7, #12]
 800507c:	4313      	orrs	r3, r2
 800507e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005080:	697b      	ldr	r3, [r7, #20]
 8005082:	f023 0320 	bic.w	r3, r3, #32
 8005086:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005088:	683b      	ldr	r3, [r7, #0]
 800508a:	689b      	ldr	r3, [r3, #8]
 800508c:	011b      	lsls	r3, r3, #4
 800508e:	697a      	ldr	r2, [r7, #20]
 8005090:	4313      	orrs	r3, r2
 8005092:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	4a28      	ldr	r2, [pc, #160]	@ (8005138 <TIM_OC2_SetConfig+0x100>)
 8005098:	4293      	cmp	r3, r2
 800509a:	d003      	beq.n	80050a4 <TIM_OC2_SetConfig+0x6c>
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	4a27      	ldr	r2, [pc, #156]	@ (800513c <TIM_OC2_SetConfig+0x104>)
 80050a0:	4293      	cmp	r3, r2
 80050a2:	d10d      	bne.n	80050c0 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80050a4:	697b      	ldr	r3, [r7, #20]
 80050a6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80050aa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80050ac:	683b      	ldr	r3, [r7, #0]
 80050ae:	68db      	ldr	r3, [r3, #12]
 80050b0:	011b      	lsls	r3, r3, #4
 80050b2:	697a      	ldr	r2, [r7, #20]
 80050b4:	4313      	orrs	r3, r2
 80050b6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80050b8:	697b      	ldr	r3, [r7, #20]
 80050ba:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80050be:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	4a1d      	ldr	r2, [pc, #116]	@ (8005138 <TIM_OC2_SetConfig+0x100>)
 80050c4:	4293      	cmp	r3, r2
 80050c6:	d00f      	beq.n	80050e8 <TIM_OC2_SetConfig+0xb0>
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	4a1c      	ldr	r2, [pc, #112]	@ (800513c <TIM_OC2_SetConfig+0x104>)
 80050cc:	4293      	cmp	r3, r2
 80050ce:	d00b      	beq.n	80050e8 <TIM_OC2_SetConfig+0xb0>
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	4a1b      	ldr	r2, [pc, #108]	@ (8005140 <TIM_OC2_SetConfig+0x108>)
 80050d4:	4293      	cmp	r3, r2
 80050d6:	d007      	beq.n	80050e8 <TIM_OC2_SetConfig+0xb0>
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	4a1a      	ldr	r2, [pc, #104]	@ (8005144 <TIM_OC2_SetConfig+0x10c>)
 80050dc:	4293      	cmp	r3, r2
 80050de:	d003      	beq.n	80050e8 <TIM_OC2_SetConfig+0xb0>
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	4a19      	ldr	r2, [pc, #100]	@ (8005148 <TIM_OC2_SetConfig+0x110>)
 80050e4:	4293      	cmp	r3, r2
 80050e6:	d113      	bne.n	8005110 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80050e8:	693b      	ldr	r3, [r7, #16]
 80050ea:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80050ee:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80050f0:	693b      	ldr	r3, [r7, #16]
 80050f2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80050f6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80050f8:	683b      	ldr	r3, [r7, #0]
 80050fa:	695b      	ldr	r3, [r3, #20]
 80050fc:	009b      	lsls	r3, r3, #2
 80050fe:	693a      	ldr	r2, [r7, #16]
 8005100:	4313      	orrs	r3, r2
 8005102:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005104:	683b      	ldr	r3, [r7, #0]
 8005106:	699b      	ldr	r3, [r3, #24]
 8005108:	009b      	lsls	r3, r3, #2
 800510a:	693a      	ldr	r2, [r7, #16]
 800510c:	4313      	orrs	r3, r2
 800510e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	693a      	ldr	r2, [r7, #16]
 8005114:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	68fa      	ldr	r2, [r7, #12]
 800511a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800511c:	683b      	ldr	r3, [r7, #0]
 800511e:	685a      	ldr	r2, [r3, #4]
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	697a      	ldr	r2, [r7, #20]
 8005128:	621a      	str	r2, [r3, #32]
}
 800512a:	bf00      	nop
 800512c:	371c      	adds	r7, #28
 800512e:	46bd      	mov	sp, r7
 8005130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005134:	4770      	bx	lr
 8005136:	bf00      	nop
 8005138:	40012c00 	.word	0x40012c00
 800513c:	40013400 	.word	0x40013400
 8005140:	40014000 	.word	0x40014000
 8005144:	40014400 	.word	0x40014400
 8005148:	40014800 	.word	0x40014800

0800514c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800514c:	b480      	push	{r7}
 800514e:	b087      	sub	sp, #28
 8005150:	af00      	add	r7, sp, #0
 8005152:	6078      	str	r0, [r7, #4]
 8005154:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	6a1b      	ldr	r3, [r3, #32]
 800515a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	6a1b      	ldr	r3, [r3, #32]
 8005160:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	685b      	ldr	r3, [r3, #4]
 800516c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	69db      	ldr	r3, [r3, #28]
 8005172:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800517a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800517e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	f023 0303 	bic.w	r3, r3, #3
 8005186:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005188:	683b      	ldr	r3, [r7, #0]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	68fa      	ldr	r2, [r7, #12]
 800518e:	4313      	orrs	r3, r2
 8005190:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005192:	697b      	ldr	r3, [r7, #20]
 8005194:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005198:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800519a:	683b      	ldr	r3, [r7, #0]
 800519c:	689b      	ldr	r3, [r3, #8]
 800519e:	021b      	lsls	r3, r3, #8
 80051a0:	697a      	ldr	r2, [r7, #20]
 80051a2:	4313      	orrs	r3, r2
 80051a4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	4a27      	ldr	r2, [pc, #156]	@ (8005248 <TIM_OC3_SetConfig+0xfc>)
 80051aa:	4293      	cmp	r3, r2
 80051ac:	d003      	beq.n	80051b6 <TIM_OC3_SetConfig+0x6a>
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	4a26      	ldr	r2, [pc, #152]	@ (800524c <TIM_OC3_SetConfig+0x100>)
 80051b2:	4293      	cmp	r3, r2
 80051b4:	d10d      	bne.n	80051d2 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80051b6:	697b      	ldr	r3, [r7, #20]
 80051b8:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80051bc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80051be:	683b      	ldr	r3, [r7, #0]
 80051c0:	68db      	ldr	r3, [r3, #12]
 80051c2:	021b      	lsls	r3, r3, #8
 80051c4:	697a      	ldr	r2, [r7, #20]
 80051c6:	4313      	orrs	r3, r2
 80051c8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80051ca:	697b      	ldr	r3, [r7, #20]
 80051cc:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80051d0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	4a1c      	ldr	r2, [pc, #112]	@ (8005248 <TIM_OC3_SetConfig+0xfc>)
 80051d6:	4293      	cmp	r3, r2
 80051d8:	d00f      	beq.n	80051fa <TIM_OC3_SetConfig+0xae>
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	4a1b      	ldr	r2, [pc, #108]	@ (800524c <TIM_OC3_SetConfig+0x100>)
 80051de:	4293      	cmp	r3, r2
 80051e0:	d00b      	beq.n	80051fa <TIM_OC3_SetConfig+0xae>
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	4a1a      	ldr	r2, [pc, #104]	@ (8005250 <TIM_OC3_SetConfig+0x104>)
 80051e6:	4293      	cmp	r3, r2
 80051e8:	d007      	beq.n	80051fa <TIM_OC3_SetConfig+0xae>
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	4a19      	ldr	r2, [pc, #100]	@ (8005254 <TIM_OC3_SetConfig+0x108>)
 80051ee:	4293      	cmp	r3, r2
 80051f0:	d003      	beq.n	80051fa <TIM_OC3_SetConfig+0xae>
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	4a18      	ldr	r2, [pc, #96]	@ (8005258 <TIM_OC3_SetConfig+0x10c>)
 80051f6:	4293      	cmp	r3, r2
 80051f8:	d113      	bne.n	8005222 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80051fa:	693b      	ldr	r3, [r7, #16]
 80051fc:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005200:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005202:	693b      	ldr	r3, [r7, #16]
 8005204:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005208:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800520a:	683b      	ldr	r3, [r7, #0]
 800520c:	695b      	ldr	r3, [r3, #20]
 800520e:	011b      	lsls	r3, r3, #4
 8005210:	693a      	ldr	r2, [r7, #16]
 8005212:	4313      	orrs	r3, r2
 8005214:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005216:	683b      	ldr	r3, [r7, #0]
 8005218:	699b      	ldr	r3, [r3, #24]
 800521a:	011b      	lsls	r3, r3, #4
 800521c:	693a      	ldr	r2, [r7, #16]
 800521e:	4313      	orrs	r3, r2
 8005220:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	693a      	ldr	r2, [r7, #16]
 8005226:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	68fa      	ldr	r2, [r7, #12]
 800522c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800522e:	683b      	ldr	r3, [r7, #0]
 8005230:	685a      	ldr	r2, [r3, #4]
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	697a      	ldr	r2, [r7, #20]
 800523a:	621a      	str	r2, [r3, #32]
}
 800523c:	bf00      	nop
 800523e:	371c      	adds	r7, #28
 8005240:	46bd      	mov	sp, r7
 8005242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005246:	4770      	bx	lr
 8005248:	40012c00 	.word	0x40012c00
 800524c:	40013400 	.word	0x40013400
 8005250:	40014000 	.word	0x40014000
 8005254:	40014400 	.word	0x40014400
 8005258:	40014800 	.word	0x40014800

0800525c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800525c:	b480      	push	{r7}
 800525e:	b087      	sub	sp, #28
 8005260:	af00      	add	r7, sp, #0
 8005262:	6078      	str	r0, [r7, #4]
 8005264:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	6a1b      	ldr	r3, [r3, #32]
 800526a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	6a1b      	ldr	r3, [r3, #32]
 8005270:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	685b      	ldr	r3, [r3, #4]
 800527c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	69db      	ldr	r3, [r3, #28]
 8005282:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800528a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800528e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005296:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005298:	683b      	ldr	r3, [r7, #0]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	021b      	lsls	r3, r3, #8
 800529e:	68fa      	ldr	r2, [r7, #12]
 80052a0:	4313      	orrs	r3, r2
 80052a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80052a4:	693b      	ldr	r3, [r7, #16]
 80052a6:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80052aa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80052ac:	683b      	ldr	r3, [r7, #0]
 80052ae:	689b      	ldr	r3, [r3, #8]
 80052b0:	031b      	lsls	r3, r3, #12
 80052b2:	693a      	ldr	r2, [r7, #16]
 80052b4:	4313      	orrs	r3, r2
 80052b6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	4a18      	ldr	r2, [pc, #96]	@ (800531c <TIM_OC4_SetConfig+0xc0>)
 80052bc:	4293      	cmp	r3, r2
 80052be:	d00f      	beq.n	80052e0 <TIM_OC4_SetConfig+0x84>
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	4a17      	ldr	r2, [pc, #92]	@ (8005320 <TIM_OC4_SetConfig+0xc4>)
 80052c4:	4293      	cmp	r3, r2
 80052c6:	d00b      	beq.n	80052e0 <TIM_OC4_SetConfig+0x84>
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	4a16      	ldr	r2, [pc, #88]	@ (8005324 <TIM_OC4_SetConfig+0xc8>)
 80052cc:	4293      	cmp	r3, r2
 80052ce:	d007      	beq.n	80052e0 <TIM_OC4_SetConfig+0x84>
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	4a15      	ldr	r2, [pc, #84]	@ (8005328 <TIM_OC4_SetConfig+0xcc>)
 80052d4:	4293      	cmp	r3, r2
 80052d6:	d003      	beq.n	80052e0 <TIM_OC4_SetConfig+0x84>
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	4a14      	ldr	r2, [pc, #80]	@ (800532c <TIM_OC4_SetConfig+0xd0>)
 80052dc:	4293      	cmp	r3, r2
 80052de:	d109      	bne.n	80052f4 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80052e0:	697b      	ldr	r3, [r7, #20]
 80052e2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80052e6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80052e8:	683b      	ldr	r3, [r7, #0]
 80052ea:	695b      	ldr	r3, [r3, #20]
 80052ec:	019b      	lsls	r3, r3, #6
 80052ee:	697a      	ldr	r2, [r7, #20]
 80052f0:	4313      	orrs	r3, r2
 80052f2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	697a      	ldr	r2, [r7, #20]
 80052f8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	68fa      	ldr	r2, [r7, #12]
 80052fe:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005300:	683b      	ldr	r3, [r7, #0]
 8005302:	685a      	ldr	r2, [r3, #4]
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	693a      	ldr	r2, [r7, #16]
 800530c:	621a      	str	r2, [r3, #32]
}
 800530e:	bf00      	nop
 8005310:	371c      	adds	r7, #28
 8005312:	46bd      	mov	sp, r7
 8005314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005318:	4770      	bx	lr
 800531a:	bf00      	nop
 800531c:	40012c00 	.word	0x40012c00
 8005320:	40013400 	.word	0x40013400
 8005324:	40014000 	.word	0x40014000
 8005328:	40014400 	.word	0x40014400
 800532c:	40014800 	.word	0x40014800

08005330 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005330:	b480      	push	{r7}
 8005332:	b087      	sub	sp, #28
 8005334:	af00      	add	r7, sp, #0
 8005336:	6078      	str	r0, [r7, #4]
 8005338:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	6a1b      	ldr	r3, [r3, #32]
 800533e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	6a1b      	ldr	r3, [r3, #32]
 8005344:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	685b      	ldr	r3, [r3, #4]
 8005350:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005356:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800535e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005362:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005364:	683b      	ldr	r3, [r7, #0]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	68fa      	ldr	r2, [r7, #12]
 800536a:	4313      	orrs	r3, r2
 800536c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800536e:	693b      	ldr	r3, [r7, #16]
 8005370:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8005374:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005376:	683b      	ldr	r3, [r7, #0]
 8005378:	689b      	ldr	r3, [r3, #8]
 800537a:	041b      	lsls	r3, r3, #16
 800537c:	693a      	ldr	r2, [r7, #16]
 800537e:	4313      	orrs	r3, r2
 8005380:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	4a17      	ldr	r2, [pc, #92]	@ (80053e4 <TIM_OC5_SetConfig+0xb4>)
 8005386:	4293      	cmp	r3, r2
 8005388:	d00f      	beq.n	80053aa <TIM_OC5_SetConfig+0x7a>
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	4a16      	ldr	r2, [pc, #88]	@ (80053e8 <TIM_OC5_SetConfig+0xb8>)
 800538e:	4293      	cmp	r3, r2
 8005390:	d00b      	beq.n	80053aa <TIM_OC5_SetConfig+0x7a>
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	4a15      	ldr	r2, [pc, #84]	@ (80053ec <TIM_OC5_SetConfig+0xbc>)
 8005396:	4293      	cmp	r3, r2
 8005398:	d007      	beq.n	80053aa <TIM_OC5_SetConfig+0x7a>
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	4a14      	ldr	r2, [pc, #80]	@ (80053f0 <TIM_OC5_SetConfig+0xc0>)
 800539e:	4293      	cmp	r3, r2
 80053a0:	d003      	beq.n	80053aa <TIM_OC5_SetConfig+0x7a>
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	4a13      	ldr	r2, [pc, #76]	@ (80053f4 <TIM_OC5_SetConfig+0xc4>)
 80053a6:	4293      	cmp	r3, r2
 80053a8:	d109      	bne.n	80053be <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80053aa:	697b      	ldr	r3, [r7, #20]
 80053ac:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80053b0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80053b2:	683b      	ldr	r3, [r7, #0]
 80053b4:	695b      	ldr	r3, [r3, #20]
 80053b6:	021b      	lsls	r3, r3, #8
 80053b8:	697a      	ldr	r2, [r7, #20]
 80053ba:	4313      	orrs	r3, r2
 80053bc:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	697a      	ldr	r2, [r7, #20]
 80053c2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	68fa      	ldr	r2, [r7, #12]
 80053c8:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80053ca:	683b      	ldr	r3, [r7, #0]
 80053cc:	685a      	ldr	r2, [r3, #4]
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	693a      	ldr	r2, [r7, #16]
 80053d6:	621a      	str	r2, [r3, #32]
}
 80053d8:	bf00      	nop
 80053da:	371c      	adds	r7, #28
 80053dc:	46bd      	mov	sp, r7
 80053de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e2:	4770      	bx	lr
 80053e4:	40012c00 	.word	0x40012c00
 80053e8:	40013400 	.word	0x40013400
 80053ec:	40014000 	.word	0x40014000
 80053f0:	40014400 	.word	0x40014400
 80053f4:	40014800 	.word	0x40014800

080053f8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80053f8:	b480      	push	{r7}
 80053fa:	b087      	sub	sp, #28
 80053fc:	af00      	add	r7, sp, #0
 80053fe:	6078      	str	r0, [r7, #4]
 8005400:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	6a1b      	ldr	r3, [r3, #32]
 8005406:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	6a1b      	ldr	r3, [r3, #32]
 800540c:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	685b      	ldr	r3, [r3, #4]
 8005418:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800541e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005426:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800542a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800542c:	683b      	ldr	r3, [r7, #0]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	021b      	lsls	r3, r3, #8
 8005432:	68fa      	ldr	r2, [r7, #12]
 8005434:	4313      	orrs	r3, r2
 8005436:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005438:	693b      	ldr	r3, [r7, #16]
 800543a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800543e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005440:	683b      	ldr	r3, [r7, #0]
 8005442:	689b      	ldr	r3, [r3, #8]
 8005444:	051b      	lsls	r3, r3, #20
 8005446:	693a      	ldr	r2, [r7, #16]
 8005448:	4313      	orrs	r3, r2
 800544a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	4a18      	ldr	r2, [pc, #96]	@ (80054b0 <TIM_OC6_SetConfig+0xb8>)
 8005450:	4293      	cmp	r3, r2
 8005452:	d00f      	beq.n	8005474 <TIM_OC6_SetConfig+0x7c>
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	4a17      	ldr	r2, [pc, #92]	@ (80054b4 <TIM_OC6_SetConfig+0xbc>)
 8005458:	4293      	cmp	r3, r2
 800545a:	d00b      	beq.n	8005474 <TIM_OC6_SetConfig+0x7c>
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	4a16      	ldr	r2, [pc, #88]	@ (80054b8 <TIM_OC6_SetConfig+0xc0>)
 8005460:	4293      	cmp	r3, r2
 8005462:	d007      	beq.n	8005474 <TIM_OC6_SetConfig+0x7c>
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	4a15      	ldr	r2, [pc, #84]	@ (80054bc <TIM_OC6_SetConfig+0xc4>)
 8005468:	4293      	cmp	r3, r2
 800546a:	d003      	beq.n	8005474 <TIM_OC6_SetConfig+0x7c>
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	4a14      	ldr	r2, [pc, #80]	@ (80054c0 <TIM_OC6_SetConfig+0xc8>)
 8005470:	4293      	cmp	r3, r2
 8005472:	d109      	bne.n	8005488 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005474:	697b      	ldr	r3, [r7, #20]
 8005476:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800547a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800547c:	683b      	ldr	r3, [r7, #0]
 800547e:	695b      	ldr	r3, [r3, #20]
 8005480:	029b      	lsls	r3, r3, #10
 8005482:	697a      	ldr	r2, [r7, #20]
 8005484:	4313      	orrs	r3, r2
 8005486:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	697a      	ldr	r2, [r7, #20]
 800548c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	68fa      	ldr	r2, [r7, #12]
 8005492:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005494:	683b      	ldr	r3, [r7, #0]
 8005496:	685a      	ldr	r2, [r3, #4]
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	693a      	ldr	r2, [r7, #16]
 80054a0:	621a      	str	r2, [r3, #32]
}
 80054a2:	bf00      	nop
 80054a4:	371c      	adds	r7, #28
 80054a6:	46bd      	mov	sp, r7
 80054a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ac:	4770      	bx	lr
 80054ae:	bf00      	nop
 80054b0:	40012c00 	.word	0x40012c00
 80054b4:	40013400 	.word	0x40013400
 80054b8:	40014000 	.word	0x40014000
 80054bc:	40014400 	.word	0x40014400
 80054c0:	40014800 	.word	0x40014800

080054c4 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80054c4:	b480      	push	{r7}
 80054c6:	b087      	sub	sp, #28
 80054c8:	af00      	add	r7, sp, #0
 80054ca:	60f8      	str	r0, [r7, #12]
 80054cc:	60b9      	str	r1, [r7, #8]
 80054ce:	607a      	str	r2, [r7, #4]
 80054d0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	6a1b      	ldr	r3, [r3, #32]
 80054d6:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	6a1b      	ldr	r3, [r3, #32]
 80054dc:	f023 0201 	bic.w	r2, r3, #1
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	699b      	ldr	r3, [r3, #24]
 80054e8:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	4a26      	ldr	r2, [pc, #152]	@ (8005588 <TIM_TI1_SetConfig+0xc4>)
 80054ee:	4293      	cmp	r3, r2
 80054f0:	d017      	beq.n	8005522 <TIM_TI1_SetConfig+0x5e>
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80054f8:	d013      	beq.n	8005522 <TIM_TI1_SetConfig+0x5e>
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	4a23      	ldr	r2, [pc, #140]	@ (800558c <TIM_TI1_SetConfig+0xc8>)
 80054fe:	4293      	cmp	r3, r2
 8005500:	d00f      	beq.n	8005522 <TIM_TI1_SetConfig+0x5e>
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	4a22      	ldr	r2, [pc, #136]	@ (8005590 <TIM_TI1_SetConfig+0xcc>)
 8005506:	4293      	cmp	r3, r2
 8005508:	d00b      	beq.n	8005522 <TIM_TI1_SetConfig+0x5e>
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	4a21      	ldr	r2, [pc, #132]	@ (8005594 <TIM_TI1_SetConfig+0xd0>)
 800550e:	4293      	cmp	r3, r2
 8005510:	d007      	beq.n	8005522 <TIM_TI1_SetConfig+0x5e>
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	4a20      	ldr	r2, [pc, #128]	@ (8005598 <TIM_TI1_SetConfig+0xd4>)
 8005516:	4293      	cmp	r3, r2
 8005518:	d003      	beq.n	8005522 <TIM_TI1_SetConfig+0x5e>
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	4a1f      	ldr	r2, [pc, #124]	@ (800559c <TIM_TI1_SetConfig+0xd8>)
 800551e:	4293      	cmp	r3, r2
 8005520:	d101      	bne.n	8005526 <TIM_TI1_SetConfig+0x62>
 8005522:	2301      	movs	r3, #1
 8005524:	e000      	b.n	8005528 <TIM_TI1_SetConfig+0x64>
 8005526:	2300      	movs	r3, #0
 8005528:	2b00      	cmp	r3, #0
 800552a:	d008      	beq.n	800553e <TIM_TI1_SetConfig+0x7a>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800552c:	697b      	ldr	r3, [r7, #20]
 800552e:	f023 0303 	bic.w	r3, r3, #3
 8005532:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8005534:	697a      	ldr	r2, [r7, #20]
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	4313      	orrs	r3, r2
 800553a:	617b      	str	r3, [r7, #20]
 800553c:	e003      	b.n	8005546 <TIM_TI1_SetConfig+0x82>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800553e:	697b      	ldr	r3, [r7, #20]
 8005540:	f043 0301 	orr.w	r3, r3, #1
 8005544:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005546:	697b      	ldr	r3, [r7, #20]
 8005548:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800554c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800554e:	683b      	ldr	r3, [r7, #0]
 8005550:	011b      	lsls	r3, r3, #4
 8005552:	b2db      	uxtb	r3, r3
 8005554:	697a      	ldr	r2, [r7, #20]
 8005556:	4313      	orrs	r3, r2
 8005558:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800555a:	693b      	ldr	r3, [r7, #16]
 800555c:	f023 030a 	bic.w	r3, r3, #10
 8005560:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8005562:	68bb      	ldr	r3, [r7, #8]
 8005564:	f003 030a 	and.w	r3, r3, #10
 8005568:	693a      	ldr	r2, [r7, #16]
 800556a:	4313      	orrs	r3, r2
 800556c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	697a      	ldr	r2, [r7, #20]
 8005572:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	693a      	ldr	r2, [r7, #16]
 8005578:	621a      	str	r2, [r3, #32]
}
 800557a:	bf00      	nop
 800557c:	371c      	adds	r7, #28
 800557e:	46bd      	mov	sp, r7
 8005580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005584:	4770      	bx	lr
 8005586:	bf00      	nop
 8005588:	40012c00 	.word	0x40012c00
 800558c:	40000400 	.word	0x40000400
 8005590:	40000800 	.word	0x40000800
 8005594:	40000c00 	.word	0x40000c00
 8005598:	40013400 	.word	0x40013400
 800559c:	40014000 	.word	0x40014000

080055a0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80055a0:	b480      	push	{r7}
 80055a2:	b087      	sub	sp, #28
 80055a4:	af00      	add	r7, sp, #0
 80055a6:	60f8      	str	r0, [r7, #12]
 80055a8:	60b9      	str	r1, [r7, #8]
 80055aa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	6a1b      	ldr	r3, [r3, #32]
 80055b0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	6a1b      	ldr	r3, [r3, #32]
 80055b6:	f023 0201 	bic.w	r2, r3, #1
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	699b      	ldr	r3, [r3, #24]
 80055c2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80055c4:	693b      	ldr	r3, [r7, #16]
 80055c6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80055ca:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	011b      	lsls	r3, r3, #4
 80055d0:	693a      	ldr	r2, [r7, #16]
 80055d2:	4313      	orrs	r3, r2
 80055d4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80055d6:	697b      	ldr	r3, [r7, #20]
 80055d8:	f023 030a 	bic.w	r3, r3, #10
 80055dc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80055de:	697a      	ldr	r2, [r7, #20]
 80055e0:	68bb      	ldr	r3, [r7, #8]
 80055e2:	4313      	orrs	r3, r2
 80055e4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	693a      	ldr	r2, [r7, #16]
 80055ea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	697a      	ldr	r2, [r7, #20]
 80055f0:	621a      	str	r2, [r3, #32]
}
 80055f2:	bf00      	nop
 80055f4:	371c      	adds	r7, #28
 80055f6:	46bd      	mov	sp, r7
 80055f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055fc:	4770      	bx	lr

080055fe <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80055fe:	b480      	push	{r7}
 8005600:	b087      	sub	sp, #28
 8005602:	af00      	add	r7, sp, #0
 8005604:	60f8      	str	r0, [r7, #12]
 8005606:	60b9      	str	r1, [r7, #8]
 8005608:	607a      	str	r2, [r7, #4]
 800560a:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	6a1b      	ldr	r3, [r3, #32]
 8005610:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	6a1b      	ldr	r3, [r3, #32]
 8005616:	f023 0210 	bic.w	r2, r3, #16
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	699b      	ldr	r3, [r3, #24]
 8005622:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8005624:	693b      	ldr	r3, [r7, #16]
 8005626:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800562a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	021b      	lsls	r3, r3, #8
 8005630:	693a      	ldr	r2, [r7, #16]
 8005632:	4313      	orrs	r3, r2
 8005634:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005636:	693b      	ldr	r3, [r7, #16]
 8005638:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800563c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800563e:	683b      	ldr	r3, [r7, #0]
 8005640:	031b      	lsls	r3, r3, #12
 8005642:	b29b      	uxth	r3, r3
 8005644:	693a      	ldr	r2, [r7, #16]
 8005646:	4313      	orrs	r3, r2
 8005648:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800564a:	697b      	ldr	r3, [r7, #20]
 800564c:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005650:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8005652:	68bb      	ldr	r3, [r7, #8]
 8005654:	011b      	lsls	r3, r3, #4
 8005656:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 800565a:	697a      	ldr	r2, [r7, #20]
 800565c:	4313      	orrs	r3, r2
 800565e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	693a      	ldr	r2, [r7, #16]
 8005664:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	697a      	ldr	r2, [r7, #20]
 800566a:	621a      	str	r2, [r3, #32]
}
 800566c:	bf00      	nop
 800566e:	371c      	adds	r7, #28
 8005670:	46bd      	mov	sp, r7
 8005672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005676:	4770      	bx	lr

08005678 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005678:	b480      	push	{r7}
 800567a:	b087      	sub	sp, #28
 800567c:	af00      	add	r7, sp, #0
 800567e:	60f8      	str	r0, [r7, #12]
 8005680:	60b9      	str	r1, [r7, #8]
 8005682:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	6a1b      	ldr	r3, [r3, #32]
 8005688:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	6a1b      	ldr	r3, [r3, #32]
 800568e:	f023 0210 	bic.w	r2, r3, #16
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	699b      	ldr	r3, [r3, #24]
 800569a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800569c:	693b      	ldr	r3, [r7, #16]
 800569e:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80056a2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	031b      	lsls	r3, r3, #12
 80056a8:	693a      	ldr	r2, [r7, #16]
 80056aa:	4313      	orrs	r3, r2
 80056ac:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80056ae:	697b      	ldr	r3, [r7, #20]
 80056b0:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80056b4:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80056b6:	68bb      	ldr	r3, [r7, #8]
 80056b8:	011b      	lsls	r3, r3, #4
 80056ba:	697a      	ldr	r2, [r7, #20]
 80056bc:	4313      	orrs	r3, r2
 80056be:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	693a      	ldr	r2, [r7, #16]
 80056c4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	697a      	ldr	r2, [r7, #20]
 80056ca:	621a      	str	r2, [r3, #32]
}
 80056cc:	bf00      	nop
 80056ce:	371c      	adds	r7, #28
 80056d0:	46bd      	mov	sp, r7
 80056d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d6:	4770      	bx	lr

080056d8 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80056d8:	b480      	push	{r7}
 80056da:	b087      	sub	sp, #28
 80056dc:	af00      	add	r7, sp, #0
 80056de:	60f8      	str	r0, [r7, #12]
 80056e0:	60b9      	str	r1, [r7, #8]
 80056e2:	607a      	str	r2, [r7, #4]
 80056e4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	6a1b      	ldr	r3, [r3, #32]
 80056ea:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	6a1b      	ldr	r3, [r3, #32]
 80056f0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	69db      	ldr	r3, [r3, #28]
 80056fc:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80056fe:	693b      	ldr	r3, [r7, #16]
 8005700:	f023 0303 	bic.w	r3, r3, #3
 8005704:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 8005706:	693a      	ldr	r2, [r7, #16]
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	4313      	orrs	r3, r2
 800570c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800570e:	693b      	ldr	r3, [r7, #16]
 8005710:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005714:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8005716:	683b      	ldr	r3, [r7, #0]
 8005718:	011b      	lsls	r3, r3, #4
 800571a:	b2db      	uxtb	r3, r3
 800571c:	693a      	ldr	r2, [r7, #16]
 800571e:	4313      	orrs	r3, r2
 8005720:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8005722:	697b      	ldr	r3, [r7, #20]
 8005724:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 8005728:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800572a:	68bb      	ldr	r3, [r7, #8]
 800572c:	021b      	lsls	r3, r3, #8
 800572e:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 8005732:	697a      	ldr	r2, [r7, #20]
 8005734:	4313      	orrs	r3, r2
 8005736:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	693a      	ldr	r2, [r7, #16]
 800573c:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	697a      	ldr	r2, [r7, #20]
 8005742:	621a      	str	r2, [r3, #32]
}
 8005744:	bf00      	nop
 8005746:	371c      	adds	r7, #28
 8005748:	46bd      	mov	sp, r7
 800574a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800574e:	4770      	bx	lr

08005750 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005750:	b480      	push	{r7}
 8005752:	b087      	sub	sp, #28
 8005754:	af00      	add	r7, sp, #0
 8005756:	60f8      	str	r0, [r7, #12]
 8005758:	60b9      	str	r1, [r7, #8]
 800575a:	607a      	str	r2, [r7, #4]
 800575c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	6a1b      	ldr	r3, [r3, #32]
 8005762:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	6a1b      	ldr	r3, [r3, #32]
 8005768:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	69db      	ldr	r3, [r3, #28]
 8005774:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8005776:	693b      	ldr	r3, [r7, #16]
 8005778:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800577c:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	021b      	lsls	r3, r3, #8
 8005782:	693a      	ldr	r2, [r7, #16]
 8005784:	4313      	orrs	r3, r2
 8005786:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8005788:	693b      	ldr	r3, [r7, #16]
 800578a:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800578e:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8005790:	683b      	ldr	r3, [r7, #0]
 8005792:	031b      	lsls	r3, r3, #12
 8005794:	b29b      	uxth	r3, r3
 8005796:	693a      	ldr	r2, [r7, #16]
 8005798:	4313      	orrs	r3, r2
 800579a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800579c:	697b      	ldr	r3, [r7, #20]
 800579e:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 80057a2:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80057a4:	68bb      	ldr	r3, [r7, #8]
 80057a6:	031b      	lsls	r3, r3, #12
 80057a8:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 80057ac:	697a      	ldr	r2, [r7, #20]
 80057ae:	4313      	orrs	r3, r2
 80057b0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	693a      	ldr	r2, [r7, #16]
 80057b6:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	697a      	ldr	r2, [r7, #20]
 80057bc:	621a      	str	r2, [r3, #32]
}
 80057be:	bf00      	nop
 80057c0:	371c      	adds	r7, #28
 80057c2:	46bd      	mov	sp, r7
 80057c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057c8:	4770      	bx	lr

080057ca <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80057ca:	b480      	push	{r7}
 80057cc:	b085      	sub	sp, #20
 80057ce:	af00      	add	r7, sp, #0
 80057d0:	6078      	str	r0, [r7, #4]
 80057d2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	689b      	ldr	r3, [r3, #8]
 80057d8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80057e0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80057e2:	683a      	ldr	r2, [r7, #0]
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	4313      	orrs	r3, r2
 80057e8:	f043 0307 	orr.w	r3, r3, #7
 80057ec:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	68fa      	ldr	r2, [r7, #12]
 80057f2:	609a      	str	r2, [r3, #8]
}
 80057f4:	bf00      	nop
 80057f6:	3714      	adds	r7, #20
 80057f8:	46bd      	mov	sp, r7
 80057fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057fe:	4770      	bx	lr

08005800 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005800:	b480      	push	{r7}
 8005802:	b087      	sub	sp, #28
 8005804:	af00      	add	r7, sp, #0
 8005806:	60f8      	str	r0, [r7, #12]
 8005808:	60b9      	str	r1, [r7, #8]
 800580a:	607a      	str	r2, [r7, #4]
 800580c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	689b      	ldr	r3, [r3, #8]
 8005812:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005814:	697b      	ldr	r3, [r7, #20]
 8005816:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800581a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800581c:	683b      	ldr	r3, [r7, #0]
 800581e:	021a      	lsls	r2, r3, #8
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	431a      	orrs	r2, r3
 8005824:	68bb      	ldr	r3, [r7, #8]
 8005826:	4313      	orrs	r3, r2
 8005828:	697a      	ldr	r2, [r7, #20]
 800582a:	4313      	orrs	r3, r2
 800582c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	697a      	ldr	r2, [r7, #20]
 8005832:	609a      	str	r2, [r3, #8]
}
 8005834:	bf00      	nop
 8005836:	371c      	adds	r7, #28
 8005838:	46bd      	mov	sp, r7
 800583a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800583e:	4770      	bx	lr

08005840 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005840:	b480      	push	{r7}
 8005842:	b087      	sub	sp, #28
 8005844:	af00      	add	r7, sp, #0
 8005846:	60f8      	str	r0, [r7, #12]
 8005848:	60b9      	str	r1, [r7, #8]
 800584a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800584c:	68bb      	ldr	r3, [r7, #8]
 800584e:	f003 031f 	and.w	r3, r3, #31
 8005852:	2201      	movs	r2, #1
 8005854:	fa02 f303 	lsl.w	r3, r2, r3
 8005858:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	6a1a      	ldr	r2, [r3, #32]
 800585e:	697b      	ldr	r3, [r7, #20]
 8005860:	43db      	mvns	r3, r3
 8005862:	401a      	ands	r2, r3
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	6a1a      	ldr	r2, [r3, #32]
 800586c:	68bb      	ldr	r3, [r7, #8]
 800586e:	f003 031f 	and.w	r3, r3, #31
 8005872:	6879      	ldr	r1, [r7, #4]
 8005874:	fa01 f303 	lsl.w	r3, r1, r3
 8005878:	431a      	orrs	r2, r3
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	621a      	str	r2, [r3, #32]
}
 800587e:	bf00      	nop
 8005880:	371c      	adds	r7, #28
 8005882:	46bd      	mov	sp, r7
 8005884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005888:	4770      	bx	lr
	...

0800588c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800588c:	b480      	push	{r7}
 800588e:	b085      	sub	sp, #20
 8005890:	af00      	add	r7, sp, #0
 8005892:	6078      	str	r0, [r7, #4]
 8005894:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800589c:	2b01      	cmp	r3, #1
 800589e:	d101      	bne.n	80058a4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80058a0:	2302      	movs	r3, #2
 80058a2:	e068      	b.n	8005976 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	2201      	movs	r2, #1
 80058a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	2202      	movs	r2, #2
 80058b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	685b      	ldr	r3, [r3, #4]
 80058ba:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	689b      	ldr	r3, [r3, #8]
 80058c2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	4a2e      	ldr	r2, [pc, #184]	@ (8005984 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80058ca:	4293      	cmp	r3, r2
 80058cc:	d004      	beq.n	80058d8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	4a2d      	ldr	r2, [pc, #180]	@ (8005988 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80058d4:	4293      	cmp	r3, r2
 80058d6:	d108      	bne.n	80058ea <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80058de:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80058e0:	683b      	ldr	r3, [r7, #0]
 80058e2:	685b      	ldr	r3, [r3, #4]
 80058e4:	68fa      	ldr	r2, [r7, #12]
 80058e6:	4313      	orrs	r3, r2
 80058e8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80058f0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80058f2:	683b      	ldr	r3, [r7, #0]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	68fa      	ldr	r2, [r7, #12]
 80058f8:	4313      	orrs	r3, r2
 80058fa:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	68fa      	ldr	r2, [r7, #12]
 8005902:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	4a1e      	ldr	r2, [pc, #120]	@ (8005984 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800590a:	4293      	cmp	r3, r2
 800590c:	d01d      	beq.n	800594a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005916:	d018      	beq.n	800594a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	4a1b      	ldr	r2, [pc, #108]	@ (800598c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800591e:	4293      	cmp	r3, r2
 8005920:	d013      	beq.n	800594a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	4a1a      	ldr	r2, [pc, #104]	@ (8005990 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005928:	4293      	cmp	r3, r2
 800592a:	d00e      	beq.n	800594a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	4a18      	ldr	r2, [pc, #96]	@ (8005994 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8005932:	4293      	cmp	r3, r2
 8005934:	d009      	beq.n	800594a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	4a13      	ldr	r2, [pc, #76]	@ (8005988 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800593c:	4293      	cmp	r3, r2
 800593e:	d004      	beq.n	800594a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	4a14      	ldr	r2, [pc, #80]	@ (8005998 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8005946:	4293      	cmp	r3, r2
 8005948:	d10c      	bne.n	8005964 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800594a:	68bb      	ldr	r3, [r7, #8]
 800594c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005950:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005952:	683b      	ldr	r3, [r7, #0]
 8005954:	689b      	ldr	r3, [r3, #8]
 8005956:	68ba      	ldr	r2, [r7, #8]
 8005958:	4313      	orrs	r3, r2
 800595a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	68ba      	ldr	r2, [r7, #8]
 8005962:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	2201      	movs	r2, #1
 8005968:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	2200      	movs	r2, #0
 8005970:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005974:	2300      	movs	r3, #0
}
 8005976:	4618      	mov	r0, r3
 8005978:	3714      	adds	r7, #20
 800597a:	46bd      	mov	sp, r7
 800597c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005980:	4770      	bx	lr
 8005982:	bf00      	nop
 8005984:	40012c00 	.word	0x40012c00
 8005988:	40013400 	.word	0x40013400
 800598c:	40000400 	.word	0x40000400
 8005990:	40000800 	.word	0x40000800
 8005994:	40000c00 	.word	0x40000c00
 8005998:	40014000 	.word	0x40014000

0800599c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800599c:	b480      	push	{r7}
 800599e:	b083      	sub	sp, #12
 80059a0:	af00      	add	r7, sp, #0
 80059a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80059a4:	bf00      	nop
 80059a6:	370c      	adds	r7, #12
 80059a8:	46bd      	mov	sp, r7
 80059aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ae:	4770      	bx	lr

080059b0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80059b0:	b480      	push	{r7}
 80059b2:	b083      	sub	sp, #12
 80059b4:	af00      	add	r7, sp, #0
 80059b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80059b8:	bf00      	nop
 80059ba:	370c      	adds	r7, #12
 80059bc:	46bd      	mov	sp, r7
 80059be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059c2:	4770      	bx	lr

080059c4 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80059c4:	b480      	push	{r7}
 80059c6:	b083      	sub	sp, #12
 80059c8:	af00      	add	r7, sp, #0
 80059ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80059cc:	bf00      	nop
 80059ce:	370c      	adds	r7, #12
 80059d0:	46bd      	mov	sp, r7
 80059d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d6:	4770      	bx	lr

080059d8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80059d8:	b580      	push	{r7, lr}
 80059da:	b082      	sub	sp, #8
 80059dc:	af00      	add	r7, sp, #0
 80059de:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d101      	bne.n	80059ea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80059e6:	2301      	movs	r3, #1
 80059e8:	e040      	b.n	8005a6c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d106      	bne.n	8005a00 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	2200      	movs	r2, #0
 80059f6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80059fa:	6878      	ldr	r0, [r7, #4]
 80059fc:	f7fb fcfa 	bl	80013f4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	2224      	movs	r2, #36	@ 0x24
 8005a04:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	681a      	ldr	r2, [r3, #0]
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	f022 0201 	bic.w	r2, r2, #1
 8005a14:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d002      	beq.n	8005a24 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8005a1e:	6878      	ldr	r0, [r7, #4]
 8005a20:	f000 fae0 	bl	8005fe4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005a24:	6878      	ldr	r0, [r7, #4]
 8005a26:	f000 f825 	bl	8005a74 <UART_SetConfig>
 8005a2a:	4603      	mov	r3, r0
 8005a2c:	2b01      	cmp	r3, #1
 8005a2e:	d101      	bne.n	8005a34 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8005a30:	2301      	movs	r3, #1
 8005a32:	e01b      	b.n	8005a6c <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	685a      	ldr	r2, [r3, #4]
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005a42:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	689a      	ldr	r2, [r3, #8]
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005a52:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	681a      	ldr	r2, [r3, #0]
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	f042 0201 	orr.w	r2, r2, #1
 8005a62:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005a64:	6878      	ldr	r0, [r7, #4]
 8005a66:	f000 fb5f 	bl	8006128 <UART_CheckIdleState>
 8005a6a:	4603      	mov	r3, r0
}
 8005a6c:	4618      	mov	r0, r3
 8005a6e:	3708      	adds	r7, #8
 8005a70:	46bd      	mov	sp, r7
 8005a72:	bd80      	pop	{r7, pc}

08005a74 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005a74:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005a78:	b08a      	sub	sp, #40	@ 0x28
 8005a7a:	af00      	add	r7, sp, #0
 8005a7c:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005a7e:	2300      	movs	r3, #0
 8005a80:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	689a      	ldr	r2, [r3, #8]
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	691b      	ldr	r3, [r3, #16]
 8005a8c:	431a      	orrs	r2, r3
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	695b      	ldr	r3, [r3, #20]
 8005a92:	431a      	orrs	r2, r3
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	69db      	ldr	r3, [r3, #28]
 8005a98:	4313      	orrs	r3, r2
 8005a9a:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	681a      	ldr	r2, [r3, #0]
 8005aa2:	4ba4      	ldr	r3, [pc, #656]	@ (8005d34 <UART_SetConfig+0x2c0>)
 8005aa4:	4013      	ands	r3, r2
 8005aa6:	68fa      	ldr	r2, [r7, #12]
 8005aa8:	6812      	ldr	r2, [r2, #0]
 8005aaa:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005aac:	430b      	orrs	r3, r1
 8005aae:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	685b      	ldr	r3, [r3, #4]
 8005ab6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	68da      	ldr	r2, [r3, #12]
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	430a      	orrs	r2, r1
 8005ac4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	699b      	ldr	r3, [r3, #24]
 8005aca:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	4a99      	ldr	r2, [pc, #612]	@ (8005d38 <UART_SetConfig+0x2c4>)
 8005ad2:	4293      	cmp	r3, r2
 8005ad4:	d004      	beq.n	8005ae0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	6a1b      	ldr	r3, [r3, #32]
 8005ada:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005adc:	4313      	orrs	r3, r2
 8005ade:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	689b      	ldr	r3, [r3, #8]
 8005ae6:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005af0:	430a      	orrs	r2, r1
 8005af2:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	4a90      	ldr	r2, [pc, #576]	@ (8005d3c <UART_SetConfig+0x2c8>)
 8005afa:	4293      	cmp	r3, r2
 8005afc:	d126      	bne.n	8005b4c <UART_SetConfig+0xd8>
 8005afe:	4b90      	ldr	r3, [pc, #576]	@ (8005d40 <UART_SetConfig+0x2cc>)
 8005b00:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005b04:	f003 0303 	and.w	r3, r3, #3
 8005b08:	2b03      	cmp	r3, #3
 8005b0a:	d81b      	bhi.n	8005b44 <UART_SetConfig+0xd0>
 8005b0c:	a201      	add	r2, pc, #4	@ (adr r2, 8005b14 <UART_SetConfig+0xa0>)
 8005b0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b12:	bf00      	nop
 8005b14:	08005b25 	.word	0x08005b25
 8005b18:	08005b35 	.word	0x08005b35
 8005b1c:	08005b2d 	.word	0x08005b2d
 8005b20:	08005b3d 	.word	0x08005b3d
 8005b24:	2301      	movs	r3, #1
 8005b26:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005b2a:	e116      	b.n	8005d5a <UART_SetConfig+0x2e6>
 8005b2c:	2302      	movs	r3, #2
 8005b2e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005b32:	e112      	b.n	8005d5a <UART_SetConfig+0x2e6>
 8005b34:	2304      	movs	r3, #4
 8005b36:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005b3a:	e10e      	b.n	8005d5a <UART_SetConfig+0x2e6>
 8005b3c:	2308      	movs	r3, #8
 8005b3e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005b42:	e10a      	b.n	8005d5a <UART_SetConfig+0x2e6>
 8005b44:	2310      	movs	r3, #16
 8005b46:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005b4a:	e106      	b.n	8005d5a <UART_SetConfig+0x2e6>
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	4a7c      	ldr	r2, [pc, #496]	@ (8005d44 <UART_SetConfig+0x2d0>)
 8005b52:	4293      	cmp	r3, r2
 8005b54:	d138      	bne.n	8005bc8 <UART_SetConfig+0x154>
 8005b56:	4b7a      	ldr	r3, [pc, #488]	@ (8005d40 <UART_SetConfig+0x2cc>)
 8005b58:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005b5c:	f003 030c 	and.w	r3, r3, #12
 8005b60:	2b0c      	cmp	r3, #12
 8005b62:	d82d      	bhi.n	8005bc0 <UART_SetConfig+0x14c>
 8005b64:	a201      	add	r2, pc, #4	@ (adr r2, 8005b6c <UART_SetConfig+0xf8>)
 8005b66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b6a:	bf00      	nop
 8005b6c:	08005ba1 	.word	0x08005ba1
 8005b70:	08005bc1 	.word	0x08005bc1
 8005b74:	08005bc1 	.word	0x08005bc1
 8005b78:	08005bc1 	.word	0x08005bc1
 8005b7c:	08005bb1 	.word	0x08005bb1
 8005b80:	08005bc1 	.word	0x08005bc1
 8005b84:	08005bc1 	.word	0x08005bc1
 8005b88:	08005bc1 	.word	0x08005bc1
 8005b8c:	08005ba9 	.word	0x08005ba9
 8005b90:	08005bc1 	.word	0x08005bc1
 8005b94:	08005bc1 	.word	0x08005bc1
 8005b98:	08005bc1 	.word	0x08005bc1
 8005b9c:	08005bb9 	.word	0x08005bb9
 8005ba0:	2300      	movs	r3, #0
 8005ba2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005ba6:	e0d8      	b.n	8005d5a <UART_SetConfig+0x2e6>
 8005ba8:	2302      	movs	r3, #2
 8005baa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005bae:	e0d4      	b.n	8005d5a <UART_SetConfig+0x2e6>
 8005bb0:	2304      	movs	r3, #4
 8005bb2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005bb6:	e0d0      	b.n	8005d5a <UART_SetConfig+0x2e6>
 8005bb8:	2308      	movs	r3, #8
 8005bba:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005bbe:	e0cc      	b.n	8005d5a <UART_SetConfig+0x2e6>
 8005bc0:	2310      	movs	r3, #16
 8005bc2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005bc6:	e0c8      	b.n	8005d5a <UART_SetConfig+0x2e6>
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	4a5e      	ldr	r2, [pc, #376]	@ (8005d48 <UART_SetConfig+0x2d4>)
 8005bce:	4293      	cmp	r3, r2
 8005bd0:	d125      	bne.n	8005c1e <UART_SetConfig+0x1aa>
 8005bd2:	4b5b      	ldr	r3, [pc, #364]	@ (8005d40 <UART_SetConfig+0x2cc>)
 8005bd4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005bd8:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8005bdc:	2b30      	cmp	r3, #48	@ 0x30
 8005bde:	d016      	beq.n	8005c0e <UART_SetConfig+0x19a>
 8005be0:	2b30      	cmp	r3, #48	@ 0x30
 8005be2:	d818      	bhi.n	8005c16 <UART_SetConfig+0x1a2>
 8005be4:	2b20      	cmp	r3, #32
 8005be6:	d00a      	beq.n	8005bfe <UART_SetConfig+0x18a>
 8005be8:	2b20      	cmp	r3, #32
 8005bea:	d814      	bhi.n	8005c16 <UART_SetConfig+0x1a2>
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d002      	beq.n	8005bf6 <UART_SetConfig+0x182>
 8005bf0:	2b10      	cmp	r3, #16
 8005bf2:	d008      	beq.n	8005c06 <UART_SetConfig+0x192>
 8005bf4:	e00f      	b.n	8005c16 <UART_SetConfig+0x1a2>
 8005bf6:	2300      	movs	r3, #0
 8005bf8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005bfc:	e0ad      	b.n	8005d5a <UART_SetConfig+0x2e6>
 8005bfe:	2302      	movs	r3, #2
 8005c00:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005c04:	e0a9      	b.n	8005d5a <UART_SetConfig+0x2e6>
 8005c06:	2304      	movs	r3, #4
 8005c08:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005c0c:	e0a5      	b.n	8005d5a <UART_SetConfig+0x2e6>
 8005c0e:	2308      	movs	r3, #8
 8005c10:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005c14:	e0a1      	b.n	8005d5a <UART_SetConfig+0x2e6>
 8005c16:	2310      	movs	r3, #16
 8005c18:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005c1c:	e09d      	b.n	8005d5a <UART_SetConfig+0x2e6>
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	4a4a      	ldr	r2, [pc, #296]	@ (8005d4c <UART_SetConfig+0x2d8>)
 8005c24:	4293      	cmp	r3, r2
 8005c26:	d125      	bne.n	8005c74 <UART_SetConfig+0x200>
 8005c28:	4b45      	ldr	r3, [pc, #276]	@ (8005d40 <UART_SetConfig+0x2cc>)
 8005c2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005c2e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8005c32:	2bc0      	cmp	r3, #192	@ 0xc0
 8005c34:	d016      	beq.n	8005c64 <UART_SetConfig+0x1f0>
 8005c36:	2bc0      	cmp	r3, #192	@ 0xc0
 8005c38:	d818      	bhi.n	8005c6c <UART_SetConfig+0x1f8>
 8005c3a:	2b80      	cmp	r3, #128	@ 0x80
 8005c3c:	d00a      	beq.n	8005c54 <UART_SetConfig+0x1e0>
 8005c3e:	2b80      	cmp	r3, #128	@ 0x80
 8005c40:	d814      	bhi.n	8005c6c <UART_SetConfig+0x1f8>
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d002      	beq.n	8005c4c <UART_SetConfig+0x1d8>
 8005c46:	2b40      	cmp	r3, #64	@ 0x40
 8005c48:	d008      	beq.n	8005c5c <UART_SetConfig+0x1e8>
 8005c4a:	e00f      	b.n	8005c6c <UART_SetConfig+0x1f8>
 8005c4c:	2300      	movs	r3, #0
 8005c4e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005c52:	e082      	b.n	8005d5a <UART_SetConfig+0x2e6>
 8005c54:	2302      	movs	r3, #2
 8005c56:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005c5a:	e07e      	b.n	8005d5a <UART_SetConfig+0x2e6>
 8005c5c:	2304      	movs	r3, #4
 8005c5e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005c62:	e07a      	b.n	8005d5a <UART_SetConfig+0x2e6>
 8005c64:	2308      	movs	r3, #8
 8005c66:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005c6a:	e076      	b.n	8005d5a <UART_SetConfig+0x2e6>
 8005c6c:	2310      	movs	r3, #16
 8005c6e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005c72:	e072      	b.n	8005d5a <UART_SetConfig+0x2e6>
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	4a35      	ldr	r2, [pc, #212]	@ (8005d50 <UART_SetConfig+0x2dc>)
 8005c7a:	4293      	cmp	r3, r2
 8005c7c:	d12a      	bne.n	8005cd4 <UART_SetConfig+0x260>
 8005c7e:	4b30      	ldr	r3, [pc, #192]	@ (8005d40 <UART_SetConfig+0x2cc>)
 8005c80:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005c84:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005c88:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005c8c:	d01a      	beq.n	8005cc4 <UART_SetConfig+0x250>
 8005c8e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005c92:	d81b      	bhi.n	8005ccc <UART_SetConfig+0x258>
 8005c94:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005c98:	d00c      	beq.n	8005cb4 <UART_SetConfig+0x240>
 8005c9a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005c9e:	d815      	bhi.n	8005ccc <UART_SetConfig+0x258>
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d003      	beq.n	8005cac <UART_SetConfig+0x238>
 8005ca4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005ca8:	d008      	beq.n	8005cbc <UART_SetConfig+0x248>
 8005caa:	e00f      	b.n	8005ccc <UART_SetConfig+0x258>
 8005cac:	2300      	movs	r3, #0
 8005cae:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005cb2:	e052      	b.n	8005d5a <UART_SetConfig+0x2e6>
 8005cb4:	2302      	movs	r3, #2
 8005cb6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005cba:	e04e      	b.n	8005d5a <UART_SetConfig+0x2e6>
 8005cbc:	2304      	movs	r3, #4
 8005cbe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005cc2:	e04a      	b.n	8005d5a <UART_SetConfig+0x2e6>
 8005cc4:	2308      	movs	r3, #8
 8005cc6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005cca:	e046      	b.n	8005d5a <UART_SetConfig+0x2e6>
 8005ccc:	2310      	movs	r3, #16
 8005cce:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005cd2:	e042      	b.n	8005d5a <UART_SetConfig+0x2e6>
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	4a17      	ldr	r2, [pc, #92]	@ (8005d38 <UART_SetConfig+0x2c4>)
 8005cda:	4293      	cmp	r3, r2
 8005cdc:	d13a      	bne.n	8005d54 <UART_SetConfig+0x2e0>
 8005cde:	4b18      	ldr	r3, [pc, #96]	@ (8005d40 <UART_SetConfig+0x2cc>)
 8005ce0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005ce4:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8005ce8:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005cec:	d01a      	beq.n	8005d24 <UART_SetConfig+0x2b0>
 8005cee:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005cf2:	d81b      	bhi.n	8005d2c <UART_SetConfig+0x2b8>
 8005cf4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005cf8:	d00c      	beq.n	8005d14 <UART_SetConfig+0x2a0>
 8005cfa:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005cfe:	d815      	bhi.n	8005d2c <UART_SetConfig+0x2b8>
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d003      	beq.n	8005d0c <UART_SetConfig+0x298>
 8005d04:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005d08:	d008      	beq.n	8005d1c <UART_SetConfig+0x2a8>
 8005d0a:	e00f      	b.n	8005d2c <UART_SetConfig+0x2b8>
 8005d0c:	2300      	movs	r3, #0
 8005d0e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005d12:	e022      	b.n	8005d5a <UART_SetConfig+0x2e6>
 8005d14:	2302      	movs	r3, #2
 8005d16:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005d1a:	e01e      	b.n	8005d5a <UART_SetConfig+0x2e6>
 8005d1c:	2304      	movs	r3, #4
 8005d1e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005d22:	e01a      	b.n	8005d5a <UART_SetConfig+0x2e6>
 8005d24:	2308      	movs	r3, #8
 8005d26:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005d2a:	e016      	b.n	8005d5a <UART_SetConfig+0x2e6>
 8005d2c:	2310      	movs	r3, #16
 8005d2e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005d32:	e012      	b.n	8005d5a <UART_SetConfig+0x2e6>
 8005d34:	efff69f3 	.word	0xefff69f3
 8005d38:	40008000 	.word	0x40008000
 8005d3c:	40013800 	.word	0x40013800
 8005d40:	40021000 	.word	0x40021000
 8005d44:	40004400 	.word	0x40004400
 8005d48:	40004800 	.word	0x40004800
 8005d4c:	40004c00 	.word	0x40004c00
 8005d50:	40005000 	.word	0x40005000
 8005d54:	2310      	movs	r3, #16
 8005d56:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	4a9f      	ldr	r2, [pc, #636]	@ (8005fdc <UART_SetConfig+0x568>)
 8005d60:	4293      	cmp	r3, r2
 8005d62:	d17a      	bne.n	8005e5a <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005d64:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005d68:	2b08      	cmp	r3, #8
 8005d6a:	d824      	bhi.n	8005db6 <UART_SetConfig+0x342>
 8005d6c:	a201      	add	r2, pc, #4	@ (adr r2, 8005d74 <UART_SetConfig+0x300>)
 8005d6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d72:	bf00      	nop
 8005d74:	08005d99 	.word	0x08005d99
 8005d78:	08005db7 	.word	0x08005db7
 8005d7c:	08005da1 	.word	0x08005da1
 8005d80:	08005db7 	.word	0x08005db7
 8005d84:	08005da7 	.word	0x08005da7
 8005d88:	08005db7 	.word	0x08005db7
 8005d8c:	08005db7 	.word	0x08005db7
 8005d90:	08005db7 	.word	0x08005db7
 8005d94:	08005daf 	.word	0x08005daf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005d98:	f7fd face 	bl	8003338 <HAL_RCC_GetPCLK1Freq>
 8005d9c:	61f8      	str	r0, [r7, #28]
        break;
 8005d9e:	e010      	b.n	8005dc2 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005da0:	4b8f      	ldr	r3, [pc, #572]	@ (8005fe0 <UART_SetConfig+0x56c>)
 8005da2:	61fb      	str	r3, [r7, #28]
        break;
 8005da4:	e00d      	b.n	8005dc2 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005da6:	f7fd fa2f 	bl	8003208 <HAL_RCC_GetSysClockFreq>
 8005daa:	61f8      	str	r0, [r7, #28]
        break;
 8005dac:	e009      	b.n	8005dc2 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005dae:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005db2:	61fb      	str	r3, [r7, #28]
        break;
 8005db4:	e005      	b.n	8005dc2 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8005db6:	2300      	movs	r3, #0
 8005db8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005dba:	2301      	movs	r3, #1
 8005dbc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8005dc0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005dc2:	69fb      	ldr	r3, [r7, #28]
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	f000 80fb 	beq.w	8005fc0 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	685a      	ldr	r2, [r3, #4]
 8005dce:	4613      	mov	r3, r2
 8005dd0:	005b      	lsls	r3, r3, #1
 8005dd2:	4413      	add	r3, r2
 8005dd4:	69fa      	ldr	r2, [r7, #28]
 8005dd6:	429a      	cmp	r2, r3
 8005dd8:	d305      	bcc.n	8005de6 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	685b      	ldr	r3, [r3, #4]
 8005dde:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005de0:	69fa      	ldr	r2, [r7, #28]
 8005de2:	429a      	cmp	r2, r3
 8005de4:	d903      	bls.n	8005dee <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8005de6:	2301      	movs	r3, #1
 8005de8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8005dec:	e0e8      	b.n	8005fc0 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8005dee:	69fb      	ldr	r3, [r7, #28]
 8005df0:	2200      	movs	r2, #0
 8005df2:	461c      	mov	r4, r3
 8005df4:	4615      	mov	r5, r2
 8005df6:	f04f 0200 	mov.w	r2, #0
 8005dfa:	f04f 0300 	mov.w	r3, #0
 8005dfe:	022b      	lsls	r3, r5, #8
 8005e00:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8005e04:	0222      	lsls	r2, r4, #8
 8005e06:	68f9      	ldr	r1, [r7, #12]
 8005e08:	6849      	ldr	r1, [r1, #4]
 8005e0a:	0849      	lsrs	r1, r1, #1
 8005e0c:	2000      	movs	r0, #0
 8005e0e:	4688      	mov	r8, r1
 8005e10:	4681      	mov	r9, r0
 8005e12:	eb12 0a08 	adds.w	sl, r2, r8
 8005e16:	eb43 0b09 	adc.w	fp, r3, r9
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	685b      	ldr	r3, [r3, #4]
 8005e1e:	2200      	movs	r2, #0
 8005e20:	603b      	str	r3, [r7, #0]
 8005e22:	607a      	str	r2, [r7, #4]
 8005e24:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005e28:	4650      	mov	r0, sl
 8005e2a:	4659      	mov	r1, fp
 8005e2c:	f7fa f9cc 	bl	80001c8 <__aeabi_uldivmod>
 8005e30:	4602      	mov	r2, r0
 8005e32:	460b      	mov	r3, r1
 8005e34:	4613      	mov	r3, r2
 8005e36:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005e38:	69bb      	ldr	r3, [r7, #24]
 8005e3a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005e3e:	d308      	bcc.n	8005e52 <UART_SetConfig+0x3de>
 8005e40:	69bb      	ldr	r3, [r7, #24]
 8005e42:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005e46:	d204      	bcs.n	8005e52 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	69ba      	ldr	r2, [r7, #24]
 8005e4e:	60da      	str	r2, [r3, #12]
 8005e50:	e0b6      	b.n	8005fc0 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8005e52:	2301      	movs	r3, #1
 8005e54:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8005e58:	e0b2      	b.n	8005fc0 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	69db      	ldr	r3, [r3, #28]
 8005e5e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005e62:	d15e      	bne.n	8005f22 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8005e64:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005e68:	2b08      	cmp	r3, #8
 8005e6a:	d828      	bhi.n	8005ebe <UART_SetConfig+0x44a>
 8005e6c:	a201      	add	r2, pc, #4	@ (adr r2, 8005e74 <UART_SetConfig+0x400>)
 8005e6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e72:	bf00      	nop
 8005e74:	08005e99 	.word	0x08005e99
 8005e78:	08005ea1 	.word	0x08005ea1
 8005e7c:	08005ea9 	.word	0x08005ea9
 8005e80:	08005ebf 	.word	0x08005ebf
 8005e84:	08005eaf 	.word	0x08005eaf
 8005e88:	08005ebf 	.word	0x08005ebf
 8005e8c:	08005ebf 	.word	0x08005ebf
 8005e90:	08005ebf 	.word	0x08005ebf
 8005e94:	08005eb7 	.word	0x08005eb7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005e98:	f7fd fa4e 	bl	8003338 <HAL_RCC_GetPCLK1Freq>
 8005e9c:	61f8      	str	r0, [r7, #28]
        break;
 8005e9e:	e014      	b.n	8005eca <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005ea0:	f7fd fa60 	bl	8003364 <HAL_RCC_GetPCLK2Freq>
 8005ea4:	61f8      	str	r0, [r7, #28]
        break;
 8005ea6:	e010      	b.n	8005eca <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005ea8:	4b4d      	ldr	r3, [pc, #308]	@ (8005fe0 <UART_SetConfig+0x56c>)
 8005eaa:	61fb      	str	r3, [r7, #28]
        break;
 8005eac:	e00d      	b.n	8005eca <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005eae:	f7fd f9ab 	bl	8003208 <HAL_RCC_GetSysClockFreq>
 8005eb2:	61f8      	str	r0, [r7, #28]
        break;
 8005eb4:	e009      	b.n	8005eca <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005eb6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005eba:	61fb      	str	r3, [r7, #28]
        break;
 8005ebc:	e005      	b.n	8005eca <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8005ebe:	2300      	movs	r3, #0
 8005ec0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005ec2:	2301      	movs	r3, #1
 8005ec4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8005ec8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005eca:	69fb      	ldr	r3, [r7, #28]
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d077      	beq.n	8005fc0 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005ed0:	69fb      	ldr	r3, [r7, #28]
 8005ed2:	005a      	lsls	r2, r3, #1
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	685b      	ldr	r3, [r3, #4]
 8005ed8:	085b      	lsrs	r3, r3, #1
 8005eda:	441a      	add	r2, r3
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	685b      	ldr	r3, [r3, #4]
 8005ee0:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ee4:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005ee6:	69bb      	ldr	r3, [r7, #24]
 8005ee8:	2b0f      	cmp	r3, #15
 8005eea:	d916      	bls.n	8005f1a <UART_SetConfig+0x4a6>
 8005eec:	69bb      	ldr	r3, [r7, #24]
 8005eee:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005ef2:	d212      	bcs.n	8005f1a <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005ef4:	69bb      	ldr	r3, [r7, #24]
 8005ef6:	b29b      	uxth	r3, r3
 8005ef8:	f023 030f 	bic.w	r3, r3, #15
 8005efc:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005efe:	69bb      	ldr	r3, [r7, #24]
 8005f00:	085b      	lsrs	r3, r3, #1
 8005f02:	b29b      	uxth	r3, r3
 8005f04:	f003 0307 	and.w	r3, r3, #7
 8005f08:	b29a      	uxth	r2, r3
 8005f0a:	8afb      	ldrh	r3, [r7, #22]
 8005f0c:	4313      	orrs	r3, r2
 8005f0e:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	8afa      	ldrh	r2, [r7, #22]
 8005f16:	60da      	str	r2, [r3, #12]
 8005f18:	e052      	b.n	8005fc0 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8005f1a:	2301      	movs	r3, #1
 8005f1c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8005f20:	e04e      	b.n	8005fc0 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005f22:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005f26:	2b08      	cmp	r3, #8
 8005f28:	d827      	bhi.n	8005f7a <UART_SetConfig+0x506>
 8005f2a:	a201      	add	r2, pc, #4	@ (adr r2, 8005f30 <UART_SetConfig+0x4bc>)
 8005f2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f30:	08005f55 	.word	0x08005f55
 8005f34:	08005f5d 	.word	0x08005f5d
 8005f38:	08005f65 	.word	0x08005f65
 8005f3c:	08005f7b 	.word	0x08005f7b
 8005f40:	08005f6b 	.word	0x08005f6b
 8005f44:	08005f7b 	.word	0x08005f7b
 8005f48:	08005f7b 	.word	0x08005f7b
 8005f4c:	08005f7b 	.word	0x08005f7b
 8005f50:	08005f73 	.word	0x08005f73
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005f54:	f7fd f9f0 	bl	8003338 <HAL_RCC_GetPCLK1Freq>
 8005f58:	61f8      	str	r0, [r7, #28]
        break;
 8005f5a:	e014      	b.n	8005f86 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005f5c:	f7fd fa02 	bl	8003364 <HAL_RCC_GetPCLK2Freq>
 8005f60:	61f8      	str	r0, [r7, #28]
        break;
 8005f62:	e010      	b.n	8005f86 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005f64:	4b1e      	ldr	r3, [pc, #120]	@ (8005fe0 <UART_SetConfig+0x56c>)
 8005f66:	61fb      	str	r3, [r7, #28]
        break;
 8005f68:	e00d      	b.n	8005f86 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005f6a:	f7fd f94d 	bl	8003208 <HAL_RCC_GetSysClockFreq>
 8005f6e:	61f8      	str	r0, [r7, #28]
        break;
 8005f70:	e009      	b.n	8005f86 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005f72:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005f76:	61fb      	str	r3, [r7, #28]
        break;
 8005f78:	e005      	b.n	8005f86 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8005f7a:	2300      	movs	r3, #0
 8005f7c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005f7e:	2301      	movs	r3, #1
 8005f80:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8005f84:	bf00      	nop
    }

    if (pclk != 0U)
 8005f86:	69fb      	ldr	r3, [r7, #28]
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d019      	beq.n	8005fc0 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	685b      	ldr	r3, [r3, #4]
 8005f90:	085a      	lsrs	r2, r3, #1
 8005f92:	69fb      	ldr	r3, [r7, #28]
 8005f94:	441a      	add	r2, r3
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	685b      	ldr	r3, [r3, #4]
 8005f9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f9e:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005fa0:	69bb      	ldr	r3, [r7, #24]
 8005fa2:	2b0f      	cmp	r3, #15
 8005fa4:	d909      	bls.n	8005fba <UART_SetConfig+0x546>
 8005fa6:	69bb      	ldr	r3, [r7, #24]
 8005fa8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005fac:	d205      	bcs.n	8005fba <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005fae:	69bb      	ldr	r3, [r7, #24]
 8005fb0:	b29a      	uxth	r2, r3
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	60da      	str	r2, [r3, #12]
 8005fb8:	e002      	b.n	8005fc0 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8005fba:	2301      	movs	r3, #1
 8005fbc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	2200      	movs	r2, #0
 8005fc4:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	2200      	movs	r2, #0
 8005fca:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8005fcc:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8005fd0:	4618      	mov	r0, r3
 8005fd2:	3728      	adds	r7, #40	@ 0x28
 8005fd4:	46bd      	mov	sp, r7
 8005fd6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005fda:	bf00      	nop
 8005fdc:	40008000 	.word	0x40008000
 8005fe0:	00f42400 	.word	0x00f42400

08005fe4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005fe4:	b480      	push	{r7}
 8005fe6:	b083      	sub	sp, #12
 8005fe8:	af00      	add	r7, sp, #0
 8005fea:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ff0:	f003 0308 	and.w	r3, r3, #8
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d00a      	beq.n	800600e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	685b      	ldr	r3, [r3, #4]
 8005ffe:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	430a      	orrs	r2, r1
 800600c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006012:	f003 0301 	and.w	r3, r3, #1
 8006016:	2b00      	cmp	r3, #0
 8006018:	d00a      	beq.n	8006030 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	685b      	ldr	r3, [r3, #4]
 8006020:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	430a      	orrs	r2, r1
 800602e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006034:	f003 0302 	and.w	r3, r3, #2
 8006038:	2b00      	cmp	r3, #0
 800603a:	d00a      	beq.n	8006052 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	685b      	ldr	r3, [r3, #4]
 8006042:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	430a      	orrs	r2, r1
 8006050:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006056:	f003 0304 	and.w	r3, r3, #4
 800605a:	2b00      	cmp	r3, #0
 800605c:	d00a      	beq.n	8006074 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	685b      	ldr	r3, [r3, #4]
 8006064:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	430a      	orrs	r2, r1
 8006072:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006078:	f003 0310 	and.w	r3, r3, #16
 800607c:	2b00      	cmp	r3, #0
 800607e:	d00a      	beq.n	8006096 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	689b      	ldr	r3, [r3, #8]
 8006086:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	430a      	orrs	r2, r1
 8006094:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800609a:	f003 0320 	and.w	r3, r3, #32
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d00a      	beq.n	80060b8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	689b      	ldr	r3, [r3, #8]
 80060a8:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	430a      	orrs	r2, r1
 80060b6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80060bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d01a      	beq.n	80060fa <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	685b      	ldr	r3, [r3, #4]
 80060ca:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	430a      	orrs	r2, r1
 80060d8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80060de:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80060e2:	d10a      	bne.n	80060fa <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	685b      	ldr	r3, [r3, #4]
 80060ea:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	430a      	orrs	r2, r1
 80060f8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80060fe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006102:	2b00      	cmp	r3, #0
 8006104:	d00a      	beq.n	800611c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	685b      	ldr	r3, [r3, #4]
 800610c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	430a      	orrs	r2, r1
 800611a:	605a      	str	r2, [r3, #4]
  }
}
 800611c:	bf00      	nop
 800611e:	370c      	adds	r7, #12
 8006120:	46bd      	mov	sp, r7
 8006122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006126:	4770      	bx	lr

08006128 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006128:	b580      	push	{r7, lr}
 800612a:	b098      	sub	sp, #96	@ 0x60
 800612c:	af02      	add	r7, sp, #8
 800612e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	2200      	movs	r2, #0
 8006134:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006138:	f7fb fbb2 	bl	80018a0 <HAL_GetTick>
 800613c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	f003 0308 	and.w	r3, r3, #8
 8006148:	2b08      	cmp	r3, #8
 800614a:	d12e      	bne.n	80061aa <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800614c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006150:	9300      	str	r3, [sp, #0]
 8006152:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006154:	2200      	movs	r2, #0
 8006156:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800615a:	6878      	ldr	r0, [r7, #4]
 800615c:	f000 f88c 	bl	8006278 <UART_WaitOnFlagUntilTimeout>
 8006160:	4603      	mov	r3, r0
 8006162:	2b00      	cmp	r3, #0
 8006164:	d021      	beq.n	80061aa <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800616c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800616e:	e853 3f00 	ldrex	r3, [r3]
 8006172:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006174:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006176:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800617a:	653b      	str	r3, [r7, #80]	@ 0x50
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	461a      	mov	r2, r3
 8006182:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006184:	647b      	str	r3, [r7, #68]	@ 0x44
 8006186:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006188:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800618a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800618c:	e841 2300 	strex	r3, r2, [r1]
 8006190:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006192:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006194:	2b00      	cmp	r3, #0
 8006196:	d1e6      	bne.n	8006166 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	2220      	movs	r2, #32
 800619c:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	2200      	movs	r2, #0
 80061a2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80061a6:	2303      	movs	r3, #3
 80061a8:	e062      	b.n	8006270 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	f003 0304 	and.w	r3, r3, #4
 80061b4:	2b04      	cmp	r3, #4
 80061b6:	d149      	bne.n	800624c <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80061b8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80061bc:	9300      	str	r3, [sp, #0]
 80061be:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80061c0:	2200      	movs	r2, #0
 80061c2:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80061c6:	6878      	ldr	r0, [r7, #4]
 80061c8:	f000 f856 	bl	8006278 <UART_WaitOnFlagUntilTimeout>
 80061cc:	4603      	mov	r3, r0
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d03c      	beq.n	800624c <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061da:	e853 3f00 	ldrex	r3, [r3]
 80061de:	623b      	str	r3, [r7, #32]
   return(result);
 80061e0:	6a3b      	ldr	r3, [r7, #32]
 80061e2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80061e6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	461a      	mov	r2, r3
 80061ee:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80061f0:	633b      	str	r3, [r7, #48]	@ 0x30
 80061f2:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061f4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80061f6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80061f8:	e841 2300 	strex	r3, r2, [r1]
 80061fc:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80061fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006200:	2b00      	cmp	r3, #0
 8006202:	d1e6      	bne.n	80061d2 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	3308      	adds	r3, #8
 800620a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800620c:	693b      	ldr	r3, [r7, #16]
 800620e:	e853 3f00 	ldrex	r3, [r3]
 8006212:	60fb      	str	r3, [r7, #12]
   return(result);
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	f023 0301 	bic.w	r3, r3, #1
 800621a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	3308      	adds	r3, #8
 8006222:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006224:	61fa      	str	r2, [r7, #28]
 8006226:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006228:	69b9      	ldr	r1, [r7, #24]
 800622a:	69fa      	ldr	r2, [r7, #28]
 800622c:	e841 2300 	strex	r3, r2, [r1]
 8006230:	617b      	str	r3, [r7, #20]
   return(result);
 8006232:	697b      	ldr	r3, [r7, #20]
 8006234:	2b00      	cmp	r3, #0
 8006236:	d1e5      	bne.n	8006204 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	2220      	movs	r2, #32
 800623c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	2200      	movs	r2, #0
 8006244:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006248:	2303      	movs	r3, #3
 800624a:	e011      	b.n	8006270 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	2220      	movs	r2, #32
 8006250:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	2220      	movs	r2, #32
 8006256:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	2200      	movs	r2, #0
 800625e:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	2200      	movs	r2, #0
 8006264:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	2200      	movs	r2, #0
 800626a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800626e:	2300      	movs	r3, #0
}
 8006270:	4618      	mov	r0, r3
 8006272:	3758      	adds	r7, #88	@ 0x58
 8006274:	46bd      	mov	sp, r7
 8006276:	bd80      	pop	{r7, pc}

08006278 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006278:	b580      	push	{r7, lr}
 800627a:	b084      	sub	sp, #16
 800627c:	af00      	add	r7, sp, #0
 800627e:	60f8      	str	r0, [r7, #12]
 8006280:	60b9      	str	r1, [r7, #8]
 8006282:	603b      	str	r3, [r7, #0]
 8006284:	4613      	mov	r3, r2
 8006286:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006288:	e04f      	b.n	800632a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800628a:	69bb      	ldr	r3, [r7, #24]
 800628c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006290:	d04b      	beq.n	800632a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006292:	f7fb fb05 	bl	80018a0 <HAL_GetTick>
 8006296:	4602      	mov	r2, r0
 8006298:	683b      	ldr	r3, [r7, #0]
 800629a:	1ad3      	subs	r3, r2, r3
 800629c:	69ba      	ldr	r2, [r7, #24]
 800629e:	429a      	cmp	r2, r3
 80062a0:	d302      	bcc.n	80062a8 <UART_WaitOnFlagUntilTimeout+0x30>
 80062a2:	69bb      	ldr	r3, [r7, #24]
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d101      	bne.n	80062ac <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80062a8:	2303      	movs	r3, #3
 80062aa:	e04e      	b.n	800634a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	f003 0304 	and.w	r3, r3, #4
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d037      	beq.n	800632a <UART_WaitOnFlagUntilTimeout+0xb2>
 80062ba:	68bb      	ldr	r3, [r7, #8]
 80062bc:	2b80      	cmp	r3, #128	@ 0x80
 80062be:	d034      	beq.n	800632a <UART_WaitOnFlagUntilTimeout+0xb2>
 80062c0:	68bb      	ldr	r3, [r7, #8]
 80062c2:	2b40      	cmp	r3, #64	@ 0x40
 80062c4:	d031      	beq.n	800632a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	69db      	ldr	r3, [r3, #28]
 80062cc:	f003 0308 	and.w	r3, r3, #8
 80062d0:	2b08      	cmp	r3, #8
 80062d2:	d110      	bne.n	80062f6 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	2208      	movs	r2, #8
 80062da:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80062dc:	68f8      	ldr	r0, [r7, #12]
 80062de:	f000 f838 	bl	8006352 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	2208      	movs	r2, #8
 80062e6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	2200      	movs	r2, #0
 80062ee:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 80062f2:	2301      	movs	r3, #1
 80062f4:	e029      	b.n	800634a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	69db      	ldr	r3, [r3, #28]
 80062fc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006300:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006304:	d111      	bne.n	800632a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800630e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006310:	68f8      	ldr	r0, [r7, #12]
 8006312:	f000 f81e 	bl	8006352 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	2220      	movs	r2, #32
 800631a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	2200      	movs	r2, #0
 8006322:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8006326:	2303      	movs	r3, #3
 8006328:	e00f      	b.n	800634a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	69da      	ldr	r2, [r3, #28]
 8006330:	68bb      	ldr	r3, [r7, #8]
 8006332:	4013      	ands	r3, r2
 8006334:	68ba      	ldr	r2, [r7, #8]
 8006336:	429a      	cmp	r2, r3
 8006338:	bf0c      	ite	eq
 800633a:	2301      	moveq	r3, #1
 800633c:	2300      	movne	r3, #0
 800633e:	b2db      	uxtb	r3, r3
 8006340:	461a      	mov	r2, r3
 8006342:	79fb      	ldrb	r3, [r7, #7]
 8006344:	429a      	cmp	r2, r3
 8006346:	d0a0      	beq.n	800628a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006348:	2300      	movs	r3, #0
}
 800634a:	4618      	mov	r0, r3
 800634c:	3710      	adds	r7, #16
 800634e:	46bd      	mov	sp, r7
 8006350:	bd80      	pop	{r7, pc}

08006352 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006352:	b480      	push	{r7}
 8006354:	b095      	sub	sp, #84	@ 0x54
 8006356:	af00      	add	r7, sp, #0
 8006358:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006360:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006362:	e853 3f00 	ldrex	r3, [r3]
 8006366:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006368:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800636a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800636e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	461a      	mov	r2, r3
 8006376:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006378:	643b      	str	r3, [r7, #64]	@ 0x40
 800637a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800637c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800637e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006380:	e841 2300 	strex	r3, r2, [r1]
 8006384:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006386:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006388:	2b00      	cmp	r3, #0
 800638a:	d1e6      	bne.n	800635a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	3308      	adds	r3, #8
 8006392:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006394:	6a3b      	ldr	r3, [r7, #32]
 8006396:	e853 3f00 	ldrex	r3, [r3]
 800639a:	61fb      	str	r3, [r7, #28]
   return(result);
 800639c:	69fb      	ldr	r3, [r7, #28]
 800639e:	f023 0301 	bic.w	r3, r3, #1
 80063a2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	3308      	adds	r3, #8
 80063aa:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80063ac:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80063ae:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063b0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80063b2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80063b4:	e841 2300 	strex	r3, r2, [r1]
 80063b8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80063ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d1e5      	bne.n	800638c <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80063c4:	2b01      	cmp	r3, #1
 80063c6:	d118      	bne.n	80063fa <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	e853 3f00 	ldrex	r3, [r3]
 80063d4:	60bb      	str	r3, [r7, #8]
   return(result);
 80063d6:	68bb      	ldr	r3, [r7, #8]
 80063d8:	f023 0310 	bic.w	r3, r3, #16
 80063dc:	647b      	str	r3, [r7, #68]	@ 0x44
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	461a      	mov	r2, r3
 80063e4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80063e6:	61bb      	str	r3, [r7, #24]
 80063e8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063ea:	6979      	ldr	r1, [r7, #20]
 80063ec:	69ba      	ldr	r2, [r7, #24]
 80063ee:	e841 2300 	strex	r3, r2, [r1]
 80063f2:	613b      	str	r3, [r7, #16]
   return(result);
 80063f4:	693b      	ldr	r3, [r7, #16]
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d1e6      	bne.n	80063c8 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	2220      	movs	r2, #32
 80063fe:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	2200      	movs	r2, #0
 8006406:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	2200      	movs	r2, #0
 800640c:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800640e:	bf00      	nop
 8006410:	3754      	adds	r7, #84	@ 0x54
 8006412:	46bd      	mov	sp, r7
 8006414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006418:	4770      	bx	lr

0800641a <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800641a:	b084      	sub	sp, #16
 800641c:	b580      	push	{r7, lr}
 800641e:	b084      	sub	sp, #16
 8006420:	af00      	add	r7, sp, #0
 8006422:	6078      	str	r0, [r7, #4]
 8006424:	f107 001c 	add.w	r0, r7, #28
 8006428:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	68db      	ldr	r3, [r3, #12]
 8006430:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 8006438:	6878      	ldr	r0, [r7, #4]
 800643a:	f000 fa69 	bl	8006910 <USB_CoreReset>
 800643e:	4603      	mov	r3, r0
 8006440:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 8006442:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8006446:	2b00      	cmp	r3, #0
 8006448:	d106      	bne.n	8006458 <USB_CoreInit+0x3e>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800644e:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	639a      	str	r2, [r3, #56]	@ 0x38
 8006456:	e005      	b.n	8006464 <USB_CoreInit+0x4a>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800645c:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return ret;
 8006464:	7bfb      	ldrb	r3, [r7, #15]
}
 8006466:	4618      	mov	r0, r3
 8006468:	3710      	adds	r7, #16
 800646a:	46bd      	mov	sp, r7
 800646c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006470:	b004      	add	sp, #16
 8006472:	4770      	bx	lr

08006474 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006474:	b480      	push	{r7}
 8006476:	b083      	sub	sp, #12
 8006478:	af00      	add	r7, sp, #0
 800647a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	689b      	ldr	r3, [r3, #8]
 8006480:	f023 0201 	bic.w	r2, r3, #1
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006488:	2300      	movs	r3, #0
}
 800648a:	4618      	mov	r0, r3
 800648c:	370c      	adds	r7, #12
 800648e:	46bd      	mov	sp, r7
 8006490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006494:	4770      	bx	lr

08006496 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 8006496:	b580      	push	{r7, lr}
 8006498:	b084      	sub	sp, #16
 800649a:	af00      	add	r7, sp, #0
 800649c:	6078      	str	r0, [r7, #4]
 800649e:	460b      	mov	r3, r1
 80064a0:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80064a2:	2300      	movs	r3, #0
 80064a4:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	68db      	ldr	r3, [r3, #12]
 80064aa:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80064b2:	78fb      	ldrb	r3, [r7, #3]
 80064b4:	2b01      	cmp	r3, #1
 80064b6:	d115      	bne.n	80064e4 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	68db      	ldr	r3, [r3, #12]
 80064bc:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80064c4:	200a      	movs	r0, #10
 80064c6:	f7fb f9f7 	bl	80018b8 <HAL_Delay>
      ms += 10U;
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	330a      	adds	r3, #10
 80064ce:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80064d0:	6878      	ldr	r0, [r7, #4]
 80064d2:	f000 fa0f 	bl	80068f4 <USB_GetMode>
 80064d6:	4603      	mov	r3, r0
 80064d8:	2b01      	cmp	r3, #1
 80064da:	d01e      	beq.n	800651a <USB_SetCurrentMode+0x84>
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	2bc7      	cmp	r3, #199	@ 0xc7
 80064e0:	d9f0      	bls.n	80064c4 <USB_SetCurrentMode+0x2e>
 80064e2:	e01a      	b.n	800651a <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80064e4:	78fb      	ldrb	r3, [r7, #3]
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d115      	bne.n	8006516 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	68db      	ldr	r3, [r3, #12]
 80064ee:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80064f6:	200a      	movs	r0, #10
 80064f8:	f7fb f9de 	bl	80018b8 <HAL_Delay>
      ms += 10U;
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	330a      	adds	r3, #10
 8006500:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8006502:	6878      	ldr	r0, [r7, #4]
 8006504:	f000 f9f6 	bl	80068f4 <USB_GetMode>
 8006508:	4603      	mov	r3, r0
 800650a:	2b00      	cmp	r3, #0
 800650c:	d005      	beq.n	800651a <USB_SetCurrentMode+0x84>
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	2bc7      	cmp	r3, #199	@ 0xc7
 8006512:	d9f0      	bls.n	80064f6 <USB_SetCurrentMode+0x60>
 8006514:	e001      	b.n	800651a <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8006516:	2301      	movs	r3, #1
 8006518:	e005      	b.n	8006526 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	2bc8      	cmp	r3, #200	@ 0xc8
 800651e:	d101      	bne.n	8006524 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8006520:	2301      	movs	r3, #1
 8006522:	e000      	b.n	8006526 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8006524:	2300      	movs	r3, #0
}
 8006526:	4618      	mov	r0, r3
 8006528:	3710      	adds	r7, #16
 800652a:	46bd      	mov	sp, r7
 800652c:	bd80      	pop	{r7, pc}
	...

08006530 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006530:	b084      	sub	sp, #16
 8006532:	b580      	push	{r7, lr}
 8006534:	b086      	sub	sp, #24
 8006536:	af00      	add	r7, sp, #0
 8006538:	6078      	str	r0, [r7, #4]
 800653a:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800653e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8006542:	2300      	movs	r3, #0
 8006544:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800654a:	2300      	movs	r3, #0
 800654c:	613b      	str	r3, [r7, #16]
 800654e:	e009      	b.n	8006564 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8006550:	687a      	ldr	r2, [r7, #4]
 8006552:	693b      	ldr	r3, [r7, #16]
 8006554:	3340      	adds	r3, #64	@ 0x40
 8006556:	009b      	lsls	r3, r3, #2
 8006558:	4413      	add	r3, r2
 800655a:	2200      	movs	r2, #0
 800655c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800655e:	693b      	ldr	r3, [r7, #16]
 8006560:	3301      	adds	r3, #1
 8006562:	613b      	str	r3, [r7, #16]
 8006564:	693b      	ldr	r3, [r7, #16]
 8006566:	2b0e      	cmp	r3, #14
 8006568:	d9f2      	bls.n	8006550 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800656a:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800656e:	2b00      	cmp	r3, #0
 8006570:	d11c      	bne.n	80065ac <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006578:	685b      	ldr	r3, [r3, #4]
 800657a:	68fa      	ldr	r2, [r7, #12]
 800657c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006580:	f043 0302 	orr.w	r3, r3, #2
 8006584:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800658a:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	601a      	str	r2, [r3, #0]
 80065aa:	e005      	b.n	80065b8 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80065b0:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80065be:	461a      	mov	r2, r3
 80065c0:	2300      	movs	r3, #0
 80065c2:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80065c4:	2103      	movs	r1, #3
 80065c6:	6878      	ldr	r0, [r7, #4]
 80065c8:	f000 f95a 	bl	8006880 <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80065cc:	2110      	movs	r1, #16
 80065ce:	6878      	ldr	r0, [r7, #4]
 80065d0:	f000 f8f6 	bl	80067c0 <USB_FlushTxFifo>
 80065d4:	4603      	mov	r3, r0
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d001      	beq.n	80065de <USB_DevInit+0xae>
  {
    ret = HAL_ERROR;
 80065da:	2301      	movs	r3, #1
 80065dc:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80065de:	6878      	ldr	r0, [r7, #4]
 80065e0:	f000 f920 	bl	8006824 <USB_FlushRxFifo>
 80065e4:	4603      	mov	r3, r0
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d001      	beq.n	80065ee <USB_DevInit+0xbe>
  {
    ret = HAL_ERROR;
 80065ea:	2301      	movs	r3, #1
 80065ec:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80065f4:	461a      	mov	r2, r3
 80065f6:	2300      	movs	r3, #0
 80065f8:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006600:	461a      	mov	r2, r3
 8006602:	2300      	movs	r3, #0
 8006604:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800660c:	461a      	mov	r2, r3
 800660e:	2300      	movs	r3, #0
 8006610:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006612:	2300      	movs	r3, #0
 8006614:	613b      	str	r3, [r7, #16]
 8006616:	e043      	b.n	80066a0 <USB_DevInit+0x170>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006618:	693b      	ldr	r3, [r7, #16]
 800661a:	015a      	lsls	r2, r3, #5
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	4413      	add	r3, r2
 8006620:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800662a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800662e:	d118      	bne.n	8006662 <USB_DevInit+0x132>
    {
      if (i == 0U)
 8006630:	693b      	ldr	r3, [r7, #16]
 8006632:	2b00      	cmp	r3, #0
 8006634:	d10a      	bne.n	800664c <USB_DevInit+0x11c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8006636:	693b      	ldr	r3, [r7, #16]
 8006638:	015a      	lsls	r2, r3, #5
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	4413      	add	r3, r2
 800663e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006642:	461a      	mov	r2, r3
 8006644:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8006648:	6013      	str	r3, [r2, #0]
 800664a:	e013      	b.n	8006674 <USB_DevInit+0x144>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800664c:	693b      	ldr	r3, [r7, #16]
 800664e:	015a      	lsls	r2, r3, #5
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	4413      	add	r3, r2
 8006654:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006658:	461a      	mov	r2, r3
 800665a:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800665e:	6013      	str	r3, [r2, #0]
 8006660:	e008      	b.n	8006674 <USB_DevInit+0x144>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8006662:	693b      	ldr	r3, [r7, #16]
 8006664:	015a      	lsls	r2, r3, #5
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	4413      	add	r3, r2
 800666a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800666e:	461a      	mov	r2, r3
 8006670:	2300      	movs	r3, #0
 8006672:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8006674:	693b      	ldr	r3, [r7, #16]
 8006676:	015a      	lsls	r2, r3, #5
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	4413      	add	r3, r2
 800667c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006680:	461a      	mov	r2, r3
 8006682:	2300      	movs	r3, #0
 8006684:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8006686:	693b      	ldr	r3, [r7, #16]
 8006688:	015a      	lsls	r2, r3, #5
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	4413      	add	r3, r2
 800668e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006692:	461a      	mov	r2, r3
 8006694:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8006698:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800669a:	693b      	ldr	r3, [r7, #16]
 800669c:	3301      	adds	r3, #1
 800669e:	613b      	str	r3, [r7, #16]
 80066a0:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80066a4:	461a      	mov	r2, r3
 80066a6:	693b      	ldr	r3, [r7, #16]
 80066a8:	4293      	cmp	r3, r2
 80066aa:	d3b5      	bcc.n	8006618 <USB_DevInit+0xe8>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80066ac:	2300      	movs	r3, #0
 80066ae:	613b      	str	r3, [r7, #16]
 80066b0:	e043      	b.n	800673a <USB_DevInit+0x20a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80066b2:	693b      	ldr	r3, [r7, #16]
 80066b4:	015a      	lsls	r2, r3, #5
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	4413      	add	r3, r2
 80066ba:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80066c4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80066c8:	d118      	bne.n	80066fc <USB_DevInit+0x1cc>
    {
      if (i == 0U)
 80066ca:	693b      	ldr	r3, [r7, #16]
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d10a      	bne.n	80066e6 <USB_DevInit+0x1b6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80066d0:	693b      	ldr	r3, [r7, #16]
 80066d2:	015a      	lsls	r2, r3, #5
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	4413      	add	r3, r2
 80066d8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80066dc:	461a      	mov	r2, r3
 80066de:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80066e2:	6013      	str	r3, [r2, #0]
 80066e4:	e013      	b.n	800670e <USB_DevInit+0x1de>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80066e6:	693b      	ldr	r3, [r7, #16]
 80066e8:	015a      	lsls	r2, r3, #5
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	4413      	add	r3, r2
 80066ee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80066f2:	461a      	mov	r2, r3
 80066f4:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80066f8:	6013      	str	r3, [r2, #0]
 80066fa:	e008      	b.n	800670e <USB_DevInit+0x1de>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80066fc:	693b      	ldr	r3, [r7, #16]
 80066fe:	015a      	lsls	r2, r3, #5
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	4413      	add	r3, r2
 8006704:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006708:	461a      	mov	r2, r3
 800670a:	2300      	movs	r3, #0
 800670c:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800670e:	693b      	ldr	r3, [r7, #16]
 8006710:	015a      	lsls	r2, r3, #5
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	4413      	add	r3, r2
 8006716:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800671a:	461a      	mov	r2, r3
 800671c:	2300      	movs	r3, #0
 800671e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8006720:	693b      	ldr	r3, [r7, #16]
 8006722:	015a      	lsls	r2, r3, #5
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	4413      	add	r3, r2
 8006728:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800672c:	461a      	mov	r2, r3
 800672e:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8006732:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006734:	693b      	ldr	r3, [r7, #16]
 8006736:	3301      	adds	r3, #1
 8006738:	613b      	str	r3, [r7, #16]
 800673a:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800673e:	461a      	mov	r2, r3
 8006740:	693b      	ldr	r3, [r7, #16]
 8006742:	4293      	cmp	r3, r2
 8006744:	d3b5      	bcc.n	80066b2 <USB_DevInit+0x182>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800674c:	691b      	ldr	r3, [r3, #16]
 800674e:	68fa      	ldr	r2, [r7, #12]
 8006750:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006754:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006758:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	2200      	movs	r2, #0
 800675e:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8006766:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	699b      	ldr	r3, [r3, #24]
 800676c:	f043 0210 	orr.w	r2, r3, #16
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	699a      	ldr	r2, [r3, #24]
 8006778:	4b10      	ldr	r3, [pc, #64]	@ (80067bc <USB_DevInit+0x28c>)
 800677a:	4313      	orrs	r3, r2
 800677c:	687a      	ldr	r2, [r7, #4]
 800677e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8006780:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8006784:	2b00      	cmp	r3, #0
 8006786:	d005      	beq.n	8006794 <USB_DevInit+0x264>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	699b      	ldr	r3, [r3, #24]
 800678c:	f043 0208 	orr.w	r2, r3, #8
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8006794:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8006798:	2b01      	cmp	r3, #1
 800679a:	d107      	bne.n	80067ac <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	699b      	ldr	r3, [r3, #24]
 80067a0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80067a4:	f043 0304 	orr.w	r3, r3, #4
 80067a8:	687a      	ldr	r2, [r7, #4]
 80067aa:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80067ac:	7dfb      	ldrb	r3, [r7, #23]
}
 80067ae:	4618      	mov	r0, r3
 80067b0:	3718      	adds	r7, #24
 80067b2:	46bd      	mov	sp, r7
 80067b4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80067b8:	b004      	add	sp, #16
 80067ba:	4770      	bx	lr
 80067bc:	803c3800 	.word	0x803c3800

080067c0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80067c0:	b480      	push	{r7}
 80067c2:	b085      	sub	sp, #20
 80067c4:	af00      	add	r7, sp, #0
 80067c6:	6078      	str	r0, [r7, #4]
 80067c8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80067ca:	2300      	movs	r3, #0
 80067cc:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	3301      	adds	r3, #1
 80067d2:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80067da:	d901      	bls.n	80067e0 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80067dc:	2303      	movs	r3, #3
 80067de:	e01b      	b.n	8006818 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	691b      	ldr	r3, [r3, #16]
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	daf2      	bge.n	80067ce <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80067e8:	2300      	movs	r3, #0
 80067ea:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80067ec:	683b      	ldr	r3, [r7, #0]
 80067ee:	019b      	lsls	r3, r3, #6
 80067f0:	f043 0220 	orr.w	r2, r3, #32
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	3301      	adds	r3, #1
 80067fc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006804:	d901      	bls.n	800680a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8006806:	2303      	movs	r3, #3
 8006808:	e006      	b.n	8006818 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	691b      	ldr	r3, [r3, #16]
 800680e:	f003 0320 	and.w	r3, r3, #32
 8006812:	2b20      	cmp	r3, #32
 8006814:	d0f0      	beq.n	80067f8 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8006816:	2300      	movs	r3, #0
}
 8006818:	4618      	mov	r0, r3
 800681a:	3714      	adds	r7, #20
 800681c:	46bd      	mov	sp, r7
 800681e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006822:	4770      	bx	lr

08006824 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006824:	b480      	push	{r7}
 8006826:	b085      	sub	sp, #20
 8006828:	af00      	add	r7, sp, #0
 800682a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800682c:	2300      	movs	r3, #0
 800682e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	3301      	adds	r3, #1
 8006834:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800683c:	d901      	bls.n	8006842 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800683e:	2303      	movs	r3, #3
 8006840:	e018      	b.n	8006874 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	691b      	ldr	r3, [r3, #16]
 8006846:	2b00      	cmp	r3, #0
 8006848:	daf2      	bge.n	8006830 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800684a:	2300      	movs	r3, #0
 800684c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	2210      	movs	r2, #16
 8006852:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	3301      	adds	r3, #1
 8006858:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006860:	d901      	bls.n	8006866 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8006862:	2303      	movs	r3, #3
 8006864:	e006      	b.n	8006874 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	691b      	ldr	r3, [r3, #16]
 800686a:	f003 0310 	and.w	r3, r3, #16
 800686e:	2b10      	cmp	r3, #16
 8006870:	d0f0      	beq.n	8006854 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8006872:	2300      	movs	r3, #0
}
 8006874:	4618      	mov	r0, r3
 8006876:	3714      	adds	r7, #20
 8006878:	46bd      	mov	sp, r7
 800687a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800687e:	4770      	bx	lr

08006880 <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8006880:	b480      	push	{r7}
 8006882:	b085      	sub	sp, #20
 8006884:	af00      	add	r7, sp, #0
 8006886:	6078      	str	r0, [r7, #4]
 8006888:	460b      	mov	r3, r1
 800688a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006896:	681a      	ldr	r2, [r3, #0]
 8006898:	78fb      	ldrb	r3, [r7, #3]
 800689a:	68f9      	ldr	r1, [r7, #12]
 800689c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80068a0:	4313      	orrs	r3, r2
 80068a2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80068a4:	2300      	movs	r3, #0
}
 80068a6:	4618      	mov	r0, r3
 80068a8:	3714      	adds	r7, #20
 80068aa:	46bd      	mov	sp, r7
 80068ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068b0:	4770      	bx	lr

080068b2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80068b2:	b480      	push	{r7}
 80068b4:	b085      	sub	sp, #20
 80068b6:	af00      	add	r7, sp, #0
 80068b8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	68fa      	ldr	r2, [r7, #12]
 80068c8:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80068cc:	f023 0303 	bic.w	r3, r3, #3
 80068d0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80068d8:	685b      	ldr	r3, [r3, #4]
 80068da:	68fa      	ldr	r2, [r7, #12]
 80068dc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80068e0:	f043 0302 	orr.w	r3, r3, #2
 80068e4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80068e6:	2300      	movs	r3, #0
}
 80068e8:	4618      	mov	r0, r3
 80068ea:	3714      	adds	r7, #20
 80068ec:	46bd      	mov	sp, r7
 80068ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068f2:	4770      	bx	lr

080068f4 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 80068f4:	b480      	push	{r7}
 80068f6:	b083      	sub	sp, #12
 80068f8:	af00      	add	r7, sp, #0
 80068fa:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	695b      	ldr	r3, [r3, #20]
 8006900:	f003 0301 	and.w	r3, r3, #1
}
 8006904:	4618      	mov	r0, r3
 8006906:	370c      	adds	r7, #12
 8006908:	46bd      	mov	sp, r7
 800690a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800690e:	4770      	bx	lr

08006910 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006910:	b480      	push	{r7}
 8006912:	b085      	sub	sp, #20
 8006914:	af00      	add	r7, sp, #0
 8006916:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006918:	2300      	movs	r3, #0
 800691a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	3301      	adds	r3, #1
 8006920:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006928:	d901      	bls.n	800692e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800692a:	2303      	movs	r3, #3
 800692c:	e01b      	b.n	8006966 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	691b      	ldr	r3, [r3, #16]
 8006932:	2b00      	cmp	r3, #0
 8006934:	daf2      	bge.n	800691c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006936:	2300      	movs	r3, #0
 8006938:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	691b      	ldr	r3, [r3, #16]
 800693e:	f043 0201 	orr.w	r2, r3, #1
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	3301      	adds	r3, #1
 800694a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006952:	d901      	bls.n	8006958 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006954:	2303      	movs	r3, #3
 8006956:	e006      	b.n	8006966 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	691b      	ldr	r3, [r3, #16]
 800695c:	f003 0301 	and.w	r3, r3, #1
 8006960:	2b01      	cmp	r3, #1
 8006962:	d0f0      	beq.n	8006946 <USB_CoreReset+0x36>

  return HAL_OK;
 8006964:	2300      	movs	r3, #0
}
 8006966:	4618      	mov	r0, r3
 8006968:	3714      	adds	r7, #20
 800696a:	46bd      	mov	sp, r7
 800696c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006970:	4770      	bx	lr

08006972 <memset>:
 8006972:	4402      	add	r2, r0
 8006974:	4603      	mov	r3, r0
 8006976:	4293      	cmp	r3, r2
 8006978:	d100      	bne.n	800697c <memset+0xa>
 800697a:	4770      	bx	lr
 800697c:	f803 1b01 	strb.w	r1, [r3], #1
 8006980:	e7f9      	b.n	8006976 <memset+0x4>
	...

08006984 <__libc_init_array>:
 8006984:	b570      	push	{r4, r5, r6, lr}
 8006986:	4d0d      	ldr	r5, [pc, #52]	@ (80069bc <__libc_init_array+0x38>)
 8006988:	4c0d      	ldr	r4, [pc, #52]	@ (80069c0 <__libc_init_array+0x3c>)
 800698a:	1b64      	subs	r4, r4, r5
 800698c:	10a4      	asrs	r4, r4, #2
 800698e:	2600      	movs	r6, #0
 8006990:	42a6      	cmp	r6, r4
 8006992:	d109      	bne.n	80069a8 <__libc_init_array+0x24>
 8006994:	4d0b      	ldr	r5, [pc, #44]	@ (80069c4 <__libc_init_array+0x40>)
 8006996:	4c0c      	ldr	r4, [pc, #48]	@ (80069c8 <__libc_init_array+0x44>)
 8006998:	f000 f818 	bl	80069cc <_init>
 800699c:	1b64      	subs	r4, r4, r5
 800699e:	10a4      	asrs	r4, r4, #2
 80069a0:	2600      	movs	r6, #0
 80069a2:	42a6      	cmp	r6, r4
 80069a4:	d105      	bne.n	80069b2 <__libc_init_array+0x2e>
 80069a6:	bd70      	pop	{r4, r5, r6, pc}
 80069a8:	f855 3b04 	ldr.w	r3, [r5], #4
 80069ac:	4798      	blx	r3
 80069ae:	3601      	adds	r6, #1
 80069b0:	e7ee      	b.n	8006990 <__libc_init_array+0xc>
 80069b2:	f855 3b04 	ldr.w	r3, [r5], #4
 80069b6:	4798      	blx	r3
 80069b8:	3601      	adds	r6, #1
 80069ba:	e7f2      	b.n	80069a2 <__libc_init_array+0x1e>
 80069bc:	08006a34 	.word	0x08006a34
 80069c0:	08006a34 	.word	0x08006a34
 80069c4:	08006a34 	.word	0x08006a34
 80069c8:	08006a38 	.word	0x08006a38

080069cc <_init>:
 80069cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80069ce:	bf00      	nop
 80069d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80069d2:	bc08      	pop	{r3}
 80069d4:	469e      	mov	lr, r3
 80069d6:	4770      	bx	lr

080069d8 <_fini>:
 80069d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80069da:	bf00      	nop
 80069dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80069de:	bc08      	pop	{r3}
 80069e0:	469e      	mov	lr, r3
 80069e2:	4770      	bx	lr
